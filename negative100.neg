scheduled poll consumer - Add option to limit number of polls In the timer/scheduler component you can set a max number of polls so the consumer stop after that.We could add something similar so you can eg tell the consumer to run only once etc. Improvement scheduled poll consumer - Add option to limit number of polls In the timer/scheduler component you can set a max number of polls so the consumer stop after that.We could add something similar so you can eg tell the consumer to run only once etc.
DefaultRegistry - findByType should return merged result incl fallback Reported by Luca in camel-quarkus Improvement DefaultRegistry - findByType should return merged result incl fallback Reported by Luca in camel-quarkus
Orderes RoutesBuilder RoutesBuilder are now loaded according to the order the user add them but in some cases it may be needed to load them according to an order.We should then make the RoutesBuilder interface extends Ordered and take it into account i.e. in MainSupport. Improvement Orderes RoutesBuilder RoutesBuilder are now loaded according to the order the user add them but in some cases it may be needed to load them according to an order.We should then make the RoutesBuilder interface extends Ordered and take it into account i.e. in MainSupport.
Move process control from Main to MainSupport org.apache.camel.main.MainSupport is now in charge to parse command line arguments, keep the process up according to some policies, intercepts shutdown events and so on.To make it easier to re-use MainSupport in other projects such as camel-quarkus where as example there's no control over command line arguments, it would be nice to move the process control logic to org.apache.camel.main.Main.[~davsclaus] does it make sense or there is something I haven't taken into account ? Improvement Move process control from Main to MainSupport org.apache.camel.main.MainSupport is now in charge to parse command line arguments, keep the process up according to some policies, intercepts shutdown events and so on.To make it easier to re-use MainSupport in other projects such as camel-quarkus where as example there's no control over command line arguments, it would be nice to move the process control logic to org.apache.camel.main.Main.[~davsclaus] does it make sense or there is something I haven't taken into account ?
SJMS-Batch does not support CompletionAware aggregators SJMS-Batch isn't aware of the CompletionAwareAggregationStrategy interface and so never calls the completion method.This prevents SJMS-Batch from working as expected with built in aggregators such as org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy - the aggregated message remains as an exchange header instead of being the message body.  Improvement SJMS-Batch does not support CompletionAware aggregators SJMS-Batch isn't aware of the CompletionAwareAggregationStrategy interface and so never calls the completion method.This prevents SJMS-Batch from working as expected with built in aggregators such as org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy - the aggregated message remains as an exchange header instead of being the message body. 
camel-core vs camel-core-engine The camel-core-engine trims camel-core using maven exclusions which may lead to unexpected result as if both are present in the dependencies tree, then one may win over the other depending of the maven resolution. Improvement camel-core vs camel-core-engine The camel-core-engine trims camel-core using maven exclusions which may lead to unexpected result as if both are present in the dependencies tree, then one may win over the other depending of the maven resolution.
Create a configuration service instead of leveraging the properties component As today the way camel resolves properties/configuration is trough the Properties Component which leads to a chicken and egg problem as:- camel core depends on properties component- the properties component depends on camel coreWe should probably have a proper configuration service part of camel core that can eventually be leveraged by the Properties Component. Improvement Create a configuration service instead of leveraging the properties component As today the way camel resolves properties/configuration is trough the Properties Component which leads to a chicken and egg problem as:- camel core depends on properties component- the properties component depends on camel coreWe should probably have a proper configuration service part of camel core that can eventually be leveraged by the Properties Component.
camel3 - Rename camel-management-impl to camel-management Lets avoid the -impl in the name as its the only Camel artifact that has this ending. Task camel3 - Rename camel-management-impl to camel-management Lets avoid the -impl in the name as its the only Camel artifact that has this ending.
SNMP Component support ‘snmp walk’ The current version, the SNMP Component can not support 'snmp walk'.Although the source code has appear 'GET_NEXT' in SnmpActionType.java, but no found in processor.Now, i add the 'snmp walk' and in my application it run successfully.So, if it need add to the next camel version, please check.Thanks! New Feature SNMP Component support 'snmp walk' The current version, the SNMP Component can not support 'snmp walk'.Although the source code has appear 'GET_NEXT' in SnmpActionType.java, but no found in processor.Now, i add the 'snmp walk' and in my application it run successfully.So, if it need add to the next camel version, please check.Thanks!
camel3 - ApiEndpoint should extend ScheduledPollEndpoint As the ApiConsumer is scheduled poll based, but the endpoint was not its base class. Then options get out of sync and not documented either. Improvement camel3 - ApiEndpoint should extend ScheduledPollEndpoint As the ApiConsumer is scheduled poll based, but the endpoint was not its base class. Then options get out of sync and not documented either.
camel-seda - SedaConsumer should extend DefaultConsumer So its like the other components where we extend default classes Improvement camel-seda - SedaConsumer should extend DefaultConsumer So its like the other components where we extend default classes
camel3 - camel-http - Remove deprecate url rewrite UrlRewrite has been deprecated on 2.x, and should be removed for 3 Task camel3 - camel-http - Remove deprecate url rewrite UrlRewrite has been deprecated on 2.x, and should be removed for 3
camel3 - Deprecate and remove consumer.xxx syntax for delay options You can configure them on the endpoint directly, so consumer.delay=5000 should just be delay=5000 and so on. Task camel3 - Deprecate and remove consumer.xxx syntax for delay options You can configure them on the endpoint directly, so consumer.delay=5000 should just be delay=5000 and so on.
camel3 - components - Use BeanIntrospection instead of IntrospectionSupport They should use BeanIntrosepction which you can get from camel context Task camel3 - components - Use BeanIntrospection instead of IntrospectionSupport They should use BeanIntrosepction which you can get from camel context
camel3 - JMX can clear its bean introspection cache after all MBeans have been registered Those are no longer needed and it can free up a bit of memory hold by the cache. Mind the cache is weak anyway, but this makes it more explicit Task camel3 - JMX can clear its bean introspection cache after all MBeans have been registered Those are no longer needed and it can free up a bit of memory hold by the cache. Mind the cache is weak anyway, but this makes it more explicit
Component options - Only include if they have @Metadata Properties component include some options which should not be there, as we should only take the getter/setter pairs that have @Metadata annotation Task Component options - Only include if they have @Metadata Properties component include some options which should not be there, as we should only take the getter/setter pairs that have @Metadata annotation
camel-main-plugin - Dont run it automatic on compile Lets just add instructions in the readme and avoid running it on each build. Its used for setting up the project for tooling support, and if you want to have it to do auto-detection of certain JMS clients - eg ActiveMQ vs Artemis and adapt the project accordingly. Improvement camel-main-plugin - Dont run it automatic on compile Lets just add instructions in the readme and avoid running it on each build. Its used for setting up the project for tooling support, and if you want to have it to do auto-detection of certain JMS clients - eg ActiveMQ vs Artemis and adapt the project accordingly.
camel3 - TypeConverter(loader = true) rename to generateLoader We are using generateConfigurer for fast endpoint configurer, so lets rename this for type converter loader to generateLoader on these annotations Improvement camel3 - TypeConverter(loader = true) rename to generateLoader We are using generateConfigurer for fast endpoint configurer, so lets rename this for type converter loader to generateLoader on these annotations
camel3 - Fast configuring of endpoint options Like we did for fast property placeholders on EIPs we can optimize endpoints as well, by using the apt compiler plugin to generate a configurer classes that uses direct java method invocations and then the property builder support class can detect that we have such a configurer and use it, when it looks for the setter.  Improvement camel3 - Fast configuring of endpoint options Like we did for fast property placeholders on EIPs we can optimize endpoints as well, by using the apt compiler plugin to generate a configurer classes that uses direct java method invocations and then the property builder support class can detect that we have such a configurer and use it, when it looks for the setter. 
camel3 - Optimize XmlConverterLoader I wonder if we can optimize XmlConverterLoader this to init the getXmlConverter once only and avoid synchronized.It does take a bit time to load according to the yourkit profiler Improvement camel3 - Optimize XmlConverterLoader I wonder if we can optimize XmlConverterLoader this to init the getXmlConverter once only and avoid synchronized.It does take a bit time to load according to the yourkit profiler
camel3 - Property placeholders on EIP models can be optimized We do a bit of introspection on each model class to fin its getter/setter properties, which we can then use for property placeholders.org.apache.camel.model.ProcessorDefinitionHelper#resolvePropertyPlaceholdersWe should look at optimising this Improvement camel3 - Property placeholders on EIP models can be optimized We do a bit of introspection on each model class to fin its getter/setter properties, which we can then use for property placeholders.org.apache.camel.model.ProcessorDefinitionHelper#resolvePropertyPlaceholdersWe should look at optimising this
Support room password in camel-xmpp Camel-xmpp does not support room passwords at the moment. With small patch it could. Patch file included. Improvement Support room password in camel-xmpp Camel-xmpp does not support room passwords at the moment. With small patch it could. Patch file included.
Make PropertyBindingSupport a fluent builder only PropertyBindingSupport provides a number of flag to customize how properties should be bound to a target object and it is likely possible that in the future more flags are required so instead of adding yet another overloaded method for each flag we should turn PropertyBindingSupport intop a fluent builder Improvement Make PropertyBindingSupport a fluent builder only PropertyBindingSupport provides a number of flag to customize how properties should be bound to a target object and it is likely possible that in the future more flags are required so instead of adding yet another overloaded method for each flag we should turn PropertyBindingSupport intop a fluent builder
camel-telegram - Do not show authorizationToken in uri We should hide this sensitive information, this requires to migrate it from uri path to uri parameter instead.  Improvement camel-telegram - Do not show authorizationToken in uri We should hide this sensitive information, this requires to migrate it from uri path to uri parameter instead. 
camel3 - FactoryFinder - Return null if not found instead of exception When starting Camel we attempt to find custom factories for SPI. But this means we end up throwing 40+ exceptions just for a basic Camel route. We can optimize this to use null as response for "no factory exists". Improvement camel3 - FactoryFinder - Return null if not found instead of exception When starting Camel we attempt to find custom factories for SPI. But this means we end up throwing 40+ exceptions just for a basic Camel route. We can optimize this to use null as response for "no factory exists".
Properties component - Check ENV before JVM System property We should favour using OS ENV properties over JVM system properties out of the box, for the same keys. This works the best with containers and cloud platforms. Improvement Properties component - Check ENV before JVM System property We should favour using OS ENV properties over JVM system properties out of the box, for the same keys. This works the best with containers and cloud platforms.
Deprecate transferExchange option Its a bad design to transfer Camel Exchange Java objects over the wire. Lets deprecate it in 2.x and remove in 3.0.The camel-jms component has this option, and some of the http too, and others maybe. Improvement Deprecate transferExchange option Its a bad design to transfer Camel Exchange Java objects over the wire. Lets deprecate it in 2.x and remove in 3.0.The camel-jms component has this option, and some of the http too, and others maybe.
DefaultExchangeHolder - Do not propgate exchange id The exchange id should not be preserved as it should not mutate the existing ids Improvement DefaultExchangeHolder - Do not propgate exchange id The exchange id should not be preserved as it should not mutate the existing ids
ResolveEndpointFailedException should mask sensitive information in uri Misconfiguration of routes throws ResolveEndpointFailedException.This exception prints sensitive information like passwords which should be masked. Improvement ResolveEndpointFailedException should mask sensitive information in uri Misconfiguration of routes throws ResolveEndpointFailedException.This exception prints sensitive information like passwords which should be masked.
camel3 - Always log ERROR if failed to start CamelContext As starting Camel mail fail then lets ensure we always get the exception logged as we rethrow it out of start of camel context, and it may be that some runtimes may not log this, so you can have harder time find out why it failed. Improvement camel3 - Always log ERROR if failed to start CamelContext As starting Camel mail fail then lets ensure we always get the exception logged as we rethrow it out of start of camel context, and it may be that some runtimes may not log this, so you can have harder time find out why it failed.
camel-cdi: Remove support for multiple context via @ContextName (was: NPE with recent camel-cdi changes) {code}Exception 0 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderB] to Camel context [contextB]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderB] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 moreException 1 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderA] to Camel context [contextA]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderA] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 more"}}}}{code}CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2859 Improvement camel-cdi: Remove support for multiple context via @ContextName (was: NPE with recent camel-cdi changes) {code}Exception 0 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderB] to Camel context [contextB]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderB] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 moreException 1 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderA] to Camel context [contextA]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderA] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 more"}}}}{code}CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2859
Move @InvokeOnHeader/@InvokeOnHeaders to org.apache.camel.spi package Contributions is welcome, there is a number of components that are using these annotations which needs to be updated too Improvement Move @InvokeOnHeader/@InvokeOnHeaders to org.apache.camel.spi package Contributions is welcome, there is a number of components that are using these annotations which needs to be updated too
camel3 - Camel annotations with context ids should be deprecated We do not recommend having 2+ camel contexts per application / deployment unit. So we should deprecate these on these annotations as they should be for the current context only. Improvement camel3 - Camel annotations with context ids should be deprecated We do not recommend having 2+ camel contexts per application / deployment unit. So we should deprecate these on these annotations as they should be for the current context only.
camel3 - Message API - Deprecate OUT http://mail-archives.apache.org/mod_mbox/camel-dev/201907.mbox/%3CCAGB5yNkyx9LYk40UwGQdq_%2BiZH%3DOrqOifnqp%2BNL7vmv2TSJvnw%40mail.gmail.com%3E Improvement camel3 - Message API - Deprecate OUT http://mail-archives.apache.org/mod_mbox/camel-dev/201907.mbox/%3CCAGB5yNkyx9LYk40UwGQdq_%2BiZH%3DOrqOifnqp%2BNL7vmv2TSJvnw%40mail.gmail.com%3E
camel-zipfile - Accept an iterator as body for zip Accept iterator or Java 8 Stream as body to produce a zip file this will avoid to use the memory for big file (for some use case we can't get an inputStream)For example it would be very nice to be able to do this:{code:java}from("timer:foo?repeatCount=1")                .setBody(constant(Stream.of("v1", "v2")))                .setHeader(Exchange.FILE_NAME, constant("report.txt"))                .marshal().zipFile()                .to("file:output/directory");{code}(https://stackoverflow.com/questions/50295432/zip-and-unzip-a-large-file-without-loading-the-entire-file-in-memory-in-apache-c) Improvement camel-zipfile - Accept an iterator as body for zip Accept iterator or Java 8 Stream as body to produce a zip file this will avoid to use the memory for big file (for some use case we can't get an inputStream)For example it would be very nice to be able to do this:{code:java}from("timer:foo?repeatCount=1")                .setBody(constant(Stream.of("v1", "v2")))                .setHeader(Exchange.FILE_NAME, constant("report.txt"))                .marshal().zipFile()                .to("file:output/directory");{code}(https://stackoverflow.com/questions/50295432/zip-and-unzip-a-large-file-without-loading-the-entire-file-in-memory-in-apache-c)
elasticsearch-rest producer closes connection when route is reloaded from xml and stays closed When setting camel.springboot.xmlRoutesReloadDirectory, any route using the Elasticsearch rest producer will cause a shutdown of the http client. When reloading a route, the route will be stopped and client.close() is being called on RestClient. The shared http client will not be able to handle new requets because the reactor status is STOPPED. Improvement elasticsearch-rest producer closes connection when route is reloaded from xml and stays closed When setting camel.springboot.xmlRoutesReloadDirectory, any route using the Elasticsearch rest producer will cause a shutdown of the http client. When reloading a route, the route will be stopped and client.close() is being called on RestClient. The shared http client will not be able to handle new requets because the reactor status is STOPPED.
StartupListener runs before routes are started, contrary to Javadoc The Javadoc ([https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/StartupListener.html]) for StartupListener is misleading (italics for emphasis):{quote}This can be used to perform any custom work when the entire [{{CamelContext}}|https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/CamelContext.html] has been initialized and *almost* started. _For example this ensures that all Camel routes have been started and are up and running, before this callback is invoked._{quote}However, routes are not started within the callback. The following code, for example, {code:java}DefaultCamelContext context = new DefaultCamelContext();context.addStartupListener((c, alreadyStarted) -> {    c.createProducerTemplate().sendBody("direct:doesNotExistYet", new Object());});context.addRoutes(new RouteBuilder() {    @Override    public void configure() {        from("direct:doesNotExistYet").bean((Consumer<Object>) System.out::println);    }});context.start();{code}fails with{code}Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: direct://doesNotExistYet. Exchange[ID-x-1563396556957-0-1]	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:69)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)	... 12 more{code}I am aware that using ExtendedStartupListener or an EventNotifier makes this work, but it would be great if the Javadoc was updated (assuming this is intended behavior, I am not sure). Improvement StartupListener runs before routes are started, contrary to Javadoc The Javadoc ([https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/StartupListener.html]) for StartupListener is misleading (italics for emphasis):{quote}This can be used to perform any custom work when the entire [{{CamelContext}}|https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/CamelContext.html] has been initialized and *almost* started. _For example this ensures that all Camel routes have been started and are up and running, before this callback is invoked._{quote}However, routes are not started within the callback. The following code, for example, {code:java}DefaultCamelContext context = new DefaultCamelContext();context.addStartupListener((c, alreadyStarted) -> {    c.createProducerTemplate().sendBody("direct:doesNotExistYet", new Object());});context.addRoutes(new RouteBuilder() {    @Override    public void configure() {        from("direct:doesNotExistYet").bean((Consumer<Object>) System.out::println);    }});context.start();{code}fails with{code}Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: direct://doesNotExistYet. Exchange[ID-x-1563396556957-0-1]	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:69)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)	... 12 more{code}I am aware that using ExtendedStartupListener or an EventNotifier makes this work, but it would be great if the Javadoc was updated (assuming this is intended behavior, I am not sure).
camel3 - Property placeholder - Deprecate changing prefix/suffix tokens This causes some issues and its better we stick to one model the default of using {{ }} which is the Camel style. Improvement camel3 - Property placeholder - Deprecate changing prefix/suffix tokens This causes some issues and its better we stick to one model the default of using {{ }} which is the Camel style.
camel3 - Remove poor mans debugger We have an old debugger implementation that just have callbacks before|after a processor in the routes which you can then from camel-test override the before/after methods to have debugging in the editor.We should remove this as its using the intercept strategy which is intended not to be so much in use. So lets cleanup a bit of cruft. There is already the newer backlog debugger that hawtio and other tools uses for debugging. Improvement camel3 - Remove poor mans debugger We have an old debugger implementation that just have callbacks before|after a processor in the routes which you can then from camel-test override the before/after methods to have debugging in the editor.We should remove this as its using the intercept strategy which is intended not to be so much in use. So lets cleanup a bit of cruft. There is already the newer backlog debugger that hawtio and other tools uses for debugging.
Document for XStream JSON not proper The document of Json Xtream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/json-xstream-dataformat.adoc] is exactly identical to Xstream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/xstream-dataformat.adoc.] Although both uses same component, but JSON xtream document should have document on how to convert JSON to object and vis versa. But it also talks about XML. This needs to be improved. Improvement Document for XStream JSON not proper The document of Json Xtream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/json-xstream-dataformat.adoc] is exactly identical to Xstream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/xstream-dataformat.adoc.] Although both uses same component, but JSON xtream document should have document on how to convert JSON to object and vis versa. But it also talks about XML. This needs to be improved.
parent/pom.xml - use dash in version properties We should only use dashes in the names, eg         <javax.el-api-version>2.2.5</javax.el-api-version>        <javax.el-version>2.2.5</javax.el-version>        <javax.el3-version>3.0.0</javax.el3-version>        <javax.el-api-hibernate-validator-version>3.0.1-b04</javax.el-api-hibernate-validator-version>        <javax.el-hibernate-validator-version>3.0.1-b10</javax.el-hibernate-validator-version>Should bejavax-el-version and so forth. Also check if all of them are still in use?Contributions is welcome Task parent/pom.xml - use dash in version properties We should only use dashes in the names, eg         <javax.el-api-version>2.2.5</javax.el-api-version>        <javax.el-version>2.2.5</javax.el-version>        <javax.el3-version>3.0.0</javax.el3-version>        <javax.el-api-hibernate-validator-version>3.0.1-b04</javax.el-api-hibernate-validator-version>        <javax.el-hibernate-validator-version>3.0.1-b10</javax.el-hibernate-validator-version>Should bejavax-el-version and so forth. Also check if all of them are still in use?Contributions is welcome
Camel main - Support bean post processing on @BindToRegistry When creating a new bean such as@BindToRegistrypublic MyBean myBean() {  return new MyBean();}We can have a way to support bean post processing so we can do ioc injection on the created bean.There can maybe be an option on camel main you can turn on | off. Also we can support this for fields only, if you dont need to do any customization@BindToRegistryprivate MyBean myBean Improvement Camel main - Support bean post processing on @BindToRegistry When creating a new bean such as@BindToRegistrypublic MyBean myBean() {  return new MyBean();}We can have a way to support bean post processing so we can do ioc injection on the created bean.There can maybe be an option on camel main you can turn on | off. Also we can support this for fields only, if you dont need to do any customization@BindToRegistryprivate MyBean myBean
Converting to boolean should always be strict When converting to boolean (primitive) we should be strict and only allow this for a set of known types and values. Improvement Converting to boolean should always be strict When converting to boolean (primitive) we should be strict and only allow this for a set of known types and values.
NotifyBuilder MockComponent methods are deprecated and there is no replacement Several methods of the NotifyBuilder that receive MockComponent as a parameter are deprecated and are going to be removed from version 3+, but there is no viable replacement at the moment.From related email conversation ([http://mail-archives.apache.org/mod_mbox/camel-users/201907.mbox/%3CMWHPR11MB138984E7FFB0DA82C043F4F395FA0%40MWHPR11MB1389.namprd11.prod.outlook.com%3E]):Claus> Well we can take a look at adding some kind of SPI interface that advice with can use and then mock implement that.And then potentially other components can be used too (in theory). Task NotifyBuilder MockComponent methods are deprecated and there is no replacement Several methods of the NotifyBuilder that receive MockComponent as a parameter are deprecated and are going to be removed from version 3+, but there is no viable replacement at the moment.From related email conversation ([http://mail-archives.apache.org/mod_mbox/camel-users/201907.mbox/%3CMWHPR11MB138984E7FFB0DA82C043F4F395FA0%40MWHPR11MB1389.namprd11.prod.outlook.com%3E]):Claus> Well we can take a look at adding some kind of SPI interface that advice with can use and then mock implement that.And then potentially other components can be used too (in theory).
Endpoint DSL - Do not generate path parameters as they cannot be set individually For examplebean("").beanName("myBean")is not working, you should dobean("myBean");For the former to work we need to allow to dobean().beanName()...And have the endpoint DSL know its a path parameter and built the uri correctly which is hard as this requires camel-catalog to build the uri as it knows all the complexity of building with path parameters.  Improvement Endpoint DSL - Do not generate path parameters as they cannot be set individually For examplebean("").beanName("myBean")is not working, you should dobean("myBean");For the former to work we need to allow to dobean().beanName()...And have the endpoint DSL know its a path parameter and built the uri correctly which is hard as this requires camel-catalog to build the uri as it knows all the complexity of building with path parameters. 
Endpoint DSL - Add to javadoc if an option is required When an option has required=true in the metadata we should add that to the endpoint DSL javadoc, eg{code}        /**         * Whether the topic is persistent or non-persistent.         * The option is a <code>java.lang.String</code> type.         * @group common         */        default PulsarEndpointConsumerBuilder persistence(String persistence) {            setProperty("persistence", persistence);            return this;        }{code}This option is required. Also not sure if @group is a valid javadoc syntax Improvement Endpoint DSL - Add to javadoc if an option is required When an option has required=true in the metadata we should add that to the endpoint DSL javadoc, eg{code}        /**         * Whether the topic is persistent or non-persistent.         * The option is a <code>java.lang.String</code> type.         * @group common         */        default PulsarEndpointConsumerBuilder persistence(String persistence) {            setProperty("persistence", persistence);            return this;        }{code}This option is required. Also not sure if @group is a valid javadoc syntax
Properties component - Make it simpler by removing not often used stuff We can remove the properties component that is using uris, egproperties:myKeyWhich would create an endpoint with myKey as the url (eg delegate). But you can do that today with {{myKey}}.Also we can remove the support for using location paths that has not been pre-configured, as that makes it more complex in terms of init logic. As we want to be able to optimize for property placeholders during build time and whatnot Improvement Properties component - Make it simpler by removing not often used stuff We can remove the properties component that is using uris, egproperties:myKeyWhich would create an endpoint with myKey as the url (eg delegate). But you can do that today with {{myKey}}.Also we can remove the support for using location paths that has not been pre-configured, as that makes it more complex in terms of init logic. As we want to be able to optimize for property placeholders during build time and whatnot
Properties component - Remove complexity of augemented properties parser The need for CAMEL-4520 is not needed and makes the logic too complex. Lets remove this stuff and just use the simpler parser Improvement Properties component - Remove complexity of augemented properties parser The need for CAMEL-4520 is not needed and makes the logic too complex. Lets remove this stuff and just use the simpler parser
If a javax.mail.Session gets referred to using the "session" URL parameter, Apache Camel Mail ignored its hostnames. {color:#658aba}A javax.mail.Session injected using JNDI can refer to one host per protocol. Referring to such a session using the URL query string parameter session=#jndiName seems to ignore the hosts the session is bound to:{color}{color:#658aba}My first try was simply e.g. "smtp://?session=#jndiName". Now Apache Camel Mail complains about a missing hostname.{color}{color:#658aba}So I tried "smtp://localhost?session=#jndiName" expecting that "localhost" would have been overridden using the SMTP host the session refers to, which is not the case. Camel complains that no SMTP server was listening on the host named "localhost".{color}{color:#658aba}The workaround that works – but is somehow redundant in my opinion – is:{color}{{{color:#3381ff}@Resource{color}(mappedName = {color:#658aba}"jndiName"{color})}} {{ {color:#000080}private {color}Session {color:#1948a6}mySession{color};}}{{{color:#658aba}...to("smtp://"+{color}{color:#1948a6}mySession{color}.getProperty({color:#658aba}"mail.smtp.host"{color})+"{color:#658aba}?session=#jndiName")...{color}}}{color:#658aba}The same also applies to the IMAP server (and likely to the other protocols supported by Java Mail as well).{color}{color:#658aba}It would be nice iff referring to a JNDI injected session would take the session as-is to simplify the URL.{color}{color:#658aba}I found an example for using the "session" parameter: "MailUsingCustomSessionTest". It would be helpful to have another example at hand that either takes the hostname from the session as my example above or that does not contain a hostname at all, given, Apache Camel Mail will support that in the future.{color} Improvement If a javax.mail.Session gets referred to using the "session" URL parameter, Apache Camel Mail ignored its hostnames. {color:#658aba}A javax.mail.Session injected using JNDI can refer to one host per protocol. Referring to such a session using the URL query string parameter session=#jndiName seems to ignore the hosts the session is bound to:{color}{color:#658aba}My first try was simply e.g. "smtp://?session=#jndiName". Now Apache Camel Mail complains about a missing hostname.{color}{color:#658aba}So I tried "smtp://localhost?session=#jndiName" expecting that "localhost" would have been overridden using the SMTP host the session refers to, which is not the case. Camel complains that no SMTP server was listening on the host named "localhost".{color}{color:#658aba}The workaround that works - but is somehow redundant in my opinion - is:{color}{{{color:#3381ff}@Resource{color}(mappedName = {color:#658aba}"jndiName"{color})}} {{ {color:#000080}private {color}Session {color:#1948a6}mySession{color};}}{{{color:#658aba}...to("smtp://"+{color}{color:#1948a6}mySession{color}.getProperty({color:#658aba}"mail.smtp.host"{color})+"{color:#658aba}?session=#jndiName")...{color}}}{color:#658aba}The same also applies to the IMAP server (and likely to the other protocols supported by Java Mail as well).{color}{color:#658aba}It would be nice iff referring to a JNDI injected session would take the session as-is to simplify the URL.{color}{color:#658aba}I found an example for using the "session" parameter: "MailUsingCustomSessionTest". It would be helpful to have another example at hand that either takes the hostname from the session as my example above or that does not contain a hostname at all, given, Apache Camel Mail will support that in the future.{color}
Properties component - Optimise to not call loadProperties to frequently The camel-properties calls loadProperties to load all the properties. But it tend to do this for each parseUri for custom PropertiesSource and other means which can be optimised.The cache is based on properties location only. Improvement Properties component - Optimise to not call loadProperties to frequently The camel-properties calls loadProperties to load all the properties. But it tend to do this for each parseUri for custom PropertiesSource and other means which can be optimised.The cache is based on properties location only.
PropertiesSource to resolve a single property CAMEL-13705 introduces support for property sources such as MP Config and others and at the moment it does require to load all the properties upfront on source initialization.It would be nice to have an additional method to resolve a single property as some back-and may perform some I/O to resolve properties and get alll of them could be expensive.So the properties component should:- leverage PropertiesSource::loadPropertiers() when is is required to know all the properties (i.e. when auto configure components in camel main)- leverage a new PropertiesSource::resolveProperty(String) when it just need to resolve a single property Improvement PropertiesSource to resolve a single property CAMEL-13705 introduces support for property sources such as MP Config and others and at the moment it does require to load all the properties upfront on source initialization.It would be nice to have an additional method to resolve a single property as some back-and may perform some I/O to resolve properties and get alll of them could be expensive.So the properties component should:- leverage PropertiesSource::loadPropertiers() when is is required to know all the properties (i.e. when auto configure components in camel main)- leverage a new PropertiesSource::resolveProperty(String) when it just need to resolve a single property
Properties component should work with Eclipse MicroProfile Config We should integrate with MP Config so you can build MP apps and have Camel's properties component use their properties.We should allow to auto-detect this if eg a camel-microprofile-config is on the classpath and then setup this bridge automatic. New Feature Properties component should work with Eclipse MicroProfile Config We should integrate with MP Config so you can build MP apps and have Camel's properties component use their properties.We should allow to auto-detect this if eg a camel-microprofile-config is on the classpath and then setup this bridge automatic.
camel-main-maven-plugin - Only download sources JAR if really neesed We can improve the logic to detect if there are new components and then only if so, download sources jar if needed for options that need documentation. Improvement camel-main-maven-plugin - Only download sources JAR if really neesed We can improve the logic to detect if there are new components and then only if so, download sources jar if needed for options that need documentation.
URISupport - Mask accessToken and clientSecret in uri logging We should also mask accessToken and clientSecret in uri outputs as they are sensitive data. Improvement URISupport - Mask accessToken and clientSecret in uri logging We should also mask accessToken and clientSecret in uri outputs as they are sensitive data.
camel-core - Injector allow to create beans via static factory methods We should support creating beans via static factory methods that they sometime have instead of constructors, such ascamel.component.quartz2.scheduler-factory=#class:org.quartz.impl.DirectSchedulerFactory#getInstance Improvement camel-core - Injector allow to create beans via static factory methods We should support creating beans via static factory methods that they sometime have instead of constructors, such ascamel.component.quartz2.scheduler-factory=#class:org.quartz.impl.DirectSchedulerFactory#getInstance
Easier way to extend PropertiesComponent The current implementation of the PropertiesComponent is very oriented to paths and location and it is not very easy to provide alternative back-ends i.e MP Config or HashiCorp Vault.We may need to re-think the PropertiesComponent interface and reason in term of ordered "property sources", like:{code}ProertiesComponent cp = new ProertiesComponent()cp.addSource(new ValutPropertiesSource())cp.addSource(new PathPropertiesSource())cp.addSource(PropertiesSource.wrap(properties))...{code} Improvement Easier way to extend PropertiesComponent The current implementation of the PropertiesComponent is very oriented to paths and location and it is not very easy to provide alternative back-ends i.e MP Config or HashiCorp Vault.We may need to re-think the PropertiesComponent interface and reason in term of ordered "property sources", like:{code}ProertiesComponent cp = new ProertiesComponent()cp.addSource(new ValutPropertiesSource())cp.addSource(new PathPropertiesSource())cp.addSource(PropertiesSource.wrap(properties))...{code}
camel-main - Add option to ignore unknown options For example if you have OS ENV variables set that will not be in use because a component is not being used or something.  Improvement camel-main - Add option to ignore unknown options For example if you have OS ENV variables set that will not be in use because a component is not being used or something. 
Camel main - Setting boolean option should have strict conversition If you set an option likecamel.main.allow-use-original-message=123Then its set as false, because we do a Boolean.valueOf convertion which just checks if its "true" or not. Instead we should only allow string values of "true" or "false" otherwise its a invalid value. Improvement Camel main - Setting boolean option should have strict conversition If you set an option likecamel.main.allow-use-original-message=123Then its set as false, because we do a Boolean.valueOf convertion which just checks if its "true" or not. Instead we should only allow string values of "true" or "false" otherwise its a invalid value.
camel-main - Add option for verbose logging of configuration So end users can just set an optioncamel.main.configuration-logging=trueOr something like that to get verbose INFO logging of how all these configurations are computed so you can use that to track if something seems not correct. Improvement camel-main - Add option for verbose logging of configuration So end users can just set an optioncamel.main.configuration-logging=trueOr something like that to get verbose INFO logging of how all these configurations are computed so you can use that to track if something seems not correct.
camel-rabbitmq  Thread name for route set to endpoint uri change thread name of rabbitmq routes from "RabbitMQConsumer" to  its endpoint uri Improvement camel-rabbitmq  Thread name for route set to endpoint uri change thread name of rabbitmq routes from "RabbitMQConsumer" to  its endpoint uri
camel-main - configuring properties report better error if missing JARs on classpath Look into if we are not reporting a good error if you configure an option for a component that is not on the classpath etc. Improvement camel-main - configuring properties report better error if missing JARs on classpath Look into if we are not reporting a good error if you configure an option for a component that is not on the classpath etc.
camel-main - Allow ENV variables to configure any option Any of the options you can configure via application.properties such as:camel.main.namecamel.component.xxx=yyyAnd so on should be configurable via ENV variables which will override any existing configuration. This is good practice in containers and also how SB can do etc. New Feature camel-main - Allow ENV variables to configure any option Any of the options you can configure via application.properties such as:camel.main.namecamel.component.xxx=yyyAnd so on should be configurable via ENV variables which will override any existing configuration. This is good practice in containers and also how SB can do etc.
Attachments API on Message - Deprecate and remove We should consider making the Camel Message API more simpler and remove stuff that are seldom in use, or can be component specific.The javax.attachment is removed from JDK11 onwards and its not really much in use in the future. Improvement Attachments API on Message - Deprecate and remove We should consider making the Camel Message API more simpler and remove stuff that are seldom in use, or can be component specific.The javax.attachment is removed from JDK11 onwards and its not really much in use in the future.
Move AttachmentConverterLoader out of camel-core The javax.attachments API are not standard in Java 11. We should make this converter optional from camel-core and move to somewhere else. Improvement Move AttachmentConverterLoader out of camel-core The javax.attachments API are not standard in Java 11. We should make this converter optional from camel-core and move to somewhere else.
camel-main - Optimise main configurer This method takes approx 60 millis on my laptoporg.apache.camel.main.DefaultConfigurationConfigurer#afterPropertiesSetI suspects its all those lambda's that are loaded on classpath and only in use if there is a bean to lookup. The logic can be improved to use old fashioned code with some if != nullIf I disable all of those then its down to 4 millis on my laptop Improvement camel-main - Optimise main configurer This method takes approx 60 millis on my laptoporg.apache.camel.main.DefaultConfigurationConfigurer#afterPropertiesSetI suspects its all those lambda's that are loaded on classpath and only in use if there is a bean to lookup. The logic can be improved to use old fashioned code with some if != nullIf I disable all of those then its down to 4 millis on my laptop
Simple language - Body as one line Add function to return the message body as a one line string. This can be useful in some situations where you want to be able to do this from logging point of view via Log EIP New Feature Simple language - Body as one line Add function to return the message body as a one line string. This can be useful in some situations where you want to be able to do this from logging point of view via Log EIP
camel-main-maven-plugin - Add groups to tooling metadata We can add groups as documented in SB metamodelhttps://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-formatThen we can have groups for- main- per componentWith a description of each group, eg the component description etc. This gives a little bit more documentation for the end users. Improvement camel-main-maven-plugin - Add groups to tooling metadata We can add groups as documented in SB metamodelhttps://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-formatThen we can have groups for- main- per componentWith a description of each group, eg the component description etc. This gives a little bit more documentation for the end users.
camel3 - SPI classpath discovery - Combine into a single lookup We do a bunch of SPI classpath discover for 3rd party plugins and even for components like camel-bean and whatnot. (its those resolvers).For a quicker startup we can group these standard lookups into a single classpath scan (notice Camel only does that if you have not set an explicit SPI vis its setter). Improvement camel3 - SPI classpath discovery - Combine into a single lookup We do a bunch of SPI classpath discover for 3rd party plugins and even for components like camel-bean and whatnot. (its those resolvers).For a quicker startup we can group these standard lookups into a single classpath scan (notice Camel only does that if you have not set an explicit SPI vis its setter).
camel-main-maven-plugin - Generate tooling metadata To assist editing Camel Main and eg application.properties then we could "fool" tooling by generating Spring Boot metadata json files, so tools see these files and offer their code completions.Then you can use ctrl + space for type completions when typingcamel.component.jms New Feature camel-main-maven-plugin - Generate tooling metadata To assist editing Camel Main and eg application.properties then we could "fool" tooling by generating Spring Boot metadata json files, so tools see these files and offer their code completions.Then you can use ctrl + space for type completions when typingcamel.component.jms
Refine ProcessorDefinition output handling The ProcessDefinition class is the base class for most of the DSL / Definitions and defines a  number of methods related to outputs such as:{code:java}public abstract List<ProcessorDefinition<?>> getOutputs();public abstract boolean isOutputSupported();{code}The information about the ability to handle outputs is thus available at runtime only which complicates the creation of alternative DSLs (i.e https://github.com/apache/camel-k-runtime/issues/80) Improvement Refine ProcessorDefinition output handling The ProcessDefinition class is the base class for most of the DSL / Definitions and defines a  number of methods related to outputs such as:{code:java}public abstract List<ProcessorDefinition<?>> getOutputs();public abstract boolean isOutputSupported();{code}The information about the ability to handle outputs is thus available at runtime only which complicates the creation of alternative DSLs (i.e https://github.com/apache/camel-k-runtime/issues/80)
Simpler attribute names in the XML DSL Some part of the DSL expose verbose properties as example, the set header definition, has ha setHeaderName property which leads to an XML like:{code:xml}<setHeader headerName="Something"/>{code}This is not wrong but the context gives enough information so it can be rewritten as:{code:xml}<setHeader name="Something"/>{code}Which makes it shorter and does not impact comprehension.  Improvement Simpler attribute names in the XML DSL Some part of the DSL expose verbose properties as example, the set header definition, has ha setHeaderName property which leads to an XML like:{code:xml}<setHeader headerName="Something"/>{code}This is not wrong but the context gives enough information so it can be rewritten as:{code:xml}<setHeader name="Something"/>{code}Which makes it shorter and does not impact comprehension. 
reifiers classes should be public Refiers classes are now package private that make it impossible to reuse them for example in a custom processor factory like what it is done by Hystrix: https://github.com/apache/camel/blob/master/components/camel-hystrix/src/main/java/org/apache/camel/component/hystrix/processor/HystrixProcessorFactory.java Improvement reifiers classes should be public Refiers classes are now package private that make it impossible to reuse them for example in a custom processor factory like what it is done by Hystrix: https://github.com/apache/camel/blob/master/components/camel-hystrix/src/main/java/org/apache/camel/component/hystrix/processor/HystrixProcessorFactory.java
Properties component - loadProperties to return properties in order The API    Properties loadProperties();    Properties loadProperties(String... locations);But the Properties is a Hashtable that is unordered, but it would be better if we could get this as Map so we can use LinkedHashMap so they are in order. This would work better with the order the end users may define in their application.properties files etccamel.component.jms.configuration.connectionFactory=#class:org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactorycamel.component.jms.configuration.connectionFactory.brokerUrl=localhost:61616 Improvement Properties component - loadProperties to return properties in order The API    Properties loadProperties();    Properties loadProperties(String... locations);But the Properties is a Hashtable that is unordered, but it would be better if we could get this as Map so we can use LinkedHashMap so they are in order. This would work better with the order the end users may define in their application.properties files etccamel.component.jms.configuration.connectionFactory=#class:org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactorycamel.component.jms.configuration.connectionFactory.brokerUrl=localhost:61616
camel-main - Add support for auto binding to components by interface type and discover impl class on classpath This can make convention over configuration nicer. For example some components requires a ConnectionFactory etc and if we can auto-discover that on the classpath there is only 1 implementation of such interface, we can try to auto create the instance and configure it on the component.This should be an option you can turn on|off. New Feature camel-main - Add support for auto binding to components by interface type and discover impl class on classpath This can make convention over configuration nicer. For example some components requires a ConnectionFactory etc and if we can auto-discover that on the classpath there is only 1 implementation of such interface, we can try to auto create the instance and configure it on the component.This should be an option you can turn on|off.
camel-spring - NPE in NotifyBuilder during testing Just noticed some NPEs while doing test of camel-spring019-06-13 15:02:08,902 WARN  EventHelper - Error notifying event ID-davsclaus-pro-local-1560430811107-235-1 exchange created: Exchange[ID-davsclaus-pro-local-1560430811107-235-1]. This exception will be ignored.  java.lang.NullPointerException: null	at org.apache.camel.builder.NotifyBuilder$3.onExchange(NotifyBuilder.java:194) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$EventPredicateSupport.onExchangeCreated(NotifyBuilder.java:1293) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$CompoundEventPredicate.onExchangeCreated(NotifyBuilder.java:1381) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.onExchangeCreated(NotifyBuilder.java:1154) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.notify(NotifyBuilder.java:1135) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:288) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotify(EventHelper.java:27 Test camel-spring - NPE in NotifyBuilder during testing Just noticed some NPEs while doing test of camel-spring019-06-13 15:02:08,902 WARN  EventHelper - Error notifying event ID-davsclaus-pro-local-1560430811107-235-1 exchange created: Exchange[ID-davsclaus-pro-local-1560430811107-235-1]. This exception will be ignored.  java.lang.NullPointerException: null	at org.apache.camel.builder.NotifyBuilder$3.onExchange(NotifyBuilder.java:194) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$EventPredicateSupport.onExchangeCreated(NotifyBuilder.java:1293) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$CompoundEventPredicate.onExchangeCreated(NotifyBuilder.java:1381) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.onExchangeCreated(NotifyBuilder.java:1154) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.notify(NotifyBuilder.java:1135) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:288) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotify(EventHelper.java:27
camel3 - SPI for ReactiveHelper so we can plugin different reactive engines Today we use ReactiveHelper.callback(callback) to execute works in Camel routing engine. We should have a SPI so we can plugin 3rd party. Improvement camel3 - SPI for ReactiveHelper so we can plugin different reactive engines Today we use ReactiveHelper.callback(callback) to execute works in Camel routing engine. We should have a SPI so we can plugin 3rd party.
Camel main - Allow to configure rest dsl configuration So you can configure in application.properties etc, some of the rest dsl configuration you would otherwise have to configure with restConfiguration() in the java dsl Improvement Camel main - Allow to configure rest dsl configuration So you can configure in application.properties etc, some of the rest dsl configuration you would otherwise have to configure with restConfiguration() in the java dsl
Deprecate and remove ReloadStrategy This should be deprecated in camel 2.x and removed in 3.0.This makes the modularization of camel 3 better, and its also only used as a developer/demo thing and not for production usage. And today there are better alternatives with camel k, and camel-quarkus etc, for hot re-load that can load the entire app and not only a xml route. Improvement Deprecate and remove ReloadStrategy This should be deprecated in camel 2.x and removed in 3.0.This makes the modularization of camel 3 better, and its also only used as a developer/demo thing and not for production usage. And today there are better alternatives with camel k, and camel-quarkus etc, for hot re-load that can load the entire app and not only a xml route.
Camel Main - Move to camel-main ccomponent Lets see if we can move the main classes from camel-core to camel-main so they get more separated and become more reusable in other parts.We have a common set of options to configure on camel context itself, and all the configuration of components etc. That logic can be more shared for camel main, camel k, camel spring boot, and others etc. Improvement Camel Main - Move to camel-main ccomponent Lets see if we can move the main classes from camel-core to camel-main so they get more separated and become more reusable in other parts.We have a common set of options to configure on camel context itself, and all the configuration of components etc. That logic can be more shared for camel main, camel k, camel spring boot, and others etc.
camel3 - Move FileWatcherReloadStrategy out of camel-core For example to camel-support etc Improvement camel3 - Move FileWatcherReloadStrategy out of camel-core For example to camel-support etc
camel-rest - Should separate consumer and producer component names You may end up with using rest-dsl and rest component together, and have a rest endpoint that is shared among them. Then the endpoint will have a componentName option set to the consumer, such as jetty. And then when the same endpoint is used for creating the rest producer (eg to rest) then it would fail. We should separate these two options. Improvement camel-rest - Should separate consumer and producer component names You may end up with using rest-dsl and rest component together, and have a rest endpoint that is shared among them. Then the endpoint will have a componentName option set to the consumer, such as jetty. And then when the same endpoint is used for creating the rest producer (eg to rest) then it would fail. We should separate these two options.
camel-spring-boot - Add option to include/exclude routes based on their ids So you can for example do an unit test where you want to only test a specific route and then filter out everyone else. Currently you can filter on route builder and xml files level, but not on route ids. New Feature camel-spring-boot - Add option to include/exclude routes based on their ids So you can for example do an unit test where you want to only test a specific route and then filter out everyone else. Currently you can filter on route builder and xml files level, but not on route ids.
Support setup proxy host and port on Telegram As we may run the camel-telegram application behind a proxy, it could be handy if camel-telegram support setting http proxy.  Improvement Support setup proxy host and port on Telegram As we may run the camel-telegram application behind a proxy, it could be handy if camel-telegram support setting http proxy. 
Claim check - Allow to use dynamic key via simple language Asked on user forumhttp://camel.465427.n5.nabble.com/Using-dynamic-expression-as-claimCheck-key-tp5835356.html Improvement Claim check - Allow to use dynamic key via simple language Asked on user forumhttp://camel.465427.n5.nabble.com/Using-dynamic-expression-as-claimCheck-key-tp5835356.html
Splitter tokenize doesn't really accept every regex Hi, Neither{code:java}.split().tokenize("\r?\n", true, 2, true){code}nor {code:java}.split().tokenize("\r\n|\n", true, 2, true){code}work. The latter expression insert a "|" instead of correctly split rows on \r\n or \n.       Improvement Splitter tokenize doesn't really accept every regex Hi, Neither{code:java}.split().tokenize("\r?\n", true, 2, true){code}nor {code:java}.split().tokenize("\r\n|\n", true, 2, true){code}work. The latter expression insert a "|" instead of correctly split rows on \r\n or \n.      
camel apt - Avoid generating TypeConverter META-INF file when we generate TypeConverterLoader We can optimize this to only have the newer TypeConverterLoader file which has all the type converters that are optimized. And then in tooling/apt avoid generate both TypeConverter and TypeConverterLoaded meta files. Improvement camel apt - Avoid generating TypeConverter META-INF file when we generate TypeConverterLoader We can optimize this to only have the newer TypeConverterLoader file which has all the type converters that are optimized. And then in tooling/apt avoid generate both TypeConverter and TypeConverterLoaded meta files.
Camel main - Calling init should initialize as much as possible So we can eager init as much as possible when running Camel Main, by calling main.init() method. This can be used to warmup Camel. Improvement Camel main - Calling init should initialize as much as possible So we can eager init as much as possible when running Camel Main, by calling main.init() method. This can be used to warmup Camel.
Camel Injector - Add method for creating a new instance without bean processing There are use-cases where we for example loads the type converter loaded that creates an instance of the class, but we use the injector which does bean post processing by scanning methods for injecting fields / and other autowriting via those Camel annotations. But these type converters are basic and dont need this. There can be some other factory classes too, so lets have a basic injector method so you can choose. Improvement Camel Injector - Add method for creating a new instance without bean processing There are use-cases where we for example loads the type converter loaded that creates an instance of the class, but we use the injector which does bean post processing by scanning methods for injecting fields / and other autowriting via those Camel annotations. But these type converters are basic and dont need this. There can be some other factory classes too, so lets have a basic injector method so you can choose.
Camel main - Configuration class should support automatic autowire by type In such a configuration class{code}public class MyConfiguration {    @BindToRegistry    public ClientConfiguration myClientConfig() {        ClientConfiguration cc = new ClientConfiguration();        cc.setMaxConnections(5);        return cc;    }    @BindToRegistry    public MyBean myBean(@PropertyInject("hi") String hi, @PropertyInject("bye") String bye) {        // this will create an instance of this bean with the name of the method (eg myBean)        return new MyBean(hi, bye);    }    @BindToRegistry    public AmazonS3 myAmazon(@BeanInject("myClientConfig") ClientConfiguration config) {        return AmazonS3Client.builder().withRegion("US-EAST-1").withClientConfiguration(config).build();    }    public void configure() {        // this method is optional and can be removed if no additional configuration is needed.    }}{code}We could detect that the myAmazon method has a parameter of type ClientConfiguration which we can attempt to lookup as singleton bean. Then you can do{code}    @BindToRegistry    public AmazonS3 myAmazon(ClientConfiguration config) {code} Improvement Camel main - Configuration class should support automatic autowire by type In such a configuration class{code}public class MyConfiguration {    @BindToRegistry    public ClientConfiguration myClientConfig() {        ClientConfiguration cc = new ClientConfiguration();        cc.setMaxConnections(5);        return cc;    }    @BindToRegistry    public MyBean myBean(@PropertyInject("hi") String hi, @PropertyInject("bye") String bye) {        // this will create an instance of this bean with the name of the method (eg myBean)        return new MyBean(hi, bye);    }    @BindToRegistry    public AmazonS3 myAmazon(@BeanInject("myClientConfig") ClientConfiguration config) {        return AmazonS3Client.builder().withRegion("US-EAST-1").withClientConfiguration(config).build();    }    public void configure() {        // this method is optional and can be removed if no additional configuration is needed.    }}{code}We could detect that the myAmazon method has a parameter of type ClientConfiguration which we can attempt to lookup as singleton bean. Then you can do{code}    @BindToRegistry    public AmazonS3 myAmazon(ClientConfiguration config) {code}
camel-blueprint - Many WARNs about overriding type converters Noticed these during testing CiA2 book2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@659f226a to: StaticMethodTypeConverter: public static org.restlet.data.Method org.apache.camel.component.restlet.converter.RestletConverter.toMethod(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@2e463f4 to: StaticMethodTypeConverter: public static org.restlet.data.Method[] org.apache.camel.component.restlet.converter.RestletConverter.toMethods(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@32ec9c90 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType[] org.apache.camel.component.restlet.converter.RestletConverter.toMediaTypes(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36ab3814 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType org.apache.camel.component.restlet.converter.RestletConverter.toMediaType(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@467233e4 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(org.apache.camel.http.common.HttpMessage,org.apache.camel.Exchange) throws java.lang.Exception2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@427a12b6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6025d790 to: StaticMethodTypeConverter: public static java.io.BufferedReader org.apache.camel.http.common.HttpConverter.toReader(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@af7e376 to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.http.common.HttpConverter.toServletResponse(org.apache.camel.Message)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@5dcd0cdf to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.http.common.HttpConverter.toServletRequest(org.apache.camel.Message)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4fb04a72 to: StaticMethodTypeConverter: public static javax.servlet.ServletInputStream org.apache.camel.http.common.HttpConverter.toServletInputStream(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1a07bf6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.spring.converter.ResourceConverter.convertToInputStream(org.springframework.core.io.Resource) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@34d713a2 to: StaticMethodTypeConverter: public static java.lang.Object[] org.apache.camel.component.cxf.converter.CxfConverter.toArray(java.lang.Object)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36aab105 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.toInputStream(javax.ws.rs.core.Response,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@889a8a8 to: StaticMethodTypeConverter: public static javax.xml.namespace.QName org.apache.camel.component.cxf.converter.CxfConverter.toQName(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f29353f to: StaticMethodTypeConverter: public static org.apache.cxf.message.MessageContentsList org.apache.camel.component.cxf.converter.CxfConverter.toMessageContentsList(java.lang.Object[])2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36f7d7b to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.DataFormat org.apache.camel.component.cxf.converter.CxfConverter.toDataFormat(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@60aec68a to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToString(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@25a7fedf to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToInputStream(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6361b799 to: StaticMethodTypeConverter: public static org.w3c.dom.NodeList org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayloadToNodeList(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1b9d9a2b to: StaticMethodTypeConverter: public static org.w3c.dom.Node org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToNode(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@d919544 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.nodeListToCxfPayload(org.w3c.dom.NodeList,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@17dad32f to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.elementToCxfPayload(org.w3c.dom.Element,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@79696332 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.documentToCxfPayload(org.w3c.dom.Document,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@ed2f2f6 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.sourceToCxfPayload(javax.xml.transform.Source,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@fe87ddd to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4eea94a4 to: StaticMethodTypeConverter: public static javax.xml.transform.Source org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToSource(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@29be997f to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@33eb6758 to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.file.GenericFileConverter.genericFileToString(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException,org.apache.camel.NoTypeConversionAvailableException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f8a6243 to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7f9e8421 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23da79eb to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@168b4cb0 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@3e05586b to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@35b17c06 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@45545e7a to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@9f674ac to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1da4b3f9 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23cbbd07 to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@448b808a to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7e62cfa3 to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException Task camel-blueprint - Many WARNs about overriding type converters Noticed these during testing CiA2 book2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@659f226a to: StaticMethodTypeConverter: public static org.restlet.data.Method org.apache.camel.component.restlet.converter.RestletConverter.toMethod(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@2e463f4 to: StaticMethodTypeConverter: public static org.restlet.data.Method[] org.apache.camel.component.restlet.converter.RestletConverter.toMethods(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@32ec9c90 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType[] org.apache.camel.component.restlet.converter.RestletConverter.toMediaTypes(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36ab3814 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType org.apache.camel.component.restlet.converter.RestletConverter.toMediaType(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@467233e4 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(org.apache.camel.http.common.HttpMessage,org.apache.camel.Exchange) throws java.lang.Exception2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@427a12b6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6025d790 to: StaticMethodTypeConverter: public static java.io.BufferedReader org.apache.camel.http.common.HttpConverter.toReader(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@af7e376 to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.http.common.HttpConverter.toServletResponse(org.apache.camel.Message)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@5dcd0cdf to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.http.common.HttpConverter.toServletRequest(org.apache.camel.Message)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4fb04a72 to: StaticMethodTypeConverter: public static javax.servlet.ServletInputStream org.apache.camel.http.common.HttpConverter.toServletInputStream(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1a07bf6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.spring.converter.ResourceConverter.convertToInputStream(org.springframework.core.io.Resource) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@34d713a2 to: StaticMethodTypeConverter: public static java.lang.Object[] org.apache.camel.component.cxf.converter.CxfConverter.toArray(java.lang.Object)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36aab105 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.toInputStream(javax.ws.rs.core.Response,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@889a8a8 to: StaticMethodTypeConverter: public static javax.xml.namespace.QName org.apache.camel.component.cxf.converter.CxfConverter.toQName(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f29353f to: StaticMethodTypeConverter: public static org.apache.cxf.message.MessageContentsList org.apache.camel.component.cxf.converter.CxfConverter.toMessageContentsList(java.lang.Object[])2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36f7d7b to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.DataFormat org.apache.camel.component.cxf.converter.CxfConverter.toDataFormat(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@60aec68a to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToString(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@25a7fedf to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToInputStream(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6361b799 to: StaticMethodTypeConverter: public static org.w3c.dom.NodeList org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayloadToNodeList(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1b9d9a2b to: StaticMethodTypeConverter: public static org.w3c.dom.Node org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToNode(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@d919544 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.nodeListToCxfPayload(org.w3c.dom.NodeList,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@17dad32f to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.elementToCxfPayload(org.w3c.dom.Element,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@79696332 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.documentToCxfPayload(org.w3c.dom.Document,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@ed2f2f6 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.sourceToCxfPayload(javax.xml.transform.Source,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@fe87ddd to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4eea94a4 to: StaticMethodTypeConverter: public static javax.xml.transform.Source org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToSource(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@29be997f to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@33eb6758 to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.file.GenericFileConverter.genericFileToString(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException,org.apache.camel.NoTypeConversionAvailableException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f8a6243 to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7f9e8421 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23da79eb to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@168b4cb0 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@3e05586b to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@35b17c06 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@45545e7a to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@9f674ac to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1da4b3f9 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23cbbd07 to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@448b808a to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7e62cfa3 to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
camel-zookeeper - Deprecate route master/slave policy As the camel-zookeeper-master component is better at handling this. So lets deprecate this in Camel 2.x, and remove in 3.0 Improvement camel-zookeeper - Deprecate route master/slave policy As the camel-zookeeper-master component is better at handling this. So lets deprecate this in Camel 2.x, and remove in 3.0
JndiContext - Remove old bean binding There is some old code that allows to define in jndi.properties beans with .class etc to create these beans via basic class loading that was from Camel 1.x time and nobody uses.This should be removed Improvement JndiContext - Remove old bean binding There is some old code that allows to define in jndi.properties beans with .class etc to create these beans via basic class loading that was from Camel 1.x time and nobody uses.This should be removed
IntrospectionSupport - Remove old legacy JDK PropertyEditor There is some old code using JDKPropertyEditor editor = PropertyEditorManager.findEditor(type);But this is no longer in use as we really use camel's type converter. That above is also slow and not thread safe and was intended for java swing/beans stuff and some cruft from very old times. Lets try to get rid of it. Improvement IntrospectionSupport - Remove old legacy JDK PropertyEditor There is some old code using JDKPropertyEditor editor = PropertyEditorManager.findEditor(type);But this is no longer in use as we really use camel's type converter. That above is also slow and not thread safe and was intended for java swing/beans stuff and some cruft from very old times. Lets try to get rid of it.
Support for nested properties binding As today properties binding does not work for nested objects so assuming I have a class like:{code:java}class MyComponent {        public void setFoo(String foo) {        this.foo = foo;    }    public String getFoo() {        return foo;    }    public void setConfiguration(Configuration conf) {        this.conf = conf;    }    public Configuration getConfiguration() {        return conf;    }    static class Configuration {            public void setBar(String bar) {            this.bar = bar        }        public String getBar() {            return bar        }    }}{code}And a set of properties like:{code}myComponent.foo = "foo"myComponent.conf.bar = "bar"{code}Then only MyComponent.foo will be set but it would be nice if the binding framework could navigate the property using dot notation and set any dependent object. New Feature Support for nested properties binding As today properties binding does not work for nested objects so assuming I have a class like:{code:java}class MyComponent {        public void setFoo(String foo) {        this.foo = foo;    }    public String getFoo() {        return foo;    }    public void setConfiguration(Configuration conf) {        this.conf = conf;    }    public Configuration getConfiguration() {        return conf;    }    static class Configuration {            public void setBar(String bar) {            this.bar = bar        }        public String getBar() {            return bar        }    }}{code}And a set of properties like:{code}myComponent.foo = "foo"myComponent.conf.bar = "bar"{code}Then only MyComponent.foo will be set but it would be nice if the binding framework could navigate the property using dot notation and set any dependent object.
Producer and consumer template/cache should check if camel is started when being used When sending via producer template etc then you can send to endpoints even if camel is stopped / not started etc. We should add a check for this as camel would ideally need to be started first to ensure the sending works correctly. Improvement Producer and consumer template/cache should check if camel is started when being used When sending via producer template etc then you can send to endpoints even if camel is stopped / not started etc. We should add a check for this as camel would ideally need to be started first to ensure the sending works correctly.
camel3 - Some of the SPI can be static services when there can only be one configured A number of configurations for packagescan class resolver and node id factory and whatnot are essentially a single instance that can be configured, so we can leverage this fact and make them StaticService if they are just defined as a Service today. Improvement camel3 - Some of the SPI can be static services when there can only be one configured A number of configurations for packagescan class resolver and node id factory and whatnot are essentially a single instance that can be configured, so we can leverage this fact and make them StaticService if they are just defined as a Service today.
isUseAdviceWith causes test to hang Having this test:{code:java}import org.apache.camel.CamelContext;import org.apache.camel.RoutesBuilder;import org.apache.camel.builder.AdviceWithRouteBuilder;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class MyRouteTest extends CamelTestSupport {  private static final String ROUTE_ID = "mytest";  @Override  public RoutesBuilder createRouteBuilder() throws Exception {    return new RouteBuilder() {      @Override      public void configure() throws Exception {        from("direct:mytest")          .id(ROUTE_ID)          .to("stream:out");      }    };  }  @Override  public void setUp() throws Exception {      super.setUp();      final CamelContext camelContext = context();      camelContext.getRouteDefinition(ROUTE_ID)        .adviceWith(camelContext, new AdviceWithRouteBuilder() {          @Override          public void configure() throws Exception {            weaveAddLast().to("mock:extract");          }        });  }  @Override  public boolean isUseAdviceWith() {      return true; // <- here is the problem  }  @Test  public void shouldFire() throws InterruptedException {    // given    final MockEndpoint myMock = getMockEndpoint("mock:extract");    myMock.expectedMessageCount(1);    myMock.expectedBodiesReceived("test");    // when    template.sendBody("direct:mytest", "test");    // then    myMock.assertIsSatisfied();  }}{code} Causes Camel to hang Improvement isUseAdviceWith causes test to hang Having this test:{code:java}import org.apache.camel.CamelContext;import org.apache.camel.RoutesBuilder;import org.apache.camel.builder.AdviceWithRouteBuilder;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class MyRouteTest extends CamelTestSupport {  private static final String ROUTE_ID = "mytest";  @Override  public RoutesBuilder createRouteBuilder() throws Exception {    return new RouteBuilder() {      @Override      public void configure() throws Exception {        from("direct:mytest")          .id(ROUTE_ID)          .to("stream:out");      }    };  }  @Override  public void setUp() throws Exception {      super.setUp();      final CamelContext camelContext = context();      camelContext.getRouteDefinition(ROUTE_ID)        .adviceWith(camelContext, new AdviceWithRouteBuilder() {          @Override          public void configure() throws Exception {            weaveAddLast().to("mock:extract");          }        });  }  @Override  public boolean isUseAdviceWith() {      return true; // <- here is the problem  }  @Test  public void shouldFire() throws InterruptedException {    // given    final MockEndpoint myMock = getMockEndpoint("mock:extract");    myMock.expectedMessageCount(1);    myMock.expectedBodiesReceived("test");    // when    template.sendBody("direct:mytest", "test");    // then    myMock.assertIsSatisfied();  }}{code} Causes Camel to hang
Camel main - Allow to configure supervising route controller Like you can do in SB to setup advanced route startup where Camel can retry starting routes etc. Improvement Camel main - Allow to configure supervising route controller Like you can do in SB to setup advanced route startup where Camel can retry starting routes etc.
Simple language - Add colon as alternative syntax style The simple syntax can maybe be improved a bit when its a function such as env or sysenv or other functions vs OGNL method calls on body, headers etc that uses dot style.Eg {code}${sysenv.FOO}{code}vs{code}${env:FOO}{code}It may feel a bit more natural to use colon in these situations, and dot when using{code}${body.someGetter}{code}And to refer to a header you can use both{code}${header.foo}{code}{code}${header:foo}{code}https://github.com/apache/camel/blob/master/core/camel-core/src/main/docs/simple-language.adoc Improvement Simple language - Add colon as alternative syntax style The simple syntax can maybe be improved a bit when its a function such as env or sysenv or other functions vs OGNL method calls on body, headers etc that uses dot style.Eg {code}${sysenv.FOO}{code}vs{code}${env:FOO}{code}It may feel a bit more natural to use colon in these situations, and dot when using{code}${body.someGetter}{code}And to refer to a header you can use both{code}${header.foo}{code}{code}${header:foo}{code}https://github.com/apache/camel/blob/master/core/camel-core/src/main/docs/simple-language.adoc
