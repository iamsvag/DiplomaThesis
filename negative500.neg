CAMEL-14041 scheduled poll consumer - Add option to limit number of polls In the timer/scheduler component you can set a max number of polls so the consumer stop after that.We could add something similar so you can eg tell the consumer to run only once etc. Improvement scheduled poll consumer - Add option to limit number of polls In the timer/scheduler component you can set a max number of polls so the consumer stop after that.We could add something similar so you can eg tell the consumer to run only once etc.
CAMEL-14040 DefaultRegistry - findByType should return merged result incl fallback Reported by Luca in camel-quarkus Improvement DefaultRegistry - findByType should return merged result incl fallback Reported by Luca in camel-quarkus
CAMEL-14034 Orderes RoutesBuilder RoutesBuilder are now loaded according to the order the user add them but in some cases it may be needed to load them according to an order.We should then make the RoutesBuilder interface extends Ordered and take it into account i.e. in MainSupport. Improvement Orderes RoutesBuilder RoutesBuilder are now loaded according to the order the user add them but in some cases it may be needed to load them according to an order.We should then make the RoutesBuilder interface extends Ordered and take it into account i.e. in MainSupport.
CAMEL-14031 Move process control from Main to MainSupport org.apache.camel.main.MainSupport is now in charge to parse command line arguments, keep the process up according to some policies, intercepts shutdown events and so on.To make it easier to re-use MainSupport in other projects such as camel-quarkus where as example there's no control over command line arguments, it would be nice to move the process control logic to org.apache.camel.main.Main.[~davsclaus] does it make sense or there is something I haven't taken into account ? Improvement Move process control from Main to MainSupport org.apache.camel.main.MainSupport is now in charge to parse command line arguments, keep the process up according to some policies, intercepts shutdown events and so on.To make it easier to re-use MainSupport in other projects such as camel-quarkus where as example there's no control over command line arguments, it would be nice to move the process control logic to org.apache.camel.main.Main.[~davsclaus] does it make sense or there is something I haven't taken into account ?
CAMEL-13955 SJMS-Batch does not support CompletionAware aggregators SJMS-Batch isn't aware of the CompletionAwareAggregationStrategy interface and so never calls the completion method.This prevents SJMS-Batch from working as expected with built in aggregators such as org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy - the aggregated message remains as an exchange header instead of being the message body.  Improvement SJMS-Batch does not support CompletionAware aggregators SJMS-Batch isn't aware of the CompletionAwareAggregationStrategy interface and so never calls the completion method.This prevents SJMS-Batch from working as expected with built in aggregators such as org.apache.camel.processor.aggregate.GroupedBodyAggregationStrategy - the aggregated message remains as an exchange header instead of being the message body. 
CAMEL-13949 camel-core vs camel-core-engine The camel-core-engine trims camel-core using maven exclusions which may lead to unexpected result as if both are present in the dependencies tree, then one may win over the other depending of the maven resolution. Improvement camel-core vs camel-core-engine The camel-core-engine trims camel-core using maven exclusions which may lead to unexpected result as if both are present in the dependencies tree, then one may win over the other depending of the maven resolution.
CAMEL-13947 Create a configuration service instead of leveraging the properties component As today the way camel resolves properties/configuration is trough the Properties Component which leads to a chicken and egg problem as:- camel core depends on properties component- the properties component depends on camel coreWe should probably have a proper configuration service part of camel core that can eventually be leveraged by the Properties Component. Improvement Create a configuration service instead of leveraging the properties component As today the way camel resolves properties/configuration is trough the Properties Component which leads to a chicken and egg problem as:- camel core depends on properties component- the properties component depends on camel coreWe should probably have a proper configuration service part of camel core that can eventually be leveraged by the Properties Component.
CAMEL-13939 camel3 - Rename camel-management-impl to camel-management Lets avoid the -impl in the name as its the only Camel artifact that has this ending. Task camel3 - Rename camel-management-impl to camel-management Lets avoid the -impl in the name as its the only Camel artifact that has this ending.
CAMEL-13936 SNMP Component support ‘snmp walk’ The current version, the SNMP Component can not support 'snmp walk'.Although the source code has appear 'GET_NEXT' in SnmpActionType.java, but no found in processor.Now, i add the 'snmp walk' and in my application it run successfully.So, if it need add to the next camel version, please check.Thanks! New Feature SNMP Component support 'snmp walk' The current version, the SNMP Component can not support 'snmp walk'.Although the source code has appear 'GET_NEXT' in SnmpActionType.java, but no found in processor.Now, i add the 'snmp walk' and in my application it run successfully.So, if it need add to the next camel version, please check.Thanks!
CAMEL-13929 camel3 - ApiEndpoint should extend ScheduledPollEndpoint As the ApiConsumer is scheduled poll based, but the endpoint was not its base class. Then options get out of sync and not documented either. Improvement camel3 - ApiEndpoint should extend ScheduledPollEndpoint As the ApiConsumer is scheduled poll based, but the endpoint was not its base class. Then options get out of sync and not documented either.
CAMEL-13925 camel-seda - SedaConsumer should extend DefaultConsumer So its like the other components where we extend default classes Improvement camel-seda - SedaConsumer should extend DefaultConsumer So its like the other components where we extend default classes
CAMEL-13918 camel3 - camel-http - Remove deprecate url rewrite UrlRewrite has been deprecated on 2.x, and should be removed for 3 Task camel3 - camel-http - Remove deprecate url rewrite UrlRewrite has been deprecated on 2.x, and should be removed for 3
CAMEL-13917 camel3 - Deprecate and remove consumer.xxx syntax for delay options You can configure them on the endpoint directly, so consumer.delay=5000 should just be delay=5000 and so on. Task camel3 - Deprecate and remove consumer.xxx syntax for delay options You can configure them on the endpoint directly, so consumer.delay=5000 should just be delay=5000 and so on.
CAMEL-13913 camel3 - components - Use BeanIntrospection instead of IntrospectionSupport They should use BeanIntrosepction which you can get from camel context Task camel3 - components - Use BeanIntrospection instead of IntrospectionSupport They should use BeanIntrosepction which you can get from camel context
CAMEL-13907 camel3 - JMX can clear its bean introspection cache after all MBeans have been registered Those are no longer needed and it can free up a bit of memory hold by the cache. Mind the cache is weak anyway, but this makes it more explicit Task camel3 - JMX can clear its bean introspection cache after all MBeans have been registered Those are no longer needed and it can free up a bit of memory hold by the cache. Mind the cache is weak anyway, but this makes it more explicit
CAMEL-13906 Component options - Only include if they have @Metadata Properties component include some options which should not be there, as we should only take the getter/setter pairs that have @Metadata annotation Task Component options - Only include if they have @Metadata Properties component include some options which should not be there, as we should only take the getter/setter pairs that have @Metadata annotation
CAMEL-13901 camel-main-plugin - Dont run it automatic on compile Lets just add instructions in the readme and avoid running it on each build. Its used for setting up the project for tooling support, and if you want to have it to do auto-detection of certain JMS clients - eg ActiveMQ vs Artemis and adapt the project accordingly. Improvement camel-main-plugin - Dont run it automatic on compile Lets just add instructions in the readme and avoid running it on each build. Its used for setting up the project for tooling support, and if you want to have it to do auto-detection of certain JMS clients - eg ActiveMQ vs Artemis and adapt the project accordingly.
CAMEL-13895 camel3 - TypeConverter(loader = true) rename to generateLoader We are using generateConfigurer for fast endpoint configurer, so lets rename this for type converter loader to generateLoader on these annotations Improvement camel3 - TypeConverter(loader = true) rename to generateLoader We are using generateConfigurer for fast endpoint configurer, so lets rename this for type converter loader to generateLoader on these annotations
CAMEL-13870 camel3 - Fast configuring of endpoint options Like we did for fast property placeholders on EIPs we can optimize endpoints as well, by using the apt compiler plugin to generate a configurer classes that uses direct java method invocations and then the property builder support class can detect that we have such a configurer and use it, when it looks for the setter.  Improvement camel3 - Fast configuring of endpoint options Like we did for fast property placeholders on EIPs we can optimize endpoints as well, by using the apt compiler plugin to generate a configurer classes that uses direct java method invocations and then the property builder support class can detect that we have such a configurer and use it, when it looks for the setter. 
CAMEL-13863 camel3 - Optimize XmlConverterLoader I wonder if we can optimize XmlConverterLoader this to init the getXmlConverter once only and avoid synchronized.It does take a bit time to load according to the yourkit profiler Improvement camel3 - Optimize XmlConverterLoader I wonder if we can optimize XmlConverterLoader this to init the getXmlConverter once only and avoid synchronized.It does take a bit time to load according to the yourkit profiler
CAMEL-13850 camel3 - Property placeholders on EIP models can be optimized We do a bit of introspection on each model class to fin its getter/setter properties, which we can then use for property placeholders.org.apache.camel.model.ProcessorDefinitionHelper#resolvePropertyPlaceholdersWe should look at optimising this Improvement camel3 - Property placeholders on EIP models can be optimized We do a bit of introspection on each model class to fin its getter/setter properties, which we can then use for property placeholders.org.apache.camel.model.ProcessorDefinitionHelper#resolvePropertyPlaceholdersWe should look at optimising this
CAMEL-13848 Support room password in camel-xmpp Camel-xmpp does not support room passwords at the moment. With small patch it could. Patch file included. Improvement Support room password in camel-xmpp Camel-xmpp does not support room passwords at the moment. With small patch it could. Patch file included.
CAMEL-13846 Make PropertyBindingSupport a fluent builder only PropertyBindingSupport provides a number of flag to customize how properties should be bound to a target object and it is likely possible that in the future more flags are required so instead of adding yet another overloaded method for each flag we should turn PropertyBindingSupport intop a fluent builder Improvement Make PropertyBindingSupport a fluent builder only PropertyBindingSupport provides a number of flag to customize how properties should be bound to a target object and it is likely possible that in the future more flags are required so instead of adding yet another overloaded method for each flag we should turn PropertyBindingSupport intop a fluent builder
CAMEL-13845 camel-telegram - Do not show authorizationToken in uri We should hide this sensitive information, this requires to migrate it from uri path to uri parameter instead.  Improvement camel-telegram - Do not show authorizationToken in uri We should hide this sensitive information, this requires to migrate it from uri path to uri parameter instead. 
CAMEL-13837 camel3 - FactoryFinder - Return null if not found instead of exception When starting Camel we attempt to find custom factories for SPI. But this means we end up throwing 40+ exceptions just for a basic Camel route. We can optimize this to use null as response for "no factory exists". Improvement camel3 - FactoryFinder - Return null if not found instead of exception When starting Camel we attempt to find custom factories for SPI. But this means we end up throwing 40+ exceptions just for a basic Camel route. We can optimize this to use null as response for "no factory exists".
CAMEL-13832 Properties component - Check ENV before JVM System property We should favour using OS ENV properties over JVM system properties out of the box, for the same keys. This works the best with containers and cloud platforms. Improvement Properties component - Check ENV before JVM System property We should favour using OS ENV properties over JVM system properties out of the box, for the same keys. This works the best with containers and cloud platforms.
CAMEL-13829 Deprecate transferExchange option Its a bad design to transfer Camel Exchange Java objects over the wire. Lets deprecate it in 2.x and remove in 3.0.The camel-jms component has this option, and some of the http too, and others maybe. Improvement Deprecate transferExchange option Its a bad design to transfer Camel Exchange Java objects over the wire. Lets deprecate it in 2.x and remove in 3.0.The camel-jms component has this option, and some of the http too, and others maybe.
CAMEL-13828 DefaultExchangeHolder - Do not propgate exchange id The exchange id should not be preserved as it should not mutate the existing ids Improvement DefaultExchangeHolder - Do not propgate exchange id The exchange id should not be preserved as it should not mutate the existing ids
CAMEL-13820 ResolveEndpointFailedException should mask sensitive information in uri Misconfiguration of routes throws ResolveEndpointFailedException.This exception prints sensitive information like passwords which should be masked. Improvement ResolveEndpointFailedException should mask sensitive information in uri Misconfiguration of routes throws ResolveEndpointFailedException.This exception prints sensitive information like passwords which should be masked.
CAMEL-13810 camel3 - Always log ERROR if failed to start CamelContext As starting Camel mail fail then lets ensure we always get the exception logged as we rethrow it out of start of camel context, and it may be that some runtimes may not log this, so you can have harder time find out why it failed. Improvement camel3 - Always log ERROR if failed to start CamelContext As starting Camel mail fail then lets ensure we always get the exception logged as we rethrow it out of start of camel context, and it may be that some runtimes may not log this, so you can have harder time find out why it failed.
CAMEL-13799 camel-cdi: Remove support for multiple context via @ContextName (was: NPE with recent camel-cdi changes) {code}Exception 0 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderB] to Camel context [contextB]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderB] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 moreException 1 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderA] to Camel context [contextA]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderA] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 more"}}}}{code}CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2859 Improvement camel-cdi: Remove support for multiple context via @ContextName (was: NPE with recent camel-cdi changes) {code}Exception 0 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderB] to Camel context [contextB]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderB] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 moreException 1 :javax.enterprise.inject.InjectionException: Error adding routes of type [org.wildfly.camel.test.cdi.subA.RouteBuilderA] to Camel context [contextA]	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:467)	at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:95)	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:187)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:330)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:123)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:308)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:286)	at javax.enterprise.inject.spi.ObserverMethod.notify(ObserverMethod.java:124)	at org.jboss.weld.util.Observers.notify(Observers.java:166)	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:285)	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:273)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:177)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:171)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:505)	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:93)	at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:98)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:1737)	at org.jboss.msc.service.ServiceControllerImpl$StartTask.execute(ServiceControllerImpl.java:1699)	at org.jboss.msc.service.ServiceControllerImpl$ControllerTask.run(ServiceControllerImpl.java:1557)	at org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)	at org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1982)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1486)	at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1377)	at java.lang.Thread.run(Thread.java:748)Caused by: javax.enterprise.inject.InjectionException: Camel annotations post processing of [InjectionTarget for Managed Bean [class org.wildfly.camel.test.cdi.subA.RouteBuilderA] with qualifiers [@Any @ContextName]] failed!	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:44)	at org.jboss.weld.bean.ManagedBean.create(ManagedBean.java:161)	at org.jboss.weld.contexts.unbound.DependentContextImpl.get(DependentContextImpl.java:70)	at org.jboss.weld.bean.ContextualInstanceStrategy$DefaultContextualInstanceStrategy.get(ContextualInstanceStrategy.java:100)	at org.jboss.weld.bean.ContextualInstance.get(ContextualInstance.java:50)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:694)	at org.jboss.weld.manager.BeanManagerImpl.getReference(BeanManagerImpl.java:717)	at org.jboss.weld.util.ForwardingBeanManager.getReference(ForwardingBeanManager.java:64)	at org.jboss.weld.bean.builtin.BeanManagerProxy.getReference(BeanManagerProxy.java:87)	at org.apache.camel.cdi.BeanManagerHelper.getReference(BeanManagerHelper.java:53)	at org.apache.camel.cdi.CdiCamelExtension.addRouteToContext(CdiCamelExtension.java:452)	... 31 moreCaused by: java.lang.NullPointerException	at org.apache.camel.support.CamelContextHelper.getEndpointInjection(CamelContextHelper.java:187)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.doGetEndpointInjection(CamelPostProcessorHelper.java:160)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getEndpointInjection(CamelPostProcessorHelper.java:150)	at org.apache.camel.impl.engine.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:228)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:210)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:204)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectFields$0(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:108)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:166)	at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:91)	at org.apache.camel.cdi.CamelBeanInjectionTarget.inject(CamelBeanInjectionTarget.java:41)	... 41 more"}}}}{code}CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2859
CAMEL-13797 Move @InvokeOnHeader/@InvokeOnHeaders to org.apache.camel.spi package Contributions is welcome, there is a number of components that are using these annotations which needs to be updated too Improvement Move @InvokeOnHeader/@InvokeOnHeaders to org.apache.camel.spi package Contributions is welcome, there is a number of components that are using these annotations which needs to be updated too
CAMEL-13793 camel3 - Camel annotations with context ids should be deprecated We do not recommend having 2+ camel contexts per application / deployment unit. So we should deprecate these on these annotations as they should be for the current context only. Improvement camel3 - Camel annotations with context ids should be deprecated We do not recommend having 2+ camel contexts per application / deployment unit. So we should deprecate these on these annotations as they should be for the current context only.
CAMEL-13788 camel3 - Message API - Deprecate OUT http://mail-archives.apache.org/mod_mbox/camel-dev/201907.mbox/%3CCAGB5yNkyx9LYk40UwGQdq_%2BiZH%3DOrqOifnqp%2BNL7vmv2TSJvnw%40mail.gmail.com%3E Improvement camel3 - Message API - Deprecate OUT http://mail-archives.apache.org/mod_mbox/camel-dev/201907.mbox/%3CCAGB5yNkyx9LYk40UwGQdq_%2BiZH%3DOrqOifnqp%2BNL7vmv2TSJvnw%40mail.gmail.com%3E
CAMEL-13774 camel-zipfile - Accept an iterator as body for zip Accept iterator or Java 8 Stream as body to produce a zip file this will avoid to use the memory for big file (for some use case we can't get an inputStream)For example it would be very nice to be able to do this:{code:java}from("timer:foo?repeatCount=1")                .setBody(constant(Stream.of("v1", "v2")))                .setHeader(Exchange.FILE_NAME, constant("report.txt"))                .marshal().zipFile()                .to("file:output/directory");{code}(https://stackoverflow.com/questions/50295432/zip-and-unzip-a-large-file-without-loading-the-entire-file-in-memory-in-apache-c) Improvement camel-zipfile - Accept an iterator as body for zip Accept iterator or Java 8 Stream as body to produce a zip file this will avoid to use the memory for big file (for some use case we can't get an inputStream)For example it would be very nice to be able to do this:{code:java}from("timer:foo?repeatCount=1")                .setBody(constant(Stream.of("v1", "v2")))                .setHeader(Exchange.FILE_NAME, constant("report.txt"))                .marshal().zipFile()                .to("file:output/directory");{code}(https://stackoverflow.com/questions/50295432/zip-and-unzip-a-large-file-without-loading-the-entire-file-in-memory-in-apache-c)
CAMEL-13763 elasticsearch-rest producer closes connection when route is reloaded from xml and stays closed When setting camel.springboot.xmlRoutesReloadDirectory, any route using the Elasticsearch rest producer will cause a shutdown of the http client. When reloading a route, the route will be stopped and client.close() is being called on RestClient. The shared http client will not be able to handle new requets because the reactor status is STOPPED. Improvement elasticsearch-rest producer closes connection when route is reloaded from xml and stays closed When setting camel.springboot.xmlRoutesReloadDirectory, any route using the Elasticsearch rest producer will cause a shutdown of the http client. When reloading a route, the route will be stopped and client.close() is being called on RestClient. The shared http client will not be able to handle new requets because the reactor status is STOPPED.
CAMEL-13761 StartupListener runs before routes are started, contrary to Javadoc The Javadoc ([https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/StartupListener.html]) for StartupListener is misleading (italics for emphasis):{quote}This can be used to perform any custom work when the entire [{{CamelContext}}|https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/CamelContext.html] has been initialized and *almost* started. _For example this ensures that all Camel routes have been started and are up and running, before this callback is invoked._{quote}However, routes are not started within the callback. The following code, for example, {code:java}DefaultCamelContext context = new DefaultCamelContext();context.addStartupListener((c, alreadyStarted) -> {    c.createProducerTemplate().sendBody("direct:doesNotExistYet", new Object());});context.addRoutes(new RouteBuilder() {    @Override    public void configure() {        from("direct:doesNotExistYet").bean((Consumer<Object>) System.out::println);    }});context.start();{code}fails with{code}Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: direct://doesNotExistYet. Exchange[ID-x-1563396556957-0-1]	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:69)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)	... 12 more{code}I am aware that using ExtendedStartupListener or an EventNotifier makes this work, but it would be great if the Javadoc was updated (assuming this is intended behavior, I am not sure). Improvement StartupListener runs before routes are started, contrary to Javadoc The Javadoc ([https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/StartupListener.html]) for StartupListener is misleading (italics for emphasis):{quote}This can be used to perform any custom work when the entire [{{CamelContext}}|https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/CamelContext.html] has been initialized and *almost* started. _For example this ensures that all Camel routes have been started and are up and running, before this callback is invoked._{quote}However, routes are not started within the callback. The following code, for example, {code:java}DefaultCamelContext context = new DefaultCamelContext();context.addStartupListener((c, alreadyStarted) -> {    c.createProducerTemplate().sendBody("direct:doesNotExistYet", new Object());});context.addRoutes(new RouteBuilder() {    @Override    public void configure() {        from("direct:doesNotExistYet").bean((Consumer<Object>) System.out::println);    }});context.start();{code}fails with{code}Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: direct://doesNotExistYet. Exchange[ID-x-1563396556957-0-1]	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:69)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)	... 12 more{code}I am aware that using ExtendedStartupListener or an EventNotifier makes this work, but it would be great if the Javadoc was updated (assuming this is intended behavior, I am not sure).
CAMEL-13760 camel3 - Property placeholder - Deprecate changing prefix/suffix tokens This causes some issues and its better we stick to one model the default of using {{ }} which is the Camel style. Improvement camel3 - Property placeholder - Deprecate changing prefix/suffix tokens This causes some issues and its better we stick to one model the default of using {{ }} which is the Camel style.
CAMEL-13759 camel3 - Remove poor mans debugger We have an old debugger implementation that just have callbacks before|after a processor in the routes which you can then from camel-test override the before/after methods to have debugging in the editor.We should remove this as its using the intercept strategy which is intended not to be so much in use. So lets cleanup a bit of cruft. There is already the newer backlog debugger that hawtio and other tools uses for debugging. Improvement camel3 - Remove poor mans debugger We have an old debugger implementation that just have callbacks before|after a processor in the routes which you can then from camel-test override the before/after methods to have debugging in the editor.We should remove this as its using the intercept strategy which is intended not to be so much in use. So lets cleanup a bit of cruft. There is already the newer backlog debugger that hawtio and other tools uses for debugging.
CAMEL-13740 Document for XStream JSON not proper The document of Json Xtream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/json-xstream-dataformat.adoc] is exactly identical to Xstream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/xstream-dataformat.adoc.] Although both uses same component, but JSON xtream document should have document on how to convert JSON to object and vis versa. But it also talks about XML. This needs to be improved. Improvement Document for XStream JSON not proper The document of Json Xtream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/json-xstream-dataformat.adoc] is exactly identical to Xstream [https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/xstream-dataformat.adoc.] Although both uses same component, but JSON xtream document should have document on how to convert JSON to object and vis versa. But it also talks about XML. This needs to be improved.
CAMEL-13738 parent/pom.xml - use dash in version properties We should only use dashes in the names, eg         <javax.el-api-version>2.2.5</javax.el-api-version>        <javax.el-version>2.2.5</javax.el-version>        <javax.el3-version>3.0.0</javax.el3-version>        <javax.el-api-hibernate-validator-version>3.0.1-b04</javax.el-api-hibernate-validator-version>        <javax.el-hibernate-validator-version>3.0.1-b10</javax.el-hibernate-validator-version>Should bejavax-el-version and so forth. Also check if all of them are still in use?Contributions is welcome Task parent/pom.xml - use dash in version properties We should only use dashes in the names, eg         <javax.el-api-version>2.2.5</javax.el-api-version>        <javax.el-version>2.2.5</javax.el-version>        <javax.el3-version>3.0.0</javax.el3-version>        <javax.el-api-hibernate-validator-version>3.0.1-b04</javax.el-api-hibernate-validator-version>        <javax.el-hibernate-validator-version>3.0.1-b10</javax.el-hibernate-validator-version>Should bejavax-el-version and so forth. Also check if all of them are still in use?Contributions is welcome
CAMEL-13736 Camel main - Support bean post processing on @BindToRegistry When creating a new bean such as@BindToRegistrypublic MyBean myBean() {  return new MyBean();}We can have a way to support bean post processing so we can do ioc injection on the created bean.There can maybe be an option on camel main you can turn on | off. Also we can support this for fields only, if you dont need to do any customization@BindToRegistryprivate MyBean myBean Improvement Camel main - Support bean post processing on @BindToRegistry When creating a new bean such as@BindToRegistrypublic MyBean myBean() {  return new MyBean();}We can have a way to support bean post processing so we can do ioc injection on the created bean.There can maybe be an option on camel main you can turn on | off. Also we can support this for fields only, if you dont need to do any customization@BindToRegistryprivate MyBean myBean
CAMEL-13732 Converting to boolean should always be strict When converting to boolean (primitive) we should be strict and only allow this for a set of known types and values. Improvement Converting to boolean should always be strict When converting to boolean (primitive) we should be strict and only allow this for a set of known types and values.
CAMEL-13730 NotifyBuilder MockComponent methods are deprecated and there is no replacement Several methods of the NotifyBuilder that receive MockComponent as a parameter are deprecated and are going to be removed from version 3+, but there is no viable replacement at the moment.From related email conversation ([http://mail-archives.apache.org/mod_mbox/camel-users/201907.mbox/%3CMWHPR11MB138984E7FFB0DA82C043F4F395FA0%40MWHPR11MB1389.namprd11.prod.outlook.com%3E]):Claus> Well we can take a look at adding some kind of SPI interface that advice with can use and then mock implement that.And then potentially other components can be used too (in theory). Task NotifyBuilder MockComponent methods are deprecated and there is no replacement Several methods of the NotifyBuilder that receive MockComponent as a parameter are deprecated and are going to be removed from version 3+, but there is no viable replacement at the moment.From related email conversation ([http://mail-archives.apache.org/mod_mbox/camel-users/201907.mbox/%3CMWHPR11MB138984E7FFB0DA82C043F4F395FA0%40MWHPR11MB1389.namprd11.prod.outlook.com%3E]):Claus> Well we can take a look at adding some kind of SPI interface that advice with can use and then mock implement that.And then potentially other components can be used too (in theory).
CAMEL-13727 Endpoint DSL - Do not generate path parameters as they cannot be set individually For examplebean("").beanName("myBean")is not working, you should dobean("myBean");For the former to work we need to allow to dobean().beanName()...And have the endpoint DSL know its a path parameter and built the uri correctly which is hard as this requires camel-catalog to build the uri as it knows all the complexity of building with path parameters.  Improvement Endpoint DSL - Do not generate path parameters as they cannot be set individually For examplebean("").beanName("myBean")is not working, you should dobean("myBean");For the former to work we need to allow to dobean().beanName()...And have the endpoint DSL know its a path parameter and built the uri correctly which is hard as this requires camel-catalog to build the uri as it knows all the complexity of building with path parameters. 
CAMEL-13725 Endpoint DSL - Add to javadoc if an option is required When an option has required=true in the metadata we should add that to the endpoint DSL javadoc, eg{code}        /**         * Whether the topic is persistent or non-persistent.         * The option is a <code>java.lang.String</code> type.         * @group common         */        default PulsarEndpointConsumerBuilder persistence(String persistence) {            setProperty("persistence", persistence);            return this;        }{code}This option is required. Also not sure if @group is a valid javadoc syntax Improvement Endpoint DSL - Add to javadoc if an option is required When an option has required=true in the metadata we should add that to the endpoint DSL javadoc, eg{code}        /**         * Whether the topic is persistent or non-persistent.         * The option is a <code>java.lang.String</code> type.         * @group common         */        default PulsarEndpointConsumerBuilder persistence(String persistence) {            setProperty("persistence", persistence);            return this;        }{code}This option is required. Also not sure if @group is a valid javadoc syntax
CAMEL-13721 Properties component - Make it simpler by removing not often used stuff We can remove the properties component that is using uris, egproperties:myKeyWhich would create an endpoint with myKey as the url (eg delegate). But you can do that today with {{myKey}}.Also we can remove the support for using location paths that has not been pre-configured, as that makes it more complex in terms of init logic. As we want to be able to optimize for property placeholders during build time and whatnot Improvement Properties component - Make it simpler by removing not often used stuff We can remove the properties component that is using uris, egproperties:myKeyWhich would create an endpoint with myKey as the url (eg delegate). But you can do that today with {{myKey}}.Also we can remove the support for using location paths that has not been pre-configured, as that makes it more complex in terms of init logic. As we want to be able to optimize for property placeholders during build time and whatnot
CAMEL-13720 Properties component - Remove complexity of augemented properties parser The need for CAMEL-4520 is not needed and makes the logic too complex. Lets remove this stuff and just use the simpler parser Improvement Properties component - Remove complexity of augemented properties parser The need for CAMEL-4520 is not needed and makes the logic too complex. Lets remove this stuff and just use the simpler parser
CAMEL-13712 If a javax.mail.Session gets referred to using the "session" URL parameter, Apache Camel Mail ignored its hostnames. {color:#658aba}A javax.mail.Session injected using JNDI can refer to one host per protocol. Referring to such a session using the URL query string parameter session=#jndiName seems to ignore the hosts the session is bound to:{color}{color:#658aba}My first try was simply e.g. "smtp://?session=#jndiName". Now Apache Camel Mail complains about a missing hostname.{color}{color:#658aba}So I tried "smtp://localhost?session=#jndiName" expecting that "localhost" would have been overridden using the SMTP host the session refers to, which is not the case. Camel complains that no SMTP server was listening on the host named "localhost".{color}{color:#658aba}The workaround that works – but is somehow redundant in my opinion – is:{color}{{{color:#3381ff}@Resource{color}(mappedName = {color:#658aba}"jndiName"{color})}} {{ {color:#000080}private {color}Session {color:#1948a6}mySession{color};}}{{{color:#658aba}...to("smtp://"+{color}{color:#1948a6}mySession{color}.getProperty({color:#658aba}"mail.smtp.host"{color})+"{color:#658aba}?session=#jndiName")...{color}}}{color:#658aba}The same also applies to the IMAP server (and likely to the other protocols supported by Java Mail as well).{color}{color:#658aba}It would be nice iff referring to a JNDI injected session would take the session as-is to simplify the URL.{color}{color:#658aba}I found an example for using the "session" parameter: "MailUsingCustomSessionTest". It would be helpful to have another example at hand that either takes the hostname from the session as my example above or that does not contain a hostname at all, given, Apache Camel Mail will support that in the future.{color} Improvement If a javax.mail.Session gets referred to using the "session" URL parameter, Apache Camel Mail ignored its hostnames. {color:#658aba}A javax.mail.Session injected using JNDI can refer to one host per protocol. Referring to such a session using the URL query string parameter session=#jndiName seems to ignore the hosts the session is bound to:{color}{color:#658aba}My first try was simply e.g. "smtp://?session=#jndiName". Now Apache Camel Mail complains about a missing hostname.{color}{color:#658aba}So I tried "smtp://localhost?session=#jndiName" expecting that "localhost" would have been overridden using the SMTP host the session refers to, which is not the case. Camel complains that no SMTP server was listening on the host named "localhost".{color}{color:#658aba}The workaround that works - but is somehow redundant in my opinion - is:{color}{{{color:#3381ff}@Resource{color}(mappedName = {color:#658aba}"jndiName"{color})}} {{ {color:#000080}private {color}Session {color:#1948a6}mySession{color};}}{{{color:#658aba}...to("smtp://"+{color}{color:#1948a6}mySession{color}.getProperty({color:#658aba}"mail.smtp.host"{color})+"{color:#658aba}?session=#jndiName")...{color}}}{color:#658aba}The same also applies to the IMAP server (and likely to the other protocols supported by Java Mail as well).{color}{color:#658aba}It would be nice iff referring to a JNDI injected session would take the session as-is to simplify the URL.{color}{color:#658aba}I found an example for using the "session" parameter: "MailUsingCustomSessionTest". It would be helpful to have another example at hand that either takes the hostname from the session as my example above or that does not contain a hostname at all, given, Apache Camel Mail will support that in the future.{color}
CAMEL-13709 Properties component - Optimise to not call loadProperties to frequently The camel-properties calls loadProperties to load all the properties. But it tend to do this for each parseUri for custom PropertiesSource and other means which can be optimised.The cache is based on properties location only. Improvement Properties component - Optimise to not call loadProperties to frequently The camel-properties calls loadProperties to load all the properties. But it tend to do this for each parseUri for custom PropertiesSource and other means which can be optimised.The cache is based on properties location only.
CAMEL-13708 PropertiesSource to resolve a single property CAMEL-13705 introduces support for property sources such as MP Config and others and at the moment it does require to load all the properties upfront on source initialization.It would be nice to have an additional method to resolve a single property as some back-and may perform some I/O to resolve properties and get alll of them could be expensive.So the properties component should:- leverage PropertiesSource::loadPropertiers() when is is required to know all the properties (i.e. when auto configure components in camel main)- leverage a new PropertiesSource::resolveProperty(String) when it just need to resolve a single property Improvement PropertiesSource to resolve a single property CAMEL-13705 introduces support for property sources such as MP Config and others and at the moment it does require to load all the properties upfront on source initialization.It would be nice to have an additional method to resolve a single property as some back-and may perform some I/O to resolve properties and get alll of them could be expensive.So the properties component should:- leverage PropertiesSource::loadPropertiers() when is is required to know all the properties (i.e. when auto configure components in camel main)- leverage a new PropertiesSource::resolveProperty(String) when it just need to resolve a single property
CAMEL-13705 Properties component should work with Eclipse MicroProfile Config We should integrate with MP Config so you can build MP apps and have Camel's properties component use their properties.We should allow to auto-detect this if eg a camel-microprofile-config is on the classpath and then setup this bridge automatic. New Feature Properties component should work with Eclipse MicroProfile Config We should integrate with MP Config so you can build MP apps and have Camel's properties component use their properties.We should allow to auto-detect this if eg a camel-microprofile-config is on the classpath and then setup this bridge automatic.
CAMEL-13702 camel-main-maven-plugin - Only download sources JAR if really neesed We can improve the logic to detect if there are new components and then only if so, download sources jar if needed for options that need documentation. Improvement camel-main-maven-plugin - Only download sources JAR if really neesed We can improve the logic to detect if there are new components and then only if so, download sources jar if needed for options that need documentation.
CAMEL-13697 URISupport - Mask accessToken and clientSecret in uri logging We should also mask accessToken and clientSecret in uri outputs as they are sensitive data. Improvement URISupport - Mask accessToken and clientSecret in uri logging We should also mask accessToken and clientSecret in uri outputs as they are sensitive data.
CAMEL-13695 camel-core - Injector allow to create beans via static factory methods We should support creating beans via static factory methods that they sometime have instead of constructors, such ascamel.component.quartz2.scheduler-factory=#class:org.quartz.impl.DirectSchedulerFactory#getInstance Improvement camel-core - Injector allow to create beans via static factory methods We should support creating beans via static factory methods that they sometime have instead of constructors, such ascamel.component.quartz2.scheduler-factory=#class:org.quartz.impl.DirectSchedulerFactory#getInstance
CAMEL-13694 Easier way to extend PropertiesComponent The current implementation of the PropertiesComponent is very oriented to paths and location and it is not very easy to provide alternative back-ends i.e MP Config or HashiCorp Vault.We may need to re-think the PropertiesComponent interface and reason in term of ordered "property sources", like:{code}ProertiesComponent cp = new ProertiesComponent()cp.addSource(new ValutPropertiesSource())cp.addSource(new PathPropertiesSource())cp.addSource(PropertiesSource.wrap(properties))...{code} Improvement Easier way to extend PropertiesComponent The current implementation of the PropertiesComponent is very oriented to paths and location and it is not very easy to provide alternative back-ends i.e MP Config or HashiCorp Vault.We may need to re-think the PropertiesComponent interface and reason in term of ordered "property sources", like:{code}ProertiesComponent cp = new ProertiesComponent()cp.addSource(new ValutPropertiesSource())cp.addSource(new PathPropertiesSource())cp.addSource(PropertiesSource.wrap(properties))...{code}
CAMEL-13690 camel-main - Add option to ignore unknown options For example if you have OS ENV variables set that will not be in use because a component is not being used or something.  Improvement camel-main - Add option to ignore unknown options For example if you have OS ENV variables set that will not be in use because a component is not being used or something. 
CAMEL-13688 Camel main - Setting boolean option should have strict conversition If you set an option likecamel.main.allow-use-original-message=123Then its set as false, because we do a Boolean.valueOf convertion which just checks if its "true" or not. Instead we should only allow string values of "true" or "false" otherwise its a invalid value. Improvement Camel main - Setting boolean option should have strict conversition If you set an option likecamel.main.allow-use-original-message=123Then its set as false, because we do a Boolean.valueOf convertion which just checks if its "true" or not. Instead we should only allow string values of "true" or "false" otherwise its a invalid value.
CAMEL-13686 camel-main - Add option for verbose logging of configuration So end users can just set an optioncamel.main.configuration-logging=trueOr something like that to get verbose INFO logging of how all these configurations are computed so you can use that to track if something seems not correct. Improvement camel-main - Add option for verbose logging of configuration So end users can just set an optioncamel.main.configuration-logging=trueOr something like that to get verbose INFO logging of how all these configurations are computed so you can use that to track if something seems not correct.
CAMEL-13685 camel-rabbitmq  Thread name for route set to endpoint uri change thread name of rabbitmq routes from "RabbitMQConsumer" to  its endpoint uri Improvement camel-rabbitmq  Thread name for route set to endpoint uri change thread name of rabbitmq routes from "RabbitMQConsumer" to  its endpoint uri
CAMEL-13683 camel-main - configuring properties report better error if missing JARs on classpath Look into if we are not reporting a good error if you configure an option for a component that is not on the classpath etc. Improvement camel-main - configuring properties report better error if missing JARs on classpath Look into if we are not reporting a good error if you configure an option for a component that is not on the classpath etc.
CAMEL-13681 camel-main - Allow ENV variables to configure any option Any of the options you can configure via application.properties such as:camel.main.namecamel.component.xxx=yyyAnd so on should be configurable via ENV variables which will override any existing configuration. This is good practice in containers and also how SB can do etc. New Feature camel-main - Allow ENV variables to configure any option Any of the options you can configure via application.properties such as:camel.main.namecamel.component.xxx=yyyAnd so on should be configurable via ENV variables which will override any existing configuration. This is good practice in containers and also how SB can do etc.
CAMEL-13678 Attachments API on Message - Deprecate and remove We should consider making the Camel Message API more simpler and remove stuff that are seldom in use, or can be component specific.The javax.attachment is removed from JDK11 onwards and its not really much in use in the future. Improvement Attachments API on Message - Deprecate and remove We should consider making the Camel Message API more simpler and remove stuff that are seldom in use, or can be component specific.The javax.attachment is removed from JDK11 onwards and its not really much in use in the future.
CAMEL-13677 Move AttachmentConverterLoader out of camel-core The javax.attachments API are not standard in Java 11. We should make this converter optional from camel-core and move to somewhere else. Improvement Move AttachmentConverterLoader out of camel-core The javax.attachments API are not standard in Java 11. We should make this converter optional from camel-core and move to somewhere else.
CAMEL-13675 camel-main - Optimise main configurer This method takes approx 60 millis on my laptoporg.apache.camel.main.DefaultConfigurationConfigurer#afterPropertiesSetI suspects its all those lambda's that are loaded on classpath and only in use if there is a bean to lookup. The logic can be improved to use old fashioned code with some if != nullIf I disable all of those then its down to 4 millis on my laptop Improvement camel-main - Optimise main configurer This method takes approx 60 millis on my laptoporg.apache.camel.main.DefaultConfigurationConfigurer#afterPropertiesSetI suspects its all those lambda's that are loaded on classpath and only in use if there is a bean to lookup. The logic can be improved to use old fashioned code with some if != nullIf I disable all of those then its down to 4 millis on my laptop
CAMEL-13674 Simple language - Body as one line Add function to return the message body as a one line string. This can be useful in some situations where you want to be able to do this from logging point of view via Log EIP New Feature Simple language - Body as one line Add function to return the message body as a one line string. This can be useful in some situations where you want to be able to do this from logging point of view via Log EIP
CAMEL-13672 camel-main-maven-plugin - Add groups to tooling metadata We can add groups as documented in SB metamodelhttps://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-formatThen we can have groups for- main- per componentWith a description of each group, eg the component description etc. This gives a little bit more documentation for the end users. Improvement camel-main-maven-plugin - Add groups to tooling metadata We can add groups as documented in SB metamodelhttps://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-formatThen we can have groups for- main- per componentWith a description of each group, eg the component description etc. This gives a little bit more documentation for the end users.
CAMEL-13665 camel3 - SPI classpath discovery - Combine into a single lookup We do a bunch of SPI classpath discover for 3rd party plugins and even for components like camel-bean and whatnot. (its those resolvers).For a quicker startup we can group these standard lookups into a single classpath scan (notice Camel only does that if you have not set an explicit SPI vis its setter). Improvement camel3 - SPI classpath discovery - Combine into a single lookup We do a bunch of SPI classpath discover for 3rd party plugins and even for components like camel-bean and whatnot. (its those resolvers).For a quicker startup we can group these standard lookups into a single classpath scan (notice Camel only does that if you have not set an explicit SPI vis its setter).
CAMEL-13663 camel-main-maven-plugin - Generate tooling metadata To assist editing Camel Main and eg application.properties then we could "fool" tooling by generating Spring Boot metadata json files, so tools see these files and offer their code completions.Then you can use ctrl + space for type completions when typingcamel.component.jms New Feature camel-main-maven-plugin - Generate tooling metadata To assist editing Camel Main and eg application.properties then we could "fool" tooling by generating Spring Boot metadata json files, so tools see these files and offer their code completions.Then you can use ctrl + space for type completions when typingcamel.component.jms
CAMEL-13658 Refine ProcessorDefinition output handling The ProcessDefinition class is the base class for most of the DSL / Definitions and defines a  number of methods related to outputs such as:{code:java}public abstract List<ProcessorDefinition<?>> getOutputs();public abstract boolean isOutputSupported();{code}The information about the ability to handle outputs is thus available at runtime only which complicates the creation of alternative DSLs (i.e https://github.com/apache/camel-k-runtime/issues/80) Improvement Refine ProcessorDefinition output handling The ProcessDefinition class is the base class for most of the DSL / Definitions and defines a  number of methods related to outputs such as:{code:java}public abstract List<ProcessorDefinition<?>> getOutputs();public abstract boolean isOutputSupported();{code}The information about the ability to handle outputs is thus available at runtime only which complicates the creation of alternative DSLs (i.e https://github.com/apache/camel-k-runtime/issues/80)
CAMEL-13657 Simpler attribute names in the XML DSL Some part of the DSL expose verbose properties as example, the set header definition, has ha setHeaderName property which leads to an XML like:{code:xml}<setHeader headerName="Something"/>{code}This is not wrong but the context gives enough information so it can be rewritten as:{code:xml}<setHeader name="Something"/>{code}Which makes it shorter and does not impact comprehension.  Improvement Simpler attribute names in the XML DSL Some part of the DSL expose verbose properties as example, the set header definition, has ha setHeaderName property which leads to an XML like:{code:xml}<setHeader headerName="Something"/>{code}This is not wrong but the context gives enough information so it can be rewritten as:{code:xml}<setHeader name="Something"/>{code}Which makes it shorter and does not impact comprehension. 
CAMEL-13656 reifiers classes should be public Refiers classes are now package private that make it impossible to reuse them for example in a custom processor factory like what it is done by Hystrix: https://github.com/apache/camel/blob/master/components/camel-hystrix/src/main/java/org/apache/camel/component/hystrix/processor/HystrixProcessorFactory.java Improvement reifiers classes should be public Refiers classes are now package private that make it impossible to reuse them for example in a custom processor factory like what it is done by Hystrix: https://github.com/apache/camel/blob/master/components/camel-hystrix/src/main/java/org/apache/camel/component/hystrix/processor/HystrixProcessorFactory.java
CAMEL-13650 Properties component - loadProperties to return properties in order The API    Properties loadProperties();    Properties loadProperties(String... locations);But the Properties is a Hashtable that is unordered, but it would be better if we could get this as Map so we can use LinkedHashMap so they are in order. This would work better with the order the end users may define in their application.properties files etccamel.component.jms.configuration.connectionFactory=#class:org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactorycamel.component.jms.configuration.connectionFactory.brokerUrl=localhost:61616 Improvement Properties component - loadProperties to return properties in order The API    Properties loadProperties();    Properties loadProperties(String... locations);But the Properties is a Hashtable that is unordered, but it would be better if we could get this as Map so we can use LinkedHashMap so they are in order. This would work better with the order the end users may define in their application.properties files etccamel.component.jms.configuration.connectionFactory=#class:org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactorycamel.component.jms.configuration.connectionFactory.brokerUrl=localhost:61616
CAMEL-13647 camel-main - Add support for auto binding to components by interface type and discover impl class on classpath This can make convention over configuration nicer. For example some components requires a ConnectionFactory etc and if we can auto-discover that on the classpath there is only 1 implementation of such interface, we can try to auto create the instance and configure it on the component.This should be an option you can turn on|off. New Feature camel-main - Add support for auto binding to components by interface type and discover impl class on classpath This can make convention over configuration nicer. For example some components requires a ConnectionFactory etc and if we can auto-discover that on the classpath there is only 1 implementation of such interface, we can try to auto create the instance and configure it on the component.This should be an option you can turn on|off.
CAMEL-13645 camel-spring - NPE in NotifyBuilder during testing Just noticed some NPEs while doing test of camel-spring019-06-13 15:02:08,902 WARN  EventHelper - Error notifying event ID-davsclaus-pro-local-1560430811107-235-1 exchange created: Exchange[ID-davsclaus-pro-local-1560430811107-235-1]. This exception will be ignored.  java.lang.NullPointerException: null	at org.apache.camel.builder.NotifyBuilder$3.onExchange(NotifyBuilder.java:194) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$EventPredicateSupport.onExchangeCreated(NotifyBuilder.java:1293) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$CompoundEventPredicate.onExchangeCreated(NotifyBuilder.java:1381) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.onExchangeCreated(NotifyBuilder.java:1154) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.notify(NotifyBuilder.java:1135) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:288) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotify(EventHelper.java:27 Test camel-spring - NPE in NotifyBuilder during testing Just noticed some NPEs while doing test of camel-spring019-06-13 15:02:08,902 WARN  EventHelper - Error notifying event ID-davsclaus-pro-local-1560430811107-235-1 exchange created: Exchange[ID-davsclaus-pro-local-1560430811107-235-1]. This exception will be ignored.  java.lang.NullPointerException: null	at org.apache.camel.builder.NotifyBuilder$3.onExchange(NotifyBuilder.java:194) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$EventPredicateSupport.onExchangeCreated(NotifyBuilder.java:1293) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$CompoundEventPredicate.onExchangeCreated(NotifyBuilder.java:1381) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.onExchangeCreated(NotifyBuilder.java:1154) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.notify(NotifyBuilder.java:1135) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:288) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]	at org.apache.camel.support.EventHelper.doNotify(EventHelper.java:27
CAMEL-13636 camel3 - SPI for ReactiveHelper so we can plugin different reactive engines Today we use ReactiveHelper.callback(callback) to execute works in Camel routing engine. We should have a SPI so we can plugin 3rd party. Improvement camel3 - SPI for ReactiveHelper so we can plugin different reactive engines Today we use ReactiveHelper.callback(callback) to execute works in Camel routing engine. We should have a SPI so we can plugin 3rd party.
CAMEL-13634 Camel main - Allow to configure rest dsl configuration So you can configure in application.properties etc, some of the rest dsl configuration you would otherwise have to configure with restConfiguration() in the java dsl Improvement Camel main - Allow to configure rest dsl configuration So you can configure in application.properties etc, some of the rest dsl configuration you would otherwise have to configure with restConfiguration() in the java dsl
CAMEL-13632 Deprecate and remove ReloadStrategy This should be deprecated in camel 2.x and removed in 3.0.This makes the modularization of camel 3 better, and its also only used as a developer/demo thing and not for production usage. And today there are better alternatives with camel k, and camel-quarkus etc, for hot re-load that can load the entire app and not only a xml route. Improvement Deprecate and remove ReloadStrategy This should be deprecated in camel 2.x and removed in 3.0.This makes the modularization of camel 3 better, and its also only used as a developer/demo thing and not for production usage. And today there are better alternatives with camel k, and camel-quarkus etc, for hot re-load that can load the entire app and not only a xml route.
CAMEL-13620 Camel Main - Move to camel-main ccomponent Lets see if we can move the main classes from camel-core to camel-main so they get more separated and become more reusable in other parts.We have a common set of options to configure on camel context itself, and all the configuration of components etc. That logic can be more shared for camel main, camel k, camel spring boot, and others etc. Improvement Camel Main - Move to camel-main ccomponent Lets see if we can move the main classes from camel-core to camel-main so they get more separated and become more reusable in other parts.We have a common set of options to configure on camel context itself, and all the configuration of components etc. That logic can be more shared for camel main, camel k, camel spring boot, and others etc.
CAMEL-13618 camel3 - Move FileWatcherReloadStrategy out of camel-core For example to camel-support etc Improvement camel3 - Move FileWatcherReloadStrategy out of camel-core For example to camel-support etc
CAMEL-13612 camel-rest - Should separate consumer and producer component names You may end up with using rest-dsl and rest component together, and have a rest endpoint that is shared among them. Then the endpoint will have a componentName option set to the consumer, such as jetty. And then when the same endpoint is used for creating the rest producer (eg to rest) then it would fail. We should separate these two options. Improvement camel-rest - Should separate consumer and producer component names You may end up with using rest-dsl and rest component together, and have a rest endpoint that is shared among them. Then the endpoint will have a componentName option set to the consumer, such as jetty. And then when the same endpoint is used for creating the rest producer (eg to rest) then it would fail. We should separate these two options.
CAMEL-13608 camel-spring-boot - Add option to include/exclude routes based on their ids So you can for example do an unit test where you want to only test a specific route and then filter out everyone else. Currently you can filter on route builder and xml files level, but not on route ids. New Feature camel-spring-boot - Add option to include/exclude routes based on their ids So you can for example do an unit test where you want to only test a specific route and then filter out everyone else. Currently you can filter on route builder and xml files level, but not on route ids.
CAMEL-13605 Support setup proxy host and port on Telegram As we may run the camel-telegram application behind a proxy, it could be handy if camel-telegram support setting http proxy.  Improvement Support setup proxy host and port on Telegram As we may run the camel-telegram application behind a proxy, it could be handy if camel-telegram support setting http proxy. 
CAMEL-13599 Claim check - Allow to use dynamic key via simple language Asked on user forumhttp://camel.465427.n5.nabble.com/Using-dynamic-expression-as-claimCheck-key-tp5835356.html Improvement Claim check - Allow to use dynamic key via simple language Asked on user forumhttp://camel.465427.n5.nabble.com/Using-dynamic-expression-as-claimCheck-key-tp5835356.html
CAMEL-13597 Splitter tokenize doesn't really accept every regex Hi, Neither{code:java}.split().tokenize("\r?\n", true, 2, true){code}nor {code:java}.split().tokenize("\r\n|\n", true, 2, true){code}work. The latter expression insert a "|" instead of correctly split rows on \r\n or \n.       Improvement Splitter tokenize doesn't really accept every regex Hi, Neither{code:java}.split().tokenize("\r?\n", true, 2, true){code}nor {code:java}.split().tokenize("\r\n|\n", true, 2, true){code}work. The latter expression insert a "|" instead of correctly split rows on \r\n or \n.      
CAMEL-13594 camel apt - Avoid generating TypeConverter META-INF file when we generate TypeConverterLoader We can optimize this to only have the newer TypeConverterLoader file which has all the type converters that are optimized. And then in tooling/apt avoid generate both TypeConverter and TypeConverterLoaded meta files. Improvement camel apt - Avoid generating TypeConverter META-INF file when we generate TypeConverterLoader We can optimize this to only have the newer TypeConverterLoader file which has all the type converters that are optimized. And then in tooling/apt avoid generate both TypeConverter and TypeConverterLoaded meta files.
CAMEL-13584 Camel main - Calling init should initialize as much as possible So we can eager init as much as possible when running Camel Main, by calling main.init() method. This can be used to warmup Camel. Improvement Camel main - Calling init should initialize as much as possible So we can eager init as much as possible when running Camel Main, by calling main.init() method. This can be used to warmup Camel.
CAMEL-13583 Camel Injector - Add method for creating a new instance without bean processing There are use-cases where we for example loads the type converter loaded that creates an instance of the class, but we use the injector which does bean post processing by scanning methods for injecting fields / and other autowriting via those Camel annotations. But these type converters are basic and dont need this. There can be some other factory classes too, so lets have a basic injector method so you can choose. Improvement Camel Injector - Add method for creating a new instance without bean processing There are use-cases where we for example loads the type converter loaded that creates an instance of the class, but we use the injector which does bean post processing by scanning methods for injecting fields / and other autowriting via those Camel annotations. But these type converters are basic and dont need this. There can be some other factory classes too, so lets have a basic injector method so you can choose.
CAMEL-13582 Camel main - Configuration class should support automatic autowire by type In such a configuration class{code}public class MyConfiguration {    @BindToRegistry    public ClientConfiguration myClientConfig() {        ClientConfiguration cc = new ClientConfiguration();        cc.setMaxConnections(5);        return cc;    }    @BindToRegistry    public MyBean myBean(@PropertyInject("hi") String hi, @PropertyInject("bye") String bye) {        // this will create an instance of this bean with the name of the method (eg myBean)        return new MyBean(hi, bye);    }    @BindToRegistry    public AmazonS3 myAmazon(@BeanInject("myClientConfig") ClientConfiguration config) {        return AmazonS3Client.builder().withRegion("US-EAST-1").withClientConfiguration(config).build();    }    public void configure() {        // this method is optional and can be removed if no additional configuration is needed.    }}{code}We could detect that the myAmazon method has a parameter of type ClientConfiguration which we can attempt to lookup as singleton bean. Then you can do{code}    @BindToRegistry    public AmazonS3 myAmazon(ClientConfiguration config) {code} Improvement Camel main - Configuration class should support automatic autowire by type In such a configuration class{code}public class MyConfiguration {    @BindToRegistry    public ClientConfiguration myClientConfig() {        ClientConfiguration cc = new ClientConfiguration();        cc.setMaxConnections(5);        return cc;    }    @BindToRegistry    public MyBean myBean(@PropertyInject("hi") String hi, @PropertyInject("bye") String bye) {        // this will create an instance of this bean with the name of the method (eg myBean)        return new MyBean(hi, bye);    }    @BindToRegistry    public AmazonS3 myAmazon(@BeanInject("myClientConfig") ClientConfiguration config) {        return AmazonS3Client.builder().withRegion("US-EAST-1").withClientConfiguration(config).build();    }    public void configure() {        // this method is optional and can be removed if no additional configuration is needed.    }}{code}We could detect that the myAmazon method has a parameter of type ClientConfiguration which we can attempt to lookup as singleton bean. Then you can do{code}    @BindToRegistry    public AmazonS3 myAmazon(ClientConfiguration config) {code}
CAMEL-13581 camel-blueprint - Many WARNs about overriding type converters Noticed these during testing CiA2 book2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@659f226a to: StaticMethodTypeConverter: public static org.restlet.data.Method org.apache.camel.component.restlet.converter.RestletConverter.toMethod(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@2e463f4 to: StaticMethodTypeConverter: public static org.restlet.data.Method[] org.apache.camel.component.restlet.converter.RestletConverter.toMethods(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@32ec9c90 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType[] org.apache.camel.component.restlet.converter.RestletConverter.toMediaTypes(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36ab3814 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType org.apache.camel.component.restlet.converter.RestletConverter.toMediaType(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@467233e4 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(org.apache.camel.http.common.HttpMessage,org.apache.camel.Exchange) throws java.lang.Exception2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@427a12b6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6025d790 to: StaticMethodTypeConverter: public static java.io.BufferedReader org.apache.camel.http.common.HttpConverter.toReader(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@af7e376 to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.http.common.HttpConverter.toServletResponse(org.apache.camel.Message)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@5dcd0cdf to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.http.common.HttpConverter.toServletRequest(org.apache.camel.Message)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4fb04a72 to: StaticMethodTypeConverter: public static javax.servlet.ServletInputStream org.apache.camel.http.common.HttpConverter.toServletInputStream(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1a07bf6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.spring.converter.ResourceConverter.convertToInputStream(org.springframework.core.io.Resource) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@34d713a2 to: StaticMethodTypeConverter: public static java.lang.Object[] org.apache.camel.component.cxf.converter.CxfConverter.toArray(java.lang.Object)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36aab105 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.toInputStream(javax.ws.rs.core.Response,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@889a8a8 to: StaticMethodTypeConverter: public static javax.xml.namespace.QName org.apache.camel.component.cxf.converter.CxfConverter.toQName(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f29353f to: StaticMethodTypeConverter: public static org.apache.cxf.message.MessageContentsList org.apache.camel.component.cxf.converter.CxfConverter.toMessageContentsList(java.lang.Object[])2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36f7d7b to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.DataFormat org.apache.camel.component.cxf.converter.CxfConverter.toDataFormat(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@60aec68a to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToString(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@25a7fedf to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToInputStream(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6361b799 to: StaticMethodTypeConverter: public static org.w3c.dom.NodeList org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayloadToNodeList(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1b9d9a2b to: StaticMethodTypeConverter: public static org.w3c.dom.Node org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToNode(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@d919544 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.nodeListToCxfPayload(org.w3c.dom.NodeList,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@17dad32f to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.elementToCxfPayload(org.w3c.dom.Element,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@79696332 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.documentToCxfPayload(org.w3c.dom.Document,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@ed2f2f6 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.sourceToCxfPayload(javax.xml.transform.Source,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@fe87ddd to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4eea94a4 to: StaticMethodTypeConverter: public static javax.xml.transform.Source org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToSource(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@29be997f to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@33eb6758 to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.file.GenericFileConverter.genericFileToString(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException,org.apache.camel.NoTypeConversionAvailableException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f8a6243 to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7f9e8421 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23da79eb to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@168b4cb0 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@3e05586b to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@35b17c06 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@45545e7a to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@9f674ac to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1da4b3f9 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23cbbd07 to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@448b808a to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7e62cfa3 to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException Task camel-blueprint - Many WARNs about overriding type converters Noticed these during testing CiA2 book2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@659f226a to: StaticMethodTypeConverter: public static org.restlet.data.Method org.apache.camel.component.restlet.converter.RestletConverter.toMethod(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@2e463f4 to: StaticMethodTypeConverter: public static org.restlet.data.Method[] org.apache.camel.component.restlet.converter.RestletConverter.toMethods(java.lang.String)2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@32ec9c90 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType[] org.apache.camel.component.restlet.converter.RestletConverter.toMediaTypes(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36ab3814 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType org.apache.camel.component.restlet.converter.RestletConverter.toMediaType(java.lang.String)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@467233e4 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(org.apache.camel.http.common.HttpMessage,org.apache.camel.Exchange) throws java.lang.Exception2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@427a12b6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6025d790 to: StaticMethodTypeConverter: public static java.io.BufferedReader org.apache.camel.http.common.HttpConverter.toReader(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@af7e376 to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.http.common.HttpConverter.toServletResponse(org.apache.camel.Message)2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@5dcd0cdf to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.http.common.HttpConverter.toServletRequest(org.apache.camel.Message)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4fb04a72 to: StaticMethodTypeConverter: public static javax.servlet.ServletInputStream org.apache.camel.http.common.HttpConverter.toServletInputStream(org.apache.camel.http.common.HttpMessage) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1a07bf6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.spring.converter.ResourceConverter.convertToInputStream(org.springframework.core.io.Resource) throws java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@34d713a2 to: StaticMethodTypeConverter: public static java.lang.Object[] org.apache.camel.component.cxf.converter.CxfConverter.toArray(java.lang.Object)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36aab105 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.toInputStream(javax.ws.rs.core.Response,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@889a8a8 to: StaticMethodTypeConverter: public static javax.xml.namespace.QName org.apache.camel.component.cxf.converter.CxfConverter.toQName(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f29353f to: StaticMethodTypeConverter: public static org.apache.cxf.message.MessageContentsList org.apache.camel.component.cxf.converter.CxfConverter.toMessageContentsList(java.lang.Object[])2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36f7d7b to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.DataFormat org.apache.camel.component.cxf.converter.CxfConverter.toDataFormat(java.lang.String)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@60aec68a to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToString(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@25a7fedf to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToInputStream(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6361b799 to: StaticMethodTypeConverter: public static org.w3c.dom.NodeList org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayloadToNodeList(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1b9d9a2b to: StaticMethodTypeConverter: public static org.w3c.dom.Node org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToNode(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@d919544 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.nodeListToCxfPayload(org.w3c.dom.NodeList,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@17dad32f to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.elementToCxfPayload(org.w3c.dom.Element,org.apache.camel.Exchange)2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@79696332 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.documentToCxfPayload(org.w3c.dom.Document,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@ed2f2f6 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.sourceToCxfPayload(javax.xml.transform.Source,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@fe87ddd to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4eea94a4 to: StaticMethodTypeConverter: public static javax.xml.transform.Source org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToSource(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@29be997f to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@33eb6758 to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.file.GenericFileConverter.genericFileToString(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException,org.apache.camel.NoTypeConversionAvailableException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f8a6243 to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7f9e8421 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23da79eb to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@168b4cb0 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@3e05586b to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@35b17c06 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@45545e7a to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@9f674ac to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1da4b3f9 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23cbbd07 to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@448b808a to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7e62cfa3 to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
CAMEL-13580 camel-zookeeper - Deprecate route master/slave policy As the camel-zookeeper-master component is better at handling this. So lets deprecate this in Camel 2.x, and remove in 3.0 Improvement camel-zookeeper - Deprecate route master/slave policy As the camel-zookeeper-master component is better at handling this. So lets deprecate this in Camel 2.x, and remove in 3.0
CAMEL-13569 JndiContext - Remove old bean binding There is some old code that allows to define in jndi.properties beans with .class etc to create these beans via basic class loading that was from Camel 1.x time and nobody uses.This should be removed Improvement JndiContext - Remove old bean binding There is some old code that allows to define in jndi.properties beans with .class etc to create these beans via basic class loading that was from Camel 1.x time and nobody uses.This should be removed
CAMEL-13566 IntrospectionSupport - Remove old legacy JDK PropertyEditor There is some old code using JDKPropertyEditor editor = PropertyEditorManager.findEditor(type);But this is no longer in use as we really use camel's type converter. That above is also slow and not thread safe and was intended for java swing/beans stuff and some cruft from very old times. Lets try to get rid of it. Improvement IntrospectionSupport - Remove old legacy JDK PropertyEditor There is some old code using JDKPropertyEditor editor = PropertyEditorManager.findEditor(type);But this is no longer in use as we really use camel's type converter. That above is also slow and not thread safe and was intended for java swing/beans stuff and some cruft from very old times. Lets try to get rid of it.
CAMEL-13557 Support for nested properties binding As today properties binding does not work for nested objects so assuming I have a class like:{code:java}class MyComponent {        public void setFoo(String foo) {        this.foo = foo;    }    public String getFoo() {        return foo;    }    public void setConfiguration(Configuration conf) {        this.conf = conf;    }    public Configuration getConfiguration() {        return conf;    }    static class Configuration {            public void setBar(String bar) {            this.bar = bar        }        public String getBar() {            return bar        }    }}{code}And a set of properties like:{code}myComponent.foo = "foo"myComponent.conf.bar = "bar"{code}Then only MyComponent.foo will be set but it would be nice if the binding framework could navigate the property using dot notation and set any dependent object. New Feature Support for nested properties binding As today properties binding does not work for nested objects so assuming I have a class like:{code:java}class MyComponent {        public void setFoo(String foo) {        this.foo = foo;    }    public String getFoo() {        return foo;    }    public void setConfiguration(Configuration conf) {        this.conf = conf;    }    public Configuration getConfiguration() {        return conf;    }    static class Configuration {            public void setBar(String bar) {            this.bar = bar        }        public String getBar() {            return bar        }    }}{code}And a set of properties like:{code}myComponent.foo = "foo"myComponent.conf.bar = "bar"{code}Then only MyComponent.foo will be set but it would be nice if the binding framework could navigate the property using dot notation and set any dependent object.
CAMEL-13555 Producer and consumer template/cache should check if camel is started when being used When sending via producer template etc then you can send to endpoints even if camel is stopped / not started etc. We should add a check for this as camel would ideally need to be started first to ensure the sending works correctly. Improvement Producer and consumer template/cache should check if camel is started when being used When sending via producer template etc then you can send to endpoints even if camel is stopped / not started etc. We should add a check for this as camel would ideally need to be started first to ensure the sending works correctly.
CAMEL-13551 camel3 - Some of the SPI can be static services when there can only be one configured A number of configurations for packagescan class resolver and node id factory and whatnot are essentially a single instance that can be configured, so we can leverage this fact and make them StaticService if they are just defined as a Service today. Improvement camel3 - Some of the SPI can be static services when there can only be one configured A number of configurations for packagescan class resolver and node id factory and whatnot are essentially a single instance that can be configured, so we can leverage this fact and make them StaticService if they are just defined as a Service today.
CAMEL-13540 isUseAdviceWith causes test to hang Having this test:{code:java}import org.apache.camel.CamelContext;import org.apache.camel.RoutesBuilder;import org.apache.camel.builder.AdviceWithRouteBuilder;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class MyRouteTest extends CamelTestSupport {  private static final String ROUTE_ID = "mytest";  @Override  public RoutesBuilder createRouteBuilder() throws Exception {    return new RouteBuilder() {      @Override      public void configure() throws Exception {        from("direct:mytest")          .id(ROUTE_ID)          .to("stream:out");      }    };  }  @Override  public void setUp() throws Exception {      super.setUp();      final CamelContext camelContext = context();      camelContext.getRouteDefinition(ROUTE_ID)        .adviceWith(camelContext, new AdviceWithRouteBuilder() {          @Override          public void configure() throws Exception {            weaveAddLast().to("mock:extract");          }        });  }  @Override  public boolean isUseAdviceWith() {      return true; // <- here is the problem  }  @Test  public void shouldFire() throws InterruptedException {    // given    final MockEndpoint myMock = getMockEndpoint("mock:extract");    myMock.expectedMessageCount(1);    myMock.expectedBodiesReceived("test");    // when    template.sendBody("direct:mytest", "test");    // then    myMock.assertIsSatisfied();  }}{code} Causes Camel to hang Improvement isUseAdviceWith causes test to hang Having this test:{code:java}import org.apache.camel.CamelContext;import org.apache.camel.RoutesBuilder;import org.apache.camel.builder.AdviceWithRouteBuilder;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class MyRouteTest extends CamelTestSupport {  private static final String ROUTE_ID = "mytest";  @Override  public RoutesBuilder createRouteBuilder() throws Exception {    return new RouteBuilder() {      @Override      public void configure() throws Exception {        from("direct:mytest")          .id(ROUTE_ID)          .to("stream:out");      }    };  }  @Override  public void setUp() throws Exception {      super.setUp();      final CamelContext camelContext = context();      camelContext.getRouteDefinition(ROUTE_ID)        .adviceWith(camelContext, new AdviceWithRouteBuilder() {          @Override          public void configure() throws Exception {            weaveAddLast().to("mock:extract");          }        });  }  @Override  public boolean isUseAdviceWith() {      return true; // <- here is the problem  }  @Test  public void shouldFire() throws InterruptedException {    // given    final MockEndpoint myMock = getMockEndpoint("mock:extract");    myMock.expectedMessageCount(1);    myMock.expectedBodiesReceived("test");    // when    template.sendBody("direct:mytest", "test");    // then    myMock.assertIsSatisfied();  }}{code} Causes Camel to hang
CAMEL-13535 Camel main - Allow to configure supervising route controller Like you can do in SB to setup advanced route startup where Camel can retry starting routes etc. Improvement Camel main - Allow to configure supervising route controller Like you can do in SB to setup advanced route startup where Camel can retry starting routes etc.
CAMEL-13534 Simple language - Add colon as alternative syntax style The simple syntax can maybe be improved a bit when its a function such as env or sysenv or other functions vs OGNL method calls on body, headers etc that uses dot style.Eg {code}${sysenv.FOO}{code}vs{code}${env:FOO}{code}It may feel a bit more natural to use colon in these situations, and dot when using{code}${body.someGetter}{code}And to refer to a header you can use both{code}${header.foo}{code}{code}${header:foo}{code}https://github.com/apache/camel/blob/master/core/camel-core/src/main/docs/simple-language.adoc Improvement Simple language - Add colon as alternative syntax style The simple syntax can maybe be improved a bit when its a function such as env or sysenv or other functions vs OGNL method calls on body, headers etc that uses dot style.Eg {code}${sysenv.FOO}{code}vs{code}${env:FOO}{code}It may feel a bit more natural to use colon in these situations, and dot when using{code}${body.someGetter}{code}And to refer to a header you can use both{code}${header.foo}{code}{code}${header:foo}{code}https://github.com/apache/camel/blob/master/core/camel-core/src/main/docs/simple-language.adoc
CAMEL-13531 Simple language - Add env as function to lookup system env variable You have to use sysenv to lookup OS env variable. But most people would know it as env, so lets add that as an alias so you can use both of them. Improvement Simple language - Add env as function to lookup system env variable You have to use sysenv to lookup OS env variable. But most people would know it as env, so lets add that as an alias so you can use both of them.
CAMEL-13528 Rename chiper to cipher Fix the typo in the API in camel-core Task Rename chiper to cipher Fix the typo in the API in camel-core
CAMEL-13527 Implement missing optimisation for DelimiterBasedFrameDecoder See pretty nice analysis on SO [https://stackoverflow.com/questions/56110408/memory-leak-in-camel-netty-tcp-client-when-consuming-lines-with-windows-line-bre]*io.netty.handler.codec.DelimiterBasedFrameDecoder* internally delegates decoding to *io.netty.handler.codec.LineBasedFrameDecoder*. This delegation is not working with Camel, because Netty internally checks for condition{code:java}this.getClass() != DelimiterBasedFrameDecoder.class // io.netty.handler.codec.DelimiterBasedFrameDecoder line 174 - !isSubclass(){code}We can recreate similar optimisation inside *org.apache.camel.component.netty4.codec.DelimiterBasedFrameDecoder* and get (according to SO post) significant performance improvement. Improvement Implement missing optimisation for DelimiterBasedFrameDecoder See pretty nice analysis on SO [https://stackoverflow.com/questions/56110408/memory-leak-in-camel-netty-tcp-client-when-consuming-lines-with-windows-line-bre]*io.netty.handler.codec.DelimiterBasedFrameDecoder* internally delegates decoding to *io.netty.handler.codec.LineBasedFrameDecoder*. This delegation is not working with Camel, because Netty internally checks for condition{code:java}this.getClass() != DelimiterBasedFrameDecoder.class // io.netty.handler.codec.DelimiterBasedFrameDecoder line 174 - !isSubclass(){code}We can recreate similar optimisation inside *org.apache.camel.component.netty4.codec.DelimiterBasedFrameDecoder* and get (according to SO post) significant performance improvement.
CAMEL-13525 camel - Only allow setting routeId once per route in Java DSL 1 route = 1 route id, what you did in that unit test / JIRA ticket was wrong and not intended to be supported, eg .routeId will override each other, a route has 1 route id. So do only set .routeId once per route!From gitter chat Improvement camel - Only allow setting routeId once per route in Java DSL 1 route = 1 route id, what you did in that unit test / JIRA ticket was wrong and not intended to be supported, eg .routeId will override each other, a route has 1 route id. So do only set .routeId once per route!From gitter chat
CAMEL-13522 camel3 - The various Camel exceptions should favour extending runtime exception This makes using the APIs in Camel easier, and most of them are runtime based anyway. So lets align to be more non checked exceptions Improvement camel3 - The various Camel exceptions should favour extending runtime exception This makes using the APIs in Camel easier, and most of them are runtime based anyway. So lets align to be more non checked exceptions
CAMEL-13516 camel-webhook - Consumer polish Should extend ServiceSupport and do its startup stop in doStart/doStop etc. Improvement camel-webhook - Consumer polish Should extend ServiceSupport and do its startup stop in doStart/doStop etc.
CAMEL-13515 Allow producer to lazy start until first message We could add option to DefaultProducer so any producer allows to defer its startup (doStart) to when the first message is being processed. The danger is that the startup logic has to be thread-safe and if there are concurrent messages then they would need to hold back until the startup is done. This is a trade-off that the user would need to accept if enabled.But this can make it easier to let Camel startup routes even if some remote server is not available when a producer startup as part of route startup. Improvement Allow producer to lazy start until first message We could add option to DefaultProducer so any producer allows to defer its startup (doStart) to when the first message is being processed. The danger is that the startup logic has to be thread-safe and if there are concurrent messages then they would need to hold back until the startup is done. This is a trade-off that the user would need to accept if enabled.But this can make it easier to let Camel startup routes even if some remote server is not available when a producer startup as part of route startup.
CAMEL-13514 camel3 - Service start/stop should use unchecked exceptions The API for org.apache.camel.Service has throws Exception for its start/stop methods. It would be great to remove those, as they throw runtime exceptions when failing, and this makes using these APIs easier for end users, so they dont have the burden of checked exceptions. Improvement camel3 - Service start/stop should use unchecked exceptions The API for org.apache.camel.Service has throws Exception for its start/stop methods. It would be great to remove those, as they throw runtime exceptions when failing, and this makes using these APIs easier for end users, so they dont have the burden of checked exceptions.
CAMEL-13505 Camel-Tracer: New implementation We deprecated the 2.x one and removed it, hence we need a new implementation in Camel 3. Task Camel-Tracer: New implementation We deprecated the 2.x one and removed it, hence we need a new implementation in Camel 3.
CAMEL-13503 Camel main - Allow to configure global and common options ala camel-spring-boot have So you can set context name, shutdown timeout, and other options etc. Improvement Camel main - Allow to configure global and common options ala camel-spring-boot have So you can set context name, shutdown timeout, and other options etc.
CAMEL-13502 Properties component - Let OS environment variable take precedence by having it in override mode by default See SOhttps://stackoverflow.com/questions/56081583/camel-standalone-configuration-of-propertiescomponent-does-not-work-on-beaninIt makes sense to let OS env variables by default to let them override any existing property values. This is natural in cloud platforms and also how Spring Boot would work etc. Improvement Properties component - Let OS environment variable take precedence by having it in override mode by default See SOhttps://stackoverflow.com/questions/56081583/camel-standalone-configuration-of-propertiescomponent-does-not-work-on-beaninIt makes sense to let OS env variables by default to let them override any existing property values. This is natural in cloud platforms and also how Spring Boot would work etc.
CAMEL-13500 Component configuration - Allow to use dot to refer to nested options For example some Camel components has nested options like camel-netty4 which has a NettyConfiguration class. So when you want to set some of its options you cannot easily do this via component configuration. We have some special support for spring boot that generated these nested options, but its also needed for other use-cases such as the Camel Main and just in general.For example with SB we can docamel.component.netty4-http.configuration.max-header-sizeWe should add support for doing this via Camel Main and in general also Task Component configuration - Allow to use dot to refer to nested options For example some Camel components has nested options like camel-netty4 which has a NettyConfiguration class. So when you want to set some of its options you cannot easily do this via component configuration. We have some special support for spring boot that generated these nested options, but its also needed for other use-cases such as the Camel Main and just in general.For example with SB we can docamel.component.netty4-http.configuration.max-header-sizeWe should add support for doing this via Camel Main and in general also
CAMEL-13483 File Component: Add option to fail startup when not having read permission on folder When starting a file consumer you configure a folder to poll.When the camel context does not have read access on the folder, there is no error (or even warning), that route just starts.But when saving files into the folder, they are not picked up and there is no further message.This issue was raised on stackoverflow: [https://stackoverflow.com/questions/55920217/camel-file-consumer-when-folder-is-not-accessible] Ideally, the file consumer would check at startup if it has access to the folder (we should propably check for write access here, but read access could also be enough?)If the component (/context) does not have the required access to the folder, it should throw the error and exit the context (so it isn't started in a failure state).This option should be disabled by default.Also we should think about a way to configure the behavior:1. For what permission should the consumer check (read / read-write)2. What should happen when the permission is not given? (just an error / error + stop route / error + stop context)As always, we should make this configurable via a custom bean. New Feature File Component: Add option to fail startup when not having read permission on folder When starting a file consumer you configure a folder to poll.When the camel context does not have read access on the folder, there is no error (or even warning), that route just starts.But when saving files into the folder, they are not picked up and there is no further message.This issue was raised on stackoverflow: [https://stackoverflow.com/questions/55920217/camel-file-consumer-when-folder-is-not-accessible] Ideally, the file consumer would check at startup if it has access to the folder (we should propably check for write access here, but read access could also be enough?)If the component (/context) does not have the required access to the folder, it should throw the error and exit the context (so it isn't started in a failure state).This option should be disabled by default.Also we should think about a way to configure the behavior:1. For what permission should the consumer check (read / read-write)2. What should happen when the permission is not given? (just an error / error + stop route / error + stop context)As always, we should make this configurable via a custom bean.
CAMEL-13476 QuartzScheduledPollConsumerScheduler should not remove trigger when quartz is clustered When using ftp component with quartz scheduler, like following sample"ftp:"+sftpUsername+"@"+sftpHost+":"+sftpPort+"/3G?password="+sftpPw+"&binary=true&delay=5s&delete=true&scheduler=quartz2&scheduler.cron=\{{cron.3G.processing}}&scheduler.triggerId=3G_Trigger" During shutdown, camel will remove all triggers without check quartz is running in cluster mode or not. Since we config quartz is cluster means there can be other instances running, so does it make sense we should check quartz cluster state to decide triggers should remove or keep? !QuartzScheduledPollConsumerScheduler.java — camel-quartz2 2019-05-02 15-46-49.jpg!  Improvement QuartzScheduledPollConsumerScheduler should not remove trigger when quartz is clustered When using ftp component with quartz scheduler, like following sample"ftp:"+sftpUsername+"@"+sftpHost+":"+sftpPort+"/3G?password="+sftpPw+"&binary=true&delay=5s&delete=true&scheduler=quartz2&scheduler.cron=\{{cron.3G.processing}}&scheduler.triggerId=3G_Trigger" During shutdown, camel will remove all triggers without check quartz is running in cluster mode or not. Since we config quartz is cluster means there can be other instances running, so does it make sense we should check quartz cluster state to decide triggers should remove or keep? !QuartzScheduledPollConsumerScheduler.java -- camel-quartz2 2019-05-02 15-46-49.jpg! 
CAMEL-13474 Move dataformats out of camel-core We should deprecate string/seriazliation dataformats as they dont bring value, and java object serialization is a bad design and also often a security vulnerability (many issues reported against this functionality in java).And then we can move zip/gzip into camel-deflater.  Task Move dataformats out of camel-core We should deprecate string/seriazliation dataformats as they dont bring value, and java object serialization is a bad design and also often a security vulnerability (many issues reported against this functionality in java).And then we can move zip/gzip into camel-deflater. 
CAMEL-13473 camel3 - build system - dataformats from camel-core no longer generated in readme files Likely because they were moved from camel-core to camel-base etc. Task camel3 - build system - dataformats from camel-core no longer generated in readme files Likely because they were moved from camel-core to camel-base etc.
CAMEL-13460 camel3 - DefaultEndpoint - Should be singleton by default We should{code}    @Override    public boolean isSingleton() {        // lets be singleton by default as otherwise end-users may mistakenly write components        // which are not singleton. Only in very rare situations would you need to be non-singletons.        return true;    }{code}in DefaultEndpoint, and then remove it from all the components that are also singleton. I think its possible only camel-ftp that may not be. Improvement camel3 - DefaultEndpoint - Should be singleton by default We should{code}    @Override    public boolean isSingleton() {        // lets be singleton by default as otherwise end-users may mistakenly write components        // which are not singleton. Only in very rare situations would you need to be non-singletons.        return true;    }{code}in DefaultEndpoint, and then remove it from all the components that are also singleton. I think its possible only camel-ftp that may not be.
CAMEL-13459 camel3 - Move language annotations for bean parameter bindings into their own package We have @Simple @Constant and @SpEL that are in the root package of language. They should be moved to their sub package, and @SpEL moved to camel-spring Improvement camel3 - Move language annotations for bean parameter bindings into their own package We have @Simple @Constant and @SpEL that are in the root package of language. They should be moved to their sub package, and @SpEL moved to camel-spring
CAMEL-13457 ProxyHelper - Remove binding option binding is always default true and setting it to false is no longer supported on Camel 3 Improvement ProxyHelper - Remove binding option binding is always default true and setting it to false is no longer supported on Camel 3
CAMEL-13456 CamelContext - Move API that are not related to end users to an ExtendedCamelContext Lets cleanup a bit more on CamelContext and move APIs that are more useable for component developers and internally to Camel itself to an ExtendedCamelContext, so the API the end user see on CamelContext is more limited and mostly relevant to what he/she needs to use.We already have some for model CamelContext and JMX etc today.  Improvement CamelContext - Move API that are not related to end users to an ExtendedCamelContext Lets cleanup a bit more on CamelContext and move APIs that are more useable for component developers and internally to Camel itself to an ExtendedCamelContext, so the API the end user see on CamelContext is more limited and mostly relevant to what he/she needs to use.We already have some for model CamelContext and JMX etc today. 
CAMEL-13449 camel3 - Move bean component out of camel-core It seems there are only a few tangles left to make it possible to move bean component and language out of camel-core Improvement camel3 - Move bean component out of camel-core It seems there are only a few tangles left to make it possible to move bean component and language out of camel-core
CAMEL-13446 camel-xpath does not build I think due to CAMEL-13442 refactoring, there's a generated sources path that's looking in the wrong place when camel-xpath tries to build.  Here's the stacktrace:{code:java}[INFO] Scanning for projects...[INFO] [INFO] ------------------------------------------------------------------------[INFO] Building Camel :: XPath 3.0.0-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO] [INFO] --- maven-bundle-plugin:4.1.0:cleanVersions (versions) @ camel-xpath ---[INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ camel-xpath ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory /home/tdalbo/Programming/upstream/apache/camel/components/camel-xpath/src/main/resources[INFO] [INFO] --- flatten-maven-plugin:1.1.0:flatten (default-cli) @ camel-xpath ---[INFO] Generating flattened POM of project org.apache.camel:camel-xpath:jar:3.0.0-SNAPSHOT...[INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ camel-xpath ---[INFO] Changes detected - recompiling the module![INFO] Compiling 8 source files to /home/tdalbo/Programming/upstream/apache/camel/components/camel-xpath/target/classes[INFO] [INFO] --- camel-package-maven-plugin:3.0.0-SNAPSHOT:prepare-components (generate) @ camel-xpath ---[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 3.298 s[INFO] Finished at: 2019-04-23T07:42:30-06:00[INFO] Final Memory: 24M/78M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.0.0-SNAPSHOT:prepare-components (generate) on project camel-xpath: Error loading language model from camel-core. Reason: java.io.FileNotFoundException: /home/tdalbo/Programming/upstream/apache/camel/core/camel-core/target/classes/org/apache/camel/model/language/xpath.json (No such file or directory) -> [Help 1][ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException{code} Task camel-xpath does not build I think due to CAMEL-13442 refactoring, there's a generated sources path that's looking in the wrong place when camel-xpath tries to build.  Here's the stacktrace:{code:java}[INFO] Scanning for projects...[INFO] [INFO] ------------------------------------------------------------------------[INFO] Building Camel :: XPath 3.0.0-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO] [INFO] --- maven-bundle-plugin:4.1.0:cleanVersions (versions) @ camel-xpath ---[INFO] [INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ camel-xpath ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory /home/tdalbo/Programming/upstream/apache/camel/components/camel-xpath/src/main/resources[INFO] [INFO] --- flatten-maven-plugin:1.1.0:flatten (default-cli) @ camel-xpath ---[INFO] Generating flattened POM of project org.apache.camel:camel-xpath:jar:3.0.0-SNAPSHOT...[INFO] [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ camel-xpath ---[INFO] Changes detected - recompiling the module![INFO] Compiling 8 source files to /home/tdalbo/Programming/upstream/apache/camel/components/camel-xpath/target/classes[INFO] [INFO] --- camel-package-maven-plugin:3.0.0-SNAPSHOT:prepare-components (generate) @ camel-xpath ---[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 3.298 s[INFO] Finished at: 2019-04-23T07:42:30-06:00[INFO] Final Memory: 24M/78M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.0.0-SNAPSHOT:prepare-components (generate) on project camel-xpath: Error loading language model from camel-core. Reason: java.io.FileNotFoundException: /home/tdalbo/Programming/upstream/apache/camel/core/camel-core/target/classes/org/apache/camel/model/language/xpath.json (No such file or directory) -> [Help 1][ERROR] [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException{code}
CAMEL-13442 camel3 - Move xpath out of camel-core We can move more xml stuff out of camel-core such as the xpath language Improvement camel3 - Move xpath out of camel-core We can move more xml stuff out of camel-core such as the xpath language
CAMEL-13439 camel3 - DataFormatResolver should be able to lookup from model When you have data formats defined via ids, such as{code}    <dataFormats>        <json library="Jackson" id="myjson"/>        <jaxb contextPath="org.apache.camel.component.dozer.example.abc" id="myjaxb"/>    </dataFormats>{code} Improvement camel3 - DataFormatResolver should be able to lookup from model When you have data formats defined via ids, such as{code}    <dataFormats>        <json library="Jackson" id="myjson"/>        <jaxb contextPath="org.apache.camel.component.dozer.example.abc" id="myjaxb"/>    </dataFormats>{code}
CAMEL-13432 Simple language - Deprecate and remove change its start/end token We should rely on simple tokens being ${ } or $simple{ } for its functions. There is some code that would allow to change those but its not really in use and may not actually work in 100% situations. So lets cleanup this for camel 3. So deprecate in camel 2.x and remove in 3. Improvement Simple language - Deprecate and remove change its start/end token We should rely on simple tokens being ${ } or $simple{ } for its functions. There is some code that would allow to change those but its not really in use and may not actually work in 100% situations. So lets cleanup this for camel 3. So deprecate in camel 2.x and remove in 3.
CAMEL-13430 Simple language - Functions with space should use camelCase style Lets avoid having functions such asstarts withnot containswhere there are space as that makes it a bit less obvious its a function name, and can also lead to: https://stackoverflow.com/questions/55705150/camel-simple-expression-inside-jsonpath-languageSo instead if we usestartsWithnotContains Improvement Simple language - Functions with space should use camelCase style Lets avoid having functions such asstarts withnot containswhere there are space as that makes it a bit less obvious its a function name, and can also lead to: https://stackoverflow.com/questions/55705150/camel-simple-expression-inside-jsonpath-languageSo instead if we usestartsWithnotContains
CAMEL-13425 Add possibility to invalidate cache for PropertiesComponent Currently I can only enable/disable cache for PropertiesComponent.I'd like to be able to enable caching, but programmatically invalidate cache on demand.This should be rather simeple to implemet, something like:{code:java}public void invalidateCache() {  this.cacheMap.clear();}{code} Improvement Add possibility to invalidate cache for PropertiesComponent Currently I can only enable/disable cache for PropertiesComponent.I'd like to be able to enable caching, but programmatically invalidate cache on demand.This should be rather simeple to implemet, something like:{code:java}public void invalidateCache() {  this.cacheMap.clear();}{code}
CAMEL-13422 Remove camel-rmi Its bad design to use Java RMI and the work on CAMEL-13421 makes it better to remove this component as well, and deprecate it in 2.x Improvement Remove camel-rmi Its bad design to use Java RMI and the work on CAMEL-13421 makes it better to remove this component as well, and deprecate it in 2.x
CAMEL-13421 Remove BeanInvocation from camel-bean Doing remote RPC calls via java bean serialization is a bad design and its not really much in use. Lets use the chance to get this removed for 3.x and deprecated in 2.x. Improvement Remove BeanInvocation from camel-bean Doing remote RPC calls via java bean serialization is a bad design and its not really much in use. Lets use the chance to get this removed for 3.x and deprecated in 2.x.
CAMEL-13417 Move mock component out of camel-core Now that we got a bit more moved out, its maybe a bit easier to move out the mock. Improvement Move mock component out of camel-core Now that we got a bit more moved out, its maybe a bit easier to move out the mock.
CAMEL-13416 Please add camel-core-osgi to Camel Karaf feature repo I was following this documentation [http://camel.apache.org/karaf.html] in order to make Camel work in Karaf.Many tutorials point to this configuration:{code:java}@Overridepublic void start(final BundleContext bundleContext) throws Exception {  camelContext = new OsgiDefaultCamelContext(bundleContext);  registrationCamelContext = bundleContext.registerService(CamelContext.class, camelContext, null);  camelContext.start();}{code}Unfortunately, when I install Camel in karaf:{code:java}karaf@root> feature:repo-add camel 2.23.1{code}only camel-core can be installed, while camel-core-osgi is missing.Unfortunately camel-core contains only {code:java}DefaultCamelContext{code}which causes classpath problems in Karaf. For example I import camel-http4, but I get:{code:java}Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http4://my.site due to: No component found with scheme: http4{code}or I import camel-jackson, but I get:{code:java}Caused by: java.lang.IllegalArgumentException: Data format 'json-jackson' could not be created. Ensure that the data format is valid and the associated Camel component is present on the classpath{code}The solution is to use:{code:java}OsgiDefaultCamelContext{code}which is located in camel-core-osgi, which is unavailable in Camel Karaf repo.  Improvement Please add camel-core-osgi to Camel Karaf feature repo I was following this documentation [http://camel.apache.org/karaf.html] in order to make Camel work in Karaf.Many tutorials point to this configuration:{code:java}@Overridepublic void start(final BundleContext bundleContext) throws Exception {  camelContext = new OsgiDefaultCamelContext(bundleContext);  registrationCamelContext = bundleContext.registerService(CamelContext.class, camelContext, null);  camelContext.start();}{code}Unfortunately, when I install Camel in karaf:{code:java}karaf@root> feature:repo-add camel 2.23.1{code}only camel-core can be installed, while camel-core-osgi is missing.Unfortunately camel-core contains only {code:java}DefaultCamelContext{code}which causes classpath problems in Karaf. For example I import camel-http4, but I get:{code:java}Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http4://my.site due to: No component found with scheme: http4{code}or I import camel-jackson, but I get:{code:java}Caused by: java.lang.IllegalArgumentException: Data format 'json-jackson' could not be created. Ensure that the data format is valid and the associated Camel component is present on the classpath{code}The solution is to use:{code:java}OsgiDefaultCamelContext{code}which is located in camel-core-osgi, which is unavailable in Camel Karaf repo. 
CAMEL-13414 Date.getTime() can be changed to System.currentTimeMillis() Hello,I found that System.currentTimeMillis() can be used here instead of new Date.getTime().Since new Date() is a thin wrapper of light method System.currentTimeMillis(). The performance will be greatly damaged if it is invoked too much times.According to my local testing at the same environment, System.currentTimeMillis() can achieve a speedup to 5 times (435 ms vs 2073 ms), when these two methods are invoked 5,000,000 times. Improvement Date.getTime() can be changed to System.currentTimeMillis() Hello,I found that System.currentTimeMillis() can be used here instead of new Date.getTime().Since new Date() is a thin wrapper of light method System.currentTimeMillis(). The performance will be greatly damaged if it is invoked too much times.According to my local testing at the same environment, System.currentTimeMillis() can achieve a speedup to 5 times (435 ms vs 2073 ms), when these two methods are invoked 5,000,000 times.
CAMEL-13380 camel-core - Move cloud out into camel-cloud component Lets see if we can move the cloud parts out of camel-core into a new camel-cloud that some components uses, like camel-service, camel-ribbon etc. Task camel-core - Move cloud out into camel-cloud component Lets see if we can move the cloud parts out of camel-core into a new camel-cloud that some components uses, like camel-service, camel-ribbon etc.
CAMEL-13375 Remove the JMX explain APis and related We have a set of explain APIs on JMX that can output "catalog" like information. However we dont really use it, and this can help remove functionality and complexity of camel-core.You can get details via the camel-catalog and at runtime the runtime camel-catalog. Task Remove the JMX explain APis and related We have a set of explain APIs on JMX that can output "catalog" like information. However we dont really use it, and this can help remove functionality and complexity of camel-core.You can get details via the camel-catalog and at runtime the runtime camel-catalog.
CAMEL-13370 resolve delegating endpoint when routes are dumped As today the ModelHelper.dumpModelAsXml(..., ...) does not resolve delegating endpoint so in case an endpoint delegates to an additional endpoint, this delegated endpoint is not shown in the routes dump.It would be nice to have an option to configure if the delegating endpoint should be replaced by the delegated one on dumpModelAsXml Improvement resolve delegating endpoint when routes are dumped As today the ModelHelper.dumpModelAsXml(..., ...) does not resolve delegating endpoint so in case an endpoint delegates to an additional endpoint, this delegated endpoint is not shown in the routes dump.It would be nice to have an option to configure if the delegating endpoint should be replaced by the delegated one on dumpModelAsXml
CAMEL-13369 enhance message history eip  The current message history eip is somehow limited as we cannot choose which nodes we want to take into account, as example if one creates routes using the new Step EIP, he may want to get the history to track step related activities only.Another additional feature would be to have the message history pattern to keep a copy of the message being produced by the processor under monitor. New Feature enhance message history eip  The current message history eip is somehow limited as we cannot choose which nodes we want to take into account, as example if one creates routes using the new Step EIP, he may want to get the history to track step related activities only.Another additional feature would be to have the message history pattern to keep a copy of the message being produced by the processor under monitor.
CAMEL-13354 Camel main - Allow to configure hystrix via application.properties So you can easily configure hystrix from property placeholders in application.properties etc, which you can do with spring boot etc. Improvement Camel main - Allow to configure hystrix via application.properties So you can easily configure hystrix from property placeholders in application.properties etc, which you can do with spring boot etc.
CAMEL-13353 Re-enable the camel-lra integration tests These camel-lra integration tests were ignored due to the JBTM issues which have been fixed in the Narayana 5.9.0.Final release. So I think it could be useful to re-enable to verify if it works. Test Re-enable the camel-lra integration tests These camel-lra integration tests were ignored due to the JBTM issues which have been fixed in the Narayana 5.9.0.Final release. So I think it could be useful to re-enable to verify if it works.
CAMEL-13352 Update document of HostAddresses  As the Host and Port options are removed, we need to update the HostAddresses document for it. Improvement Update document of HostAddresses  As the Host and Port options are removed, we need to update the HostAddresses document for it.
CAMEL-13348 Camel elasticsearch support search without specifying the indexName and indexType ElasticSearch support not to specify the indexName and indexType for search, so camel-elasticsearch search option don't need to specify the indexName and indexType Task Camel elasticsearch support search without specifying the indexName and indexType ElasticSearch support not to specify the indexName and indexType for search, so camel-elasticsearch search option don't need to specify the indexName and indexType
CAMEL-13346 Camel main - Allow to add extra properties to property component To make it easier to add custom properties from java api. Currently you can only configure properties locations (eg file locations) Improvement Camel main - Allow to add extra properties to property component To make it easier to add custom properties from java api. Currently you can only configure properties locations (eg file locations)
CAMEL-13345 route-coverage : Add option to generate a jacoco XML report Would be good to have the route-coverage maven plugin to be able to generate a XML report using the jacoco XML report format, described in the jacoco documentation [https://www.jacoco.org/jacoco/trunk/doc/] The benefit is that tools like SonarQube has support for handling these XML reports and they can then add this into the report.   New Feature route-coverage : Add option to generate a jacoco XML report Would be good to have the route-coverage maven plugin to be able to generate a XML report using the jacoco XML report format, described in the jacoco documentation [https://www.jacoco.org/jacoco/trunk/doc/] The benefit is that tools like SonarQube has support for handling these XML reports and they can then add this into the report.  
CAMEL-13344 camel-sql - stored procedure loaded from file/classpath should skip comment lines The template is loaded from a resource such a file on the classpath, then lines with comments (start with --) should be skipped. Improvement camel-sql - stored procedure loaded from file/classpath should skip comment lines The template is loaded from a resource such a file on the classpath, then lines with comments (start with --) should be skipped.
CAMEL-13335 create camel-cloudevents data type We should create a camel-cloudevents data type based on https://github.com/cloudevents/sdk-java New Feature create camel-cloudevents data type We should create a camel-cloudevents data type based on https://github.com/cloudevents/sdk-java
CAMEL-13334 Message parameter for log component There does not seem to be a good way to log a message describing what is logged.Imagine I have a route, where I want to be able to trace all the content. I could use .log() processor but log component is better for tracing all the exchange details and also provides showStreams option. {code:java}from(direct:in).to(log:MyTestClass?level=TRACE).to(direct:step1).to(log:MyTestClass?level=TRACE).to(direct:step2).to(log:MyTestClass?level=TRACE).to(direct:step3).to(log:MyTestClass?level=TRACE).to(mock:result){code} In the resulting log, it will be hard to see which line is produced by which log producer.Something like {code:java}.to(log:MyTestClass?level=TRACE&message=user before step1){code}would be quite helpful. Wondering why it has not been implemented yet. I found only early requests from 2008. Beeing able to use simple language would be even better:  {code:java}.to(log:MyTestClass?level=TRACE&message=user before step1 - ${header.user.name}){code}  Improvement Message parameter for log component There does not seem to be a good way to log a message describing what is logged.Imagine I have a route, where I want to be able to trace all the content. I could use .log() processor but log component is better for tracing all the exchange details and also provides showStreams option. {code:java}from(direct:in).to(log:MyTestClass?level=TRACE).to(direct:step1).to(log:MyTestClass?level=TRACE).to(direct:step2).to(log:MyTestClass?level=TRACE).to(direct:step3).to(log:MyTestClass?level=TRACE).to(mock:result){code} In the resulting log, it will be hard to see which line is produced by which log producer.Something like {code:java}.to(log:MyTestClass?level=TRACE&message=user before step1){code}would be quite helpful. Wondering why it has not been implemented yet. I found only early requests from 2008. Beeing able to use simple language would be even better:  {code:java}.to(log:MyTestClass?level=TRACE&message=user before step1 - ${header.user.name}){code} 
CAMEL-13329 camel-core - BeanConverter should be in core static converters This component is still in camel-core and its not part of the core static converters. We should include it - until (if possible) we move the bean component out of camel-core. Improvement camel-core - BeanConverter should be in core static converters This component is still in camel-core and its not part of the core static converters. We should include it - until (if possible) we move the bean component out of camel-core.
CAMEL-13326 apt compiler - Separate core vs component processors We should make camel-core / camel-spring / camel-blueprint have their own set of apt compiler plugins. And then another set for the general components etc.This avoids running some of these on modules they dont need to do. New Feature apt compiler - Separate core vs component processors We should make camel-core / camel-spring / camel-blueprint have their own set of apt compiler plugins. And then another set for the general components etc.This avoids running some of these on modules they dont need to do.
CAMEL-13313 camel-core - Add alternative way of loading type converters without classpath scanning We should make it possible to load and install all type converters without having to do- classpath scanning- loading TypeConverter file from META-INFFor example we do some apt compiler source code generation for the core type converter.It would be good to have something similar or other means of loading and installing type converters that can be done fast and quick, which is needed for Camel K and graal like runtimes. New Feature camel-core - Add alternative way of loading type converters without classpath scanning We should make it possible to load and install all type converters without having to do- classpath scanning- loading TypeConverter file from META-INFFor example we do some apt compiler source code generation for the core type converter.It would be good to have something similar or other means of loading and installing type converters that can be done fast and quick, which is needed for Camel K and graal like runtimes.
CAMEL-13312 ModelCamelContext loadRoutesDefinition/loadRestsDefinition are misleading We do have method like loadRoutesDefinition and loadRestsDefinition in the ModelCamelContext interface but they are a little bit misleading as they do not load a definition in the camel context but they are an helper that invoke{code}ModelHelper.loadRoutesDefinition(this, is){code}The only advantage is that you do not need to pass the camel context but other that that they appear as pure utility.Toproperly load a route one need to do something something like{code}context.addRouteDefinitions(context.loadRoutesDefinition(is).getRoutes()){code}which is a little ugly Improvement ModelCamelContext loadRoutesDefinition/loadRestsDefinition are misleading We do have method like loadRoutesDefinition and loadRestsDefinition in the ModelCamelContext interface but they are a little bit misleading as they do not load a definition in the camel context but they are an helper that invoke{code}ModelHelper.loadRoutesDefinition(this, is){code}The only advantage is that you do not need to pass the camel context but other that that they appear as pure utility.Toproperly load a route one need to do something something like{code}context.addRouteDefinitions(context.loadRoutesDefinition(is).getRoutes()){code}which is a little ugly
CAMEL-13311 camel-cdi and camel-blueprint - Cleanup bean post processor Looks like they do some custom code that likely is not longer needed and can rely on the default out of the box. Task camel-cdi and camel-blueprint - Cleanup bean post processor Looks like they do some custom code that likely is not longer needed and can rely on the default out of the box.
CAMEL-13309 @EndpointInject - Use value as uri We should favour using value as attribute name so you can use shorthand syntax with @EndpointInject("jms:cheese") instead of having to use uri = "xxx"The same for @Produce and @Consume etc Improvement @EndpointInject - Use value as uri We should favour using value as attribute name so you can use shorthand syntax with @EndpointInject("jms:cheese") instead of having to use uri = "xxx"The same for @Produce and @Consume etc
CAMEL-13308 Remove ref on @Consume as you should use ref in the uri instead We removed this on <to ref="xxx"> already in the DSL. We should remove this in other places like @Consume annotation Improvement Remove ref on @Consume as you should use ref in the uri instead We removed this on <to ref="xxx"> already in the DSL. We should remove this in other places like @Consume annotation
CAMEL-13307 Camel registry - Allow to bind anonymously by type With the new bind api on registry we should also allow to bind with null id and by the type only, so you can bind anonymously.For example for single resources in microservices / serverless, which Camel K uses. New Feature Camel registry - Allow to bind anonymously by type With the new bind api on registry we should also allow to bind with null id and by the type only, so you can bind anonymously.For example for single resources in microservices / serverless, which Camel K uses.
CAMEL-13301 Move catalog apis from CamelContext into CatalogCamelContext Lets move these catalog apis into a dedicated catalog camel context which you can then use the adapt api from camel context if you want to use it, like with model camel context Improvement Move catalog apis from CamelContext into CatalogCamelContext Lets move these catalog apis into a dedicated catalog camel context which you can then use the adapt api from camel context if you want to use it, like with model camel context
CAMEL-13298 Allow bean component to invoke methods with package modifier in the same class To make it easier to use methods from the same route builder class where you define the routes, then you may have helper methods, that are invoked via bean / method call language. And they can only see public methods as its via camel-core they are called. So we should look at opening up the visibility, like we do with field injection and other things. Improvement Allow bean component to invoke methods with package modifier in the same class To make it easier to use methods from the same route builder class where you define the routes, then you may have helper methods, that are invoked via bean / method call language. And they can only see public methods as its via camel-core they are called. So we should look at opening up the visibility, like we do with field injection and other things.
CAMEL-13297 camel-core tests fail if JAVA_HOME is not set Test assumes that JAVA_HOME exists which is standard but not mandatory.{noformat}[ERROR] org.apache.camel.component.properties.PropertiesComponentDefaultFunctionsTest.testFunction(org.apache.camel.component.properties.PropertiesComponentDefaultFunctionsTest){noformat} Test camel-core tests fail if JAVA_HOME is not set Test assumes that JAVA_HOME exists which is standard but not mandatory.{noformat}[ERROR] org.apache.camel.component.properties.PropertiesComponentDefaultFunctionsTest.testFunction(org.apache.camel.component.properties.PropertiesComponentDefaultFunctionsTest){noformat}
CAMEL-13294 Properties component - Add easy method to lookup via key Lets make this code a bit easier, and have a nicer API on the PropertiesComponent we have in camel-api now for Camel 3{code}                        // build key with default value included as this is supported during resolving                        String key = pi.value();                        if (!isEmpty(pi.defaultValue())) {                            key = key + ":" + pi.defaultValue();                        }                        // need to force property lookup by having key enclosed in tokens                        key = camelContext.getPropertiesComponent().getPrefixToken() + key + camelContext.getPropertiesComponent().getSuffixToken();                        try {                            Object value = camelContext.resolvePropertyPlaceholders(key);                            parameters[i] = camelContext.getTypeConverter().convertTo(type, value);                        } catch (Exception e) {                            throw RuntimeCamelException.wrapRuntimeCamelException(e);                        }{code} Improvement Properties component - Add easy method to lookup via key Lets make this code a bit easier, and have a nicer API on the PropertiesComponent we have in camel-api now for Camel 3{code}                        // build key with default value included as this is supported during resolving                        String key = pi.value();                        if (!isEmpty(pi.defaultValue())) {                            key = key + ":" + pi.defaultValue();                        }                        // need to force property lookup by having key enclosed in tokens                        key = camelContext.getPropertiesComponent().getPrefixToken() + key + camelContext.getPropertiesComponent().getSuffixToken();                        try {                            Object value = camelContext.resolvePropertyPlaceholders(key);                            parameters[i] = camelContext.getTypeConverter().convertTo(type, value);                        } catch (Exception e) {                            throw RuntimeCamelException.wrapRuntimeCamelException(e);                        }{code}
CAMEL-13293 Camel-linkedin, switch HtmlUnit to JSoup to not rely on Jetty (and allow update to servlet api 4) Component camel-linkedin depends on Jetty (see https://github.com/apache/camel/blob/master/platforms/karaf/features/src/main/resources/features.xml#L1578)This dependency doesn't allow update servlet-api to 4.0Solution is to refactor component to use JSoup instead. Improvement Camel-linkedin, switch HtmlUnit to JSoup to not rely on Jetty (and allow update to servlet api 4) Component camel-linkedin depends on Jetty (see https://github.com/apache/camel/blob/master/platforms/karaf/features/src/main/resources/features.xml#L1578)This dependency doesn't allow update servlet-api to 4.0Solution is to refactor component to use JSoup instead.
CAMEL-13291 camel-quartz - Allow to configure cron parameter with spaces In the past we had to use + sign as separator in the cron{code}0/2+*+*+*+*+?{code}We should support also using spaces, so its like text-book cron{code}0/2 * * * * ?{code} Improvement camel-quartz - Allow to configure cron parameter with spaces In the past we had to use + sign as separator in the cron{code}0/2+*+*+*+*+?{code}We should support also using spaces, so its like text-book cron{code}0/2 * * * * ?{code}
CAMEL-13289 Properties component - Keys with dashes should lookup with underscores as well On linux OS environment variables using dashes is not allowed, eg FOO-BAR, should be FOO_BAR. So we should automatic add support for looking up with underscores as fallback. Improvement Properties component - Keys with dashes should lookup with underscores as well On linux OS environment variables using dashes is not allowed, eg FOO-BAR, should be FOO_BAR. So we should automatic add support for looking up with underscores as fallback.
CAMEL-13288 Properties component - Add support for lookup exact by key, and mixed dashed vs camel case So you can define property placeholders using a dashed stylehttps://github.com/apache/camel/blob/master/components/camel-jms/src/main/docs/jms-component.adocFor example to set the JMS component option you can do:camel.component.jms.acceptMessagesWhileStopping=trueBut would be nice to support dashed style too (ala spring boot)camel.component.jms.accept-messages-while-stopping=trueThis is needed for Camel standalone to make this easier / similar to spring-boot New Feature Properties component - Add support for lookup exact by key, and mixed dashed vs camel case So you can define property placeholders using a dashed stylehttps://github.com/apache/camel/blob/master/components/camel-jms/src/main/docs/jms-component.adocFor example to set the JMS component option you can do:camel.component.jms.acceptMessagesWhileStopping=trueBut would be nice to support dashed style too (ala spring boot)camel.component.jms.accept-messages-while-stopping=trueThis is needed for Camel standalone to make this easier / similar to spring-boot
CAMEL-13287  AggregationStrategy - Access original exchange in aggregate method For aggregation after multicast/splitter the original exchange should optionally be available in the aggregate method. There are several use cases when we would like to go-on processing the original exchange after multicast, but we'd like to enrich it with the outcome of the called routes. For example:{code:java}rest().get("orders/{orderId}").route()  .to("direct:getOrderDetails") //get UserId, ItemId  .setBody(method(this,"createResponsePojo"))  .multicast(new MyAggregationStrategy())    .to("direct:getUserDetails")    .to("direct:getDeliveryAddress")    .to("direct:getItemDetails")  .end();{code}If any of the called routes fail, we still would like return a partial response in our service (this is a common requirement in case of microservices). The MyAggregationStrategy should simply enrich the ResponePojo object from the original exchange somehow with the new exchanges coming from the sub-routes. See this example:{code:java}public class MyAggregationStrategy implements AggregationStrategy {public Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange) {  Exchange exchange = oldExchange != null ? oldExchange : originalExchange;  ResponsePojo response = exchange.getMessage().getBody(ResponsePojo.class);  if (! newExchange.isFailed()) {    // ... Add newExchange body somehow to ResponsePojo object...  }  return exchange;}...}{code}Currently only the exchanges from the "sub-routes" are available during aggregation, so the exchange after the aggregate will be one (the first) of those. This comes with multiple problems: * Though the exchanges in the sub-routes are copies of the original exchange, sub routes make modifications: modify headers, modify properties, etc. Usually we don't want to see all these set by a sub-route on the final aggregated exchange. It's only noise. "Whatever happens in the sub-route, should stay in the sub-route." - We only want to see on the aggregated exchange what we "took" intentionally from the sub-route exchanges. * If we use stopOnException(true) our life is simple because we usually don't have to worry about exceptions in aggregate, we will stop anyway. The aggregation logic can become complicated if we want to go on with processing in case of errors. The first time aggregate() is called the oldExchange is null, so we usually take the newExchange as the return value. If this exchange has an Exception, we need to "clean" it first, otherwise the error handler will kick in after aggregation. This is non-trivial.h3. Suggested approachLet's extend the AggregationStrategy interface with a new method that takes three exchanges. This should be called after Multicast EIP (Enrich EIP is simple, it only has two exchanges).With a default implementations we can keep the interface compatible:{code:java}public interface AggregationStrategy {/*** Aggregates an old, a new and the original exchange together to create a single combined exchange.** @param oldExchange the oldest exchange, which is the returned value of the previous aggregation on null.* @param newExchange the newest exchange* @param originalExchange the original exchange before Multicast or Splitter EIP. Null in case of Enrich EIP.* @return a combined exchange, favor returning the oldExchange*/default Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange) {  return aggregate(oldExchange, newExchange);};//Maybe we should have a default implementation here too so one can only implement aggregateWithOriginal()Exchange aggregate(Exchange oldExchange, Exchange newExchange); ... }{code}{code:java} {code} New Feature  AggregationStrategy - Access original exchange in aggregate method For aggregation after multicast/splitter the original exchange should optionally be available in the aggregate method. There are several use cases when we would like to go-on processing the original exchange after multicast, but we'd like to enrich it with the outcome of the called routes. For example:{code:java}rest().get("orders/{orderId}").route()  .to("direct:getOrderDetails") //get UserId, ItemId  .setBody(method(this,"createResponsePojo"))  .multicast(new MyAggregationStrategy())    .to("direct:getUserDetails")    .to("direct:getDeliveryAddress")    .to("direct:getItemDetails")  .end();{code}If any of the called routes fail, we still would like return a partial response in our service (this is a common requirement in case of microservices). The MyAggregationStrategy should simply enrich the ResponePojo object from the original exchange somehow with the new exchanges coming from the sub-routes. See this example:{code:java}public class MyAggregationStrategy implements AggregationStrategy {public Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange) {  Exchange exchange = oldExchange != null ? oldExchange : originalExchange;  ResponsePojo response = exchange.getMessage().getBody(ResponsePojo.class);  if (! newExchange.isFailed()) {    // ... Add newExchange body somehow to ResponsePojo object...  }  return exchange;}...}{code}Currently only the exchanges from the "sub-routes" are available during aggregation, so the exchange after the aggregate will be one (the first) of those. This comes with multiple problems: * Though the exchanges in the sub-routes are copies of the original exchange, sub routes make modifications: modify headers, modify properties, etc. Usually we don't want to see all these set by a sub-route on the final aggregated exchange. It's only noise. "Whatever happens in the sub-route, should stay in the sub-route." - We only want to see on the aggregated exchange what we "took" intentionally from the sub-route exchanges. * If we use stopOnException(true) our life is simple because we usually don't have to worry about exceptions in aggregate, we will stop anyway. The aggregation logic can become complicated if we want to go on with processing in case of errors. The first time aggregate() is called the oldExchange is null, so we usually take the newExchange as the return value. If this exchange has an Exception, we need to "clean" it first, otherwise the error handler will kick in after aggregation. This is non-trivial.h3. Suggested approachLet's extend the AggregationStrategy interface with a new method that takes three exchanges. This should be called after Multicast EIP (Enrich EIP is simple, it only has two exchanges).With a default implementations we can keep the interface compatible:{code:java}public interface AggregationStrategy {/*** Aggregates an old, a new and the original exchange together to create a single combined exchange.** @param oldExchange the oldest exchange, which is the returned value of the previous aggregation on null.* @param newExchange the newest exchange* @param originalExchange the original exchange before Multicast or Splitter EIP. Null in case of Enrich EIP.* @return a combined exchange, favor returning the oldExchange*/default Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange) {  return aggregate(oldExchange, newExchange);};//Maybe we should have a default implementation here too so one can only implement aggregateWithOriginal()Exchange aggregate(Exchange oldExchange, Exchange newExchange); ... }{code}{code:java} {code}
CAMEL-13283 Add @BindRegistry annotation to allow binding a field/class/bean to the Camel registry Now that we can bind to registry, lets add an annotation so users can define those as well, for example with Camel standalone. New Feature Add @BindRegistry annotation to allow binding a field/class/bean to the Camel registry Now that we can bind to registry, lets add an annotation so users can define those as well, for example with Camel standalone.
CAMEL-13281 spring boot starter - Generated auto configuration should support exclude properties on component level A few component inherit each other, and they may exclude some of the parent options, for example ftp/netty4-http etc. Currently they only do that on endpoint level. We need something similar on component level so the SB auto generation dont include them.{code}        excludeProperties = "textline,delimiter,autoAppendDelimiter,decoderMaxLineLength,encoding,allowDefaultCodec,udpConnectionlessSending,networkInterface"                + ",clientMode,reconnect,reconnectInterval,useByteBuf,udpByteArrayCodec,broadcast,correlationManager"){code} Improvement spring boot starter - Generated auto configuration should support exclude properties on component level A few component inherit each other, and they may exclude some of the parent options, for example ftp/netty4-http etc. Currently they only do that on endpoint level. We need something similar on component level so the SB auto generation dont include them.{code}        excludeProperties = "textline,delimiter,autoAppendDelimiter,decoderMaxLineLength,encoding,allowDefaultCodec,udpConnectionlessSending,networkInterface"                + ",clientMode,reconnect,reconnectInterval,useByteBuf,udpByteArrayCodec,broadcast,correlationManager"){code}
CAMEL-13280 Properties component - Allow to access loaded properties We should expose API on properties component so users and tooling can access the loaded properties. This can help with detecting which properties are available in the project. New Feature Properties component - Allow to access loaded properties We should expose API on properties component so users and tooling can access the loaded properties. This can help with detecting which properties are available in the project.
CAMEL-13273 Link missing in JMX Documentation Reference: [https://github.com/apache/camel/blob/master/components/camel-jmx/src/main/docs/jmx-component.adoc#which-processors-are-registered]{{It mentions "See this FAQ". But there is no link for it.}} Task Link missing in JMX Documentation Reference: [https://github.com/apache/camel/blob/master/components/camel-jmx/src/main/docs/jmx-component.adoc#which-processors-are-registered]{{It mentions "See this FAQ". But there is no link for it.}}
CAMEL-13266 camel-core-xml - Make JMX optional This module requires camel-management-impl. We should try to make this optional, so the JMX agent is not needed via compile time, but loaded via some factory way. Then end users can run camel XML with and without JMX more easily. Improvement camel-core-xml - Make JMX optional This module requires camel-management-impl. We should try to make this optional, so the JMX agent is not needed via compile time, but loaded via some factory way. Then end users can run camel XML with and without JMX more easily.
CAMEL-13265 camel-core - Use camel-test for unit testing We can now build camel-test before camel-core, and then use camel-test for testing camel-core instead of having its own ContextTestSupport and other base classes. Improvement camel-core - Use camel-test for unit testing We can now build camel-test before camel-core, and then use camel-test for testing camel-core instead of having its own ContextTestSupport and other base classes.
CAMEL-13264 Add release artifacts of camel-k-runtime project We need to create the source release artifact for the camel-k-runtime project. Task Add release artifacts of camel-k-runtime project We need to create the source release artifact for the camel-k-runtime project.
CAMEL-13258 SimpleRegistry - Favour DefaultRegistry The DefaultRegistry should be favoured to be used. The simple registry is now more of an implementation detail as part of default registry.And you can now do bind on default registry so you dont need to add custom registry to camel context to bind a bean etc. Improvement SimpleRegistry - Favour DefaultRegistry The DefaultRegistry should be favoured to be used. The simple registry is now more of an implementation detail as part of default registry.And you can now do bind on default registry so you dont need to add custom registry to camel context to bind a bean etc.
CAMEL-13252 camel-cdi - Remove OSGi support OSGi with camel-cdi was hard to make stable and also not recommended to use. We only support OSGi blueprint on OSGi and for CDI then use plain CDI containers. Task camel-cdi - Remove OSGi support OSGi with camel-cdi was hard to make stable and also not recommended to use. We only support OSGi blueprint on OSGi and for CDI then use plain CDI containers.
CAMEL-13243 Camel Main - Make it have more functionality and convention out of the box For users that just want a plain Camel standalone, and also for Camel K where running low-footprint is important.For example to make properties component automatic load from application.properties from root classpath. And also allow to have those properties fallback to lookup via ENV variables, so containers can customize them that way too.And add other ideas here to this ticket Improvement Camel Main - Make it have more functionality and convention out of the box For users that just want a plain Camel standalone, and also for Camel K where running low-footprint is important.For example to make properties component automatic load from application.properties from root classpath. And also allow to have those properties fallback to lookup via ENV variables, so containers can customize them that way too.And add other ideas here to this ticket
CAMEL-13240 Don't ship the jars in the source artifacts In Camel 3.0.0 M1 source release kit, there are some jars for testing, we need to clean them out.{code}.//tests/camel-itest/lib/org/apache/camel/camel-validator-test-resources/1.0.0/camel-validator-test-resources-1.0.0.jar.//components/camel-spring/src/test/resources/package_scan_test.jar.//components/camel-spring/src/test/resources/package+scan+test.jar{code} Task Don't ship the jars in the source artifacts In Camel 3.0.0 M1 source release kit, there are some jars for testing, we need to clean them out.{code}.//tests/camel-itest/lib/org/apache/camel/camel-validator-test-resources/1.0.0/camel-validator-test-resources-1.0.0.jar.//components/camel-spring/src/test/resources/package_scan_test.jar.//components/camel-spring/src/test/resources/package+scan+test.jar{code}
CAMEL-13232 Simple language - Backwards compatible parser on 2.x should WARN We can make the old deprecated syntax of the simple language log a WARN when it has detected this style in Camel 2.24, so users can get more prepared for Camel 3.0 upgrade. Task Simple language - Backwards compatible parser on 2.x should WARN We can make the old deprecated syntax of the simple language log a WARN when it has detected this style in Camel 2.24, so users can get more prepared for Camel 3.0 upgrade.
CAMEL-13221 Upgrade jetty to latest 9.4.x There is a newer release, but it may affect camel-cxf and others which tests with jetty. Jetty is always a bit problematic in their upgrades :( Task Upgrade jetty to latest 9.4.x There is a newer release, but it may affect camel-cxf and others which tests with jetty. Jetty is always a bit problematic in their upgrades :(
CAMEL-13220 camel-jetty - Remove deprecated producer The producer of camel-jetty has been deprecated in Camel 2.x, and should be removed in 3.0. Task camel-jetty - Remove deprecated producer The producer of camel-jetty has been deprecated in Camel 2.x, and should be removed in 3.0.
CAMEL-13217 Merge camel-jetty9 back into camel-jetty In the old days we had jetty 8 vs 9 problem, so we had to splitup it.Now we camel 3 we can move back camel-jetty9 into camel-jetty and have this single JAR. Task Merge camel-jetty9 back into camel-jetty In the old days we had jetty 8 vs 9 problem, so we had to splitup it.Now we camel 3 we can move back camel-jetty9 into camel-jetty and have this single JAR.
CAMEL-13214 camel-mail: Add headerFilterStrategy option to component level Currently it's not possible to change/customize the headerFilterStrategy for all camel-mail endpoints because it has to be configured on endpoint level.In the cxf component it's possible to configure it on component level too, so it's possible to provide a global headerFilterStrategy:Example:{noformat}		CxfComponent comp = camelContext.getComponent("cxf",				CxfComponent.class);		CxfHeaderFilterStrategy strategy = new CxfHeaderFilterStrategy();		strategy.setOutFilterPattern(				"<customized>");		comp.setHeaderFilterStrategy(strategy);{noformat}It would be an improvement to add the headerFilterStrategy option also to component level. Improvement camel-mail: Add headerFilterStrategy option to component level Currently it's not possible to change/customize the headerFilterStrategy for all camel-mail endpoints because it has to be configured on endpoint level.In the cxf component it's possible to configure it on component level too, so it's possible to provide a global headerFilterStrategy:Example:{noformat}		CxfComponent comp = camelContext.getComponent("cxf",				CxfComponent.class);		CxfHeaderFilterStrategy strategy = new CxfHeaderFilterStrategy();		strategy.setOutFilterPattern(				"<customized>");		comp.setHeaderFilterStrategy(strategy);{noformat}It would be an improvement to add the headerFilterStrategy option also to component level.
CAMEL-13210 camel-test-spring - Add support for @ExcludeRoutes annotation when testing spring boot Reported on user forumhttp://camel.465427.n5.nabble.com/ExcludeRoutes-not-working-tp5830132.html Improvement camel-test-spring - Add support for @ExcludeRoutes annotation when testing spring boot Reported on user forumhttp://camel.465427.n5.nabble.com/ExcludeRoutes-not-working-tp5830132.html
CAMEL-13208 camel3 - camel-core - Should have management-impl out of the box So its like in 2.x, where you have JMX out of the box.We will for M2 work on a camel-core-tiny where you dont have that OOTB and other core components etc to have a minimal Camel. Task camel3 - camel-core - Should have management-impl out of the box So its like in 2.x, where you have JMX out of the box.We will for M2 work on a camel-core-tiny where you dont have that OOTB and other core components etc to have a minimal Camel.
CAMEL-13202 camel3 - spring-boot-start - Auto configuration too many we have still the ones that was in camel-core, but many has been moved out to its own component such as file, log, timer etc. Task camel3 - spring-boot-start - Auto configuration too many we have still the ones that was in camel-core, but many has been moved out to its own component such as file, log, timer etc.
CAMEL-13201 camel3 - camel-core-minimal - To have core with as few dependencies as possible The camel-core includes all the core components from 2.x. However you may want to choose precisely only the core components you need.So with a camel-core-minimal you can then add the ones afterwards, such as log,timer and file etc. Task camel3 - camel-core-minimal - To have core with as few dependencies as possible The camel-core includes all the core components from 2.x. However you may want to choose precisely only the core components you need.So with a camel-core-minimal you can then add the ones afterwards, such as log,timer and file etc.
CAMEL-13200 camel3 - Caffeine jar is not shaded It should be shaded into camel-core which I dont think happens Task camel3 - Caffeine jar is not shaded It should be shaded into camel-core which I dont think happens
CAMEL-13199 Using @Produce as proxy for sending to endpoint does not emit sending/sent events Reported on user forumhttp://camel.465427.n5.nabble.com/No-ExchangeSentEvent-in-Produce-but-is-in-ProducerTemplate-tp5830067.html Improvement Using @Produce as proxy for sending to endpoint does not emit sending/sent events Reported on user forumhttp://camel.465427.n5.nabble.com/No-ExchangeSentEvent-in-Produce-but-is-in-ProducerTemplate-tp5830067.html
CAMEL-13194 camel3 - Karaf commands should use org.apache.camel as group id So everything we do in Apache Camel is always org.apache.camel    <dependency>      <groupId>org.apache.camel.karaf</groupId>      <artifactId>camel-karaf-commands</artifactId>    </dependency>Should be    <dependency>      <groupId>org.apache.camel</groupId>      <artifactId>camel-karaf-commands</artifactId>    </dependency> Task camel3 - Karaf commands should use org.apache.camel as group id So everything we do in Apache Camel is always org.apache.camel    <dependency>      <groupId>org.apache.camel.karaf</groupId>      <artifactId>camel-karaf-commands</artifactId>    </dependency>Should be    <dependency>      <groupId>org.apache.camel</groupId>      <artifactId>camel-karaf-commands</artifactId>    </dependency>
CAMEL-13193 camel3 - Remove deprecate jolokia commands Just noticed it was there when I built locally. Task camel3 - Remove deprecate jolokia commands Just noticed it was there when I built locally.
CAMEL-13189 camel-catalog - Should be built after all Camel components It should be built after all the camel components so it includes all the metadata of all components. Currently Maven builds it too early. Task camel-catalog - Should be built after all Camel components It should be built after all the camel components so it includes all the metadata of all components. Currently Maven builds it too early.
CAMEL-13178 Rename terser language to hl7terser The language terser is not well know, and its confusing what it does. I think we should rename it to hl7terser to indicate its about hl7. Improvement Rename terser language to hl7terser The language terser is not well know, and its confusing what it does. I think we should rename it to hl7terser to indicate its about hl7.
CAMEL-13175 Consider removing useOriginalMessage functionality This feature is a bit more complex and its intention/design was to in case of an error during routing, you could say, that the original incoming message should be restored as-is and used as "result", for example in case you want to move that message to some dead letter queue or log it etc.However people may mis-understand this, and think you can mix the original message BODY only and enrich it with any existing headers at the time of error - but that was not how it was designed/intended.However a few EIPs and if you turned on shared unit of work, you could end up with situations where it would mix the original message with the message of error.If the user wants to mix both the original message with the message at the error, then they should use a bean/processor/aggregation strategy etc to "merge" the data together as they want. NOT rely on just saying useOriginalMessage and "hope for the best". Also the original message body, can when you transfer messages over Camel endpoints be stored at new endpoints such as JMS, direct-vm etc whom creates a new exchange. And if you use direct, and other internals it would not. So it can be a bit unclear where such original message would origin from.Instead we should let the user use the Claim Check EIP pattern where you can explict set safe points with the original message, and easily merge data back agains, such as the message body only etc.See for examplehttps://github.com/apache/camel/blob/camel-2.x/camel-core/src/test/java/org/apache/camel/issues/MulticastMixOriginalMessageBodyAndEnrichedHeadersTest.javaVShttps://github.com/apache/camel/blob/camel-2.x/camel-core/src/test/java/org/apache/camel/issues/MulticastMixOriginalMessageBodyAndEnrichedHeadersClaimCheckTest.java Improvement Consider removing useOriginalMessage functionality This feature is a bit more complex and its intention/design was to in case of an error during routing, you could say, that the original incoming message should be restored as-is and used as "result", for example in case you want to move that message to some dead letter queue or log it etc.However people may mis-understand this, and think you can mix the original message BODY only and enrich it with any existing headers at the time of error - but that was not how it was designed/intended.However a few EIPs and if you turned on shared unit of work, you could end up with situations where it would mix the original message with the message of error.If the user wants to mix both the original message with the message at the error, then they should use a bean/processor/aggregation strategy etc to "merge" the data together as they want. NOT rely on just saying useOriginalMessage and "hope for the best". Also the original message body, can when you transfer messages over Camel endpoints be stored at new endpoints such as JMS, direct-vm etc whom creates a new exchange. And if you use direct, and other internals it would not. So it can be a bit unclear where such original message would origin from.Instead we should let the user use the Claim Check EIP pattern where you can explict set safe points with the original message, and easily merge data back agains, such as the message body only etc.See for examplehttps://github.com/apache/camel/blob/camel-2.x/camel-core/src/test/java/org/apache/camel/issues/MulticastMixOriginalMessageBodyAndEnrichedHeadersTest.javaVShttps://github.com/apache/camel/blob/camel-2.x/camel-core/src/test/java/org/apache/camel/issues/MulticastMixOriginalMessageBodyAndEnrichedHeadersClaimCheckTest.java
CAMEL-13174 [consumer.]bridgeErrorHandler doesn't handle exception thrown by startingDirectoryMustExist Following [StackOverflow: _File component's \[consumer.\]bridgeErrorHandler in conjunction with startingDirectoryMustExist_ |https://stackoverflow.com/questions/54513101/file-components-consumer-bridgeerrorhandler-in-conjunction-with-startingdirec] I created the following test class:{code:java}package test;import org.apache.camel.LoggingLevel;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.main.Main;import org.junit.After;import org.junit.Before;import org.junit.Test;public class CamelBridgeErrorHandlerTest {  private Main main;  @Before  public void before() {    main = new Main();  }  @Test  public void bridgeErrorHandler() {    main.addRouteBuilder(new RouteBuilder() {      @Override      public void configure() throws Exception {        route(this, "file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&bridgeErrorHandler=true");      }    });  }  @Test  public void consumerBridgeErrorHandler() {    main.addRouteBuilder(new RouteBuilder() {      @Override      public void configure() throws Exception {        route(this, "file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&consumer.bridgeErrorHandler=true");      }    });  }  private void route(final RouteBuilder builder, final String consumerURI) {    builder        .from(consumerURI)        // this is never reached        .onException(Exception.class)        .handled(true)        .log(LoggingLevel.ERROR, "${exception}")        .end()        .log(" ... processing ...");  }  @After  public void after() throws Exception {    main.start();  }}{code}Both test methods throw:{noformat}org.apache.camel.FailedToCreateRouteException: Failed to create route routeN:  Route(routeN)[[From[file:not.existing.dir?autoCreate=false&s...    because of Starting directory does not exist: not.existing.dir{noformat}rather than the exception(s) being handled by the route(s)' {{onException()}}.----P.S.: When TRACEing through the log output both test methods show:{quote}2019-02-08 11:29:36.209 TRACE camel.model.ProcessorDefinitionHelper – There are 6 properties on: From\[file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&\{consumer.}bridgeErrorHandler=true\]{quote}while there are just 3 of them ({{autoCreate}}, {{startingDirectoryMustExist}}, {{[consumer.]bridgeErrorHandler}}), aren't there? Is this worth another issue? Improvement [consumer.]bridgeErrorHandler doesn't handle exception thrown by startingDirectoryMustExist Following [StackOverflow: _File component's \[consumer.\]bridgeErrorHandler in conjunction with startingDirectoryMustExist_ |https://stackoverflow.com/questions/54513101/file-components-consumer-bridgeerrorhandler-in-conjunction-with-startingdirec] I created the following test class:{code:java}package test;import org.apache.camel.LoggingLevel;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.main.Main;import org.junit.After;import org.junit.Before;import org.junit.Test;public class CamelBridgeErrorHandlerTest {  private Main main;  @Before  public void before() {    main = new Main();  }  @Test  public void bridgeErrorHandler() {    main.addRouteBuilder(new RouteBuilder() {      @Override      public void configure() throws Exception {        route(this, "file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&bridgeErrorHandler=true");      }    });  }  @Test  public void consumerBridgeErrorHandler() {    main.addRouteBuilder(new RouteBuilder() {      @Override      public void configure() throws Exception {        route(this, "file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&consumer.bridgeErrorHandler=true");      }    });  }  private void route(final RouteBuilder builder, final String consumerURI) {    builder        .from(consumerURI)        // this is never reached        .onException(Exception.class)        .handled(true)        .log(LoggingLevel.ERROR, "${exception}")        .end()        .log(" ... processing ...");  }  @After  public void after() throws Exception {    main.start();  }}{code}Both test methods throw:{noformat}org.apache.camel.FailedToCreateRouteException: Failed to create route routeN:  Route(routeN)[[From[file:not.existing.dir?autoCreate=false&s...    because of Starting directory does not exist: not.existing.dir{noformat}rather than the exception(s) being handled by the route(s)' {{onException()}}.----P.S.: When TRACEing through the log output both test methods show:{quote}2019-02-08 11:29:36.209 TRACE camel.model.ProcessorDefinitionHelper - There are 6 properties on: From\[file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&\{consumer.}bridgeErrorHandler=true\]{quote}while there are just 3 of them ({{autoCreate}}, {{startingDirectoryMustExist}}, {{[consumer.]bridgeErrorHandler}}), aren't there? Is this worth another issue?
CAMEL-13164 camel3 - Remove includeRoutes on RouteBuilder This functionality was not really in use, and was not fully implemented. And there was no similar feature for using other DSLs such as XML.Its deprecated in 2.x and removed in 3 Improvement camel3 - Remove includeRoutes on RouteBuilder This functionality was not really in use, and was not fully implemented. And there was no similar feature for using other DSLs such as XML.Its deprecated in 2.x and removed in 3
CAMEL-13160 Remove headers should be case in-sensitive by default The PatternHelper.matchPattern is case sensitive when matching with wildcard and regexp. For exact match then header keys are by default case insensitive so remove foo will remove FOO Foo and foo headers. But remove pattern=foo* will only remove lower-case foo headers. So we should make this case insensitive for all kinds of patterns (exact, wildcard and regexp). Improvement Remove headers should be case in-sensitive by default The PatternHelper.matchPattern is case sensitive when matching with wildcard and regexp. For exact match then header keys are by default case insensitive so remove foo will remove FOO Foo and foo headers. But remove pattern=foo* will only remove lower-case foo headers. So we should make this case insensitive for all kinds of patterns (exact, wildcard and regexp).
CAMEL-13158 Unable to invoke beans starting with the string "header" using toD  I found one strange behavior when I added below to my route: {code:java}from(...)    .toD("headerEnricher"){code} After some debugging with below unit test, I was able to find the culprit as this line which is interpreting "headerEnricher" as if it is equivalent to "header.Enricher" or "header[Enricher]"[https://github.com/apache/camel/blob/camel-2.23.x/camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java#L352]  {code:java}@Testpublic void testSimpleHeaderString() {final Language lan = new DefaultCamelContext().resolveLanguage("simple");final Expression exp = lan.createExpression("hederEnricher");//PassAssert.assertEquals(exp.toString(), "hederEnricher");final Expression exp2 = lan.createExpression("headerEnricher");//FailAssert.assertEquals(exp2.toString(), "headerEnricher");}{code} My thought is that the legacy syntax should not try to parse the header expression unless it is followed by some kind of valid operator character like . or ? or [   Improvement Unable to invoke beans starting with the string "header" using toD  I found one strange behavior when I added below to my route: {code:java}from(...)    .toD("headerEnricher"){code} After some debugging with below unit test, I was able to find the culprit as this line which is interpreting "headerEnricher" as if it is equivalent to "header.Enricher" or "header[Enricher]"[https://github.com/apache/camel/blob/camel-2.23.x/camel-core/src/main/java/org/apache/camel/language/simple/ast/SimpleFunctionExpression.java#L352]  {code:java}@Testpublic void testSimpleHeaderString() {final Language lan = new DefaultCamelContext().resolveLanguage("simple");final Expression exp = lan.createExpression("hederEnricher");//PassAssert.assertEquals(exp.toString(), "hederEnricher");final Expression exp2 = lan.createExpression("headerEnricher");//FailAssert.assertEquals(exp2.toString(), "headerEnricher");}{code} My thought is that the legacy syntax should not try to parse the header expression unless it is followed by some kind of valid operator character like . or ? or [  
CAMEL-13151 Removed deprecated stuff from simple language Related to CAMEL-13150. Where property on the date command is deprecated. We should remove that, and also look at other things that has been deprecated in the simple language in 2.x. Task Removed deprecated stuff from simple language Related to CAMEL-13150. Where property on the date command is deprecated. We should remove that, and also look at other things that has been deprecated in the simple language in 2.x.
CAMEL-13150 Add command "exchangeProperty" for dateExpression in ExpressionBuilder Method "_dateExpression_" in _ExpressionBuilder.java_ is not taking care about new accessor of "_exchangeProperty_". Command "_property_" is *deprecated* since 2.15+working+ : simple("_${date:property.CamelCreatedTimestamp:yyyy-MM-dd}_") +not-working+ : simple("_${date:exchangeProperty.CamelCreatedTimestamp:yyyy-MM-dd}_")  Improvement Add command "exchangeProperty" for dateExpression in ExpressionBuilder Method "_dateExpression_" in _ExpressionBuilder.java_ is not taking care about new accessor of "_exchangeProperty_". Command "_property_" is *deprecated* since 2.15+working+ : simple("_${date:property.CamelCreatedTimestamp:yyyy-MM-dd}_") +not-working+ : simple("_${date:exchangeProperty.CamelCreatedTimestamp:yyyy-MM-dd}_") 
CAMEL-13144 Move bean component out of camel-core This component is a bit more challenging as bean component is also used for method call language and has support for using language annotations. For example also for @XPath etc. Task Move bean component out of camel-core This component is a bit more challenging as bean component is also used for method call language and has support for using language annotations. For example also for @XPath etc.
CAMEL-13142 Camel may package artifacts from different version When switching from one branch to another there is a (likely) possibility that component directories that existed in a previous checkout branch are no longer available in the current checkout branch. However, `camel-foo/target` with all the previously generated artifacts is still on the file system and cannot be detected by `git status` either. Neither will these stale target directories be removed by `mvn clean`.The camel packager plugin seems to be walking the camel directory structure and will package everything it finds. As a result the camel-2.23.2-SNAPSHOT catalog may contain a catalog entry that points to camel-browse-3.0.0-SNAPSHOT.As a workaround, I suggest to do something like this {code}find . -type d -name target | xargs rm -rf{code}before doing a clean mvn build.As a possible solution, it may be necessary for the thing that walks the directory structure to require at least one file that is maintained in SCM (e.g. pom.xml) Task Camel may package artifacts from different version When switching from one branch to another there is a (likely) possibility that component directories that existed in a previous checkout branch are no longer available in the current checkout branch. However, `camel-foo/target` with all the previously generated artifacts is still on the file system and cannot be detected by `git status` either. Neither will these stale target directories be removed by `mvn clean`.The camel packager plugin seems to be walking the camel directory structure and will package everything it finds. As a result the camel-2.23.2-SNAPSHOT catalog may contain a catalog entry that points to camel-browse-3.0.0-SNAPSHOT.As a workaround, I suggest to do something like this {code}find . -type d -name target | xargs rm -rf{code}before doing a clean mvn build.As a possible solution, it may be necessary for the thing that walks the directory structure to require at least one file that is maintained in SCM (e.g. pom.xml)
CAMEL-13141 camel-api - Add API for advising routes We should likely add a nicer API for testing camel routes with the adviceWith functionality. Today you have to use a RouteReifier from camel-core. We should make a new API in camel-api and make it with a nicer name so its easier to understand and use.{code}        RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new RouteBuilder() {            @Override            public void configure() throws Exception {                // intercept sending to mock:foo and do something else                interceptSendToEndpoint("mock:foo")                        .skipSendToOriginalEndpoint()                        .to("log:foo")                        .to("mock:advised");            }        });{code} New Feature camel-api - Add API for advising routes We should likely add a nicer API for testing camel routes with the adviceWith functionality. Today you have to use a RouteReifier from camel-core. We should make a new API in camel-api and make it with a nicer name so its easier to understand and use.{code}        RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new RouteBuilder() {            @Override            public void configure() throws Exception {                // intercept sending to mock:foo and do something else                interceptSendToEndpoint("mock:foo")                        .skipSendToOriginalEndpoint()                        .to("log:foo")                        .to("mock:advised");            }        });{code}
CAMEL-13137 Move rest component out of camel-core Create a new camel-rest component which has the rest component (needed when using rest-dsl, or using rest component directly etc). Task Move rest component out of camel-core Create a new camel-rest component which has the rest component (needed when using rest-dsl, or using rest component directly etc).
CAMEL-13133 camel3 - build system - Packaging dataformat and language needs to include json metadata When we just depend on camel-support for custom dataformats and languages then they cant locate camel-core JAR which has model json metadata they need for enriching their json metadata.The camel-package-maven-plugin needs to find the camel-core JAR in another way now as its not on the classpath in the maven project. Task camel3 - build system - Packaging dataformat and language needs to include json metadata When we just depend on camel-support for custom dataformats and languages then they cant locate camel-core JAR which has model json metadata they need for enriching their json metadata.The camel-package-maven-plugin needs to find the camel-core JAR in another way now as its not on the classpath in the maven project.
CAMEL-13131 Duplicate declaration of maven dependency in examples [WARNING][WARNING] Some problems were encountered while building the effective model for org.apache.camel.example:camel-example-cdi:jar:3.0.0-SNAPSHOT[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.camel:camel-core:jar -> duplicate declaration of version (?) @ org.apache.camel.example:camel-example-cdi:[unknown-version], /Users/davsclaus/workspace/camel/examples/camel-example-cdi/pom.xml, line 61, column 17[WARNING][WARNING] Some problems were encountered while building the effective model for org.apache.camel.example:camel-example-cdi-cassandraql:jar:3.0.0-SNAPSHOT[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.camel:camel-core:jar -> duplicate declaration of version (?) @ org.apache.camel.example:camel-example-cdi-cassandraql:[unknown-version], /Users/davsclaus/workspace/camel/examples/camel-example-cdi-cassandraql/pom.xml, line 64, column 17[WARNING][WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.[WARNING][WARNING] For this reason, future Maven versions might no longer support building such malformed projects.[WARNING][INFO] -------------------------------------- Task Duplicate declaration of maven dependency in examples [WARNING][WARNING] Some problems were encountered while building the effective model for org.apache.camel.example:camel-example-cdi:jar:3.0.0-SNAPSHOT[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.camel:camel-core:jar -> duplicate declaration of version (?) @ org.apache.camel.example:camel-example-cdi:[unknown-version], /Users/davsclaus/workspace/camel/examples/camel-example-cdi/pom.xml, line 61, column 17[WARNING][WARNING] Some problems were encountered while building the effective model for org.apache.camel.example:camel-example-cdi-cassandraql:jar:3.0.0-SNAPSHOT[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.camel:camel-core:jar -> duplicate declaration of version (?) @ org.apache.camel.example:camel-example-cdi-cassandraql:[unknown-version], /Users/davsclaus/workspace/camel/examples/camel-example-cdi-cassandraql/pom.xml, line 64, column 17[WARNING][WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.[WARNING][WARNING] For this reason, future Maven versions might no longer support building such malformed projects.[WARNING][INFO] --------------------------------------
CAMEL-13130 camel3 - Components should not use XmlConverter directly There are a few components that uses XmlConverter directly like camel-cxf and camel-spring-ws. We should use XmlConverterHelper from camel-support if possible, or better yet the neutral TypeConverter API from camel-api. Task camel3 - Components should not use XmlConverter directly There are a few components that uses XmlConverter directly like camel-cxf and camel-spring-ws. We should use XmlConverterHelper from camel-support if possible, or better yet the neutral TypeConverter API from camel-api.
CAMEL-13126 For Swagger, add an option whether to use X-Forward headers An earlier JIRA: CAMEL-12855 created an issue where the forwarded header could be used to set the "host" for Swagger. This overwrote the old behavior where one could specify a "hard-code" host in the RestConfiguration.Add an option to control whether these x-forward headers should be applied or not, to have the old behavior vs the new. (e.g. *useXForwardHeaders* = true/false)[~cibsen@e-ma.net], a couple of questions: # would the default be the new behavior (using the headers), or the old behavior (do not use the headers) ? # should the parameter turn on/off the entire X-FORWARD section... that is in [the setupXForwardedHeaders() here|https://github.com/apache/camel/blob/release/2.23.0/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java#L358-L385] ? Improvement For Swagger, add an option whether to use X-Forward headers An earlier JIRA: CAMEL-12855 created an issue where the forwarded header could be used to set the "host" for Swagger. This overwrote the old behavior where one could specify a "hard-code" host in the RestConfiguration.Add an option to control whether these x-forward headers should be applied or not, to have the old behavior vs the new. (e.g. *useXForwardHeaders* = true/false)[~cibsen@e-ma.net], a couple of questions: # would the default be the new behavior (using the headers), or the old behavior (do not use the headers) ? # should the parameter turn on/off the entire X-FORWARD section... that is in [the setupXForwardedHeaders() here|https://github.com/apache/camel/blob/release/2.23.0/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java#L358-L385] ?
CAMEL-13124 camel3 - move xslt componet out of camel-core This requires a bit of shared xml code to be moved to camel-support. Task camel3 - move xslt componet out of camel-core This requires a bit of shared xml code to be moved to camel-support.
CAMEL-13119 Create Cache Policy for routes Let's write a Policy for camel routes that can cache the "result" of a route and execute the route next time only if nothing is found in the cache. Related to cache DSL idea, but without DSL change: https://issues.apache.org/jira/browse/CAMEL-11114 In the first draft the CachePolicy would cache the Message Body by a key calculated via an Expression.Interface: * cachePolicy.setCacheManager( cacheManager ) - set the CacheManager. If not set, try lookup automatically. * cachePolicy.setCacheName ( name ) - Will use this cache from the CacheManager. If not set, we can use the route id by default. * cachePolicy.setKeyExpression( expression ) - Camel expression that is evaluated on the Exchange to determine the cache key. If it's found in the cache, the route is not executed and the cached value is set as Body. Otherwise the Message Body is added to the cache after the route with this key. An earlier related implementation: [https://gist.github.com/bszeti/552bf7a1f05a75fc2964a4ce7ce889b5] and how it can be used in a route: [https://gist.github.com/bszeti/4f855cd80cd69e3953ff990b0ae056a2]   New Feature Create Cache Policy for routes Let's write a Policy for camel routes that can cache the "result" of a route and execute the route next time only if nothing is found in the cache. Related to cache DSL idea, but without DSL change: https://issues.apache.org/jira/browse/CAMEL-11114 In the first draft the CachePolicy would cache the Message Body by a key calculated via an Expression.Interface: * cachePolicy.setCacheManager( cacheManager ) - set the CacheManager. If not set, try lookup automatically. * cachePolicy.setCacheName ( name ) - Will use this cache from the CacheManager. If not set, we can use the route id by default. * cachePolicy.setKeyExpression( expression ) - Camel expression that is evaluated on the Exchange to determine the cache key. If it's found in the cache, the route is not executed and the cached value is set as Body. Otherwise the Message Body is added to the cache after the route with this key. An earlier related implementation: [https://gist.github.com/bszeti/552bf7a1f05a75fc2964a4ce7ce889b5] and how it can be used in a route: [https://gist.github.com/bszeti/4f855cd80cd69e3953ff990b0ae056a2]  
CAMEL-13115 camel3 - build system - camel-catalog should not warn for missing doc for inactive modules When we have removed deprecated modules in 3.x, then the folders stay in git when you switch branches.So we get this WARNs when building camel-catalog{code}[WARNING] 	Missing document detected: 40[WARNING] 		camel-bam[WARNING] 		camel-cache[WARNING] 		camel-castor[WARNING] 		camel-context[WARNING] 		camel-eclipse[WARNING] 		camel-elasticsearch[WARNING] 		camel-elasticsearch5[WARNING] 		camel-groovy-dsl[WARNING] 		camel-guice[WARNING] 		camel-hawtdb[WARNING] 		camel-hdfs[WARNING] 		camel-hessian[WARNING] 		camel-http[WARNING] 		camel-ibatis[WARNING] 		camel-javaspace[WARNING] 		camel-jira[WARNING] 		camel-josql[WARNING] 		camel-juel[WARNING] 		camel-jxpath[WARNING] 		camel-kestrel[WARNING] 		camel-krati[WARNING] 		camel-mina[WARNING] 		camel-mongodb[WARNING] 		camel-netty[WARNING] 		camel-netty-http[WARNING] 		camel-openshift[WARNING] 		camel-quartz[WARNING] 		camel-routebox[WARNING] 		camel-ruby[WARNING] 		camel-rx[WARNING] 		camel-scala[WARNING] 		camel-scr[WARNING] 		camel-servletlistener[WARNING] 		camel-swagger[WARNING] 		camel-testng[WARNING] 		camel-urlrewrite[WARNING] 		camel-xmlbeans[WARNING] 		camel-xmljson[WARNING] 		camel-xmlrpc[WARNING] 		camel-yql{code}We should make it detect that these are empty folders (has no pom.xml) and skip them. Task camel3 - build system - camel-catalog should not warn for missing doc for inactive modules When we have removed deprecated modules in 3.x, then the folders stay in git when you switch branches.So we get this WARNs when building camel-catalog{code}[WARNING] 	Missing document detected: 40[WARNING] 		camel-bam[WARNING] 		camel-cache[WARNING] 		camel-castor[WARNING] 		camel-context[WARNING] 		camel-eclipse[WARNING] 		camel-elasticsearch[WARNING] 		camel-elasticsearch5[WARNING] 		camel-groovy-dsl[WARNING] 		camel-guice[WARNING] 		camel-hawtdb[WARNING] 		camel-hdfs[WARNING] 		camel-hessian[WARNING] 		camel-http[WARNING] 		camel-ibatis[WARNING] 		camel-javaspace[WARNING] 		camel-jira[WARNING] 		camel-josql[WARNING] 		camel-juel[WARNING] 		camel-jxpath[WARNING] 		camel-kestrel[WARNING] 		camel-krati[WARNING] 		camel-mina[WARNING] 		camel-mongodb[WARNING] 		camel-netty[WARNING] 		camel-netty-http[WARNING] 		camel-openshift[WARNING] 		camel-quartz[WARNING] 		camel-routebox[WARNING] 		camel-ruby[WARNING] 		camel-rx[WARNING] 		camel-scala[WARNING] 		camel-scr[WARNING] 		camel-servletlistener[WARNING] 		camel-swagger[WARNING] 		camel-testng[WARNING] 		camel-urlrewrite[WARNING] 		camel-xmlbeans[WARNING] 		camel-xmljson[WARNING] 		camel-xmlrpc[WARNING] 		camel-yql{code}We should make it detect that these are empty folders (has no pom.xml) and skip them.
CAMEL-13113 Remove camel-script and make camel-javascript scripting api/jsr is also deprecated in the jdk and to be removed in the futurewe will remove it for camel 3and deprecate it in 2.xfor camel k and using javascript i think they are doing something custom, and will can make a new camel-javascript language for that purpose solelyall the other scripting languages was also a security vulnerability as well Task Remove camel-script and make camel-javascript scripting api/jsr is also deprecated in the jdk and to be removed in the futurewe will remove it for camel 3and deprecate it in 2.xfor camel k and using javascript i think they are doing something custom, and will can make a new camel-javascript language for that purpose solelyall the other scripting languages was also a security vulnerability as well
CAMEL-13112 Move file component out of camel core There is some file cluster that uses some abstract cluster stuff which we need to move to camel-support Task Move file component out of camel core There is some file cluster that uses some abstract cluster stuff which we need to move to camel-support
CAMEL-13108 Move dataset component out of camel-core We should likely put mock, dataset and test components in the same JAR as dataset and test extends mock component. So its easier they are in the same JAR.Also we already have camel-test for junit testing, so the test component would conflict with camel-test.So if we call it camel-mock JAR then we have a free name to use. Task Move dataset component out of camel-core We should likely put mock, dataset and test components in the same JAR as dataset and test extends mock component. So its easier they are in the same JAR.Also we already have camel-test for junit testing, so the test component would conflict with camel-test.So if we call it camel-mock JAR then we have a free name to use.
CAMEL-13102 Move camel-dataformat out of camel-core for dataformat component we need to move MarshalProcessor / UnmarshalProcessor to camel-support first to have it in a public api Task Move camel-dataformat out of camel-core for dataformat component we need to move MarshalProcessor / UnmarshalProcessor to camel-support first to have it in a public api
CAMEL-13088 build system - Automate list of components in parent and apache-camel poms We need to add manually all the camel JARs in the parent/pom and apache-camel poms and the include file as well. As we get more and more components and also -starter JARs we should automate this. Task build system - Automate list of components in parent and apache-camel poms We need to add manually all the camel JARs in the parent/pom and apache-camel poms and the include file as well. As we get more and more components and also -starter JARs we should automate this.
CAMEL-13083 Upgrade to latest Guava version for Swagger dependency Guava up to ver 24.1 has a denial of service vulnerability.Upgrade the camel-swagger dependency on Guava to a newer version.Would be nice if this could go in the 2.23.x version and above  Improvement Upgrade to latest Guava version for Swagger dependency Guava up to ver 24.1 has a denial of service vulnerability.Upgrade the camel-swagger dependency on Guava to a newer version.Would be nice if this could go in the 2.23.x version and above 
CAMEL-13081 doc - pipes and filters should be pipeline-eip The tooling report this as a missing EIP doc page.It should just be renamed to pipeline-eip Task doc - pipes and filters should be pipeline-eip The tooling report this as a missing EIP doc page.It should just be renamed to pipeline-eip
CAMEL-13075 component docs - Generated description with simple language should include curly brackets For example the idempotentKey athttps://github.com/apache/camel/blob/master/camel-core/src/main/docs/file-component.adocShould include{code}${file:name}-...{code}Where the curly brackets are missing. Task component docs - Generated description with simple language should include curly brackets For example the idempotentKey athttps://github.com/apache/camel/blob/master/camel-core/src/main/docs/file-component.adocShould include{code}${file:name}-...{code}Where the curly brackets are missing.
CAMEL-13074 FileWatcherReloadStrategy - Use file component instead of JDK FileWatcher The FileWatcherReloadStrategy keeps failing on various platforms and CI server.Lets use Camel's file component instead (to eat our own dog food) Improvement FileWatcherReloadStrategy - Use file component instead of JDK FileWatcher The FileWatcherReloadStrategy keeps failing on various platforms and CI server.Lets use Camel's file component instead (to eat our own dog food)
CAMEL-13067 camel3 - build system - Component level metadata is missing In 2.x we used to have component level metadata but in 3.x they are not thereFor example testManagedCamelContextExplainComponentModel fails this test. Task camel3 - build system - Component level metadata is missing In 2.x we used to have component level metadata but in 3.x they are not thereFor example testManagedCamelContextExplainComponentModel fails this test.
CAMEL-13066 camel-hystrix - Do not fallback on HystrixBadRequestException See SOhttps://stackoverflow.com/questions/54151657/camel-hystrix-eip-ignoreexceptions-to-prevent-call-to-fallbackAnd the javadoc athttps://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/exception/HystrixBadRequestException.html Improvement camel-hystrix - Do not fallback on HystrixBadRequestException See SOhttps://stackoverflow.com/questions/54151657/camel-hystrix-eip-ignoreexceptions-to-prevent-call-to-fallbackAnd the javadoc athttps://netflix.github.io/Hystrix/javadoc/com/netflix/hystrix/exception/HystrixBadRequestException.html
CAMEL-13064 camel-zipfile and camel-tarfile - ZipIterator and TarIterator issue There is a little problem with hasNext vs next contract so they dont behave correctly with the EIPs such as splitter with the 3.0 refactored code. Task camel-zipfile and camel-tarfile - ZipIterator and TarIterator issue There is a little problem with hasNext vs next contract so they dont behave correctly with the EIPs such as splitter with the 3.0 refactored code.
CAMEL-13055 camel3 - build system - Reduce maven plugins not needed to run We can look at reducing some of the maven goals that runs during building components to reduce the burden on maven and speedup the build a bit.- dont run enforcer plugin- dont run maven site plugin- only run osgi plugin on core and components- skip running integration tests if fastinstall profile enabled on some modules- ... Task camel3 - build system - Reduce maven plugins not needed to run We can look at reducing some of the maven goals that runs during building components to reduce the burden on maven and speedup the build a bit.- dont run enforcer plugin- dont run maven site plugin- only run osgi plugin on core and components- skip running integration tests if fastinstall profile enabled on some modules- ...
CAMEL-13053 camel-restdsl-swagger-plugin - Skip running integration tests with -P fastinstall When runningmvn clean install -P fastinstallThen the integration tests are run in this module and they take 40+ sec to run. It would be nice to skip this so the build is quicker in fast install mode{code}[INFO] --- maven-invoker-plugin:3.1.0:integration-test (integration-test) @ camel-restdsl-swagger-plugin ---[INFO] Building: simple-dto/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple-dto/pom.xml ............................... SUCCESS (22.3 s)[INFO] Building: simple-xml-dto/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple-xml-dto/pom.xml ........................... SUCCESS (8.5 s)[INFO] Building: simple-xml/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple-xml/pom.xml ............................... SUCCESS (4.8 s)[INFO] Building: simple/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple/pom.xml ................................... SUCCESS (2.9 s)[INFO] Building: customized/pom.xml[INFO] run post-build script verify.groovy[INFO]           customized/pom.xml ............................... SUCCESS (3.3 s)[INFO][INFO] --- maven-invoker-plugin:3.1.0:verify (integration-test) @ camel-restdsl-swagger-plugin ---[INFO] -------------------------------------------------[INFO] Build Summary:[INFO]   Passed: 5, Failed: 0, Errors: 0, Skipped: 0[INFO] -------------------------------------------------{code} Task camel-restdsl-swagger-plugin - Skip running integration tests with -P fastinstall When runningmvn clean install -P fastinstallThen the integration tests are run in this module and they take 40+ sec to run. It would be nice to skip this so the build is quicker in fast install mode{code}[INFO] --- maven-invoker-plugin:3.1.0:integration-test (integration-test) @ camel-restdsl-swagger-plugin ---[INFO] Building: simple-dto/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple-dto/pom.xml ............................... SUCCESS (22.3 s)[INFO] Building: simple-xml-dto/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple-xml-dto/pom.xml ........................... SUCCESS (8.5 s)[INFO] Building: simple-xml/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple-xml/pom.xml ............................... SUCCESS (4.8 s)[INFO] Building: simple/pom.xml[INFO] run post-build script verify.groovy[INFO]           simple/pom.xml ................................... SUCCESS (2.9 s)[INFO] Building: customized/pom.xml[INFO] run post-build script verify.groovy[INFO]           customized/pom.xml ............................... SUCCESS (3.3 s)[INFO][INFO] --- maven-invoker-plugin:3.1.0:verify (integration-test) @ camel-restdsl-swagger-plugin ---[INFO] -------------------------------------------------[INFO] Build Summary:[INFO]   Passed: 5, Failed: 0, Errors: 0, Skipped: 0[INFO] -------------------------------------------------{code}
CAMEL-13051 camel3 - build system needs to generate component.properties We now generate more of the meta files in the META-INF/services folder. But the JARs from 2.x vs 3.0 is not exactly the same.The component.properties dataformat.properties language.properties files is currently not being generated.Some of our tooling depends on that these files are there.For example the camel-catalog is not correct, try to compare its 2.x JAR vs 3.0 JAR, and you can then find out much more what is wrong currently with the 3.0 branch. Task camel3 - build system needs to generate component.properties We now generate more of the meta files in the META-INF/services folder. But the JARs from 2.x vs 3.0 is not exactly the same.The component.properties dataformat.properties language.properties files is currently not being generated.Some of our tooling depends on that these files are there.For example the camel-catalog is not correct, try to compare its 2.x JAR vs 3.0 JAR, and you can then find out much more what is wrong currently with the 3.0 branch.
CAMEL-13042 camel-core - File producer should by default not allow writing files to directories outside its starting directory For example{code:xml}<from uri="file:src/test/resources/data?noop=true"/><setHeader headerName="CamelFileName">    <simple>../../${file:name}</simple></setHeader><to uri="file:target/results"/>{code}Can write the file outside the target/results folder. We should not allow this by default to be more security friendly. We should add a new option (maybe name it jailStartingDirectory or allowWriteOutsideStartingDirectory) or some better name Improvement camel-core - File producer should by default not allow writing files to directories outside its starting directory For example{code:xml}<from uri="file:src/test/resources/data?noop=true"/><setHeader headerName="CamelFileName">    <simple>../../${file:name}</simple></setHeader><to uri="file:target/results"/>{code}Can write the file outside the target/results folder. We should not allow this by default to be more security friendly. We should add a new option (maybe name it jailStartingDirectory or allowWriteOutsideStartingDirectory) or some better name
CAMEL-13036 Add the possibility to disable the invocation of ModelHelper.dumpModelAsXml() during testing Add the possibility to disable the invocation of {{ModelHelper.dumpModelAsXml()}}. This is particularly disturbing for Camel contexts with a lot of route definitions as this uses a lot of processing time and the information is only used for log output.Actual use in 2.x in {{RouteDefinition.java}}:{code:java|title=RouteDefinition.java}String beforeAsXml = ModelHelper.dumpModelAsXml(camelContext, this);...String afterAsXml = ModelHelper.dumpModelAsXml(camelContext, merged);log.info("Adviced route before/after as XML:\n{}\n{}", beforeAsXml, afterAsXml);{code}In 2.X this should be optimized in {{RouteDefinition.java}}, in 3.X in {{RouteReifier.java}}.Possible solution: Add {{log.isInfoEnabled{}}} guard.  Improvement Add the possibility to disable the invocation of ModelHelper.dumpModelAsXml() during testing Add the possibility to disable the invocation of {{ModelHelper.dumpModelAsXml()}}. This is particularly disturbing for Camel contexts with a lot of route definitions as this uses a lot of processing time and the information is only used for log output.Actual use in 2.x in {{RouteDefinition.java}}:{code:java|title=RouteDefinition.java}String beforeAsXml = ModelHelper.dumpModelAsXml(camelContext, this);...String afterAsXml = ModelHelper.dumpModelAsXml(camelContext, merged);log.info("Adviced route before/after as XML:\n{}\n{}", beforeAsXml, afterAsXml);{code}In 2.X this should be optimized in {{RouteDefinition.java}}, in 3.X in {{RouteReifier.java}}.Possible solution: Add {{log.isInfoEnabled{}}} guard. 
CAMEL-13031 camel-core - test failure: org.apache.camel.impl.FileWatcherReloadStrategyTest. [INFO] Running org.apache.camel.impl.FileWatcherReloadStrategyTest[ERROR] Tests run: 7, Failures: 0, Errors: 6, Skipped: 0, Time elapsed: 123.022 s <<< FAILURE! - in org.apache.camel.impl.FileWatcherReloadStrategyTest[ERROR] testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.529 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(FileWatcherReloadStrategyTest.java:166)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testUpdateXmlRoute$1(FileWatcherReloadStrategyTest.java:166)[ERROR] testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.058 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(FileWatcherReloadStrategyTest.java:71)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testAddNewRoute$0(FileWatcherReloadStrategyTest.java:71)[ERROR] testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.078 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(FileWatcherReloadStrategyTest.java:166)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testUpdateXmlRoute$1(FileWatcherReloadStrategyTest.java:166)[ERROR] testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.067 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(FileWatcherReloadStrategyTest.java:71)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testAddNewRoute$0(FileWatcherReloadStrategyTest.java:71)[ERROR] testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.095 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(FileWatcherReloadStrategyTest.java:166)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testUpdateXmlRoute$1(FileWatcherReloadStrategyTest.java:166)[ERROR] testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.026 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(FileWatcherReloadStrategyTest.java:71)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testAddNewRoute$0(FileWatcherReloadStrategyTest.java:71)[INFO][INFO] Results:[INFO][ERROR] Errors:[ERROR] org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest)[ERROR] Run 1: FileWatcherReloadStrategyTest.testAddNewRoute:71 » ConditionTimeout Assertion ...[ERROR] Run 2: FileWatcherReloadStrategyTest.testAddNewRoute:71 » ConditionTimeout Assertion ...[ERROR] Run 3: FileWatcherReloadStrategyTest.testAddNewRoute:71 » ConditionTimeout Assertion ...[INFO][ERROR] org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest)[ERROR] Run 1: FileWatcherReloadStrategyTest.testUpdateXmlRoute:166 » ConditionTimeout Assert...[ERROR] Run 2: FileWatcherReloadStrategyTest.testUpdateXmlRoute:166 » ConditionTimeout Assert...[ERROR] Run 3: FileWatcherReloadStrategyTest.testUpdateXmlRoute:166 » ConditionTimeout Assert...[INFO][INFO][ERROR] Tests run: 3, Failures: 0, Errors: 2, Skipped: 0 Test camel-core - test failure: org.apache.camel.impl.FileWatcherReloadStrategyTest. [INFO] Running org.apache.camel.impl.FileWatcherReloadStrategyTest[ERROR] Tests run: 7, Failures: 0, Errors: 6, Skipped: 0, Time elapsed: 123.022 s <<< FAILURE! - in org.apache.camel.impl.FileWatcherReloadStrategyTest[ERROR] testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.529 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(FileWatcherReloadStrategyTest.java:166)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testUpdateXmlRoute$1(FileWatcherReloadStrategyTest.java:166)[ERROR] testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.058 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(FileWatcherReloadStrategyTest.java:71)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testAddNewRoute$0(FileWatcherReloadStrategyTest.java:71)[ERROR] testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.078 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(FileWatcherReloadStrategyTest.java:166)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testUpdateXmlRoute$1(FileWatcherReloadStrategyTest.java:166)[ERROR] testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.067 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(FileWatcherReloadStrategyTest.java:71)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testAddNewRoute$0(FileWatcherReloadStrategyTest.java:71)[ERROR] testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.095 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(FileWatcherReloadStrategyTest.java:166)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testUpdateXmlRoute$1(FileWatcherReloadStrategyTest.java:166)[ERROR] testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest) Time elapsed: 20.026 s <<< ERROR!org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.camel.impl.FileWatcherReloadStrategyTest expected:<1> but was:<0> within 20 seconds. at org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(FileWatcherReloadStrategyTest.java:71)Caused by: java.lang.AssertionError: expected:<1> but was:<0> at org.apache.camel.impl.FileWatcherReloadStrategyTest.lambda$testAddNewRoute$0(FileWatcherReloadStrategyTest.java:71)[INFO][INFO] Results:[INFO][ERROR] Errors:[ERROR] org.apache.camel.impl.FileWatcherReloadStrategyTest.testAddNewRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest)[ERROR] Run 1: FileWatcherReloadStrategyTest.testAddNewRoute:71 >> ConditionTimeout Assertion ...[ERROR] Run 2: FileWatcherReloadStrategyTest.testAddNewRoute:71 >> ConditionTimeout Assertion ...[ERROR] Run 3: FileWatcherReloadStrategyTest.testAddNewRoute:71 >> ConditionTimeout Assertion ...[INFO][ERROR] org.apache.camel.impl.FileWatcherReloadStrategyTest.testUpdateXmlRoute(org.apache.camel.impl.FileWatcherReloadStrategyTest)[ERROR] Run 1: FileWatcherReloadStrategyTest.testUpdateXmlRoute:166 >> ConditionTimeout Assert...[ERROR] Run 2: FileWatcherReloadStrategyTest.testUpdateXmlRoute:166 >> ConditionTimeout Assert...[ERROR] Run 3: FileWatcherReloadStrategyTest.testUpdateXmlRoute:166 >> ConditionTimeout Assert...[INFO][INFO][ERROR] Tests run: 3, Failures: 0, Errors: 2, Skipped: 0
CAMEL-13029 camel-swagger-java - Should default use scheme from rest-dsl configuration in swagger doc Because http is default then we have not noticed before. But if you use https as the scheme in the rest-dsl for the rest service then the swagger doc generated is outputting http by default. We should use the scheme setting from the rest-dsl out of the box.You can configure it explicit via				.apiProperty("schemes", "https") Improvement camel-swagger-java - Should default use scheme from rest-dsl configuration in swagger doc Because http is default then we have not noticed before. But if you use https as the scheme in the rest-dsl for the rest service then the swagger doc generated is outputting http by default. We should use the scheme setting from the rest-dsl out of the box.You can configure it explicit via				.apiProperty("schemes", "https")
CAMEL-13025 camel-core - File read lock changed - If file gets deleted then break out loop See SOhttps://stackoverflow.com/questions/53865940/apache-camel-route-hangs-when-file-is-deleted-during-processing?noredirect=1#comment94587192_53865940So if the target file gets deleted during the check interval and you have timeout = 0, then it will keep looping. So we should add a check if the file still exists in the looping. Improvement camel-core - File read lock changed - If file gets deleted then break out loop See SOhttps://stackoverflow.com/questions/53865940/apache-camel-route-hangs-when-file-is-deleted-during-processing?noredirect=1#comment94587192_53865940So if the target file gets deleted during the check interval and you have timeout = 0, then it will keep looping. So we should add a check if the file still exists in the looping.
CAMEL-13021 Remove camel-example-swagger-xml This example downloads from 3rd party repo - lets avoid this and we have 100 other examples already. Task Remove camel-example-swagger-xml This example downloads from 3rd party repo - lets avoid this and we have 100 other examples already.
CAMEL-13018 Swagger does not work if JMX is disabled Swagger returns 402 No Content if jmx is disabled.How to reproduce:Add following code to main method of [Application|https://github.com/apache/camel/blob/master/examples/camel-example-spring-boot-rest-swagger/src/main/java/org/apache/camel/example/springboot/Application.java] class{{System.setProperty("org.apache.camel.jmx.disabled", "true");}}  Improvement Swagger does not work if JMX is disabled Swagger returns 402 No Content if jmx is disabled.How to reproduce:Add following code to main method of [Application|https://github.com/apache/camel/blob/master/examples/camel-example-spring-boot-rest-swagger/src/main/java/org/apache/camel/example/springboot/Application.java] class{{System.setProperty("org.apache.camel.jmx.disabled", "true");}} 
CAMEL-13015 camel-spring-boot - load multiple route xml files  When  I use SpringDSL , i want to load two route files For Example route1.xml and route2.xmlIf I put two files in same directory like below , it is workingcamel.springboot.xmlRoutes: file :directory/*.xml  If I put two files into different directories , it does not workcamel.springboot.xmlRoutes: [file:directory1/route1.xml|file:///directory1/route1.xml] , directory2/route2.xmlCould you please implement this feature?Thanks New Feature camel-spring-boot - load multiple route xml files  When  I use SpringDSL , i want to load two route files For Example route1.xml and route2.xmlIf I put two files in same directory like below , it is workingcamel.springboot.xmlRoutes: file :directory/*.xml  If I put two files into different directories , it does not workcamel.springboot.xmlRoutes: [file:directory1/route1.xml|file:///directory1/route1.xml] , directory2/route2.xmlCould you please implement this feature?Thanks
CAMEL-13010 Deprecate camel-script With the release of Java 11, Nashorn is deprecated, and will likely be removed from the JDK at a later time.[9] The GraalVM was suggested as a workaround.-> https://en.wikipedia.org/wiki/Nashorn_(JavaScript_engine)We have already deprecated these other scripting languages like python, php etc (https://github.com/apache/camel/blob/master/components/readme.adoc#expression-languages).And groovy also dont recommend using camel-script by groovy directly, which you can do via camel-groovyhttp://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html#jsr223 Task Deprecate camel-script With the release of Java 11, Nashorn is deprecated, and will likely be removed from the JDK at a later time.[9] The GraalVM was suggested as a workaround.-> https://en.wikipedia.org/wiki/Nashorn_(JavaScript_engine)We have already deprecated these other scripting languages like python, php etc (https://github.com/apache/camel/blob/master/components/readme.adoc#expression-languages).And groovy also dont recommend using camel-script by groovy directly, which you can do via camel-groovyhttp://docs.groovy-lang.org/latest/html/documentation/guide-integrating.html#jsr223
CAMEL-13007 camel-properties : fall-back to env vars The camel properties component at the moment fall-back to system properties but to improve cloud integration, it should also fall-back to environment variables Improvement camel-properties : fall-back to env vars The camel properties component at the moment fall-back to system properties but to improve cloud integration, it should also fall-back to environment variables
CAMEL-13001 Route coverage: specify coverage to fail on currently, there is an option to fail the build if the coverage does not reach 100%.it would be nice to be able to specify the level of coverage wanted as a parameter of the maven plugin Improvement Route coverage: specify coverage to fail on currently, there is an option to fail the build if the coverage does not reach 100%.it would be nice to be able to specify the level of coverage wanted as a parameter of the maven plugin
CAMEL-12990 FTP endpoint with 'localWorkDirectory' considers File Consumer's 'noop' option [https://camel.apache.org/ftp2.html] reads:{quote}See [File|https://camel.apache.org/file2.html] for more options as all the options from [File|https://camel.apache.org/file2.html] is inherited.{quote} and in *Using Local Work Directory*:{quote}And finally, when the Exchange is complete the local file is deleted.{quote} [https://camel.apache.org/file2.html] reads:{quote}|{{noop}}|{{false}}|If *{{true}}*, the file is not moved or deleted in any way.|{quote}I have a use case where I'd need the file transferred to \{{localWorkDirectory}} to stay there. Otherwise I have to change \{{localWorkDirectory}} to something else and add a Producer endpoint to my route which copies the file to the intended directory (i.e. the former \{{localWorkDirectory}}), which is inconvenient with GiB-size files. New Feature FTP endpoint with 'localWorkDirectory' considers File Consumer's 'noop' option [https://camel.apache.org/ftp2.html] reads:{quote}See [File|https://camel.apache.org/file2.html] for more options as all the options from [File|https://camel.apache.org/file2.html] is inherited.{quote} and in *Using Local Work Directory*:{quote}And finally, when the Exchange is complete the local file is deleted.{quote} [https://camel.apache.org/file2.html] reads:{quote}|{{noop}}|{{false}}|If *{{true}}*, the file is not moved or deleted in any way.|{quote}I have a use case where I'd need the file transferred to \{{localWorkDirectory}} to stay there. Otherwise I have to change \{{localWorkDirectory}} to something else and add a Producer endpoint to my route which copies the file to the intended directory (i.e. the former \{{localWorkDirectory}}), which is inconvenient with GiB-size files.
CAMEL-12989 Allow Endpoint to set the key that ProducerCache uses ProducerCache is heavily tied to Endpoint URIs. Using the Endpoint URI as the key to the cache does not allow for the creation of Endpoints with the same URI but different configurations. For example, using a RecipientList to call the same SOAP endpoint but with different SSL certificates isn't currently possible. As the URI is always the same.the ProducerCache will always use the first Endpoint it added to the map even if multiple Endpoints are added to the CamelContext with different keys.Adding getProducerCacheKey & setProducerCacheKey methods to the Endpoint interface would allow for setting the key programmatically. ProducerCache.doGetProducer would use the getProducerCacheKey method instead of getEndpointUri.DefaultEndpoint would have a new member variable producerCacheKey and could implement the getter such that if the producerCacheKey member was not set it would return getEndpointUri() Improvement Allow Endpoint to set the key that ProducerCache uses ProducerCache is heavily tied to Endpoint URIs. Using the Endpoint URI as the key to the cache does not allow for the creation of Endpoints with the same URI but different configurations. For example, using a RecipientList to call the same SOAP endpoint but with different SSL certificates isn't currently possible. As the URI is always the same.the ProducerCache will always use the first Endpoint it added to the map even if multiple Endpoints are added to the CamelContext with different keys.Adding getProducerCacheKey & setProducerCacheKey methods to the Endpoint interface would allow for setting the key programmatically. ProducerCache.doGetProducer would use the getProducerCacheKey method instead of getEndpointUri.DefaultEndpoint would have a new member variable producerCacheKey and could implement the getter such that if the producerCacheKey member was not set it would return getEndpointUri()
CAMEL-12981 camel-catalog: provide information about active/passive endpoints In Camel K we need to distinguish active from passive endpoints in order to determine when a integration can be scaled down to 0. E.g. * a "timer" (start) endpoint is *active*, because it needs to have a JVM always running and do something at each interval * a "jms" (start) endpoint is *active* because it needs to establish a connection to the broker and keep it alive * a "direct" or "seda" endpoint is *passive*, because they do something when they receive an exchange from another route * a "undertow" (start) endpoint is *passive*, because it does nothing until somebody calls it from an +external+ service (http based endpoints can all be considered passive in Knative+CamelK) We should add this information to the catalog. Now I've embedded it in Camel K. Task camel-catalog: provide information about active/passive endpoints In Camel K we need to distinguish active from passive endpoints in order to determine when a integration can be scaled down to 0. E.g. * a "timer" (start) endpoint is *active*, because it needs to have a JVM always running and do something at each interval * a "jms" (start) endpoint is *active* because it needs to establish a connection to the broker and keep it alive * a "direct" or "seda" endpoint is *passive*, because they do something when they receive an exchange from another route * a "undertow" (start) endpoint is *passive*, because it does nothing until somebody calls it from an +external+ service (http based endpoints can all be considered passive in Knative+CamelK) We should add this information to the catalog. Now I've embedded it in Camel K.
CAMEL-12965 deprecate the Camel maven archetypes ts these maven archetypes, we are considering to deprecate for 2.x and remove in 3.xhttps://github.com/apache/camel/tree/master/archetypes Task deprecate the Camel maven archetypes ts these maven archetypes, we are considering to deprecate for 2.x and remove in 3.xhttps://github.com/apache/camel/tree/master/archetypes
CAMEL-12937 Stream Caching Cipher is misspelled as chiper The typo is in the docs here:https://camel.apache.org/stream-caching.htmlAs well as {{org.apache.camel.spring.boot.CamelConfigurationProperties}}I'm guessing it is in other places as well. Task Stream Caching Cipher is misspelled as chiper The typo is in the docs here:https://camel.apache.org/stream-caching.htmlAs well as {{org.apache.camel.spring.boot.CamelConfigurationProperties}}I'm guessing it is in other places as well.
CAMEL-12909 Error handler - Counter and option to log when a retry became success Asked on twitterhttps://twitter.com/luistrigueiros/status/1053039644093366272It may be good to have a way to know if a message that has first failed and then with retries from the error handler then became succesful. We should be able to see this with- counter in the mbean- log message in the logs, option to configure the logging level. Improvement Error handler - Counter and option to log when a retry became success Asked on twitterhttps://twitter.com/luistrigueiros/status/1053039644093366272It may be good to have a way to know if a message that has first failed and then with retries from the error handler then became succesful. We should be able to see this with- counter in the mbean- log message in the logs, option to configure the logging level.
CAMEL-12872 When no route is defined, mention in log that it is the reason why it shutdowns the Camel Context automatically When starting a project and that no Camel route are found, the camel context is shutdown immediately.it would be nice to have a trace  in log mentioning the reason.maybe also refer to some documentation on how to configure routes? Improvement When no route is defined, mention in log that it is the reason why it shutdowns the Camel Context automatically When starting a project and that no Camel route are found, the camel context is shutdown immediately.it would be nice to have a trace  in log mentioning the reason.maybe also refer to some documentation on how to configure routes?
CAMEL-12868 Camel project generated from spring initalzr is shutdowning immediately after start - go to https://start.spring.io/- let default values for "generate a Maven project with Java and Spring Boot 2.0.5"- add Camel dependencies- expand zipped project- launch mvn spring-boot:run- Camel is started and then shutdowned immediately instead of letting the application running{noformat}C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo>mvn spring-boot:run[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building demo 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] >>> spring-boot-maven-plugin:2.0.5.RELEASE:run (default-cli) > test-compile @ demo >>>[INFO][INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 1 resource[INFO] Copying 0 resource[INFO][INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\target\classes[INFO][INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\src\test\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\target\test-classes[INFO][INFO] <<< spring-boot-maven-plugin:2.0.5.RELEASE:run (default-cli) < test-compile @ demo <<<[INFO][INFO] --- spring-boot-maven-plugin:2.0.5.RELEASE:run (default-cli) @ demo ---  .   ____          _            __ _ _ /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  '  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.5.RELEASE)2018-10-08 16:25:13.240  INFO 18328 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication on DESKTOP-9NT300B with PID 18328 (C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\target\classes started by Aurelien Pupier in C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo)2018-10-08 16:25:13.243  INFO 18328 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling backto default profiles: default2018-10-08 16:25:13.283  INFO 18328 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5fc55560: startup date [Mon Oct 08 16:25:13 CEST 2018]; root of context hierarchy2018-10-08 16:25:14.102  INFO 18328 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.camel.spring.boot.CamelAutoConfiguration' of type [org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$cae74b74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2018-10-08 16:25:14.283  INFO 18328 --- [           main] o.a.c.i.converter.DefaultTypeConverter   : Type converters loaded (core: 195, classpath: 1)2018-10-08 16:25:14.788  INFO 18328 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup2018-10-08 16:25:14.804  INFO 18328 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Loading additional Camel XML routesfrom: classpath:camel/*.xml2018-10-08 16:25:14.805  INFO 18328 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Loading additional Camel XML rests from: classpath:camel-rest/*.xml2018-10-08 16:25:14.814  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) is starting2018-10-08 16:25:14.817  INFO 18328 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled2018-10-08 16:25:14.981  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html2018-10-08 16:25:14.983  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 0 routes, of which 0 are started2018-10-08 16:25:14.984  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) started in 0.169 seconds2018-10-08 16:25:14.988  INFO 18328 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 2.083 seconds (JVM running for 8.856)[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 6.266 s[INFO] Finished at: 2018-10-08T16:25:14+02:00[INFO] Final Memory: 48M/575M[INFO] ------------------------------------------------------------------------2018-10-08 16:25:15.274  INFO 18328 --- [       Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@5fc55560: startup date [Mon Oct 08 16:25:13 CEST 2018]; root of context hierarchy2018-10-08 16:25:15.277  INFO 18328 --- [       Thread-2] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 21474836472018-10-08 16:25:15.278  INFO 18328 --- [       Thread-2] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) is shutting down2018-10-08 16:25:15.300  INFO 18328 --- [       Thread-2] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) uptime 0.486 seconds2018-10-08 16:25:15.301  INFO 18328 --- [       Thread-2] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) is shutdown in 0.022 seconds2018-10-08 16:25:15.301  INFO 18328 --- [       Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown{noformat} Improvement Camel project generated from spring initalzr is shutdowning immediately after start - go to https://start.spring.io/- let default values for "generate a Maven project with Java and Spring Boot 2.0.5"- add Camel dependencies- expand zipped project- launch mvn spring-boot:run- Camel is started and then shutdowned immediately instead of letting the application running{noformat}C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo>mvn spring-boot:run[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building demo 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] >>> spring-boot-maven-plugin:2.0.5.RELEASE:run (default-cli) > test-compile @ demo >>>[INFO][INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 1 resource[INFO] Copying 0 resource[INFO][INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\target\classes[INFO][INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\src\test\resources[INFO][INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 1 source file to C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\target\test-classes[INFO][INFO] <<< spring-boot-maven-plugin:2.0.5.RELEASE:run (default-cli) < test-compile @ demo <<<[INFO][INFO] --- spring-boot-maven-plugin:2.0.5.RELEASE:run (default-cli) @ demo ---  .   ____          _            __ _ _ /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  '  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.5.RELEASE)2018-10-08 16:25:13.240  INFO 18328 --- [           main] com.example.demo.DemoApplication         : Starting DemoApplication on DESKTOP-9NT300B with PID 18328 (C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo\target\classes started by Aurelien Pupier in C:\ws\workingDirectoryForTest\test-project-generated-from-start-spring-io\demo)2018-10-08 16:25:13.243  INFO 18328 --- [           main] com.example.demo.DemoApplication         : No active profile set, falling backto default profiles: default2018-10-08 16:25:13.283  INFO 18328 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5fc55560: startup date [Mon Oct 08 16:25:13 CEST 2018]; root of context hierarchy2018-10-08 16:25:14.102  INFO 18328 --- [           main] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.camel.spring.boot.CamelAutoConfiguration' of type [org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$cae74b74] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2018-10-08 16:25:14.283  INFO 18328 --- [           main] o.a.c.i.converter.DefaultTypeConverter   : Type converters loaded (core: 195, classpath: 1)2018-10-08 16:25:14.788  INFO 18328 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup2018-10-08 16:25:14.804  INFO 18328 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Loading additional Camel XML routesfrom: classpath:camel/*.xml2018-10-08 16:25:14.805  INFO 18328 --- [           main] o.a.camel.spring.boot.RoutesCollector    : Loading additional Camel XML rests from: classpath:camel-rest/*.xml2018-10-08 16:25:14.814  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) is starting2018-10-08 16:25:14.817  INFO 18328 --- [           main] o.a.c.m.ManagedManagementStrategy        : JMX is enabled2018-10-08 16:25:14.981  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html2018-10-08 16:25:14.983  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 0 routes, of which 0 are started2018-10-08 16:25:14.984  INFO 18328 --- [           main] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) started in 0.169 seconds2018-10-08 16:25:14.988  INFO 18328 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 2.083 seconds (JVM running for 8.856)[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 6.266 s[INFO] Finished at: 2018-10-08T16:25:14+02:00[INFO] Final Memory: 48M/575M[INFO] ------------------------------------------------------------------------2018-10-08 16:25:15.274  INFO 18328 --- [       Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@5fc55560: startup date [Mon Oct 08 16:25:13 CEST 2018]; root of context hierarchy2018-10-08 16:25:15.277  INFO 18328 --- [       Thread-2] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 21474836472018-10-08 16:25:15.278  INFO 18328 --- [       Thread-2] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) is shutting down2018-10-08 16:25:15.300  INFO 18328 --- [       Thread-2] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) uptime 0.486 seconds2018-10-08 16:25:15.301  INFO 18328 --- [       Thread-2] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.22.1 (CamelContext: camel-1) is shutdown in 0.022 seconds2018-10-08 16:25:15.301  INFO 18328 --- [       Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown{noformat}
CAMEL-12864 rest: Host header should not overwrite host attribute on rest-swagger component When defining a rest-swagger component{code}@Bean public Component mobile(CamelContext camelContext) throws URISyntaxException{ RestSwaggerComponent mobile = new RestSwaggerComponent(camelContext); mobile.setHost(mobileHost); mobile.setBasePath(mobileBasePath); mobile.setSpecificationUri( new URI(mobileSpecificationPath)); mobile.setComponentName("http4"); return mobile; }{code}in the following route (rest-endpoint missing, this is calling direct:getMobileAccountById) the host attribute is overwritten by the previous host header (therefore removeHeader needs to be called prior to invocation of the rest-swagger endpoint):({code}from("direct:getMobileAccountById").routeId("getMobileAccountById") .setHeader("customerId", simple("headers.mobileAndFixedlineCustomerId.split(',')[1]")) .removeHeader("Host") .to("mobile:getAccountById") .unmarshal(gsonDataFormatMobile) .log("Just got called for Mobile");{code}The attribute host should not be overwritten by the host-header, if it is set explicitly on the component.  Improvement rest: Host header should not overwrite host attribute on rest-swagger component When defining a rest-swagger component{code}@Bean public Component mobile(CamelContext camelContext) throws URISyntaxException{ RestSwaggerComponent mobile = new RestSwaggerComponent(camelContext); mobile.setHost(mobileHost); mobile.setBasePath(mobileBasePath); mobile.setSpecificationUri( new URI(mobileSpecificationPath)); mobile.setComponentName("http4"); return mobile; }{code}in the following route (rest-endpoint missing, this is calling direct:getMobileAccountById) the host attribute is overwritten by the previous host header (therefore removeHeader needs to be called prior to invocation of the rest-swagger endpoint):({code}from("direct:getMobileAccountById").routeId("getMobileAccountById") .setHeader("customerId", simple("headers.mobileAndFixedlineCustomerId.split(',')[1]")) .removeHeader("Host") .to("mobile:getAccountById") .unmarshal(gsonDataFormatMobile) .log("Just got called for Mobile");{code}The attribute host should not be overwritten by the host-header, if it is set explicitly on the component. 
CAMEL-12847 IntrospectionSupport - Allow to use dash style naming See tickethttps://github.com/apache/camel-k/issues/142 New Feature IntrospectionSupport - Allow to use dash style naming See tickethttps://github.com/apache/camel-k/issues/142
CAMEL-12841 camel-restdsl-swagger:generate - Add restConfiguration with common defaults We should add restConfiguration in the generated DSL source code so the Camel developer can see the configuration bits there, and more easily be able to configure rest-dsl options.We should detect which component is on the classpath and choose, eg jetty / servlet etc. New Feature camel-restdsl-swagger:generate - Add restConfiguration with common defaults We should add restConfiguration in the generated DSL source code so the Camel developer can see the configuration bits there, and more easily be able to configure rest-dsl options.We should detect which component is on the classpath and choose, eg jetty / servlet etc.
CAMEL-12828 camel-restdsl-swagger:generate - Add option to generate dto objects We should add an option to generete DTO objects defined in the swagger json file. But we should not create our own logic that does that, but execute the existing swagger-codegen maven plugin and then have some default convention. And make this useable for 90% of the use-cases, and if people need more advanced dto generation then they can use the swagger-codegen maven plugin as-is.We should add some documentation on both situations and maybe a little example as well. New Feature camel-restdsl-swagger:generate - Add option to generate dto objects We should add an option to generete DTO objects defined in the swagger json file. But we should not create our own logic that does that, but execute the existing swagger-codegen maven plugin and then have some default convention. And make this useable for 90% of the use-cases, and if people need more advanced dto generation then they can use the swagger-codegen maven plugin as-is.We should add some documentation on both situations and maybe a little example as well.
CAMEL-12824 camel-route-parser - Add parser for rest-dsl So we can have better tooling for rest-dsl New Feature camel-route-parser - Add parser for rest-dsl So we can have better tooling for rest-dsl
CAMEL-12822 camel-http4 - Expose connection pool stats in JMX So end users can track the stats of the client connection pool, for example to see when all connections are in use, or the number of idle connections and so on. New Feature camel-http4 - Expose connection pool stats in JMX So end users can track the stats of the client connection pool, for example to see when all connections are in use, or the number of idle connections and so on.
CAMEL-12760 deprecate camel-xmlrpc This project is no longer active maintained and last release was from 2010 Task deprecate camel-xmlrpc This project is no longer active maintained and last release was from 2010
CAMEL-12757 add camel-jclouds-starter With SB 1 it was a conflict with a gson library. But now with SB2 we can add a jclouds starter. Task add camel-jclouds-starter With SB 1 it was a conflict with a gson library. But now with SB2 we can add a jclouds starter.
CAMEL-12756 `@ConditionalOnProperty` target property with no metadata  Several auto-configurations use a condition on a property that has no metadata. As a result, trying to use it to customize the auto-configuration lead to a warning in an IDE.The report detected the following: {noformat}org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration [camel.rest.enabled]org.apache.camel.spring.boot.TypeConversionConfiguration [camel.springboot.typeConversion]{noformat}For the latter, the property in {{@ConditionalOnProperty}} must use the canonical format (i.e. must be {{camel.springboot.type-conversion}}) Improvement `@ConditionalOnProperty` target property with no metadata  Several auto-configurations use a condition on a property that has no metadata. As a result, trying to use it to customize the auto-configuration lead to a warning in an IDE.The report detected the following: {noformat}org.apache.camel.model.rest.springboot.RestConfigurationDefinitionAutoConfiguration [camel.rest.enabled]org.apache.camel.spring.boot.TypeConversionConfiguration [camel.springboot.typeConversion]{noformat}For the latter, the property in {{@ConditionalOnProperty}} must use the canonical format (i.e. must be {{camel.springboot.type-conversion}})
CAMEL-12755 Upgrade Infinispan We should upgrade to a newer version, 9.3.1 Task Upgrade Infinispan We should upgrade to a newer version, 9.3.1
CAMEL-12754 Upgrade Apache Ignite We should upgrade ignite as it has some good fixes needed Task Upgrade Apache Ignite We should upgrade ignite as it has some good fixes needed
CAMEL-12752 Upgrade jetty to 9.4.11 We are using 9.4.6 but there is a 9.4.11 version Task Upgrade jetty to 9.4.11 We are using 9.4.6 but there is a 9.4.11 version
CAMEL-12743 Some @link javadoc notations not handled well in auto-generated adocs For example, this javadoc:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java#L257-L271{code:java}    /**     * When in streaming mode, then the splitter splits the original message on-demand, and each splitted     * message is processed one by one. This reduces memory usage as the splitter do not split all the messages first,     * but then we do not know the total size, and therefore the {@link org.apache.camel.Exchange#SPLIT_SIZE} is empty.     * <p/>     * In non-streaming mode (default) the splitter will split each message first, to know the total size, and then     * process each message one by one. This requires to keep all the splitted messages in memory and therefore requires     * more memory. The total size is provided in the {@link org.apache.camel.Exchange#SPLIT_SIZE} header.     * <p/>     * The streaming mode also affects the aggregation behavior.     * If enabled then Camel will process replies out-of-order, eg in the order they come back.     * If disabled, Camel will process replies in the same order as the messages was splitted.     *     * @return the builder     */{code}is generated to:https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/split-eip.adoc{code}When in streaming mode, then the splitter splits the original message on-demand, and each splitted message is processed one by one. This reduces memory usage as the splitter do not split all the messages first, but then we do not know the total size, and therefore the *link* org.apache.camel.ExchangeSPLIT_SIZE is empty. In non-streaming mode (default) the splitter will split each message first, to know the total size, and then process each message one by one. This requires to keep all the splitted messages in memory and therefore requires more memory. The total size is provided in the *link* org.apache.camel.ExchangeSPLIT_SIZE header. The streaming mode also affects the aggregation behavior. If enabled then Camel will process replies out-of-order, eg in the order they come back. If disabled, Camel will process replies in the same order as the messages was splitted.{code}It is my impression that the current doc generator handles only FQCN well but fails to handle all other forms of Java source references. Task Some @link javadoc notations not handled well in auto-generated adocs For example, this javadoc:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/SplitDefinition.java#L257-L271{code:java}    /**     * When in streaming mode, then the splitter splits the original message on-demand, and each splitted     * message is processed one by one. This reduces memory usage as the splitter do not split all the messages first,     * but then we do not know the total size, and therefore the {@link org.apache.camel.Exchange#SPLIT_SIZE} is empty.     * <p/>     * In non-streaming mode (default) the splitter will split each message first, to know the total size, and then     * process each message one by one. This requires to keep all the splitted messages in memory and therefore requires     * more memory. The total size is provided in the {@link org.apache.camel.Exchange#SPLIT_SIZE} header.     * <p/>     * The streaming mode also affects the aggregation behavior.     * If enabled then Camel will process replies out-of-order, eg in the order they come back.     * If disabled, Camel will process replies in the same order as the messages was splitted.     *     * @return the builder     */{code}is generated to:https://github.com/apache/camel/blob/master/camel-core/src/main/docs/eips/split-eip.adoc{code}When in streaming mode, then the splitter splits the original message on-demand, and each splitted message is processed one by one. This reduces memory usage as the splitter do not split all the messages first, but then we do not know the total size, and therefore the *link* org.apache.camel.ExchangeSPLIT_SIZE is empty. In non-streaming mode (default) the splitter will split each message first, to know the total size, and then process each message one by one. This requires to keep all the splitted messages in memory and therefore requires more memory. The total size is provided in the *link* org.apache.camel.ExchangeSPLIT_SIZE header. The streaming mode also affects the aggregation behavior. If enabled then Camel will process replies out-of-order, eg in the order they come back. If disabled, Camel will process replies in the same order as the messages was splitted.{code}It is my impression that the current doc generator handles only FQCN well but fails to handle all other forms of Java source references.
CAMEL-12736 Create FHIR authorization and transaction quickstart Showcase the following features of the underlying HAPI library:[http://hapifhir.io/doc_rest_client_interceptor.html][http://hapifhir.io/doc_rest_client_examples.html#Transaction_With_Placeholder_IDs]   Task Create FHIR authorization and transaction quickstart Showcase the following features of the underlying HAPI library:[http://hapifhir.io/doc_rest_client_interceptor.html][http://hapifhir.io/doc_rest_client_examples.html#Transaction_With_Placeholder_IDs]  
CAMEL-12735 XmlRouteParser does not handle usage of xml namespace prefix for camel for instance with this file content, using the org.apache.camel.parser.XmlRouteParser.parseXmlRouteEndpoints(InputStream, String, String, List<CamelEndpointDetails>) method will not find the endpoint{quote}<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">    <camel:camelContext id="camel" xmlns:camel="http://camel.apache.org/schema/spring">        <camel:endpoint uri="timer:timerName?delay=p"/>        <camel:route id="a route">            <camel:from id="_from1" uri="timer:timerName?delay=1000"/>            <camel:to id="_to1" uri="direct:drink"/>        </camel:route>    </camel:camelContext></beans>{quote} Improvement XmlRouteParser does not handle usage of xml namespace prefix for camel for instance with this file content, using the org.apache.camel.parser.XmlRouteParser.parseXmlRouteEndpoints(InputStream, String, String, List<CamelEndpointDetails>) method will not find the endpoint{quote}<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">    <camel:camelContext id="camel" xmlns:camel="http://camel.apache.org/schema/spring">        <camel:endpoint uri="timer:timerName?delay=p"/>        <camel:route id="a route">            <camel:from id="_from1" uri="timer:timerName?delay=1000"/>            <camel:to id="_to1" uri="direct:drink"/>        </camel:route>    </camel:camelContext></beans>{quote}
CAMEL-12734 camel-sql - Add support for basic dynamic query parameters in consumer See SOhttps://stackoverflow.com/questions/51855665/how-to-implement-stateful-polling-sql-consumer-in-camelIt would be nice if we add support for calling simple expressions like beans and the likes, so end users can have dynamic consumer queries in the SQL from routes  New Feature camel-sql - Add support for basic dynamic query parameters in consumer See SOhttps://stackoverflow.com/questions/51855665/how-to-implement-stateful-polling-sql-consumer-in-camelIt would be nice if we add support for calling simple expressions like beans and the likes, so end users can have dynamic consumer queries in the SQL from routes 
CAMEL-12716 Some spring-boot-starters generated have wrong component name in their javadoc documentation See talk on @devhttp://camel.465427.n5.nabble.com/Re-generating-source-code-Modified-source-files-afterwards-tp5822115.html Task Some spring-boot-starters generated have wrong component name in their javadoc documentation See talk on @devhttp://camel.465427.n5.nabble.com/Re-generating-source-code-Modified-source-files-afterwards-tp5822115.html
CAMEL-12714 support handlers in cxf payload data format without SEI When using a cxf endpoint in payload mode, specifying a WSDL and no service class, the JAX-WS protocol handlers are ignored.Documentation however indicates that payload mode supports protocol JAX-WS handlers.I made a pull request that activates the JAX-WS handlers in this scenario as well, by using a JaxWsEndpointImpl instead of EndpointImpl and removing some checks that avoid the handlers being set.  Improvement support handlers in cxf payload data format without SEI When using a cxf endpoint in payload mode, specifying a WSDL and no service class, the JAX-WS protocol handlers are ignored.Documentation however indicates that payload mode supports protocol JAX-WS handlers.I made a pull request that activates the JAX-WS handlers in this scenario as well, by using a JaxWsEndpointImpl instead of EndpointImpl and removing some checks that avoid the handlers being set. 
CAMEL-12711 SFTP: Cannot specify bind address of local network interface In an environment with multiple network interfaces, it might be necessary to specify the address of the local interface, to which the SFTP connection should bind. Unfortunately, this is not possible with the latest version of camel-ftp. A new URI parameter 'bindAddress' should be introduces which can then be set to the IP-Address of the local network interface against which the SFTP connection should bind. Improvement SFTP: Cannot specify bind address of local network interface In an environment with multiple network interfaces, it might be necessary to specify the address of the local interface, to which the SFTP connection should bind. Unfortunately, this is not possible with the latest version of camel-ftp. A new URI parameter 'bindAddress' should be introduces which can then be set to the IP-Address of the local network interface against which the SFTP connection should bind.
CAMEL-12702 camel-spring-boot - Improve its auto configuration docs Some of these options has no docs, or its sparse, or has some javadoc link reference etchttps://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/docs/spring-boot.adoc#spring-boot-auto-configuration Improvement camel-spring-boot - Improve its auto configuration docs Some of these options has no docs, or its sparse, or has some javadoc link reference etchttps://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/docs/spring-boot.adoc#spring-boot-auto-configuration
CAMEL-12699 Unable to combine retry with Hystrix circuit breaker There as been more comment activity and no real resolution for the following ticket -> https://issues.apache.org/jira/browse/CAMEL-12195. This is blocking our ability to create resilient clients combining retry/exponential back-off/circuit-breaker without pulling in other frameworks or hacking in our own retry logic. Improvement Unable to combine retry with Hystrix circuit breaker There as been more comment activity and no real resolution for the following ticket -> https://issues.apache.org/jira/browse/CAMEL-12195. This is blocking our ability to create resilient clients combining retry/exponential back-off/circuit-breaker without pulling in other frameworks or hacking in our own retry logic.
CAMEL-12691 Allow configuration of org.xml.sax.ErrorHandler on DocumentBuilders used in Camel I have trivial route that processes XMLs. When the XML is route and has no content (like empty file processed by {{<from uri="file:xxx">}}) I'm getting:{noformat}[Fatal Error] :-1:-1: Premature end of file.{noformat}printed directly on STDOUT.If there was a way to make {{org.apache.camel.converter.jaxp.XmlConverter}} call {{javax.xml.parsers.DocumentBuilder#setErrorHandler}} (for example delegating to logger), it'd be great. Improvement Allow configuration of org.xml.sax.ErrorHandler on DocumentBuilders used in Camel I have trivial route that processes XMLs. When the XML is route and has no content (like empty file processed by {{<from uri="file:xxx">}}) I'm getting:{noformat}[Fatal Error] :-1:-1: Premature end of file.{noformat}printed directly on STDOUT.If there was a way to make {{org.apache.camel.converter.jaxp.XmlConverter}} call {{javax.xml.parsers.DocumentBuilder#setErrorHandler}} (for example delegating to logger), it'd be great.
CAMEL-12667 camel-spring-boot - Turn of options with @NestedConfigurationProperty in generated auto configuration source See my last comment on CAMEL-10197 Improvement camel-spring-boot - Turn of options with @NestedConfigurationProperty in generated auto configuration source See my last comment on CAMEL-10197
CAMEL-12661 Spring Boot auto configuration - NestedConfigurationProperty should only be for known Camel types Currently we generte this for a range of complex objects that may appear as POJOs but they are likely not, so you cannot configure them, eg they dont have setters and a default no-arg constructor etc.We have a blacklist today, but instead we should flip it to be a whitelist for known Camel types that can be configured like the SSLContextParameters and others. Improvement Spring Boot auto configuration - NestedConfigurationProperty should only be for known Camel types Currently we generte this for a range of complex objects that may appear as POJOs but they are likely not, so you cannot configure them, eg they dont have setters and a default no-arg constructor etc.We have a blacklist today, but instead we should flip it to be a whitelist for known Camel types that can be configured like the SSLContextParameters and others.
CAMEL-12660 Spring Boot configuration documentation should be polished Some of the options have descriptions with html tags for advanced javadoc. We should remove those to make it plain then the spring tooling that generates the metadata json file will be improved for tooling, and also our own online ascii docsFor examplehttps://github.com/apache/camel/blob/camel-12644/components/camel-spring-boot/src/main/docs/spring-boot.adoc#spring-boot-auto-configuration Improvement Spring Boot configuration documentation should be polished Some of the options have descriptions with html tags for advanced javadoc. We should remove those to make it plain then the spring tooling that generates the metadata json file will be improved for tooling, and also our own online ascii docsFor examplehttps://github.com/apache/camel/blob/camel-12644/components/camel-spring-boot/src/main/docs/spring-boot.adoc#spring-boot-auto-configuration
CAMEL-12650 Log messages that do not match with their method function There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place) which may cause confusion when operators are reading the log messages.  Here is a list of the related logging statements:  *1. log.debug("Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}" + ", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}";*      *Callsites:* * org.apache.camel.component.file.remote.*{color:#205081}FTPEndpoint{color}*.createRemoteFileOperations, * org.apache.camel.component.file.remote.*{color:#205081}FtpsEndpoint{color}*.createRemoteFileOperations, *2. LOG.debug("Adding to producer service pool with key: {} for producer: {}", endpoint, answer);*      *Callsites:* * org.apache.camel.impl.*{color:#205081}ProducerCache{color}*.doGetProducer, * org.apache.camel.impl.*{color:#205081}ConsumerCache{color}*.doGetPollingConsumer *3. LOG.debug("Trying to update the post {} with id {}", exchange.getIn().getBody(), this.getConfiguration().getId());*      *Callsites:* * org.apache.camel.component.wordpress.producer.{color:#205081}*WordpressPostProducer*.{color}processUpdate, * org.apache.camel.component.wordpress.producer.{color:#205081}*WordpressUserProducer*.{color}processUpdate *4. LOG.error("Create a specific pod require specify a namespace name");*      *Callsites:* * org.apache.camel.component.kubernetes.pods.KubernetesPodsProducer.*{color:#205081}doCreatePod{color},* * org.apache.camel.component.kubernetes.deployments.KubernetesDeploymentsProducer.*{color:#205081}doCreateDeployment{color}* *5. LOG.debug("Channel closed but no message received from address: {}", producer.getConfiguration().getAddress());*      *Callsites:* * org.apache.camel.component.netty.handlers.ClientChannelHandler.*{color:#205081}channelClosed{color},* * org.apache.camel.component.netty4.handlers.ClientChannelHandler.*{color:#205081}channelInactive{color}*  *6. LOG.trace("Delete Broker command returned the error code {}", ase.getErrorCode());*      *Callsites:* * org.apache.camel.component.aws.mq.MQProducer.*{color:#205081}rebootBroker{color}*, * org.apache.camel.component.aws.mq.MQProducer.*{color:#205081}deleteBroker{color}* *7. LOG.debug("Stopping JmsReplyManager: {} from processing replies from: {}", replyManager, endpoint.getReplyTo() != null ? endpoint.getReplyTo() : "temporary queue");*      *Callsites:* * org.apache.camel.component.rabbitmq.*{color:#205081}RabbitMQProducer{color}*.unInitReplyManager, * org.apache.camel.component.jms.*{color:#205081}JmsProducer{color}*.unInitReplyManager *8. logger.warn("Error scanning JAR for custom Camel components", e);*      *Callsites:* * org.apache.camel.catalog.nexus.*{color:#205081}ComponentCatalogNexusRepository{color}*.addCustomCamelComponentsFromArtifact, * org.apache.camel.catalog.nexus.*{color:#205081}ConnectorCatalogNexusRepository.{color}*addCustomCamelConnectorFromArtifact *9. LOGGER.debug("Subscribe to events for queue: {}", resourceName);*      *Callsites:* * org.apache.camel.component.atomix.client.value.{color:#205081}*AtomixValueConsumer*{color}.doStart, * org.apache.camel.component.atomix.client.queue.*{color:#205081}AtomixQueueConsumer{color}*.doStart *10. LOG.warn("TimeoutEvent received at Sip Subscription Listener");*      *Callsites:* * org.apache.camel.component.sip.listener.{color:#205081}*SipSubscriptionListener*{color}.processTimeout, * org.apache.camel.component.sip.listener.{color:#205081}*SipPresenceAgentListener*{color}.processTimeout *11. LOGGER.debug("Executing Docker Kill Container Request");*      *Callsites:* * org.apache.camel.component.docker.producer.DockerProducer.execute{color:#205081}*StopContainer*{color}Request, * org.apache.camel.component.docker.producer.DockerProducer.execute{color:#205081}*KillContainer*{color}Request *12. LOG.trace("Rename Droplet {} : [{}] ", dropletId, action);*      *Callsites:* * org.apache.camel.component.digitalocean.producer.DigitalOceanDropletsProducer.change.*{color:#205081}DropletKernel{color}*, * org.apache.camel.component.digitalocean.producer.DigitalOceanDropletsProducer.{color:#205081}*renameDroplet*{color}   Improvement Log messages that do not match with their method function There are some possible copy and paste errors in the log messages (The logging statement was copied from an old place to a new place, but the message wasn't changed to adapt to the function of the new place) which may cause confusion when operators are reading the log messages.  Here is a list of the related logging statements:  *1. log.debug("Created FTPClient [connectTimeout: {}, soTimeout: {}, dataTimeout: {}, bufferSize: {}" + ", receiveDataSocketBufferSize: {}, sendDataSocketBufferSize: {}]: {}";*      *Callsites:* * org.apache.camel.component.file.remote.*{color:#205081}FTPEndpoint{color}*.createRemoteFileOperations, * org.apache.camel.component.file.remote.*{color:#205081}FtpsEndpoint{color}*.createRemoteFileOperations, *2. LOG.debug("Adding to producer service pool with key: {} for producer: {}", endpoint, answer);*      *Callsites:* * org.apache.camel.impl.*{color:#205081}ProducerCache{color}*.doGetProducer, * org.apache.camel.impl.*{color:#205081}ConsumerCache{color}*.doGetPollingConsumer *3. LOG.debug("Trying to update the post {} with id {}", exchange.getIn().getBody(), this.getConfiguration().getId());*      *Callsites:* * org.apache.camel.component.wordpress.producer.{color:#205081}*WordpressPostProducer*.{color}processUpdate, * org.apache.camel.component.wordpress.producer.{color:#205081}*WordpressUserProducer*.{color}processUpdate *4. LOG.error("Create a specific pod require specify a namespace name");*      *Callsites:* * org.apache.camel.component.kubernetes.pods.KubernetesPodsProducer.*{color:#205081}doCreatePod{color},* * org.apache.camel.component.kubernetes.deployments.KubernetesDeploymentsProducer.*{color:#205081}doCreateDeployment{color}* *5. LOG.debug("Channel closed but no message received from address: {}", producer.getConfiguration().getAddress());*      *Callsites:* * org.apache.camel.component.netty.handlers.ClientChannelHandler.*{color:#205081}channelClosed{color},* * org.apache.camel.component.netty4.handlers.ClientChannelHandler.*{color:#205081}channelInactive{color}*  *6. LOG.trace("Delete Broker command returned the error code {}", ase.getErrorCode());*      *Callsites:* * org.apache.camel.component.aws.mq.MQProducer.*{color:#205081}rebootBroker{color}*, * org.apache.camel.component.aws.mq.MQProducer.*{color:#205081}deleteBroker{color}* *7. LOG.debug("Stopping JmsReplyManager: {} from processing replies from: {}", replyManager, endpoint.getReplyTo() != null ? endpoint.getReplyTo() : "temporary queue");*      *Callsites:* * org.apache.camel.component.rabbitmq.*{color:#205081}RabbitMQProducer{color}*.unInitReplyManager, * org.apache.camel.component.jms.*{color:#205081}JmsProducer{color}*.unInitReplyManager *8. logger.warn("Error scanning JAR for custom Camel components", e);*      *Callsites:* * org.apache.camel.catalog.nexus.*{color:#205081}ComponentCatalogNexusRepository{color}*.addCustomCamelComponentsFromArtifact, * org.apache.camel.catalog.nexus.*{color:#205081}ConnectorCatalogNexusRepository.{color}*addCustomCamelConnectorFromArtifact *9. LOGGER.debug("Subscribe to events for queue: {}", resourceName);*      *Callsites:* * org.apache.camel.component.atomix.client.value.{color:#205081}*AtomixValueConsumer*{color}.doStart, * org.apache.camel.component.atomix.client.queue.*{color:#205081}AtomixQueueConsumer{color}*.doStart *10. LOG.warn("TimeoutEvent received at Sip Subscription Listener");*      *Callsites:* * org.apache.camel.component.sip.listener.{color:#205081}*SipSubscriptionListener*{color}.processTimeout, * org.apache.camel.component.sip.listener.{color:#205081}*SipPresenceAgentListener*{color}.processTimeout *11. LOGGER.debug("Executing Docker Kill Container Request");*      *Callsites:* * org.apache.camel.component.docker.producer.DockerProducer.execute{color:#205081}*StopContainer*{color}Request, * org.apache.camel.component.docker.producer.DockerProducer.execute{color:#205081}*KillContainer*{color}Request *12. LOG.trace("Rename Droplet {} : [{}] ", dropletId, action);*      *Callsites:* * org.apache.camel.component.digitalocean.producer.DigitalOceanDropletsProducer.change.*{color:#205081}DropletKernel{color}*, * org.apache.camel.component.digitalocean.producer.DigitalOceanDropletsProducer.{color:#205081}*renameDroplet*{color}  
CAMEL-12646 camel-spring-boot - Auto configuration of complex types should be more tooling friendly If you have complex types like javax.sql.DataSource and wants to allow to configure this via spring boot autoconfiguration in application.properties - then the generated spring boot classes with all the options will use getter/setter of types javax.sql.DataSource. That seems correct, but the spring-boot tooling itself (that generates additional json file) will skip those as it only support primitives and string types.So we may need to fool, and generate the getter/setter as String type as you use it for configuring it as a bean reference by id anyway, egcamel.component.jdbc.data-source = #myDataSourceWe can add in the javadoc that the type is javax.sql.DataSource. Improvement camel-spring-boot - Auto configuration of complex types should be more tooling friendly If you have complex types like javax.sql.DataSource and wants to allow to configure this via spring boot autoconfiguration in application.properties - then the generated spring boot classes with all the options will use getter/setter of types javax.sql.DataSource. That seems correct, but the spring-boot tooling itself (that generates additional json file) will skip those as it only support primitives and string types.So we may need to fool, and generate the getter/setter as String type as you use it for configuring it as a bean reference by id anyway, egcamel.component.jdbc.data-source = #myDataSourceWe can add in the javadoc that the type is javax.sql.DataSource.
CAMEL-12645 camel-jdbc - Allow to use default datasource from spring-boot Like we do in camel-sql where we lookup and use default data source if there is none configured and there is only 1. Then camel-sql and camel-jdbc is a bit similar and easier to use, such as when using spring boot. Improvement camel-jdbc - Allow to use default datasource from spring-boot Like we do in camel-sql where we lookup and use default data source if there is none configured and there is only 1. Then camel-sql and camel-jdbc is a bit similar and easier to use, such as when using spring boot.
CAMEL-12644 Generate documentation for Spring Boot starters We could add auto-configuration properties section to the component documentation something like that can be seen in the [spring-boot documentation|https://docs.spring.io/spring-boot/docs/1.5.14.RELEASE/reference/htmlsingle/#common-application-properties] to help the users know which properties are available in application.[properties|yaml] under what keys. New Feature Generate documentation for Spring Boot starters We could add auto-configuration properties section to the component documentation something like that can be seen in the [spring-boot documentation|https://docs.spring.io/spring-boot/docs/1.5.14.RELEASE/reference/htmlsingle/#common-application-properties] to help the users know which properties are available in application.[properties|yaml] under what keys.
CAMEL-12643 camel-rabbitmq - Inadequate information for handling catch clauses There are some situations that different exception types are caught, but the handling of those exceptions cannot show the differences between those types. Here are the code snippets which have this problem:{code}org.apache.camel.component.rabbitmq.*RabbitConsumer*.handleShutdownSignal, *Line 271*catch (IOException | TimeoutException e){   log.warn("Unable to obtain a RabbitMQ channel. Will try again");     ...      }{code}It may cause confusions to the person who is reading the log, the person can not know what exception happened here and cannot distinguish if the exception type is IOException or TimeoutException. Simply adding a full stack trace is able to improve it.  Improvement camel-rabbitmq - Inadequate information for handling catch clauses There are some situations that different exception types are caught, but the handling of those exceptions cannot show the differences between those types. Here are the code snippets which have this problem:{code}org.apache.camel.component.rabbitmq.*RabbitConsumer*.handleShutdownSignal, *Line 271*catch (IOException | TimeoutException e){   log.warn("Unable to obtain a RabbitMQ channel. Will try again");     ...      }{code}It may cause confusions to the person who is reading the log, the person can not know what exception happened here and cannot distinguish if the exception type is IOException or TimeoutException. Simply adding a full stack trace is able to improve it. 
CAMEL-12640 tooling - Provide character position in validation result currently the line start and line end are provided but not the character position Improvement tooling - Provide character position in validation result currently the line start and line end are provided but not the character position
CAMEL-12639 tooling - Provide line numbers for CamelEndpointDetails for java dsl currently it is provided for xml dsl but not for java dsl Improvement tooling - Provide line numbers for CamelEndpointDetails for java dsl currently it is provided for xml dsl but not for java dsl
CAMEL-12636 camel-jmx - Should use a thread pool for routing notifications The handleNotification event should be a simple noop operation. But if we route in Camel then it may do many things and call external systems etc. So ideally we should have a little thread pool to process these events - eg a like a wire tap. Improvement camel-jmx - Should use a thread pool for routing notifications The handleNotification event should be a simple noop operation. But if we route in Camel then it may do many things and call external systems etc. So ideally we should have a little thread pool to process these events - eg a like a wire tap.
CAMEL-12633 camel-jmx - Add support for monitoring boolean attribute changes We can monitor counters, gauges and string values. But its not possible to monitor when a boolean value changes.You cannot use the string monitor as JMX does not support that :(So we need to add out own code to handle booleans Improvement camel-jmx - Add support for monitoring boolean attribute changes We can monitor counters, gauges and string values. But its not possible to monitor when a boolean value changes.You cannot use the string monitor as JMX does not support that :(So we need to add out own code to handle booleans
CAMEL-12628 [doc] camel-hawtdb documentation should be updated The documentation for [camel-hawtdb |http://camel.apache.org/hawtdb.html]says:{quote}The [HawtDB|http://hawtdb.fusesource.org/] project is being deprecated and replaced by [leveldb|https://code.google.com/p/leveldb/] as the lightweight and embedable key value database. To make using leveldb easy there is a [leveldbjni|https://github.com/fusesource/leveldbjni] project for that. The Apache ActiveMQ project is planning on using leveldb as their primary file based message store in the future, to replace kahadb.{quote}The last part about ActiveMQ replacing KahaDB with LevelDB is out of date. LevelDB has been deprecated on ActiveMQ and KahaDB remains the standard persistence adapter. The top level warning on http://activemq.apache.org/leveldb-store.html. So I suggest to remove that sentence at minimum.Also, I am not sure do we still recommend LevelDB as an alternative to hawtdb or would there be even better options these days?    Improvement [doc] camel-hawtdb documentation should be updated The documentation for [camel-hawtdb |http://camel.apache.org/hawtdb.html]says:{quote}The [HawtDB|http://hawtdb.fusesource.org/] project is being deprecated and replaced by [leveldb|https://code.google.com/p/leveldb/] as the lightweight and embedable key value database. To make using leveldb easy there is a [leveldbjni|https://github.com/fusesource/leveldbjni] project for that. The Apache ActiveMQ project is planning on using leveldb as their primary file based message store in the future, to replace kahadb.{quote}The last part about ActiveMQ replacing KahaDB with LevelDB is out of date. LevelDB has been deprecated on ActiveMQ and KahaDB remains the standard persistence adapter. The top level warning on http://activemq.apache.org/leveldb-store.html. So I suggest to remove that sentence at minimum.Also, I am not sure do we still recommend LevelDB as an alternative to hawtdb or would there be even better options these days?   
CAMEL-12627 Use Spring Boot autoconfigure-processor to optimize auto-configurations As explained in [the its reference documentation|https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc#autoconfigure-module], Spring Boot provides a {{spring-boot-autoconfigure-processor}}.This should be added as an optional dependency to each module that contains AutoConfiguration classes (and the `spring.factories` file declaring them).Once configured, this annotation processor will generate metadata at compile time and will help Spring Boot process those auto-configurations without loading the actual classes in some cases.In this project, the several modules are declaring auto-configurations but are not using this annotation processor. Could you add it to the build files?{code:xml}<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-autoconfigure-processor</artifactId> <optional>true</optional></dependency>{code}Once added, this should generate a {{spring-autoconfigure-metadata.properties}} file in the {{target/classes/META-INF}} folder of earch module. Improvement Use Spring Boot autoconfigure-processor to optimize auto-configurations As explained in [the its reference documentation|https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-docs/src/main/asciidoc/spring-boot-features.adoc#autoconfigure-module], Spring Boot provides a {{spring-boot-autoconfigure-processor}}.This should be added as an optional dependency to each module that contains AutoConfiguration classes (and the `spring.factories` file declaring them).Once configured, this annotation processor will generate metadata at compile time and will help Spring Boot process those auto-configurations without loading the actual classes in some cases.In this project, the several modules are declaring auto-configurations but are not using this annotation processor. Could you add it to the build files?{code:xml}<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-autoconfigure-processor</artifactId> <optional>true</optional></dependency>{code}Once added, this should generate a {{spring-autoconfigure-metadata.properties}} file in the {{target/classes/META-INF}} folder of earch module.
CAMEL-12609 DefaultExchangeFormatter: Make it easy to override the header and property formatting  To omit certain headers (or mask their values) in ExchangeFormatter, one can write a custom implementation. In [DefaultExchangeFormatter|[https://github.com/apache/camel/blob/apache-master/camel-core/src/main/java/org/apache/camel/processor/DefaultExchangeFormatter.java],] ... it would be nice if the header-formatting (maybe the Property formatting) was done as separate methods that we could over-ride, while keeping the rest of the functionality.Not sure if it would be acceptable to do this without also changing the ExchangeFormatter interface to add such methods. Improvement DefaultExchangeFormatter: Make it easy to override the header and property formatting  To omit certain headers (or mask their values) in ExchangeFormatter, one can write a custom implementation. In [DefaultExchangeFormatter|[https://github.com/apache/camel/blob/apache-master/camel-core/src/main/java/org/apache/camel/processor/DefaultExchangeFormatter.java],] ... it would be nice if the header-formatting (maybe the Property formatting) was done as separate methods that we could over-ride, while keeping the rest of the functionality.Not sure if it would be acceptable to do this without also changing the ExchangeFormatter interface to add such methods.
CAMEL-12597 camel-servlet - Add whitelist for accepted file types Reported on user forumhttp://camel.465427.n5.nabble.com/Report-Issues-Apache-Camel-Servlet-Component-td5820710.html Improvement camel-servlet - Add whitelist for accepted file types Reported on user forumhttp://camel.465427.n5.nabble.com/Report-Issues-Apache-Camel-Servlet-Component-td5820710.html
CAMEL-12567 camel-stream - Add support for configuring timeout for HTTP urls So you can set connect and read timeouts. New Feature camel-stream - Add support for configuring timeout for HTTP urls So you can set connect and read timeouts.
CAMEL-12566 camel-stream - Add support for HTTP headers Asked on user forumhttp://camel.465427.n5.nabble.com/url-http-streaming-issue-tp5820467.html New Feature camel-stream - Add support for HTTP headers Asked on user forumhttp://camel.465427.n5.nabble.com/url-http-streaming-issue-tp5820467.html
CAMEL-12553 Using cxf new LoggingFeature CXF deprecated the old LoggingFeature, we need to switch to [new one|http://cxf.apache.org/docs/message-logging.html]. Improvement Using cxf new LoggingFeature CXF deprecated the old LoggingFeature, we need to switch to [new one|http://cxf.apache.org/docs/message-logging.html].
CAMEL-12546 rest-dsl - Allow to configure rest configuration via spring boot auto configuration There are some global configurations you can configure on restConfiguration. We should make it possible to configure these via spring boot auto configuration, eg application.properties etc. Improvement rest-dsl - Allow to configure rest configuration via spring boot auto configuration There are some global configurations you can configure on restConfiguration. We should make it possible to configure these via spring boot auto configuration, eg application.properties etc.
CAMEL-12533 rest-dsl - Should check for required parameters generally See SO[https://stackoverflow.com/questions/50489713/camel-rest-dsl-required-param-ignored]There is AFAIR a little bit of required validation. But we could might as well do this if the user has specified those in the rest-dsl. Currently we rely a bit on the chosen http component to do its own validation. But since we have the rest-dsl contract at hand in the rest-dsl we should let camel-core figure this out. Improvement rest-dsl - Should check for required parameters generally See SO[https://stackoverflow.com/questions/50489713/camel-rest-dsl-required-param-ignored]There is AFAIR a little bit of required validation. But we could might as well do this if the user has specified those in the rest-dsl. Currently we rely a bit on the chosen http component to do its own validation. But since we have the rest-dsl contract at hand in the rest-dsl we should let camel-core figure this out.
CAMEL-12529 Dynamic Router implementation behavior inconsistent with Dynamic Router EIP specification Currently, the Dynamic Router component of camel-core repeatedly routes messages back through the dynamic router, as indicated in the documentation. However, when examining the Dynamic Router EIP specification at [http://www.enterpriseintegrationpatterns.com/patterns/messaging/DynamicRouter.html], we can see that this behavior is not consistent with the specification.The description is:{quote}Use a Dynamic Router, a Router that can self-configure based on special configuration messages from participating destinations.Besides the usual input and output channels the Dynamic Router uses an additional control channel. During system start-up, each potential recipient sends a special message to the Dynamic Router on this control channel, announcing its presence and listing the conditions under which it can handle a message. The Dynamic Router stores the 'preferences' for each participant in a rule base. When a message arrives, the Dynamic Router evaluates all rules and routes the message to the recipient whose rules are fulfilled. This allows for efficient, predictive routing without the maintenance dependency of the Dynamic Router on each potential recipient.{quote}Since the documentation specifies the re-routing nature of the dynamic router quite clearly, this is obviously not an unintended side-effect or consequence but, I believe, a misunderstanding of the EIP itself.  It appears that there _might_ be a point of confusion with the control channel that connects the potential endpoints to the rule base. This is not for re-routing of the messages, but for the potential endpoints to register rules with the dynamic router. While I am not certain how this should (or would) be implemented within Camel, the current behavior is not quite consistent with the description of the EIP Improvement Dynamic Router implementation behavior inconsistent with Dynamic Router EIP specification Currently, the Dynamic Router component of camel-core repeatedly routes messages back through the dynamic router, as indicated in the documentation. However, when examining the Dynamic Router EIP specification at [http://www.enterpriseintegrationpatterns.com/patterns/messaging/DynamicRouter.html], we can see that this behavior is not consistent with the specification.The description is:{quote}Use a Dynamic Router, a Router that can self-configure based on special configuration messages from participating destinations.Besides the usual input and output channels the Dynamic Router uses an additional control channel. During system start-up, each potential recipient sends a special message to the Dynamic Router on this control channel, announcing its presence and listing the conditions under which it can handle a message. The Dynamic Router stores the 'preferences' for each participant in a rule base. When a message arrives, the Dynamic Router evaluates all rules and routes the message to the recipient whose rules are fulfilled. This allows for efficient, predictive routing without the maintenance dependency of the Dynamic Router on each potential recipient.{quote}Since the documentation specifies the re-routing nature of the dynamic router quite clearly, this is obviously not an unintended side-effect or consequence but, I believe, a misunderstanding of the EIP itself.  It appears that there _might_ be a point of confusion with the control channel that connects the potential endpoints to the rule base. This is not for re-routing of the messages, but for the potential endpoints to register rules with the dynamic router. While I am not certain how this should (or would) be implemented within Camel, the current behavior is not quite consistent with the description of the EIP
CAMEL-12520 FluentProducerTemplate.withExchange() does not seem to send exchange When I use the following simple but complete code example:{code:java}public static void main(String[] args) throws Exception {    CamelContext camelContext = new DefaultCamelContext();    camelContext.start();    camelContext.addRoutes(new RouteBuilder() {        @Override        public void configure() {            from("direct-vm:start").process(exchange -> {                String incoming = exchange.getIn().getBody(String.class);                exchange.getIn().setBody("Message received: " + incoming, String.class);            });        }    });    Exchange exchange = ExchangeBuilder.anExchange(camelContext)            .withBody("Hello!")            .withPattern(ExchangePattern.InOut)            .build();    System.out.println(            camelContext.createFluentProducerTemplate()            .withExchange(exchange)            .to("direct-vm:start")            .request(String.class)    );}{code}The message body appears to be missing, as indicated in the program output:{code:java}Message received: null{code}I have tried this with java 1.8 and 1.9, and with camel 2.19.2 and 2.21.1, and both camel versions exhibit the same behavior when run with both java versions. Improvement FluentProducerTemplate.withExchange() does not seem to send exchange When I use the following simple but complete code example:{code:java}public static void main(String[] args) throws Exception {    CamelContext camelContext = new DefaultCamelContext();    camelContext.start();    camelContext.addRoutes(new RouteBuilder() {        @Override        public void configure() {            from("direct-vm:start").process(exchange -> {                String incoming = exchange.getIn().getBody(String.class);                exchange.getIn().setBody("Message received: " + incoming, String.class);            });        }    });    Exchange exchange = ExchangeBuilder.anExchange(camelContext)            .withBody("Hello!")            .withPattern(ExchangePattern.InOut)            .build();    System.out.println(            camelContext.createFluentProducerTemplate()            .withExchange(exchange)            .to("direct-vm:start")            .request(String.class)    );}{code}The message body appears to be missing, as indicated in the program output:{code:java}Message received: null{code}I have tried this with java 1.8 and 1.9, and with camel 2.19.2 and 2.21.1, and both camel versions exhibit the same behavior when run with both java versions.
CAMEL-12513 Camel breadcrumb - Consider turning it off by default This was added many years ago with the breadcrumbId header. But today there is standards with opentracing / zipkin etc.So ideally we should turn this off by default, and then point people to these other standards.[http://camel.apache.org/mdc-logging.html]  Improvement Camel breadcrumb - Consider turning it off by default This was added many years ago with the breadcrumbId header. But today there is standards with opentracing / zipkin etc.So ideally we should turn this off by default, and then point people to these other standards.[http://camel.apache.org/mdc-logging.html] 
CAMEL-12503 Kafka component should be able to propagate camel headers to kafka Since 0.11.0 Kafka support headers, and it would be awesome to have such feature available also in camel component. New Feature Kafka component should be able to propagate camel headers to kafka Since 0.11.0 Kafka support headers, and it would be awesome to have such feature available also in camel component.
CAMEL-12486 Placeholders are not resolved in Simple language while using resource: prefix This behavior was found in question https://stackoverflow.com/questions/50063874/load-camels-body-dynamically-depending-on-headerThis is because expression with prefix *resource* is resolved in LanguageSupport#loadResource before property placeholders are resolved. This is reasonable, as placeholders are resolved in expression loaded from file. But it prevents from dynamic resource loading.It would be nice to allow property resolution in resource in this way{code:java}.transform().simple("resource:classpath:${header.myFileName}"){code}I would expect this behavior: # Resolve placeholders in expression (now missing) # Load String from resource as new expression (exists) # Resolve placeholders in new expression (exists)I have tried to create patch for *SimpleLanguage*, but I failed. Attaching patch to *SimpleResourceTest* with expected behavior based on master. Wish Placeholders are not resolved in Simple language while using resource: prefix This behavior was found in question https://stackoverflow.com/questions/50063874/load-camels-body-dynamically-depending-on-headerThis is because expression with prefix *resource* is resolved in LanguageSupport#loadResource before property placeholders are resolved. This is reasonable, as placeholders are resolved in expression loaded from file. But it prevents from dynamic resource loading.It would be nice to allow property resolution in resource in this way{code:java}.transform().simple("resource:classpath:${header.myFileName}"){code}I would expect this behavior: # Resolve placeholders in expression (now missing) # Load String from resource as new expression (exists) # Resolve placeholders in new expression (exists)I have tried to create patch for *SimpleLanguage*, but I failed. Attaching patch to *SimpleResourceTest* with expected behavior based on master.
CAMEL-12462 toD with HTTP endpoints - Optimise dynamic query to leverage HTTP_QUERY header We can consider for some HTTP components that support dynamic parts of their endpoints from Camel headers such as HTTP_QUERY and others.We can then in toD detect those components and then build a processor chain that does # setHeader - set dynamic header HTTP_QUERY # toD - call the endpoint with a more static uriThis optimises to reuse the toD with more static uris, especially if you hit the same host for each toD and its only the query parameters that are dynamic.Today developers would need to use setHeader and to combo to do this, instead of a single toD.The trick is to separate the query parameters and the endpoint parameters and only set query parameters in the setHeader, and the endpoint parameters in toD. Improvement toD with HTTP endpoints - Optimise dynamic query to leverage HTTP_QUERY header We can consider for some HTTP components that support dynamic parts of their endpoints from Camel headers such as HTTP_QUERY and others.We can then in toD detect those components and then build a processor chain that does # setHeader - set dynamic header HTTP_QUERY # toD - call the endpoint with a more static uriThis optimises to reuse the toD with more static uris, especially if you hit the same host for each toD and its only the query parameters that are dynamic.Today developers would need to use setHeader and to combo to do this, instead of a single toD.The trick is to separate the query parameters and the endpoint parameters and only set query parameters in the setHeader, and the endpoint parameters in toD.
CAMEL-12458 camel-twitter - Should support extended mode by default So we can receive > 140 chars. See this PRhttps://github.com/apache/camel/pull/2292 Improvement camel-twitter - Should support extended mode by default So we can receive > 140 chars. See this PRhttps://github.com/apache/camel/pull/2292
CAMEL-12450 Ability to group processors and gather related metrics  It would be nice if we can add some marker inside a route to group logical processors together and gather related metrics:As example:{code}from(...)    .step("step-id")        .process(...)        .to(...)    .end(){code}Then we need to have some custom events like:- StepStartedEvent- StepCompletedEvent- StepFailedEventThe people may be able to determine how long a logical step has last, if it has a failure, the number of exchanges processed so far and so on New Feature Ability to group processors and gather related metrics  It would be nice if we can add some marker inside a route to group logical processors together and gather related metrics:As example:{code}from(...)    .step("step-id")        .process(...)        .to(...)    .end(){code}Then we need to have some custom events like:- StepStartedEvent- StepCompletedEvent- StepFailedEventThe people may be able to determine how long a logical step has last, if it has a failure, the number of exchanges processed so far and so on
CAMEL-12447 camel-jms - Exclude spring-messaging JAR This JAR is not used by camel-jms and we should exclude this out of the box. Task camel-jms - Exclude spring-messaging JAR This JAR is not used by camel-jms and we should exclude this out of the box.
CAMEL-12446 Splitter - Make it easier to turn off propgate exception We should make it easier to configure splitter to not propgate exceptions from sub messages to the result exception (use original out of the box).  Improvement Splitter - Make it easier to turn off propgate exception We should make it easier to configure splitter to not propgate exceptions from sub messages to the result exception (use original out of the box). 
CAMEL-12444 XML Validator - Improve DTD handling The DTD handling should be improved Improvement XML Validator - Improve DTD handling The DTD handling should be improved
CAMEL-12442 rest-dsl - Rest producer should use RestConfiguration The RestConfiguration have additional configuration for component level, endpoint level which you may want to allow to configure for the rest-dsl producer side.Currently this is only supported on the consumer side.To introduce this, requires an API change in the RestProducerFactory method. Improvement rest-dsl - Rest producer should use RestConfiguration The RestConfiguration have additional configuration for component level, endpoint level which you may want to allow to configure for the rest-dsl producer side.Currently this is only supported on the consumer side.To introduce this, requires an API change in the RestProducerFactory method.
CAMEL-12439 FailedToCreateRouteException should mask sensitive information in uris If you misconfigure routes etc and they fail being created you get an exception FailedToCreateRouteException that output parts of the route where the problem is, and in there, we should mask sensitive details such as passwords. Improvement FailedToCreateRouteException should mask sensitive information in uris If you misconfigure routes etc and they fail being created you get an exception FailedToCreateRouteException that output parts of the route where the problem is, and in there, we should mask sensitive details such as passwords.
CAMEL-12438 camel-netty4 - Add timeout support for SPI correlation manager We should make it easier to handle timeouts for responses that do not come back. Improvement camel-netty4 - Add timeout support for SPI correlation manager We should make it easier to handle timeouts for responses that do not come back.
CAMEL-12433 Spring Boot 2 - Fix the  CamelInfinispanTest test The test in itests/camel-itest-spring-boot for  CamelInfinispanTest fails. We should get that test fixed. Sub-task Spring Boot 2 - Fix the  CamelInfinispanTest test The test in itests/camel-itest-spring-boot for  CamelInfinispanTest fails. We should get that test fixed.
CAMEL-12429 Avoid restlet response header warnings by using Restlet HeaderUtils Camel still prints warnings such as this: {code}Addition of the standard response header "ETag" is not allowed. Please use the equivalent property in the Restlet API.{code}However, these headers are actually easy to set by using Restlet's own HeaderUtils, specifically via: {code}HeaderUtils.copyResponseTransportHeaders(standardHeaders, response);HeaderUtils.extractEntityHeaders(standardHeaders, response.getEntity());{code} Improvement Avoid restlet response header warnings by using Restlet HeaderUtils Camel still prints warnings such as this: {code}Addition of the standard response header "ETag" is not allowed. Please use the equivalent property in the Restlet API.{code}However, these headers are actually easy to set by using Restlet's own HeaderUtils, specifically via: {code}HeaderUtils.copyResponseTransportHeaders(standardHeaders, response);HeaderUtils.extractEntityHeaders(standardHeaders, response.getEntity());{code}
CAMEL-12427 camel-netty4 - Add SPI to plugin custom correlation state for request/reply in producer Currently you would need to extend camel-netty4 and override NettyProducer where you would override - getState- removeState- putStatemethods where you have your own correlation id mapping so you can map the multiplexed requesy/replies to the correct Camel Exchange / AsyncCallback pair.We can likely add some new SPI interface to camel-netty4 where we can make this easier for 3rd party to plugin their custom logic. Improvement camel-netty4 - Add SPI to plugin custom correlation state for request/reply in producer Currently you would need to extend camel-netty4 and override NettyProducer where you would override - getState- removeState- putStatemethods where you have your own correlation id mapping so you can map the multiplexed requesy/replies to the correct Camel Exchange / AsyncCallback pair.We can likely add some new SPI interface to camel-netty4 where we can make this easier for 3rd party to plugin their custom logic.
CAMEL-12417 Camel documentation I am rewriting the doc to fit github.[https://github.com/jyterrien/camel/blob/master/readme.adoc]I replaced .md files with .adocI started correcting the links in readme.adoc contributing.adocand in camel-core. (in alphabetic order from bean-component to file-component)I did not find, on github, docs likehttps://camel.apache.org/data-format.html[https://camel.apache.org/enterprise-integration-patterns.html] in every page I've changed the definition= title pageI'e added:toc: leftand I corrected the links <<doc,DOC>> link:doc.adoc[Doc]I also when I found the target corrected the relative links like :=== See Also* link:file-language.adoc[File Language]* link:../../../../components/camel-ftp/src/main/docs/ftp-component.adoc[FTP]* Polling Consumeras soon as I corrected all camel-core I think to make a pull-request Improvement Camel documentation I am rewriting the doc to fit github.[https://github.com/jyterrien/camel/blob/master/readme.adoc]I replaced .md files with .adocI started correcting the links in readme.adoc contributing.adocand in camel-core. (in alphabetic order from bean-component to file-component)I did not find, on github, docs likehttps://camel.apache.org/data-format.html[https://camel.apache.org/enterprise-integration-patterns.html] in every page I've changed the definition= title pageI'e added:toc: leftand I corrected the links <<doc,DOC>> link:doc.adoc[Doc]I also when I found the target corrected the relative links like :=== See Also* link:file-language.adoc[File Language]* link:../../../../components/camel-ftp/src/main/docs/ftp-component.adoc[FTP]* Polling Consumeras soon as I corrected all camel-core I think to make a pull-request
CAMEL-12413 Camel Tracer - Improve default formatting output If you turn on tracing[http://camel.apache.org/tracer]Then the default logging output is a bit dense. We could look at improve the formatting so the details is logged more nicely.Some components has a lot of details stored in headers/exchange properties and whatnot that makes the output very verbose, such as camel-cxf.  Improvement Camel Tracer - Improve default formatting output If you turn on tracing[http://camel.apache.org/tracer]Then the default logging output is a bit dense. We could look at improve the formatting so the details is logged more nicely.Some components has a lot of details stored in headers/exchange properties and whatnot that makes the output very verbose, such as camel-cxf. 
CAMEL-12394 Camel Bindy: marshal doesn't quote headers Dear all,When marshaling, Bindy doesn't quote headers in CSV files. This is problematic in the case where headers contain the separator character. When unmarshaling this is no issue, as `skipFirstLine=true`.Unfortunately, changing the header is not an option in my case.Please find attached: * A sample CsvRecord-annotated bean `WickedCsv.java`, and * a JUnit test `WickedCsvTest.java`which allow to reproduce the issue.The assertion error occurs in the last line of the `test()` method:  `assertEquals(csv.trim(), result.trim())`I have attached a patch for BindyCsvFactory (`BindyCsvFactory.patch`), which fixes the issue. I copied and adjusted the lines according to the quote handling in `org.apache.camel.dataformat.bindy.BindyCsvFactory#bind`.Would you please check?Thank you.Kind regards,Clemens Improvement Camel Bindy: marshal doesn't quote headers Dear all,When marshaling, Bindy doesn't quote headers in CSV files. This is problematic in the case where headers contain the separator character. When unmarshaling this is no issue, as `skipFirstLine=true`.Unfortunately, changing the header is not an option in my case.Please find attached: * A sample CsvRecord-annotated bean `WickedCsv.java`, and * a JUnit test `WickedCsvTest.java`which allow to reproduce the issue.The assertion error occurs in the last line of the `test()` method:  `assertEquals(csv.trim(), result.trim())`I have attached a patch for BindyCsvFactory (`BindyCsvFactory.patch`), which fixes the issue. I copied and adjusted the lines according to the quote handling in `org.apache.camel.dataformat.bindy.BindyCsvFactory#bind`.Would you please check?Thank you.Kind regards,Clemens
CAMEL-12389 camel-test - Using CamelTestSupport in Spring Boot See nabble[http://camel.465427.n5.nabble.com/PropertyInject-vs-Value-in-camel-spring-boot-tp5818504.html]You may have the test class being IoC two times (by Camel and Spring).  Improvement camel-test - Using CamelTestSupport in Spring Boot See nabble[http://camel.465427.n5.nabble.com/PropertyInject-vs-Value-in-camel-spring-boot-tp5818504.html]You may have the test class being IoC two times (by Camel and Spring). 
CAMEL-12385 Spring Boot 2 - Camel info contributor to show basic details So we can show basic Camel information in actuator/info endpoint, so you can see if Camel is present, and what name / version / uptime it has etc. Sub-task Spring Boot 2 - Camel info contributor to show basic details So we can show basic Camel information in actuator/info endpoint, so you can see if Camel is present, and what name / version / uptime it has etc.
CAMEL-12382 FileConsumer - Allow to delay readLock release tasks on idempotent read-lock Under certain use-cases where you may use a shared file read-lock idempotent repository for a active/active cluster setup of consuming files from a shared directory, then you may have the idempotent repo setup as readlock strategy. And in this scenario you may want to delay the commit/rollback operation at the end, to expand the processing windows of the given file to avoid other nodes to potentially be able to pickup the file as well.This requires both a sync vs async way. So users can setup a scheduled thread pool that can delay the work for the commit/rollback so the same node can continue processing the next file.By default this should be turned off.  Improvement FileConsumer - Allow to delay readLock release tasks on idempotent read-lock Under certain use-cases where you may use a shared file read-lock idempotent repository for a active/active cluster setup of consuming files from a shared directory, then you may have the idempotent repo setup as readlock strategy. And in this scenario you may want to delay the commit/rollback operation at the end, to expand the processing windows of the given file to avoid other nodes to potentially be able to pickup the file as well.This requires both a sync vs async way. So users can setup a scheduled thread pool that can delay the work for the commit/rollback so the same node can continue processing the next file.By default this should be turned off. 
CAMEL-12376 Spring Boot 2 - Fix the tests/camel-itest-karaf Some of the OSGi tests may fail due to this upgrade. See also other sub-task about SMX bundle updates of spring JARs Sub-task Spring Boot 2 - Fix the tests/camel-itest-karaf Some of the OSGi tests may fail due to this upgrade. See also other sub-task about SMX bundle updates of spring JARs
CAMEL-12362 Upgrade to Karaf 4.2.x Related to CAMEL-11956 where we upgrade to spring 5.And karaf 4.2.x is the only karaf version that supports spring 5. Sub-task Upgrade to Karaf 4.2.x Related to CAMEL-11956 where we upgrade to spring 5.And karaf 4.2.x is the only karaf version that supports spring 5.
CAMEL-12357 Unexpected change in JSON formatting due to CAMEL-11970 Due to CAMEL-11970, enabling serialization features on a new JacksonDataFormat can now have the side-effect of modifying the Spring default ObjectMapper, and modifying behaviour of RestControllers as well as other camel JacksonDataFormat instances.This behaviour, and how to avoid it, is not covered in the documentation Improvement Unexpected change in JSON formatting due to CAMEL-11970 Due to CAMEL-11970, enabling serialization features on a new JacksonDataFormat can now have the side-effect of modifying the Spring default ObjectMapper, and modifying behaviour of RestControllers as well as other camel JacksonDataFormat instances.This behaviour, and how to avoid it, is not covered in the documentation
CAMEL-12346 Deprecate camel-jira as the java lib is deprecated by atlassian As title says, its deprecated.They recommend the REST api, so we would need to build a new camel-jira-rest component if we want a new component for that. Task Deprecate camel-jira as the java lib is deprecated by atlassian As title says, its deprecated.They recommend the REST api, so we would need to build a new camel-jira-rest component if we want a new component for that.
CAMEL-12341 camel-spring-boot - Add actuator to dump routes in xml format So you can get a XML dump of a route, we can get details and other stats today. This should only be possible if its not in read-only mode Improvement camel-spring-boot - Add actuator to dump routes in xml format So you can get a XML dump of a route, we can get details and other stats today. This should only be possible if its not in read-only mode
CAMEL-12339 Add jsonpath to RouteBuilder So you can more easily use jsonpath in Java DSL. We have xpath there already etc. Improvement Add jsonpath to RouteBuilder So you can more easily use jsonpath in Java DSL. We have xpath there already etc.
CAMEL-12337 camel-ftp - ignoreFileNotFoundOrPermissionError not work when folder not found I tried something like these code, but when "notexist" folder not exist, it still give me exception{code:java}sftp://testserver:22/notexist?autoCreate=false&ignoreFileNotFoundOrPermissionError=true{code}{code:java}org.apache.camel.component.file.GenericFileOperationFailedException: Cannot list directory: notexist	at org.apache.camel.component.file.remote.SftpOperations.listFiles(SftpOperations.java:650)	at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:118)	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:80)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:124)	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745)Caused by: com.jcraft.jsch.SftpException: No such file	at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2873)	at com.jcraft.jsch.ChannelSftp._stat(ChannelSftp.java:2225)	at com.jcraft.jsch.ChannelSftp._stat(ChannelSftp.java:2242)	at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1592)	at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1553)	at org.apache.camel.component.file.remote.SftpOperations.listFiles(SftpOperations.java:641)	... 12 common frames omitted{code}ftp has the same issue.{code:java}org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 550 The system cannot find the file specified.  Cannot change directory to: notexist. Code: 550	at org.apache.camel.component.file.remote.FtpOperations.doChangeDirectory(FtpOperations.java:790)	at org.apache.camel.component.file.remote.FtpOperations.changeCurrentDirectory(FtpOperations.java:768)	at org.apache.camel.component.file.remote.FtpConsumer.doPollDirectory(FtpConsumer.java:112)	at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:83)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:124)	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745){code} Improvement camel-ftp - ignoreFileNotFoundOrPermissionError not work when folder not found I tried something like these code, but when "notexist" folder not exist, it still give me exception{code:java}sftp://testserver:22/notexist?autoCreate=false&ignoreFileNotFoundOrPermissionError=true{code}{code:java}org.apache.camel.component.file.GenericFileOperationFailedException: Cannot list directory: notexist	at org.apache.camel.component.file.remote.SftpOperations.listFiles(SftpOperations.java:650)	at org.apache.camel.component.file.remote.SftpConsumer.doPollDirectory(SftpConsumer.java:118)	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:80)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:124)	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745)Caused by: com.jcraft.jsch.SftpException: No such file	at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2873)	at com.jcraft.jsch.ChannelSftp._stat(ChannelSftp.java:2225)	at com.jcraft.jsch.ChannelSftp._stat(ChannelSftp.java:2242)	at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1592)	at com.jcraft.jsch.ChannelSftp.ls(ChannelSftp.java:1553)	at org.apache.camel.component.file.remote.SftpOperations.listFiles(SftpOperations.java:641)	... 12 common frames omitted{code}ftp has the same issue.{code:java}org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 550 The system cannot find the file specified.  Cannot change directory to: notexist. Code: 550	at org.apache.camel.component.file.remote.FtpOperations.doChangeDirectory(FtpOperations.java:790)	at org.apache.camel.component.file.remote.FtpOperations.changeCurrentDirectory(FtpOperations.java:768)	at org.apache.camel.component.file.remote.FtpConsumer.doPollDirectory(FtpConsumer.java:112)	at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:83)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:124)	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745){code}
CAMEL-12332 camel-csv - Add support for ordered Map in unmarshal Asked on user forum New Feature camel-csv - Add support for ordered Map in unmarshal Asked on user forum
CAMEL-12330 camel-rabbitmq - Allow to configure connection settings on component level The component has no options. But we should allow to configure connection settings etc so you can configure this once. And also maybe let it auto-detect rabbitmq connection factory, so spring-boot users can just configure it the spring-boot way. Improvement camel-rabbitmq - Allow to configure connection settings on component level The component has no options. But we should allow to configure connection settings etc so you can configure this once. And also maybe let it auto-detect rabbitmq connection factory, so spring-boot users can just configure it the spring-boot way.
CAMEL-12329 camel-rabbitmq - Use another header for exchange override header in producer See CAMEL-12324We should not let rabbitmq.EXCHANGE_NAME be used as the override destination for the producer. As this can lead to the problem withfrom foo  to barWill route foo -> foo instead.So if the end user want to use a header to route to another destination that configured in the endpoint uri, you would need to use some other header for that, so rabbitmq.EXCHANGE_NAME becomes "read-only" and dont affect anything. This is also how JMS component works etc. Improvement camel-rabbitmq - Use another header for exchange override header in producer See CAMEL-12324We should not let rabbitmq.EXCHANGE_NAME be used as the override destination for the producer. As this can lead to the problem withfrom foo  to barWill route foo -> foo instead.So if the end user want to use a header to route to another destination that configured in the endpoint uri, you would need to use some other header for that, so rabbitmq.EXCHANGE_NAME becomes "read-only" and dont affect anything. This is also how JMS component works etc.
CAMEL-12327 camel-infinispan - Add GET check before PUT on add operation in idempontent repository See the comment on this SO[https://stackoverflow.com/questions/49123757/camel-idempotentconsumer-always-use-put-instead-of-get/49125815#49125815]The PUT causes the item to be refreshed and cannot expire its cache lifespan. Improvement camel-infinispan - Add GET check before PUT on add operation in idempontent repository See the comment on this SO[https://stackoverflow.com/questions/49123757/camel-idempotentconsumer-always-use-put-instead-of-get/49125815#49125815]The PUT causes the item to be refreshed and cannot expire its cache lifespan.
CAMEL-12323 camel-spark-rest - Avoid singleton spark instance Instead of using singleton Spark we can use Service.ignite() that can create an instance. We can then better control that lifecycle.  Improvement camel-spark-rest - Avoid singleton spark instance Instead of using singleton Spark we can use Service.ignite() that can create an instance. We can then better control that lifecycle. 
CAMEL-12314 advice with - Log route before vs after advice on startup So end users can better understand how the route may have been changed after an advice.We should favour outputting in XML as a .toString can be too verbose and internal representation Improvement advice with - Log route before vs after advice on startup So end users can better understand how the route may have been changed after an advice.We should favour outputting in XML as a .toString can be too verbose and internal representation
CAMEL-12313 camel-maven-plugin - Add docs about run goal options We have forgot to add a table with the run goal options to the adoc docs for this plugin Task camel-maven-plugin - Add docs about run goal options We have forgot to add a table with the run goal options to the adoc docs for this plugin
CAMEL-12312 camel-undertow - Add examples to doc about using websocket There is no examples or a bit of more information about the new websocket support in camel-undertow. We should add something to the docs. Also the description of the component should mention websocket as it currently only say HTTP Task camel-undertow - Add examples to doc about using websocket There is no examples or a bit of more information about the new websocket support in camel-undertow. We should add something to the docs. Also the description of the component should mention websocket as it currently only say HTTP
CAMEL-12310 Update maven-bundle-plugin There is a newer 3.5.0 version and we are using 3.3.0 Task Update maven-bundle-plugin There is a newer 3.5.0 version and we are using 3.3.0
CAMEL-12309 SpEL expression should be able to reference beans in non-Spring application context Currently, a SpEL expression like @myBean only gets resolved correctly when using a Spring application context. Considering that the Ref language can do this with any type of context, it shouldn't be tto hard to support this for SpEL, too. Improvement SpEL expression should be able to reference beans in non-Spring application context Currently, a SpEL expression like @myBean only gets resolved correctly when using a Spring application context. Considering that the Ref language can do this with any type of context, it shouldn't be tto hard to support this for SpEL, too.
CAMEL-12308 Upgrade to CXF 3.2.2 There is a newer version and it also fixes a problem on JDK9 in the camel-itests Improvement Upgrade to CXF 3.2.2 There is a newer version and it also fixes a problem on JDK9 in the camel-itests
CAMEL-12305 IntrospectionSupport - Reduce DEBUG logging level This is a bit too verbose on DEBUG there are some loggings that can be set to TRACE Improvement IntrospectionSupport - Reduce DEBUG logging level This is a bit too verbose on DEBUG there are some loggings that can be set to TRACE
CAMEL-12304 camel-spring-sources - Misses some source files It only includes osgi and xml packages, but there are more source code it should include Task camel-spring-sources - Misses some source files It only includes osgi and xml packages, but there are more source code it should include
CAMEL-12303 Make building camel-spring and camel-blueprint work for XSD generation more cleanly See Zoran's comment on the dev mailing list. Task Make building camel-spring and camel-blueprint work for XSD generation more cleanly See Zoran's comment on the dev mailing list.
CAMEL-12301 camel-itest-spring-boot - CamelOpenTracing fails Tests in error: CamelOpentracingTest.org.apache.camel.itest.springboot.CamelOpentracingTest » Runtime Test camel-itest-spring-boot - CamelOpenTracing fails Tests in error: CamelOpentracingTest.org.apache.camel.itest.springboot.CamelOpentracingTest >> Runtime
CAMEL-12300 camel-example - AMQP blueprint fails test [ERROR] Errors:[ERROR] org.apache.camel.example.artemis.amqp.ArtemisAmqpTest.testEmbeddedBroker(org.apache.camel.example.artemis.amqp.ArtemisAmqpTest)[ERROR] Run 1: ArtemisAmqpTest.testEmbeddedBroker:51 » CamelExecution Exception occurred duri...[ERROR] Run 2: ArtemisAmqpTest.testEmbeddedBroker:51 » CamelExecution Exception occurred duri...[ERROR] Run 3: ArtemisAmqpTest.testEmbeddedBroker:51 » CamelExecution Exception occurred duri...[INFO][INFO][ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0 [INFO] Camel :: Example :: ActiveMQ Artemis AMQP :: Blueprint FAILURE [ 11.462 s] Test camel-example - AMQP blueprint fails test [ERROR] Errors:[ERROR] org.apache.camel.example.artemis.amqp.ArtemisAmqpTest.testEmbeddedBroker(org.apache.camel.example.artemis.amqp.ArtemisAmqpTest)[ERROR] Run 1: ArtemisAmqpTest.testEmbeddedBroker:51 >> CamelExecution Exception occurred duri...[ERROR] Run 2: ArtemisAmqpTest.testEmbeddedBroker:51 >> CamelExecution Exception occurred duri...[ERROR] Run 3: ArtemisAmqpTest.testEmbeddedBroker:51 >> CamelExecution Exception occurred duri...[INFO][INFO][ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0 [INFO] Camel :: Example :: ActiveMQ Artemis AMQP :: Blueprint FAILURE [ 11.462 s]
CAMEL-12298 camel-aws - Unit test failure I get unit test failure when running tests on camel-aws on master branch Test camel-aws - Unit test failure I get unit test failure when running tests on camel-aws on master branch
CAMEL-12296 Aggregator - Add option to complete all groups on new correlation id See CAMEL-10474.We could add an option you can turn on|off on the aggregate EIP to make it even easier to force completion of previous correlation groups, when a new correlation group is detected.For example if you group together stuff that is somewhat ordered and you just need to complete existing when a new group is started.AAB (* should complete A)BBC (* should complete B)D (* should complete C)... Improvement Aggregator - Add option to complete all groups on new correlation id See CAMEL-10474.We could add an option you can turn on|off on the aggregate EIP to make it even easier to force completion of previous correlation groups, when a new correlation group is detected.For example if you group together stuff that is somewhat ordered and you just need to complete existing when a new group is started.AAB (* should complete A)BBC (* should complete B)D (* should complete C)...
CAMEL-12285 Add support for integration with MyBatis defined via interface (not XML) Add support for integration with MyBatis defined via interface (not XML). Right now we can connect camel flow with MyBatis defined in XML.We are using:{{<to uri="mybatis:selectSomethingId...">}} {{where 'selectSomethingId' is id from MyBatis XML configuration connected to some statement.}} {{When we use MyBatis configuration via 'interface' there is no possibility to set/define ID which can be used in camel-mybatis flow.}} New Feature Add support for integration with MyBatis defined via interface (not XML) Add support for integration with MyBatis defined via interface (not XML). Right now we can connect camel flow with MyBatis defined in XML.We are using:{{<to uri="mybatis:selectSomethingId...">}} {{where 'selectSomethingId' is id from MyBatis XML configuration connected to some statement.}} {{When we use MyBatis configuration via 'interface' there is no possibility to set/define ID which can be used in camel-mybatis flow.}}
CAMEL-12283 camel-restdsl-swagger-plugin - Allow to filter operations So you can choose to implement rest-dsl for only some of the operations Improvement camel-restdsl-swagger-plugin - Allow to filter operations So you can choose to implement rest-dsl for only some of the operations
CAMEL-12273 In component doc, tables are sometimes generated without body rows In the Camel component {{.adoc}} files, the automatically generated tables are sometimes generated without any body rows. This causes errors in some publication tool chains and also does not make sense. Ideally, the table should not be generated, if it is going to be empty.[~ancosen], perhaps the tooling can be modified to avoid generating the tables in this case. Task In component doc, tables are sometimes generated without body rows In the Camel component {{.adoc}} files, the automatically generated tables are sometimes generated without any body rows. This causes errors in some publication tool chains and also does not make sense. Ideally, the table should not be generated, if it is going to be empty.[~ancosen], perhaps the tooling can be modified to avoid generating the tables in this case.
CAMEL-12270 camel-http4 - Make it easier to configure connection timeout Today you have to set httpClient.connectionTimeout=5000 to use 5 seconds etc.We should add connectionTimeout as option directly on endpoint confguration as well, so it can be documented, have tooling assistance etc.  Improvement camel-http4 - Make it easier to configure connection timeout Today you have to set httpClient.connectionTimeout=5000 to use 5 seconds etc.We should add connectionTimeout as option directly on endpoint confguration as well, so it can be documented, have tooling assistance etc. 
CAMEL-12266 camel-restdsl-swagger-plugin - Make it possible to chose XML generation This tool[https://github.com/apache/camel/blob/master/tooling/maven/camel-restdsl-swagger-plugin/src/main/docs/camel-package-maven-plugin.adoc]Can generate java code from a swagger doc. We should add an option so you can tell the tool to generate as either Java or XML DSL source code. New Feature camel-restdsl-swagger-plugin - Make it possible to chose XML generation This tool[https://github.com/apache/camel/blob/master/tooling/maven/camel-restdsl-swagger-plugin/src/main/docs/camel-package-maven-plugin.adoc]Can generate java code from a swagger doc. We should add an option so you can tell the tool to generate as either Java or XML DSL source code.
CAMEL-12262 DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE Incorrect The [official documentation|http://camel.apache.org/camel-configuration-utilities.html] states the default cipher suites exclude filters are:{code:java}.*NULL.*.*anon.*.*DES.* Camel 2.15.4 =>Means 3DES **is** excluded.*EXPORT.* Camel 2.15.4{code}The default cipher suite exclude filter declared is:{code:java}/camel-core/src/main/java/org/apache/camel/util/jsse/BaseSSLContextParameters.java{code}{code:java}    protected static final List<String> DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE =        Collections.unmodifiableList(Arrays.asList(".*_NULL_.*", ".*_anon_.*", ".*_EXPORT_.*", ".*_DES_.*"));{code}According to the documentation 3DES will be excluded by default. Based on the code only DES will be excluded. Task DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE Incorrect The [official documentation|http://camel.apache.org/camel-configuration-utilities.html] states the default cipher suites exclude filters are:{code:java}.*NULL.*.*anon.*.*DES.* Camel 2.15.4 =>Means 3DES **is** excluded.*EXPORT.* Camel 2.15.4{code}The default cipher suite exclude filter declared is:{code:java}/camel-core/src/main/java/org/apache/camel/util/jsse/BaseSSLContextParameters.java{code}{code:java}    protected static final List<String> DEFAULT_CIPHER_SUITES_FILTER_EXCLUDE =        Collections.unmodifiableList(Arrays.asList(".*_NULL_.*", ".*_anon_.*", ".*_EXPORT_.*", ".*_DES_.*"));{code}According to the documentation 3DES will be excluded by default. Based on the code only DES will be excluded.
CAMEL-12254 Add restart operation to route JMX mbean To make it easier to restart a route from JMX. Today you have to stop and then start.We need to be able to set a little delay between stop/start so the start does not happen asap, as you may want to give the system a bit of time to just settle down before starting up again. Improvement Add restart operation to route JMX mbean To make it easier to restart a route from JMX. Today you have to stop and then start.We need to be able to set a little delay between stop/start so the start does not happen asap, as you may want to give the system a bit of time to just settle down before starting up again.
CAMEL-12253 Add restart action to controlbus To make it easy to restart a route. Today you have to call stop and then start to do that. Improvement Add restart action to controlbus To make it easy to restart a route. Today you have to call stop and then start to do that.
CAMEL-12225 Documentation - Should include a link id in top of file All our adoc files should include a link in the top of the file, then we can build a TOC and have it link to each page. The link should be the component id/dataformat id, etc. Which is also what we use in the filename, eg ftp-component, ahc-component, jaxb-dataformat etc. Task Documentation - Should include a link id in top of file All our adoc files should include a link in the top of the file, then we can build a TOC and have it link to each page. The link should be the component id/dataformat id, etc. Which is also what we use in the filename, eg ftp-component, ahc-component, jaxb-dataformat etc.
CAMEL-12207 Support new TypeConverter to convert GenericFile to List<String> I think it's useful when we need process files from File or FTP component.Currently TypeConverter only support GenericFile to String, and we need convert it by ourselves.  Improvement Support new TypeConverter to convert GenericFile to List<String> I think it's useful when we need process files from File or FTP component.Currently TypeConverter only support GenericFile to String, and we need convert it by ourselves. 
CAMEL-12203 camel-fop - Upgrade to make it work again We should upgrade fop to version 2.2, as there is an issue with 2.1 we were default using. Task camel-fop - Upgrade to make it work again We should upgrade fop to version 2.2, as there is an issue with 2.1 we were default using.
CAMEL-12192 BindyCsvDataFormat does not support skip fields  Currently: BindyCsvDataFormat has to map all the fields in a CSV file. If there are 200 fields in a CSV file, it has to create 200 fields in a class. But sometimes, it is only interested in 20 fields. So it needs to skip some positions if they are not required. But BindyCsvDataFormat will throw an exception in this case.   Improvement BindyCsvDataFormat does not support skip fields  Currently: BindyCsvDataFormat has to map all the fields in a CSV file. If there are 200 fields in a CSV file, it has to create 200 fields in a class. But sometimes, it is only interested in 20 fields. So it needs to skip some positions if they are not required. But BindyCsvDataFormat will throw an exception in this case.  
CAMEL-12180 camel-braintree - Downgrade to version without org.json We cannot use newer version as it uses org.json JAR.  Task camel-braintree - Downgrade to version without org.json We cannot use newer version as it uses org.json JAR. 
CAMEL-12177 Dns Routing Policy to start/stop routes based on dns changes. Dns Routing Policy to start/stop routes based on dns changes. New Feature Dns Routing Policy to start/stop routes based on dns changes. Dns Routing Policy to start/stop routes based on dns changes.
CAMEL-12165 camel-jaxb - Allow to configure severity level on schema validation Currently it fails on all kind of errors. But maybe in some use-cases you just want to ignore WARNING etc. Improvement camel-jaxb - Allow to configure severity level on schema validation Currently it fails on all kind of errors. But maybe in some use-cases you just want to ignore WARNING etc.
CAMEL-12156 Camel Karaf route commands - Should have camel context as required The camel context must be provided, which currently is not a required option and therefore you can get null commands Also we should flip the order of the arguments so you enter camel context first, so the completion of the routes are based on the given camel context. Otherwise if you have 50+ camel apps in karaf, then the route complete will show all routes which is a lot. Now you select the camel app first, and then the completer only show the routes from this camel app. Improvement Camel Karaf route commands - Should have camel context as required The camel context must be provided, which currently is not a required option and therefore you can get null commands Also we should flip the order of the arguments so you enter camel context first, so the completion of the routes are based on the given camel context. Otherwise if you have 50+ camel apps in karaf, then the route complete will show all routes which is a lot. Now you select the camel app first, and then the completer only show the routes from this camel app.
CAMEL-12155 Indicate Camel-Dozer major upgrade in Camel 2.20 release note and specify how to migrate For Camel 2.20, Camel Dozer has been upgraded rom version 5.x to 6.1. there are breaking changes: * see Dozer migration guides [https://dozermapper.github.io/gitbook/migration/v5-to-v6.html] and [https://dozermapper.github.io/gitbook/migration/v6-to-v61.html] * Camel has consequently an API break too: org.apache.camel.converter.dozer.DozerBeanMapperConfiguration It would be nice to add a note in the release note: [http://camel.apache.org/camel-2200-release.html#Camel2.20.0Release-Importantchangestoconsiderwhenupgrading] I have not found where to propose update to the release note, seems that it is not part of github repo. Task Indicate Camel-Dozer major upgrade in Camel 2.20 release note and specify how to migrate For Camel 2.20, Camel Dozer has been upgraded rom version 5.x to 6.1. there are breaking changes: * see Dozer migration guides [https://dozermapper.github.io/gitbook/migration/v5-to-v6.html] and [https://dozermapper.github.io/gitbook/migration/v6-to-v61.html] * Camel has consequently an API break too: org.apache.camel.converter.dozer.DozerBeanMapperConfiguration It would be nice to add a note in the release note: [http://camel.apache.org/camel-2200-release.html#Camel2.20.0Release-Importantchangestoconsiderwhenupgrading] I have not found where to propose update to the release note, seems that it is not part of github repo.
CAMEL-12154 Camel does not set Saxon parameters in a XQuery 3.0 compatible way When injecting parameters into the Saxon XQuery engine, the Camel component is not sophisticated enough to inject the parameter as the right type for Saxon to bind it properly.Let's say we have a XQuery 3.0 compliant variable definition:{code:java}declare variable $extParam as xs:boolean external := false();{code}and we set a property on the exchange{code:java}exchange.setProperty("extParam ", true);{code}our XQuery execution will fail with the following error as the value bound into Saxon is not a Boolean type:{code:java}Type error on line 3 column 5  XPTY0004: Required item type of value of variable $extParam is xs:boolean; supplied value has item type xs:string{code}The part(s) that need to get more sophisticated are: * [XQueryBuilder.addParameter()|https://github.com/apache/camel/blob/camel-2.20.x/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java#L656] * [XQueryBuilder.configureQuery() - set in body|https://github.com/apache/camel/blob/camel-2.20.x/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java#L626] * [XQueryBuilder.configureQuery() - set out body|https://github.com/apache/camel/blob/camel-2.20.x/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java#L638]At the bare minimum probably should be supporting to set query parameters for all the basic types like string, boolean, int, decimal etc.I was thinking of a simple if then else block to check the content type and then call the appropriate Saxon value wrapper but am a bit unsure as the body could be simple type or DOM or Source or something else depending on the marshalling that is going on beforehand.Here a very basic setup that shows what is happening when Saxon parameters are just bound as Object values:{code:java}package com.virginaustralia.bind.xquery;import static org.junit.Assert.*;import org.junit.Before;import org.junit.Test;import net.sf.saxon.Configuration;import net.sf.saxon.om.Item;import net.sf.saxon.om.StructuredQName;import net.sf.saxon.query.DynamicQueryContext;import net.sf.saxon.query.XQueryExpression;import net.sf.saxon.value.BooleanValue;import net.sf.saxon.value.ObjectValue;public class ParameterDynamicTest {private static final String TEST_QUERY = new StringBuilder() .append("xquery version \"3.0\" encoding \"UTF-8\";\n") .append("declare variable $extParam as xs:boolean external := false();\n") .append("if($extParam) then(true()) else (false())") .toString();Configuration conf = new Configuration();XQueryExpression query;DynamicQueryContext context;@Before public void setup() throws Exception { conf.setCompileWithTracing(true); query = conf.newStaticQueryContext().compileQuery(TEST_QUERY); context = new DynamicQueryContext(conf); }/** * This is what Camel XQueryBuilder executes, which leads to a parameter binding type error. * */ @Test public void testObjectParameter() throws Exception { context.setParameter(StructuredQName.fromClarkName("extParam"), new ObjectValue<>(true)); Item result = query.iterator(context).next(); assertTrue(result instanceof BooleanValue); assertEquals(true, ((BooleanValue) result).getBooleanValue()); }/** * This is what Camel XQueryBuilder should execute to allow Saxon to bind the parameter type properly. */ @Test public void testBooleanParameter() throws Exception { context.setParameter(StructuredQName.fromClarkName("extParam"), BooleanValue.TRUE); Item result = query.iterator(context).next(); assertTrue(result instanceof BooleanValue); assertEquals(true, ((BooleanValue) result).getBooleanValue()); }}{code} Improvement Camel does not set Saxon parameters in a XQuery 3.0 compatible way When injecting parameters into the Saxon XQuery engine, the Camel component is not sophisticated enough to inject the parameter as the right type for Saxon to bind it properly.Let's say we have a XQuery 3.0 compliant variable definition:{code:java}declare variable $extParam as xs:boolean external := false();{code}and we set a property on the exchange{code:java}exchange.setProperty("extParam ", true);{code}our XQuery execution will fail with the following error as the value bound into Saxon is not a Boolean type:{code:java}Type error on line 3 column 5  XPTY0004: Required item type of value of variable $extParam is xs:boolean; supplied value has item type xs:string{code}The part(s) that need to get more sophisticated are: * [XQueryBuilder.addParameter()|https://github.com/apache/camel/blob/camel-2.20.x/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java#L656] * [XQueryBuilder.configureQuery() - set in body|https://github.com/apache/camel/blob/camel-2.20.x/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java#L626] * [XQueryBuilder.configureQuery() - set out body|https://github.com/apache/camel/blob/camel-2.20.x/components/camel-saxon/src/main/java/org/apache/camel/component/xquery/XQueryBuilder.java#L638]At the bare minimum probably should be supporting to set query parameters for all the basic types like string, boolean, int, decimal etc.I was thinking of a simple if then else block to check the content type and then call the appropriate Saxon value wrapper but am a bit unsure as the body could be simple type or DOM or Source or something else depending on the marshalling that is going on beforehand.Here a very basic setup that shows what is happening when Saxon parameters are just bound as Object values:{code:java}package com.virginaustralia.bind.xquery;import static org.junit.Assert.*;import org.junit.Before;import org.junit.Test;import net.sf.saxon.Configuration;import net.sf.saxon.om.Item;import net.sf.saxon.om.StructuredQName;import net.sf.saxon.query.DynamicQueryContext;import net.sf.saxon.query.XQueryExpression;import net.sf.saxon.value.BooleanValue;import net.sf.saxon.value.ObjectValue;public class ParameterDynamicTest {private static final String TEST_QUERY = new StringBuilder() .append("xquery version \"3.0\" encoding \"UTF-8\";\n") .append("declare variable $extParam as xs:boolean external := false();\n") .append("if($extParam) then(true()) else (false())") .toString();Configuration conf = new Configuration();XQueryExpression query;DynamicQueryContext context;@Before public void setup() throws Exception { conf.setCompileWithTracing(true); query = conf.newStaticQueryContext().compileQuery(TEST_QUERY); context = new DynamicQueryContext(conf); }/** * This is what Camel XQueryBuilder executes, which leads to a parameter binding type error. * */ @Test public void testObjectParameter() throws Exception { context.setParameter(StructuredQName.fromClarkName("extParam"), new ObjectValue<>(true)); Item result = query.iterator(context).next(); assertTrue(result instanceof BooleanValue); assertEquals(true, ((BooleanValue) result).getBooleanValue()); }/** * This is what Camel XQueryBuilder should execute to allow Saxon to bind the parameter type properly. */ @Test public void testBooleanParameter() throws Exception { context.setParameter(StructuredQName.fromClarkName("extParam"), BooleanValue.TRUE); Item result = query.iterator(context).next(); assertTrue(result instanceof BooleanValue); assertEquals(true, ((BooleanValue) result).getBooleanValue()); }}{code}
CAMEL-12133 Update Camel documentation for ThrottlingExceptionRoutePolicy  The `ThrottlingExceptionPolicy` circuit breaker EIP needs some documentation Perhaps on the Route Policy page but open to suggestionshttp://camel.apache.org/routepolicy.html Task Update Camel documentation for ThrottlingExceptionRoutePolicy  The `ThrottlingExceptionPolicy` circuit breaker EIP needs some documentation Perhaps on the Route Policy page but open to suggestionshttp://camel.apache.org/routepolicy.html
CAMEL-12129 Broken integration test RabbitMQSupendResumeIntTest Integration test broken by CAMEL-12111, will have fix up shortly Test Broken integration test RabbitMQSupendResumeIntTest Integration test broken by CAMEL-12111, will have fix up shortly
CAMEL-12127 camel-ftp - Add option to turn on logging of transfer activity So you can see how far you have downloaded or uploaded files with the ftp component. This does not work with the sftp (ssh ftp).{code}2018-01-06 15:08:53,198 [//src/main/data] INFO  FtpOperations                  - Uploading: bar.xml (chunk: 873, total chunk: 873 bytes)2018-01-06 15:08:53,211 [//src/main/data] INFO  FtpOperations                  - Uploading: foo.xml (chunk: 873, total chunk: 873 bytes)2018-01-06 15:08:53,708 [1000/tmp2/camel] INFO  FtpOperations                  - Downloading: bar.xml (chunk: 873, total chunk: 873 bytes)2018-01-06 15:08:53,713 [1000/tmp2/camel] INFO  FtpOperations                  - Downloading: foo.xml (chunk: 1, total chunk: 1 bytes)2018-01-06 15:08:53,713 [1000/tmp2/camel] INFO  FtpOperations                  - Downloading: foo.xml (chunk: 872, total chunk: 873 bytes){code}We can also not see the total size of the file, as the FTP client implementation does not provide that detail. New Feature camel-ftp - Add option to turn on logging of transfer activity So you can see how far you have downloaded or uploaded files with the ftp component. This does not work with the sftp (ssh ftp).{code}2018-01-06 15:08:53,198 [//src/main/data] INFO  FtpOperations                  - Uploading: bar.xml (chunk: 873, total chunk: 873 bytes)2018-01-06 15:08:53,211 [//src/main/data] INFO  FtpOperations                  - Uploading: foo.xml (chunk: 873, total chunk: 873 bytes)2018-01-06 15:08:53,708 [1000/tmp2/camel] INFO  FtpOperations                  - Downloading: bar.xml (chunk: 873, total chunk: 873 bytes)2018-01-06 15:08:53,713 [1000/tmp2/camel] INFO  FtpOperations                  - Downloading: foo.xml (chunk: 1, total chunk: 1 bytes)2018-01-06 15:08:53,713 [1000/tmp2/camel] INFO  FtpOperations                  - Downloading: foo.xml (chunk: 872, total chunk: 873 bytes){code}We can also not see the total size of the file, as the FTP client implementation does not provide that detail.
CAMEL-12126 camel-ftp - Add support for restarting downloads When downloading big files it would be good to have support for- downloading these files as streams into a temporary directory (local work dir etc)- be able to shutdown Camel during download- be able to start Camel again, and have camel-ftp resume downloading the file New Feature camel-ftp - Add support for restarting downloads When downloading big files it would be good to have support for- downloading these files as streams into a temporary directory (local work dir etc)- be able to shutdown Camel during download- be able to start Camel again, and have camel-ftp resume downloading the file
CAMEL-12125 Add keepOpen to the ThrottlingExceptionRoutePolicy circuit breaker a useful addition to the endpoint circuit breaker (see CAMEL-10718) would be the ability to force it into the open state so that it suspends consuming even if there are no exceptions. this would function similar to the Netflix Hystrix forceOpenhttps://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceOpenWilling to submit a PR Improvement Add keepOpen to the ThrottlingExceptionRoutePolicy circuit breaker a useful addition to the endpoint circuit breaker (see CAMEL-10718) would be the ability to force it into the open state so that it suspends consuming even if there are no exceptions. this would function similar to the Netflix Hystrix forceOpenhttps://github.com/Netflix/Hystrix/wiki/Configuration#circuitBreaker.forceOpenWilling to submit a PR
CAMEL-12124 Allow to configure cacheSize on dynamic router and routing slip EIP annotations So you can specify this in the annotation like you can in the DSL itself. Improvement Allow to configure cacheSize on dynamic router and routing slip EIP annotations So you can specify this in the annotation like you can in the DSL itself.
CAMEL-12114 Have XmlLineNumberParser respecting namespace uri when javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean) is [set to true|https://github.com/apache/camel/blob/f980e6b3d88f5ebb9e604aabc44315fa01a9e486/tooling/camel-route-parser/src/main/java/org/apache/camel/parser/helper/XmlLineNumberParser.java#L87], the namespace uris is supposed to be set on all nodes (when there is one)i think that it should be done [here|https://github.com/apache/camel/blob/f980e6b3d88f5ebb9e604aabc44315fa01a9e486/tooling/camel-route-parser/src/main/java/org/apache/camel/parser/helper/XmlLineNumberParser.java#L133].it will also avoid to have to "forcenameSpace" see [here|https://github.com/apache/camel/blob/f980e6b3d88f5ebb9e604aabc44315fa01a9e486/tooling/camel-route-parser/src/main/java/org/apache/camel/parser/helper/XmlLineNumberParser.java#L79] Improvement Have XmlLineNumberParser respecting namespace uri when javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware(boolean) is [set to true|https://github.com/apache/camel/blob/f980e6b3d88f5ebb9e604aabc44315fa01a9e486/tooling/camel-route-parser/src/main/java/org/apache/camel/parser/helper/XmlLineNumberParser.java#L87], the namespace uris is supposed to be set on all nodes (when there is one)i think that it should be done [here|https://github.com/apache/camel/blob/f980e6b3d88f5ebb9e604aabc44315fa01a9e486/tooling/camel-route-parser/src/main/java/org/apache/camel/parser/helper/XmlLineNumberParser.java#L133].it will also avoid to have to "forcenameSpace" see [here|https://github.com/apache/camel/blob/f980e6b3d88f5ebb9e604aabc44315fa01a9e486/tooling/camel-route-parser/src/main/java/org/apache/camel/parser/helper/XmlLineNumberParser.java#L79]
CAMEL-12110 KafkaConsumer swallows exceptions from org.apache.kafka.clients.consumer.KafkaConsumer constructor When an exception is thrown by the _org.apache.kafka.clients.consumer.KafkaConsumer_ constructor when instantiated by the _KafkaConsumer_ inner class _KafkaFetchRecords_, the exception is not logged, nor propagated.  This can happen, for example, if the key or the value deserializer class names are incorrect, or the class is not found by the class loader.I would expect the exception here should cause the endpoint to fail initializing, or at a minimum, the exception should be logged.   The fact that nothing is logged and the route is started without any apparent error, is misleading and very hard to troubleshoot. Improvement KafkaConsumer swallows exceptions from org.apache.kafka.clients.consumer.KafkaConsumer constructor When an exception is thrown by the _org.apache.kafka.clients.consumer.KafkaConsumer_ constructor when instantiated by the _KafkaConsumer_ inner class _KafkaFetchRecords_, the exception is not logged, nor propagated.  This can happen, for example, if the key or the value deserializer class names are incorrect, or the class is not found by the class loader.I would expect the exception here should cause the endpoint to fail initializing, or at a minimum, the exception should be logged.   The fact that nothing is logged and the route is started without any apparent error, is misleading and very hard to troubleshoot.
CAMEL-12107 support for setting connection/socket timeout on camel-servlet using endpoint properties The default timeout used by {{camel-servlet}} seems to be 30000ms. I could not find a way to change this timeout declaratively using some endpoint option/property. {{camel-restlet}} [1] has two endpoint properties to handle this declaratively: {{connectionTimeout}} and {{socketTimeout}}. This is useful when using camel-servlet in Camel DSL to expose http rest endpoints. Sometimes you have scenarios where your work takes more than 30s to respond a client consumer and you need to increase the default timeout.[1] http://camel.apache.org/restlet.html Improvement support for setting connection/socket timeout on camel-servlet using endpoint properties The default timeout used by {{camel-servlet}} seems to be 30000ms. I could not find a way to change this timeout declaratively using some endpoint option/property. {{camel-restlet}} [1] has two endpoint properties to handle this declaratively: {{connectionTimeout}} and {{socketTimeout}}. This is useful when using camel-servlet in Camel DSL to expose http rest endpoints. Sometimes you have scenarios where your work takes more than 30s to respond a client consumer and you need to increase the default timeout.[1] http://camel.apache.org/restlet.html
CAMEL-12102 Improve camel-sap-netweaver documentation [Documentation|http://camel.apache.org/sap-netweaver.html] defines:{code}private String command = "FlightCollection(AirLineID=&#39;AA&#39;,FlightConnectionID=&#39;0017&#39;,FlightDate=datetime&#39;2012-08-29T00%3A00%3A00&#39;)";{code}which is never used in{code}from("direct:start")    .toF("sap-netweaver:%s?username=%s&password=%s", url, username, password)    .to("log:response")    .to("velocity:flight-info.vm"){code}so please provide valid example of how to use commands.By the way - it would be great if you could correct the format of:{code}lightCollection(AirLineID=&#39;AA&#39;,FlightConnectionID=&#39;0017&#39;,FlightDate=datetime&#39;2012-08-29T00%3A00%3A00&#39;){code}because it is not readable Improvement Improve camel-sap-netweaver documentation [Documentation|http://camel.apache.org/sap-netweaver.html] defines:{code}private String command = "FlightCollection(AirLineID=&#39;AA&#39;,FlightConnectionID=&#39;0017&#39;,FlightDate=datetime&#39;2012-08-29T00%3A00%3A00&#39;)";{code}which is never used in{code}from("direct:start")    .toF("sap-netweaver:%s?username=%s&password=%s", url, username, password)    .to("log:response")    .to("velocity:flight-info.vm"){code}so please provide valid example of how to use commands.By the way - it would be great if you could correct the format of:{code}lightCollection(AirLineID=&#39;AA&#39;,FlightConnectionID=&#39;0017&#39;,FlightDate=datetime&#39;2012-08-29T00%3A00%3A00&#39;){code}because it is not readable
CAMEL-12090 camel-kafka - Better error if brokers not configured See SOhttps://stackoverflow.com/questions/47866344/apache-kafka-apache-camel-integration-poc-issue-java-lang-nullpointerexcept Improvement camel-kafka - Better error if brokers not configured See SOhttps://stackoverflow.com/questions/47866344/apache-kafka-apache-camel-integration-poc-issue-java-lang-nullpointerexcept
CAMEL-12080 Allow creating csv content without last eol Hello,  rfc4180 for CSV states:bq. The last record in the file may or may not have an ending line  break.For deserialization Bindy accepts both types of files, but for serialization Bindy to my knowledge always creates content with last row ending with newline. Unfortunately some legacy systems treat last newline as one more empty row. Would it be possible to introduce control over this? I have this problem in CSV and also in fixed format for one other place. For now we need to strip the last char in Camel processor. Improvement Allow creating csv content without last eol Hello,  rfc4180 for CSV states:bq. The last record in the file may or may not have an ending line  break.For deserialization Bindy accepts both types of files, but for serialization Bindy to my knowledge always creates content with last row ending with newline. Unfortunately some legacy systems treat last newline as one more empty row. Would it be possible to introduce control over this? I have this problem in CSV and also in fixed format for one other place. For now we need to strip the last char in Camel processor.
CAMEL-12079 Bean language: support bean::function notation As today the bean language supports:- bean?function- bean.functionit would be nice if we support also-  bean::function Improvement Bean language: support bean::function notation As today the bean language supports:- bean?function- bean.functionit would be nice if we support also-  bean::function
CAMEL-12074 Let okStatusCodeRange support multiple ranges When working with rest api's, some http status codes such as 404 Not Found are not necessarily errors.  It would be nice to be able to specify multiple ranges and individual codes such as {{okStatusCodeRange=200-204,404}}.This would allow us to handle 404 in the main route logic while still throwing an exception for other status codes. While we can use {{throwExceptionOnFailure=false}} we then have to throw exceptions ourselves for most status codes.As far as I can tell, this requires a simple modification in HttpHelper::isStatusCodeOk.I will give it a shot. New Feature Let okStatusCodeRange support multiple ranges When working with rest api's, some http status codes such as 404 Not Found are not necessarily errors.  It would be nice to be able to specify multiple ranges and individual codes such as {{okStatusCodeRange=200-204,404}}.This would allow us to handle 404 in the main route logic while still throwing an exception for other status codes. While we can use {{throwExceptionOnFailure=false}} we then have to throw exceptions ourselves for most status codes.As far as I can tell, this requires a simple modification in HttpHelper::isStatusCodeOk.I will give it a shot.
CAMEL-12073 camel-zipkin - support Zipkin Reporter interface The SpanCollector interface is now deprecated, so need also support the Reporter interface. New Feature camel-zipkin - support Zipkin Reporter interface The SpanCollector interface is now deprecated, so need also support the Reporter interface.
CAMEL-12056 Add NotifyBuilder.destroy() method Once constructed, NotifyBuilders remain registered against their CamelContext with no (neat) means of getting rid of them.Dev: Add a destroy() method to complement the create() method. Destroy is irreversible, object should be unusable after this (much as when !created). Improvement Add NotifyBuilder.destroy() method Once constructed, NotifyBuilders remain registered against their CamelContext with no (neat) means of getting rid of them.Dev: Add a destroy() method to complement the create() method. Destroy is irreversible, object should be unusable after this (much as when !created).
CAMEL-12050 Camel Rest DSL returns 404 instead of 405, when http method is not supported Hi,I have a REST resource  with a GET method, defined using Rest DSL (and _servlet_ component) and it works well, returning 200 response. But when I send a PUT request (which is not yet implemented) it returns 404 (not found) which can confusing at times. It should rather return 405 (method not allowed) instead.{quote}              restConfiguration()                 .component("servlet")                 .bindingMode(json)                 .dataFormatProperty("prettyPrint", "true");           rest("my-resource-url-here")                 .get()                 .consumes("application/json")                 .produces("application/json")                 .type(MyRequestClass.class)                 .to("..."){quote} Improvement Camel Rest DSL returns 404 instead of 405, when http method is not supported Hi,I have a REST resource  with a GET method, defined using Rest DSL (and _servlet_ component) and it works well, returning 200 response. But when I send a PUT request (which is not yet implemented) it returns 404 (not found) which can confusing at times. It should rather return 405 (method not allowed) instead.{quote}              restConfiguration()                 .component("servlet")                 .bindingMode(json)                 .dataFormatProperty("prettyPrint", "true");           rest("my-resource-url-here")                 .get()                 .consumes("application/json")                 .produces("application/json")                 .type(MyRequestClass.class)                 .to("..."){quote}
CAMEL-12046 camel-catalog - Add to plugin custom JSonSchemaResolver We just need to expose this on the interface as the impl class already has that. Improvement camel-catalog - Add to plugin custom JSonSchemaResolver We just need to expose this on the interface as the impl class already has that.
CAMEL-12044 [quartz2] Duplicate initializaiton of Quartz component The quartz2 documentation (http://camel.apache.org/quartz2.html) suggests to define the bean for customizing the component.{code:xml}<bean id="quartz" class="org.apache.camel.component.quartz2.QuartzComponent">  <!-- Property Overrides --></bean>{code}But if the bean is defined with id="quartz" then org.apache.camel.impl.DefaultFactoryFinder is not resolving it to the component created by Spring. So if a route is defined with "quartz2://..." then it ends up creating a new instance of the QuartzComponent.However, if you define the bean with id="quartz2" then it DefaultFactoryFinder is able to resolve to the instance created by Spring.So, either the documentation needs to be updated or the component resolution code needs to be fixed. Task [quartz2] Duplicate initializaiton of Quartz component The quartz2 documentation (http://camel.apache.org/quartz2.html) suggests to define the bean for customizing the component.{code:xml}<bean id="quartz" class="org.apache.camel.component.quartz2.QuartzComponent">  <!-- Property Overrides --></bean>{code}But if the bean is defined with id="quartz" then org.apache.camel.impl.DefaultFactoryFinder is not resolving it to the component created by Spring. So if a route is defined with "quartz2://..." then it ends up creating a new instance of the QuartzComponent.However, if you define the bean with id="quartz2" then it DefaultFactoryFinder is able to resolve to the instance created by Spring.So, either the documentation needs to be updated or the component resolution code needs to be fixed.
CAMEL-12034 camel-elasticsearch5 - Search Operation: If Map or String is used in Message Body, "size" and "from" parameters are always ignored Hi,I am using camel-elasticsearch5 component of Camel 2.20.1.I have found and issue. The description follows.*If you use Map or String in message body for SEARCH operation, "size" and "from" parameters are always ignored hence you always get just default 10 results.*For example - if your map contains query like this: (in terms of simplicity - following is String representation of the map):{code}{size=50, query={query_string={query=status:ACTIVE}}, from=0}{code}Issue I suspect is present in class: _org.apache.camel.component.elasticsearch5.converter.ElasticsearchActionRequestConverter_and its method _public static SearchRequest toSearchRequest(Object queryObject, Exchange exchange)_{code}// line 191...if (queryObject instanceof Map<?, ?>) {            Map<String, Object> mapQuery = (Map<String, Object>)queryObject;            // Remove 'query' prefix from the query object for backward compatibility            if (mapQuery.containsKey(ElasticsearchConstants.ES_QUERY_DSL_PREFIX)) {                mapQuery = (Map<String, Object>)mapQuery.get(ElasticsearchConstants.ES_QUERY_DSL_PREFIX);            }            try {                XContentBuilder contentBuilder = XContentFactory.contentBuilder(XContentType.JSON);                queryText = contentBuilder.map(mapQuery).string();            } catch (IOException e) {                LOG.error(e.getMessage());            }        }// queryText then used on line 220...searchSourceBuilder.query(QueryBuilders.wrapperQuery(queryText));searchRequest.source(searchSourceBuilder);return searchRequest;{code}Inner if condition basically extracts only query part from the map {code}query={query_string={query=status:ACTIVE}{code}and *"size" and "from" get lost from the query*{code}// line 194...if (mapQuery.containsKey(ElasticsearchConstants.ES_QUERY_DSL_PREFIX)) {                mapQuery = (Map<String, Object>)mapQuery.get(ElasticsearchConstants.ES_QUERY_DSL_PREFIX);// ...where ElasticsearchConstants.ES_QUERY_DSL_PREFIX = "query"}{code}Same issue is with usage of the String in the message body:{code}// line 203} else if (queryObject instanceof String) {            queryText = (String)queryObject;            ObjectMapper mapper = new ObjectMapper();            try {                JsonNode jsonTextObject = mapper.readValue(queryText, JsonNode.class);                JsonNode parentJsonNode = jsonTextObject.get(ElasticsearchConstants.ES_QUERY_DSL_PREFIX);                if (parentJsonNode != null) {                    queryText = parentJsonNode.toString();                }            } catch (IOException e) {                LOG.error(e.getMessage());            }        }{code}Only workaround for this is to use *SearchRequest* object in a message body where you can explicitly set "size" and "from" on SearchSourceBuilder object. For example:{code}SearchRequest searchRequest = new SearchRequest("my_index")            .types("my_type")            .source(new SearchSourceBuilder().query(QueryBuilders.wrapperQuery("my:query"))                .size(50).from(0));{code}I don't know what was the developer's intention for having such a condition which removes these parameters from the query.Thank you very much in advance if anybody can have a look and verify if this is a valid concern. Improvement camel-elasticsearch5 - Search Operation: If Map or String is used in Message Body, "size" and "from" parameters are always ignored Hi,I am using camel-elasticsearch5 component of Camel 2.20.1.I have found and issue. The description follows.*If you use Map or String in message body for SEARCH operation, "size" and "from" parameters are always ignored hence you always get just default 10 results.*For example - if your map contains query like this: (in terms of simplicity - following is String representation of the map):{code}{size=50, query={query_string={query=status:ACTIVE}}, from=0}{code}Issue I suspect is present in class: _org.apache.camel.component.elasticsearch5.converter.ElasticsearchActionRequestConverter_and its method _public static SearchRequest toSearchRequest(Object queryObject, Exchange exchange)_{code}// line 191...if (queryObject instanceof Map<?, ?>) {            Map<String, Object> mapQuery = (Map<String, Object>)queryObject;            // Remove 'query' prefix from the query object for backward compatibility            if (mapQuery.containsKey(ElasticsearchConstants.ES_QUERY_DSL_PREFIX)) {                mapQuery = (Map<String, Object>)mapQuery.get(ElasticsearchConstants.ES_QUERY_DSL_PREFIX);            }            try {                XContentBuilder contentBuilder = XContentFactory.contentBuilder(XContentType.JSON);                queryText = contentBuilder.map(mapQuery).string();            } catch (IOException e) {                LOG.error(e.getMessage());            }        }// queryText then used on line 220...searchSourceBuilder.query(QueryBuilders.wrapperQuery(queryText));searchRequest.source(searchSourceBuilder);return searchRequest;{code}Inner if condition basically extracts only query part from the map {code}query={query_string={query=status:ACTIVE}{code}and *"size" and "from" get lost from the query*{code}// line 194...if (mapQuery.containsKey(ElasticsearchConstants.ES_QUERY_DSL_PREFIX)) {                mapQuery = (Map<String, Object>)mapQuery.get(ElasticsearchConstants.ES_QUERY_DSL_PREFIX);// ...where ElasticsearchConstants.ES_QUERY_DSL_PREFIX = "query"}{code}Same issue is with usage of the String in the message body:{code}// line 203} else if (queryObject instanceof String) {            queryText = (String)queryObject;            ObjectMapper mapper = new ObjectMapper();            try {                JsonNode jsonTextObject = mapper.readValue(queryText, JsonNode.class);                JsonNode parentJsonNode = jsonTextObject.get(ElasticsearchConstants.ES_QUERY_DSL_PREFIX);                if (parentJsonNode != null) {                    queryText = parentJsonNode.toString();                }            } catch (IOException e) {                LOG.error(e.getMessage());            }        }{code}Only workaround for this is to use *SearchRequest* object in a message body where you can explicitly set "size" and "from" on SearchSourceBuilder object. For example:{code}SearchRequest searchRequest = new SearchRequest("my_index")            .types("my_type")            .source(new SearchSourceBuilder().query(QueryBuilders.wrapperQuery("my:query"))                .size(50).from(0));{code}I don't know what was the developer's intention for having such a condition which removes these parameters from the query.Thank you very much in advance if anybody can have a look and verify if this is a valid concern.
CAMEL-12032 camel-json-validator - Switch to a different validator We should usehttps://github.com/networknt/json-schema-validatorAs its better for Apache Camel and its also released to maven central. Improvement camel-json-validator - Switch to a different validator We should usehttps://github.com/networknt/json-schema-validatorAs its better for Apache Camel and its also released to maven central.
CAMEL-12022 direct component - Let the producer able to block and wait for consumers to be started Similar to what direct-vm component can do. We should let the direct producer detect that if there is no consumer yet, then it can wait until its ready (with timeout) during starting routes. This can avoid the slim chance during route startup that you get a DirectConsumerNotAvailableException Improvement direct component - Let the producer able to block and wait for consumers to be started Similar to what direct-vm component can do. We should let the direct producer detect that if there is no consumer yet, then it can wait until its ready (with timeout) during starting routes. This can avoid the slim chance during route startup that you get a DirectConsumerNotAvailableException
CAMEL-12020 Add dedicated polling consumer for file/ftp components Look at if we can add a dedicated polling consumer class so we can do on-demand poll which is a bit better than reusing the scheduler that its borrowing from the regular consumer. This would have the advantage of making the lifecycle easier to do one poll only. Improvement Add dedicated polling consumer for file/ftp components Look at if we can add a dedicated polling consumer class so we can do on-demand poll which is a bit better than reusing the scheduler that its borrowing from the regular consumer. This would have the advantage of making the lifecycle easier to do one poll only.
CAMEL-12019 camel-kafka - Add option max.poll.interval.ms Hi All, anyone knows how to configure kafka's max.poll.interval.ms via Camel? The property is not mentioned on http://camel.apache.org/kafka.html Improvement camel-kafka - Add option max.poll.interval.ms Hi All, anyone knows how to configure kafka's max.poll.interval.ms via Camel? The property is not mentioned on http://camel.apache.org/kafka.html
CAMEL-12015 dead link in webpage    http://camel.apache.org/log.html the 3rd item on the webpage refers to the no-longer-existing adresshttp://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/package-summary.html Task dead link in webpage    http://camel.apache.org/log.html the 3rd item on the webpage refers to the no-longer-existing adresshttp://java.sun.com/j2se/1.4.2/docs/api/java/util/logging/package-summary.html
CAMEL-12013 Pull Request, Camel example AMQP Artemis Proposed new Camel example showing AMQP Artemis and embedded AMQP Artemis BrokerPR reference:https://github.com/apache/camel/pull/2096 Task Pull Request, Camel example AMQP Artemis Proposed new Camel example showing AMQP Artemis and embedded AMQP Artemis BrokerPR reference:https://github.com/apache/camel/pull/2096
CAMEL-12010 Mock endpoint - Should reset StreamCache when evaluating expecations Seehttp://camel.465427.n5.nabble.com/Setting-multiple-expectations-when-streamCaching-is-on-tp5815400.htmlWhen using stream caching then you may have 2+ expecations on mock endpoints that work on the message body. And then on the 2nd+ it may fail due the stream cache has not been reset, so the message body can be read from the beginning. Improvement Mock endpoint - Should reset StreamCache when evaluating expecations Seehttp://camel.465427.n5.nabble.com/Setting-multiple-expectations-when-streamCaching-is-on-tp5815400.htmlWhen using stream caching then you may have 2+ expecations on mock endpoints that work on the message body. And then on the 2nd+ it may fail due the stream cache has not been reset, so the message body can be read from the beginning.
CAMEL-12007 camel-catalog-maven - Add stop method to cleanup connections Make it possible to cleanup the http connections that MultiThreadedHttpConnectionManager may leak.For example from testing camel-idea-pluginFailed tests:  CamelProjectComponentTestIT>PlatformTestCase.v:640->ModuleTestCase.tearDown:79->IdeaTestCase.tearDown:49->PlatformTestCase.tearDown:517->PlatformTestCase.q:503 Thread leaked: Thread[MultiThreadedHttpConnectionManager cleanup,6,main]; WAITING (true)--- its stacktrace: at java.lang.Object.wait(Native Method) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164) at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread.run(MultiThreadedHttpConnectionManager.java:1122)--- Improvement camel-catalog-maven - Add stop method to cleanup connections Make it possible to cleanup the http connections that MultiThreadedHttpConnectionManager may leak.For example from testing camel-idea-pluginFailed tests:  CamelProjectComponentTestIT>PlatformTestCase.v:640->ModuleTestCase.tearDown:79->IdeaTestCase.tearDown:49->PlatformTestCase.tearDown:517->PlatformTestCase.q:503 Thread leaked: Thread[MultiThreadedHttpConnectionManager cleanup,6,main]; WAITING (true)--- its stacktrace: at java.lang.Object.wait(Native Method) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143) at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164) at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ReferenceQueueThread.run(MultiThreadedHttpConnectionManager.java:1122)---
CAMEL-12004 Add LOG.isDebugEnabled() guard for LOG.debug() I am conducting research on log related bugs. I tried to make a tool to fix repetitive yet simple patterns of bugs that are related to logs. In these files, there are debug level logging statements containing multiple string concatenation or method calls without the if statement before them:camel-core/src/test/java/org/apache/camel/LanguageTestSupport.java, log.debug("Evaluated expression: " + expression + " on exchange: " + exchange + " result: " + value);, 97components/camel-github/src/test/java/org/apache/camel/component/github/consumer/CommitConsumerTest.java, log.debug("Got commit with author: " + author.getLogin() + ": " + author.getHtmlUrl() + " SHA " + commit.getSha());, 62components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/QueueReplyManager.java, log.debug("Using shared queue: " + endpoint.getReplyTo() + " with fixed message selector [" + fixedMessageSelector + "] as reply listener: " + answer);, 133components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java, log.debug("Transaction rollback (" + transactionKey + ") redelivered(" + redelivered + ") for "+ ids + " due exchange was marked for rollbackOnlyLast and caught: ", cause);, 157components/camel-test/src/main/java/org/apache/camel/test/junit4/LanguageTestSupport.java, log.debug("Evaluated expression: " + expression + " on exchange: " + exchange + " result: " + value);, 88components/camel-testng/src/main/java/org/apache/camel/testng/LanguageTestSupport.java, log.debug("Evaluated expression: " + expression + " on exchange: " + exchange + " result: " + value);, 88tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/RunMojo.java, getLog().debug("strange; " + activeCount + " thread(s) still active in the group "+ threadGroup + " such as " + threadsArray[0]);, 652tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/RunMojo.java, getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion());, 761tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageDataFormatMojo.java, log.debug("Generated " + out + " containing JSon schema for " + name + " data format");, 218tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageHelper.java, log.debug("checking  if " + path + " (" + r.getDirectory() + "/" + suffix + ") has changed.");, 48tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageLanguageMojo.java, log.debug("Generated " + out + " containing JSon schema for " + name + " language");, 215tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootStarterMojo.java, getLog().debug("Found dependency node: " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() + " - scope=" + artifact.getScope());, 401tooling/maven/guice-maven-plugin/src/main/java/org/apache/camel/guice/maven/RunMojo.java, getLog().debug("strange; " + activeCount + " thread(s) still active in the group "+ threadGroup + " such as " + threadsArray[0]);, 515Would you be interested in adding the if before these logging statements? Improvement Add LOG.isDebugEnabled() guard for LOG.debug() I am conducting research on log related bugs. I tried to make a tool to fix repetitive yet simple patterns of bugs that are related to logs. In these files, there are debug level logging statements containing multiple string concatenation or method calls without the if statement before them:camel-core/src/test/java/org/apache/camel/LanguageTestSupport.java, log.debug("Evaluated expression: " + expression + " on exchange: " + exchange + " result: " + value);, 97components/camel-github/src/test/java/org/apache/camel/component/github/consumer/CommitConsumerTest.java, log.debug("Got commit with author: " + author.getLogin() + ": " + author.getHtmlUrl() + " SHA " + commit.getSha());, 62components/camel-jms/src/main/java/org/apache/camel/component/jms/reply/QueueReplyManager.java, log.debug("Using shared queue: " + endpoint.getReplyTo() + " with fixed message selector [" + fixedMessageSelector + "] as reply listener: " + answer);, 133components/camel-spring/src/main/java/org/apache/camel/spring/spi/TransactionErrorHandler.java, log.debug("Transaction rollback (" + transactionKey + ") redelivered(" + redelivered + ") for "+ ids + " due exchange was marked for rollbackOnlyLast and caught: ", cause);, 157components/camel-test/src/main/java/org/apache/camel/test/junit4/LanguageTestSupport.java, log.debug("Evaluated expression: " + expression + " on exchange: " + exchange + " result: " + value);, 88components/camel-testng/src/main/java/org/apache/camel/testng/LanguageTestSupport.java, log.debug("Evaluated expression: " + expression + " on exchange: " + exchange + " result: " + value);, 88tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/RunMojo.java, getLog().debug("strange; " + activeCount + " thread(s) still active in the group "+ threadGroup + " such as " + threadsArray[0]);, 652tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/RunMojo.java, getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion());, 761tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageDataFormatMojo.java, log.debug("Generated " + out + " containing JSon schema for " + name + " data format");, 218tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageHelper.java, log.debug("checking  if " + path + " (" + r.getDirectory() + "/" + suffix + ") has changed.");, 48tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PackageLanguageMojo.java, log.debug("Generated " + out + " containing JSon schema for " + name + " language");, 215tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootStarterMojo.java, getLog().debug("Found dependency node: " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() + " - scope=" + artifact.getScope());, 401tooling/maven/guice-maven-plugin/src/main/java/org/apache/camel/guice/maven/RunMojo.java, getLog().debug("strange; " + activeCount + " thread(s) still active in the group "+ threadGroup + " such as " + threadsArray[0]);, 515Would you be interested in adding the if before these logging statements?
CAMEL-12003  FailFast mode for unit tests Is it possible to create a "fail fast" unit test for apache camel?I'm using MockEndpoint in camel unit tests, provide some expectations like message count. And do a call to assertIsSatisfied.This waits until success or timeout, so if an exchange fails, my test waits for timeout extending the duration. For most tests it's true that a failed exchange means the test will fail. It would be nice that it fails fast - after throwing the exception and not waiting for timeout. For reference please check: https://stackoverflow.com/questions/47202346/fail-fast-apache-camel-unit-test/47225454#47225454 Wish  FailFast mode for unit tests Is it possible to create a "fail fast" unit test for apache camel?I'm using MockEndpoint in camel unit tests, provide some expectations like message count. And do a call to assertIsSatisfied.This waits until success or timeout, so if an exchange fails, my test waits for timeout extending the duration. For most tests it's true that a failed exchange means the test will fail. It would be nice that it fails fast - after throwing the exception and not waiting for timeout. For reference please check: https://stackoverflow.com/questions/47202346/fail-fast-apache-camel-unit-test/47225454#47225454
CAMEL-11997 camel-archetype-component - Should generate DefaultComponent It generates using deprecated and also a mandatory attribute firstVersion is missing so the generated code does not compile Improvement camel-archetype-component - Should generate DefaultComponent It generates using deprecated and also a mandatory attribute firstVersion is missing so the generated code does not compile
CAMEL-11993 Upgrade to CXF 3.2.1 A new release is on the way Task Upgrade to CXF 3.2.1 A new release is on the way
CAMEL-11991 camel-swagger-java - Allow to specify type as date format See SOhttps://stackoverflow.com/questions/41618748/how-to-specify-swagger-parameter-format-using-rest-dsl?noredirect=1#comment81139658_41618748We cannot say that its a string value in date format. Improvement camel-swagger-java - Allow to specify type as date format See SOhttps://stackoverflow.com/questions/41618748/how-to-specify-swagger-parameter-format-using-rest-dsl?noredirect=1#comment81139658_41618748We cannot say that its a string value in date format.
CAMEL-11989 camel-paho - Allow to specify topic via header See CAMEL-11628 this functionality is in camel-mqtt, we should have it here also. Improvement camel-paho - Allow to specify topic via header See CAMEL-11628 this functionality is in camel-mqtt, we should have it here also.
CAMEL-11985 Add ExtendedStartupListener See SOhttps://stackoverflow.com/questions/47064796/camel-routes-added-from-my-custom-component-do-not-start/47078729?noredirect=1#comment81109428_47078729We should make an extension to StartupListener so we can invoke it after CamelContext has just been started in case end users want to do something special there, as the existing callback happens during startup and there are some things you cannot do such as add new routes. Improvement Add ExtendedStartupListener See SOhttps://stackoverflow.com/questions/47064796/camel-routes-added-from-my-custom-component-do-not-start/47078729?noredirect=1#comment81109428_47078729We should make an extension to StartupListener so we can invoke it after CamelContext has just been started in case end users want to do something special there, as the existing callback happens during startup and there are some things you cannot do such as add new routes.
CAMEL-11984 AggregationStrategy - Let EIPs support lifecycle of custom aggregation strategy to allow custom start/stop logic So users can do some custom logic in doStart / doStop etc. Improvement AggregationStrategy - Let EIPs support lifecycle of custom aggregation strategy to allow custom start/stop logic So users can do some custom logic in doStart / doStop etc.
CAMEL-11979 camel-undertow - swagger api should match on uri prefix Should be similar to camel-jetty / camel-servlet etc.This allows to match when you call with swagger.json or swagger.yaml to ask for output of given type. Improvement camel-undertow - swagger api should match on uri prefix Should be similar to camel-jetty / camel-servlet etc.This allows to match when you call with swagger.json or swagger.yaml to ask for output of given type.
CAMEL-11978 camel-swagger-java - Include 200 status response as default in generated api-doc We should include a default 200 success response in the generated swagger doc. Some api tools cannot parse the api-doc without this. For example swagger ui etc. Improvement camel-swagger-java - Include 200 status response as default in generated api-doc We should include a default 200 success response in the generated swagger doc. Some api tools cannot parse the api-doc without this. For example swagger ui etc.
CAMEL-11975 camel-connector - Allow to set before/after consumer/producer processors per endpoint This allows more fine grained control of building connectors where you may need to do some custom logic. Improvement camel-connector - Allow to set before/after consumer/producer processors per endpoint This allows more fine grained control of building connectors where you may need to do some custom logic.
CAMEL-11971 sftp - Add support for useList option to allow consumer to download single file without list operation See user forumhttp://camel.465427.n5.nabble.com/SFTP-always-lists-directory-tp5815031.html Improvement sftp - Add support for useList option to allow consumer to download single file without list operation See user forumhttp://camel.465427.n5.nabble.com/SFTP-always-lists-directory-tp5815031.html
CAMEL-11970 JacksonDataFormat does not pickup custom ObjectMapper from Registry When a custom ObjectMapper is properly configured as a Spring bean and exists in the Registry, it is ignored when the {{JacksonDataFormat.doStart}} method is invoked.The beginning of this method does a null check on {{objectMapper}} and simply creates one via {{new ObjectMapper()}} if null.I've prototyped a more robust solution below, which does pickup our custom ObjectMapper bean:+Before:+{code:java}    @Override    protected void doStart() throws Exception {        if (objectMapper == null) {            objectMapper = new ObjectMapper();        }...{code}+After:+{code:java}    @Override    protected void doStart() throws Exception {        if (objectMapper == null) {            CamelContext context = getCamelContext();            if (context == null) {                LOG.error("doStart: No camelContext defined");            }            else {                Map<String, ObjectMapper> mappersByName = context                        .getRegistry()                        .findByTypeWithName(ObjectMapper.class);                LOG.debug("doStart: Found objectMappers={}", mappersByName);                if (mappersByName.size() >= 1) {                    Map.Entry<String, ObjectMapper> mapperByName = mappersByName                            .entrySet()                            .iterator()                            .next();                    objectMapper = mapperByName.getValue();                    LOG.debug("doStart: Using objectMapper=[name:{}, {}]", mapperByName.getKey(), objectMapper);                }            }            if (objectMapper == null) {                objectMapper = new ObjectMapper();                LOG.warn("doStart: Using new default objectMapper={}", objectMapper);            }        }...{code}An enhancement to this would be to allow the *bean name* to be specified instead of simply choosing the first one found. Improvement JacksonDataFormat does not pickup custom ObjectMapper from Registry When a custom ObjectMapper is properly configured as a Spring bean and exists in the Registry, it is ignored when the {{JacksonDataFormat.doStart}} method is invoked.The beginning of this method does a null check on {{objectMapper}} and simply creates one via {{new ObjectMapper()}} if null.I've prototyped a more robust solution below, which does pickup our custom ObjectMapper bean:+Before:+{code:java}    @Override    protected void doStart() throws Exception {        if (objectMapper == null) {            objectMapper = new ObjectMapper();        }...{code}+After:+{code:java}    @Override    protected void doStart() throws Exception {        if (objectMapper == null) {            CamelContext context = getCamelContext();            if (context == null) {                LOG.error("doStart: No camelContext defined");            }            else {                Map<String, ObjectMapper> mappersByName = context                        .getRegistry()                        .findByTypeWithName(ObjectMapper.class);                LOG.debug("doStart: Found objectMappers={}", mappersByName);                if (mappersByName.size() >= 1) {                    Map.Entry<String, ObjectMapper> mapperByName = mappersByName                            .entrySet()                            .iterator()                            .next();                    objectMapper = mapperByName.getValue();                    LOG.debug("doStart: Using objectMapper=[name:{}, {}]", mapperByName.getKey(), objectMapper);                }            }            if (objectMapper == null) {                objectMapper = new ObjectMapper();                LOG.warn("doStart: Using new default objectMapper={}", objectMapper);            }        }...{code}An enhancement to this would be to allow the *bean name* to be specified instead of simply choosing the first one found.
CAMEL-11966 camel-parent - Cleanup and it is not a BOM! camel-parent is not a BOM but has been abused as one for long time. There is a new camel-bom that is minimal and more favorable to be used for future.In Camel 3.0 we can cleanup camel-parent to not be a BOM and just setup dependency versions and a few other common thing, so it can be an internal pom file - as it should be. Task camel-parent - Cleanup and it is not a BOM! camel-parent is not a BOM but has been abused as one for long time. There is a new camel-bom that is minimal and more favorable to be used for future.In Camel 3.0 we can cleanup camel-parent to not be a BOM and just setup dependency versions and a few other common thing, so it can be an internal pom file - as it should be.
CAMEL-11960 camel-swagger-java - Generated swagger doc should use primitive types There are some known types which we should map better to Java primitive typeshttps://swagger.io/specification/#schemaObjectThis does not happen in the responses schema generated.Where we have "format": "java.lang.String" which should not be there.See alsohttps://stackoverflow.com/questions/46975303/suppressing-camel-specific-attributes-from-camel-generated-swagger-definition Improvement camel-swagger-java - Generated swagger doc should use primitive types There are some known types which we should map better to Java primitive typeshttps://swagger.io/specification/#schemaObjectThis does not happen in the responses schema generated.Where we have "format": "java.lang.String" which should not be there.See alsohttps://stackoverflow.com/questions/46975303/suppressing-camel-specific-attributes-from-camel-generated-swagger-definition
CAMEL-11958 rest-dsl - Disable vendor extension by default See CAMEL-11957As 3rd party API tooling may not support vendor extension and that these extensions expose implementation details that end users may not want (model class name, that its Camel etc).This allows the generated API to be more neutral and clean.People can turn it back on with the new vendor extension option. Improvement rest-dsl - Disable vendor extension by default See CAMEL-11957As 3rd party API tooling may not support vendor extension and that these extensions expose implementation details that end users may not want (model class name, that its Camel etc).This allows the generated API to be more neutral and clean.People can turn it back on with the new vendor extension option.
CAMEL-11957 rest-dsl - Allow to turn off vendor extension in generated api docs See SOhttps://stackoverflow.com/questions/46975303/suppressing-camel-specific-attributes-from-camel-generated-swagger-definitionWe should allow to turn this off Improvement rest-dsl - Allow to turn off vendor extension in generated api docs See SOhttps://stackoverflow.com/questions/46975303/suppressing-camel-specific-attributes-from-camel-generated-swagger-definitionWe should allow to turn this off
CAMEL-11956 Support Spring 5.0.x Not sure if camel runs correctly with spring 5.0.x, but the OSGi imports and features exclude 5.x anyway... Task Support Spring 5.0.x Not sure if camel runs correctly with spring 5.0.x, but the OSGi imports and features exclude 5.x anyway...
CAMEL-11948 NPE on DefaultMessage setBody if deprecated constructor was used After upgrade camel 2.20.0, some operations fail with a NullPointerException:{code}Caused by: java.lang.NullPointerException        at org.apache.camel.impl.MessageSupport.setBody(MessageSupport.java:122){code}The issue seems to be introduced with the change CAMEL-11380.The issue could be easily reproduced by using the deprecated constructor, where no camelContext is set:{code}        Message message = new DefaultMessage();        message.setBody("something");{code}To remain better backward compatibility, i would suggest a nullcheck in the setBody for cases where the CamelContext is not set. Improvement NPE on DefaultMessage setBody if deprecated constructor was used After upgrade camel 2.20.0, some operations fail with a NullPointerException:{code}Caused by: java.lang.NullPointerException        at org.apache.camel.impl.MessageSupport.setBody(MessageSupport.java:122){code}The issue seems to be introduced with the change CAMEL-11380.The issue could be easily reproduced by using the deprecated constructor, where no camelContext is set:{code}        Message message = new DefaultMessage();        message.setBody("something");{code}To remain better backward compatibility, i would suggest a nullcheck in the setBody for cases where the CamelContext is not set.
CAMEL-11943 camel-kafka - use regular expression to subscribe to topics Sometime you want to subscribe to topics you don't know exact names for, or there are too many topics. In these cases, using regular expression for topic name is the right choose.Kafka client has method subscribe(Pattern pattern, ConsumerRebalanceListener listener) which is not used in Camel Kafka plugin.It would be great if the Kafka plugin supports regular expression too. Improvement camel-kafka - use regular expression to subscribe to topics Sometime you want to subscribe to topics you don't know exact names for, or there are too many topics. In these cases, using regular expression for topic name is the right choose.Kafka client has method subscribe(Pattern pattern, ConsumerRebalanceListener listener) which is not used in Camel Kafka plugin.It would be great if the Kafka plugin supports regular expression too.
CAMEL-11933 camel-kafka - Add better support for manual commits We should have some easier way of letting Camel end users perform manual commits. By default its auto commit in the background. But sometimes they want to control the commits themselves, so there should be an API they can access, that was stored as an exchange property.  Improvement camel-kafka - Add better support for manual commits We should have some easier way of letting Camel end users perform manual commits. By default its auto commit in the background. But sometimes they want to control the commits themselves, so there should be an API they can access, that was stored as an exchange property. 
CAMEL-11931 camel-jms - Add better support for Stream JMS message type We should add better support for the stream message type, so if message brokers have good implementation of that, you can better stream from one queue to another, or from a queue to file system etc, without loading all data into memory. Improvement camel-jms - Add better support for Stream JMS message type We should add better support for the stream message type, so if message brokers have good implementation of that, you can better stream from one queue to another, or from a queue to file system etc, without loading all data into memory.
CAMEL-11929 camel-castor - Add more configuration There is a number of options in Castor we should allow to configure from camel-castor, that end users is likely going to need. Improvement camel-castor - Add more configuration There is a number of options in Castor we should allow to configure from camel-castor, that end users is likely going to need.
CAMEL-11924 DOAP has moved https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob_plain;f=doap.rdf;hb=HEAD no longer exists.Please fix the reference at:https://svn.apache.org/repos/asf/comdev/projects.apache.org/data/projects.xml Task DOAP has moved https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob_plain;f=doap.rdf;hb=HEAD no longer exists.Please fix the reference at:https://svn.apache.org/repos/asf/comdev/projects.apache.org/data/projects.xml
CAMEL-11911 Setup CI server to build 2.20.x SNAPSHOT builds We should have a job for 2.20.x branch here with .notest and fulltest like the other older brancheshttps://builds.apache.org/view/A-D/view/Camel/ Task Setup CI server to build 2.20.x SNAPSHOT builds We should have a job for 2.20.x branch here with .notest and fulltest like the other older brancheshttps://builds.apache.org/view/A-D/view/Camel/
CAMEL-11908 camel-swagger-java to support example values The camel-swagger-java component does not support OpenAPI spec 3 and it's ability to use an example value for certain fields: https://swagger.io/docs/specification/adding-examples/Please add support for this. Improvement camel-swagger-java to support example values The camel-swagger-java component does not support OpenAPI spec 3 and it's ability to use an example value for certain fields: https://swagger.io/docs/specification/adding-examples/Please add support for this.
CAMEL-11903 camel-checkstyle.xml - Should say Camel instead of ActiveMQ Very easyThis line should say Camel instead of ActiveMQhttps://github.com/apache/camel/blob/master/buildingtools/camel-checkstyle.xml#L25 Task camel-checkstyle.xml - Should say Camel instead of ActiveMQ Very easyThis line should say Camel instead of ActiveMQhttps://github.com/apache/camel/blob/master/buildingtools/camel-checkstyle.xml#L25
CAMEL-11895 camel-hystrix - Expose state of circuit breaker on JMX / processor We should grab the CB state and provide information if its open or closed. The state we have is only isOpen or not (from hystrix itself) Improvement camel-hystrix - Expose state of circuit breaker on JMX / processor We should grab the CB state and provide information if its open or closed. The state we have is only isOpen or not (from hystrix itself)
CAMEL-11890 camel-connector - Use JSon parser to parse the camel-connector-schema.json We should use the improved json parser in camel-connector base component as we can use the json parser provided OOTB from camel-core via the json-simple that is embedded.Also there was a little glitch in the camel-connector ConnectorModel that needed to be corrected  in regards to connectorOptions Improvement camel-connector - Use JSon parser to parse the camel-connector-schema.json We should use the improved json parser in camel-connector base component as we can use the json parser provided OOTB from camel-core via the json-simple that is embedded.Also there was a little glitch in the camel-connector ConnectorModel that needed to be corrected  in regards to connectorOptions
CAMEL-11885 Add support for creating folder by path in camel-box Add possibility to specify folder by path as String[] when creating folders in Box, similarly to getFolder. It makes creation of nested folders in routes much easier.Note that createFolder(String, String[]) doesn't throw exception when folders exists unlike createFolder(String, String). This can be argued, but mimics the behaviour of, e.g., mkdir on Linux.{{$ mkdir foo$ mkdir foomkdir: foo: File exists$ mkdir -p foo/bar$ mkdir -p foo/bar$ }}Patch will follow. Improvement Add support for creating folder by path in camel-box Add possibility to specify folder by path as String[] when creating folders in Box, similarly to getFolder. It makes creation of nested folders in routes much easier.Note that createFolder(String, String[]) doesn't throw exception when folders exists unlike createFolder(String, String). This can be argued, but mimics the behaviour of, e.g., mkdir on Linux.{{$ mkdir foo$ mkdir foomkdir: foo: File exists$ mkdir -p foo/bar$ mkdir -p foo/bar$ }}Patch will follow.
CAMEL-11883 New arguments to createGroup unintentionally made mandatory Discovered during integration testing that I unintentionally made the additional arguments to BoxGroup.createGroup mandatory.Pull request follows promptly. Task New arguments to createGroup unintentionally made mandatory Discovered during integration testing that I unintentionally made the additional arguments to BoxGroup.createGroup mandatory.Pull request follows promptly.
CAMEL-11880 Use full version of BoxGroup.createGroup in camel-box Use full version of BoxGroup.createGroup in camel-box in order to support optional additional options.Pull request will follow shortly. Improvement Use full version of BoxGroup.createGroup in camel-box Use full version of BoxGroup.createGroup in camel-box in order to support optional additional options.Pull request will follow shortly.
CAMEL-11875 Add support for BoxGroup.updateInfo in camel-box Add support for BoxGroup.updateInfo as updateGroupInfo in camel-box.Pull request will follow shortly.Note: I am still unable to run the integration tests against a Box enterprise account. I hope to have that sorted soon so I can verify those as well. Meanwhile, I hope some else has that possibility. Improvement Add support for BoxGroup.updateInfo in camel-box Add support for BoxGroup.updateInfo as updateGroupInfo in camel-box.Pull request will follow shortly.Note: I am still unable to run the integration tests against a Box enterprise account. I hope to have that sorted soon so I can verify those as well. Meanwhile, I hope some else has that possibility.
CAMEL-11872 Handle MIME folded and MIME encoded email headers Email headers copied into camel headers could be MIME folded (field > 76 chars) and/or MIME encoded (non-ASCII). Unfold and decode before setting the headers. Improvement Handle MIME folded and MIME encoded email headers Email headers copied into camel headers could be MIME folded (field > 76 chars) and/or MIME encoded (non-ASCII). Unfold and decode before setting the headers.
CAMEL-11862 Convert to requested type values retrieved from the repository Try to convert values resolved from the registry to the requested type.Currently if a component parameter is specified directly in the URI or using the properties component it is converted to the type required by the component if possible:e.g.{code}"seda:s?concurrentConsumers=1""seda:s?concurrentConsumers={{threadCount}}"{code}work OK, the String property is converted to Integer.However if the parameter is a registry reference no conversion takes place:e.g{code}"seda:s?concurrentConsumers=#threadCount" {code}fails if the values stored in the registry is a String, the value is not converted to Integer Improvement Convert to requested type values retrieved from the repository Try to convert values resolved from the registry to the requested type.Currently if a component parameter is specified directly in the URI or using the properties component it is converted to the type required by the component if possible:e.g.{code}"seda:s?concurrentConsumers=1""seda:s?concurrentConsumers={{threadCount}}"{code}work OK, the String property is converted to Integer.However if the parameter is a registry reference no conversion takes place:e.g{code}"seda:s?concurrentConsumers=#threadCount" {code}fails if the values stored in the registry is a String, the value is not converted to Integer
CAMEL-11859 Deprecate camel-spark-rest as it does not play well in OSGi It has some static code that does not play very well in OSGi Sub-task Deprecate camel-spark-rest as it does not play well in OSGi It has some static code that does not play very well in OSGi
CAMEL-11845 Migrate easymock and powermock to mockito We want to only use one kind of mock testing library. They are a pain to maintain and too much fuzz/magic going on. The majority is using mockito, and its more popular.Contributions is welcome to migrate the components that uses easymock or powermock Test Migrate easymock and powermock to mockito We want to only use one kind of mock testing library. They are a pain to maintain and too much fuzz/magic going on. The majority is using mockito, and its more popular.Contributions is welcome to migrate the components that uses easymock or powermock
CAMEL-11836 Upgrade to Jetty 9.4.x We are using Jetty 9.3.x by default, but we should upgrade to Jetty 9.4.x and try to be compatible with 9.3 so it can run on older Karaf versions etc. Improvement Upgrade to Jetty 9.4.x We are using Jetty 9.3.x by default, but we should upgrade to Jetty 9.4.x and try to be compatible with 9.3 so it can run on older Karaf versions etc.
CAMEL-11832 camel-aws - Add support for Lambda We should make it easier to use AWS Lambdas with Apache Camel.There is a little example herehttps://github.com/garciapau/LambdaRidingCamelIf we could make that more like a native Camel component so you can just do a Camel route or something with from aws-lambda:xxx to xxx etc. New Feature camel-aws - Add support for Lambda We should make it easier to use AWS Lambdas with Apache Camel.There is a little example herehttps://github.com/garciapau/LambdaRidingCamelIf we could make that more like a native Camel component so you can just do a Camel route or something with from aws-lambda:xxx to xxx etc.
CAMEL-11831 [example] twitter-websocket, twitter-websocket-blueprint - http://localhost:9090/index.html returns empty page Literally empty, even HTML tag is not found. Sub-task [example] twitter-websocket, twitter-websocket-blueprint - http://localhost:9090/index.html returns empty page Literally empty, even HTML tag is not found.
CAMEL-11830 [example] sql - no application log on karaf On karaf, 4.1.1 bundle successfully starts but no application log{code}2017-09-24 21:32:19,327 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 | Starting bundles:2017-09-24 21:32:19,333 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.aopalliance/1.0.0.62017-09-24 21:32:19,334 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-core/4.3.5.RELEASE_12017-09-24 21:32:19,335 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-beans/4.3.5.RELEASE_12017-09-24 21:32:19,336 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-aop/4.3.5.RELEASE_12017-09-24 21:32:19,338 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-expression/4.3.5.RELEASE_12017-09-24 21:32:19,339 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-context/4.3.5.RELEASE_12017-09-24 21:32:19,340 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-tx/4.3.5.RELEASE_12017-09-24 21:32:19,341 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-jdbc/4.3.5.RELEASE_12017-09-24 21:32:19,341 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-context-support/4.3.5.RELEASE_12017-09-24 21:32:19,342 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-core/2.20.0.SNAPSHOT2017-09-24 21:32:19,344 | INFO  | pool-3-thread-1  | Activator                        | 54 - org.apache.camel.camel-core - 2.20.0.SNAPSHOT | Camel activator starting2017-09-24 21:32:19,350 | INFO  | pool-3-thread-1  | Activator                        | 54 - org.apache.camel.camel-core - 2.20.0.SNAPSHOT | Camel activator started2017-09-24 21:32:19,364 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-spring/2.20.0.SNAPSHOT2017-09-24 21:32:19,368 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-sql/2.20.0.SNAPSHOT2017-09-24 21:32:19,370 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.geronimo.specs.geronimo-jta_1.1_spec/1.1.12017-09-24 21:32:19,371 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-blueprint/2.20.0.SNAPSHOT2017-09-24 21:32:19,380 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-commands-core/2.20.0.SNAPSHOT2017-09-24 21:32:19,381 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.commons.pool2/2.4.22017-09-24 21:32:19,382 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.karaf.camel-karaf-commands/2.20.0.SNAPSHOT2017-09-24 21:32:19,398 | INFO  | pool-3-thread-1  | CommandExtension                 | 42 - org.apache.karaf.shell.core - 4.1.1 | Registering commands for bundle org.apache.camel.karaf.camel-karaf-commands/2.20.0.SNAPSHOT2017-09-24 21:32:19,399 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   derby/10.11.1000001.16165462017-09-24 21:32:19,506 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.commons.dbcp2/2.1.12017-09-24 21:32:19,507 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   camel-example-sql/2.20.0.SNAPSHOT2017-09-24 21:32:19,509 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 | Done.{code} Sub-task [example] sql - no application log on karaf On karaf, 4.1.1 bundle successfully starts but no application log{code}2017-09-24 21:32:19,327 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 | Starting bundles:2017-09-24 21:32:19,333 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.aopalliance/1.0.0.62017-09-24 21:32:19,334 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-core/4.3.5.RELEASE_12017-09-24 21:32:19,335 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-beans/4.3.5.RELEASE_12017-09-24 21:32:19,336 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-aop/4.3.5.RELEASE_12017-09-24 21:32:19,338 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-expression/4.3.5.RELEASE_12017-09-24 21:32:19,339 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-context/4.3.5.RELEASE_12017-09-24 21:32:19,340 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-tx/4.3.5.RELEASE_12017-09-24 21:32:19,341 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-jdbc/4.3.5.RELEASE_12017-09-24 21:32:19,341 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.servicemix.bundles.spring-context-support/4.3.5.RELEASE_12017-09-24 21:32:19,342 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-core/2.20.0.SNAPSHOT2017-09-24 21:32:19,344 | INFO  | pool-3-thread-1  | Activator                        | 54 - org.apache.camel.camel-core - 2.20.0.SNAPSHOT | Camel activator starting2017-09-24 21:32:19,350 | INFO  | pool-3-thread-1  | Activator                        | 54 - org.apache.camel.camel-core - 2.20.0.SNAPSHOT | Camel activator started2017-09-24 21:32:19,364 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-spring/2.20.0.SNAPSHOT2017-09-24 21:32:19,368 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-sql/2.20.0.SNAPSHOT2017-09-24 21:32:19,370 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.geronimo.specs.geronimo-jta_1.1_spec/1.1.12017-09-24 21:32:19,371 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-blueprint/2.20.0.SNAPSHOT2017-09-24 21:32:19,380 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.camel-commands-core/2.20.0.SNAPSHOT2017-09-24 21:32:19,381 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.commons.pool2/2.4.22017-09-24 21:32:19,382 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.camel.karaf.camel-karaf-commands/2.20.0.SNAPSHOT2017-09-24 21:32:19,398 | INFO  | pool-3-thread-1  | CommandExtension                 | 42 - org.apache.karaf.shell.core - 4.1.1 | Registering commands for bundle org.apache.camel.karaf.camel-karaf-commands/2.20.0.SNAPSHOT2017-09-24 21:32:19,399 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   derby/10.11.1000001.16165462017-09-24 21:32:19,506 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   org.apache.commons.dbcp2/2.1.12017-09-24 21:32:19,507 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 |   camel-example-sql/2.20.0.SNAPSHOT2017-09-24 21:32:19,509 | INFO  | pool-3-thread-1  | FeaturesServiceImpl              | 9 - org.apache.karaf.features.core - 4.1.1 | Done.{code}
CAMEL-11828 [example] camel context doesn't start on some examples Camel context doesn't start on following examples:* loadbalancing* route-throttling *fixed** splunk *fixed** widget-gadget-java* widget-gadget-xml Sub-task [example] camel context doesn't start on some examples Camel context doesn't start on following examples:* loadbalancing* route-throttling *fixed** splunk *fixed** widget-gadget-java* widget-gadget-xml
CAMEL-11827 [example] spring-boot-servicecall - service1 returns 404 not found {code}$ curl localhost:8080/camel/serviceCall/service1org.apache.camel.http.common.HttpOperationFailedException: HTTP operation failed invoking http://localhost:9011/ with statusCode: 404	at org.apache.camel.component.undertow.UndertowClientCallback.lambda$setupResponseListener$2(UndertowClientCallback.java:232)	at org.apache.camel.component.undertow.UndertowClientCallback$ErrorHandlingClientCallback.completed(UndertowClientCallback.java:86)	at io.undertow.client.http.HttpClientExchange.setResponse(HttpClientExchange.java:125)	at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:647)	at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:516)	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92)	at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66)	at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88)	at org.xnio.nio.WorkerThread.run(WorkerThread.java:561){code} Sub-task [example] spring-boot-servicecall - service1 returns 404 not found {code}$ curl localhost:8080/camel/serviceCall/service1org.apache.camel.http.common.HttpOperationFailedException: HTTP operation failed invoking http://localhost:9011/ with statusCode: 404	at org.apache.camel.component.undertow.UndertowClientCallback.lambda$setupResponseListener$2(UndertowClientCallback.java:232)	at org.apache.camel.component.undertow.UndertowClientCallback$ErrorHandlingClientCallback.completed(UndertowClientCallback.java:86)	at io.undertow.client.http.HttpClientExchange.setResponse(HttpClientExchange.java:125)	at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:647)	at io.undertow.client.http.HttpClientConnection$ClientReadListener.handleEvent(HttpClientConnection.java:516)	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92)	at org.xnio.conduits.ReadReadyHandler$ChannelListenerHandler.readReady(ReadReadyHandler.java:66)	at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88)	at org.xnio.nio.WorkerThread.run(WorkerThread.java:561){code}
CAMEL-11826 [example] hystrix, opentracing - spring-boot:run throws NPE {code}2017-09-22 20:16:29.684 ERROR 19603 --- [           main] o.s.boot.SpringApplication               : Application startup failedorg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cacheAutoConfigurationValidatorPostProcessor' defined in class path resource [org/apache/camel/component/http/springboot/HttpComponentSSLAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheAutoConfigurationValidatorPostProcessor' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'routesHealthCheckRepository' defined in class path resource [org/apache/camel/spring/boot/health/HealthCheckRoutesAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.health.HealthCheckRepository]: Factory method 'routesHealthCheckRepository' threw exception; nested exception is java.lang.NullPointerException	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE].....Caused by: java.lang.NullPointerException: null	at org.apache.camel.spring.boot.health.HealthCheckRoutesAutoConfiguration.routesHealthCheckRepository(HealthCheckRoutesAutoConfiguration.java:50) ~[camel-spring-boot-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.spring.boot.health.HealthCheckRoutesAutoConfiguration$$EnhancerBySpringCGLIB$$aa43f327.CGLIB$routesHealthCheckRepository$0(<generated>) ~[camel-spring-boot-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT].....{code} Sub-task [example] hystrix, opentracing - spring-boot:run throws NPE {code}2017-09-22 20:16:29.684 ERROR 19603 --- [           main] o.s.boot.SpringApplication               : Application startup failedorg.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'cacheAutoConfigurationValidatorPostProcessor' defined in class path resource [org/apache/camel/component/http/springboot/HttpComponentSSLAutoConfiguration.class]: Unsatisfied dependency expressed through method 'cacheAutoConfigurationValidatorPostProcessor' parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext' defined in class path resource [org/apache/camel/spring/boot/CamelAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.CamelContext]: Factory method 'camelContext' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'routesHealthCheckRepository' defined in class path resource [org/apache/camel/spring/boot/health/HealthCheckRoutesAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.health.HealthCheckRepository]: Factory method 'routesHealthCheckRepository' threw exception; nested exception is java.lang.NullPointerException	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:749) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE]	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:467) ~[spring-beans-4.3.11.RELEASE.jar:4.3.11.RELEASE].....Caused by: java.lang.NullPointerException: null	at org.apache.camel.spring.boot.health.HealthCheckRoutesAutoConfiguration.routesHealthCheckRepository(HealthCheckRoutesAutoConfiguration.java:50) ~[camel-spring-boot-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.spring.boot.health.HealthCheckRoutesAutoConfiguration$$EnhancerBySpringCGLIB$$aa43f327.CGLIB$routesHealthCheckRepository$0(<generated>) ~[camel-spring-boot-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT].....{code}
CAMEL-11825 [example] etl - unable to resolve dependency on karaf {code}karaf@root()> feature:repo-add camel 2.20.0-SNAPSHOT                                                  Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.20.0-SNAPSHOT/xml/featureskaraf@root()> feature:install camelkaraf@root()> feature:repo-add mvn:org.apache.camel.example/camel-example-etl/2.20.0-SNAPSHOT/xml/featuresAdding feature url mvn:org.apache.camel.example/camel-example-etl/2.20.0-SNAPSHOT/xml/featureskaraf@root()> feature:install camel-example-etlError executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-example-etl; type=karaf.feature; version="[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]"; filter:="(&(osgi.identity=camel-example-etl)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))" [caused by: Unable to resolve camel-example-etl/2.20.0.SNAPSHOT: missing requirement [camel-example-etl/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=camel-example-etl; type=osgi.bundle; version="[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]"; resolution:=mandatory [caused by: Unable to resolve camel-example-etl/2.20.0.SNAPSHOT: missing requirement [camel-example-etl/2.20.0.SNAPSHOT] osgi.wiring.package; filter:="(&(osgi.wiring.package=org.apache.openjpa.enhance)(version>=2.4.0)(!(version>=3.0.0)))" [caused by: Unable to resolve org.apache.openjpa/2.4.2: missing requirement [org.apache.openjpa/2.4.2] osgi.wiring.package; filter:="(osgi.wiring.package=org.apache.commons.dbcp)"]]]{code} Sub-task [example] etl - unable to resolve dependency on karaf {code}karaf@root()> feature:repo-add camel 2.20.0-SNAPSHOT                                                  Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.20.0-SNAPSHOT/xml/featureskaraf@root()> feature:install camelkaraf@root()> feature:repo-add mvn:org.apache.camel.example/camel-example-etl/2.20.0-SNAPSHOT/xml/featuresAdding feature url mvn:org.apache.camel.example/camel-example-etl/2.20.0-SNAPSHOT/xml/featureskaraf@root()> feature:install camel-example-etlError executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-example-etl; type=karaf.feature; version="[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]"; filter:="(&(osgi.identity=camel-example-etl)(type=karaf.feature)(version>=2.20.0.SNAPSHOT)(version<=2.20.0.SNAPSHOT))" [caused by: Unable to resolve camel-example-etl/2.20.0.SNAPSHOT: missing requirement [camel-example-etl/2.20.0.SNAPSHOT] osgi.identity; osgi.identity=camel-example-etl; type=osgi.bundle; version="[2.20.0.SNAPSHOT,2.20.0.SNAPSHOT]"; resolution:=mandatory [caused by: Unable to resolve camel-example-etl/2.20.0.SNAPSHOT: missing requirement [camel-example-etl/2.20.0.SNAPSHOT] osgi.wiring.package; filter:="(&(osgi.wiring.package=org.apache.openjpa.enhance)(version>=2.4.0)(!(version>=3.0.0)))" [caused by: Unable to resolve org.apache.openjpa/2.4.2: missing requirement [org.apache.openjpa/2.4.2] osgi.wiring.package; filter:="(osgi.wiring.package=org.apache.commons.dbcp)"]]]{code}
CAMEL-11824 [example] cxf-proxy, loan-broker-cxf - port 1101/1102 is unexpectedly used target/classes/incident.properties is not effective, not sure which one of that and target/custom.properties should be. If it's using expected port then update README{code}INFO: Setting the server's publish address to be http://localhost:1102/real-webserviceINFO: Setting the server's publish address to be http://localhost:1101/camel-example-cxf-proxy/webservices/incident{code} Sub-task [example] cxf-proxy, loan-broker-cxf - port 1101/1102 is unexpectedly used target/classes/incident.properties is not effective, not sure which one of that and target/custom.properties should be. If it's using expected port then update README{code}INFO: Setting the server's publish address to be http://localhost:1102/real-webserviceINFO: Setting the server's publish address to be http://localhost:1101/camel-example-cxf-proxy/webservices/incident{code}
CAMEL-11822 Upgade jaxb-core We are using 2.2.11 but there is a newer 2.3.0 release out. Task Upgade jaxb-core We are using 2.2.11 but there is a newer 2.3.0 release out.
CAMEL-11821 camel-xstream - tests should initialize xstream When testing camel-xstream we see these kind printed{code}[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 s - in org.apache.camel.dataformat.xstream.XStreamDataFormatPermissionsSystemPropertyTest[INFO] Running org.apache.camel.dataformat.xstream.XStreamDataFormatPermissionsTestSecurity framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.{code}It would be good to investigate and see if its the unit test, or something extra we need to do in camel-xstream Task camel-xstream - tests should initialize xstream When testing camel-xstream we see these kind printed{code}[INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.08 s - in org.apache.camel.dataformat.xstream.XStreamDataFormatPermissionsSystemPropertyTest[INFO] Running org.apache.camel.dataformat.xstream.XStreamDataFormatPermissionsTestSecurity framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.Security framework of XStream not initialized, XStream is probably vulnerable.{code}It would be good to investigate and see if its the unit test, or something extra we need to do in camel-xstream
CAMEL-11819 camel-velocity - Upgrade to 2.x There is a 2.0 release - the old 1.7 release is very old.Contributions is welcomehttp://camel.apache.org/contributing Improvement camel-velocity - Upgrade to 2.x There is a 2.0 release - the old 1.7 release is very old.Contributions is welcomehttp://camel.apache.org/contributing
CAMEL-11812 spring-boot-starter - Unit test fail in netty The netty-http-starter fails unit test with a NPE Test spring-boot-starter - Unit test fail in netty The netty-http-starter fails unit test with a NPE
CAMEL-11808 log4j2 2.9 upgrade causes errors in camel-salesforce and others [12:28:26]  <tdiesler> davsclaus, master build fails with [ERROR] Failed to execute goal org.apache.maven.plugins:maven-plugin-plugin:3.4:helpmojo (help-goal) on project camel-salesforce-maven-plugin: Execution help-goal of goal org.apache.maven.plugins:maven-plugin-plugin:3.4:helpmojo failed. IllegalArgumentException -> [Help 1] Task log4j2 2.9 upgrade causes errors in camel-salesforce and others [12:28:26]  <tdiesler> davsclaus, master build fails with [ERROR] Failed to execute goal org.apache.maven.plugins:maven-plugin-plugin:3.4:helpmojo (help-goal) on project camel-salesforce-maven-plugin: Execution help-goal of goal org.apache.maven.plugins:maven-plugin-plugin:3.4:helpmojo failed. IllegalArgumentException -> [Help 1]
CAMEL-11805 Upgrade to Apache Ignite 2.x Last version is 2.2.0, we are on 1.9.0 Task Upgrade to Apache Ignite 2.x Last version is 2.2.0, we are on 1.9.0
CAMEL-11804 Add tests that check DESTINATION_OVERRIDE_URL New unit test cases need to be added in CxfRsProducerAddressOverrideTest Test Add tests that check DESTINATION_OVERRIDE_URL New unit test cases need to be added in CxfRsProducerAddressOverrideTest
CAMEL-11796 Add headerName option to jsonpath expression See SOhttps://stackoverflow.com/questions/46325718/extract-value-from-json-array-in-apachecamel-header Improvement Add headerName option to jsonpath expression See SOhttps://stackoverflow.com/questions/46325718/extract-value-from-json-array-in-apachecamel-header
CAMEL-11786 Component docs - Generated docs should be in proper ascii doc format Documentation tooling - Should generate in more correct ascii doc format (was using deprecated or markdown style) Task Component docs - Generated docs should be in proper ascii doc format Documentation tooling - Should generate in more correct ascii doc format (was using deprecated or markdown style)
CAMEL-11783 Updates to http://camel.apache.org/rest-dsl.html The page http://camel.apache.org/rest-dsl.html is a bit out of date.Specifically, "corsHeaderProperty" is now called "corsHeaders".Also there's a new "apiProperty" not yet documented.In addition it'd be good to clarify that for PUT and POST, the request body will by default be also the HTTP response. It's sort of normal with Camel, but not what one would expect when using the Rest DSL. Might want to show an example of how to empty the body for a <put>. Improvement Updates to http://camel.apache.org/rest-dsl.html The page http://camel.apache.org/rest-dsl.html is a bit out of date.Specifically, "corsHeaderProperty" is now called "corsHeaders".Also there's a new "apiProperty" not yet documented.In addition it'd be good to clarify that for PUT and POST, the request body will by default be also the HTTP response. It's sort of normal with Camel, but not what one would expect when using the Rest DSL. Might want to show an example of how to empty the body for a <put>.
CAMEL-11781 Support BoxUser.moveFolderToUser in camel-box We are currently implementing an Box enterprise account integration using camel-box. When deleting accounts we need support for the BoxUser.moveFolderToUser in camel-box in order to transfer the data of the account elsewhere before deletion, similar to how the Box user interface works when deleting users.I'll register a GitHub pull-request with a suggested implementation shortly. Improvement Support BoxUser.moveFolderToUser in camel-box We are currently implementing an Box enterprise account integration using camel-box. When deleting accounts we need support for the BoxUser.moveFolderToUser in camel-box in order to transfer the data of the account elsewhere before deletion, similar to how the Box user interface works when deleting users.I'll register a GitHub pull-request with a suggested implementation shortly.
CAMEL-11778 New camel-ldif component I've created a new component to process LDIF files. This is to process update changes to LDAP servers. I've attached a diff file against the Camel git repository.Please let me know if this is okay or any changes need to be made. I'm happy to fix them up. New Feature New camel-ldif component I've created a new component to process LDIF files. This is to process update changes to LDAP servers. I've attached a diff file against the Camel git repository.Please let me know if this is okay or any changes need to be made. I'm happy to fix them up.
CAMEL-11777 Transactional hazelcast:seda component uses not transaction aware queue As mentioned in docs http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interfaceData structures should be transaction-aware and initialized inside of transaction context. Now hazelcast seda component uses queue initialized externally for the transaction. So when we rollback transaction - things stay the same like we already committed changes (this simply noop).Patch should look like (but exactly this version fails tests, so I should investigate more){code:none}index 7e3b24cc8f..cebd69ce16 100644--- a/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java+++ b/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java@@ -16,10 +16,10 @@  */ package org.apache.camel.component.hazelcast.seda; -import java.util.concurrent.BlockingQueue; import java.util.concurrent.ExecutorService; import java.util.concurrent.TimeUnit; +import com.hazelcast.core.BaseQueue; import com.hazelcast.transaction.TransactionContext;  import org.apache.camel.AsyncCallback;@@ -71,7 +71,7 @@ public class HazelcastSedaConsumer extends DefaultConsumer implements Runnable {     }      public void run() {-        final BlockingQueue<?> queue = endpoint.getQueue();+        BaseQueue<?> queue = endpoint.getHazelcastInstance().getQueue(endpoint.getConfiguration().getQueueName());          while (queue != null && isRunAllowed()) {             final Exchange exchange = this.getEndpoint().createExchange();@@ -85,6 +85,7 @@ public class HazelcastSedaConsumer extends DefaultConsumer implements Runnable {                     if (transactionCtx != null) {                         log.trace("Begin transaction: {}", transactionCtx.getTxnId());                         transactionCtx.beginTransaction();+                        queue = transactionCtx.getQueue(endpoint.getConfiguration().getQueueName());                     }                 } {code} Improvement Transactional hazelcast:seda component uses not transaction aware queue As mentioned in docs http://docs.hazelcast.org/docs/3.8.4/manual/html-single/index.html#creating-a-transaction-interfaceData structures should be transaction-aware and initialized inside of transaction context. Now hazelcast seda component uses queue initialized externally for the transaction. So when we rollback transaction - things stay the same like we already committed changes (this simply noop).Patch should look like (but exactly this version fails tests, so I should investigate more){code:none}index 7e3b24cc8f..cebd69ce16 100644--- a/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java+++ b/components/camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java@@ -16,10 +16,10 @@  */ package org.apache.camel.component.hazelcast.seda; -import java.util.concurrent.BlockingQueue; import java.util.concurrent.ExecutorService; import java.util.concurrent.TimeUnit; +import com.hazelcast.core.BaseQueue; import com.hazelcast.transaction.TransactionContext;  import org.apache.camel.AsyncCallback;@@ -71,7 +71,7 @@ public class HazelcastSedaConsumer extends DefaultConsumer implements Runnable {     }      public void run() {-        final BlockingQueue<?> queue = endpoint.getQueue();+        BaseQueue<?> queue = endpoint.getHazelcastInstance().getQueue(endpoint.getConfiguration().getQueueName());          while (queue != null && isRunAllowed()) {             final Exchange exchange = this.getEndpoint().createExchange();@@ -85,6 +85,7 @@ public class HazelcastSedaConsumer extends DefaultConsumer implements Runnable {                     if (transactionCtx != null) {                         log.trace("Begin transaction: {}", transactionCtx.getTxnId());                         transactionCtx.beginTransaction();+                        queue = transactionCtx.getQueue(endpoint.getConfiguration().getQueueName());                     }                 } {code}
CAMEL-11775 Upgrade to Spring Boot 1.5.7 or better There is a issue with downloading 1.5.7 from maven central for people, so we have reverted the upgrade.When maven is okay again we can revert the commits so we are upgrading. Task Upgrade to Spring Boot 1.5.7 or better There is a issue with downloading 1.5.7 from maven central for people, so we have reverted the upgrade.When maven is okay again we can revert the commits so we are upgrading.
CAMEL-11773 Popup message about SyntaxHiglighter when accessing camel 2.20 release note page http://camel.apache.org/camel-2200-release.html!screenshot-1.png! Task Popup message about SyntaxHiglighter when accessing camel 2.20 release note page http://camel.apache.org/camel-2200-release.html!screenshot-1.png!
CAMEL-11756 camel-spring-boot2 - Create experimental spring boot 2 component We should try get started with the migration effort for getting Camel running on Spring Boot 2.0.x.There may be issues with the starter component as Spring Boot guys changed stuff how auto configuration and setting properties works. So we may need to have some kind of interface in camel-spring-boot and camel-spring-boot2 where we can have different implementation that the -starter can use. Task camel-spring-boot2 - Create experimental spring boot 2 component We should try get started with the migration effort for getting Camel running on Spring Boot 2.0.x.There may be issues with the starter component as Spring Boot guys changed stuff how auto configuration and setting properties works. So we may need to have some kind of interface in camel-spring-boot and camel-spring-boot2 where we can have different implementation that the -starter can use.
CAMEL-11755 toD should ignore when dynamic uri is empty So you can evaluate the endpoint to be null/empty and then do not send the message anywhere. Currently it will fail with a no type converter error which is not so intuitive why Improvement toD should ignore when dynamic uri is empty So you can evaluate the endpoint to be null/empty and then do not send the message anywhere. Currently it will fail with a no type converter error which is not so intuitive why
CAMEL-11752 camel-spring-boot : improve handling classic spring xml with spring-boot   Within a spring-boot based application it is possible to load spring xml based camel context but that's may cause issues as spring boot won't create and configure a camel context but it will be created by the camel-spring based on the xml file so any context configuration one may expect to tweak via spring-boot properties won't be taken into account.An example can be found here: https://github.com/lburgazzoli/camel-spring-xml were as example, the set the camel context name with the property camel.springboot.name does not work but the camel context will be named according to the spring-xml file.  Improvement camel-spring-boot : improve handling classic spring xml with spring-boot   Within a spring-boot based application it is possible to load spring xml based camel context but that's may cause issues as spring boot won't create and configure a camel context but it will be created by the camel-spring based on the xml file so any context configuration one may expect to tweak via spring-boot properties won't be taken into account.An example can be found here: https://github.com/lburgazzoli/camel-spring-xml were as example, the set the camel context name with the property camel.springboot.name does not work but the camel context will be named according to the spring-xml file. 
CAMEL-11749 NoTypeConversionAvailableException in wiretap # Clone https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot# Add _CamelLogger.java_ with contents below to _src/main/java/org/apache/camel/examples_{code:title=CamelLogger.java}package org.apache.camel.examples;import org.apache.camel.Exchange;import org.apache.camel.Processor;import org.springframework.stereotype.Component;@Componentpublic class CamelLogger implements Processor {    @Override    public void process(Exchange exchange) {        System.err.println(exchange.getIn().getBody());    }}{code}Changing _SampleCamelRouter_ to{code:java}@Componentpublic class SampleCamelRouter extends RouteBuilder {    @Override    public void configure() throws Exception {        from("timer:hello?period={{timer.period}}")                .transform(method("myBean", "saySomething"))                .wireTap("bean:camelLogger")                .to("stream:out");    }}{code}Fails with stacktrace{noformat}Stacktrace---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: null to the required type: java.lang.String with value null	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:206) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:144) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:104) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:158) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:153) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_144]	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]{noformat}With Camel 2.15.5 or with _SampleCamelRouter_ of content below, exception doesn't occur.{code:java}@Componentpublic class SampleCamelRouter extends RouteBuilder {    @Resource CamelLogger camelLogger;    @Override    public void configure() throws Exception {        from("timer:hello?period={{timer.period}}")                .transform(method("myBean", "saySomething"))                .wireTap("direct:logging")                .to("stream:out");        from("direct:logging").process(camelLogger);    }}{code}I didn't see anything in release notes in 2.16, 2.17, 2.18, or 2.19 that would indicate there's a change in behavior from 2.15 in this regard.  Either this is a bug that should be fixed, or the change in behavior should be documented. Improvement NoTypeConversionAvailableException in wiretap # Clone https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot# Add _CamelLogger.java_ with contents below to _src/main/java/org/apache/camel/examples_{code:title=CamelLogger.java}package org.apache.camel.examples;import org.apache.camel.Exchange;import org.apache.camel.Processor;import org.springframework.stereotype.Component;@Componentpublic class CamelLogger implements Processor {    @Override    public void process(Exchange exchange) {        System.err.println(exchange.getIn().getBody());    }}{code}Changing _SampleCamelRouter_ to{code:java}@Componentpublic class SampleCamelRouter extends RouteBuilder {    @Override    public void configure() throws Exception {        from("timer:hello?period={{timer.period}}")                .transform(method("myBean", "saySomething"))                .wireTap("bean:camelLogger")                .to("stream:out");    }}{code}Fails with stacktrace{noformat}Stacktrace---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: null to the required type: java.lang.String with value null	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:206) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:144) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:104) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:158) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:153) [camel-core-2.20.0-20170905.112154-218.jar:2.20.0-SNAPSHOT]	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_144]	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_144]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_144]	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_144]{noformat}With Camel 2.15.5 or with _SampleCamelRouter_ of content below, exception doesn't occur.{code:java}@Componentpublic class SampleCamelRouter extends RouteBuilder {    @Resource CamelLogger camelLogger;    @Override    public void configure() throws Exception {        from("timer:hello?period={{timer.period}}")                .transform(method("myBean", "saySomething"))                .wireTap("direct:logging")                .to("stream:out");        from("direct:logging").process(camelLogger);    }}{code}I didn't see anything in release notes in 2.16, 2.17, 2.18, or 2.19 that would indicate there's a change in behavior from 2.15 in this regard.  Either this is a bug that should be fixed, or the change in behavior should be documented.
CAMEL-11747 Change SupervisingRouteControllerRestartTest to not use Jetty in test This test is slow and flaky as it fails with port number in use errors etc{code}[ERROR] Errors:[ERROR] org.apache.camel.spring.boot.SupervisingRouteControllerRestartTest.test(org.apache.camel.spring.boot.SupervisingRouteControllerRestartTest)[ERROR]   Run 1: SupervisingRouteControllerRestartTest.test:98[ERROR]   Run 2: SupervisingRouteControllerRestartTest.test:98[ERROR]   Run 3: SupervisingRouteControllerRestartTest.test:87 » Bind Address already in use (B...[INFO][INFO][ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0{code}We should be able to change the test to not use jetty but just a seda or something so its not using a real http server (overkill). Test Change SupervisingRouteControllerRestartTest to not use Jetty in test This test is slow and flaky as it fails with port number in use errors etc{code}[ERROR] Errors:[ERROR] org.apache.camel.spring.boot.SupervisingRouteControllerRestartTest.test(org.apache.camel.spring.boot.SupervisingRouteControllerRestartTest)[ERROR]   Run 1: SupervisingRouteControllerRestartTest.test:98[ERROR]   Run 2: SupervisingRouteControllerRestartTest.test:98[ERROR]   Run 3: SupervisingRouteControllerRestartTest.test:87 >> Bind Address already in use (B...[INFO][INFO][ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0{code}We should be able to change the test to not use jetty but just a seda or something so its not using a real http server (overkill).
CAMEL-11743 camel-ldap - Make it possible to use ENV when configuring DirContext Reported on the mailing list. Improvement camel-ldap - Make it possible to use ENV when configuring DirContext Reported on the mailing list.
CAMEL-11741 [Documentation]  Correct a link  Hello,There 2 are incorrect link on this webpage : [http://camel.apache.org/contributing.html|http://camel.apache.org/contributing.html]Replace http://issues.apache.org/activemq/browse/CAMEL by https://issues.apache.org/jira/browse/CAMEL* First link :Try surfing the our <a shape="rect" class="external-link" href="http://issues.apache.org/activemq/browse/CAMEL">issue tracker</a>* Second linkBefore you can raise an issue in the<a shape="rect" class="external-link" href="http://issues.apache.org/activemq/browse/CAMEL">issue tracker</a>I have tried to edit this page but i don't have permission to access.Administration  UsersNot PermittedYou are not permitted to perform this operation.And this page "contributing" does not exist in github.Farès Task [Documentation]  Correct a link  Hello,There 2 are incorrect link on this webpage : [http://camel.apache.org/contributing.html|http://camel.apache.org/contributing.html]Replace http://issues.apache.org/activemq/browse/CAMEL by https://issues.apache.org/jira/browse/CAMEL* First link :Try surfing the our <a shape="rect" class="external-link" href="http://issues.apache.org/activemq/browse/CAMEL">issue tracker</a>* Second linkBefore you can raise an issue in the<a shape="rect" class="external-link" href="http://issues.apache.org/activemq/browse/CAMEL">issue tracker</a>I have tried to edit this page but i don't have permission to access.Administration  UsersNot PermittedYou are not permitted to perform this operation.And this page "contributing" does not exist in github.Fares
CAMEL-11740 camel-bean-validator - Should use validation 1.x api Spring Boot is using 1.1 api and we should try to align and use that as well as 2.0 is likely a bit too new Task camel-bean-validator - Should use validation 1.x api Spring Boot is using 1.1 api and we should try to align and use that as well as 2.0 is likely a bit too new
CAMEL-11739 camel-jms - Allow to configure a list of header names to preserve despite being invalid JMS spec type Some brokers like WMQ may have some special headers they want to include when routing messages, that are invalid according to JMS spec, eg they may use byte[] as the header value etc.We should have an option you can configure on the component/endpoint where you can whitelist a number of header names to allow to be included anyway. Improvement camel-jms - Allow to configure a list of header names to preserve despite being invalid JMS spec type Some brokers like WMQ may have some special headers they want to include when routing messages, that are invalid according to JMS spec, eg they may use byte[] as the header value etc.We should have an option you can configure on the component/endpoint where you can whitelist a number of header names to allow to be included anyway.
CAMEL-11738 camel-jsch - Allow to load key file from classpath See SOhttps://stackoverflow.com/questions/46001487/apache-camel-jsch-privatekeyfile-inside-jar/46011130#46011130 Improvement camel-jsch - Allow to load key file from classpath See SOhttps://stackoverflow.com/questions/46001487/apache-camel-jsch-privatekeyfile-inside-jar/46011130#46011130
CAMEL-11718 Setting camel.dataformat.json-jackson.object-mapper throws exception I wanted to reuse the Jackson object mapper used by Spring MVC but jackson json configuration via YML is not working an causing an exception{code:none}camel:  springboot:    name: ${spring.application.name}  dataformat:    json-jackson:      object-mapper: jacksonObjectMapperspring:  jackson:    property-naming-strategy: com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy    default-property-inclusion: non_null    serialization:      WRITE_DATES_AS_TIMESTAMPS: true{code}Throws the following exception:{noformat}org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToCreateRouteException: Failed to create route test-public: Route(test-public)[[From[rest:get:/test?routeId=test-public&... because of java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:225)	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:52)	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883)	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693)	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360)	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118)	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107)	at au.com.iag.payments.service.OnlinePaymentsApplicationKt.main(OnlinePaymentsApplication.kt:15)Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route test-public: Route(test-public)[[From[rest:get:/test?routeId=test-public&... because of java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:209)	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1087)	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3540)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3271)	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:202)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3089)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3085)	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3108)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3085)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3022)	at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:242)	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:217)	... 15 common frames omittedCaused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.component.jackson.springboot.JacksonDataFormatAutoConfiguration$1.newInstance(JacksonDataFormatAutoConfiguration.java:80)	at org.apache.camel.impl.DefaultDataFormatResolver.createDataFormat(DefaultDataFormatResolver.java:58)	at org.apache.camel.impl.DefaultDataFormatResolver.resolveDataFormat(DefaultDataFormatResolver.java:45)	at org.apache.camel.impl.DefaultCamelContext.resolveDataFormat(DefaultCamelContext.java:4240)	at org.apache.camel.model.rest.RestBindingDefinition.createRestBindingAdvice(RestBindingDefinition.java:122)	at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:201)	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1302)	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:204)	... 27 common frames omittedCaused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:614)	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:640)	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:497)	at org.apache.camel.component.jackson.springboot.JacksonDataFormatAutoConfiguration$1.newInstance(JacksonDataFormatAutoConfiguration.java:76)	... 34 common frames omitted{noformat}I have also tried with{code}      ...      object-mapper: "#jacksonObjectMapper"      ...{code}to give the property introspection logic a hint that it is a ref, but result is the same. Improvement Setting camel.dataformat.json-jackson.object-mapper throws exception I wanted to reuse the Jackson object mapper used by Spring MVC but jackson json configuration via YML is not working an causing an exception{code:none}camel:  springboot:    name: ${spring.application.name}  dataformat:    json-jackson:      object-mapper: jacksonObjectMapperspring:  jackson:    property-naming-strategy: com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy    default-property-inclusion: non_null    serialization:      WRITE_DATES_AS_TIMESTAMPS: true{code}Throws the following exception:{noformat}org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToCreateRouteException: Failed to create route test-public: Route(test-public)[[From[rest:get:/test?routeId=test-public&... because of java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:225)	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:52)	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:167)	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:393)	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:347)	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:883)	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)	at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693)	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360)	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118)	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107)	at au.com.iag.payments.service.OnlinePaymentsApplicationKt.main(OnlinePaymentsApplication.kt:15)Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route test-public: Route(test-public)[[From[rest:get:/test?routeId=test-public&... because of java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:209)	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1087)	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3540)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3271)	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:202)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3089)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3085)	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3108)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3085)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3022)	at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:242)	at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:217)	... 15 common frames omittedCaused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.component.jackson.springboot.JacksonDataFormatAutoConfiguration$1.newInstance(JacksonDataFormatAutoConfiguration.java:80)	at org.apache.camel.impl.DefaultDataFormatResolver.createDataFormat(DefaultDataFormatResolver.java:58)	at org.apache.camel.impl.DefaultDataFormatResolver.resolveDataFormat(DefaultDataFormatResolver.java:45)	at org.apache.camel.impl.DefaultCamelContext.resolveDataFormat(DefaultCamelContext.java:4240)	at org.apache.camel.model.rest.RestBindingDefinition.createRestBindingAdvice(RestBindingDefinition.java:122)	at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:201)	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1302)	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:204)	... 27 common frames omittedCaused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: objectMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: com.fasterxml.jackson.databind.ObjectMapper with value jacksonObjectMapper	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:614)	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:640)	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:497)	at org.apache.camel.component.jackson.springboot.JacksonDataFormatAutoConfiguration$1.newInstance(JacksonDataFormatAutoConfiguration.java:76)	... 34 common frames omitted{noformat}I have also tried with{code}      ...      object-mapper: "#jacksonObjectMapper"      ...{code}to give the property introspection logic a hint that it is a ref, but result is the same.
CAMEL-11691 Should resubscribe when reconnect MQTT There is a feature in MqttConnectOptions called setAutomaticReconnecthttps://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttConnectOptions.html#setAutomaticReconnect-boolean-But, when it reconnect, it doesn't resubscribe the topics. Paho provide a callback : MqttCallbackExtended, it got called when connect completed. So we can subscribe the topics again in that callback.https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttCallbackExtended.htmlI check camel-paho source code, seems it use MqttCallback instead MqttCallbackExtended.Can anyone implement this feature?Thanks Improvement Should resubscribe when reconnect MQTT There is a feature in MqttConnectOptions called setAutomaticReconnecthttps://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttConnectOptions.html#setAutomaticReconnect-boolean-But, when it reconnect, it doesn't resubscribe the topics. Paho provide a callback : MqttCallbackExtended, it got called when connect completed. So we can subscribe the topics again in that callback.https://www.eclipse.org/paho/files/javadoc/org/eclipse/paho/client/mqttv3/MqttCallbackExtended.htmlI check camel-paho source code, seems it use MqttCallback instead MqttCallbackExtended.Can anyone implement this feature?Thanks
CAMEL-11683 Allow bean references in to() URI As a workaround to CAMEL-11528, we tried replacing something like {code:java} from("direct:start")    .wireTap("bean:tap")    .to("mock:result");{code} with{code:java}from("direct:start")    .wiretap("direct:tap")    .to("mock:result");from("direct:tap")    .process("bean:tapper");{code}We got{noformat}Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route190 at: >>> process[ref:bean:tapper] <<< in route: Route(route190)[[From[direct:tap]] -> [OnException[[clas... because of No bean could be found in the registry for: bean:tapper of type: org.apache.camel.Processor{noformat}But if we did{code:java}public class MyRoute extends RouteBuilder {    @Resource Tapper tapper;    public void configure() throws Exception {        from("direct:start")            .wiretap("direct:tap")            .to("mock:result");        from("direct:tap")            .process(tapper);    }}@Componentpublic class Tapper implements Processor {    public void Process(Exchange exchange) {}}{code}It worked. Improvement Allow bean references in to() URI As a workaround to CAMEL-11528, we tried replacing something like {code:java} from("direct:start")    .wireTap("bean:tap")    .to("mock:result");{code} with{code:java}from("direct:start")    .wiretap("direct:tap")    .to("mock:result");from("direct:tap")    .process("bean:tapper");{code}We got{noformat}Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route190 at: >>> process[ref:bean:tapper] <<< in route: Route(route190)[[From[direct:tap]] -> [OnException[[clas... because of No bean could be found in the registry for: bean:tapper of type: org.apache.camel.Processor{noformat}But if we did{code:java}public class MyRoute extends RouteBuilder {    @Resource Tapper tapper;    public void configure() throws Exception {        from("direct:start")            .wiretap("direct:tap")            .to("mock:result");        from("direct:tap")            .process(tapper);    }}@Componentpublic class Tapper implements Processor {    public void Process(Exchange exchange) {}}{code}It worked.
CAMEL-11680 Camel-dropbox should support Put not only from localPath Currently if I want to Put file on Dropbox using Camel-Dopbox I must create temporary file, write to it using file:// and then use: {code}dropbox://put?localPath=${header.myTempFile}{code}which is tedious.Camel-dropbox should support writing directly from Exchange Improvement Camel-dropbox should support Put not only from localPath Currently if I want to Put file on Dropbox using Camel-Dopbox I must create temporary file, write to it using file:// and then use: {code}dropbox://put?localPath=${header.myTempFile}{code}which is tedious.Camel-dropbox should support writing directly from Exchange
CAMEL-11676 Upgrade HBase to 1.2.6 The current HBase release used by camel-hbase dates from 2015. 2.1.6 is available now and this seems to work a little better in module classloading environments. Improvement Upgrade HBase to 1.2.6 The current HBase release used by camel-hbase dates from 2015. 2.1.6 is available now and this seems to work a little better in module classloading environments.
CAMEL-11639 camel-jms - Add support for changing JMS message selector on consumer at runtime via jmx Currently you cannot do this. However it can be changed at runtime via spring-jms, but it requires to turn off caching, so its an advanced feature and can be slower on the consumer Improvement camel-jms - Add support for changing JMS message selector on consumer at runtime via jmx Currently you cannot do this. However it can be changed at runtime via spring-jms, but it requires to turn off caching, so its an advanced feature and can be slower on the consumer
CAMEL-11621 extend simple date formatter for properties You can use ${date:header.CamelCreatedTimestamp:yyyy-MM-dd-HH:mm:ss.SSS} to format a date header. It would be usefull the format an exchange property in the same way ${date:property.CamelCreatedTimestamp:yyyy-MM-dd-HH:mm:ss.SSS} Improvement extend simple date formatter for properties You can use ${date:header.CamelCreatedTimestamp:yyyy-MM-dd-HH:mm:ss.SSS} to format a date header. It would be usefull the format an exchange property in the same way ${date:property.CamelCreatedTimestamp:yyyy-MM-dd-HH:mm:ss.SSS}
CAMEL-11614 rest-dsl - Allow to configure api hostname So you can configure a special hostname in the returned swagger api-doc instead of a generated hostname. Improvement rest-dsl - Allow to configure api hostname So you can configure a special hostname in the returned swagger api-doc instead of a generated hostname.
CAMEL-11613 camel-spring-boot - Add auto configuration for FluentProducerTemplate You can autowire ProducerTemplate today but we miss the FluentProducerTemplate Improvement camel-spring-boot - Add auto configuration for FluentProducerTemplate You can autowire ProducerTemplate today but we miss the FluentProducerTemplate
CAMEL-11604 New method expectedPropertyValuesReceivedInAnyOrder in MockEndpoint MockEndpoint.expectedPropertyReceived always expects the property in the first exchange in the endpoint. So it does not function correctly when the endpoint expects more than one message exchange.There can be a new method introduced in MockEndpoint like expectedPropertyValuesReceivedInAnyOrder and this can be similar to expectedHeaderValuesReceivedInAnyOrder. Improvement New method expectedPropertyValuesReceivedInAnyOrder in MockEndpoint MockEndpoint.expectedPropertyReceived always expects the property in the first exchange in the endpoint. So it does not function correctly when the endpoint expects more than one message exchange.There can be a new method introduced in MockEndpoint like expectedPropertyValuesReceivedInAnyOrder and this can be similar to expectedHeaderValuesReceivedInAnyOrder.
CAMEL-11603 Netty4 consumer in clientMode=true doesn't share channel with subsequent netty4 producers using reuseChannel=true When creating a route that begins with a Netty4 consumer in clientMode=true, it doesn't share its created channel with the following netty4 producers that want to send data using the same channel, using parameter reuseChannel=true.A simple solution would be to include a parameter for the Netty4 Consumer component, and in ClientModeTCPNettyServerBootstrapFactory add something like this when channel is opened:exchange.setProperty(NettyConstants.NETTY_CHANNEL, channel); Improvement Netty4 consumer in clientMode=true doesn't share channel with subsequent netty4 producers using reuseChannel=true When creating a route that begins with a Netty4 consumer in clientMode=true, it doesn't share its created channel with the following netty4 producers that want to send data using the same channel, using parameter reuseChannel=true.A simple solution would be to include a parameter for the Netty4 Consumer component, and in ClientModeTCPNettyServerBootstrapFactory add something like this when channel is opened:exchange.setProperty(NettyConstants.NETTY_CHANNEL, channel);
CAMEL-11599 XPath feature with Saxon implementation broken when ServiceMix jaxp-api is present in the endorsed classpath Due to https://issues.apache.org/jira/browse/SM-3452, org.apache.camel.builder.xml.XPathBuilder throws the following exception on any attempt to use the camel-xpath feature with Saxon enabled in a Karaf container (full distribution):{code}2017-07-25 17:16:06,137 | ERROR | lixDispatchQueue | FrameworkEvent ERROR - java.lang.IllegalAccessError: tried to access method javax.xml.xpath.XPathFactoryFinder.createInstance(Ljava/lang/String;)Ljavax/xml/xpath/XPathFactory; from class javax.xml.xpath.XPathFactory	at javax.xml.xpath.XPathFactory.newInstance(Unknown Source)[:2.7.0]	at org.apache.camel.builder.xml.XPathBuilder.createXPathFactory(XPathBuilder.java:1218)	at org.apache.camel.builder.xml.XPathBuilder.doStart(XPathBuilder.java:1173)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.processor.FilterProcessor.doStart(FilterProcessor.java:119)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:62)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.ChoiceProcessor.doStart(ChoiceProcessor.java:202)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1466)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:156)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:348)	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:191)	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:141)	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3666)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3573)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3359)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3213)	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:184)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3008)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3004)	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3027)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3004)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2970)	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:188)	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:228)	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:158)	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:108)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_20]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_20]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_20]	at java.lang.reflect.Method.invoke(Method.java:483)[:1.8.0_20]	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_20]	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:255)	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:186)	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:724)	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:411)	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1286)	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:846)	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1176)	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1074)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_20]	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_20]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_20]	at java.lang.Thread.run(Thread.java:745)[:1.8.0_20]{code}Due to complexity of propagating the fix through the framework, it might be worth to update org/apache/camel/builder/xml/XPathBuilder.java:1218 to instantiate net.sf.saxon.xpath.XPathFactoryImpl directly, especially considering Saxon manual starting from version 9.7 explicitly says not to consider them a provider of javax.xml.xpath.XPathFactory (http://www.saxonica.com/html/documentation/xpath-api/jaxp-xpath/factory.html) Improvement XPath feature with Saxon implementation broken when ServiceMix jaxp-api is present in the endorsed classpath Due to https://issues.apache.org/jira/browse/SM-3452, org.apache.camel.builder.xml.XPathBuilder throws the following exception on any attempt to use the camel-xpath feature with Saxon enabled in a Karaf container (full distribution):{code}2017-07-25 17:16:06,137 | ERROR | lixDispatchQueue | FrameworkEvent ERROR - java.lang.IllegalAccessError: tried to access method javax.xml.xpath.XPathFactoryFinder.createInstance(Ljava/lang/String;)Ljavax/xml/xpath/XPathFactory; from class javax.xml.xpath.XPathFactory	at javax.xml.xpath.XPathFactory.newInstance(Unknown Source)[:2.7.0]	at org.apache.camel.builder.xml.XPathBuilder.createXPathFactory(XPathBuilder.java:1218)	at org.apache.camel.builder.xml.XPathBuilder.doStart(XPathBuilder.java:1173)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.processor.FilterProcessor.doStart(FilterProcessor.java:119)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:62)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.ChoiceProcessor.doStart(ChoiceProcessor.java:202)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1466)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:156)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:348)	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:191)	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:141)	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:3666)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3573)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3359)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3213)	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:184)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3008)	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3004)	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3027)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3004)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2970)	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:188)	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:228)	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:158)	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:108)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_20]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_20]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_20]	at java.lang.reflect.Method.invoke(Method.java:483)[:1.8.0_20]	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_20]	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:255)	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:186)	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:724)	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:411)	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1286)	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:846)	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1176)	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1074)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_20]	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_20]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_20]	at java.lang.Thread.run(Thread.java:745)[:1.8.0_20]{code}Due to complexity of propagating the fix through the framework, it might be worth to update org/apache/camel/builder/xml/XPathBuilder.java:1218 to instantiate net.sf.saxon.xpath.XPathFactoryImpl directly, especially considering Saxon manual starting from version 9.7 explicitly says not to consider them a provider of javax.xml.xpath.XPathFactory (http://www.saxonica.com/html/documentation/xpath-api/jaxp-xpath/factory.html)
CAMEL-11598 camel-spring-boot - actuator endpoints - Make it read-only by default We should make these commands read-only by default, as you can today stop and start routes. This can be a little bit problematic. It may be nice to have read-only actions to get route statistics etc.We can then add some option the user must set to allow to control the routesMaybe it should be named read-only and be true by default?endpoints.camelroutes.read-only = true|falseOr we can come up with a better name. And allow to specify which actions to turn onendpoints.camelroutes.allow=infoendpoints.camelroutes.allow=info,start,stopendpoints.camelroutes.allow=*I am not sure what spring-boot may come OOTB in this regard, they may have something also, for user roles to allow invoking certain operations etc.But it would be nice with read-only OOTB so you can see the state of all your routes always. Improvement camel-spring-boot - actuator endpoints - Make it read-only by default We should make these commands read-only by default, as you can today stop and start routes. This can be a little bit problematic. It may be nice to have read-only actions to get route statistics etc.We can then add some option the user must set to allow to control the routesMaybe it should be named read-only and be true by default?endpoints.camelroutes.read-only = true|falseOr we can come up with a better name. And allow to specify which actions to turn onendpoints.camelroutes.allow=infoendpoints.camelroutes.allow=info,start,stopendpoints.camelroutes.allow=*I am not sure what spring-boot may come OOTB in this regard, they may have something also, for user roles to allow invoking certain operations etc.But it would be nice with read-only OOTB so you can see the state of all your routes always.
CAMEL-11597 Adding support for setting authentication client properties for elasticsearch The current implementation does not allow to override the client instance or setup client authentication.Adding following additional properties for support authentication{code:java}final Settings.Builder settings = Settings.builder()  .put("cluster.name", configuration.getClusterName())  .put("client.transport.ignore_cluster_name", false)  .put("client.transport.sniff", configuration.getClientTransportSniff())  .put("transport.ping_schedule", configuration.getPingSchedule())  .put("client.transport.ping_timeout", configuration.getPingTimeout())  .put("client.transport.sniff", configuration.getClientTransportSniff())  .put("xpack.security.transport.ssl.enabled", configuration.getEnabledSSL())  .put("request.headers.X-Found-Cluster", configuration.getClusterName());  if (configuration.getUser() != null && configuration.getPassword() != null) {     settings.put("xpack.security.user", configuration.getUser() +":"+ configuration.getPassword());   }   return settings.build(); }{code} Improvement Adding support for setting authentication client properties for elasticsearch The current implementation does not allow to override the client instance or setup client authentication.Adding following additional properties for support authentication{code:java}final Settings.Builder settings = Settings.builder()  .put("cluster.name", configuration.getClusterName())  .put("client.transport.ignore_cluster_name", false)  .put("client.transport.sniff", configuration.getClientTransportSniff())  .put("transport.ping_schedule", configuration.getPingSchedule())  .put("client.transport.ping_timeout", configuration.getPingTimeout())  .put("client.transport.sniff", configuration.getClientTransportSniff())  .put("xpack.security.transport.ssl.enabled", configuration.getEnabledSSL())  .put("request.headers.X-Found-Cluster", configuration.getClusterName());  if (configuration.getUser() != null && configuration.getPassword() != null) {     settings.put("xpack.security.user", configuration.getUser() +":"+ configuration.getPassword());   }   return settings.build(); }{code}
CAMEL-11594 rest configuration in spring boot should use map instead of list Its not so easy to configure data format, component or api properties as its list based. If it was map based you can specify the key as part of the tooling. Improvement rest configuration in spring boot should use map instead of list Its not so easy to configure data format, component or api properties as its list based. If it was map based you can specify the key as part of the tooling.
CAMEL-11586 camel-spring-boot - Have default value for endpoints.camelroutes.path We dont have a default value for endpoints.camelroutes.path so users must configure it{code}endpoints.camelroutes.path = /camel/routesendpoints.camelroutes.enabled = true{code}We should have a default value as above. And its default enabled anyway, so end users don't have to do anything its just there OOTB. See the file additional-spring-configuration-metadata.json Improvement camel-spring-boot - Have default value for endpoints.camelroutes.path We dont have a default value for endpoints.camelroutes.path so users must configure it{code}endpoints.camelroutes.path = /camel/routesendpoints.camelroutes.enabled = true{code}We should have a default value as above. And its default enabled anyway, so end users don't have to do anything its just there OOTB. See the file additional-spring-configuration-metadata.json
CAMEL-11577 apt plugin should generate URL as URL and not U R L in displayName As seen{code}    "brokerURL": { "kind": "property", "displayName": "Broker U R L", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Sets the broker URL to use to connect to ActiveMQ using the ActiveMQ URI format" },{code} Improvement apt plugin should generate URL as URL and not U R L in displayName As seen{code}    "brokerURL": { "kind": "property", "displayName": "Broker U R L", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Sets the broker URL to use to connect to ActiveMQ using the ActiveMQ URI format" },{code}
CAMEL-11574 camel-lumberjack should support longs Filebeat 5 introduced json parsing options that allow using resources more efficiently but the {{camel-lumberjack}} component unmarshalling behaves badly with long values so we can't take advantage of it.Right now the following log message :{code}{"long":1491320561000}{code}With the following route{code:xml}<?xml version="1.0" encoding="UTF-8"?><routes xmlns="http://camel.apache.org/schema/spring" xmlns:u="http://www.systar.com/aluminium/camel-util">    <route>        <from uri="lumberjack:0.0.0.0:5044"/>        <log message="just received : ${body}"/>    </route></routes>{code}Will produce the following console log{noformat}just received :.... long=1.491320561E12 .....{noformat}instead of {noformat}just received :.... long=1491320561000 .....{noformat}Even if JSON is _not_ supposed to handle longs, implementations such as Jackson do support it which is really handy. So switching from Gson to Jackson for JSON handling we'll be usefull. Improvement camel-lumberjack should support longs Filebeat 5 introduced json parsing options that allow using resources more efficiently but the {{camel-lumberjack}} component unmarshalling behaves badly with long values so we can't take advantage of it.Right now the following log message :{code}{"long":1491320561000}{code}With the following route{code:xml}<?xml version="1.0" encoding="UTF-8"?><routes xmlns="http://camel.apache.org/schema/spring" xmlns:u="http://www.systar.com/aluminium/camel-util">    <route>        <from uri="lumberjack:0.0.0.0:5044"/>        <log message="just received : ${body}"/>    </route></routes>{code}Will produce the following console log{noformat}just received :.... long=1.491320561E12 .....{noformat}instead of {noformat}just received :.... long=1491320561000 .....{noformat}Even if JSON is _not_ supposed to handle longs, implementations such as Jackson do support it which is really handy. So switching from Gson to Jackson for JSON handling we'll be usefull.
CAMEL-11573 Enable MultipleConsumersSupport for Jt400Endpoint We set up a Camel route that consumes messages from AS400 data queue in 20 concurrent tasks using a secure connection. The problem is that on AS400 system all communication is handled by a single thread and maximum throughput we can achieve is somewhere around 300mbps. It simply reaches a CPU processing limit and just cannot do more bceause all communication is being done within a single connection to AS400 system. If Jt400Endpoint class implemented MultipleConsumersSupport interface, we would be able to set up multiple consumers for this endpoint which would result in more than one connection to AS400 thus the processing would be split to many threads on AS400 system.When we disable security and the traffic is unencrypted, the problem goes away, but we really would like to stick with encrypted traffic. New Feature Enable MultipleConsumersSupport for Jt400Endpoint We set up a Camel route that consumes messages from AS400 data queue in 20 concurrent tasks using a secure connection. The problem is that on AS400 system all communication is handled by a single thread and maximum throughput we can achieve is somewhere around 300mbps. It simply reaches a CPU processing limit and just cannot do more bceause all communication is being done within a single connection to AS400 system. If Jt400Endpoint class implemented MultipleConsumersSupport interface, we would be able to set up multiple consumers for this endpoint which would result in more than one connection to AS400 thus the processing would be split to many threads on AS400 system.When we disable security and the traffic is unencrypted, the problem goes away, but we really would like to stick with encrypted traffic.
CAMEL-11563 Add predicate option to @Consume so the bean is only called if its evaluated to true This allows users to specify multiple @Consume on POJO beans methods so they can consume from the same endpoint but have it call different method depending on the predicate.{code}@Consume("jms:queue:cheese", predicate = "${body} contains 'blue'")public void blueCheese(String body) {   ...}@Consume("jms:queue:cheese", predicate = "${body} contains 'hawaii'")public void hawaiiCheese(String body) {   ...}{code}The predicate can be evaluated using the simple language, so users can do basic predicates.If no predicates matches then the exchange is silently dropped. If 1 or more predicates matches then we should either- send to first matching- send to all matching in sequence (need to do defensive copy to prevent side effects) also mind of streaming, so users may need to turn on stream caching, and we should ensure that its part of the POJO consuming (I cannot remember) New Feature Add predicate option to @Consume so the bean is only called if its evaluated to true This allows users to specify multiple @Consume on POJO beans methods so they can consume from the same endpoint but have it call different method depending on the predicate.{code}@Consume("jms:queue:cheese", predicate = "${body} contains 'blue'")public void blueCheese(String body) {   ...}@Consume("jms:queue:cheese", predicate = "${body} contains 'hawaii'")public void hawaiiCheese(String body) {   ...}{code}The predicate can be evaluated using the simple language, so users can do basic predicates.If no predicates matches then the exchange is silently dropped. If 1 or more predicates matches then we should either- send to first matching- send to all matching in sequence (need to do defensive copy to prevent side effects) also mind of streaming, so users may need to turn on stream caching, and we should ensure that its part of the POJO consuming (I cannot remember)
CAMEL-11558 camel-jsonpath - Split via jsonpath looses quotes in json output See nabblehttp://camel.465427.n5.nabble.com/JsonPath-stripes-quotes-during-split-td5771398.htmlThis may still be a problem. We should take a look and make it keep the quotes so the json input is similar in the output. Improvement camel-jsonpath - Split via jsonpath looses quotes in json output See nabblehttp://camel.465427.n5.nabble.com/JsonPath-stripes-quotes-during-split-td5771398.htmlThis may still be a problem. We should take a look and make it keep the quotes so the json input is similar in the output.
CAMEL-11543 Camel doesn't support @TestPropertySource Vanilla Spring test passes:{code:java}@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes= PropTest.class)@Configuration@TestPropertySource(properties = "key=value")public class PropTest {    @Value("${key}") private String key;    @Test    public void test() {        assertThat(key, is("value"));    }}{code}Camel test fails (first two lines only changed):{code:java}@RunWith(CamelSpringRunner.class)@BootstrapWith(CamelTestContextBootstrapper.class)@ContextConfiguration(classes= PropTest.class)@Configuration@TestPropertySource(properties = "key=value")public class PropTest {    @Value("${key}") private String key;    @Test    public void test() {        assertThat(key, is("value"));    }}{code}This would appear to be related to the comment in [@TestPropertySource|https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestPropertySource.html]bq. @TestPropertySource is enabled if the configured context loader honors it. Every SmartContextLoader that is a subclass of either AbstractGenericContextLoader or AbstractGenericWebContextLoader provides automatic support for @TestPropertySource{{CamelSpringTestContextLoader}} does not extend AbstractGenericContextLoader but its parent AbstractContextLoader so ignores the annotation. Improvement Camel doesn't support @TestPropertySource Vanilla Spring test passes:{code:java}@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes= PropTest.class)@Configuration@TestPropertySource(properties = "key=value")public class PropTest {    @Value("${key}") private String key;    @Test    public void test() {        assertThat(key, is("value"));    }}{code}Camel test fails (first two lines only changed):{code:java}@RunWith(CamelSpringRunner.class)@BootstrapWith(CamelTestContextBootstrapper.class)@ContextConfiguration(classes= PropTest.class)@Configuration@TestPropertySource(properties = "key=value")public class PropTest {    @Value("${key}") private String key;    @Test    public void test() {        assertThat(key, is("value"));    }}{code}This would appear to be related to the comment in [@TestPropertySource|https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestPropertySource.html]bq. @TestPropertySource is enabled if the configured context loader honors it. Every SmartContextLoader that is a subclass of either AbstractGenericContextLoader or AbstractGenericWebContextLoader provides automatic support for @TestPropertySource{{CamelSpringTestContextLoader}} does not extend AbstractGenericContextLoader but its parent AbstractContextLoader so ignores the annotation.
CAMEL-11539 WireTap - Add support for defer shutdown if pending tasks are active See SOhttps://stackoverflow.com/questions/45054418/apache-camel-wiretap-and-graceful-shutdown Improvement WireTap - Add support for defer shutdown if pending tasks are active See SOhttps://stackoverflow.com/questions/45054418/apache-camel-wiretap-and-graceful-shutdown
CAMEL-11534 Incorrect transferExchange option test in camel-jms component transferExchange set to 'true' or 'false' doesn't affect to the JUnit test Test Incorrect transferExchange option test in camel-jms component transferExchange set to 'true' or 'false' doesn't affect to the JUnit test
CAMEL-11528 WireTap - Allow to specify the url as non-dynamic See SOhttps://stackoverflow.com/questions/45014811/apache-camel-version-2-16-using-wiretap-to-route-a-message-to-a-spring-bea Improvement WireTap - Allow to specify the url as non-dynamic See SOhttps://stackoverflow.com/questions/45014811/apache-camel-version-2-16-using-wiretap-to-route-a-message-to-a-spring-bea
CAMEL-11515 Aggregator is not working correctly when completionTimeout < 1000ms The aggregated exchange doesn't become complete after a completionTimeout which is lower than 1000ms (e.g. 150ms)From source code, seems that there is no way to set a value for AggregationTimeoutMap from AggregateProcessor class:{code}{{	// check for timed out aggregated messages once every second	timeoutMap = new AggregationTimeoutMap(getTimeoutCheckerExecutorService(), 1000L);}}{code}because it's hardcoded to 1s.A new option like *timeoutCheckerExecutorInterval* with default value of 1000ms will solve the problem.	 Improvement Aggregator is not working correctly when completionTimeout < 1000ms The aggregated exchange doesn't become complete after a completionTimeout which is lower than 1000ms (e.g. 150ms)From source code, seems that there is no way to set a value for AggregationTimeoutMap from AggregateProcessor class:{code}{{	// check for timed out aggregated messages once every second	timeoutMap = new AggregationTimeoutMap(getTimeoutCheckerExecutorService(), 1000L);}}{code}because it's hardcoded to 1s.A new option like *timeoutCheckerExecutorInterval* with default value of 1000ms will solve the problem.	
CAMEL-11514 xslt component - Add support for ref and bean in resource uri See SOhttps://stackoverflow.com/questions/44930793/possible-to-use-camels-xslt-component-with-dynamic-templatesThe org.apache.camel.builder.xml.XsltUriResolver#resolve should have similar support for bean and ref as we have in org.apache.camel.util.ResourceHelper#resolveMandatoryResourceAsInputStream(org.apache.camel.CamelContext, java.lang.String) Improvement xslt component - Add support for ref and bean in resource uri See SOhttps://stackoverflow.com/questions/44930793/possible-to-use-camels-xslt-component-with-dynamic-templatesThe org.apache.camel.builder.xml.XsltUriResolver#resolve should have similar support for bean and ref as we have in org.apache.camel.util.ResourceHelper#resolveMandatoryResourceAsInputStream(org.apache.camel.CamelContext, java.lang.String)
CAMEL-11508 Why "from" xml element does not support custom attributes in spring xml? Hello,The definition of "from" element in camel-spring.xsd does not allow to use a custom attributes, because of there is no declared anyAttribute element.My opinion is that "from" element should allow to create user specific attributes same as "to" element (which has a  <xs:anyAttribute namespace="##other" processContents="skip"/> in the definition)There is my route:        <route id="722b2c5f">            <from yuo:custom-attr="my custom attribute" uri="localmq://queueStart" />            <to yuo:custom-attr="my custom attribute" uri="localmq://queue"/>        </route>And Camel gives me exception on that route:org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 47 in XML document from file [C:\Projects\server\main.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 47; columnNumber: 83; cvc-complex-type.3.2.2: Attribute 'yuo:custom-attr' is not allowed to appear in element 'from'.	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:252)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:613)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:514)....	at java.util.concurrent.FutureTask.run(FutureTask.java:266)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:748)Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'yuo:custom-attr' is not allowed to appear in element 'from'.	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.emptyElement(Unknown Source)	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391) Improvement Why "from" xml element does not support custom attributes in spring xml? Hello,The definition of "from" element in camel-spring.xsd does not allow to use a custom attributes, because of there is no declared anyAttribute element.My opinion is that "from" element should allow to create user specific attributes same as "to" element (which has a  <xs:anyAttribute namespace="##other" processContents="skip"/> in the definition)There is my route:        <route id="722b2c5f">            <from yuo:custom-attr="my custom attribute" uri="localmq://queueStart" />            <to yuo:custom-attr="my custom attribute" uri="localmq://queue"/>        </route>And Camel gives me exception on that route:org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 47 in XML document from file [C:\Projects\server\main.xml] is invalid; nested exception is org.xml.sax.SAXParseException; lineNumber: 47; columnNumber: 83; cvc-complex-type.3.2.2: Attribute 'yuo:custom-attr' is not allowed to appear in element 'from'.	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:252)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:613)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:514)....	at java.util.concurrent.FutureTask.run(FutureTask.java:266)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:748)Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'yuo:custom-attr' is not allowed to appear in element 'from'.	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)	at org.apache.xerces.util.ErrorHandlerWrapper.error(Unknown Source)	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.reportSchemaError(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.processAttributes(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.handleStartElement(Unknown Source)	at org.apache.xerces.impl.xs.XMLSchemaValidator.emptyElement(Unknown Source)	at org.apache.xerces.impl.XMLNSDocumentScannerImpl.scanStartElement(Unknown Source)	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:76)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadDocument(XmlBeanDefinitionReader.java:429)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)
CAMEL-11506 MavenVersionManager blocks on unavailable URL If I try to load the catalog of a not existing Camel version using the MavenVersionManager then the call to load does not return.Below is the appropriate stack of the thread which is never returning. {noformat}"main" #1 prio=6 os_prio=0 tid=0x00007f6ea800b000 nid=0x12da runnable [0x00007f6eb2013000]   java.lang.Thread.State: RUNNABLE	at java.net.SocketInputStream.socketRead0(Native Method)	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)	at java.net.SocketInputStream.read(SocketInputStream.java:171)	at java.net.SocketInputStream.read(SocketInputStream.java:141)	at sun.security.ssl.InputRecord.readFully(InputRecord.java:465)	at sun.security.ssl.InputRecord.read(InputRecord.java:503)	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:983)	- locked <0x00000007b0be7870> (a java.lang.Object)	at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:940)	at sun.security.ssl.AppInputStream.read(AppInputStream.java:105)	- locked <0x00000007b0be8668> (a sun.security.ssl.AppInputStream)	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)	- locked <0x0000000773a4de60> (a java.io.BufferedInputStream)	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1569)	- locked <0x0000000773a4baa0> (a sun.net.www.protocol.https.DelegateHttpsURLConnection)	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)	- locked <0x0000000773a4baa0> (a sun.net.www.protocol.https.DelegateHttpsURLConnection)	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)	at org.apache.ivy.util.url.BasicURLHandler.checkStatusCode(BasicURLHandler.java:131)	at org.apache.ivy.util.url.BasicURLHandler.getURLInfo(BasicURLHandler.java:73)	at org.apache.ivy.util.url.BasicURLHandler.getURLInfo(BasicURLHandler.java:54)	at org.apache.ivy.plugins.repository.url.URLResource.init(URLResource.java:68)	at org.apache.ivy.plugins.repository.url.URLResource.exists(URLResource.java:84)	at org.apache.ivy.plugins.resolver.RepositoryResolver.findResourceUsingPattern(RepositoryResolver.java:97)	at org.apache.ivy.plugins.resolver.AbstractPatternsBasedResolver.findResourceUsingPatterns(AbstractPatternsBasedResolver.java:97)	at org.apache.ivy.plugins.resolver.IBiblioResolver.findArtifactRef(IBiblioResolver.java:125)	at org.apache.ivy.plugins.resolver.BasicResolver.getArtifactRef(BasicResolver.java:1034)	at org.apache.ivy.plugins.resolver.BasicResolver.findFirstArtifactRef(BasicResolver.java:971)	at org.apache.ivy.plugins.resolver.BasicResolver.getDependency(BasicResolver.java:243)	at org.apache.ivy.plugins.resolver.IBiblioResolver.getDependency(IBiblioResolver.java:506)	at org.apache.ivy.plugins.resolver.ChainResolver.getDependency(ChainResolver.java:104)	at org.apache.ivy.core.resolve.IvyNode.loadData(IvyNode.java:170)	at org.apache.ivy.core.resolve.VisitNode.loadData(VisitNode.java:292)	at org.apache.ivy.core.resolve.ResolveEngine.fetchDependencies(ResolveEngine.java:718)	at org.apache.ivy.core.resolve.ResolveEngine.doFetchDependencies(ResolveEngine.java:803)	at org.apache.ivy.core.resolve.ResolveEngine.fetchDependencies(ResolveEngine.java:726)	at org.apache.ivy.core.resolve.ResolveEngine.getDependencies(ResolveEngine.java:599)	at org.apache.ivy.core.resolve.ResolveEngine.resolve(ResolveEngine.java:236)	at org.apache.ivy.Ivy.resolve(Ivy.java:523)	at org.apache.ivy.Ivy$resolve$0.call(Unknown Source)	at groovy.grape.GrapeIvy.getDependencies(GrapeIvy.groovy:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:169)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)	at groovy.grape.GrapeIvy.resolve(GrapeIvy.groovy:571)	at groovy.grape.GrapeIvy$resolve$1.callCurrent(Unknown Source)	at groovy.grape.GrapeIvy.resolve(GrapeIvy.groovy:538)	at groovy.grape.GrapeIvy$resolve$0.callCurrent(Unknown Source)	at groovy.grape.GrapeIvy.grab(GrapeIvy.groovy:256)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:169)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:174)	at groovy.grape.GrapeIvy.grab(GrapeIvy.groovy:237)	at groovy.grape.Grape.grab(Grape.java:152)	at org.apache.camel.catalog.maven.MavenVersionManager.loadVersion(MavenVersionManager.java:91){noformat}It would be really helpful if we'd had a method to specify a timeout or at least that a good timeout value is preset as default. (like 1 minute for instance)Tbh I am rather unsure if that can be fixed in Camel directly or if Ivy should be fixed. IMO before accessing a URI Ivy's BasicURLHandler should use the isReachable(url, timeout) to test if it makes sense at all to connect instead of using getURLInfo right away? Improvement MavenVersionManager blocks on unavailable URL If I try to load the catalog of a not existing Camel version using the MavenVersionManager then the call to load does not return.Below is the appropriate stack of the thread which is never returning. {noformat}"main" #1 prio=6 os_prio=0 tid=0x00007f6ea800b000 nid=0x12da runnable [0x00007f6eb2013000]   java.lang.Thread.State: RUNNABLE	at java.net.SocketInputStream.socketRead0(Native Method)	at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)	at java.net.SocketInputStream.read(SocketInputStream.java:171)	at java.net.SocketInputStream.read(SocketInputStream.java:141)	at sun.security.ssl.InputRecord.readFully(InputRecord.java:465)	at sun.security.ssl.InputRecord.read(InputRecord.java:503)	at sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:983)	- locked <0x00000007b0be7870> (a java.lang.Object)	at sun.security.ssl.SSLSocketImpl.readDataRecord(SSLSocketImpl.java:940)	at sun.security.ssl.AppInputStream.read(AppInputStream.java:105)	- locked <0x00000007b0be8668> (a sun.security.ssl.AppInputStream)	at java.io.BufferedInputStream.fill(BufferedInputStream.java:246)	at java.io.BufferedInputStream.read1(BufferedInputStream.java:286)	at java.io.BufferedInputStream.read(BufferedInputStream.java:345)	- locked <0x0000000773a4de60> (a java.io.BufferedInputStream)	at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:735)	at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:678)	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1569)	- locked <0x0000000773a4baa0> (a sun.net.www.protocol.https.DelegateHttpsURLConnection)	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1474)	- locked <0x0000000773a4baa0> (a sun.net.www.protocol.https.DelegateHttpsURLConnection)	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)	at sun.net.www.protocol.https.HttpsURLConnectionImpl.getResponseCode(HttpsURLConnectionImpl.java:338)	at org.apache.ivy.util.url.BasicURLHandler.checkStatusCode(BasicURLHandler.java:131)	at org.apache.ivy.util.url.BasicURLHandler.getURLInfo(BasicURLHandler.java:73)	at org.apache.ivy.util.url.BasicURLHandler.getURLInfo(BasicURLHandler.java:54)	at org.apache.ivy.plugins.repository.url.URLResource.init(URLResource.java:68)	at org.apache.ivy.plugins.repository.url.URLResource.exists(URLResource.java:84)	at org.apache.ivy.plugins.resolver.RepositoryResolver.findResourceUsingPattern(RepositoryResolver.java:97)	at org.apache.ivy.plugins.resolver.AbstractPatternsBasedResolver.findResourceUsingPatterns(AbstractPatternsBasedResolver.java:97)	at org.apache.ivy.plugins.resolver.IBiblioResolver.findArtifactRef(IBiblioResolver.java:125)	at org.apache.ivy.plugins.resolver.BasicResolver.getArtifactRef(BasicResolver.java:1034)	at org.apache.ivy.plugins.resolver.BasicResolver.findFirstArtifactRef(BasicResolver.java:971)	at org.apache.ivy.plugins.resolver.BasicResolver.getDependency(BasicResolver.java:243)	at org.apache.ivy.plugins.resolver.IBiblioResolver.getDependency(IBiblioResolver.java:506)	at org.apache.ivy.plugins.resolver.ChainResolver.getDependency(ChainResolver.java:104)	at org.apache.ivy.core.resolve.IvyNode.loadData(IvyNode.java:170)	at org.apache.ivy.core.resolve.VisitNode.loadData(VisitNode.java:292)	at org.apache.ivy.core.resolve.ResolveEngine.fetchDependencies(ResolveEngine.java:718)	at org.apache.ivy.core.resolve.ResolveEngine.doFetchDependencies(ResolveEngine.java:803)	at org.apache.ivy.core.resolve.ResolveEngine.fetchDependencies(ResolveEngine.java:726)	at org.apache.ivy.core.resolve.ResolveEngine.getDependencies(ResolveEngine.java:599)	at org.apache.ivy.core.resolve.ResolveEngine.resolve(ResolveEngine.java:236)	at org.apache.ivy.Ivy.resolve(Ivy.java:523)	at org.apache.ivy.Ivy$resolve$0.call(Unknown Source)	at groovy.grape.GrapeIvy.getDependencies(GrapeIvy.groovy:410)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:169)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)	at groovy.grape.GrapeIvy.resolve(GrapeIvy.groovy:571)	at groovy.grape.GrapeIvy$resolve$1.callCurrent(Unknown Source)	at groovy.grape.GrapeIvy.resolve(GrapeIvy.groovy:538)	at groovy.grape.GrapeIvy$resolve$0.callCurrent(Unknown Source)	at groovy.grape.GrapeIvy.grab(GrapeIvy.groovy:256)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:169)	at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:59)	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:174)	at groovy.grape.GrapeIvy.grab(GrapeIvy.groovy:237)	at groovy.grape.Grape.grab(Grape.java:152)	at org.apache.camel.catalog.maven.MavenVersionManager.loadVersion(MavenVersionManager.java:91){noformat}It would be really helpful if we'd had a method to specify a timeout or at least that a good timeout value is preset as default. (like 1 minute for instance)Tbh I am rather unsure if that can be fixed in Camel directly or if Ivy should be fixed. IMO before accessing a URI Ivy's BasicURLHandler should use the isReachable(url, timeout) to test if it makes sense at all to connect instead of using getURLInfo right away?
CAMEL-11491 Apply non-mandatory nature of amazon client to AWS components being able to specify accessKey and secretKey Following work made on CAMEL-11489, the idea here is to re-apply the same non-mandatory nature of Amazon Client for the other components (S3 already being fixed) that were touched by CAMEL-9210.* DDB* EC2* SDB* SES* SNS* SQS Sub-task Apply non-mandatory nature of amazon client to AWS components being able to specify accessKey and secretKey Following work made on CAMEL-11489, the idea here is to re-apply the same non-mandatory nature of Amazon Client for the other components (S3 already being fixed) that were touched by CAMEL-9210.* DDB* EC2* SDB* SES* SNS* SQS
CAMEL-11490 camel-spring-boot - Make it easy to filter Java RoutesBuilder from properties Sometimes you may have multiple route builders in an app, and you may want to be able to only  include one of them, and want to be able to configure this via configuration properties / env variables instead of having to do source code changes.This can also be used from unit testing to make it easier to select with route builders to test. Improvement camel-spring-boot - Make it easy to filter Java RoutesBuilder from properties Sometimes you may have multiple route builders in an app, and you may want to be able to only  include one of them, and want to be able to configure this via configuration properties / env variables instead of having to do source code changes.This can also be used from unit testing to make it easier to select with route builders to test.
CAMEL-11487 Support resources load through custom defined protocols by registering custom UrlHandlers Modifing {{resolveResourceAsUrl}} and {{resolveResourceAsInputStream}} in {{ResourceHelper}} class to support custom defined protocols. Improvement Support resources load through custom defined protocols by registering custom UrlHandlers Modifing {{resolveResourceAsUrl}} and {{resolveResourceAsInputStream}} in {{ResourceHelper}} class to support custom defined protocols.
CAMEL-11484 Optimise - Simple Language / ExpressionBuilder can use cache of frequent used expressions when having nested functions If you use a simple expression in a Camel route that has a simple token, then it's re-created per exchange during routing. The expression by itself can be cached and reused, which avoids using the simple parser over and over again. Improvement Optimise - Simple Language / ExpressionBuilder can use cache of frequent used expressions when having nested functions If you use a simple expression in a Camel route that has a simple token, then it's re-created per exchange during routing. The expression by itself can be cached and reused, which avoids using the simple parser over and over again.
CAMEL-11483 Optimise - Recording time taken for each processor should be advice I think I found a way to optimise this so we can use advice for recording the time taken for each processor. We do this already on route level only. But the processors are currently wrapped which takes up extra footprint. By using advice we can optimise this. There is already a TODO about this, however the logic to setup the MBean and their counters was a bit complex. Improvement Optimise - Recording time taken for each processor should be advice I think I found a way to optimise this so we can use advice for recording the time taken for each processor. We do this already on route level only. But the processors are currently wrapped which takes up extra footprint. By using advice we can optimise this. There is already a TODO about this, however the logic to setup the MBean and their counters was a bit complex.
CAMEL-11479 beanio - Unmarshalling multiline values as multiple records Referring to the example in http://camel.apache.org/beanio.html, we have a simple mapping file & a message with value spans more than one line.Using camel-beanio, only the contents in first line in the message is being read a one record into the exchange's body at one iteration. The next line is being treated as new record and unmarshalling breaks as BeanIOErrorHandler warns it as invalid record.We had to add a camel processor to remove the line breaks in the message before unmarshalling to read complete multi-line message, which may not be the best solution in all real time cases. Does camel-beanio read each line as different record?Is there any other way to still read multi-line values as single record using camel-beanio? Improvement beanio - Unmarshalling multiline values as multiple records Referring to the example in http://camel.apache.org/beanio.html, we have a simple mapping file & a message with value spans more than one line.Using camel-beanio, only the contents in first line in the message is being read a one record into the exchange's body at one iteration. The next line is being treated as new record and unmarshalling breaks as BeanIOErrorHandler warns it as invalid record.We had to add a camel processor to remove the line breaks in the message before unmarshalling to read complete multi-line message, which may not be the best solution in all real time cases. Does camel-beanio read each line as different record?Is there any other way to still read multi-line values as single record using camel-beanio?
CAMEL-11466 camel-tarfile dataformat cannot remove successfully processed files According to https://issues.apache.org/jira/browse/CAMEL-11454, not releasing resources (files) can prevent component to stop correctly.Although Camel-tarfile is not sensitive to this pb, source code is very similar to camel-zipfile so, according to associated camel-zipfile pull request:* code should be aligned* non reg unittest can be written Improvement camel-tarfile dataformat cannot remove successfully processed files According to https://issues.apache.org/jira/browse/CAMEL-11454, not releasing resources (files) can prevent component to stop correctly.Although Camel-tarfile is not sensitive to this pb, source code is very similar to camel-zipfile so, according to associated camel-zipfile pull request:* code should be aligned* non reg unittest can be written
CAMEL-11461 SEDA - resolve references for concurrentConsumers, limitConcurrentConsumers SedaComponent doesn't currently resolve the references specified in uri for the following parameters:* concurrentConsumers* limitConcurrentConsumers Improvement SEDA - resolve references for concurrentConsumers, limitConcurrentConsumers SedaComponent doesn't currently resolve the references specified in uri for the following parameters:* concurrentConsumers* limitConcurrentConsumers
CAMEL-11452 It should be possible to add extra headers for STOMP subscriptions  I need to subscribe to a stomp destination providing extra custom stomp headers. This is currently not possible. Improvement It should be possible to add extra headers for STOMP subscriptions  I need to subscribe to a stomp destination providing extra custom stomp headers. This is currently not possible.
CAMEL-11450 Optimise - Calling a bean without method name defined can be optimised We can optimiseorg.apache.camel.component.bean.AbstractBeanProcessor#allowProcessorWhere we can pre-calculate the allow processor instead of doing this per method call, and store the result of the processor type conversion. Improvement Optimise - Calling a bean without method name defined can be optimised We can optimiseorg.apache.camel.component.bean.AbstractBeanProcessor#allowProcessorWhere we can pre-calculate the allow processor instead of doing this per method call, and store the result of the processor type conversion.
CAMEL-11449 start.spring.io - Define version range We should setup a version range for Camel in start.spring.io website.Camel 2.20.x supports Spring Boot 1.5.xCamel 2.19.x supports Spring Boot 1.5.xCamel 2.18.x supports Spring Boot 1.4.x and 1.5.x Improvement start.spring.io - Define version range We should setup a version range for Camel in start.spring.io website.Camel 2.20.x supports Spring Boot 1.5.xCamel 2.19.x supports Spring Boot 1.5.xCamel 2.18.x supports Spring Boot 1.4.x and 1.5.x
CAMEL-11448 Optimise - Routing engine can avoid check for interrupted exception which does not occur anymore There is some old code that takes up a bunch of cpu time during routing. We can optimise this to drop this code. Improvement Optimise - Routing engine can avoid check for interrupted exception which does not occur anymore There is some old code that takes up a bunch of cpu time during routing. We can optimise this to drop this code.
CAMEL-11447 Optimise - MessageHistoryFactory should use long instead of Date We can optimise as the message history that tracks each route step can be optimised to use a long for start time instead of java.util.Date. Improvement Optimise - MessageHistoryFactory should use long instead of Date We can optimise as the message history that tracks each route step can be optimised to use a long for start time instead of java.util.Date.
CAMEL-11446 Look at using awaitility in camel-core tests when we wait via thread sleep etc We can speedup some of the tests in camel-core by usinghttps://github.com/awaitility/awaitilityTo wait for the condition before continuing. We can also use NotifyBuilder which we do in some tests like, when there is only 1 message to wait foroneExchangeDone.matchesMockWaitTime(); Improvement Look at using awaitility in camel-core tests when we wait via thread sleep etc We can speedup some of the tests in camel-core by usinghttps://github.com/awaitility/awaitilityTo wait for the condition before continuing. We can also use NotifyBuilder which we do in some tests like, when there is only 1 message to wait foroneExchangeDone.matchesMockWaitTime();
CAMEL-11444 Optimise - Type converter registry can share known TypeMapping keys This will reduce objects being created as we can share and cache the well known type mappings. Improvement Optimise - Type converter registry can share known TypeMapping keys This will reduce objects being created as we can share and cache the well known type mappings.
CAMEL-11442 Optimise - Use existing exchange id as breadcrumb We can use the existing exchange id as the breadcrumb id, if setting up a new breadcrumb. This is essentially also a bit better as its safer to rely on the exchange id, which is the same for the duration of the exchange, and hence a better breadcrumb to track. Improvement Optimise - Use existing exchange id as breadcrumb We can use the existing exchange id as the breadcrumb id, if setting up a new breadcrumb. This is essentially also a bit better as its safer to rely on the exchange id, which is the same for the duration of the exchange, and hence a better breadcrumb to track.
CAMEL-11431 Spring beans with autowired constructors I have stumbled upon an issue when using Spring beans in routes using the following syntax:{code:java}from(...).bean(MySpringBean.class){code}I haven't found a relevant entry in Camel's documentation whether that is a valid use in conjunction with Spring, but it actually works... most of the time. It does not work when MySpringBean uses constructor injection (it is OK with field injection).I have traced the issue to this part of org.apache.camel.model.BeanDefinition:{code:java}// create a bean if there is a default public no-arg constructorif (isCacheBean() && ObjectHelper.hasDefaultPublicNoArgConstructor(clazz)) {    bean = CamelContextHelper.newInstance(routeContext.getCamelContext(), clazz);    ObjectHelper.notNull(bean, "bean", this);}{code}When constructor injection is used the above condition does not hold, and instead of having beanHolder of type ConstantBeanHolder we end up with ConstantStaticTypeBeanHolder, whose getBean() method always returns null.In effect I'm getting this stacktrace:{code}java.lang.NullPointerException: null	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:472)	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:291)	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:264)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:178)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)	at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:763)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)	at org.apache.camel.util.concurrent.SynchronousExecutorService.execute(SynchronousExecutorService.java:62)	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)	at org.apache.camel.processor.aggregate.AggregateProcessor.onSubmitCompletion(AggregateProcessor.java:755)	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:355)	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:268)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)	at org.apache.camel.processor.Splitter.process(Splitter.java:114)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)	at org.apache.camel.processor.Splitter.process(Splitter.java:114)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:63)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:173)	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:451)	at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:137)	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:218)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:182)	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:748){code}So either:* .bean(MySpringBean.class) is not a valid usage for Spring beans* such usage should be explicitly limited to Spring beans with no-arg constructors (and an explanatory exception should be thrown otherwise)* BeanDefinition should not assume that the Injector is unable to instantiate beans without no-args constructors, because some (like SpringInjector) are able to do that Improvement Spring beans with autowired constructors I have stumbled upon an issue when using Spring beans in routes using the following syntax:{code:java}from(...).bean(MySpringBean.class){code}I haven't found a relevant entry in Camel's documentation whether that is a valid use in conjunction with Spring, but it actually works... most of the time. It does not work when MySpringBean uses constructor injection (it is OK with field injection).I have traced the issue to this part of org.apache.camel.model.BeanDefinition:{code:java}// create a bean if there is a default public no-arg constructorif (isCacheBean() && ObjectHelper.hasDefaultPublicNoArgConstructor(clazz)) {    bean = CamelContextHelper.newInstance(routeContext.getCamelContext(), clazz);    ObjectHelper.notNull(bean, "bean", this);}{code}When constructor injection is used the above condition does not hold, and instead of having beanHolder of type ConstantBeanHolder we end up with ConstantStaticTypeBeanHolder, whose getBean() method always returns null.In effect I'm getting this stacktrace:{code}java.lang.NullPointerException: null	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:472)	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:291)	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:264)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:178)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)	at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:763)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)	at org.apache.camel.util.concurrent.SynchronousExecutorService.execute(SynchronousExecutorService.java:62)	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:112)	at org.apache.camel.processor.aggregate.AggregateProcessor.onSubmitCompletion(AggregateProcessor.java:755)	at org.apache.camel.processor.aggregate.AggregateProcessor.doProcess(AggregateProcessor.java:355)	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:268)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)	at org.apache.camel.processor.Splitter.process(Splitter.java:114)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:695)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:623)	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:247)	at org.apache.camel.processor.Splitter.process(Splitter.java:114)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:63)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:173)	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:451)	at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:137)	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:218)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:182)	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:748){code}So either:* .bean(MySpringBean.class) is not a valid usage for Spring beans* such usage should be explicitly limited to Spring beans with no-arg constructors (and an explanatory exception should be thrown otherwise)* BeanDefinition should not assume that the Injector is unable to instantiate beans without no-args constructors, because some (like SpringInjector) are able to do that
CAMEL-11425 Camel Olingo needs a way to dynamically set and receive HTTP headers Our interface with SAP Netweaver Gateway requires that we request a CSRF token and then pass that value to future calls associated with our transaction.  The current design of the camel-olingo2 component only allows us to set headers at component level.  This change will allow the user to set headers at the endpoint level prior to calling the endpoint and receive the response headers after endpoint is called.  I have already created a version of the component that supports this change.  I will submit this change for approval shortly... Improvement Camel Olingo needs a way to dynamically set and receive HTTP headers Our interface with SAP Netweaver Gateway requires that we request a CSRF token and then pass that value to future calls associated with our transaction.  The current design of the camel-olingo2 component only allows us to set headers at component level.  This change will allow the user to set headers at the endpoint level prior to calling the endpoint and receive the response headers after endpoint is called.  I have already created a version of the component that supports this change.  I will submit this change for approval shortly...
CAMEL-11422 Mark plugin as threadsafe It would be nice to mark the camel maven plugin as threadsafe{noformat}22:00:20 [WARNING] *****************************************************************22:00:20 [WARNING] * Your build is requesting parallel execution, but project      *22:00:20 [WARNING] * contains the following plugin(s) that have goals not marked   *22:00:20 [WARNING] * as @threadSafe to support parallel building.                  *22:00:20 [WARNING] * While this /may/ work fine, please look for plugin updates    *22:00:20 [WARNING] * and/or request plugins be made thread-safe.                   *22:00:20 [WARNING] * If reporting an issue, report it against the plugin in        *22:00:20 [WARNING] * question, not against maven-core                              *22:00:20 [WARNING] *****************************************************************22:00:20 [WARNING] The following plugins are not marked @threadSafe in jfr-srv:22:00:20 [WARNING] org.apache.camel:camel-maven-plugin:2.19.122:00:20 [WARNING] org.codehaus.mojo:tidy-maven-plugin:1.0.022:00:20 [WARNING] Enable debug to see more precisely which goals are not marked @threadSafe.22:00:20 [WARNING] *****************************************************************22:00:20 [INFO] {noformat} Improvement Mark plugin as threadsafe It would be nice to mark the camel maven plugin as threadsafe{noformat}22:00:20 [WARNING] *****************************************************************22:00:20 [WARNING] * Your build is requesting parallel execution, but project      *22:00:20 [WARNING] * contains the following plugin(s) that have goals not marked   *22:00:20 [WARNING] * as @threadSafe to support parallel building.                  *22:00:20 [WARNING] * While this /may/ work fine, please look for plugin updates    *22:00:20 [WARNING] * and/or request plugins be made thread-safe.                   *22:00:20 [WARNING] * If reporting an issue, report it against the plugin in        *22:00:20 [WARNING] * question, not against maven-core                              *22:00:20 [WARNING] *****************************************************************22:00:20 [WARNING] The following plugins are not marked @threadSafe in jfr-srv:22:00:20 [WARNING] org.apache.camel:camel-maven-plugin:2.19.122:00:20 [WARNING] org.codehaus.mojo:tidy-maven-plugin:1.0.022:00:20 [WARNING] Enable debug to see more precisely which goals are not marked @threadSafe.22:00:20 [WARNING] *****************************************************************22:00:20 [INFO] {noformat}
CAMEL-11421 Tokenizer - Allow to define group number as simple language See SOhttps://stackoverflow.com/questions/44596721/is-it-possible-to-pass-a-dynamic-group-value-to-tokenizer-in-camelWe can change this from an Integer type to a String and then use simple language to evaluate it as a integer value. This allows then to define the group number dynamically,. Improvement Tokenizer - Allow to define group number as simple language See SOhttps://stackoverflow.com/questions/44596721/is-it-possible-to-pass-a-dynamic-group-value-to-tokenizer-in-camelWe can change this from an Integer type to a String and then use simple language to evaluate it as a integer value. This allows then to define the group number dynamically,.
CAMEL-11411 camel-opentracing example uses incorrect groupId camel-opentracing example looks for org.apache.camel:camel-example-opentracing-loggingtracer, should be looking for org.apache.camel.example:camel-example-opentracing-loggingtracer Task camel-opentracing example uses incorrect groupId camel-opentracing example looks for org.apache.camel:camel-example-opentracing-loggingtracer, should be looking for org.apache.camel.example:camel-example-opentracing-loggingtracer
CAMEL-11410 camel-spring - Should not list uris as spring bean ids from Camel routes Its an old and unused feature of Camel that will register endpoint in spring from routes from the <from> and <to> if they have an id attribute assigned.Those id's was not as much intended for that, as you can have endpoints in other places in routes, such as <wireTap> etc. Users should use <endpoint id="xxx"> to assign id's to endpoint in case they want to refer to those from Spring, such as via dependency injection.This functionality is also only in camel-spring and not in camel-blueprint, so it only adds to confusion if the XML DSL do not behave as much similar as possible. Improvement camel-spring - Should not list uris as spring bean ids from Camel routes Its an old and unused feature of Camel that will register endpoint in spring from routes from the <from> and <to> if they have an id attribute assigned.Those id's was not as much intended for that, as you can have endpoints in other places in routes, such as <wireTap> etc. Users should use <endpoint id="xxx"> to assign id's to endpoint in case they want to refer to those from Spring, such as via dependency injection.This functionality is also only in camel-spring and not in camel-blueprint, so it only adds to confusion if the XML DSL do not behave as much similar as possible.
CAMEL-11406 Update Documentation for consumer.delay, consumer.initialDelay and consumer.userFixedDelay Please update documentation for consumer.delay, consumer.initialDelay and consumer.userFixedDelay. Task Update Documentation for consumer.delay, consumer.initialDelay and consumer.userFixedDelay Please update documentation for consumer.delay, consumer.initialDelay and consumer.userFixedDelay.
CAMEL-11399 ZooKeeperRoutePolicy only suspends and not stops JMSConsumer Suspended JMS consumers only pausing the delivery of messages from the broker to the consumer. So if the suspended consumer gets active in case of a failover it receives all the messages the failed route has already processed - at least if it is connected via a non durable, non shared subscription to a JMS topic. One might argue that this isn't a valid scenario - since you should involve queues (overhead of copying messages if a topic is what you really need) or shared durable subscriptions (only JMS >= 2.0; can lead to a (unwanted) backlog) if you use the ZooKeeper component for providing some kind of HA. One the other hand, if I need a lightweight solution and didn't care about the loss of some messages while the failover happens - and I absolutely need to avoid the additional load on the server for maintaining an additional queue because I rely on high throughput, I think I hit a scenario that isn't far-fetched.Also I don't think it's good to have a unused active connection per slave-node to the JMS broker with respect to the usage of resources on the broker.So my suggestion would be to solve this by really stopping the Consumer services. However I look at this issue by just inspecting the JMS behaviour - so maybe other consumer services exist that depend on the 'suspend'-behaviour (if the service isn't suspendable stop is called as a fallback anyway). So before talking about potential code changes I think we need to clarify if the described scenario is valid for camel-zookeeper and if stopping consumers is really the right solution for the issue.Thanks in advance; and please let me know if something is unclear or if there are areas where I can provide/collect further information. Improvement ZooKeeperRoutePolicy only suspends and not stops JMSConsumer Suspended JMS consumers only pausing the delivery of messages from the broker to the consumer. So if the suspended consumer gets active in case of a failover it receives all the messages the failed route has already processed - at least if it is connected via a non durable, non shared subscription to a JMS topic. One might argue that this isn't a valid scenario - since you should involve queues (overhead of copying messages if a topic is what you really need) or shared durable subscriptions (only JMS >= 2.0; can lead to a (unwanted) backlog) if you use the ZooKeeper component for providing some kind of HA. One the other hand, if I need a lightweight solution and didn't care about the loss of some messages while the failover happens - and I absolutely need to avoid the additional load on the server for maintaining an additional queue because I rely on high throughput, I think I hit a scenario that isn't far-fetched.Also I don't think it's good to have a unused active connection per slave-node to the JMS broker with respect to the usage of resources on the broker.So my suggestion would be to solve this by really stopping the Consumer services. However I look at this issue by just inspecting the JMS behaviour - so maybe other consumer services exist that depend on the 'suspend'-behaviour (if the service isn't suspendable stop is called as a fallback anyway). So before talking about potential code changes I think we need to clarify if the described scenario is valid for camel-zookeeper and if stopping consumers is really the right solution for the issue.Thanks in advance; and please let me know if something is unclear or if there are areas where I can provide/collect further information.
CAMEL-11393 sql-stored - Add support for typeNames and scale in grammar See SOhttps://stackoverflow.com/questions/44394720/using-oracle-user-defined-object-types-in-apache-camel-sql-stored-component Improvement sql-stored - Add support for typeNames and scale in grammar See SOhttps://stackoverflow.com/questions/44394720/using-oracle-user-defined-object-types-in-apache-camel-sql-stored-component
CAMEL-11384 camel-spring-boot - Add auto configuration for turning on MDC logging In CamelConfigurationProperties we need to add the option for useMDCLogging  Improvement camel-spring-boot - Add auto configuration for turning on MDC logging In CamelConfigurationProperties we need to add the option for useMDCLogging 
CAMEL-11380 Optimise - Allow to turn DataType on or off on Message We can optimise to not create DataType instances on the Message instance if its not really needed.Its part of the new route contract where it is used to know the data type and then do contract enforcement and validation/conversion if needed.But for regular use-cases it has not so much value ... yet.So we should maybe turn it off by default, and allow to turn it on|off, and then turn it on if you use contract enforcement. Improvement Optimise - Allow to turn DataType on or off on Message We can optimise to not create DataType instances on the Message instance if its not really needed.Its part of the new route contract where it is used to know the data type and then do contract enforcement and validation/conversion if needed.But for regular use-cases it has not so much value ... yet.So we should maybe turn it off by default, and allow to turn it on|off, and then turn it on if you use contract enforcement.
CAMEL-11379 Optimise - core type converters to be invoked faster  Instead of adding the core type converters in a bit of dynamic way, we can hardcode how they are registered and invoked which will by pass some of the overhead that dynamic discovered type converters have.The benefit is that these core type converters are used a lot more and therefore we can gain some memory footprint and performance by doing so. Improvement Optimise - core type converters to be invoked faster  Instead of adding the core type converters in a bit of dynamic way, we can hardcode how they are registered and invoked which will by pass some of the overhead that dynamic discovered type converters have.The benefit is that these core type converters are used a lot more and therefore we can gain some memory footprint and performance by doing so.
CAMEL-11377 Optimise - Bean expression invoking bean can use static method instead of creating new objects A little optimisation to use methods on the existing BeanExpression instead instead of creating a new inner class for each method invocation. Improvement Optimise - Bean expression invoking bean can use static method instead of creating new objects A little optimisation to use methods on the existing BeanExpression instead instead of creating a new inner class for each method invocation.
CAMEL-11375 Optimise - BeanProcessor - Make light-weight not as service When calling a bean from a Camel route we can optimise to let BeanProcessor be used in a lighter-way without being a service as we dont need to keep its state, as its a one-time use object only being used to invoke the bean and discarded afterwards.Where as a service is more intended for long time lifecycle which has state to start/stop etc. Improvement Optimise - BeanProcessor - Make light-weight not as service When calling a bean from a Camel route we can optimise to let BeanProcessor be used in a lighter-way without being a service as we dont need to keep its state, as its a one-time use object only being used to invoke the bean and discarded afterwards.Where as a service is more intended for long time lifecycle which has state to start/stop etc.
CAMEL-11368 Optimise - Runtime endpoint registry - Turn off by default We should turn off this by default as it brings not so much value out of the box.And if its off, then we can optimise some areas in camel as then there is no event notifiers in normal use-cases which we can then optimise the hot spots to know and take advantage off. Improvement Optimise - Runtime endpoint registry - Turn off by default We should turn off this by default as it brings not so much value out of the box.And if its off, then we can optimise some areas in camel as then there is no event notifiers in normal use-cases which we can then optimise the hot spots to know and take advantage off.
CAMEL-11365 camel-spring-boot - allowUseOriginalMessage should have same default as camel-core See CAMEL-9250This default was not turned off in camel-spring-boot.Turning this off avoids defensive copy and yields a little better performance Improvement camel-spring-boot - allowUseOriginalMessage should have same default as camel-core See CAMEL-9250This default was not turned off in camel-spring-boot.Turning this off avoids defensive copy and yields a little better performance
CAMEL-11364 Runtime endpoint registry - Do not use extended mode as default We can turn this off as the extended mode may not bring as much value. In this mode it captures hit stats for each endpoint in use. There is plenty of other stats for that in the route / processor mbeans.http://camel.465427.n5.nabble.com/Runtime-endpoint-registry-is-in-extended-mode-tp5801306.html Improvement Runtime endpoint registry - Do not use extended mode as default We can turn this off as the extended mode may not bring as much value. In this mode it captures hit stats for each endpoint in use. There is plenty of other stats for that in the route / processor mbeans.http://camel.465427.n5.nabble.com/Runtime-endpoint-registry-is-in-extended-mode-tp5801306.html
CAMEL-11360 Optimise - Disable Tracer and use BacklogTracer instead See CAMEL-11359We have the old tracer logic that is cruft. Its still capturing tracing details during runtime, but that is obsolete with the message history we use instead (eg the stuff that also dumps those route stacktrace errors).So if users say camelContext.setTracing(true) we can then use BacklogTracer instead to log similar trace events.This allows us to not capture 2x trace details during routing as message history will be used for both. Improvement Optimise - Disable Tracer and use BacklogTracer instead See CAMEL-11359We have the old tracer logic that is cruft. Its still capturing tracing details during runtime, but that is obsolete with the message history we use instead (eg the stuff that also dumps those route stacktrace errors).So if users say camelContext.setTracing(true) we can then use BacklogTracer instead to log similar trace events.This allows us to not capture 2x trace details during routing as message history will be used for both.
CAMEL-11359 Deprecate TracedRouteNodes in favour of message history We should deprecate TracedRouteNodes as its the old cruft for the legacy tracer. We have a better solution with the message history EIP.The TracedRouteNodes is taking up memory footprint during routing, so if we can start to turn it off and not use it then that is better. Improvement Deprecate TracedRouteNodes in favour of message history We should deprecate TracedRouteNodes as its the old cruft for the legacy tracer. We have a better solution with the message history EIP.The TracedRouteNodes is taking up memory footprint during routing, so if we can start to turn it off and not use it then that is better.
CAMEL-11358 Optimise - Event listener to avoid copy on write array list See CAMEL-5531After camel is started we should switch to another implementation of the event listern list, as when you iterate it then the copy on write will create a new iterator. And we iterate a lot during routing when Camel emits events for each step a message takes in the route graph Improvement Optimise - Event listener to avoid copy on write array list See CAMEL-5531After camel is started we should switch to another implementation of the event listern list, as when you iterate it then the copy on write will create a new iterator. And we iterate a lot during routing when Camel emits events for each step a message takes in the route graph
CAMEL-11355 Consumer - ErrorHandler should ignore rejected exception due to shutdown We can get errors such as{code}2017-05-28 20:47:31.913  WARN 85415 --- [- timer://hello] o.a.camel.component.timer.TimerConsumer  : Error processing exchange. Exchange[ID-davsclaus-pro-local-55009-1495997185618-0-124]. Caused by: [java.util.concurrent.RejectedExecutionException - null]java.util.concurrent.RejectedExecutionException: null	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:423) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.DelayProcessorSupport.processDelay(DelayProcessorSupport.java:100) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:168) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:536) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:196) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:78) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_131]	at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_131]{code} Improvement Consumer - ErrorHandler should ignore rejected exception due to shutdown We can get errors such as{code}2017-05-28 20:47:31.913  WARN 85415 --- [- timer://hello] o.a.camel.component.timer.TimerConsumer  : Error processing exchange. Exchange[ID-davsclaus-pro-local-55009-1495997185618-0-124]. Caused by: [java.util.concurrent.RejectedExecutionException - null]java.util.concurrent.RejectedExecutionException: null	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:423) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.DelayProcessorSupport.processDelay(DelayProcessorSupport.java:100) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:168) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:536) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) ~[camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:196) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:78) [camel-core-2.20.0-SNAPSHOT.jar:2.20.0-SNAPSHOT]	at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_131]	at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_131]{code}
CAMEL-11354 Optimise - JMX oldest inflight can be optimised Having to store timestamp per inflight exchange causes too much memory to be created as we create a key per exchange.See before.pngIf turning this off we dont have those extra objects Improvement Optimise - JMX oldest inflight can be optimised Having to store timestamp per inflight exchange causes too much memory to be created as we create a key per exchange.See before.pngIf turning this off we dont have those extra objects
CAMEL-11353 Optimise - JMX Statistic split into specialized classes Instead of general Statistic class we can crate specialized for the different kind we need, and this can reduce the object size as not all value, lastValue or updateCounter state Improvement Optimise - JMX Statistic split into specialized classes Instead of general Statistic class we can crate specialized for the different kind we need, and this can reduce the object size as not all value, lastValue or updateCounter state
CAMEL-11351 Optimize - ProducerCache - Avoid creating new processor for each send if result processor When using producer template / producer cache and have a result processor to convert the result to X then it wraps using a set of internal processors / uow etc which creates a new objects which we can avoid. This was introduced by CAMEL-10308We can further optimise this to avoid creating a new instance of internal processor but use a shared instance. This is a hot spot as ProducerCache is used by producer template, and EIPs that sends to endpoints such as to and toD etc. Improvement Optimize - ProducerCache - Avoid creating new processor for each send if result processor When using producer template / producer cache and have a result processor to convert the result to X then it wraps using a set of internal processors / uow etc which creates a new objects which we can avoid. This was introduced by CAMEL-10308We can further optimise this to avoid creating a new instance of internal processor but use a shared instance. This is a hot spot as ProducerCache is used by producer template, and EIPs that sends to endpoints such as to and toD etc.
CAMEL-11350 Optimize - StopWatch should be tiny to have less memory footprint We use many StopWatch to time how long time it takes to route messages in Camel in the routes / jmx etc. We can reduce the class size by only storing one long variable instead of 2. Improvement Optimize - StopWatch should be tiny to have less memory footprint We use many StopWatch to time how long time it takes to route messages in Camel in the routes / jmx etc. We can reduce the class size by only storing one long variable instead of 2.
CAMEL-11349 Optimize EventNotifer to reuse Event instance If there are multiple event notifier's then they each have their own EventObject instance created. Instead we can create it once. Also we can quicker detect if event notification is turned off and exit sooner Improvement Optimize EventNotifer to reuse Event instance If there are multiple event notifier's then they each have their own EventObject instance created. Instead we can create it once. Also we can quicker detect if event notification is turned off and exit sooner
CAMEL-11347 Optimize AsyncCallback in EIPs to use reusable static classes When some EIPs or consumer routes via AsyncCallback then we create a new AsyncCallback as anonymous inner class. But this creates a new instance as the JVM cannot optimize that.As those callback don't usually have their own state, we can likely replace that with a single reusable instance which can reduce the memory allocation.For example this TimerConsumer$3 can be optimized.  Improvement Optimize AsyncCallback in EIPs to use reusable static classes When some EIPs or consumer routes via AsyncCallback then we create a new AsyncCallback as anonymous inner class. But this creates a new instance as the JVM cannot optimize that.As those callback don't usually have their own state, we can likely replace that with a single reusable instance which can reduce the memory allocation.For example this TimerConsumer$3 can be optimized. 
CAMEL-11346 Optimize EventNotifier sending/sent exchange We create a fair number of StopWatch instances which is only needed if the event notification is being in use.However we can optimize this to let the sending return a boolean whether its in use or not, and then only if its in use, then we create a StopWatch to capture the timing. Improvement Optimize EventNotifier sending/sent exchange We create a fair number of StopWatch instances which is only needed if the event notification is being in use.However we can optimize this to let the sending return a boolean whether its in use or not, and then only if its in use, then we create a StopWatch to capture the timing.
CAMEL-11342 Optimize ManagedRoute We can optimize ManagedRoute to avoid synchronized block on start/end when it records details about longest inflight duration. Improvement Optimize ManagedRoute We can optimize ManagedRoute to avoid synchronized block on start/end when it records details about longest inflight duration.
CAMEL-11341 Optimize DefaultEndpointUtilizationStatistics This registry has a little synchronization point to record hits, we can optimize this. Improvement Optimize DefaultEndpointUtilizationStatistics This registry has a little synchronization point to record hits, we can optimize this.
CAMEL-11340 JMX performance statistics - Consider optimise to LongAdder Seeorg.apache.camel.management.mbean.ManagedPerformanceCounterorg.apache.camel.management.mbean.StatisticThose use long types with synchronized blocks. We can consider using LongAdder and non synchronized. Improvement JMX performance statistics - Consider optimise to LongAdder Seeorg.apache.camel.management.mbean.ManagedPerformanceCounterorg.apache.camel.management.mbean.StatisticThose use long types with synchronized blocks. We can consider using LongAdder and non synchronized.
CAMEL-11339 LRUCache - Optimise to use LongAdder instead of AtomicLong We are on Java 8 so we can use LongAdder for stat counters, which is better than AtomicLong. Improvement LRUCache - Optimise to use LongAdder instead of AtomicLong We are on Java 8 so we can use LongAdder for stat counters, which is better than AtomicLong.
CAMEL-11338 New DefaultUuidGenerator to startup Camel faster Seehttps://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/ActiveMQUuidGenerator.java#L82We should consider tweaking the uuid generator to maybe not use ServerSocket to get a random port number. But instead avoid this network associated stuff so the seed is generated faster and don't do network stuff.Then we can create a new DefaultUuidGenerator class to be used, and leave the ActiveMQ around to be identical with the code in ActiveMQ. Improvement New DefaultUuidGenerator to startup Camel faster Seehttps://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/ActiveMQUuidGenerator.java#L82We should consider tweaking the uuid generator to maybe not use ServerSocket to get a random port number. But instead avoid this network associated stuff so the seed is generated faster and don't do network stuff.Then we can create a new DefaultUuidGenerator class to be used, and leave the ActiveMQ around to be identical with the code in ActiveMQ.
CAMEL-11330 DefaultExchange - Look at optimize the Map implementation used for storing properties We can likely use a plain HashMap instead of ConcurrentMap where the former requires less memory foot print and object allocations. Improvement DefaultExchange - Look at optimize the Map implementation used for storing properties We can likely use a plain HashMap instead of ConcurrentMap where the former requires less memory foot print and object allocations.
CAMEL-11326 Exclude org.json from camel-spark See Apache Sparkhttps://github.com/apache/spark/pull/15798As this PR says they dont need org.json so we can likely exclude it from our pom.xml.Spark 2.1.x onwards have excluded it by default now. Task Exclude org.json from camel-spark See Apache Sparkhttps://github.com/apache/spark/pull/15798As this PR says they dont need org.json so we can likely exclude it from our pom.xml.Spark 2.1.x onwards have excluded it by default now.
CAMEL-11319 sql-stored - Add support for function See nabblehttp://camel.465427.n5.nabble.com/Oracle-Function-Calls-with-Camel-sql-2-19-0-tp5800096.html Improvement sql-stored - Add support for function See nabblehttp://camel.465427.n5.nabble.com/Oracle-Function-Calls-with-Camel-sql-2-19-0-tp5800096.html
CAMEL-11313 set defaultValue for FixedLength and other factories See nabble;http://camel.465427.n5.nabble.com/Bindy-DefaultValue-is-not-working-Need-help-td5795402.html#a5800037 Improvement set defaultValue for FixedLength and other factories See nabble;http://camel.465427.n5.nabble.com/Bindy-DefaultValue-is-not-working-Need-help-td5795402.html#a5800037
CAMEL-11312 camel-undertow - Rest-DSL should support OPTIONS See the unit test RestUndertowHttpOptionsTestThe method matcher should use RestConsumerContextPathMatcher to better match  Improvement camel-undertow - Rest-DSL should support OPTIONS See the unit test RestUndertowHttpOptionsTestThe method matcher should use RestConsumerContextPathMatcher to better match 
CAMEL-11308 MongoDB: No (auto) conversion for BigDecimal When trying to convert JavaObjects with BigDecimal fields, an exception is thrown (see below).Apparently, the reason for that is that the MongoDB driver doesn't convert BigDecimals natively, which is why you need to specify an own converter class.However, Camel <=2.18.3 didn't throw this error, so I assume that Camel brought its own Big Decimal converter class in previous versions that is now broken.Downgrading to 2.18.3 fixed the error for me.The issue showed up with the old camel-mongodb and the new camel-mongodb3 component.{noformat}Stacktrace---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.component.mongodb3.CamelMongoDbException: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.apache.camel.component.mongodb3.MongoDbComponent.wrapInCamelMongoDbException(MongoDbComponent.java:64)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:117)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)	at java.lang.Thread.run(Unknown Source)Caused by: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.bson.codecs.configuration.CodecCache.getOrThrow(CodecCache.java:46)	at org.bson.codecs.configuration.ProvidersCodecRegistry.get(ProvidersCodecRegistry.java:63)	at org.bson.codecs.configuration.ChildCodecRegistry.get(ChildCodecRegistry.java:51)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:174)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeIterable(DocumentCodec.java:197)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:170)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:131)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:45)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:63)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:29)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:101)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:43)	at com.mongodb.connection.BaseWriteCommandMessage.encodeMessageBodyWithMetadata(BaseWriteCommandMessage.java:129)	at com.mongodb.connection.RequestMessage.encodeWithMetadata(RequestMessage.java:160)	at com.mongodb.connection.WriteCommandProtocol.sendMessage(WriteCommandProtocol.java:220)	at com.mongodb.connection.WriteCommandProtocol.execute(WriteCommandProtocol.java:101)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:67)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:37)	at com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(DefaultServer.java:168)	at com.mongodb.connection.DefaultServerConnection.executeProtocol(DefaultServerConnection.java:289)	at com.mongodb.connection.DefaultServerConnection.insertCommand(DefaultServerConnection.java:118)	at com.mongodb.operation.MixedBulkWriteOperation$Run$2.executeWriteCommandProtocol(MixedBulkWriteOperation.java:465)	at com.mongodb.operation.MixedBulkWriteOperation$Run$RunExecutor.execute(MixedBulkWriteOperation.java:656)	at com.mongodb.operation.MixedBulkWriteOperation$Run.execute(MixedBulkWriteOperation.java:411)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:177)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:422)	at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:413)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:74)	at com.mongodb.Mongo.execute(Mongo.java:845)	at com.mongodb.Mongo$2.execute(Mongo.java:828)	at com.mongodb.MongoCollectionImpl.executeSingleWriteRequest(MongoCollectionImpl.java:550)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:317)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:307)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$createDoInsert$6(MongoDbProducer.java:408)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$wrap$0(MongoDbProducer.java:252)	at org.apache.camel.component.mongodb3.MongoDbProducer.invokeOperation(MongoDbProducer.java:132)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:115)	... 14 more[2017-05-22 11:08:57] SedaConsumer                   WARN  Error processing exchange. Exchange[]. Caused by: [org.apache.camel.component.mongodb3.CamelMongoDbException - org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.]org.apache.camel.component.mongodb3.CamelMongoDbException: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.apache.camel.component.mongodb3.MongoDbComponent.wrapInCamelMongoDbException(MongoDbComponent.java:64)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:117)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)	at java.lang.Thread.run(Unknown Source)Caused by: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.bson.codecs.configuration.CodecCache.getOrThrow(CodecCache.java:46)	at org.bson.codecs.configuration.ProvidersCodecRegistry.get(ProvidersCodecRegistry.java:63)	at org.bson.codecs.configuration.ChildCodecRegistry.get(ChildCodecRegistry.java:51)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:174)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeIterable(DocumentCodec.java:197)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:170)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:131)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:45)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:63)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:29)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:101)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:43)	at com.mongodb.connection.BaseWriteCommandMessage.encodeMessageBodyWithMetadata(BaseWriteCommandMessage.java:129)	at com.mongodb.connection.RequestMessage.encodeWithMetadata(RequestMessage.java:160)	at com.mongodb.connection.WriteCommandProtocol.sendMessage(WriteCommandProtocol.java:220)	at com.mongodb.connection.WriteCommandProtocol.execute(WriteCommandProtocol.java:101)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:67)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:37)	at com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(DefaultServer.java:168)	at com.mongodb.connection.DefaultServerConnection.executeProtocol(DefaultServerConnection.java:289)	at com.mongodb.connection.DefaultServerConnection.insertCommand(DefaultServerConnection.java:118)	at com.mongodb.operation.MixedBulkWriteOperation$Run$2.executeWriteCommandProtocol(MixedBulkWriteOperation.java:465)	at com.mongodb.operation.MixedBulkWriteOperation$Run$RunExecutor.execute(MixedBulkWriteOperation.java:656)	at com.mongodb.operation.MixedBulkWriteOperation$Run.execute(MixedBulkWriteOperation.java:411)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:177)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:422)	at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:413)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:74)	at com.mongodb.Mongo.execute(Mongo.java:845)	at com.mongodb.Mongo$2.execute(Mongo.java:828)	at com.mongodb.MongoCollectionImpl.executeSingleWriteRequest(MongoCollectionImpl.java:550)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:317)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:307)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$createDoInsert$6(MongoDbProducer.java:408)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$wrap$0(MongoDbProducer.java:252)	at org.apache.camel.component.mongodb3.MongoDbProducer.invokeOperation(MongoDbProducer.java:132)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:115)	... 14 more{noformat} Improvement MongoDB: No (auto) conversion for BigDecimal When trying to convert JavaObjects with BigDecimal fields, an exception is thrown (see below).Apparently, the reason for that is that the MongoDB driver doesn't convert BigDecimals natively, which is why you need to specify an own converter class.However, Camel <=2.18.3 didn't throw this error, so I assume that Camel brought its own Big Decimal converter class in previous versions that is now broken.Downgrading to 2.18.3 fixed the error for me.The issue showed up with the old camel-mongodb and the new camel-mongodb3 component.{noformat}Stacktrace---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.component.mongodb3.CamelMongoDbException: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.apache.camel.component.mongodb3.MongoDbComponent.wrapInCamelMongoDbException(MongoDbComponent.java:64)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:117)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)	at java.lang.Thread.run(Unknown Source)Caused by: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.bson.codecs.configuration.CodecCache.getOrThrow(CodecCache.java:46)	at org.bson.codecs.configuration.ProvidersCodecRegistry.get(ProvidersCodecRegistry.java:63)	at org.bson.codecs.configuration.ChildCodecRegistry.get(ChildCodecRegistry.java:51)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:174)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeIterable(DocumentCodec.java:197)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:170)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:131)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:45)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:63)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:29)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:101)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:43)	at com.mongodb.connection.BaseWriteCommandMessage.encodeMessageBodyWithMetadata(BaseWriteCommandMessage.java:129)	at com.mongodb.connection.RequestMessage.encodeWithMetadata(RequestMessage.java:160)	at com.mongodb.connection.WriteCommandProtocol.sendMessage(WriteCommandProtocol.java:220)	at com.mongodb.connection.WriteCommandProtocol.execute(WriteCommandProtocol.java:101)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:67)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:37)	at com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(DefaultServer.java:168)	at com.mongodb.connection.DefaultServerConnection.executeProtocol(DefaultServerConnection.java:289)	at com.mongodb.connection.DefaultServerConnection.insertCommand(DefaultServerConnection.java:118)	at com.mongodb.operation.MixedBulkWriteOperation$Run$2.executeWriteCommandProtocol(MixedBulkWriteOperation.java:465)	at com.mongodb.operation.MixedBulkWriteOperation$Run$RunExecutor.execute(MixedBulkWriteOperation.java:656)	at com.mongodb.operation.MixedBulkWriteOperation$Run.execute(MixedBulkWriteOperation.java:411)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:177)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:422)	at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:413)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:74)	at com.mongodb.Mongo.execute(Mongo.java:845)	at com.mongodb.Mongo$2.execute(Mongo.java:828)	at com.mongodb.MongoCollectionImpl.executeSingleWriteRequest(MongoCollectionImpl.java:550)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:317)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:307)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$createDoInsert$6(MongoDbProducer.java:408)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$wrap$0(MongoDbProducer.java:252)	at org.apache.camel.component.mongodb3.MongoDbProducer.invokeOperation(MongoDbProducer.java:132)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:115)	... 14 more[2017-05-22 11:08:57] SedaConsumer                   WARN  Error processing exchange. Exchange[]. Caused by: [org.apache.camel.component.mongodb3.CamelMongoDbException - org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.]org.apache.camel.component.mongodb3.CamelMongoDbException: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.apache.camel.component.mongodb3.MongoDbComponent.wrapInCamelMongoDbException(MongoDbComponent.java:64)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:117)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)	at java.lang.Thread.run(Unknown Source)Caused by: org.bson.codecs.configuration.CodecConfigurationException: Can't find a codec for class java.math.BigDecimal.	at org.bson.codecs.configuration.CodecCache.getOrThrow(CodecCache.java:46)	at org.bson.codecs.configuration.ProvidersCodecRegistry.get(ProvidersCodecRegistry.java:63)	at org.bson.codecs.configuration.ChildCodecRegistry.get(ChildCodecRegistry.java:51)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:174)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:172)	at org.bson.codecs.DocumentCodec.writeIterable(DocumentCodec.java:197)	at org.bson.codecs.DocumentCodec.writeValue(DocumentCodec.java:170)	at org.bson.codecs.DocumentCodec.writeMap(DocumentCodec.java:189)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:131)	at org.bson.codecs.DocumentCodec.encode(DocumentCodec.java:45)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:63)	at org.bson.codecs.BsonDocumentWrapperCodec.encode(BsonDocumentWrapperCodec.java:29)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:101)	at com.mongodb.connection.InsertCommandMessage.writeTheWrites(InsertCommandMessage.java:43)	at com.mongodb.connection.BaseWriteCommandMessage.encodeMessageBodyWithMetadata(BaseWriteCommandMessage.java:129)	at com.mongodb.connection.RequestMessage.encodeWithMetadata(RequestMessage.java:160)	at com.mongodb.connection.WriteCommandProtocol.sendMessage(WriteCommandProtocol.java:220)	at com.mongodb.connection.WriteCommandProtocol.execute(WriteCommandProtocol.java:101)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:67)	at com.mongodb.connection.InsertCommandProtocol.execute(InsertCommandProtocol.java:37)	at com.mongodb.connection.DefaultServer$DefaultServerProtocolExecutor.execute(DefaultServer.java:168)	at com.mongodb.connection.DefaultServerConnection.executeProtocol(DefaultServerConnection.java:289)	at com.mongodb.connection.DefaultServerConnection.insertCommand(DefaultServerConnection.java:118)	at com.mongodb.operation.MixedBulkWriteOperation$Run$2.executeWriteCommandProtocol(MixedBulkWriteOperation.java:465)	at com.mongodb.operation.MixedBulkWriteOperation$Run$RunExecutor.execute(MixedBulkWriteOperation.java:656)	at com.mongodb.operation.MixedBulkWriteOperation$Run.execute(MixedBulkWriteOperation.java:411)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:177)	at com.mongodb.operation.MixedBulkWriteOperation$1.call(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.OperationHelper.withConnectionSource(OperationHelper.java:422)	at com.mongodb.operation.OperationHelper.withConnection(OperationHelper.java:413)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:168)	at com.mongodb.operation.MixedBulkWriteOperation.execute(MixedBulkWriteOperation.java:74)	at com.mongodb.Mongo.execute(Mongo.java:845)	at com.mongodb.Mongo$2.execute(Mongo.java:828)	at com.mongodb.MongoCollectionImpl.executeSingleWriteRequest(MongoCollectionImpl.java:550)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:317)	at com.mongodb.MongoCollectionImpl.insertOne(MongoCollectionImpl.java:307)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$createDoInsert$6(MongoDbProducer.java:408)	at org.apache.camel.component.mongodb3.MongoDbProducer.lambda$wrap$0(MongoDbProducer.java:252)	at org.apache.camel.component.mongodb3.MongoDbProducer.invokeOperation(MongoDbProducer.java:132)	at org.apache.camel.component.mongodb3.MongoDbProducer.process(MongoDbProducer.java:115)	... 14 more{noformat}
CAMEL-11304 Add Distinct queries to camel-mongodb3 After adding distinct query functionality to the camel-mongodb component, Claus suggested I add the same functionality to the camel-mongodb3 component.  The ticket for the camel-mongodb work is CAMEL-11259. Improvement Add Distinct queries to camel-mongodb3 After adding distinct query functionality to the camel-mongodb component, Claus suggested I add the same functionality to the camel-mongodb3 component.  The ticket for the camel-mongodb work is CAMEL-11259.
CAMEL-11296 camel-maven-plugin:validate - Allow to detect duplicate route ids We can try to enhance this goal to gather all the route ids, and see if we can detect duplicate and then give WARNs or fail the build.Then users can turn on this maven plugin in their build and have it fail or warn accordingly.The goal can validate uris etc. But note its a best effort so it may report false positives and not be able to validate everytting 100%  New Feature camel-maven-plugin:validate - Allow to detect duplicate route ids We can try to enhance this goal to gather all the route ids, and see if we can detect duplicate and then give WARNs or fail the build.Then users can turn on this maven plugin in their build and have it fail or warn accordingly.The goal can validate uris etc. But note its a best effort so it may report false positives and not be able to validate everytting 100% 
CAMEL-11295 Spelling mistake in Apache Routing Policy  http://camel.apache.org/routepolicy.htmlin the above URL maxInflightExchanges - property has spelling mistakeThe maximum threshold when the throttling will start to suspend the route if the current number of inlfight exchanges is higher than this value."inlfight" word is spelling mistake Task Spelling mistake in Apache Routing Policy  http://camel.apache.org/routepolicy.htmlin the above URL maxInflightExchanges - property has spelling mistakeThe maximum threshold when the throttling will start to suspend the route if the current number of inlfight exchanges is higher than this value."inlfight" word is spelling mistake
CAMEL-11277 camel-restlet - Should include component name in from endpoint uri It outputs its uri as{code}http://localhost:1301/orders with spaces in path/{id}/{x}?restletMethod=GET{code}Which looses the restlet component name, as it should be{code}restlet://http://localhost:1301/orders%20with%20spaces%20in%20path/{id}/{x}?restletMethod=GET{code} Improvement camel-restlet - Should include component name in from endpoint uri It outputs its uri as{code}http://localhost:1301/orders with spaces in path/{id}/{x}?restletMethod=GET{code}Which looses the restlet component name, as it should be{code}restlet://http://localhost:1301/orders%20with%20spaces%20in%20path/{id}/{x}?restletMethod=GET{code}
CAMEL-11276 camel-restlet URI uses ( ) rather than { } for path parameters When testing the camel-example-restlet-jdbc example with OpenTracing, to extract the URI template, I noticed that the endpoint URI used curly braces, however the exchange.getFromEndpoint().getEndpointUri() return just the path but with round brackets for the path parameter:e.g. "/persons/(personId)" instead of "/persons/{personId}"This seems inconsistent. Improvement camel-restlet URI uses ( ) rather than { } for path parameters When testing the camel-example-restlet-jdbc example with OpenTracing, to extract the URI template, I noticed that the endpoint URI used curly braces, however the exchange.getFromEndpoint().getEndpointUri() return just the path but with round brackets for the path parameter:e.g. "/persons/(personId)" instead of "/persons/{personId}"This seems inconsistent.
CAMEL-11259 Add Distinct queries to camel-mongodb I would like to see the camel-mongodb component have the ability to query for distinct fields.   Improvement Add Distinct queries to camel-mongodb I would like to see the camel-mongodb component have the ability to query for distinct fields.  
CAMEL-11253 camel-http4 - Add missing doc to component option This option needs that description like the others have. You can find the text in the javadochttps://github.com/apache/camel/blob/3505e718db48cc0d8be5b47f6c4030c958d93a5f/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java#L104-L105 Improvement camel-http4 - Add missing doc to component option This option needs that description like the others have. You can find the text in the javadochttps://github.com/apache/camel/blob/3505e718db48cc0d8be5b47f6c4030c958d93a5f/components/camel-http4/src/main/java/org/apache/camel/component/http4/HttpComponent.java#L104-L105
CAMEL-11250 File consumer - Allow to specify a header that has the file name to poll See SOhttp://stackoverflow.com/questions/43849165/camel-pollenrich-generating-a-lot-of-timed-waiting-threadsWe can have a FILE_FILTER_NAME header that matches in the org.apache.camel.component.file.GenericFileConsumer#isMatched(org.apache.camel.component.file.GenericFile<T>, boolean, java.util.List<T>)so end users can set the header first and then do a pollEnrich with a static endpoint.The header can then use equalsIgnoreCase and reguar exp for matching, to make it easier to match files. Improvement File consumer - Allow to specify a header that has the file name to poll See SOhttp://stackoverflow.com/questions/43849165/camel-pollenrich-generating-a-lot-of-timed-waiting-threadsWe can have a FILE_FILTER_NAME header that matches in the org.apache.camel.component.file.GenericFileConsumer#isMatched(org.apache.camel.component.file.GenericFile<T>, boolean, java.util.List<T>)so end users can set the header first and then do a pollEnrich with a static endpoint.The header can then use equalsIgnoreCase and reguar exp for matching, to make it easier to match files.
CAMEL-11246 camel-catalog : provide information about the uri support for expressions Some component like camel-sql support expressions to be used inside the uri definition and this may cause troubles in environment like spring as the simple language prefix/suffix clash with spring's property resolution.By providing some information about what languages the endpoint supports in the camel-catalog, tools like IDEs or validation plugins can provide some hints or warning to the user/developer.  Improvement camel-catalog : provide information about the uri support for expressions Some component like camel-sql support expressions to be used inside the uri definition and this may cause troubles in environment like spring as the simple language prefix/suffix clash with spring's property resolution.By providing some information about what languages the endpoint supports in the camel-catalog, tools like IDEs or validation plugins can provide some hints or warning to the user/developer. 
CAMEL-11239 camel-catalog-maven - Remove sl4j logger Remove usage of slf4j logger as it can cause classloader pain in tooling Task camel-catalog-maven - Remove sl4j logger Remove usage of slf4j logger as it can cause classloader pain in tooling
CAMEL-11224 aws-sqs producer does not support new FIFO queues At the moment *aws-sqs producer* does not support the new _FIFO_ queue mechanism from AWS ([FIFO-queues ref|http://http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html]). There is a new parameter, +MessageGroupId+, that is required for FIFO queues (it is not available on Standard queues).The message group ID is the tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are always processed one by one, in a strict order relative to the message group (however, messages that belong to different message groups might be processed out of order). +Source+: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queue-recommendations.html#using-messagegroupid-property.This improvement consists on adding support for MessageGroupId on the producer side of aws-sqs. It should be applicable on FIFO queues only. It could be customizable via URI options. A default strategy should be provided. This default strategy will generate a unique message group ID for each message to favor throughput and latency over ordering of messages. Improvement aws-sqs producer does not support new FIFO queues At the moment *aws-sqs producer* does not support the new _FIFO_ queue mechanism from AWS ([FIFO-queues ref|http://http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html]). There is a new parameter, +MessageGroupId+, that is required for FIFO queues (it is not available on Standard queues).The message group ID is the tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are always processed one by one, in a strict order relative to the message group (however, messages that belong to different message groups might be processed out of order). +Source+: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queue-recommendations.html#using-messagegroupid-property.This improvement consists on adding support for MessageGroupId on the producer side of aws-sqs. It should be applicable on FIFO queues only. It could be customizable via URI options. A default strategy should be provided. This default strategy will generate a unique message group ID for each message to favor throughput and latency over ordering of messages.
CAMEL-11220 camel-twitter - Allow to sort tweets so oldest come first If you use from twitter, then the tweets may come with newest before oldest etc. And you may want to sort the batch of tweets by id so its oldest .. newest order, or to use a custom sorting.This applies to the poll mode where it poll X tweets and then emit then one by one. We should then sort first. Improvement camel-twitter - Allow to sort tweets so oldest come first If you use from twitter, then the tweets may come with newest before oldest etc. And you may want to sort the batch of tweets by id so its oldest .. newest order, or to use a custom sorting.This applies to the poll mode where it poll X tweets and then emit then one by one. We should then sort first.
CAMEL-11216 REST-DSL - Producer fails with NPE or other exceptions if you have not set a hostname If you forget to configure a host name then the rest producer fails with different errors if you use http4, netty4-http, undertow etc.We should likely add some validation logic in the rest endpoint / rest producer so it can detect this missing configuration and report this in the same way.You can reproduce from this example by removing host athttps://github.com/apache/camel/blob/master/examples/camel-example-rest-producer/src/main/java/sample/camel/RestRoute.java#L33 Improvement REST-DSL - Producer fails with NPE or other exceptions if you have not set a hostname If you forget to configure a host name then the rest producer fails with different errors if you use http4, netty4-http, undertow etc.We should likely add some validation logic in the rest endpoint / rest producer so it can detect this missing configuration and report this in the same way.You can reproduce from this example by removing host athttps://github.com/apache/camel/blob/master/examples/camel-example-rest-producer/src/main/java/sample/camel/RestRoute.java#L33
CAMEL-11214 FluentProducerTemplate - Should allow non default uri You getCaused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: geoRestController; nested exception is java.lang.NullPointerException	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:159)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)	... 21 moreCaused by: java.lang.NullPointerException	at java.util.Objects.requireNonNull(Objects.java:203)	at java.util.Optional.<init>(Optional.java:96)	at java.util.Optional.of(Optional.java:108)	at org.apache.camel.builder.DefaultFluentProducerTemplate.setDefaultEndpoint(DefaultFluentProducerTemplate.java:103)	at org.apache.camel.impl.CamelPostProcessorHelper.createInjectionFluentProducerTemplate(CamelPostProcessorHelper.java:333)	at org.apache.camel.impl.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:224)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:200)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:194)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor$1.doWith(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:73)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:167)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:82)	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:153)	... 24 moreIf you just have    @EndpointInject    private FluentProducerTemplate template;So you need to set some dummy uri    @EndpointInject(uri = "log:foo")    private FluentProducerTemplate template; Improvement FluentProducerTemplate - Should allow non default uri You getCaused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: geoRestController; nested exception is java.lang.NullPointerException	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:159)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:409)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1620)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)	... 21 moreCaused by: java.lang.NullPointerException	at java.util.Objects.requireNonNull(Objects.java:203)	at java.util.Optional.<init>(Optional.java:96)	at java.util.Optional.of(Optional.java:108)	at org.apache.camel.builder.DefaultFluentProducerTemplate.setDefaultEndpoint(DefaultFluentProducerTemplate.java:103)	at org.apache.camel.impl.CamelPostProcessorHelper.createInjectionFluentProducerTemplate(CamelPostProcessorHelper.java:333)	at org.apache.camel.impl.CamelPostProcessorHelper.getInjectionValue(CamelPostProcessorHelper.java:224)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:200)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectField(DefaultCamelBeanPostProcessor.java:194)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor$1.doWith(DefaultCamelBeanPostProcessor.java:181)	at org.apache.camel.util.ReflectionHelper.doWithFields(ReflectionHelper.java:73)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.injectFields(DefaultCamelBeanPostProcessor.java:167)	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:82)	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:153)	... 24 moreIf you just have    @EndpointInject    private FluentProducerTemplate template;So you need to set some dummy uri    @EndpointInject(uri = "log:foo")    private FluentProducerTemplate template;
CAMEL-11211 Remove deprecated SpanManager from camel-opentracing The current implementation uses the SpanManager from the opentracing-contrib org. Span management is currently being integrated more into the core opentracing-java APIs, and therefore would need to change in the near future. Improvement Remove deprecated SpanManager from camel-opentracing The current implementation uses the SpanManager from the opentracing-contrib org. Span management is currently being integrated more into the core opentracing-java APIs, and therefore would need to change in the near future.
CAMEL-11209 camel-core-starter - Should not have caffeine dependency [INFO] |  \- org.apache.camel:camel-core-starter:jar:2.20.0-SNAPSHOT:compile[INFO] |     \- com.github.ben-manes.caffeine:caffeine:jar:2.4.0:compileThat is shaded in camel-core and should not be in the dependency tree.[~nferraro] can you look and fix this. Would be good to get done soon. Task camel-core-starter - Should not have caffeine dependency [INFO] |  \- org.apache.camel:camel-core-starter:jar:2.20.0-SNAPSHOT:compile[INFO] |     \- com.github.ben-manes.caffeine:caffeine:jar:2.4.0:compileThat is shaded in camel-core and should not be in the dependency tree.[~nferraro] can you look and fix this. Would be good to get done soon.
CAMEL-11208 camel-swagger-java - Should use guava 20 and not 19 The karaf feature uses the correct version 20, but the regular mvn project is on version 19. Improvement camel-swagger-java - Should use guava 20 and not 19 The karaf feature uses the correct version 20, but the regular mvn project is on version 19.
CAMEL-11207 camel-twitter - Default poll delay is 60s we can lower it to 30s Using 60s is maybe too slow. You can use 30s as a kinda safe lower value to avoid rate limits. If you go below 15s you may get rate limits. Improvement camel-twitter - Default poll delay is 60s we can lower it to 30s Using 60s is maybe too slow. You can use 30s as a kinda safe lower value to avoid rate limits. If you go below 15s you may get rate limits.
CAMEL-11206 camel-twitter - The default delay is not used It should by default be 60 seconds but its set back to 0.5 sec which causes twitter rate limit problems. Improvement camel-twitter - The default delay is not used It should by default be 60 seconds but its set back to 0.5 sec which causes twitter rate limit problems.
CAMEL-11204 camel-catalog - asEndpointUri to support connectors/component with no context-path part You may have connectors that has no context-path, and this generates anyway such as{code}twitter-mention:{code}Notice the ending colon, which should be removedAnd likewise for query parameters{code}salesforce-upsert-contact:?sObjectIdName=TwitterScreenName__c{code}There is :? which should just be ? Improvement camel-catalog - asEndpointUri to support connectors/component with no context-path part You may have connectors that has no context-path, and this generates anyway such as{code}twitter-mention:{code}Notice the ending colon, which should be removedAnd likewise for query parameters{code}salesforce-upsert-contact:?sObjectIdName=TwitterScreenName__c{code}There is :? which should just be ?
CAMEL-11193 Route from kafka topic to another kafka topic issue Because the consumer set headers with kafka topic and partition from the consumer, then these will override the endpoint configured on the producer, eg{code}from("kafka:foo")   ..   to("kafka:bar"){code}will end up going back to foo.You can remove the headers to make it work{code}from("kafka:foo")   ..   removeHeaders("kafka*")   to("kafka:bar"){code}But maybe we should have an option on the producer that takes the endpoint value always, and you need to turn the option on to allow header overrides.Another option is to detect that its the same topic to avoid sending it back to itself. Improvement Route from kafka topic to another kafka topic issue Because the consumer set headers with kafka topic and partition from the consumer, then these will override the endpoint configured on the producer, eg{code}from("kafka:foo")   ..   to("kafka:bar"){code}will end up going back to foo.You can remove the headers to make it work{code}from("kafka:foo")   ..   removeHeaders("kafka*")   to("kafka:bar"){code}But maybe we should have an option on the producer that takes the endpoint value always, and you need to turn the option on to allow header overrides.Another option is to detect that its the same topic to avoid sending it back to itself.
CAMEL-11189 Upgrade zipkin There is a newer version Task Upgrade zipkin There is a newer version
CAMEL-11188 Use Files.newFileInputStream instead of new FileInputStream See this bloghttps://www.cloudbees.com/blog/fileinputstream-fileoutputstream-considered-harmful Improvement Use Files.newFileInputStream instead of new FileInputStream See this bloghttps://www.cloudbees.com/blog/fileinputstream-fileoutputstream-considered-harmful
CAMEL-11185 Remove camel-scr-starter spring boot module This does not make sense as SCR is for OSGi and cannot run inside spring-boot.There is also an tests in tests/camel-itest-spring-boot which should be removed Task Remove camel-scr-starter spring boot module This does not make sense as SCR is for OSGi and cannot run inside spring-boot.There is also an tests in tests/camel-itest-spring-boot which should be removed
CAMEL-11184 tests - Add missing tests to itest spring boot In tests/camel-itest-spring-boot there is a bunch of integration tests of the components running on spring boot.But as we have added new components then some are not added here. We should look at the delta and add the missing tests. Test tests - Add missing tests to itest spring boot In tests/camel-itest-spring-boot there is a bunch of integration tests of the components running on spring boot.But as we have added new components then some are not added here. We should look at the delta and add the missing tests.
CAMEL-11183 Checkstyle errors in camel-package-maven-plugin The following Checkstyle errors are reported for the camel-package-maven-plugin module:{code}[ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PackageDataFormatMojo.java:105:5: Executable statement count is 101 (max allowed is 100). [ExecutableStatementCount][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PackageHelper.java:165:13: Boolean expression complexity is 7 (max allowed is 6). [BooleanExpressionComplexity][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogKarafMojo.java:394:21: Boolean expression complexity is 9 (max allowed is 6). [BooleanExpressionComplexity][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogMojo.java:323:5: Executable statement count is 109 (max allowed is 100). [ExecutableStatementCount][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogMojo.java:795:21: Boolean expression complexity is 9 (max allowed is 6). [BooleanExpressionComplexity][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogSpringBootMojo.java:426:21: Boolean expression complexity is 9 (max allowed is 6). [BooleanExpressionComplexity]{code} Task Checkstyle errors in camel-package-maven-plugin The following Checkstyle errors are reported for the camel-package-maven-plugin module:{code}[ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PackageDataFormatMojo.java:105:5: Executable statement count is 101 (max allowed is 100). [ExecutableStatementCount][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PackageHelper.java:165:13: Boolean expression complexity is 7 (max allowed is 6). [BooleanExpressionComplexity][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogKarafMojo.java:394:21: Boolean expression complexity is 9 (max allowed is 6). [BooleanExpressionComplexity][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogMojo.java:323:5: Executable statement count is 109 (max allowed is 100). [ExecutableStatementCount][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogMojo.java:795:21: Boolean expression complexity is 9 (max allowed is 6). [BooleanExpressionComplexity][ERROR] C:\var\git\camel\tooling\maven\camel-package-maven-plugin\src\main\java\org\apache\camel\maven\packaging\PrepareCatalogSpringBootMojo.java:426:21: Boolean expression complexity is 9 (max allowed is 6). [BooleanExpressionComplexity]{code}
CAMEL-11182 SolrParams are not honored when sending SolrInputDocument. I have an update Processor chain which triggers during every update of the solr document which requires SolrParams to be passed. I noticed SolrParams is not applicable when trying to push SolrInputDocument(referring to SolrProducer.java). Can i submit a fix for this?  Improvement SolrParams are not honored when sending SolrInputDocument. I have an update Processor chain which triggers during every update of the solr document which requires SolrParams to be passed. I noticed SolrParams is not applicable when trying to push SolrInputDocument(referring to SolrProducer.java). Can i submit a fix for this? 
CAMEL-11178 Default method on interface is invisible during Camel Simple evaluation Issue can be reproduced with below unit test, I have not found it in tracker. Essence: interface A has default method, interface B extends A, default method is invisible during Simple language evaluation. {code:java}import org.apache.camel.CamelContext;import org.apache.camel.Exchange;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.impl.DefaultCamelContext;import org.apache.camel.impl.DefaultExchange;import org.junit.Assert;import org.junit.Test;public class DefaultMethodIsInvisibleTest {    public static interface A {        public default String defaultMethod() {            return "default method result";        }    }    public static interface B extends A {    }    @Test    public void camelSimpleDoesNotSeeDefaultMethod() throws Exception {        CamelContext context = new DefaultCamelContext();        context.addRoutes(new RouteBuilder() {            public void configure() {                from("direct:camelSimpleDoesNotSeeDefaultMethod").script().simple("${exchangeProperty.myObject.defaultMethod}");            }        });        context.start();        Exchange incomingExchange = new DefaultExchange(context);        incomingExchange.setProperty("myObject", new B() {        });        Exchange result = context.createProducerTemplate().send("direct:camelSimpleDoesNotSeeDefaultMethod", incomingExchange);        Assert.assertNull(result.getException());    }}{code}Stacktrace:{code}Caused by: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: defaultMethod on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: defaultMethod not found on bean: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2@5dafbe45 of type: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2. Exchange[][Message: [Body is null]]    at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:290)    at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114)    ... 46 common frames omittedCaused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: defaultMethod not found on bean: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2@5dafbe45 of type: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2. Exchange[][Message: [Body is null]]    at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:269)    at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:183)    at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:159){code} Improvement Default method on interface is invisible during Camel Simple evaluation Issue can be reproduced with below unit test, I have not found it in tracker. Essence: interface A has default method, interface B extends A, default method is invisible during Simple language evaluation. {code:java}import org.apache.camel.CamelContext;import org.apache.camel.Exchange;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.impl.DefaultCamelContext;import org.apache.camel.impl.DefaultExchange;import org.junit.Assert;import org.junit.Test;public class DefaultMethodIsInvisibleTest {    public static interface A {        public default String defaultMethod() {            return "default method result";        }    }    public static interface B extends A {    }    @Test    public void camelSimpleDoesNotSeeDefaultMethod() throws Exception {        CamelContext context = new DefaultCamelContext();        context.addRoutes(new RouteBuilder() {            public void configure() {                from("direct:camelSimpleDoesNotSeeDefaultMethod").script().simple("${exchangeProperty.myObject.defaultMethod}");            }        });        context.start();        Exchange incomingExchange = new DefaultExchange(context);        incomingExchange.setProperty("myObject", new B() {        });        Exchange result = context.createProducerTemplate().send("direct:camelSimpleDoesNotSeeDefaultMethod", incomingExchange);        Assert.assertNull(result.getException());    }}{code}Stacktrace:{code}Caused by: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: defaultMethod on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: defaultMethod not found on bean: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2@5dafbe45 of type: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2. Exchange[][Message: [Body is null]]    at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:290)    at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114)    ... 46 common frames omittedCaused by: org.apache.camel.component.bean.MethodNotFoundException: Method with name: defaultMethod not found on bean: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2@5dafbe45 of type: com.ubs.wma.gfi.tradersbook.subscriber.DefaultMethodIsInvisibleTest$2. Exchange[][Message: [Body is null]]    at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:269)    at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:183)    at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:159){code}
CAMEL-11172 Java 9 - camel-restdsl-swagger-plugin fails integration test and camel-example-kotlin cannot compile See the CI outputhttps://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/185/consoleText Task Java 9 - camel-restdsl-swagger-plugin fails integration test and camel-example-kotlin cannot compile See the CI outputhttps://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/185/consoleText
CAMEL-11168 Add deprecationNote to @Metadata So we can add a note that can refer the user to something else, eg mina -> mina2 etc. Then we can use the tooling to grab that note and add to the readme files etc. Improvement Add deprecationNote to @Metadata So we can add a note that can refer the user to something else, eg mina -> mina2 etc. Then we can use the tooling to grab that note and add to the readme files etc.
CAMEL-11167 Include Camel name in spring boot health check It can help see which Camel is being checked, currently we only see the version. Improvement Include Camel name in spring boot health check It can help see which Camel is being checked, currently we only see the version.
CAMEL-11162 camel-rest - Should we add content-type check for server side For example setting up a rest-dsl which consumes application/json and then a client calls it with text/plain or application/xml, should we then automatic let rest consumer detect this and return a HTTP status 415 (unsuported media type)Not all the HTTP server components does this today, eg jetty etc. But when using restlet which is more natual REST it would do so.We could then add an option to turn this on|off. The check is only if the media-type is within the list that may have been specified on consumes in the rest-dsl. Improvement camel-rest - Should we add content-type check for server side For example setting up a rest-dsl which consumes application/json and then a client calls it with text/plain or application/xml, should we then automatic let rest consumer detect this and return a HTTP status 415 (unsuported media type)Not all the HTTP server components does this today, eg jetty etc. But when using restlet which is more natual REST it would do so.We could then add an option to turn this on|off. The check is only if the media-type is within the list that may have been specified on consumes in the rest-dsl.
CAMEL-11160 Component docs - ascii doc warns [INFO] ================================================================================[INFO] Copying all Camel documents (ascii docs)[INFO] Found 349 ascii document filesasciidoctor: WARNING: ignite-component.adoc: line 44: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 136: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 213: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 258: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 287: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 327: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 384: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 415: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 460: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 474: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 486: list item index: expected 2, got 1asciidoctor: WARNING: ignite-component.adoc: line 492: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 81: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 107: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 245: invalid style for example block: INFOasciidoctor: WARNING: test-spring.adoc: line 274: invalid style for example block: INFOasciidoctor: WARNING: test-spring.adoc: line 303: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 356: invalid style for example block: INFOasciidoctor: WARNING: test-spring.adoc: line 394: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 417: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 447: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 471: section title out of sequence: expected level 2, got level 3[INFO] Converted 349 ascii documents to HTML[INFO] ================================================================================ Task Component docs - ascii doc warns [INFO] ================================================================================[INFO] Copying all Camel documents (ascii docs)[INFO] Found 349 ascii document filesasciidoctor: WARNING: ignite-component.adoc: line 44: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 136: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 213: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 258: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 287: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 327: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 384: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 415: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 460: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 474: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: ignite-component.adoc: line 486: list item index: expected 2, got 1asciidoctor: WARNING: ignite-component.adoc: line 492: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 81: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 107: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 245: invalid style for example block: INFOasciidoctor: WARNING: test-spring.adoc: line 274: invalid style for example block: INFOasciidoctor: WARNING: test-spring.adoc: line 303: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 356: invalid style for example block: INFOasciidoctor: WARNING: test-spring.adoc: line 394: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 417: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 447: section title out of sequence: expected level 2, got level 3asciidoctor: WARNING: test-spring.adoc: line 471: section title out of sequence: expected level 2, got level 3[INFO] Converted 349 ascii documents to HTML[INFO] ================================================================================
CAMEL-11149 SPI - Allow to plugin different headers map implementation See PR for backgroundhttps://github.com/apache/camel/pull/1527We can introduce a SPI that allows 3rd party to plugin a custom implementation of the headers map. Then you can use the default, that 3rd party, or a case insensitive if the latter is sufficient. However typically HTTP/REST based protocols are case insensitive headers.We should try to make it auto lookup from classpath using the factory finder which we do with others like the hystrix eip etc. Then we could have a camel-cedersoftware-java-util component which uses their implementation and Camel can then auto detect it from classpath and use it. New Feature SPI - Allow to plugin different headers map implementation See PR for backgroundhttps://github.com/apache/camel/pull/1527We can introduce a SPI that allows 3rd party to plugin a custom implementation of the headers map. Then you can use the default, that 3rd party, or a case insensitive if the latter is sufficient. However typically HTTP/REST based protocols are case insensitive headers.We should try to make it auto lookup from classpath using the factory finder which we do with others like the hystrix eip etc. Then we could have a camel-cedersoftware-java-util component which uses their implementation and Camel can then auto detect it from classpath and use it.
CAMEL-11147 camel-jms2 - JMS component using JMS 2.x api The camel-sjms2 is extending camel-sjms but adding JMS 2.0 api and use that such as shared topic.We should look at the camel-jms component and do a camel-jms2 that is using the JMS 2.0 api (requires artemis for testing, as AMQ is not 2.0).  New Feature camel-jms2 - JMS component using JMS 2.x api The camel-sjms2 is extending camel-sjms but adding JMS 2.0 api and use that such as shared topic.We should look at the camel-jms component and do a camel-jms2 that is using the JMS 2.0 api (requires artemis for testing, as AMQ is not 2.0). 
CAMEL-11146 Update description for all data formats and languages on big readme file This pagehttps://github.com/apache/camel/tree/master/componentsWe should improve description for all those data formats and languages as they are not very informative. They should have a short description like we do for components. Task Update description for all data formats and languages on big readme file This pagehttps://github.com/apache/camel/tree/master/componentsWe should improve description for all those data formats and languages as they are not very informative. They should have a short description like we do for components.
CAMEL-11145 Component docs - Fix broken links on github See this PRhttps://github.com/apache/camel/pull/1615/filesWe need to update the maven tooling that generates the table to deal with certain components to render correct links Task Component docs - Fix broken links on github See this PRhttps://github.com/apache/camel/pull/1615/filesWe need to update the maven tooling that generates the table to deal with certain components to render correct links
CAMEL-11136 Create PubNub component Move the PubNub component from the Rhiot project since it is not maintained. https://rhiot.gitbooks.io/rhiotdocumentation/content/cloudplatform/camel_components/camel_pubnub_component.htmlUpgrade the component to the latest PubNub release, and add missing features. The migration has been discused her :http://camel.465427.n5.nabble.com/Contributing-a-set-of-IoT-related-components-td5797075.html New Feature Create PubNub component Move the PubNub component from the Rhiot project since it is not maintained. https://rhiot.gitbooks.io/rhiotdocumentation/content/cloudplatform/camel_components/camel_pubnub_component.htmlUpgrade the component to the latest PubNub release, and add missing features. The migration has been discused her :http://camel.465427.n5.nabble.com/Contributing-a-set-of-IoT-related-components-td5797075.html
CAMEL-11135 camel-protobuf component improvements The following camel-protobuf component improvements are require:1. Automatic .proto file processing and Java stubs generation (no manual steps requires if library version or .proto file were changed)2. Ability to serialize/deserialize prorbuf message from JSON format in addition to native message format using embedded protobuf-java-util library. This feature could help in conjunction with camel-grpc component3. Documentation improvements and test files misprintings and formatting correction New Feature camel-protobuf component improvements The following camel-protobuf component improvements are require:1. Automatic .proto file processing and Java stubs generation (no manual steps requires if library version or .proto file were changed)2. Ability to serialize/deserialize prorbuf message from JSON format in addition to native message format using embedded protobuf-java-util library. This feature could help in conjunction with camel-grpc component3. Documentation improvements and test files misprintings and formatting correction
CAMEL-11133 Data format - Marshal and unmarshal should eager start their data formats They are handling the lifecycle of the data format in the marshal and unmarshal processor, but they dont enforce starting the service when it starts itself. We should make this happen so they are started together Improvement Data format - Marshal and unmarshal should eager start their data formats They are handling the lifecycle of the data format in the marshal and unmarshal processor, but they dont enforce starting the service when it starts itself. We should make this happen so they are started together
CAMEL-11126 camel-connector - Make it easy to schedule a connector You may want to take a connector and make it scheduled so its trigger X interval.In other words take a "to X" and turn that into "from timer to X" where the user just configure a period = 5000 to say every 5th second etc. New Feature camel-connector - Make it easy to schedule a connector You may want to take a connector and make it scheduled so its trigger X interval.In other words take a "to X" and turn that into "from timer to X" where the user just configure a period = 5000 to say every 5th second etc.
CAMEL-11124 camel-reactive-streams - Allow to silently ignore discarded messages If you want to discard messages and use a policy of{code}.to("reactive-streams:inbox?backpressureStrategy=LATEST");{code}Then Camel will thrown an exception if its discarded{code}java.lang.IllegalStateException: Exchange Exchange[ID-davsclaus-air-52789-1491737146614-0-450] discarded by backpressure strategy LATEST	at org.apache.camel.component.reactive.streams.engine.CamelSubscription.publish(CamelSubscription.java:235)	at org.apache.camel.component.reactive.streams.engine.CamelPublisher.publish(CamelPublisher.java:98)	at org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsService.sendCamelExchange(DefaultCamelReactiveStreamsService.java:123)	at org.apache.camel.component.reactive.streams.ReactiveStreamsProducer.process(ReactiveStreamsProducer.java:44)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.DelayProcessorSupport.processDelay(DelayProcessorSupport.java:100)	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:168)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745){code}Which is likely not something you want as you told it to just keep latest.We should allow the user to deal with the discarded messages if he/she needs to in some other way.And we should maybe also keep runtime statistics of the number of discarded messages so this can be used for monitoring.Also we should introduce a specific CamelReactiveException so you can configure Camels error handler to react on it. Improvement camel-reactive-streams - Allow to silently ignore discarded messages If you want to discard messages and use a policy of{code}.to("reactive-streams:inbox?backpressureStrategy=LATEST");{code}Then Camel will thrown an exception if its discarded{code}java.lang.IllegalStateException: Exchange Exchange[ID-davsclaus-air-52789-1491737146614-0-450] discarded by backpressure strategy LATEST	at org.apache.camel.component.reactive.streams.engine.CamelSubscription.publish(CamelSubscription.java:235)	at org.apache.camel.component.reactive.streams.engine.CamelPublisher.publish(CamelPublisher.java:98)	at org.apache.camel.component.reactive.streams.engine.DefaultCamelReactiveStreamsService.sendCamelExchange(DefaultCamelReactiveStreamsService.java:123)	at org.apache.camel.component.reactive.streams.ReactiveStreamsProducer.process(ReactiveStreamsProducer.java:44)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.DelayProcessorSupport.processDelay(DelayProcessorSupport.java:100)	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:168)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:198)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:207)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745){code}Which is likely not something you want as you told it to just keep latest.We should allow the user to deal with the discarded messages if he/she needs to in some other way.And we should maybe also keep runtime statistics of the number of discarded messages so this can be used for monitoring.Also we should introduce a specific CamelReactiveException so you can configure Camels error handler to react on it.
CAMEL-11123 Rename CamelReactiveStreamsServiceImpl to DefaultCamelReactiveStreamsService This is the naming convention we use in camel, and also the name it will be registered in JMX etc. Improvement Rename CamelReactiveStreamsServiceImpl to DefaultCamelReactiveStreamsService This is the naming convention we use in camel, and also the name it will be registered in JMX etc.
CAMEL-11105 camel-eventadmin does not allow multiple consumers with the same URI I have an application which uses the OSGi EventAdmin to send events when something important happens. I want to register several EventHandlers for the same event topic to perform different tasks.Using the eventadmin endpoint I can register an endpoint that listens on the OSGi Events.However if I try to define several routes with the same event topic I get the following exception:{{org.apache.camel.FailedToStartRouteException: Failed to start route myapp.example.custom-events because of Multiple consumers for the same endpoint is not allowed: Endpoint[eventadmin://mycustom/events/*]}}I think it should be possible to register several Endpoints for the same Event topic as it is possible to have several EventHandlers listening on the same topic. Improvement camel-eventadmin does not allow multiple consumers with the same URI I have an application which uses the OSGi EventAdmin to send events when something important happens. I want to register several EventHandlers for the same event topic to perform different tasks.Using the eventadmin endpoint I can register an endpoint that listens on the OSGi Events.However if I try to define several routes with the same event topic I get the following exception:{{org.apache.camel.FailedToStartRouteException: Failed to start route myapp.example.custom-events because of Multiple consumers for the same endpoint is not allowed: Endpoint[eventadmin://mycustom/events/*]}}I think it should be possible to register several Endpoints for the same Event topic as it is possible to have several EventHandlers listening on the same topic.
CAMEL-11097 Injection of CamelContext inside a CamelContextAware bean See this thread on Camel Users forum:http://camel.465427.n5.nabble.com/Why-do-we-have-to-specify-a-context-for-PropertyInject-td5796699.html Improvement Injection of CamelContext inside a CamelContextAware bean See this thread on Camel Users forum:http://camel.465427.n5.nabble.com/Why-do-we-have-to-specify-a-context-for-PropertyInject-td5796699.html
CAMEL-11079 Batch SJMS Consumer Dies on Failover Problem:When using failover in queue consumption, if a connection is bumped to another broker then the session in SjmsBatchConsumer becomes invalid and an IllegalStateException is thrown, which causes the route (and possibly the application) to exit.Solution:Introduce a new URI param that allows the SjmsBatchConsumer to create a new session when this situation occurs, but default the param to a value that preserves the original behavior so nobody gets a nasty surprise.See https://github.com/apache/camel/pull/1565 Improvement Batch SJMS Consumer Dies on Failover Problem:When using failover in queue consumption, if a connection is bumped to another broker then the session in SjmsBatchConsumer becomes invalid and an IllegalStateException is thrown, which causes the route (and possibly the application) to exit.Solution:Introduce a new URI param that allows the SjmsBatchConsumer to create a new session when this situation occurs, but default the param to a value that preserves the original behavior so nobody gets a nasty surprise.See https://github.com/apache/camel/pull/1565
CAMEL-11070 camel-aws - SQS - Allow to configure aws queue url  Its using  “amazonaws.com” but there is a GovCloud from AWS which is using another url for users that has more sensitive data. Improvement camel-aws - SQS - Allow to configure aws queue url  Its using  "amazonaws.com" but there is a GovCloud from AWS which is using another url for users that has more sensitive data.
CAMEL-11060 dn shouldn't be strictly required for Spring LDAP component I set a base DN in my LdapContextSource underlying the LdapTemplate. It's redundant to need to set it in my route, but if I don't, the SpringLdapProducer complains "DN must not be empty, but you provided an empty DN".In other code, I do this and regularly pass an empty string as the base to LdapTemplate.search(base, ...). Improvement dn shouldn't be strictly required for Spring LDAP component I set a base DN in my LdapContextSource underlying the LdapTemplate. It's redundant to need to set it in my route, but if I don't, the SpringLdapProducer complains "DN must not be empty, but you provided an empty DN".In other code, I do this and regularly pass an empty string as the base to LdapTemplate.search(base, ...).
CAMEL-11059 camel-spring-dm - Should be removed Does not really work in OSGihttp://camel.465427.n5.nabble.com/camel-spring-dm-feature-incompatible-to-most-other-features-of-camel-2-18-3-tp5796032.html Task camel-spring-dm - Should be removed Does not really work in OSGihttp://camel.465427.n5.nabble.com/camel-spring-dm-feature-incompatible-to-most-other-features-of-camel-2-18-3-tp5796032.html
CAMEL-11049 camel-package-maven-plugin - Add option to ignore no model in core for custom 3rd party data formats If you build a custom data format, then the camel maven plugin would attempt to load model from camel-core which wont exist for 3rd part. So we should add option to silently ignore that. Or make the plugin detect if its part of Apache Camel or not and act accordingly. Improvement camel-package-maven-plugin - Add option to ignore no model in core for custom 3rd party data formats If you build a custom data format, then the camel maven plugin would attempt to load model from camel-core which wont exist for 3rd part. So we should add option to silently ignore that. Or make the plugin detect if its part of Apache Camel or not and act accordingly.
CAMEL-11032 Component docs - Break long names so docs look better If a option name is long its not wrapped when browsing the online docs. We should add logic that split up CamelCase long words so they look nicer.The Camel IDEA plugin has some logic that does this Improvement Component docs - Break long names so docs look better If a option name is long its not wrapped when browsing the online docs. We should add logic that split up CamelCase long words so they look nicer.The Camel IDEA plugin has some logic that does this
CAMEL-11021 Missing javadoc on rest-dsl model We get a warning such as{code}[INFO] --- camel-eip-documentation-enricher-maven-plugin:2.19.0-SNAPSHOT:eip-documentation-enricher (eip-documentation-enricher) @ camel-blueprint ---[INFO] Found 221 models to use when enriching the XSD schema[WARNING] Cannot find documentation for name: method in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: uri in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: consumes in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: produces in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: bindingMode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: skipBindingOnErrorCode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: enableCORS in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: routeId in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: apiDocs in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: consumes in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: produces in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: bindingMode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: skipBindingOnErrorCode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: enableCORS in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: component in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json{code}The same would building platforms/camel-catalog warn about later on.We need to ensure the model is fully documented before a release Task Missing javadoc on rest-dsl model We get a warning such as{code}[INFO] --- camel-eip-documentation-enricher-maven-plugin:2.19.0-SNAPSHOT:eip-documentation-enricher (eip-documentation-enricher) @ camel-blueprint ---[INFO] Found 221 models to use when enriching the XSD schema[WARNING] Cannot find documentation for name: method in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: uri in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: consumes in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: produces in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: bindingMode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: skipBindingOnErrorCode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: enableCORS in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: routeId in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: apiDocs in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/delete.json[WARNING] Cannot find documentation for name: consumes in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: produces in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: bindingMode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: skipBindingOnErrorCode in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: enableCORS in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json[WARNING] Cannot find documentation for name: component in json schema: /Users/davsclaus/workspace/camel/components/camel-blueprint/target/../../../camel-core/target/classes/org/apache/camel/model/rest/restBinding.json{code}The same would building platforms/camel-catalog warn about later on.We need to ensure the model is fully documented before a release
CAMEL-11005 camel-connector - Generate json using jackson We can generate the output using jackson in pretty print mode which folks tend to like more.Just that the embedded json file for the component is using the oneline dense style which the json schema helper parser uses.  Improvement camel-connector - Generate json using jackson We can generate the output using jackson in pretty print mode which folks tend to like more.Just that the embedded json file for the component is using the oneline dense style which the json schema helper parser uses. 
CAMEL-11004 camel-connector - Allow to define what the data type is as output/input So for example in twitter mention connector you can says its a java datatype that is twitter4j.Status as output.And in the salesforce create contact connector, you can says its a org.foo.salesforce.upsert.contact.Contact as input type. Improvement camel-connector - Allow to define what the data type is as output/input So for example in twitter mention connector you can says its a java datatype that is twitter4j.Status as output.And in the salesforce create contact connector, you can says its a org.foo.salesforce.upsert.contact.Contact as input type.
CAMEL-11003 camel-google-calendar - Easier to configure scopes There is an option which should be easier to configure Improvement camel-google-calendar - Easier to configure scopes There is an option which should be easier to configure
CAMEL-10998 jetty producer - should be deprecated jetty is best as the server (eg consumer). the http client of jetty is not good and we should deprecate it. There is plenty of better http clients to be used. Improvement jetty producer - should be deprecated jetty is best as the server (eg consumer). the http client of jetty is not good and we should deprecate it. There is plenty of better http clients to be used.
CAMEL-10995 camel-spring-boot - Generated auto configuration and default value problems That problem we had with spring boot auto configuration generating invalid default values.We can improve this when its @UriParam and @UriPath as then we can know its an option from Camel endpoint and we can then read the json schema file and grab the default value there, and use. This avoids problems with the current code not able to find a good default value for constant fields. Improvement camel-spring-boot - Generated auto configuration and default value problems That problem we had with spring boot auto configuration generating invalid default values.We can improve this when its @UriParam and @UriPath as then we can know its an option from Camel endpoint and we can then read the json schema file and grab the default value there, and use. This avoids problems with the current code not able to find a good default value for constant fields.
CAMEL-10994 camel-kafka - Allow to configure more options on component level To allow to configure some more global options like auto commit periods, ssl, and other things.Then it would also be configurable using spring boot auto configuration Improvement camel-kafka - Allow to configure more options on component level To allow to configure some more global options like auto commit periods, ssl, and other things.Then it would also be configurable using spring boot auto configuration
CAMEL-10993 camel-kafka - Do not WARN per message for no key or partition If you just stream messages without any key etc you can get a WARN per message and that can be a lot of noise{code}[mel-1) thread #1 - timer://foo] KafkaProducer                  WARN  No message key or partition key set[mel-1) thread #1 - timer://foo] KafkaProducer                  WARN  No message key or partition key set[mel-1) thread #1 - timer://foo] KafkaProducer                  WARN  No message key or partition key set{code}We should maybe do a one time detection and do a WARN and then that's it. Its okay to send a message without a key.  Improvement camel-kafka - Do not WARN per message for no key or partition If you just stream messages without any key etc you can get a WARN per message and that can be a lot of noise{code}[mel-1) thread #1 - timer://foo] KafkaProducer                  WARN  No message key or partition key set[mel-1) thread #1 - timer://foo] KafkaProducer                  WARN  No message key or partition key set[mel-1) thread #1 - timer://foo] KafkaProducer                  WARN  No message key or partition key set{code}We should maybe do a one time detection and do a WARN and then that's it. Its okay to send a message without a key. 
CAMEL-10988 Improve performance of CaseInsensitiveMap Current CaseInsensitiveMap bases on TreeMap. Basing on JMH, I found out that [the following implementation of CaseInsensitiveMap|https://github.com/jdereg/java-util/blob/master/src/main/java/com/cedarsoftware/util/CaseInsensitiveMap.java] results with even 50% performance boost, depending on use-case. It uses HashMap with case-insensitive wrappers on String keys.  Improvement Improve performance of CaseInsensitiveMap Current CaseInsensitiveMap bases on TreeMap. Basing on JMH, I found out that [the following implementation of CaseInsensitiveMap|https://github.com/jdereg/java-util/blob/master/src/main/java/com/cedarsoftware/util/CaseInsensitiveMap.java] results with even 50% performance boost, depending on use-case. It uses HashMap with case-insensitive wrappers on String keys. 
CAMEL-10986 zookeeper-master - Master component for cluster/slave The fabric8 v1 has a master component that is being donated to Apache Camel. New Feature zookeeper-master - Master component for cluster/slave The fabric8 v1 has a master component that is being donated to Apache Camel.
CAMEL-10975 camel-catalog-maven - Allow to configure temp folder Find out if we can configure some temp folder for downloads Improvement camel-catalog-maven - Allow to configure temp folder Find out if we can configure some temp folder for downloads
CAMEL-10974 Component docs - Show deprecation INFO If a component is deprecated etc we should also add that in the adoc file in the tophttps://github.com/apache/camel/blob/master/components/camel-context/src/main/docs/context-component.adocFind out what the adoc is for WARN or INFO and set some detailed text so its very noticeable by users Task Component docs - Show deprecation INFO If a component is deprecated etc we should also add that in the adoc file in the tophttps://github.com/apache/camel/blob/master/components/camel-context/src/main/docs/context-component.adocFind out what the adoc is for WARN or INFO and set some detailed text so its very noticeable by users
CAMEL-10973 Deprecate ruby, python and php scripting languages As discussed on the Camel dev forum Task Deprecate ruby, python and php scripting languages As discussed on the Camel dev forum
CAMEL-10971 Remove camel-catalog karaf commands They dont really bring any value Task Remove camel-catalog karaf commands They dont really bring any value
CAMEL-10970 RuntimeCamelCatalog - Add JMX api We can add JMX api and expose it out of the box. Improvement RuntimeCamelCatalog - Add JMX api We can add JMX api and expose it out of the box.
CAMEL-10969 JSonSchemaHelper - Json parser should we use json-simple instead We use our own json parser in JSonSchemaHelper in different places as part of the catalog stuff we have done over the last 3-4 years. And as it has expanded to be used in more places than just as in the beginning in apt, we are duplicating some of that code around.We could consider shading in json-simple in camel-core and camel-catalog.And where its used in apt, maven plugins and elsewhere. Improvement JSonSchemaHelper - Json parser should we use json-simple instead We use our own json parser in JSonSchemaHelper in different places as part of the catalog stuff we have done over the last 3-4 years. And as it has expanded to be used in more places than just as in the beginning in apt, we are duplicating some of that code around.We could consider shading in json-simple in camel-core and camel-catalog.And where its used in apt, maven plugins and elsewhere.
CAMEL-10967 camel-catalog-connector - Add api to build endpoint uri based on connection options Like we have for regular Camel components, but for connectors Improvement camel-catalog-connector - Add api to build endpoint uri based on connection options Like we have for regular Camel components, but for connectors
CAMEL-10962 camel-http4 - Allow to configure host, port and path using separate options Instead of one option as http uri, lets separate this into host, port and path so its easier for tooling to use, and also how some of the other http components do. Improvement camel-http4 - Allow to configure host, port and path using separate options Instead of one option as http uri, lets separate this into host, port and path so its easier for tooling to use, and also how some of the other http components do.
CAMEL-10960 camel-aws - 2 unit test fail Wonder if other also get this error{code}Failed tests:org.apache.camel.component.aws.ec2.EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair(org.apache.camel.component.aws.ec2.EC2ComponentSpringTest)  Run 1: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 2: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 3: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>org.apache.camel.component.aws.ec2.EC2ProducerTest.ec2CreateAndRunTestWithKeyPair(org.apache.camel.component.aws.ec2.EC2ProducerTest)  Run 1: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 2: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 3: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>Tests run: 267, Failures: 2, Errors: 0, Skipped: 2{code} Test camel-aws - 2 unit test fail Wonder if other also get this error{code}Failed tests:org.apache.camel.component.aws.ec2.EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair(org.apache.camel.component.aws.ec2.EC2ComponentSpringTest)  Run 1: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 2: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 3: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>org.apache.camel.component.aws.ec2.EC2ProducerTest.ec2CreateAndRunTestWithKeyPair(org.apache.camel.component.aws.ec2.EC2ProducerTest)  Run 1: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 2: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>  Run 3: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>Tests run: 267, Failures: 2, Errors: 0, Skipped: 2{code}
CAMEL-10959 camel-catalog-core - Allow to reuse the validation and other apis in camel-core as well The Java APIs in camel-catalog has some great logic for validating and getting information about Camel components et all.Today we would like to have this Java API out of the box at runtime in camel-core so we can leverage this, for example for the upcoming health check.We do a bit of copy/paste of some of the code today in camel-catalog. Instead we can put that in a camel-catalog-core that is built first and then copied inside camel-core and camel-catalog and where else for reuse. Improvement camel-catalog-core - Allow to reuse the validation and other apis in camel-core as well The Java APIs in camel-catalog has some great logic for validating and getting information about Camel components et all.Today we would like to have this Java API out of the box at runtime in camel-core so we can leverage this, for example for the upcoming health check.We do a bit of copy/paste of some of the code today in camel-catalog. Instead we can put that in a camel-catalog-core that is built first and then copied inside camel-core and camel-catalog and where else for reuse.
CAMEL-10958 camel-scala-starter starter module removed but references to it still exist camel-scala-starter was removed here : https://github.com/jboss-fuse/camel/commit/e92581befe5096451d1617c25e7ca494d907c2d2But references to it still exist and should be removed : lilguylaptop:camel cunningt$ grep -r camel-scala-starter *apache-camel/pom.xml:      <artifactId>camel-scala-starter</artifactId>apache-camel/src/main/descriptors/common-bin.xml:        <include>org.apache.camel:camel-scala-starter</include>parent/pom.xml:        <artifactId>camel-scala-starter</artifactId>platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml:        <artifactId>camel-scala-starter</artifactId> Task camel-scala-starter starter module removed but references to it still exist camel-scala-starter was removed here : https://github.com/jboss-fuse/camel/commit/e92581befe5096451d1617c25e7ca494d907c2d2But references to it still exist and should be removed : lilguylaptop:camel cunningt$ grep -r camel-scala-starter *apache-camel/pom.xml:      <artifactId>camel-scala-starter</artifactId>apache-camel/src/main/descriptors/common-bin.xml:        <include>org.apache.camel:camel-scala-starter</include>parent/pom.xml:        <artifactId>camel-scala-starter</artifactId>platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml:        <artifactId>camel-scala-starter</artifactId>
CAMEL-10955 CamelContext - Add api when about to start routes and when about to shutdown routes On the CamelContext add a public api that is called just before Camel starts the routes and just before it shutdown then. This allows tooling to instrument at these points to do custom stuff they may need.If they instrument on start / stop on CamelContext then these methods perform too much and the tooling cant hook into at the right time. Improvement CamelContext - Add api when about to start routes and when about to shutdown routes On the CamelContext add a public api that is called just before Camel starts the routes and just before it shutdown then. This allows tooling to instrument at these points to do custom stuff they may need.If they instrument on start / stop on CamelContext then these methods perform too much and the tooling cant hook into at the right time.
CAMEL-10953 Add messageAttribute support to AWS SNS component Use camel headers to add message attributes when publishing a message to SNS. Improvement Add messageAttribute support to AWS SNS component Use camel headers to add message attributes when publishing a message to SNS.
CAMEL-10945 camel-ssh - Unit test fails All the unit test failshttps://builds.apache.org/job/Camel.trunk.fulltest.java8/1180/#showFailuresLink Test camel-ssh - Unit test fails All the unit test failshttps://builds.apache.org/job/Camel.trunk.fulltest.java8/1180/#showFailuresLink
CAMEL-10944 camel-kafka - When consumer stop it should auto commit When you do a graceful stop of a Kafka route you should be able to auto commit so the offset is up to date on the broker, so any new consumer that failover, or if you start the route again, it will pickup from the right spot. Otherwise you have duplicates.The kafka consumer will auto commit in the background every 5th sec but if we dont explicit auto commit on stop then we only have the last offset from the last background thread run and therefore have much higher chances of duplicates.We should add option so users can control if auto commit on stop is sync,async,noneWe should do sync so its forced in case its the JVM shutting down and we cant do async in the background. And ppl can set it to none if they want as it is today Improvement camel-kafka - When consumer stop it should auto commit When you do a graceful stop of a Kafka route you should be able to auto commit so the offset is up to date on the broker, so any new consumer that failover, or if you start the route again, it will pickup from the right spot. Otherwise you have duplicates.The kafka consumer will auto commit in the background every 5th sec but if we dont explicit auto commit on stop then we only have the last offset from the last background thread run and therefore have much higher chances of duplicates.We should add option so users can control if auto commit on stop is sync,async,noneWe should do sync so its forced in case its the JVM shutting down and we cant do async in the background. And ppl can set it to none if they want as it is today
CAMEL-10941 Component docs - Remove raw marker In the adoc files. And then if the website that is generated from adoc or the html files requires those, we can add them back use some tooling that inserts them again.It looks annoying on github Improvement Component docs - Remove raw marker In the adoc files. And then if the website that is generated from adoc or the html files requires those, we can add them back use some tooling that inserts them again.It looks annoying on github
CAMEL-10940 Component docs - Separate path and query parameters So its easier to spot which are path parameters and which are query.We should have separate tables and also show the uri syntax closer to these tables. Improvement Component docs - Separate path and query parameters So its easier to spot which are path parameters and which are query.We should have separate tables and also show the uri syntax closer to these tables.
CAMEL-10937 Camel components - Configured using setters should support property placeholders So if you do{code}                KafkaComponent kafka = new KafkaComponent();                kafka.setBrokers("{{kafka.host}}:{{kafka.port}}");{code}Then those property placeholder should be resolved by Camel and set as their actual value when the component is starting up.Then you can configure this from just java code as well. As <bean> style have property placeholders but then its either blueprint or spring style. If we allow to use Camel style then users can do this more consistently. Improvement Camel components - Configured using setters should support property placeholders So if you do{code}                KafkaComponent kafka = new KafkaComponent();                kafka.setBrokers("{{kafka.host}}:{{kafka.port}}");{code}Then those property placeholder should be resolved by Camel and set as their actual value when the component is starting up.Then you can configure this from just java code as well. As <bean> style have property placeholders but then its either blueprint or spring style. If we allow to use Camel style then users can do this more consistently.
CAMEL-10934 Idempotent Consumer EIP - Should prepare idempotent repository better Found bug CAMEL-10927 with the work from Jakub. We should initialize this in a better way so the repo is created better with CamelContext injected. Improvement Idempotent Consumer EIP - Should prepare idempotent repository better Found bug CAMEL-10927 with the work from Jakub. We should initialize this in a better way so the repo is created better with CamelContext injected.
CAMEL-10930 Move groovy dsl into camel-groovy-dsl This would be needed so Camel can compile with Java 9. And groovy dsl is also deprecated and to be moved to camel extra Improvement Move groovy dsl into camel-groovy-dsl This would be needed so Camel can compile with Java 9. And groovy dsl is also deprecated and to be moved to camel extra
CAMEL-10918 camel-sjms - JMS 2.0 shared subscriptions This is presumptions of me and I apologize for that and will understand if this is closed outright but I was going to fork camel-sjms and add support for some JMS 2.0 for my own uses and during testing found out that it was still backwards compatible and figured I would contribute it back if you guys found it worth maintaining.Tested this on karaf 4.10 with activemq 5.14.3 shared subscriptions caused a NoSuchMethodException as expected but everything else seemed to work. Also tested on karaf 4.10 with artemis 1.5.1 shared subscriptions worked. Here is the changeset:https://github.com/ryeats/camel/commit/80f875572ffd2a16ec24d9302479201dc9b188f6.patch New Feature camel-sjms - JMS 2.0 shared subscriptions This is presumptions of me and I apologize for that and will understand if this is closed outright but I was going to fork camel-sjms and add support for some JMS 2.0 for my own uses and during testing found out that it was still backwards compatible and figured I would contribute it back if you guys found it worth maintaining.Tested this on karaf 4.10 with activemq 5.14.3 shared subscriptions caused a NoSuchMethodException as expected but everything else seemed to work. Also tested on karaf 4.10 with artemis 1.5.1 shared subscriptions worked. Here is the changeset:https://github.com/ryeats/camel/commit/80f875572ffd2a16ec24d9302479201dc9b188f6.patch
CAMEL-10916 camel http4 component does not send a body when the http method DELETE is used The camel-http4 component doesn't forward the body when used in conjunction with a DELETE http method. . This makes the use of camel-http4 to act as a proxy  for a REST service more or less impossible. Improvement camel http4 component does not send a body when the http method DELETE is used The camel-http4 component doesn't forward the body when used in conjunction with a DELETE http method. . This makes the use of camel-http4 to act as a proxy  for a REST service more or less impossible.
CAMEL-10910 Revisit if Pipeline should wrap single processor or not I noticed that if eventDrivenProcessors contains only one processor, IN message is not copied to OUT even when exchange pattern is InOut while it does if it contains multiple processors.eventDrivenProcessors are wrapped with Pipeline here when initiating a camel route here:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java#L161But if there's only one event driven processor, the processor itself is used instead of wrapping with Pipeline:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Pipeline.java#L57Pipeline copies the IN message to OUT if it's InOut and OUT message doesn't exist:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Pipeline.java#L107So the IN->OUT copy happens only if multiple processors exist. It means that whether the response message is returned as OUT or IN depends on if the route results in single processor or not. I think it looks a bit confusing and wondering if we can just wrap it with the Pipleline even if there's single processor.Having said that as this has been same for 10 years, we can't change this behavior in 2.x as it would break backward compatibility. Let's revisit in 3.0. Task Revisit if Pipeline should wrap single processor or not I noticed that if eventDrivenProcessors contains only one processor, IN message is not copied to OUT even when exchange pattern is InOut while it does if it contains multiple processors.eventDrivenProcessors are wrapped with Pipeline here when initiating a camel route here:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultRouteContext.java#L161But if there's only one event driven processor, the processor itself is used instead of wrapping with Pipeline:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Pipeline.java#L57Pipeline copies the IN message to OUT if it's InOut and OUT message doesn't exist:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Pipeline.java#L107So the IN->OUT copy happens only if multiple processors exist. It means that whether the response message is returned as OUT or IN depends on if the route results in single processor or not. I think it looks a bit confusing and wondering if we can just wrap it with the Pipleline even if there's single processor.Having said that as this has been same for 10 years, we can't change this behavior in 2.x as it would break backward compatibility. Let's revisit in 3.0.
CAMEL-10909 deprecate camel-scala and camel-groovy dsl See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Deprecate-camel-scala-and-camel-groovy-DSL-tp5794234.htmlThey can find a new home in camel-extra Task deprecate camel-scala and camel-groovy dsl See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Deprecate-camel-scala-and-camel-groovy-DSL-tp5794234.htmlThey can find a new home in camel-extra
CAMEL-10907 http components: have a common way to express concepts like proxy As today camel-http-commons defines proxyHost/proxyPort as options to configure the proxy but camel-http/camel-http4 have their own options so there should be a common set of options all the components rely on. Improvement http components: have a common way to express concepts like proxy As today camel-http-commons defines proxyHost/proxyPort as options to configure the proxy but camel-http/camel-http4 have their own options so there should be a common set of options all the components rely on.
CAMEL-10901 Add support to Kafka consumer to seek to end of topic Kafka 2.19.0-SNAPSHOT adds seekToBeginning parameter to read all events of a topic from beginning. In my application I'm not interested of what has happened before it is started, so I need the opposite so that seekToEnd is called on the consumer.The pull request for this feature request will change the parameter to seekTo which can be set to either beginning or end, which is analog with how other parameters on this consumer is set. New Feature Add support to Kafka consumer to seek to end of topic Kafka 2.19.0-SNAPSHOT adds seekToBeginning parameter to read all events of a topic from beginning. In my application I'm not interested of what has happened before it is started, so I need the opposite so that seekToEnd is called on the consumer.The pull request for this feature request will change the parameter to seekTo which can be set to either beginning or end, which is analog with how other parameters on this consumer is set.
CAMEL-10900 OutOfMemoryError with big file in ftp or sftp producer with charset assigned During production of sftp or ftp file with charset assigned I have a OutOfMemory for a file of 500MB.I think the problem is at this row: org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:875)andorg.apache.camel.component.file.remote.FtpOperations.doStoreFile(FtpOperations.java:573)the row is : is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));Try to convert the file to a String.Full stack trace: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot store file: out/outfile.txt	at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:902)	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:817)	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:277)	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:165)	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:609)	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)	at org.apache.camel.processor.Splitter.process(Splitter.java:108)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:57)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)	at org.apache.camel.processor.loadbalancer.LoadBalancerSupport.process(LoadBalancerSupport.java:97)	at org.apache.camel.component.quartz2.CamelJob.execute(CamelJob.java:58)	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: /tmp/myfile.tmp of type: java.io.File on: myfile.tmp. Caused by: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is file based: /tmp/myfile.tmp] due java.lang.OutOfMemoryError: Java heap space. Exchange[ID-localhost-32802-1487864818750-0-13967030]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is file based: /tmp/myfile.tmp] due java.lang.OutOfMemoryError: Java heap space]	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:107)	at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:865)	... 57 moreCaused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is file based: /tmp/myfile.tmp] due java.lang.OutOfMemoryError: Java heap space	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:190)	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:105)	... 58 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.OutOfMemoryError: Java heap space	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1285)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)	... 59 moreCaused by: java.lang.OutOfMemoryError: Java heap space	at java.util.Arrays.copyOf(Arrays.java:3332)	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:596)	at java.lang.StringBuilder.append(StringBuilder.java:190)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:318)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:261)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1281)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:105)	at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:865)	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:817)	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:277)	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:165)	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681) Improvement OutOfMemoryError with big file in ftp or sftp producer with charset assigned During production of sftp or ftp file with charset assigned I have a OutOfMemory for a file of 500MB.I think the problem is at this row: org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:875)andorg.apache.camel.component.file.remote.FtpOperations.doStoreFile(FtpOperations.java:573)the row is : is = new ByteArrayInputStream(exchange.getIn().getMandatoryBody(String.class).getBytes(charset));Try to convert the file to a String.Full stack trace: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot store file: out/outfile.txt	at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:902)	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:817)	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:277)	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:165)	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:609)	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)	at org.apache.camel.processor.Splitter.process(Splitter.java:108)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:117)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:57)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)	at org.apache.camel.processor.loadbalancer.LoadBalancerSupport.process(LoadBalancerSupport.java:97)	at org.apache.camel.component.quartz2.CamelJob.execute(CamelJob.java:58)	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)Caused by: org.apache.camel.InvalidPayloadException: No body available of type: java.lang.String but has value: /tmp/myfile.tmp of type: java.io.File on: myfile.tmp. Caused by: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is file based: /tmp/myfile.tmp] due java.lang.OutOfMemoryError: Java heap space. Exchange[ID-localhost-32802-1487864818750-0-13967030]. Caused by: [org.apache.camel.TypeConversionException - Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is file based: /tmp/myfile.tmp] due java.lang.OutOfMemoryError: Java heap space]	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:107)	at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:865)	... 57 moreCaused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is file based: /tmp/myfile.tmp] due java.lang.OutOfMemoryError: Java heap space	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:190)	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:105)	... 58 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.OutOfMemoryError: Java heap space	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1285)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)	... 59 moreCaused by: java.lang.OutOfMemoryError: Java heap space	at java.util.Arrays.copyOf(Arrays.java:3332)	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:596)	at java.lang.StringBuilder.append(StringBuilder.java:190)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:318)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:261)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:498)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1281)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181)	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:105)	at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:865)	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:817)	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:277)	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:165)	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:58)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:341)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681)
CAMEL-10898 camel-catalog - Allow to add custom component/connector by download JAR via maven add custom component / connector by specifying maven gav and then have grape download the jar and we inspect it for more details and have all we need to add as custom to the catalog.camel-catalog-maven and camel-catalog-connector-maven New Feature camel-catalog - Allow to add custom component/connector by download JAR via maven add custom component / connector by specifying maven gav and then have grape download the jar and we inspect it for more details and have all we need to add as custom to the catalog.camel-catalog-maven and camel-catalog-connector-maven
CAMEL-10897 camel-jcache - Allow to configure cache provider on component So you dont have to set this on each endpoint New Feature camel-jcache - Allow to configure cache provider on component So you dont have to set this on each endpoint
CAMEL-10891 ManagedThrottlingExceptionRoutePolicyTest is to flaky on CI server Lets see if we can improve this test to not fail as often on the CI servers at Apachehttps://builds.apache.org/job/Camel.trunk.fulltest.java8/lastCompletedBuild/org.apache.camel$camel-core/testReport/org.apache.camel.management/ManagedThrottlingExceptionRoutePolicyTest/testRoutes/ Test ManagedThrottlingExceptionRoutePolicyTest is to flaky on CI server Lets see if we can improve this test to not fail as often on the CI servers at Apachehttps://builds.apache.org/job/Camel.trunk.fulltest.java8/lastCompletedBuild/org.apache.camel$camel-core/testReport/org.apache.camel.management/ManagedThrottlingExceptionRoutePolicyTest/testRoutes/
CAMEL-10882 camel-hazelcast - Allow to configure default operation as string value Instead of using a number value, you should use the string value such as put, get, update etc. Improvement camel-hazelcast - Allow to configure default operation as string value Instead of using a number value, you should use the string value such as put, get, update etc.
CAMEL-10871 camel-kafka - allow to retrieve whether it's the last record before commit When you consume messages from Kafka, you receive the records by batches and then you bulk-acknowledge the records.In some situation it can be useful to retrieve whether or not the messages your receiving is the last one in the batch. It's especially useful in order to aggregate messages in order to insert them in batch in ElasticSearch. Improvement camel-kafka - allow to retrieve whether it's the last record before commit When you consume messages from Kafka, you receive the records by batches and then you bulk-acknowledge the records.In some situation it can be useful to retrieve whether or not the messages your receiving is the last one in the batch. It's especially useful in order to aggregate messages in order to insert them in batch in ElasticSearch.
CAMEL-10870 camel-sql stored procedures don't support negative vendor-specific JDBC types When you use a vendor-specific JDBC type in {{camel-sql}} you need to use its value instead of its label.For instance, if you use oracle if you want to call a stored procedure that returns a {{FIXED_CHAR}} type you need to write:{noformat}<to uri="sql-stored:PROCEDURE1(OUT 999 result)?dataSource=oracle"/>{noformat}All values are defined here: https://docs.oracle.com/cd/E16338_01/appdev.112/e13995/constant-values.html#oracle_jdbc_OracleTypes_ARRAYYou can notice that there are negative values in this list ({{CURSOR}} for instance). Unfortunately the negative values aren't handled by the parser which leads to the following exception{noformat}org.apache.camel.component.sql.stored.template.ast.ParseRuntimeException: Field -10 not found from java.procedureName.Types	at org.apache.camel.component.sql.stored.template.ast.ParseHelper.parseSqlType(ParseHelper.java:41)	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.OutParameter(SSPTParser.java:92)	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.Parameter(SSPTParser.java:60)	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.parse(SSPTParser.java:23)	at org.apache.camel.component.sql.stored.template.TemplateParser.parseTemplate(TemplateParser.java:31)	at org.apache.camel.component.sql.stored.CallableStatementWrapperFactory.getTemplateStoredProcedure(CallableStatementWrapperFactory.java:71)	at org.apache.camel.component.sql.stored.CallableStatementWrapper.populateStatement(CallableStatementWrapper.java:104)	at org.apache.camel.component.sql.stored.SqlStoredProducer$1.execute(SqlStoredProducer.java:69)	at org.apache.camel.component.sql.stored.CallableStatementWrapper.call(CallableStatementWrapper.java:55)	at org.apache.camel.component.sql.stored.SqlStoredProducer.process(SqlStoredProducer.java:43){noformat} Improvement camel-sql stored procedures don't support negative vendor-specific JDBC types When you use a vendor-specific JDBC type in {{camel-sql}} you need to use its value instead of its label.For instance, if you use oracle if you want to call a stored procedure that returns a {{FIXED_CHAR}} type you need to write:{noformat}<to uri="sql-stored:PROCEDURE1(OUT 999 result)?dataSource=oracle"/>{noformat}All values are defined here: https://docs.oracle.com/cd/E16338_01/appdev.112/e13995/constant-values.html#oracle_jdbc_OracleTypes_ARRAYYou can notice that there are negative values in this list ({{CURSOR}} for instance). Unfortunately the negative values aren't handled by the parser which leads to the following exception{noformat}org.apache.camel.component.sql.stored.template.ast.ParseRuntimeException: Field -10 not found from java.procedureName.Types	at org.apache.camel.component.sql.stored.template.ast.ParseHelper.parseSqlType(ParseHelper.java:41)	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.OutParameter(SSPTParser.java:92)	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.Parameter(SSPTParser.java:60)	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.parse(SSPTParser.java:23)	at org.apache.camel.component.sql.stored.template.TemplateParser.parseTemplate(TemplateParser.java:31)	at org.apache.camel.component.sql.stored.CallableStatementWrapperFactory.getTemplateStoredProcedure(CallableStatementWrapperFactory.java:71)	at org.apache.camel.component.sql.stored.CallableStatementWrapper.populateStatement(CallableStatementWrapper.java:104)	at org.apache.camel.component.sql.stored.SqlStoredProducer$1.execute(SqlStoredProducer.java:69)	at org.apache.camel.component.sql.stored.CallableStatementWrapper.call(CallableStatementWrapper.java:55)	at org.apache.camel.component.sql.stored.SqlStoredProducer.process(SqlStoredProducer.java:43){noformat}
CAMEL-10869 TRACE on ftp component reveals password When TRACE level is on using a ftp component the password is displayed in plain text.{{2017-02-21 11:26:28:361 o.a.c.c.f.remote.RemoteFileProducer DEBUG - Not already connected/logged in. Connecting to: ftp://192.168.170.33/mgr/out?allowNullBody=false&consumer.bridgeErrorHandler=true&disconnect=true&password=xxxxxx&pollStrategy=%23defaultPollStrategy&throwExceptionOnConnectFailed=true&username=mgr2017-02-21 11:26:28:361 o.a.c.c.file.remote.FtpOperations TRACE - Connecting using FTPClient: org.apache.commons.net.ftp.FTPClient@456abb662017-02-21 11:26:28:361 o.a.c.c.file.remote.FtpOperations TRACE - Connecting to ftp://mgr@192.168.170.33:21 using connection timeout: 100002017-02-21 11:26:28:377 o.a.c.c.file.remote.FtpOperations TRACE - Using SoTimeout=3000002017-02-21 11:26:28:377 o.a.c.c.file.remote.FtpOperations TRACE - Attempting to login user: mgr using password: gsxr11002017-02-21 11:26:28:845 o.a.c.c.file.remote.FtpOperations TRACE - User mgr logged in: true}} Improvement TRACE on ftp component reveals password When TRACE level is on using a ftp component the password is displayed in plain text.{{2017-02-21 11:26:28:361 o.a.c.c.f.remote.RemoteFileProducer DEBUG - Not already connected/logged in. Connecting to: ftp://192.168.170.33/mgr/out?allowNullBody=false&consumer.bridgeErrorHandler=true&disconnect=true&password=xxxxxx&pollStrategy=%23defaultPollStrategy&throwExceptionOnConnectFailed=true&username=mgr2017-02-21 11:26:28:361 o.a.c.c.file.remote.FtpOperations TRACE - Connecting using FTPClient: org.apache.commons.net.ftp.FTPClient@456abb662017-02-21 11:26:28:361 o.a.c.c.file.remote.FtpOperations TRACE - Connecting to ftp://mgr@192.168.170.33:21 using connection timeout: 100002017-02-21 11:26:28:377 o.a.c.c.file.remote.FtpOperations TRACE - Using SoTimeout=3000002017-02-21 11:26:28:377 o.a.c.c.file.remote.FtpOperations TRACE - Attempting to login user: mgr using password: gsxr11002017-02-21 11:26:28:845 o.a.c.c.file.remote.FtpOperations TRACE - User mgr logged in: true}}
CAMEL-10866 platforms/catalog - rename folders to match their artifact id name A bunch of camel-catalog-xxx modules are in catalog-xxx folders. We should rename them to match their maven artifact id so they are consistent like the other folders we have. Task platforms/catalog - rename folders to match their artifact id name A bunch of camel-catalog-xxx modules are in catalog-xxx folders. We should rename them to match their maven artifact id so they are consistent like the other folders we have.
CAMEL-10865 camel catalog - Add catalog for connectors So we can also have a repository/catalog of Camel connectors New Feature camel catalog - Add catalog for connectors So we can also have a repository/catalog of Camel connectors
CAMEL-10861 camel-hazelcast - route policy should have JMX api We can make the route policy JMX managed so people can from JMX see if its master or slave etc. Improvement camel-hazelcast - route policy should have JMX api We can make the route policy JMX managed so people can from JMX see if its master or slave etc.
CAMEL-10860 camel-hazelcast - route policy should have a better try lock default value It uses a max long value. Instead we should have a value of a sensitive value such as 10 seconds or something. Improvement camel-hazelcast - route policy should have a better try lock default value It uses a max long value. Instead we should have a value of a sensitive value such as 10 seconds or something.
CAMEL-10858 Add CSRF Support to Camel bonita component Since 7.4.0, Bonita Engine enables CSRF protection by default. Therefore the client has to deal with providing the right token in the request headers. This improvement make sure that request header propagate the right information to work whether or not CSRF is enabled on Bonita side.  Improvement Add CSRF Support to Camel bonita component Since 7.4.0, Bonita Engine enables CSRF protection by default. Therefore the client has to deal with providing the right token in the request headers. This improvement make sure that request header propagate the right information to work whether or not CSRF is enabled on Bonita side. 
CAMEL-10854 Macro error on website The website at http://camel.apache.org/walk-through-an-example.html contains a macro error:[...] used to connect to ActiveMQError formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20  Task Macro error on website The website at http://camel.apache.org/walk-through-an-example.html contains a macro error:[...] used to connect to ActiveMQError formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20 
CAMEL-10853 CsvDataFormat should be completed with 'CSVFormat.withTrim' In *Camel* {{org.apache.commons.csv.CSVFormat}} is indirectly configured via {{org.apache.camel.model.dataformat.CsvDataFormat}}. Although it is possible to tell {{CSVFormat}} to trim leading and trailing blanks via {{CSVFormat.withTrim}}, this property can NOT be set in {{CsvDataFormat}}.h4. WorkaroundAs a workaround, one could do the following:{code:java}CsvDataFormat dataFormat = new CsvDataFormat("\t") {            @Override            protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {                // This is how we force the engine to trim the values                org.apache.camel.dataformat.csv.CsvDataFormat csvDataFormat = (org.apache.camel.dataformat.csv.CsvDataFormat) dataFormat;                CSVFormat format = csvDataFormat.getFormat();                csvDataFormat.setFormat(format.withTrim());                super.configureDataFormat(csvDataFormat, camelContext);            }        };{code}h4. QuestionAre they other properties which should be considered? Improvement CsvDataFormat should be completed with 'CSVFormat.withTrim' In *Camel* {{org.apache.commons.csv.CSVFormat}} is indirectly configured via {{org.apache.camel.model.dataformat.CsvDataFormat}}. Although it is possible to tell {{CSVFormat}} to trim leading and trailing blanks via {{CSVFormat.withTrim}}, this property can NOT be set in {{CsvDataFormat}}.h4. WorkaroundAs a workaround, one could do the following:{code:java}CsvDataFormat dataFormat = new CsvDataFormat("\t") {            @Override            protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {                // This is how we force the engine to trim the values                org.apache.camel.dataformat.csv.CsvDataFormat csvDataFormat = (org.apache.camel.dataformat.csv.CsvDataFormat) dataFormat;                CSVFormat format = csvDataFormat.getFormat();                csvDataFormat.setFormat(format.withTrim());                super.configureDataFormat(csvDataFormat, camelContext);            }        };{code}h4. QuestionAre they other properties which should be considered?
CAMEL-10851 getBody(Class<T> type) on originalMessage returns null It seems that the purpose of getBody(Class<T> type) is to convert the message body to the requested type.  When this is used on a  getUnitOfWork().getOriginalInMessage() message though the conversion doesn't happen.  Debugging indicates this is because the message's exchange variable is null.For example requesting a string type when using a File queue fails as a conversion from GenericFile to String is required.It seems like the exchange should be set/copied when the originalInMessage is created (in the DefaultUnitOfWork constructor) so this functionality can work.Reference to mailing list dicussion: http://mail-archives.apache.org/mod_mbox/camel-dev/201702.mbox/ajax/%3Ce8b612e0-60ab-1a51-b024-87b48e024c51%40me.uk.eu.org%3E Improvement getBody(Class<T> type) on originalMessage returns null It seems that the purpose of getBody(Class<T> type) is to convert the message body to the requested type.  When this is used on a  getUnitOfWork().getOriginalInMessage() message though the conversion doesn't happen.  Debugging indicates this is because the message's exchange variable is null.For example requesting a string type when using a File queue fails as a conversion from GenericFile to String is required.It seems like the exchange should be set/copied when the originalInMessage is created (in the DefaultUnitOfWork constructor) so this functionality can work.Reference to mailing list dicussion: http://mail-archives.apache.org/mod_mbox/camel-dev/201702.mbox/ajax/%3Ce8b612e0-60ab-1a51-b024-87b48e024c51%40me.uk.eu.org%3E
CAMEL-10850 Autogenerate EIP options in documentation files Like we do for components and others.In thisorg.apache.camel.maven.packaging.ReadmeComponentMojoWe should add for EIPs which do this in camel-core/src/main/docs/eips and do for each EIP we have Improvement Autogenerate EIP options in documentation files Like we do for components and others.In thisorg.apache.camel.maven.packaging.ReadmeComponentMojoWe should add for EIPs which do this in camel-core/src/main/docs/eips and do for each EIP we have
CAMEL-10847 Component json schema - Include display name for options We should allow to specify the display name for options in case you dont want a compute derived name.We should add that to @UriParam @UriPath and @Metadata And then fallback to use a humanize computed value, eg loginConfig -> Login Config. queueSize -> Queue Size and so on. Improvement Component json schema - Include display name for options We should allow to specify the display name for options in case you dont want a compute derived name.We should add that to @UriParam @UriPath and @Metadata And then fallback to use a humanize computed value, eg loginConfig -> Login Config. queueSize -> Queue Size and so on.
CAMEL-10845 Java 8 DSL : add support for Suppliers One of the things that was missing in previous Java 8 DSL improvement rounds was the possibility to use Suppliers to provides objects to the routes.As today:{code:java}    from("direct:start")        .idempotentConsumer()            .header("messageId")            .messageIdRepository(createRepo())        .to("mock:result");{code}With suppliers:{code:java}    from("direct:start")        .idempotentConsumer()            .header("messageId")            .messageIdRepository(this::createRepo)        .to("mock:result");{code}Adding that does not result in such a big improvement for the DSL but it adds some overhead to the underlying definitions as we may need to add additional variables to hold the suppliers and other stuffs to convert suppliers i.e. to expression clause so we should have a look at this issue in Camel 3.0 (where we may have the chance to do a deeper refactor and suppliers may play better). Improvement Java 8 DSL : add support for Suppliers One of the things that was missing in previous Java 8 DSL improvement rounds was the possibility to use Suppliers to provides objects to the routes.As today:{code:java}    from("direct:start")        .idempotentConsumer()            .header("messageId")            .messageIdRepository(createRepo())        .to("mock:result");{code}With suppliers:{code:java}    from("direct:start")        .idempotentConsumer()            .header("messageId")            .messageIdRepository(this::createRepo)        .to("mock:result");{code}Adding that does not result in such a big improvement for the DSL but it adds some overhead to the underlying definitions as we may need to add additional variables to hold the suppliers and other stuffs to convert suppliers i.e. to expression clause so we should have a look at this issue in Camel 3.0 (where we may have the chance to do a deeper refactor and suppliers may play better).
CAMEL-10844 Component docs - Remove .html generated files in components They have no value. Its the json schema that we use, and the website documentation is generated as adoc files etc. Improvement Component docs - Remove .html generated files in components They have no value. Its the json schema that we use, and the website documentation is generated as adoc files etc.
CAMEL-10842 Component JSon schema - JSon values should not always be string types Lets take a look at generating the json output using boolean, numeric values when they are. So we dont have"secret": "false"but have"secret": false Improvement Component JSon schema - JSon values should not always be string types Lets take a look at generating the json output using boolean, numeric values when they are. So we dont have"secret": "false"but have"secret": false
CAMEL-10840 CsvDataFormat.setRecordConverterRef not usable Following interface {{org.apache.camel.dataformat.csv.CsvRecordConverter}} is *package* protected. This is actually fine because it is used internally. There are two implementations in {{CsvRecordConverters}}. However {{org.apache.camel.model.dataformat.CsvDataFormat}} contains following *public* methods:{code:java}public String getRecordConverterRef() {    return recordConverterRef;}/** * Refers to a custom <tt>CsvRecordConverter</tt> to lookup from the registry to use. */public void setRecordConverterRef(String recordConverterRef) {    this.recordConverterRef = recordConverterRef;}{code}So, it seems possible to specify my own {{CsvRecordConverter}} but, because of the point mentioned earlier, this is actually NOT (easily) possible.I came across this point because I was looking for a mechanism allowing me to proxy the values being taken from {{CSVRecord}} to *Map* or *List*. Improvement CsvDataFormat.setRecordConverterRef not usable Following interface {{org.apache.camel.dataformat.csv.CsvRecordConverter}} is *package* protected. This is actually fine because it is used internally. There are two implementations in {{CsvRecordConverters}}. However {{org.apache.camel.model.dataformat.CsvDataFormat}} contains following *public* methods:{code:java}public String getRecordConverterRef() {    return recordConverterRef;}/** * Refers to a custom <tt>CsvRecordConverter</tt> to lookup from the registry to use. */public void setRecordConverterRef(String recordConverterRef) {    this.recordConverterRef = recordConverterRef;}{code}So, it seems possible to specify my own {{CsvRecordConverter}} but, because of the point mentioned earlier, this is actually NOT (easily) possible.I came across this point because I was looking for a mechanism allowing me to proxy the values being taken from {{CSVRecord}} to *Map* or *List*.
CAMEL-10838 camel-cache - Create a better body replacer processor At this forumhttps://developer.jboss.org/message/968778The CacheBasedMessageBodyReplacer can be better to only setup the cache once on startup, eg being a service by extending ServiceSupport. And then for the key allow that to be from an expression so it can be dynamic. Improvement camel-cache - Create a better body replacer processor At this forumhttps://developer.jboss.org/message/968778The CacheBasedMessageBodyReplacer can be better to only setup the cache once on startup, eg being a service by extending ServiceSupport. And then for the key allow that to be from an expression so it can be dynamic.
CAMEL-10837 Migrate EIP patterns to adoc Task 1 of the Camel 2.19 Roadmap:Finish migrating the wiki documentation to adoc files. I think itsmost of the EIP patterns that are missing. There is a basic list ofEIPs here: https://github.com/apache/camel/blob/master/camel-core/readme-eip.adocI create this issue so I can submit a PR of my ongoing work. Still working on it but I wanted to check that what I do is what's expected.Regards,Sebastien Task Migrate EIP patterns to adoc Task 1 of the Camel 2.19 Roadmap:Finish migrating the wiki documentation to adoc files. I think itsmost of the EIP patterns that are missing. There is a basic list ofEIPs here: https://github.com/apache/camel/blob/master/camel-core/readme-eip.adocI create this issue so I can submit a PR of my ongoing work. Still working on it but I wanted to check that what I do is what's expected.Regards,Sebastien
CAMEL-10836 camel-salesforce - Allow to configure login details easier So you can configure them directly using setter/getter on the component level instead of the LoginConfig nested type Improvement camel-salesforce - Allow to configure login details easier So you can configure them directly using setter/getter on the component level instead of the LoginConfig nested type
CAMEL-10832 camel-kafka - Allow to configure broker urls on component level This makes it easier and also allows to configure this easily using spring boot auto configuration etc. Improvement camel-kafka - Allow to configure broker urls on component level This makes it easier and also allows to configure this easily using spring boot auto configuration etc.
CAMEL-10828 camel-catalog - Allow to index a maven repo and add new components to the catalog So end users can publish their custom Camel components to a maven repo (nexus) and then we can index that repo and discover 3rd party Camel components and add them to the catalog on the fly. New Feature camel-catalog - Allow to index a maven repo and add new components to the catalog So end users can publish their custom Camel components to a maven repo (nexus) and then we can index that repo and discover 3rd party Camel components and add them to the catalog on the fly.
CAMEL-10827 camel-twitter - The timeline should defer its first poll to after Camel is started If using twitter:timeline/mention then it polls in any mentions during starting the route. We should defer this to the first poll after the route is started, so Camel startup faster and let other routes startup quickly too, eg{code}2017-02-14 11:23:07.853  INFO 15118 --- [           main] route1                                   : I was mentioned by Fri May 22 09:40:47 CEST 2015 (akoufoudakis) I just became a certified expert in Apache Camel (@cameltweet) development. Thanks @RedHatNL for making it possible. http://t.co/uBsZZ7c3QA2017-02-14 11:23:08.082  INFO 15118 --- [           main] route1                                   : I was mentioned by Wed Apr 15 15:31:58 CEST 2015 (akoufoudakis) Good to know Apache Camel (@cameltweet) is used by @netflix. http://t.co/2X34674nDH. Another accomplishment for the community.2017-02-14 11:23:08.282  INFO 15118 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: twitter://timeline/mentions2017-02-14 11:23:08.282  INFO 15118 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 1 routes, of which 1 are started.{code}Those twitter mentions that are logged should come after the route is started Improvement camel-twitter - The timeline should defer its first poll to after Camel is started If using twitter:timeline/mention then it polls in any mentions during starting the route. We should defer this to the first poll after the route is started, so Camel startup faster and let other routes startup quickly too, eg{code}2017-02-14 11:23:07.853  INFO 15118 --- [           main] route1                                   : I was mentioned by Fri May 22 09:40:47 CEST 2015 (akoufoudakis) I just became a certified expert in Apache Camel (@cameltweet) development. Thanks @RedHatNL for making it possible. http://t.co/uBsZZ7c3QA2017-02-14 11:23:08.082  INFO 15118 --- [           main] route1                                   : I was mentioned by Wed Apr 15 15:31:58 CEST 2015 (akoufoudakis) Good to know Apache Camel (@cameltweet) is used by @netflix. http://t.co/2X34674nDH. Another accomplishment for the community.2017-02-14 11:23:08.282  INFO 15118 --- [           main] o.a.camel.spring.SpringCamelContext      : Route: route1 started and consuming from: twitter://timeline/mentions2017-02-14 11:23:08.282  INFO 15118 --- [           main] o.a.camel.spring.SpringCamelContext      : Total 1 routes, of which 1 are started.{code}Those twitter mentions that are logged should come after the route is started
CAMEL-10826 camel-salesforce - Logging in as null Notice this when starting Camel{code}2017-02-14 11:22:57.352  INFO 15118 --- [           main] o.a.c.c.s.internal.SalesforceSession     : Login user null at Salesforce loginUrl: https://login.salesforce.com/services/oauth2/token2017-02-14 11:22:58.869  INFO 15118 --- [           main] o.a.c.c.s.internal.SalesforceSession     : Login successful{code}We should likely change that null to something else. And also we should avoid logging the username at INFO level and only do that at DEBUG level. At INFO level we can mask the username using ****** Improvement camel-salesforce - Logging in as null Notice this when starting Camel{code}2017-02-14 11:22:57.352  INFO 15118 --- [           main] o.a.c.c.s.internal.SalesforceSession     : Login user null at Salesforce loginUrl: https://login.salesforce.com/services/oauth2/token2017-02-14 11:22:58.869  INFO 15118 --- [           main] o.a.c.c.s.internal.SalesforceSession     : Login successful{code}We should likely change that null to something else. And also we should avoid logging the username at INFO level and only do that at DEBUG level. At INFO level we can mask the username using ******
CAMEL-10825 camel-opentracing component zipkin is being standardized as part of the opentracing spec. We should create a component that uses this java client library so people can use that instead of directly depend on zipkinhttp://opentracing.io/ New Feature camel-opentracing component zipkin is being standardized as part of the opentracing spec. We should create a component that uses this java client library so people can use that instead of directly depend on zipkinhttp://opentracing.io/
CAMEL-10819 examples - Generate list of examples with description It would be nice if we generate the readme with a table of the examples and have them caregorized, and grab a description from the pom.xml etc.Then we dont have to maintain that file by hand which gets out of sync with the current examples. Improvement examples - Generate list of examples with description It would be nice if we generate the readme with a table of the examples and have them caregorized, and grab a description from the pom.xml etc.Then we dont have to maintain that file by hand which gets out of sync with the current examples.
CAMEL-10814 Example for Camel Kafka Integration Example to show use of Apache Kafka component. New Feature Example for Camel Kafka Integration Example to show use of Apache Kafka component.
CAMEL-10813 Host address ignored when creating a Restlet Server The RestConfigurationDefinition allows a "host" to be specified while configuring the RouteBuilder. Unfortunately, the host is ignored while the Restlet Server is created. As a result, the server will always listen on all network interfaces.We would like to have Camel listening only on the local loopback interface for security reasons.Example of our code in the the RouteBuilder:{code:xml}public void configure() throws Exception {	restConfiguration()		.component("restlet")		.port(8103)		.host("127.0.0.1");// ...{code}The debug log:{noformat}org.apache.camel.component.restlet.RestletConsumer [DefaultConsumer.java:144] Starting consumer: Consumer[http://127.0.0.1:8103/api/status?restletMethods=GET]org.apache.camel.component.restlet.RestletComponent [RestletComponent.java:392] Setting parameters: [] to server: org.restlet.Server@e042c99org.apache.camel.component.restlet.RestletComponent [RestletComponent.java:396] Added server: 127.0.0.1:8103org.restlet.Component.Server [Slf4jLogger.java:132] Starting the internal [HTTP/1.1] server on port 8103{noformat}I believe the problem is caused by following line which ignores the host parameter:[https://github.com/apache/camel/blob/master/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java#L282] Improvement Host address ignored when creating a Restlet Server The RestConfigurationDefinition allows a "host" to be specified while configuring the RouteBuilder. Unfortunately, the host is ignored while the Restlet Server is created. As a result, the server will always listen on all network interfaces.We would like to have Camel listening only on the local loopback interface for security reasons.Example of our code in the the RouteBuilder:{code:xml}public void configure() throws Exception {	restConfiguration()		.component("restlet")		.port(8103)		.host("127.0.0.1");// ...{code}The debug log:{noformat}org.apache.camel.component.restlet.RestletConsumer [DefaultConsumer.java:144] Starting consumer: Consumer[http://127.0.0.1:8103/api/status?restletMethods=GET]org.apache.camel.component.restlet.RestletComponent [RestletComponent.java:392] Setting parameters: [] to server: org.restlet.Server@e042c99org.apache.camel.component.restlet.RestletComponent [RestletComponent.java:396] Added server: 127.0.0.1:8103org.restlet.Component.Server [Slf4jLogger.java:132] Starting the internal [HTTP/1.1] server on port 8103{noformat}I believe the problem is caused by following line which ignores the host parameter:[https://github.com/apache/camel/blob/master/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletComponent.java#L282]
CAMEL-10810 Component docs - Remove .0 from available from Lets remove the .0 so the versions are shorter and easier for the eye, eg2.18.0 -> 2.181.5.0 -> 1.5And so on. And only if the last digit is .0 we can do this.This is done in the tooling/maven/camel-package-maven-plugin where there is some code to build those readme files etc. Improvement Component docs - Remove .0 from available from Lets remove the .0 so the versions are shorter and easier for the eye, eg2.18.0 -> 2.181.5.0 -> 1.5And so on. And only if the last digit is .0 we can do this.This is done in the tooling/maven/camel-package-maven-plugin where there is some code to build those readme files etc.
CAMEL-10808 refactoring of spring boot examples Hi,There are two examples of camel in a spring boot context in the source code: https://github.com/apache/camel/tree/master/examples/camel-example-spring-boothttps://github.com/apache/camel/tree/master/examples/camel-example-spring-boot-starterWhich are very similar (POC of timer) in term of code, configuration and test. After a winmerge of these two example and as a java camel users, a merge/refactoring could be done.Only one could be keep and defined as best pratice.regards,JF Improvement refactoring of spring boot examples Hi,There are two examples of camel in a spring boot context in the source code: https://github.com/apache/camel/tree/master/examples/camel-example-spring-boothttps://github.com/apache/camel/tree/master/examples/camel-example-spring-boot-starterWhich are very similar (POC of timer) in term of code, configuration and test. After a winmerge of these two example and as a java camel users, a merge/refactoring could be done.Only one could be keep and defined as best pratice.regards,JF
CAMEL-10800 camel-connector - Allow to generate json schema and include it in source code So the camel-connector-plugin can generate the json schema file to be included in the source code you check in git along side camel-connector.json so you have all the details at your finger tips.Its the files camel-connector-schema.json and camel-component-schema.json which currently are built in the target/classes folder. We can make the built into src/main/resources so they are more visible to the developers. Improvement camel-connector - Allow to generate json schema and include it in source code So the camel-connector-plugin can generate the json schema file to be included in the source code you check in git along side camel-connector.json so you have all the details at your finger tips.Its the files camel-connector-schema.json and camel-component-schema.json which currently are built in the target/classes folder. We can make the built into src/main/resources so they are more visible to the developers.
CAMEL-10799 camel-connector - Generate spring boot auto configuration We could make the camel-connector-plugin be able to generate spring boot autoconfiguration as well, just like regular components.But mind that a connector is a facade on top of a component so there is already the spring boot auto configuration on the components, eg twitter, salesforce etc. Improvement camel-connector - Generate spring boot auto configuration We could make the camel-connector-plugin be able to generate spring boot autoconfiguration as well, just like regular components.But mind that a connector is a facade on top of a component so there is already the spring boot auto configuration on the components, eg twitter, salesforce etc.
CAMEL-10797 Create endpoint from uri without context-path Most of the Camel endpoint uris are configured as a scheme:context-path?options where the uri has some values in the context-path, eg log:foo, direct:bar, file:inbox, etc.However in some rare cases you can use an endpoint without any context-path and only with query parameters, this is currently not supported in Camel.To workaround this people have sometimes used mycomponent:dummy. However we can support uris with just mycomponent or mycomponent?foo=123 Improvement Create endpoint from uri without context-path Most of the Camel endpoint uris are configured as a scheme:context-path?options where the uri has some values in the context-path, eg log:foo, direct:bar, file:inbox, etc.However in some rare cases you can use an endpoint without any context-path and only with query parameters, this is currently not supported in Camel.To workaround this people have sometimes used mycomponent:dummy. However we can support uris with just mycomponent or mycomponent?foo=123
CAMEL-10792 CamelContext: add internal registry for context specific beans See mailing list discussion:http://mail-archives.apache.org/mod_mbox/camel-dev/201702.mbox/%3CCAGB5yNkLzmr%3DQhBCOX9u%3D-X16pGaWkLUZ%2BvY7Jf_JRrudbzh_Q%40mail.gmail.com%3E Improvement CamelContext: add internal registry for context specific beans See mailing list discussion:http://mail-archives.apache.org/mod_mbox/camel-dev/201702.mbox/%3CCAGB5yNkLzmr%3DQhBCOX9u%3D-X16pGaWkLUZ%2BvY7Jf_JRrudbzh_Q%40mail.gmail.com%3E
CAMEL-10784 camel-connector - Allow to rename options Connectors should allow to rename Camel options so you can use a different name if you like.For example some of the Camel component option names can be harder to understand, so by allowing to redefine those as a new name can make it easier for users to use the connector. Improvement camel-connector - Allow to rename options Connectors should allow to rename Camel options so you can use a different name if you like.For example some of the Camel component option names can be harder to understand, so by allowing to redefine those as a new name can make it easier for users to use the connector.
CAMEL-10781 Add available from to misc list of components In this tablehttps://github.com/apache/camel/tree/master/components#other-componentsWe should add the `Available From` column with the version when it was added. Task Add available from to misc list of components In this tablehttps://github.com/apache/camel/tree/master/components#other-componentsWe should add the `Available From` column with the version when it was added.
CAMEL-10775 Add information to components which version they were added to Camel It would be good if we can get information when a component was added to Apache Camel. So users can see if its a new component or old etc.We could maybe hack a script that iterates all the components and then find out via git log / branch or what it takes to see when it was in the git repo and from that branch / tag find the version number.We could then add those versions manually to @Metadata or something on the @UriEndpoint so we can get that information in the component json schema and as well at runtime.We basically need just a one-off to get this information for now, and then in the future we can add the version manually when we add new components. New Feature Add information to components which version they were added to Camel It would be good if we can get information when a component was added to Apache Camel. So users can see if its a new component or old etc.We could maybe hack a script that iterates all the components and then find out via git log / branch or what it takes to see when it was in the git repo and from that branch / tag find the version number.We could then add those versions manually to @Metadata or something on the @UriEndpoint so we can get that information in the component json schema and as well at runtime.We basically need just a one-off to get this information for now, and then in the future we can add the version manually when we add new components.
CAMEL-10774 camel-catalog - Include other kind of camel artifacts We should find a way to add the other kind of Camel artifacts such as camel-swagger-java, camel-zipkin, and so on which are not a component, data format, language etc.See also CAMEL-10773 New Feature camel-catalog - Include other kind of camel artifacts We should find a way to add the other kind of Camel artifacts such as camel-swagger-java, camel-zipkin, and so on which are not a component, data format, language etc.See also CAMEL-10773
CAMEL-10772 Spring POJO @Produce @Consume Remoting auto detect binding usage improvement Convention over configurationImprovement in AbstractCamelInvocationHandler.invokeProxy, to auto detect if the invocation is binding capable. It is determined by checking the parameter count and annotation types on each parameter, and only use binding if it is capable. Otherwise fallback on to the old bean invocation way. Improvement Spring POJO @Produce @Consume Remoting auto detect binding usage improvement Convention over configurationImprovement in AbstractCamelInvocationHandler.invokeProxy, to auto detect if the invocation is binding capable. It is determined by checking the parameter count and annotation types on each parameter, and only use binding if it is capable. Otherwise fallback on to the old bean invocation way.
CAMEL-10769 Tika Component - Support Multi-Value Metadata Tika Metadata values can also have string arrays.  Adding support for it. Improvement Tika Component - Support Multi-Value Metadata Tika Metadata values can also have string arrays.  Adding support for it.
CAMEL-10768 Dropbox component should support specifying route params using headers Unlike similar components it seems that the Dropbox component does not allow to specify key parameters (such as the file name) using headers.Doing so would make it much more useful.See discussion here:http://camel.465427.n5.nabble.com/Specifying-file-names-using-Dropbox-component-td5793105.html Improvement Dropbox component should support specifying route params using headers Unlike similar components it seems that the Dropbox component does not allow to specify key parameters (such as the file name) using headers.Doing so would make it much more useful.See discussion here:http://camel.465427.n5.nabble.com/Specifying-file-names-using-Dropbox-component-td5793105.html
CAMEL-10765 Remove unused oauth dependency from camel-cxf pom I use camel-cxf component, which currently bring some transitive "oauth" jars:{code}[INFO] +- org.apache.camel:camel-cxf:jar:2.18.1:compile[INFO] |  \- org.apache.cxf:cxf-rt-rs-security-oauth:jar:3.1.9:compile[INFO] |     \- net.oauth.core:oauth-provider:jar:20100527:compile[INFO] |        \- net.oauth.core:oauth:jar:20100527:compile{code}I have looked at the camel-cxf documentation and also scan the code of camel-cxf, but here is currently no oauth(1) handling implemented. So I assume this dependency is not correctly defined. I have tried to remove it, but camel-cxf seems to transitive rely on cxf-rt-rs-client.*Proposal for change:** Remove oauth dependency and proper define dependency to cxf-rt-rs-client (since this module compile against org.apache.cxf.jaxrs.client):{code}diff --git a/components/camel-cxf/pom.xml b/components/camel-cxf/pom.xmlindex 5c917bc..0415781 100644--- a/components/camel-cxf/pom.xml+++ b/components/camel-cxf/pom.xml@@ -110,7 +110,7 @@     </dependency>     <dependency>         <groupId>org.apache.cxf</groupId>-        <artifactId>cxf-rt-rs-security-oauth</artifactId>+        <artifactId>cxf-rt-rs-client</artifactId>         <version>${cxf-version}</version>     </dependency>{code}With this patch, camel-cxf module still run successfully. Improvement Remove unused oauth dependency from camel-cxf pom I use camel-cxf component, which currently bring some transitive "oauth" jars:{code}[INFO] +- org.apache.camel:camel-cxf:jar:2.18.1:compile[INFO] |  \- org.apache.cxf:cxf-rt-rs-security-oauth:jar:3.1.9:compile[INFO] |     \- net.oauth.core:oauth-provider:jar:20100527:compile[INFO] |        \- net.oauth.core:oauth:jar:20100527:compile{code}I have looked at the camel-cxf documentation and also scan the code of camel-cxf, but here is currently no oauth(1) handling implemented. So I assume this dependency is not correctly defined. I have tried to remove it, but camel-cxf seems to transitive rely on cxf-rt-rs-client.*Proposal for change:** Remove oauth dependency and proper define dependency to cxf-rt-rs-client (since this module compile against org.apache.cxf.jaxrs.client):{code}diff --git a/components/camel-cxf/pom.xml b/components/camel-cxf/pom.xmlindex 5c917bc..0415781 100644--- a/components/camel-cxf/pom.xml+++ b/components/camel-cxf/pom.xml@@ -110,7 +110,7 @@     </dependency>     <dependency>         <groupId>org.apache.cxf</groupId>-        <artifactId>cxf-rt-rs-security-oauth</artifactId>+        <artifactId>cxf-rt-rs-client</artifactId>         <version>${cxf-version}</version>     </dependency>{code}With this patch, camel-cxf module still run successfully.
CAMEL-10760 Allow OGNL expression on square bracket accessed properties and headers in simple language In simple languange it is possibile to invoke OGNL expressions accessing header and exchange properties with dot notation but accessing same value using square brackets does not work.For example having a property **foo** referencing a bean instance{{exchangeProperties.foo.OGNL}} works but{{exchangeProperties\[foo\].OGNL}} fails.Accessing a header or property using square brackets is especially useful whenthe key contains dots (eg exchangeProperties\[my.key\].myBeanAccessor).I can submit a PR for this if it is worth it Improvement Allow OGNL expression on square bracket accessed properties and headers in simple language In simple languange it is possibile to invoke OGNL expressions accessing header and exchange properties with dot notation but accessing same value using square brackets does not work.For example having a property **foo** referencing a bean instance{{exchangeProperties.foo.OGNL}} works but{{exchangeProperties\[foo\].OGNL}} fails.Accessing a header or property using square brackets is especially useful whenthe key contains dots (eg exchangeProperties\[my.key\].myBeanAccessor).I can submit a PR for this if it is worth it
CAMEL-10759 RABBITMQ Component binding args Current RabbitMQ component allows to create bindings using only routing keys. It would be good to provide a way to also create bindings for headers exchange. Some info about it: http://stackoverflow.com/questions/19240290/how-do-i-implement-headers-exchange-in-rabbitmq-using-java/19534597The ArgsConfigurer is to be deprecated in favour of a Map<String, Object>.Examples of usage would also be good.Supersedes CAMEL-10483 Improvement RABBITMQ Component binding args Current RabbitMQ component allows to create bindings using only routing keys. It would be good to provide a way to also create bindings for headers exchange. Some info about it: http://stackoverflow.com/questions/19240290/how-do-i-implement-headers-exchange-in-rabbitmq-using-java/19534597The ArgsConfigurer is to be deprecated in favour of a Map<String, Object>.Examples of usage would also be good.Supersedes CAMEL-10483
CAMEL-10749 Quartz2 interrupt job Currently there is no way to interrupt Job that was created by Quartz because of{code:java}//org.apache.camel.component.quartz2.QuartzComponentprotected void doStop() throws Exception {        super.doStop();        if (scheduler != null) {            AtomicInteger number = (AtomicInteger) scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);            if (number != null && number.get() > 0) {                LOG.info("Cannot shutdown scheduler: " + scheduler.getSchedulerName() + " as there are still " + number.get() + " jobs registered.");            } else {                LOG.info("Shutting down scheduler. (will wait for all jobs to complete first.)");                scheduler.shutdown(true);                scheduler = null;            }        }    }{code}Is this by design or it is really broken compatibility with Quartz. There is undocumented option in Quartz that you can interrupt Job:{code}org.quartz.scheduler.interruptJobsOnShutdown{code} Improvement Quartz2 interrupt job Currently there is no way to interrupt Job that was created by Quartz because of{code:java}//org.apache.camel.component.quartz2.QuartzComponentprotected void doStop() throws Exception {        super.doStop();        if (scheduler != null) {            AtomicInteger number = (AtomicInteger) scheduler.getContext().get(QuartzConstants.QUARTZ_CAMEL_JOBS_COUNT);            if (number != null && number.get() > 0) {                LOG.info("Cannot shutdown scheduler: " + scheduler.getSchedulerName() + " as there are still " + number.get() + " jobs registered.");            } else {                LOG.info("Shutting down scheduler. (will wait for all jobs to complete first.)");                scheduler.shutdown(true);                scheduler = null;            }        }    }{code}Is this by design or it is really broken compatibility with Quartz. There is undocumented option in Quartz that you can interrupt Job:{code}org.quartz.scheduler.interruptJobsOnShutdown{code}
CAMEL-10746 camel catalog - Allow to download custom version of runtime provider Like we can do for regular camel-catalog to download eg 2.18.1 when its being used by 2.18.2 catalog. The runtime providers for karaf / spring boot need a similar way to download their JARs as well. Improvement camel catalog - Allow to download custom version of runtime provider Like we can do for regular camel-catalog to download eg 2.18.1 when its being used by 2.18.2 catalog. The runtime providers for karaf / spring boot need a similar way to download their JARs as well.
CAMEL-10745 POJO @Produce @Consume does not work with multiple arguments anymore. Upgraded from 2.14 to 2.17.3. Using Camel-Spring with annotation @Produce on an interface with a single method that has multiple arguments and @Consume on the implementation to create a remote method invocation over activemq.According to the documentation that since 2.16 the default behave of this usage has changed to use the new binding procedure. When you use the word "default" in the documentation, it implies there is a choice to use a non-default way. However my first problem is that there seems to be no way to override the default behaviour (binding to false), when using spring POJO beans.Based on the source code of [CamelPostProcessorHelper class method getInjectionValue|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java#L224]. This method checks for an interface type and creates a proxy by using the ProxyHelper, that forces the binding to always be set to true. This leads to my next problem, now with the binding turned on, it does not work for an interface method with multiple arguments on the producer side any more. (version > 2.16)While the [bean integration document|http://camel.apache.org/bean-binding.html] suggests: {quote}you can explicitly specify the method name in the DSL or when using POJO Consuming or POJO Producing.{quote}In the source code of [AbstractCamelInvocationHandler invokeProxy  method|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java#L117] when the binding is turned on, which is always, it tries to get all annotations for each argument. But because there isn't any, it assumes there is only one argument and sets the body of the in message to this value, ignoring the rest.This behaviour in my opinion is contradictory to the document, since no where in the documentation is it suggested you can only have one or no arguments in methods for POJO Producing. This wouldn't be a problem if there is a way to turn the default binding off. This wasn't a problem before 2.16.Third issue, since you can only have one @Body annotation, tried to use the @Header annotation for each argument. This encountered an issue with the conversion of the java.util.Date Object as one of the arguments. It defaults to use toString and fromString to marshall and unmarshall the object. I have not tried to create custom type converters, I think any Java standard object should work out of box. Improvement POJO @Produce @Consume does not work with multiple arguments anymore. Upgraded from 2.14 to 2.17.3. Using Camel-Spring with annotation @Produce on an interface with a single method that has multiple arguments and @Consume on the implementation to create a remote method invocation over activemq.According to the documentation that since 2.16 the default behave of this usage has changed to use the new binding procedure. When you use the word "default" in the documentation, it implies there is a choice to use a non-default way. However my first problem is that there seems to be no way to override the default behaviour (binding to false), when using spring POJO beans.Based on the source code of [CamelPostProcessorHelper class method getInjectionValue|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/CamelPostProcessorHelper.java#L224]. This method checks for an interface type and creates a proxy by using the ProxyHelper, that forces the binding to always be set to true. This leads to my next problem, now with the binding turned on, it does not work for an interface method with multiple arguments on the producer side any more. (version > 2.16)While the [bean integration document|http://camel.apache.org/bean-binding.html] suggests: {quote}you can explicitly specify the method name in the DSL or when using POJO Consuming or POJO Producing.{quote}In the source code of [AbstractCamelInvocationHandler invokeProxy  method|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java#L117] when the binding is turned on, which is always, it tries to get all annotations for each argument. But because there isn't any, it assumes there is only one argument and sets the body of the in message to this value, ignoring the rest.This behaviour in my opinion is contradictory to the document, since no where in the documentation is it suggested you can only have one or no arguments in methods for POJO Producing. This wouldn't be a problem if there is a way to turn the default binding off. This wasn't a problem before 2.16.Third issue, since you can only have one @Body annotation, tried to use the @Header annotation for each argument. This encountered an issue with the conversion of the java.util.Date Object as one of the arguments. It defaults to use toString and fromString to marshall and unmarshall the object. I have not tried to create custom type converters, I think any Java standard object should work out of box.
CAMEL-10737 file component should support parent folder in tempFileName  See SOhttp://stackoverflow.com/questions/41766879/apache-camel-file-component-recursive-and-tempfilename?noredirect=1#comment70776858_41766879We can compact the temporary file, so if the has foo/bar/../work/myfile.tmp, then it can be compacted to foo/work/myfile.tmp. We use the compact for other options on the file component. Improvement file component should support parent folder in tempFileName  See SOhttp://stackoverflow.com/questions/41766879/apache-camel-file-component-recursive-and-tempfilename?noredirect=1#comment70776858_41766879We can compact the temporary file, so if the has foo/bar/../work/myfile.tmp, then it can be compacted to foo/work/myfile.tmp. We use the compact for other options on the file component.
CAMEL-10735 Mark code as deprecated on 2.x We should mark more code on 2.x in camel-core that is being deprecated and which we want to not carry forward to Camel 3.x. Task Mark code as deprecated on 2.x We should mark more code on 2.x in camel-core that is being deprecated and which we want to not carry forward to Camel 3.x.
CAMEL-10721 Camel Connectors Introduce Camel Connectors.A Camel Connectors is a simplified and pre-configured Camel component which has been setup for a specific use-case, such as "add new contact to salesforce", or "add calender entry" or whatever.This would allow to build a marketplace/catalog of Camel connectors which would be easier to use for business use-cases. The connector is based on one of the existing Camel components (or 3rd party component) by which you can specify in a camel-connector.json file which options to pre-select and as well specify other default values etc. Then a maven plugin will build this as a Camel component, so at runtime its just a regular Camel component. And because they are just regular Camel component then there is no problem running them in Camel applications. In addition all existing JMX, tooling et all just sees this as Camel components and can use that.Also at design time, for example the IDEA plugin will see the connector as a 3rd party Camel component and offer code assistance to it etc. New Feature Camel Connectors Introduce Camel Connectors.A Camel Connectors is a simplified and pre-configured Camel component which has been setup for a specific use-case, such as "add new contact to salesforce", or "add calender entry" or whatever.This would allow to build a marketplace/catalog of Camel connectors which would be easier to use for business use-cases. The connector is based on one of the existing Camel components (or 3rd party component) by which you can specify in a camel-connector.json file which options to pre-select and as well specify other default values etc. Then a maven plugin will build this as a Camel component, so at runtime its just a regular Camel component. And because they are just regular Camel component then there is no problem running them in Camel applications. In addition all existing JMX, tooling et all just sees this as Camel components and can use that.Also at design time, for example the IDEA plugin will see the connector as a 3rd party Camel component and offer code assistance to it etc.
CAMEL-10720 Add deprecated to the description in the generated XSD schema So we can better indicate in the XSD schema as well that an option is deprecated.For example "bean" in method call expressionhttp://camel.apache.org/schema/blueprint/camel-blueprint-2.18.1.xsd Improvement Add deprecated to the description in the generated XSD schema So we can better indicate in the XSD schema as well that an option is deprecated.For example "bean" in method call expressionhttp://camel.apache.org/schema/blueprint/camel-blueprint-2.18.1.xsd
CAMEL-10719 Add ability to manage ThrottlingExceptionRoutePolicy through JMX add management via JMX to ThrottlingExceptionRoutePolicy route policy.See how we do it for the existingorg.apache.camel.api.management.mbean.ManagedThrottlingInflightRoutePolicyMBean New Feature Add ability to manage ThrottlingExceptionRoutePolicy through JMX add management via JMX to ThrottlingExceptionRoutePolicy route policy.See how we do it for the existingorg.apache.camel.api.management.mbean.ManagedThrottlingInflightRoutePolicyMBean
CAMEL-10718 Route Policy implements circuit breaker pattern to stop consuming from the endpoint Our project recently needed a circuit breaker that stop consuming messages from the from endpoint. I noticed that the Camel circuit breakers consumed from the endpoint even in the open mode and controlled access to the to endpoints on the route.Based on a Stack Overflow answer, I created a circuit breaker that will stop consuming from the starting endpoint based on exceptions being thrown. It is using a RoutePolicy and imitates the existing ThrottlingInflightRoutePolicy as well as the CircuitBreakingLoadBalancer.This is in the PR 1400https://github.com/apache/camel/pull/1400 New Feature Route Policy implements circuit breaker pattern to stop consuming from the endpoint Our project recently needed a circuit breaker that stop consuming messages from the from endpoint. I noticed that the Camel circuit breakers consumed from the endpoint even in the open mode and controlled access to the to endpoints on the route.Based on a Stack Overflow answer, I created a circuit breaker that will stop consuming from the starting endpoint based on exceptions being thrown. It is using a RoutePolicy and imitates the existing ThrottlingInflightRoutePolicy as well as the CircuitBreakingLoadBalancer.This is in the PR 1400https://github.com/apache/camel/pull/1400
CAMEL-10711 Consider using add[Test]CompileSourceRoot in api component maven plugin When using camel-api-component-maven-plugin we must also addbuild-helper-maven-plugin to ensure that generated sources are addedto the project for compilation.To avoid this configuration step it is possible to add the source pathdirectly from the plugin by calling *MavenProject.addCompileSourceRoot*and *MavenProject.addTestCompileSourceRoot*.{code:java}project.addCompileSourceRoot(this.generatedSrcDir.getAbsolutePath());project.addTestCompileSourceRoot(this.generatedTestDir.getAbsolutePath());{code}This can maybe be done at the end of the execute method of ApiComponentGeneratorMojo and AbstractApiMethodGeneratorMojo.It could also be a nice idea to add  boolean properties  in AbstractGeneratorMojo in order to enable or disable the automatic addition of the source.{code:java}@Parameter(defaultValue = "true", property = PREFIX + "addCompileSourceRoot", required = false)private boolean addCompileSourceRoot = true;@Parameter(defaultValue = "true", property = PREFIX + "addTestCompileSourceRoot", required = false)private boolean addTestCompileSourceRoot = true;{code}{code:java}if (this.addCompileSourceRoot) {  project.addCompileSourceRoot(this.generatedSrcDir.getAbsolutePath());}if (this.addTestCompileSourceRoot) { project.addTestCompileSourceRoot(this.generatedTestDir.getAbsolutePath());}{code} New Feature Consider using add[Test]CompileSourceRoot in api component maven plugin When using camel-api-component-maven-plugin we must also addbuild-helper-maven-plugin to ensure that generated sources are addedto the project for compilation.To avoid this configuration step it is possible to add the source pathdirectly from the plugin by calling *MavenProject.addCompileSourceRoot*and *MavenProject.addTestCompileSourceRoot*.{code:java}project.addCompileSourceRoot(this.generatedSrcDir.getAbsolutePath());project.addTestCompileSourceRoot(this.generatedTestDir.getAbsolutePath());{code}This can maybe be done at the end of the execute method of ApiComponentGeneratorMojo and AbstractApiMethodGeneratorMojo.It could also be a nice idea to add  boolean properties  in AbstractGeneratorMojo in order to enable or disable the automatic addition of the source.{code:java}@Parameter(defaultValue = "true", property = PREFIX + "addCompileSourceRoot", required = false)private boolean addCompileSourceRoot = true;@Parameter(defaultValue = "true", property = PREFIX + "addTestCompileSourceRoot", required = false)private boolean addTestCompileSourceRoot = true;{code}{code:java}if (this.addCompileSourceRoot) {  project.addCompileSourceRoot(this.generatedSrcDir.getAbsolutePath());}if (this.addTestCompileSourceRoot) { project.addTestCompileSourceRoot(this.generatedTestDir.getAbsolutePath());}{code}
CAMEL-10703 camel-catalog - Add api for validating any Camel languge Currently we have for simple languge. But we could have an api for other languages as well. This will just be a sanity check if the expression/predicate can be created. Improvement camel-catalog - Add api for validating any Camel languge Currently we have for simple languge. But we could have an api for other languages as well. This will just be a sanity check if the expression/predicate can be created.
CAMEL-10702 camel-jsonpath - Allow to define predicates even easier When using jsonpath for predicates the syntax can be a bit complex to understand and learn for even the simplest things.So having to do{code}                        .when().jsonpath("$.store.book[?(@.price < ${header.cheap})]"){code}We can try to let Camel be smart and help you with a easy syntax when you have one operator and in predicate mode, so this can be just{code}                        .when().jsonpath("store.book.price < ${header.cheap}"){code}Then camel-jsonpath will parse this and build the complexer jsonpath syntax on your behalf.Not having to remember the complexities of [?@.] and other hard to remember symbols to just say a simple predicate if X < Y etc. Improvement camel-jsonpath - Allow to define predicates even easier When using jsonpath for predicates the syntax can be a bit complex to understand and learn for even the simplest things.So having to do{code}                        .when().jsonpath("$.store.book[?(@.price < ${header.cheap})]"){code}We can try to let Camel be smart and help you with a easy syntax when you have one operator and in predicate mode, so this can be just{code}                        .when().jsonpath("store.book.price < ${header.cheap}"){code}Then camel-jsonpath will parse this and build the complexer jsonpath syntax on your behalf.Not having to remember the complexities of [?@.] and other hard to remember symbols to just say a simple predicate if X < Y etc.
CAMEL-10700 camel-maven - validate simple predicates and property placeholders Because we cannot resolve property placeholders at design time we need a way to let the simple parser deal with having {{ }} in the string. As you get this kind of error today{code}davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-cdi-xml (master)/$ mvn camel:validate[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Camel :: Example :: CDI :: Camel XML 2.19.0-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- camel-maven-plugin:2.19.0-SNAPSHOT:validate (default-cli) @ camel-example-cdi-xml ---[INFO] Using Camel version: 2.19.0-SNAPSHOT[INFO] Endpoint validation success: (5 = passed, 0 = invalid, 0 = incapable, 0 = unknown components)[WARNING] Simple validation error at: camel-context(camel-context.xml:44)	functionEnd has no matching start token at location 21	${body} == '{{poison}}'	                     *[WARNING] Simple validation error: (0 = passed, 1 = invalid){code} Improvement camel-maven - validate simple predicates and property placeholders Because we cannot resolve property placeholders at design time we need a way to let the simple parser deal with having {{ }} in the string. As you get this kind of error today{code}davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-cdi-xml (master)/$ mvn camel:validate[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Camel :: Example :: CDI :: Camel XML 2.19.0-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- camel-maven-plugin:2.19.0-SNAPSHOT:validate (default-cli) @ camel-example-cdi-xml ---[INFO] Using Camel version: 2.19.0-SNAPSHOT[INFO] Endpoint validation success: (5 = passed, 0 = invalid, 0 = incapable, 0 = unknown components)[WARNING] Simple validation error at: camel-context(camel-context.xml:44)	functionEnd has no matching start token at location 21	${body} == '{{poison}}'	                     *[WARNING] Simple validation error: (0 = passed, 1 = invalid){code}
CAMEL-10699 Simple - Add short error message So you can get a short error message instead of the verbose error with the * marker. That is not so good for tooltips and tooling and whatnot, where you just need to short error and nothing more. Improvement Simple - Add short error message So you can get a short error message instead of the verbose error with the * marker. That is not so good for tooltips and tooling and whatnot, where you just need to short error and nothing more.
CAMEL-10698 camel-maven - validate simple expression predicate vs expression When we get some details in the model we can find out if its a predicate or expression and use that in the validator to validate that correctly.Now it can fail with{code}[INFO] --- camel-maven-plugin:2.19.0-SNAPSHOT:validate (default-cli) @ camel-example-spring-boot ---[INFO] Using Camel version: 2.19.0-SNAPSHOT[INFO] Endpoint validation success: (3 = passed, 0 = invalid, 0 = incapable, 0 = unknown components)[WARNING] Simple validation error at: org.apache.camel.example.spring.boot.MySpringBootRouter.configure(MySpringBootRouter.java:34)	Unexpected token ! at location 8	${body} !> 50	        *[WARNING] Simple validation error: (0 = passed, 1 = invalid){code}In a route with{code}        from("timer:trigger")            .filter().simple("${body} !> 50")                .to("log:out");{code} Improvement camel-maven - validate simple expression predicate vs expression When we get some details in the model we can find out if its a predicate or expression and use that in the validator to validate that correctly.Now it can fail with{code}[INFO] --- camel-maven-plugin:2.19.0-SNAPSHOT:validate (default-cli) @ camel-example-spring-boot ---[INFO] Using Camel version: 2.19.0-SNAPSHOT[INFO] Endpoint validation success: (3 = passed, 0 = invalid, 0 = incapable, 0 = unknown components)[WARNING] Simple validation error at: org.apache.camel.example.spring.boot.MySpringBootRouter.configure(MySpringBootRouter.java:34)	Unexpected token ! at location 8	${body} !> 50	        *[WARNING] Simple validation error: (0 = passed, 1 = invalid){code}In a route with{code}        from("timer:trigger")            .filter().simple("${body} !> 50")                .to("log:out");{code}
CAMEL-10697 Infinite loop sometimes happen at the shutdown of the Kafka consumer This bug is described in KAFKA-1894, they provide a workaround that consist of calling the {{wakeup}} method from another thread. It would be nice if this workaround was included in the camel-kafka consumer Improvement Infinite loop sometimes happen at the shutdown of the Kafka consumer This bug is described in KAFKA-1894, they provide a workaround that consist of calling the {{wakeup}} method from another thread. It would be nice if this workaround was included in the camel-kafka consumer
CAMEL-10696 Allow camel-kafka to resume from any offset As Kafka supports resuming from any offsets, it would be nice if this feature was available camel-kafka component.Since Kafka needs the offset of each partition, its state (where to resume from) should be somehow similar to a {{Map}}. We cannot use an {{IdempotentRepository}} because it behaves like a {{Set}}.If we create a _standard_ API for holding the state as a {{Map}} then we can reuse it for other purpose like resuming database reads from a particular index. New Feature Allow camel-kafka to resume from any offset As Kafka supports resuming from any offsets, it would be nice if this feature was available camel-kafka component.Since Kafka needs the offset of each partition, its state (where to resume from) should be somehow similar to a {{Map}}. We cannot use an {{IdempotentRepository}} because it behaves like a {{Set}}.If we create a _standard_ API for holding the state as a {{Map}} then we can reuse it for other purpose like resuming database reads from a particular index.
CAMEL-10691 HttpRestServletResolveConsumerStrategy should pick the path with longest prefix match HttpRestServletResolveConsumerStrategy should pick the path with longest prefix match.The JAX-RS specification has defined strict sorting and precedence rules for matching URI expressions and is based on a most specific match wins algorithm.For camel also it should be same.This is an example use case:{code}@Overridepublic final void configure() throws Exception {LOG.info("Configuring Camel routes");from("jetty:http://localhost:8080/crud?matchOnUriPrefix=true").to("cxfbean:crudService");from("jetty:http://localhost:8080/?matchOnUriPrefix=true").process(new StaticProcessor("/", "index.html", staticFileRoot));}{code} Improvement HttpRestServletResolveConsumerStrategy should pick the path with longest prefix match HttpRestServletResolveConsumerStrategy should pick the path with longest prefix match.The JAX-RS specification has defined strict sorting and precedence rules for matching URI expressions and is based on a most specific match wins algorithm.For camel also it should be same.This is an example use case:{code}@Overridepublic final void configure() throws Exception {LOG.info("Configuring Camel routes");from("jetty:http://localhost:8080/crud?matchOnUriPrefix=true").to("cxfbean:crudService");from("jetty:http://localhost:8080/?matchOnUriPrefix=true").process(new StaticProcessor("/", "index.html", staticFileRoot));}{code}
CAMEL-10687 Component docs - Auto generate title so they are consistent We should let the tooling generate the adoc titles so they are consistent. Improvement Component docs - Auto generate title so they are consistent We should let the tooling generate the adoc titles so they are consistent.
CAMEL-10684 camel-catalog - Simple validator should provide location index of the error Currently SimpleValidationResult sets the exception message. But we should check if its a SimpleParserException which has a getIndex so we know where the error is Improvement camel-catalog - Simple validator should provide location index of the error Currently SimpleValidationResult sets the exception message. But we should check if its a SimpleParserException which has a getIndex so we know where the error is
CAMEL-10680 Camel catalog - validate endpoint properties - consumer vs producer We should add methods to validate endpoints where we can tell Camel its used as consumer or producer. Then it can also validate if those options are possible on that mode.eg if you have a file producer, and attempt to use a readLock option which is only supported on the consumer, it can then validate and fail. Improvement Camel catalog - validate endpoint properties - consumer vs producer We should add methods to validate endpoints where we can tell Camel its used as consumer or producer. Then it can also validate if those options are possible on that mode.eg if you have a file producer, and attempt to use a readLock option which is only supported on the consumer, it can then validate and fail.
CAMEL-10676 Some javadoc warnings could be easily corrected in camel-sql and camel-http This issue stands to capture few commits correcting few javadoc warnings in camel-sql and camel-http. Task Some javadoc warnings could be easily corrected in camel-sql and camel-http This issue stands to capture few commits correcting few javadoc warnings in camel-sql and camel-http.
CAMEL-10671 camel-example-celyon We should have a little example of using camel with celyon. Its just to have a maven project with celyon dependencies and compiler setup and some basic celyon code that can run standalone with a camel route.Take a look at the groovy or kotlin example which would be similar. New Feature camel-example-celyon We should have a little example of using camel with celyon. Its just to have a maven project with celyon dependencies and compiler setup and some basic celyon code that can run standalone with a camel route.Take a look at the groovy or kotlin example which would be similar.
CAMEL-10667 Add tarFile data format to Java DSL I have added the maven dependency to my project for camel-tarfile as:            </dependency> 		<dependency>		  <groupId>org.apache.camel</groupId>		  <artifactId>camel-tarfile</artifactId>		  <version>2.18.1</version>		</dependency>When adding the following route to my project I get a compilation error saying that the method tarFile() does not exist.from("file:input/directory?antInclude=*/.txt").marshal().tarFile().to("file:output/directory");The exact error is:[ERROR] /home/miguel/opt/Spring-Boot-Camel-ActiveMQ-master/src/main/java/support/alfresco/Route.java:[118,73] cannot find symbol  symbol:   method tarFile() Improvement Add tarFile data format to Java DSL I have added the maven dependency to my project for camel-tarfile as:            </dependency> 		<dependency>		  <groupId>org.apache.camel</groupId>		  <artifactId>camel-tarfile</artifactId>		  <version>2.18.1</version>		</dependency>When adding the following route to my project I get a compilation error saying that the method tarFile() does not exist.from("file:input/directory?antInclude=*/.txt").marshal().tarFile().to("file:output/directory");The exact error is:[ERROR] /home/miguel/opt/Spring-Boot-Camel-ActiveMQ-master/src/main/java/support/alfresco/Route.java:[118,73] cannot find symbol  symbol:   method tarFile()
CAMEL-10665 Restlet header warnings - again I am seeing warnings in log similar to those mentioned in CAMEL-6590. {code}[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Accept" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Accept-encoding" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Accept-language" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Connection" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Cookie" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Host" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "User-agent" is not allowed. Please use the equivalent property in the Restlet API.{code}The lines added with the patch mentioned there were removed some commits later. See [history|https://github.com/apache/camel/commits/master/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletHeaderFilterStrategy.java][Commit that applied the patch|https://github.com/apache/camel/commit/e7db4ab26749904a4d0ea0b6a0faadfa62519845#diff-40593731f0a05cbcfd5ea24e6bc7e76e][Commit that reverted it(intentionally?)|https://github.com/apache/camel/commit/d8404f69dc54557a64fb90f9de48b5f1d6e1303a#diff-40593731f0a05cbcfd5ea24e6bc7e76e]Probably i am totally wrong and those warnings are right, but what to do about them?I am using version *2.18.1* of camel-core and camel-restlet Task Restlet header warnings - again I am seeing warnings in log similar to those mentioned in CAMEL-6590. {code}[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Accept" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Accept-encoding" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Accept-language" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Connection" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Cookie" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "Host" is not allowed. Please use the equivalent property in the Restlet API.[WARN ] 2017-01-01 15:20:50.168 [Restlet-2000563893] LogFilter - Addition of the standard header "User-agent" is not allowed. Please use the equivalent property in the Restlet API.{code}The lines added with the patch mentioned there were removed some commits later. See [history|https://github.com/apache/camel/commits/master/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletHeaderFilterStrategy.java][Commit that applied the patch|https://github.com/apache/camel/commit/e7db4ab26749904a4d0ea0b6a0faadfa62519845#diff-40593731f0a05cbcfd5ea24e6bc7e76e][Commit that reverted it(intentionally?)|https://github.com/apache/camel/commit/d8404f69dc54557a64fb90f9de48b5f1d6e1303a#diff-40593731f0a05cbcfd5ea24e6bc7e76e]Probably i am totally wrong and those warnings are right, but what to do about them?I am using version *2.18.1* of camel-core and camel-restlet
CAMEL-10662 camel-hystrix - If hystrix timeout occurs then the hystrix timeout exception should be cause Camel may override that exception with some custom exception that can be triggered as side-effect of the timeout, but then the exchange does not hold that timeout which was the cause why it was failed. Improvement camel-hystrix - If hystrix timeout occurs then the hystrix timeout exception should be cause Camel may override that exception with some custom exception that can be triggered as side-effect of the timeout, but then the exchange does not hold that timeout which was the cause why it was failed.
CAMEL-10661 camel-hystrix - Fallback should route exchange if it was marked as stop due delay timeout In case you use a delay in a Camel route which is protected by hystrix and a hystrix timeout is triggered, then it causes the Camel delayer to interrupt and fail the exchange.Then the fallback should be executed on hystrix which then dont continue routing due Camel delayer marked the exchange to route stop just beforehand. Improvement camel-hystrix - Fallback should route exchange if it was marked as stop due delay timeout In case you use a delay in a Camel route which is protected by hystrix and a hystrix timeout is triggered, then it causes the Camel delayer to interrupt and fail the exchange.Then the fallback should be executed on hystrix which then dont continue routing due Camel delayer marked the exchange to route stop just beforehand.
CAMEL-10660 InterruptedException not handled by RedeliveryErrorHandler It appears that if the exception on an {{Exchange}} is of type {{InterruptedException}} or if any exception in the cause-chain is of that type, then that exception is completely ignored by the {{RedeliveryErrorHandler}}. Possibly because it is assumed that any {{InterruptedException}} would have been raised is due to a Camel context shutdown?See {{RedeliveryErrorHandler::isDone(Exchange exchange}}.It would be great if {{InterruptedException}} not associated with the Camel context life-cycle could be treated like any other exception (logging, re-delivery, etc.). As it is now they are neither logged nor handled, which might obscure problems in application code. Improvement InterruptedException not handled by RedeliveryErrorHandler It appears that if the exception on an {{Exchange}} is of type {{InterruptedException}} or if any exception in the cause-chain is of that type, then that exception is completely ignored by the {{RedeliveryErrorHandler}}. Possibly because it is assumed that any {{InterruptedException}} would have been raised is due to a Camel context shutdown?See {{RedeliveryErrorHandler::isDone(Exchange exchange}}.It would be great if {{InterruptedException}} not associated with the Camel context life-cycle could be treated like any other exception (logging, re-delivery, etc.). As it is now they are neither logged nor handled, which might obscure problems in application code.
CAMEL-10656 Component ascii docs - Fix conversion to html warnings Some of the component adoc files are not well formed and causes warnings when converting to other formats such as html.You can see those errors running    mvn clean installin platforms/catalog directory Task Component ascii docs - Fix conversion to html warnings Some of the component adoc files are not well formed and causes warnings when converting to other formats such as html.You can see those errors running    mvn clean installin platforms/catalog directory
CAMEL-10655 Camel catalog - Include html copies of adoc documentation This can allow some tooling to easier read and present the documentation if its in html format, as adoc is not always presentable in all kind of tools today.We can asciidoctorj to convert from adoc to html when preparing the camel-catalog.This can also help find some minor mistakes in the adoc files if they have something invalid that is not convertable to html as then its maybe not so well formed adoc. Improvement Camel catalog - Include html copies of adoc documentation This can allow some tooling to easier read and present the documentation if its in html format, as adoc is not always presentable in all kind of tools today.We can asciidoctorj to convert from adoc to html when preparing the camel-catalog.This can also help find some minor mistakes in the adoc files if they have something invalid that is not convertable to html as then its maybe not so well formed adoc.
CAMEL-10651 Allow to configure component alias to use a common name for a series of components So with Camel we have a number of HTTP clients, and it would be nice if we can allow users to just use "http" as the component name, in their urls.And then we let Camel figure out which of those clients are on the classpath and uses that, eg you can tell Camel to look in this ordercamel.component.alias.http=http,http4,jetty-http,...And this should be supported in camel-sprint-boot and outside as well. Improvement Allow to configure component alias to use a common name for a series of components So with Camel we have a number of HTTP clients, and it would be nice if we can allow users to just use "http" as the component name, in their urls.And then we let Camel figure out which of those clients are on the classpath and uses that, eg you can tell Camel to look in this ordercamel.component.alias.http=http,http4,jetty-http,...And this should be supported in camel-sprint-boot and outside as well.
CAMEL-10649 Transformers - Add documentation to dsl model There are two new model types which needs class javadoc / javadoc on setters etc.[WARNING] 	Missing javadoc on models: 2[WARNING] 		typeFilter[WARNING] 		transformers Task Transformers - Add documentation to dsl model There are two new model types which needs class javadoc / javadoc on setters etc.[WARNING] 	Missing javadoc on models: 2[WARNING] 		typeFilter[WARNING] 		transformers
CAMEL-10648 camel-sjms - Batch consumer should support async start listener So people can start up routes without connections to brokers and have Camel recover and connect when the broker is online Improvement camel-sjms - Batch consumer should support async start listener So people can start up routes without connections to brokers and have Camel recover and connect when the broker is online
CAMEL-10647 camel-test-karaf - Cause wrong build order This has dependency on some artifacts from platforms which it should not do. Task camel-test-karaf - Cause wrong build order This has dependency on some artifacts from platforms which it should not do.
CAMEL-10646 support JSONPath on beans as well as Strings & InputStreams it'd be nice if we could use json path expressions on beans too; so that if some JSON gets unmarshalled via jackson we could still use jsonPath on the object.Here's a possible implementation approach (though maybe there's a more optimal approach?)http://stackoverflow.com/a/27754489/2068211Maybe this code https://github.com/apache/camel/blob/master/components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java#L114 should check if the body can't be converted to a File, String or InputStream it tries to convert the payload to something like JSonPathNavigator (a new interface we create). If it can be converted we use that interface to transform the payload.Then we could have decoupled ways to convert objects into navigable formats (e.g. Maps / Lists)?e.g. {code:java}public JacksonJsonPathNavigator implements JSonPathNavigator {  public Object convert(Object input) {    ObjectMapper mapper = new ObjectMapper();    return mapper.convertValue(input, Map.class);  }}{code}This is how we've used saxon in the past with different libraries to perform XPath navigation (e.g. c24 stuff). Another approach could just be to try convert the object to a Map and have a Jackson based converter that can convert objects with a Jackon annotation to a Map using the above code? Improvement support JSONPath on beans as well as Strings & InputStreams it'd be nice if we could use json path expressions on beans too; so that if some JSON gets unmarshalled via jackson we could still use jsonPath on the object.Here's a possible implementation approach (though maybe there's a more optimal approach?)http://stackoverflow.com/a/27754489/2068211Maybe this code https://github.com/apache/camel/blob/master/components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java#L114 should check if the body can't be converted to a File, String or InputStream it tries to convert the payload to something like JSonPathNavigator (a new interface we create). If it can be converted we use that interface to transform the payload.Then we could have decoupled ways to convert objects into navigable formats (e.g. Maps / Lists)?e.g. {code:java}public JacksonJsonPathNavigator implements JSonPathNavigator {  public Object convert(Object input) {    ObjectMapper mapper = new ObjectMapper();    return mapper.convertValue(input, Map.class);  }}{code}This is how we've used saxon in the past with different libraries to perform XPath navigation (e.g. c24 stuff). Another approach could just be to try convert the object to a Map and have a Jackson based converter that can convert objects with a Jackon annotation to a Map using the above code?
CAMEL-10643 camel-sjms - Should log connection issues out of the box We should add a JMS ExceptionListener that logs all errors out of the box like we do with Spring JMS.We can then have options to configure the logging level which is WARN by default. Improvement camel-sjms - Should log connection issues out of the box We should add a JMS ExceptionListener that logs all errors out of the box like we do with Spring JMS.We can then have options to configure the logging level which is WARN by default.
CAMEL-10636 Component options docs - Add columns with default values Because we now have metadata for all the component options we can also output their default values and labels etc like we do for endpoints. Improvement Component options docs - Add columns with default values Because we now have metadata for all the component options we can also output their default values and labels etc like we do for endpoints.
CAMEL-10633 json dataformat should set a header "Content-Type: application/json" if there's no "Content-Type" header set if you marshal to json then send to a HTTP endpoint you'll be missing the fact that the payload is now in JSON format. It seems a reasonable default to add this - so that a HTTP endpoint can know it can parse the payload as JSON.e.g.{code}from("activemq:foo.bar").  to("dataformat:json-jackson:marshal").    /// TODO camel should now expose that the content type is json  to("http://foo.bar/"){code} Improvement json dataformat should set a header "Content-Type: application/json" if there's no "Content-Type" header set if you marshal to json then send to a HTTP endpoint you'll be missing the fact that the payload is now in JSON format. It seems a reasonable default to add this - so that a HTTP endpoint can know it can parse the payload as JSON.e.g.{code}from("activemq:foo.bar").  to("dataformat:json-jackson:marshal").    /// TODO camel should now expose that the content type is json  to("http://foo.bar/"){code}
CAMEL-10629 Add labels to component level options We have fine grained details on each endpoint options. But the component options dont have @UriParam etc and are therefore often not labeled or have secure = true|false.We should add those using @Metadata annotation on the component level so we have that for the component docs and for tooling Improvement Add labels to component level options We have fine grained details on each endpoint options. But the component options dont have @UriParam etc and are therefore often not labeled or have secure = true|false.We should add those using @Metadata annotation on the component level so we have that for the component docs and for tooling
CAMEL-10626 Add asynchronous support for CXF JAX-RS producers See the asynchronous [Proxy-based API|http://cxf.apache.org/docs/jax-rs-client-api.html#JAX-RSClientAPI-Asynchronousproxyinvocations] and [WebClient API|http://cxf.apache.org/docs/jax-rs-client-api.html#JAX-RSClientAPI-Asynchronousproxyinvocations]. New Feature Add asynchronous support for CXF JAX-RS producers See the asynchronous [Proxy-based API|http://cxf.apache.org/docs/jax-rs-client-api.html#JAX-RSClientAPI-Asynchronousproxyinvocations] and [WebClient API|http://cxf.apache.org/docs/jax-rs-client-api.html#JAX-RSClientAPI-Asynchronousproxyinvocations].
CAMEL-10623 Camel CXF version not compatible with WildFly CXF cxf-3.1.9 distributed with camel-2.19.x is not compatible with cxf-3.1.6 from wildfly-10.1.0.Final{code}Caused by: java.lang.NoSuchMethodError: org.apache.cxf.message.Message.remove(Ljava/lang/Class;)Ljava/lang/Object;	at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:1239)	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:470)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:416)	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:133){code}CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1546 Task Camel CXF version not compatible with WildFly CXF cxf-3.1.9 distributed with camel-2.19.x is not compatible with cxf-3.1.6 from wildfly-10.1.0.Final{code}Caused by: java.lang.NoSuchMethodError: org.apache.cxf.message.Message.remove(Ljava/lang/Class;)Ljava/lang/Object;	at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:1239)	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:470)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:416)	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:133){code}CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1546
CAMEL-10620 AMQP documentation out of date? The documentation for Camel AMQP uses the connection factory:org.apache.qpid.jms.JmsConnectionFactoryI think the connection factory should actually be different for AMQP v1.0?:org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl Task AMQP documentation out of date? The documentation for Camel AMQP uses the connection factory:org.apache.qpid.jms.JmsConnectionFactoryI think the connection factory should actually be different for AMQP v1.0?:org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl
CAMEL-10619 Add spring boot configuration for configuring shutdown options So its easier to configure shutdown timeout, and the other values you can set Improvement Add spring boot configuration for configuring shutdown options So its easier to configure shutdown timeout, and the other values you can set
CAMEL-10617 camel-sjms - Async start consumer should defer starting endpint If you want to start asyncStartListener=true then the endpoint should not eager start the connection which would fail if the connection to a remote broker is not possible.This defeats the purpose of asyncStartListener=true which is intended to defer starting this till on-demand. Improvement camel-sjms - Async start consumer should defer starting endpint If you want to start asyncStartListener=true then the endpoint should not eager start the connection which would fail if the connection to a remote broker is not possible.This defeats the purpose of asyncStartListener=true which is intended to defer starting this till on-demand.
CAMEL-10615 camel-sjms - BatchConsumer should use exception handler instead of warn log So people can bridge the error handler etc.See nabblehttp://camel.465427.n5.nabble.com/Catching-Exception-tp5791552.htmlMind this is only possible for the exceptions that the JMS client propagates to Camel. Task camel-sjms - BatchConsumer should use exception handler instead of warn log So people can bridge the error handler etc.See nabblehttp://camel.465427.n5.nabble.com/Catching-Exception-tp5791552.htmlMind this is only possible for the exceptions that the JMS client propagates to Camel.
CAMEL-10609 Simple - Add skip method To make it easier to skip N items when splitting or something. New Feature Simple - Add skip method To make it easier to skip N items when splitting or something.
CAMEL-10607 camel-cxf - Allow to call no-arg methods more easier See SOhttp://stackoverflow.com/questions/41164377/calling-no-params-webservice-operation-from-camel-route-using-cxfWe could detect that it expect 0 parameters and then don't do any parameter mappings so the service can be easily called. Improvement camel-cxf - Allow to call no-arg methods more easier See SOhttp://stackoverflow.com/questions/41164377/calling-no-params-webservice-operation-from-camel-route-using-cxfWe could detect that it expect 0 parameters and then don't do any parameter mappings so the service can be easily called.
CAMEL-10605 add camel-tar doc as wiki We should add the camel-tarfile as wiki doc for the data formats, as we currently only have it as .adoc. https://github.com/apache/camel/blob/master/components/camel-tarfile/src/main/docs/tarfile-dataformat.adoc Task add camel-tar doc as wiki We should add the camel-tarfile as wiki doc for the data formats, as we currently only have it as .adoc. https://github.com/apache/camel/blob/master/components/camel-tarfile/src/main/docs/tarfile-dataformat.adoc
CAMEL-10601 camel-mongodb-gridfs - Use dynamic ports for tests This causes CI server to fail sometimes if the port number is already in useorg.apache.camel.component.gridfs.GridFsConsumerTest.testAttributeFailing for the past 1 build (Since Unstable#1067 )Took 37 ms.Error MessageCannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfigurationStacktracejava.lang.IllegalStateException: Cannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfigurationCaused by: java.lang.IllegalStateException: Unable to load cache itemCaused by: java.lang.ExceptionInInitializerErrorCaused by: java.lang.RuntimeException: java.io.IOException: Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:359492016-12-14T23:31:17.332+0000 E NETWORK  [initandlisten]   addr already in useCaused by: java.io.IOException: Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:359492016-12-14T23:31:17.332+0000 E NETWORK  [initandlisten]   addr already in use Test camel-mongodb-gridfs - Use dynamic ports for tests This causes CI server to fail sometimes if the port number is already in useorg.apache.camel.component.gridfs.GridFsConsumerTest.testAttributeFailing for the past 1 build (Since Unstable#1067 )Took 37 ms.Error MessageCannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfigurationStacktracejava.lang.IllegalStateException: Cannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfigurationCaused by: java.lang.IllegalStateException: Unable to load cache itemCaused by: java.lang.ExceptionInInitializerErrorCaused by: java.lang.RuntimeException: java.io.IOException: Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:359492016-12-14T23:31:17.332+0000 E NETWORK  [initandlisten]   addr already in useCaused by: java.io.IOException: Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:359492016-12-14T23:31:17.332+0000 E NETWORK  [initandlisten]   addr already in use
CAMEL-10599 Add watcher to camel:run to reload on routes xml changes Some developers would like to keep a JVM running with Camel and then be able to edit a xml file with <camelContext> or <routes> and then have a file watcher automatic detect the file change and reload the routes.We can have some kind of functionality of that in camel-core for 3rd party to hook into. And then add it to mvn camel:run for some apps where you can quickly bootup a Camel JVM and then scan for file changes with reload.Mind that this will only work for Camel routes as its not for spring <bean> or OSGi <blueprint> etc as they have their own deployment model. But with the 3rd party hooks, then this may be a way of triggering mvn camel:run to trigger a osgi blueprint reload also when it runs in pojosr mode. Or a spring boot live reload etc. New Feature Add watcher to camel:run to reload on routes xml changes Some developers would like to keep a JVM running with Camel and then be able to edit a xml file with <camelContext> or <routes> and then have a file watcher automatic detect the file change and reload the routes.We can have some kind of functionality of that in camel-core for 3rd party to hook into. And then add it to mvn camel:run for some apps where you can quickly bootup a Camel JVM and then scan for file changes with reload.Mind that this will only work for Camel routes as its not for spring <bean> or OSGi <blueprint> etc as they have their own deployment model. But with the 3rd party hooks, then this may be a way of triggering mvn camel:run to trigger a osgi blueprint reload also when it runs in pojosr mode. Or a spring boot live reload etc.
CAMEL-10596 RoutePolicy - To easily stop routes after X messages or time Sometimes people want to run a Camel route for 1 message, or until there are no more new messages, or stop after X seconds etc.We should provide some basic route policy / factory that people can use, and easily configure. And we can then add the logic to safely stop the routes while running, which can be a little trickyhttp://camel.apache.org/how-can-i-stop-a-route-from-a-route.html New Feature RoutePolicy - To easily stop routes after X messages or time Sometimes people want to run a Camel route for 1 message, or until there are no more new messages, or stop after X seconds etc.We should provide some basic route policy / factory that people can use, and easily configure. And we can then add the logic to safely stop the routes while running, which can be a little trickyhttp://camel.apache.org/how-can-i-stop-a-route-from-a-route.html
CAMEL-10592 Improve naming and description for sip components sip and sips components have the same Title and same description which can make it hard to differentiate in toolingsWhat is also strange is that they have the exact same parameters Improvement Improve naming and description for sip components sip and sips components have the same Title and same description which can make it hard to differentiate in toolingsWhat is also strange is that they have the exact same parameters
CAMEL-10586 make the kafka endpoint a little easier to use when using, say, JMS or activemq endpoints you can send text to a destination and it all kinda works OOTB. However it seems pretty hard to actually send anyhting to the kafka endpoint. I wonder if we could do a bit more to make it easier to use as a camel endpoint?e.g. if I invoke a HTTP endpoint then pipe the result to Kafka I get:{code}org.apache.kafka.common.errors.SerializationException: Can't convert value of class org.apache.camel.converter.stream.CachedOutputStream$WrappedInputStream to class org.apache.kafka.common.serialization.StringSerializer specified in value.serializer{code}seems like it'd be nice if there's no configured serializer to assume its bytes / string?If I send to the dataformat endpoint first to force conversion to a String:{code}to("dataformat:string:unmarshal").to("kafka://kafka:9092?topic=cheese&groupId=group1"){code}then I get: {code}17:34:10.212 [Camel (Funktion) thread #0 - timer://foo] WARN  o.a.c.component.kafka.KafkaProducer - No message key or partition key set{code}and there's no easy way to pass in a message key or partition key via the URI parameters from what I can see. I wonder if we should support a URI parameter for setting the partition key + message key? Improvement make the kafka endpoint a little easier to use when using, say, JMS or activemq endpoints you can send text to a destination and it all kinda works OOTB. However it seems pretty hard to actually send anyhting to the kafka endpoint. I wonder if we could do a bit more to make it easier to use as a camel endpoint?e.g. if I invoke a HTTP endpoint then pipe the result to Kafka I get:{code}org.apache.kafka.common.errors.SerializationException: Can't convert value of class org.apache.camel.converter.stream.CachedOutputStream$WrappedInputStream to class org.apache.kafka.common.serialization.StringSerializer specified in value.serializer{code}seems like it'd be nice if there's no configured serializer to assume its bytes / string?If I send to the dataformat endpoint first to force conversion to a String:{code}to("dataformat:string:unmarshal").to("kafka://kafka:9092?topic=cheese&groupId=group1"){code}then I get: {code}17:34:10.212 [Camel (Funktion) thread #0 - timer://foo] WARN  o.a.c.component.kafka.KafkaProducer - No message key or partition key set{code}and there's no easy way to pass in a message key or partition key via the URI parameters from what I can see. I wonder if we should support a URI parameter for setting the partition key + message key?
CAMEL-10585 the URL format should include the topic name like the ActiiveMQ & AMQP endpoints it would be nice to be able to use a URL more like ActiveMQ when working with kafka. e.g.{code}kafka:serverName:port/topicName{code}also missing off the port if its not the default port (9092) would be nice too{code}kafka:serverName/topicName{code} Improvement the URL format should include the topic name like the ActiiveMQ & AMQP endpoints it would be nice to be able to use a URL more like ActiveMQ when working with kafka. e.g.{code}kafka:serverName:port/topicName{code}also missing off the port if its not the default port (9092) would be nice too{code}kafka:serverName/topicName{code}
CAMEL-10583 Typo in Camel JSON Documentation Currently the http://camel.apache.org/json.html  states:Finally use the Camel JacksonDataFormat to marshall the above POJO to JSON.from("direct:inPojoAgeView").marshal().json(TestPojoView.class, Views.Age.class);Note that the weight field is missing in the resulting JSON:{"age":30, "weight":70}The result is incorrect.  Should read:{"age":30, "height":190}This matches the JacksonMarshalViewTest unit test.   Task Typo in Camel JSON Documentation Currently the http://camel.apache.org/json.html  states:Finally use the Camel JacksonDataFormat to marshall the above POJO to JSON.from("direct:inPojoAgeView").marshal().json(TestPojoView.class, Views.Age.class);Note that the weight field is missing in the resulting JSON:{"age":30, "weight":70}The result is incorrect.  Should read:{"age":30, "height":190}This matches the JacksonMarshalViewTest unit test.  
CAMEL-10572 RefLanguage should support Predicates for Choice The documentation for the CBR (http://camel.apache.org/content-based-router.html) states {quote}The following example shows how to route ... depending on the evaluation of various Predicate expressions{quote}If you now look at the predicate section (http://camel.apache.org/predicate.html) it says:{quote}Camel supports extensible Predicates using multiple Languages; the following languages are supported out of the box...Ref Language...{quote}But going to the Ref page (http://camel.apache.org/ref-language.html) it states{quote}The Ref Expression Language is really just a way to lookup a custom Expression from the Registry. {quote}So Ref Language does NOT support Predicates, it works in most cases since nearly all classes in Camel core implement Expresion and Predicate interface and there is a lot of converting between those, but if you have a custom expression that only implements predicate, you get in fact an (a bit misleading) exception:{quote}java.lang.IllegalArgumentException: Cannot find expression in registry with ref: predicate	at org.apache.camel.language.ref.RefLanguage$1.evaluate(RefLanguage.java:50)	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:35)	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:192)	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76){quote}It takes me some time to find out that Camel is in fact finding my bean but can't use it, beside that its hard to work out why a predicate must also implement expression (Choice it self requires an Predicate in fact, so it converts all expresions to Predicates).So the following improvements would be nice# Let RefLanguage send out some kind of TypeConverterException if it can't use the bean as the desired type# Let Ref, if it finds that the referenced bean is a predicate, convert this to an expression e.g with PredicateToExpressionAdapter Improvement RefLanguage should support Predicates for Choice The documentation for the CBR (http://camel.apache.org/content-based-router.html) states {quote}The following example shows how to route ... depending on the evaluation of various Predicate expressions{quote}If you now look at the predicate section (http://camel.apache.org/predicate.html) it says:{quote}Camel supports extensible Predicates using multiple Languages; the following languages are supported out of the box...Ref Language...{quote}But going to the Ref page (http://camel.apache.org/ref-language.html) it states{quote}The Ref Expression Language is really just a way to lookup a custom Expression from the Registry. {quote}So Ref Language does NOT support Predicates, it works in most cases since nearly all classes in Camel core implement Expresion and Predicate interface and there is a lot of converting between those, but if you have a custom expression that only implements predicate, you get in fact an (a bit misleading) exception:{quote}java.lang.IllegalArgumentException: Cannot find expression in registry with ref: predicate	at org.apache.camel.language.ref.RefLanguage$1.evaluate(RefLanguage.java:50)	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)	at org.apache.camel.support.ExpressionSupport.matches(ExpressionSupport.java:32)	at org.apache.camel.util.ExpressionToPredicateAdapter.matches(ExpressionToPredicateAdapter.java:35)	at org.apache.camel.processor.FilterProcessor.matches(FilterProcessor.java:65)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:93)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:192)	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76){quote}It takes me some time to find out that Camel is in fact finding my bean but can't use it, beside that its hard to work out why a predicate must also implement expression (Choice it self requires an Predicate in fact, so it converts all expresions to Predicates).So the following improvements would be nice# Let RefLanguage send out some kind of TypeConverterException if it can't use the bean as the desired type# Let Ref, if it finds that the referenced bean is a predicate, convert this to an expression e.g with PredicateToExpressionAdapter
CAMEL-10566 Remove camel-spring-javaconfig from karaf Its not supported on osgi/karaf. Task Remove camel-spring-javaconfig from karaf Its not supported on osgi/karaf.
CAMEL-10561 camel-catalog - Add REST JAX-RS application To make it easy for users to expose the CamelCatalog as a REST service from a JAX-RS resource class. New Feature camel-catalog - Add REST JAX-RS application To make it easy for users to expose the CamelCatalog as a REST service from a JAX-RS resource class.
CAMEL-10559 tooling - route parser for java and xml to parse source code Seehttps://github.com/fabric8io/fabric8/issues/6617 New Feature tooling - route parser for java and xml to parse source code Seehttps://github.com/fabric8io/fabric8/issues/6617
CAMEL-10558 camel-core - XmlConverter cannot load fallback TransformerFactory in OSGi Related to CAMEL-10555If OSGi cannot load xalan transformer etc, then we should fallback to the JDK default. However OSGi makes the regular loader not able to fallback itself, and we need to help it. Improvement camel-core - XmlConverter cannot load fallback TransformerFactory in OSGi Related to CAMEL-10555If OSGi cannot load xalan transformer etc, then we should fallback to the JDK default. However OSGi makes the regular loader not able to fallback itself, and we need to help it.
CAMEL-10553 Invalid links on camel.apache.org/components.html page When navigating to [http://camel.apache.org/components.html|http://camel.apache.org/components.html] and trying to click the links in the description column of "CXF / camel-cxf" and "CXFRS / camel-cxf" components I'm being taken to http://apache.org/cxf/ (which is not found).Maybe the path should actually be http://cxf.apache.org/ (not sure about this though)?I don't have access to edit the page so I raised this ticket. Task Invalid links on camel.apache.org/components.html page When navigating to [http://camel.apache.org/components.html|http://camel.apache.org/components.html] and trying to click the links in the description column of "CXF / camel-cxf" and "CXFRS / camel-cxf" components I'm being taken to http://apache.org/cxf/ (which is not found).Maybe the path should actually be http://cxf.apache.org/ (not sure about this though)?I don't have access to edit the page so I raised this ticket.
CAMEL-10546 CamelContext - Rename getProperties to getConfiguration People may mistake this with property placeholders. However its used for generic key/value pairs for configuring some global options on CamelContext such as max debug log length etc.An alternative is to change this configuration to be a type safe configuration which then adds fluent DSL support in Java and also in XML.But for 2.x we could add methods called getConfiguration() / setConfiguration() and deprecate the older methods so people get more aware of this. Improvement CamelContext - Rename getProperties to getConfiguration People may mistake this with property placeholders. However its used for generic key/value pairs for configuring some global options on CamelContext such as max debug log length etc.An alternative is to change this configuration to be a type safe configuration which then adds fluent DSL support in Java and also in XML.But for 2.x we could add methods called getConfiguration() / setConfiguration() and deprecate the older methods so people get more aware of this.
CAMEL-10533 AggregateController - Add forceDiscardOfGroup method To allow to force discarding a group using the controllerhttp://static.javadoc.io/org.apache.camel/camel-core/2.18.0/org/apache/camel/processor/aggregate/AggregateController.html Improvement AggregateController - Add forceDiscardOfGroup method To allow to force discarding a group using the controllerhttp://static.javadoc.io/org.apache.camel/camel-core/2.18.0/org/apache/camel/processor/aggregate/AggregateController.html
CAMEL-10527 camel-mail - Option skipFailedMessage should catch all exceptions See SOhttp://stackoverflow.com/questions/40805154/camel-mail-imap-not-skipping-failed-messagesWe only catch MailException but there can be others kinds as well. Improvement camel-mail - Option skipFailedMessage should catch all exceptions See SOhttp://stackoverflow.com/questions/40805154/camel-mail-imap-not-skipping-failed-messagesWe only catch MailException but there can be others kinds as well.
CAMEL-10523 Make Test launchable as JUnit Test from IDEs  Currently several tests are failing when launching them from Eclipse IDE, I spotted 2 categories for now:- several MBean tests- test trying to access some *.html generated filefor instance  for instance with org.apache.camel.component.dataset.DataSetComponentConfigurationAndDocumentationTest.testComponentDocumentation() it is searching fororg/apache/camel/component/dataset/dataset.htmlGain:- enter the 21st century- faster development- open ways to leverage usage of Code coverage tools, easier debugging and real-time test execution Test Make Test launchable as JUnit Test from IDEs  Currently several tests are failing when launching them from Eclipse IDE, I spotted 2 categories for now:- several MBean tests- test trying to access some *.html generated filefor instance  for instance with org.apache.camel.component.dataset.DataSetComponentConfigurationAndDocumentationTest.testComponentDocumentation() it is searching fororg/apache/camel/component/dataset/dataset.htmlGain:- enter the 21st century- faster development- open ways to leverage usage of Code coverage tools, easier debugging and real-time test execution
CAMEL-10501 Allow Salesforce Maven plugin to run without Maven project Add _requiresProject = false_ to _@Mojo_ annotation that allows the camel-salesforce-maven-plugin to work in without Maven project (directory without pom.xml). Improvement Allow Salesforce Maven plugin to run without Maven project Add _requiresProject = false_ to _@Mojo_ annotation that allows the camel-salesforce-maven-plugin to work in without Maven project (directory without pom.xml).
CAMEL-10483 RabbitMQ Component should allow header bindings Current RabbitMQ component allows to create bindings using only routing keys. It would be good to provide a way to also create bindings for headers exchange. Some info about it: http://stackoverflow.com/questions/19240290/how-do-i-implement-headers-exchange-in-rabbitmq-using-java/19534597 Improvement RabbitMQ Component should allow header bindings Current RabbitMQ component allows to create bindings using only routing keys. It would be good to provide a way to also create bindings for headers exchange. Some info about it: http://stackoverflow.com/questions/19240290/how-do-i-implement-headers-exchange-in-rabbitmq-using-java/19534597
CAMEL-10474 Aggregator - Allow aggregate/preAggregate to force complete group We should add support for end users to specify a special header in the returned message that will force the group to be complete, such asExchange.AGGREGATE_FORCE_COMPLETE, trueThis can help the use case as described herehttp://stackoverflow.com/questions/40546189/aggregate-only-consecutive-exchanges-with-same-correlation-key Improvement Aggregator - Allow aggregate/preAggregate to force complete group We should add support for end users to specify a special header in the returned message that will force the group to be complete, such asExchange.AGGREGATE_FORCE_COMPLETE, trueThis can help the use case as described herehttp://stackoverflow.com/questions/40546189/aggregate-only-consecutive-exchanges-with-same-correlation-key
CAMEL-10473 Failover Loadbalancer - Error handler should kick in after exhausted when inheritErrorHandler is false So you can do an failover LB and if that fails then let the general error handler to kick in, to eg move to a DLQ or something.Just mind if you configure general error handler to do redelivery then you get double up, as it would retry the failover LB again. Improvement Failover Loadbalancer - Error handler should kick in after exhausted when inheritErrorHandler is false So you can do an failover LB and if that fails then let the general error handler to kick in, to eg move to a DLQ or something.Just mind if you configure general error handler to do redelivery then you get double up, as it would retry the failover LB again.
CAMEL-10471 Update Salesforce component to support limits REST API Part of CAMEL-8396 to add support for the [Organization Limits Salesforce API|https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm].Add operation `limit` that can be used like:{code:java}...to("salesforce:limit")    .choice()      .when(         simple("${body.dailyApiRequests.remaining} > 0")      )...    .endChoice();{code} New Feature Update Salesforce component to support limits REST API Part of CAMEL-8396 to add support for the [Organization Limits Salesforce API|https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm].Add operation `limit` that can be used like:{code:java}...to("salesforce:limit")    .choice()      .when(         simple("${body.dailyApiRequests.remaining} > 0")      )...    .endChoice();{code}
CAMEL-10470 camel-mail - Should allow to configure SimpleSearchTerm as plain POJO We can configure SimpleSearchTerm using searchTerm.xxx style, but you should also be able to do it like searchTerm=#mySimpleSerchBean which is shown as an example in the docs. Improvement camel-mail - Should allow to configure SimpleSearchTerm as plain POJO We can configure SimpleSearchTerm using searchTerm.xxx style, but you should also be able to do it like searchTerm=#mySimpleSerchBean which is shown as an example in the docs.
CAMEL-10463 Update Camel Salesforce integration tests Tests in SalesforceComponentConfigurationTest were not updated to thelatest functionality provided by theSalesforceComponent::completeEndpointPath.Also renamed SalesforceComponentConfigurationTest toSalesforceComponentConfigurationIntegrationTest, the test requiresSalesforce access to run. Renamed the `salesforce-test` profile to`integration` and enforced existence of`test-salesforce-login.properties` file in the root of`camel-salesforce-parent` project -- it is needed for the integrationtests and contains the credentials required for accessing Salesforceaccount used.Details in README.md. Improvement Update Camel Salesforce integration tests Tests in SalesforceComponentConfigurationTest were not updated to thelatest functionality provided by theSalesforceComponent::completeEndpointPath.Also renamed SalesforceComponentConfigurationTest toSalesforceComponentConfigurationIntegrationTest, the test requiresSalesforce access to run. Renamed the `salesforce-test` profile to`integration` and enforced existence of`test-salesforce-login.properties` file in the root of`camel-salesforce-parent` project -- it is needed for the integrationtests and contains the credentials required for accessing Salesforceaccount used.Details in README.md.
CAMEL-10458 Upgrade to Spring Boot 1.4.2 A new version is outhttps://spring.io/blog/2016/11/08/spring-boot-1-4-2-available-now Task Upgrade to Spring Boot 1.4.2 A new version is outhttps://spring.io/blog/2016/11/08/spring-boot-1-4-2-available-now
CAMEL-10457 Cannot generate javadoc for camel-jms-starter [INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 01:10 h[INFO] Finished at: 2016-11-08T18:29:26+00:00[INFO] Final Memory: 1469M/2777M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:2.10.3:jar (attach-javadocs) on project camel-jms-starter: MavenReportException: Error while generating Javadoc:[ERROR] Exit code: 1 - /home/jenkins/jenkins-slave/workspace/Camel.2.18.x.notest/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java:1479: error: unmappable character for encoding UTF-8[ERROR] * a route on the other queue will send it?s response directly back to[ERROR] ^[ERROR] [ERROR] Command line was: /usr/local/asfpackages/java/jdk1.8.0_102/jre/../bin/javadoc @options @packages[ERROR] [ERROR] Refer to the generated Javadoc files in '/home/jenkins/jenkins-slave/workspace/Camel.2.18.x.notest/components-starter/camel-jms-starter/target/apidocs' dir.[ERROR] -> [Help 1][ERROR] From CI build #3https://builds.apache.org/job/Camel.2.18.x.notest/3/console Task Cannot generate javadoc for camel-jms-starter [INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 01:10 h[INFO] Finished at: 2016-11-08T18:29:26+00:00[INFO] Final Memory: 1469M/2777M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:2.10.3:jar (attach-javadocs) on project camel-jms-starter: MavenReportException: Error while generating Javadoc:[ERROR] Exit code: 1 - /home/jenkins/jenkins-slave/workspace/Camel.2.18.x.notest/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java:1479: error: unmappable character for encoding UTF-8[ERROR] * a route on the other queue will send it?s response directly back to[ERROR] ^[ERROR] [ERROR] Command line was: /usr/local/asfpackages/java/jdk1.8.0_102/jre/../bin/javadoc @options @packages[ERROR] [ERROR] Refer to the generated Javadoc files in '/home/jenkins/jenkins-slave/workspace/Camel.2.18.x.notest/components-starter/camel-jms-starter/target/apidocs' dir.[ERROR] -> [Help 1][ERROR] From CI build #3https://builds.apache.org/job/Camel.2.18.x.notest/3/console
CAMEL-10456 Camel leaks TCCL Camel leaks ThreadContextClassLoader instances at least in the following place:camel-core: https://github.com/apache/camel/blob/4f9448d83cc21a348f92cca961907b0f72d9db79/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java#L1913As mentioned in the JavaDoc of Thread.getContextClassLoader() returning "null indicating the system class loader (or, failing that, the bootstrap class loader)", se same applies to Thread.setContextClassLoader(...)The code only reset the TCCL if the returned value from Thread.currentThread().getContextClassLoader() was != null. So if in a thread without a TCCL set (and thus returning null) these methods set a new CCL but later do not reset these to the original null value.This leads to Threads (e.g. when taking reused from a pool) having a classloader that will never gets reset and thus can't be garbage collected or even lead to strange behaviour because if other code that uses the TCCL-mechanism can try to load classes or resources from this loader later on.I found that https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java#L85 uses a similar pattern, only resetting the TCCL if the *new* TCCL != null so maybe the code in ObjectHelper was meant to check for classloader != null instead of tccl !=nullThe fix should also include making sure this pattern is not used in other camel-components or even to use the ObjectHelper Method consistently, currently it seems may components implement their owh TCCL-handling. Improvement Camel leaks TCCL Camel leaks ThreadContextClassLoader instances at least in the following place:camel-core: https://github.com/apache/camel/blob/4f9448d83cc21a348f92cca961907b0f72d9db79/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java#L1913As mentioned in the JavaDoc of Thread.getContextClassLoader() returning "null indicating the system class loader (or, failing that, the bootstrap class loader)", se same applies to Thread.setContextClassLoader(...)The code only reset the TCCL if the returned value from Thread.currentThread().getContextClassLoader() was != null. So if in a thread without a TCCL set (and thus returning null) these methods set a new CCL but later do not reset these to the original null value.This leads to Threads (e.g. when taking reused from a pool) having a classloader that will never gets reset and thus can't be garbage collected or even lead to strange behaviour because if other code that uses the TCCL-mechanism can try to load classes or resources from this loader later on.I found that https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java#L85 uses a similar pattern, only resetting the TCCL if the *new* TCCL != null so maybe the code in ObjectHelper was meant to check for classloader != null instead of tccl !=nullThe fix should also include making sure this pattern is not used in other camel-components or even to use the ObjectHelper Method consistently, currently it seems may components implement their owh TCCL-handling.
CAMEL-10450 bean/class component should be able to call groovy function directly A groovy function is a closure and Camel calls it that causes it to return its toString representation instead of the call. Improvement bean/class component should be able to call groovy function directly A groovy function is a closure and Camel calls it that causes it to return its toString representation instead of the call.
CAMEL-10448 File read lock - idempotent and change/rename should be possible Camel readlock strategy in cluster==================================Hi Claus,We are trying to move to cluster with Apache Camel. So far we had it on one node and worked well.One node: I have readlock strategy set to 'changed' which keeps track of file changes with camelLock file and only when the file has finished downloading, it will be picked up for processing. But camel readlock strategy 'changed' is discouraged in clustering. According to the camel documentation 'idempotent' is recommended. This is what happens when I am testing with 5GB file.Two nodes: I have readlock strategy set to 'idempotent' which distributes files to one of the nodes but camel starts processing the file even before the file has finished downloading.Is there a way to stop camel from processing even before file has downloaded when readlock strategy is idempotent?Thanks. -------------------We should allow to use idempontent-changed and idempontent-rename as options as well so its a combination of the two of them.Then it should acquire idempotent first, and then try changed or rename afterwards. Improvement File read lock - idempotent and change/rename should be possible Camel readlock strategy in cluster==================================Hi Claus,We are trying to move to cluster with Apache Camel. So far we had it on one node and worked well.One node: I have readlock strategy set to 'changed' which keeps track of file changes with camelLock file and only when the file has finished downloading, it will be picked up for processing. But camel readlock strategy 'changed' is discouraged in clustering. According to the camel documentation 'idempotent' is recommended. This is what happens when I am testing with 5GB file.Two nodes: I have readlock strategy set to 'idempotent' which distributes files to one of the nodes but camel starts processing the file even before the file has finished downloading.Is there a way to stop camel from processing even before file has downloaded when readlock strategy is idempotent?Thanks. -------------------We should allow to use idempontent-changed and idempontent-rename as options as well so its a combination of the two of them.Then it should acquire idempotent first, and then try changed or rename afterwards.
CAMEL-10446 Need to consolidate header mapping logic between Camel and CXF messages In the current codebase of {{camel-cxf}} and {{camel-cxf-transport}}, the header mapping logic between CXF and Camel messages is scattered around {{DefaultCxfRsBinding}}, {{CxfHeaderHelper}}, and other classes. It should be consolidated into a single place, e.g. {{CxfHeaderHelper}}, as much as possible.I'd like to call it a "bug" because due to this lack of unified header mappings I observe some CXF-specific headers accidentally flow into the Camel world and vice versa. Improvement Need to consolidate header mapping logic between Camel and CXF messages In the current codebase of {{camel-cxf}} and {{camel-cxf-transport}}, the header mapping logic between CXF and Camel messages is scattered around {{DefaultCxfRsBinding}}, {{CxfHeaderHelper}}, and other classes. It should be consolidated into a single place, e.g. {{CxfHeaderHelper}}, as much as possible.I'd like to call it a "bug" because due to this lack of unified header mappings I observe some CXF-specific headers accidentally flow into the Camel world and vice versa.
CAMEL-10434 Camel catalog - Filter karaf / spring boot components When using karaf or spring boot then the number of components you can use is not all of them. We should allow the catalog to filter out components. Either we have a getXXXSpringBoot getXXXKaraf methods, or we could instead allow to plugin a runtime provider, so we can then have a karaf and spring boot provider, that then filters accordingly. Then we can have 3rd party provides such as wildfly-swarm etc plugin their filter.For karaf we can then parse the features.xml file and find out which camel components it support.For spring boot we can look in the components-starter directory. Improvement Camel catalog - Filter karaf / spring boot components When using karaf or spring boot then the number of components you can use is not all of them. We should allow the catalog to filter out components. Either we have a getXXXSpringBoot getXXXKaraf methods, or we could instead allow to plugin a runtime provider, so we can then have a karaf and spring boot provider, that then filters accordingly. Then we can have 3rd party provides such as wildfly-swarm etc plugin their filter.For karaf we can then parse the features.xml file and find out which camel components it support.For spring boot we can look in the components-starter directory.
CAMEL-10432 concurrentlinkedhashmap used by LRU cache consumes 100MB memory on 1024 core Solaris T5 Cloned from: AMQ-6492On a Solaris T5 with 1024 cores, the amount of memory used by LRUCache which in turn is using ConcurrentLinkedHashMap from https://github.com/ben-manes/concurrentlinkedhashmapconsumes about 20MB of memory.  In my install this correlates to over 300MB of memory.concurrentlinkedhashmap allocates memory based on CPU count, with no upper limit, so each instance of LRUCache in memory consumes more memory than is really needed.See AMQ-6492 for screenshots (didn't want to copy/paste them here) Improvement concurrentlinkedhashmap used by LRU cache consumes 100MB memory on 1024 core Solaris T5 Cloned from: AMQ-6492On a Solaris T5 with 1024 cores, the amount of memory used by LRUCache which in turn is using ConcurrentLinkedHashMap from https://github.com/ben-manes/concurrentlinkedhashmapconsumes about 20MB of memory.  In my install this correlates to over 300MB of memory.concurrentlinkedhashmap allocates memory based on CPU count, with no upper limit, so each instance of LRUCache in memory consumes more memory than is really needed.See AMQ-6492 for screenshots (didn't want to copy/paste them here)
CAMEL-10424 Bean should act like transform/setBody when setting result See SOhttp://stackoverflow.com/questions/40293128/camel-rest-service-throws-exception-when-returning-null/40317432#40317432When you use http components that set the message as HttpMessage and then call bean that returns null then we should do like transform/setBody does to set the message as a default message. Improvement Bean should act like transform/setBody when setting result See SOhttp://stackoverflow.com/questions/40293128/camel-rest-service-throws-exception-when-returning-null/40317432#40317432When you use http components that set the message as HttpMessage and then call bean that returns null then we should do like transform/setBody does to set the message as a default message.
CAMEL-10422 Broken image in Kura doc page https://camel.apache.org/kura.htmlthe dead link points to https://camel.apache.org/kura.data/fabric_docker%20%282%29.png Task Broken image in Kura doc page https://camel.apache.org/kura.htmlthe dead link points to https://camel.apache.org/kura.data/fabric_docker%20%282%29.png
CAMEL-10421 camel-spring-boot - CamelAutoConfiguration should allow to exclude non-singletons As it already has been fixed for camel-spring in CAMEL-8926, please, add an option to skip prototype scoped beans.see:https://github.com/apache/camel/blob/52a739feb9da8acd29067304c7c8356bbc5ef4dd/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L78 Improvement camel-spring-boot - CamelAutoConfiguration should allow to exclude non-singletons As it already has been fixed for camel-spring in CAMEL-8926, please, add an option to skip prototype scoped beans.see:https://github.com/apache/camel/blob/52a739feb9da8acd29067304c7c8356bbc5ef4dd/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L78
CAMEL-10412 Unable to exclude CamelAutoConfiguration in Spring Boot Prior to 2.18.0, you could exclude CamelAutoConfiguration in unit tests and no camel context would start up. This is useful for testing things in isolation that does not need camel and is a standard thing to do in Spring Boot since by default it auto configures everything it can find.Now with 2.18.0, there has been a lot more auto configuration classes added and required to be excluded. Virtually every *AutoConfiguration class found in camel-core-starter needs to be excluded. This is not practical to do.I have edited one file DirectComponentAutoConfiguration and added this line  @ConditionalOnBean(CamelAutoConfiguration.class)and with my unit test, I can see it no longer tries to pull in that component.{noformat}@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTestpublic class PlainTest {	@Configuration	@EnableAutoConfiguration(exclude = { CamelAutoConfiguration.class			// , DirectComponentAutoConfiguration.class, DirectVmComponentAutoConfiguration.class,			// LogComponentAutoConfiguration.class, PropertiesComponentAutoConfiguration.class, RestComponentAutoConfiguration.class,			// SchedulerComponentAutoConfiguration.class, SedaComponentAutoConfiguration.class, StubComponentAutoConfiguration.class,			// ValidatorComponentAutoConfiguration.class, VmComponentAutoConfiguration.class, XsltComponentAutoConfiguration.class,			// GzipDataFormatAutoConfiguration.class, SerializationDataFormatAutoConfiguration.class, StringDataFormatAutoConfiguration.class,			// ZipDataFormatAutoConfiguration.class, BeanLanguageAutoConfiguration.class, ConstantLanguageAutoConfiguration.class,			// HeaderLanguageAutoConfiguration.class			//	})	public static class Config {	}	@Test	public void test() {		// do something	}}{noformat}Unfortunately I cannot put this into git and commit since I see at the top of the DirectComponentAutoConfiguration file {noformat}Generated by camel-package-maven-plugin - do not edit this file!{noformat}I'm not sure what to edit to get this to auto generate correctly with the changes required so I'll leave it to you guys.Don't forget to update the camel-core-starter/pom.xml file and add the camel-spring-boot dependency in. Improvement Unable to exclude CamelAutoConfiguration in Spring Boot Prior to 2.18.0, you could exclude CamelAutoConfiguration in unit tests and no camel context would start up. This is useful for testing things in isolation that does not need camel and is a standard thing to do in Spring Boot since by default it auto configures everything it can find.Now with 2.18.0, there has been a lot more auto configuration classes added and required to be excluded. Virtually every *AutoConfiguration class found in camel-core-starter needs to be excluded. This is not practical to do.I have edited one file DirectComponentAutoConfiguration and added this line  @ConditionalOnBean(CamelAutoConfiguration.class)and with my unit test, I can see it no longer tries to pull in that component.{noformat}@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTestpublic class PlainTest {	@Configuration	@EnableAutoConfiguration(exclude = { CamelAutoConfiguration.class			// , DirectComponentAutoConfiguration.class, DirectVmComponentAutoConfiguration.class,			// LogComponentAutoConfiguration.class, PropertiesComponentAutoConfiguration.class, RestComponentAutoConfiguration.class,			// SchedulerComponentAutoConfiguration.class, SedaComponentAutoConfiguration.class, StubComponentAutoConfiguration.class,			// ValidatorComponentAutoConfiguration.class, VmComponentAutoConfiguration.class, XsltComponentAutoConfiguration.class,			// GzipDataFormatAutoConfiguration.class, SerializationDataFormatAutoConfiguration.class, StringDataFormatAutoConfiguration.class,			// ZipDataFormatAutoConfiguration.class, BeanLanguageAutoConfiguration.class, ConstantLanguageAutoConfiguration.class,			// HeaderLanguageAutoConfiguration.class			//	})	public static class Config {	}	@Test	public void test() {		// do something	}}{noformat}Unfortunately I cannot put this into git and commit since I see at the top of the DirectComponentAutoConfiguration file {noformat}Generated by camel-package-maven-plugin - do not edit this file!{noformat}I'm not sure what to edit to get this to auto generate correctly with the changes required so I'll leave it to you guys.Don't forget to update the camel-core-starter/pom.xml file and add the camel-spring-boot dependency in.
CAMEL-10401 ftp: Allow files to be chmod-ed after being produced Currently, chmod-ing files after storing is only implemented for the sftp producer (see CAMEL-4346).This should also supported for ftp.Most FTP servers therefore support the site command "CHMOD", eg."chmod 777 example_file.txt". New Feature ftp: Allow files to be chmod-ed after being produced Currently, chmod-ing files after storing is only implemented for the sftp producer (see CAMEL-4346).This should also supported for ftp.Most FTP servers therefore support the site command "CHMOD", eg."chmod 777 example_file.txt".
CAMEL-10395 DefaultComponent - Suppress old WARN log that no longer apply See SOhttp://stackoverflow.com/questions/40094811/camel-password-being-partially-logged-after-sanitizationThis old code is no longer needed as it was when we were migrating some stuff many years ago. Improvement DefaultComponent - Suppress old WARN log that no longer apply See SOhttp://stackoverflow.com/questions/40094811/camel-password-being-partially-logged-after-sanitizationThis old code is no longer needed as it was when we were migrating some stuff many years ago.
CAMEL-10387 JMS correlationIdAsBytes should return null and not byte array with zero values When a JMS broker send a null JMSCorrelationId and a byte array full of zero for JMSCorrelationIdAsBytes it creates issues with the hawtio webconsole as this byte array is dump in an XML that no one can parse.Therefore I think it could be usefull to return null when we receive a bytearray full of 0. Improvement JMS correlationIdAsBytes should return null and not byte array with zero values When a JMS broker send a null JMSCorrelationId and a byte array full of zero for JMSCorrelationIdAsBytes it creates issues with the hawtio webconsole as this byte array is dump in an XML that no one can parse.Therefore I think it could be usefull to return null when we receive a bytearray full of 0.
CAMEL-10377 Remove c3p0 dependency from quartz2 Is there a reason why quartz2 requires a JDBC connection pool?I was looking for usages of c3p0 and it seems that there are none:https://github.com/apache/camel/search?utf8=%E2%9C%93&q=c3p0I therefore suggest removing it. Improvement Remove c3p0 dependency from quartz2 Is there a reason why quartz2 requires a JDBC connection pool?I was looking for usages of c3p0 and it seems that there are none:https://github.com/apache/camel/search?utf8=%E2%9C%93&q=c3p0I therefore suggest removing it.
CAMEL-10369 update camel-amqp to use qpid-jms-client-0.11.1 The 0.11.1 release of Qpid JMS client is now out. It adds OSGi metadata thanks to a PR from https://github.com/ctron.I'm not familiar with karaf at all but I see use of the 'qpid-jms-client-version' and 'qpid-proton-j-version' properties from parent/pom.xml in platforms/karaf/features/src/main/resources/features.xml:{noformat}    <bundle dependency='true'>wrap:mvn:org.apache.qpid/qpid-jms-client/${qpid-jms-client-version}</bundle>    <bundle dependency='true'>wrap:mvn:org.apache.qpid/proton-j/${qpid-proton-j-version}</bundle>{noformat}If I understand correctly that is 'wrapping' them with OSGi details due to them not previously having any themselves, in which case wrapping may no longer be required given qpid-jms-0.11.1 and proton-j 0.13.0 adding OSGi metadata.In the same bit, I see the following netty bits listed:{noformat}    <bundle dependency='true'>mvn:io.netty/netty-resolver/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-common/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-buffer/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-transport/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-handler/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-transport-native-epoll/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-codec/${netty-version}</bundle>{noformat}whereas the current netty deps used by the client are actually:{noformat}netty-buffernetty-commonnetty-handlernetty-transportnetty-codecnetty-codec-http{noformat} Improvement update camel-amqp to use qpid-jms-client-0.11.1 The 0.11.1 release of Qpid JMS client is now out. It adds OSGi metadata thanks to a PR from https://github.com/ctron.I'm not familiar with karaf at all but I see use of the 'qpid-jms-client-version' and 'qpid-proton-j-version' properties from parent/pom.xml in platforms/karaf/features/src/main/resources/features.xml:{noformat}    <bundle dependency='true'>wrap:mvn:org.apache.qpid/qpid-jms-client/${qpid-jms-client-version}</bundle>    <bundle dependency='true'>wrap:mvn:org.apache.qpid/proton-j/${qpid-proton-j-version}</bundle>{noformat}If I understand correctly that is 'wrapping' them with OSGi details due to them not previously having any themselves, in which case wrapping may no longer be required given qpid-jms-0.11.1 and proton-j 0.13.0 adding OSGi metadata.In the same bit, I see the following netty bits listed:{noformat}    <bundle dependency='true'>mvn:io.netty/netty-resolver/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-common/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-buffer/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-transport/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-handler/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-transport-native-epoll/${netty-version}</bundle>    <bundle dependency='true'>mvn:io.netty/netty-codec/${netty-version}</bundle>{noformat}whereas the current netty deps used by the client are actually:{noformat}netty-buffernetty-commonnetty-handlernetty-transportnetty-codecnetty-codec-http{noformat}
CAMEL-10367 remove extraneous dependency from camel-amqp module I notice from http://camel.apache.org/amqp.html that camel-amqp is considered to support only AMQP 1.0 as of Camel 2.17.0. The camel-amqp module however in addition to its dependency on the newer Qpid AMQP 1.0 JMS client, continues to have a dependency on an old version of the Qpid AMQP 0-x JMS client. Since it isn't used anymore this dependency should be removed. Task remove extraneous dependency from camel-amqp module I notice from http://camel.apache.org/amqp.html that camel-amqp is considered to support only AMQP 1.0 as of Camel 2.17.0. The camel-amqp module however in addition to its dependency on the newer Qpid AMQP 1.0 JMS client, continues to have a dependency on an old version of the Qpid AMQP 0-x JMS client. Since it isn't used anymore this dependency should be removed.
CAMEL-10350 New camel-bonita component Hello,I implemented a component to interface Bonita BPM engine. For now I have a producer to start a new process. I need to polish the code and write some tests. Once done, could I share it here?Thanks  New Feature New camel-bonita component Hello,I implemented a component to interface Bonita BPM engine. For now I have a producer to start a new process. I need to polish the code and write some tests. Once done, could I share it here?Thanks 
CAMEL-10347 Camel-scr todos and polish Visibility / access:* Make context private. Use getter.* Get rid of registry member variable. Get registry through context when needed.* Make methods that are not supposed to be overriden final.Customization:* User can customize context's registry by overriding createRegistry() methods. Returns SimpleRegistry by default.* Remove hardcoded defaults from setupCamelContext().Corrections:* Do not explicitly create an OsgiServiceRegistry for OsgiDefaultCamelContext. The context will create one anyway and combine it with whatever createRegistry(BundleContext) returns in a CompositeRegistry.* Make camel-archetype-scr integration test run with Maven 3.3.9. Improvement Camel-scr todos and polish Visibility / access:* Make context private. Use getter.* Get rid of registry member variable. Get registry through context when needed.* Make methods that are not supposed to be overriden final.Customization:* User can customize context's registry by overriding createRegistry() methods. Returns SimpleRegistry by default.* Remove hardcoded defaults from setupCamelContext().Corrections:* Do not explicitly create an OsgiServiceRegistry for OsgiDefaultCamelContext. The context will create one anyway and combine it with whatever createRegistry(BundleContext) returns in a CompositeRegistry.* Make camel-archetype-scr integration test run with Maven 3.3.9.
CAMEL-10345 camel-test - Route coverage summary to be logged The camel-test has a feature to dump route coverages. We should do some summary logging to output https://github.com/apache/camel/blob/master/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java#L378INFO Route coverage (6 out of 6 routes used)WARN Route coverage (5 out of 6 routes used)And do a WARN log if one or more route was not in use during testing.It may be some percentage instead 100%, 75% etc. eg to count each EIP/node and see how many has 0 in total exchange count.We can then later do a drill down, and point out which EIP/node that hasn't been covered in a route. Improvement camel-test - Route coverage summary to be logged The camel-test has a feature to dump route coverages. We should do some summary logging to output https://github.com/apache/camel/blob/master/components/camel-test/src/main/java/org/apache/camel/test/junit4/CamelTestSupport.java#L378INFO Route coverage (6 out of 6 routes used)WARN Route coverage (5 out of 6 routes used)And do a WARN log if one or more route was not in use during testing.It may be some percentage instead 100%, 75% etc. eg to count each EIP/node and see how many has 0 in total exchange count.We can then later do a drill down, and point out which EIP/node that hasn't been covered in a route.
CAMEL-10344 RouteIdFactory - That can assign route ids using derived values from uris When using routes that uses direct/seda etc as route inputs, then you may want to use their name as the route id, egdirect:foo   -> fooseda:bar    -> barjms:orders -> ordersInstead of having route1, route2 as auto assigned names. There could be a NodeIdFactory that assign such names for route's. For example it can use the context-path of the route url as the name. New Feature RouteIdFactory - That can assign route ids using derived values from uris When using routes that uses direct/seda etc as route inputs, then you may want to use their name as the route id, egdirect:foo   -> fooseda:bar    -> barjms:orders -> ordersInstead of having route1, route2 as auto assigned names. There could be a NodeIdFactory that assign such names for route's. For example it can use the context-path of the route url as the name.
CAMEL-10339 Allow date offsets and timezones with Simple language Case 1:Customer wants us to drop the files with the following naming scheme: prefix-<datetime in UTC>.data. Wouldn't it be nice if we could just say:{noformat}fileName=prefix-$simple{date-with-timezone:now:UTC:yyyyMMddHHmmss}.data{noformat}in the producer URI?Case 2:Customer wants us to clean up files from a destination that are more than 24 hours old. With the File component's new filterFile feature we should be able to say:{noformat}filterFile=${file:modified} < ${date:now-24h}{noformat}in the consumer URI and pull them off the disk. Improvement Allow date offsets and timezones with Simple language Case 1:Customer wants us to drop the files with the following naming scheme: prefix-<datetime in UTC>.data. Wouldn't it be nice if we could just say:{noformat}fileName=prefix-$simple{date-with-timezone:now:UTC:yyyyMMddHHmmss}.data{noformat}in the producer URI?Case 2:Customer wants us to clean up files from a destination that are more than 24 hours old. With the File component's new filterFile feature we should be able to say:{noformat}filterFile=${file:modified} < ${date:now-24h}{noformat}in the consumer URI and pull them off the disk.
CAMEL-10332 Define netty version in dependency management The version of netty-all required by vertx and other components is not properly exposed through the BOM Task Define netty version in dependency management The version of netty-all required by vertx and other components is not properly exposed through the BOM
CAMEL-10328 Enhance Slack component to support attachments in webhooks Current camel-slack component http://camel.apache.org/slack.html doesn't support attachments in incoming webhooksSlack API : https://api.slack.com/docs/message-attachmentsAdded support for attachments to be sent as part of incoming web hooks to Slack Improvement Enhance Slack component to support attachments in webhooks Current camel-slack component http://camel.apache.org/slack.html doesn't support attachments in incoming webhooksSlack API : https://api.slack.com/docs/message-attachmentsAdded support for attachments to be sent as part of incoming web hooks to Slack
CAMEL-10323 MQTT producer creation fails if network is not available at startup Trying to use Camel in environment with unstable network came with following problem: when Camel context starts up with network not being available no matter what retry settings are set, the creation of the producer will fail, which will also by default mean failure in the creation of context.It would be good if behavior was similar to other components (like mina or netty), where producer tries to establish connection when it has a message to send (or periodically?)  So, once network connection is created (maybe hours or days after creation) endpoint would be functional and all messages can be delivered given  Guaranteed Delivery pattern is used.Can we avoid fatal exception on creation of the Endpoint? Improvement MQTT producer creation fails if network is not available at startup Trying to use Camel in environment with unstable network came with following problem: when Camel context starts up with network not being available no matter what retry settings are set, the creation of the producer will fail, which will also by default mean failure in the creation of context.It would be good if behavior was similar to other components (like mina or netty), where producer tries to establish connection when it has a message to send (or periodically?)  So, once network connection is created (maybe hours or days after creation) endpoint would be functional and all messages can be delivered given  Guaranteed Delivery pattern is used.Can we avoid fatal exception on creation of the Endpoint?
CAMEL-10308 Provide a way to use async engine from ProducerTemplate Currently ProducerTemplate delegates to Sync engine even when async* methods are used.This improvement: * changes async methods to use async engine * Provides Java 8 CompletableFuture  instead of regular Future to the called * Provides a way to invoke async engine without additional thread pool  New Feature Provide a way to use async engine from ProducerTemplate Currently ProducerTemplate delegates to Sync engine even when async* methods are used.This improvement: * changes async methods to use async engine * Provides Java 8 CompletableFuture  instead of regular Future to the called * Provides a way to invoke async engine without additional thread pool 
CAMEL-10306 Upgrade from 3.6.5 to 3.7.1 Upgrade hazelcast version.The 3.7.x version is Cloud-Enabled and 30% Faster and Fully Modularized In-Memory Data Grid(http://insidebigdata.com/2016/09/02/hazelcast-releases-3-7-cloud-enabled-30-faster-and-the-first-fully-modularized-in-memory-data-grid) Task Upgrade from 3.6.5 to 3.7.1 Upgrade hazelcast version.The 3.7.x version is Cloud-Enabled and 30% Faster and Fully Modularized In-Memory Data Grid(http://insidebigdata.com/2016/09/02/hazelcast-releases-3-7-cloud-enabled-30-faster-and-the-first-fully-modularized-in-memory-data-grid)
CAMEL-10305 Add support for calling function imports from Olingo2 Component Apache Camel Olingo2 component doesn’t support calling function imports. The changes adds support to calling function imports as well. New Feature Add support for calling function imports from Olingo2 Component Apache Camel Olingo2 component doesn't support calling function imports. The changes adds support to calling function imports as well.
CAMEL-10299 Support service discovery for Listeners like StartupListener to track camel events Camel uses service discovery for components. It would be useful if it can do the same for StartupListeners to allow creating services to track camel contexts, without having to instantiate an mbean in the application.  Improvement Support service discovery for Listeners like StartupListener to track camel events Camel uses service discovery for components. It would be useful if it can do the same for StartupListeners to allow creating services to track camel contexts, without having to instantiate an mbean in the application. 
CAMEL-10298 Unnecessary restriction on readLockTimeout with readLockMinAge When using readLockMinAge parameter in the file component, readLockTimeout is required to be larger than readLockCheckInterval + readLockMinAge.This check is unnecessary. It was originally added with the use case described in CAMEL-8421 in mind, but it just ends up limiting and complicating readLockMinAge parameter's usage for no gain. Improvement Unnecessary restriction on readLockTimeout with readLockMinAge When using readLockMinAge parameter in the file component, readLockTimeout is required to be larger than readLockCheckInterval + readLockMinAge.This check is unnecessary. It was originally added with the use case described in CAMEL-8421 in mind, but it just ends up limiting and complicating readLockMinAge parameter's usage for no gain.
CAMEL-10297 Camel-Ftp: Splitting the body doesn't parse the file content but the RemoteFile {code}from("{{ftp.server}}")	    .log("Received file ${file:name} about to split")	    .split(body().tokenize("\n"))	    .log("${body})            .to("mock:result");{code}In this case you'll get an output like this{code}-rw-rw-r--   1 oscerd oscerd      24 Sep  2 18:03 file_test.txt{code}While an end user expect the file content.I assign the issue to Claus, since he worked on the fix, I've only added a test. Merging now Improvement Camel-Ftp: Splitting the body doesn't parse the file content but the RemoteFile {code}from("{{ftp.server}}")	    .log("Received file ${file:name} about to split")	    .split(body().tokenize("\n"))	    .log("${body})            .to("mock:result");{code}In this case you'll get an output like this{code}-rw-rw-r--   1 oscerd oscerd      24 Sep  2 18:03 file_test.txt{code}While an end user expect the file content.I assign the issue to Claus, since he worked on the fix, I've only added a test. Merging now
CAMEL-10295 hazelcast map data store documentation Hello,Into some hazelcast distribuited object (for instance hashmap.put (...) ) can be set element's eviction time.Eviction time is very useful into big cluster structure, this feature is already present into code using headers: CamelHazelcastObjectTtlValue and CamelHazelcastObjectTtlUnitunfortunately it is not present in documentation!!!See you soon.fabrizio New Feature hazelcast map data store documentation Hello,Into some hazelcast distribuited object (for instance hashmap.put (...) ) can be set element's eviction time.Eviction time is very useful into big cluster structure, this feature is already present into code using headers: CamelHazelcastObjectTtlValue and CamelHazelcastObjectTtlUnitunfortunately it is not present in documentation!!!See you soon.fabrizio
CAMEL-10294 Component docs - ExchangePattern See PRhttps://github.com/apache/camel/pull/1159#issuecomment-245058482We should either remove the exchange pattern from the docs, or infer its default value as- InOnly if its consumerOnly=true- InOut otherwiseMost components dont change the MEP explicit and it can therefore be wrong as InOnly in some cases. Only special components such as JMS may see the MEP as InOnly if there is no JMSReplyTo header. Task Component docs - ExchangePattern See PRhttps://github.com/apache/camel/pull/1159#issuecomment-245058482We should either remove the exchange pattern from the docs, or infer its default value as- InOnly if its consumerOnly=true- InOut otherwiseMost components dont change the MEP explicit and it can therefore be wrong as InOnly in some cases. Only special components such as JMS may see the MEP as InOnly if there is no JMSReplyTo header.
CAMEL-10286 Allow async bean method in bean language with J8 CompletableFuture Allow easy creation of asyncrhonous methods called from bean language.Proposed solution is to allow such methods to return CompletableFuture.Such return would automatically be treated as async invocation.Non-null result will be used as resulting body.Any async exception will be propagated to proper error handling.Note that if CompletableFuture would return null, it won't be used as resulting body. Rather resulting body will not be changed. It would help in use cases when processing method just does some work and returns CompletableFuture<Void>.  New Feature Allow async bean method in bean language with J8 CompletableFuture Allow easy creation of asyncrhonous methods called from bean language.Proposed solution is to allow such methods to return CompletableFuture.Such return would automatically be treated as async invocation.Non-null result will be used as resulting body.Any async exception will be propagated to proper error handling.Note that if CompletableFuture would return null, it won't be used as resulting body. Rather resulting body will not be changed. It would help in use cases when processing method just does some work and returns CompletableFuture<Void>. 
CAMEL-10285 beanio - Allow custom error handler to access exchange Extends CAMEL-9843 so we can access the current exchange in the error handler. Improvement beanio - Allow custom error handler to access exchange Extends CAMEL-9843 so we can access the current exchange in the error handler.
CAMEL-10284 No shutdown for custom workerPool in NettyProducer The workGroup reference from configuration is not set in the producer so method shutdownGracefully() is not called in doStop()   Improvement No shutdown for custom workerPool in NettyProducer The workGroup reference from configuration is not set in the producer so method shutdownGracefully() is not called in doStop()  
CAMEL-10283 Add a timeout on WebSocketProducer sendMessages method We are encountering a problem with websocket component when our clients using web browsers are brutally loosing connection (closing laptop most of time).When we are sending updates from server to all clients, the WebSocketProducer iterate over all opened sockets and when it reaches the broken socket, it is just waiting for the idleTimeout to happen.At this step, the others clients are not able to interact with the server anymore cause the websocket producer is busy waiting on the broken socket and can't send messages to other clients.I'm looking for a work-around or something... maybe the ability to set a timeout on the client handshake when sending... I'm not an expert in network protocols.Thanks. Wish Add a timeout on WebSocketProducer sendMessages method We are encountering a problem with websocket component when our clients using web browsers are brutally loosing connection (closing laptop most of time).When we are sending updates from server to all clients, the WebSocketProducer iterate over all opened sockets and when it reaches the broken socket, it is just waiting for the idleTimeout to happen.At this step, the others clients are not able to interact with the server anymore cause the websocket producer is busy waiting on the broken socket and can't send messages to other clients.I'm looking for a work-around or something... maybe the ability to set a timeout on the client handshake when sending... I'm not an expert in network protocols.Thanks.
CAMEL-10275 Allow @ProperyInject on bean method arguments So you can call methods which have parameters injected from the properties placeholder, such as string / int types etc.{code}    public String sayHello(String @PropertyInject("reply") reply) throws  {{code}So the reply parameters is taken from the property placeholder. Improvement Allow @ProperyInject on bean method arguments So you can call methods which have parameters injected from the properties placeholder, such as string / int types etc.{code}    public String sayHello(String @PropertyInject("reply") reply) throws  {{code}So the reply parameters is taken from the property placeholder.
CAMEL-10260 Olingo2 component should declare runtime dependency on olingo-odata2-core Right now the olingo2 component uses olingo-odata2-core as a test dependency. This should really be declared as a runtime scoped dependency because there are classes within olingo-data2-api that attempt to load things from olingo-odata2-core at runtime.For an example see method getInstance() in class: org.apache.olingo.odata2.api.rt.RuntimeDelegate Improvement Olingo2 component should declare runtime dependency on olingo-odata2-core Right now the olingo2 component uses olingo-odata2-core as a test dependency. This should really be declared as a runtime scoped dependency because there are classes within olingo-data2-api that attempt to load things from olingo-odata2-core at runtime.For an example see method getInstance() in class: org.apache.olingo.odata2.api.rt.RuntimeDelegate
CAMEL-10255 Camel Main - Make it easy to configure property placeholder So you can useWhere you can specify one or more locations separated by comma:    main.setPropertyPlaceholderLocations("myapp.properties");See SOhttp://stackoverflow.com/questions/39033103/how-to-access-property-file-in-apache-camel-with-java-dslToday its a bit harder to do, where you either need to use the MainListener or to setup the PropertiesComponent from a RouteBuilder configure method, or to use the bind which likely is the easiest.PropertiesComponent prop = new PropertiesComponent();prop.setXXXmain.bind("properties, prop); New Feature Camel Main - Make it easy to configure property placeholder So you can useWhere you can specify one or more locations separated by comma:    main.setPropertyPlaceholderLocations("myapp.properties");See SOhttp://stackoverflow.com/questions/39033103/how-to-access-property-file-in-apache-camel-with-java-dslToday its a bit harder to do, where you either need to use the MainListener or to setup the PropertiesComponent from a RouteBuilder configure method, or to use the bind which likely is the easiest.PropertiesComponent prop = new PropertiesComponent();prop.setXXXmain.bind("properties, prop);
CAMEL-10248 camel-catalog - Include adoc documentation We should include the adoc for the - components- dataformats- languages Improvement camel-catalog - Include adoc documentation We should include the adoc for the - components- dataformats- languages
CAMEL-10246 camel-ftp - Add support for configuring active port range See SOhttp://stackoverflow.com/questions/38966224/apache-camel-how-to-configure-the-data-port-range-for-ftp-client-active-mode Improvement camel-ftp - Add support for configuring active port range See SOhttp://stackoverflow.com/questions/38966224/apache-camel-how-to-configure-the-data-port-range-for-ftp-client-active-mode
CAMEL-10245 Persistence Exception when trying to delete detached entity Following exception is raised when calling jpa producer with remove option and a detached entity:{noformat}org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-bobbys-mac-media-int-63836-1471269707364-0-4]	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1706)	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:677)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:507)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:503)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:150)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:155)	at org.apache.camel.processor.jpa.JpaProducerRemoveTest.testRouteJpa(JpaProducerRemoveTest.java:54)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)	at org.junit.rules.RunRules.evaluate(RunRules.java:20)	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:253)	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)Caused by: <openjpa-2.4.1-r422266:1730418 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: You cannot perform operation delete on detached object "org.apache.camel.examples.SendEmail-5801". This operation only applies to managed objects.FailedObject: org.apache.camel.examples.SendEmail-5801	at org.apache.openjpa.kernel.BrokerImpl.newDetachedException(BrokerImpl.java:2835)	at org.apache.openjpa.kernel.BrokerImpl.delete(BrokerImpl.java:2826)	at org.apache.openjpa.kernel.BrokerImpl.delete(BrokerImpl.java:2771)	at org.apache.openjpa.kernel.DelegatingBroker.delete(DelegatingBroker.java:1101)	at org.apache.openjpa.persistence.EntityManagerImpl.remove(EntityManagerImpl.java:731)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:347)	at com.sun.proxy.$Proxy40.remove(Unknown Source)	at org.apache.camel.component.jpa.JpaProducer$1.remove(JpaProducer.java:131)	at org.apache.camel.component.jpa.JpaProducer$1.doInTransaction(JpaProducer.java:92)	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)	at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:63)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:447)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:401)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:291)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:401)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:224)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:131)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:148)	... 35 more{noformat} Improvement Persistence Exception when trying to delete detached entity Following exception is raised when calling jpa producer with remove option and a detached entity:{noformat}org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-bobbys-mac-media-int-63836-1471269707364-0-4]	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1706)	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:677)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:507)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:503)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:150)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:155)	at org.apache.camel.processor.jpa.JpaProducerRemoveTest.testRouteJpa(JpaProducerRemoveTest.java:54)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)	at org.junit.rules.RunRules.evaluate(RunRules.java:20)	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:253)	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)Caused by: <openjpa-2.4.1-r422266:1730418 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: You cannot perform operation delete on detached object "org.apache.camel.examples.SendEmail-5801". This operation only applies to managed objects.FailedObject: org.apache.camel.examples.SendEmail-5801	at org.apache.openjpa.kernel.BrokerImpl.newDetachedException(BrokerImpl.java:2835)	at org.apache.openjpa.kernel.BrokerImpl.delete(BrokerImpl.java:2826)	at org.apache.openjpa.kernel.BrokerImpl.delete(BrokerImpl.java:2771)	at org.apache.openjpa.kernel.DelegatingBroker.delete(DelegatingBroker.java:1101)	at org.apache.openjpa.persistence.EntityManagerImpl.remove(EntityManagerImpl.java:731)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:347)	at com.sun.proxy.$Proxy40.remove(Unknown Source)	at org.apache.camel.component.jpa.JpaProducer$1.remove(JpaProducer.java:131)	at org.apache.camel.component.jpa.JpaProducer$1.doInTransaction(JpaProducer.java:92)	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)	at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:63)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:447)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:401)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:291)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:401)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:224)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:131)	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:148)	... 35 more{noformat}
CAMEL-10240 CamelHttpClient default pool size does not work on system with large number of cpus In CamelHttpClient a default threadpool is being created with a hardcoded size of 16:{code}    @Override    protected void doStart() throws Exception {        if (!hasThreadPool()) {            // if there is no thread pool then create a default thread pool using daemon threads            QueuedThreadPool qtp = new QueuedThreadPool();            // 16 max threads is the default in the http client            qtp.setMaxThreads(16);            qtp.setDaemon(true);            // let the thread names indicate they are from the client            qtp.setName("CamelJettyClient(" + ObjectHelper.getIdentityHashCode(this) + ")");            setThreadPoolOrExecutor(qtp);        }        super.doStart();    }{code}this configuration does not work because number of selectors is calculated relative to the number of CPUs in HttpClientTransportOverHTTP:{code}   public HttpClientTransportOverHTTP()    {        this(Math.max(1, Runtime.getRuntime().availableProcessors() / 2));    }{code}As a result by default camel simply hangs on these systems...It would be nice if CamelHttpClient would have a constructor that set the HttpClientTransport or at least the number of selectors. Improvement CamelHttpClient default pool size does not work on system with large number of cpus In CamelHttpClient a default threadpool is being created with a hardcoded size of 16:{code}    @Override    protected void doStart() throws Exception {        if (!hasThreadPool()) {            // if there is no thread pool then create a default thread pool using daemon threads            QueuedThreadPool qtp = new QueuedThreadPool();            // 16 max threads is the default in the http client            qtp.setMaxThreads(16);            qtp.setDaemon(true);            // let the thread names indicate they are from the client            qtp.setName("CamelJettyClient(" + ObjectHelper.getIdentityHashCode(this) + ")");            setThreadPoolOrExecutor(qtp);        }        super.doStart();    }{code}this configuration does not work because number of selectors is calculated relative to the number of CPUs in HttpClientTransportOverHTTP:{code}   public HttpClientTransportOverHTTP()    {        this(Math.max(1, Runtime.getRuntime().availableProcessors() / 2));    }{code}As a result by default camel simply hangs on these systems...It would be nice if CamelHttpClient would have a constructor that set the HttpClientTransport or at least the number of selectors.
CAMEL-10239 Extend Camel RabbitMQ with guaranteed delivery (basic.return) So far camel-rabbitmq supports publisher acknowledgements to ensure that a massage was delivered to the brokers. However this does not guarantee that the message is delivered to queue (https://www.rabbitmq.com/confirms.html - 'When will messages be confirmed?').To implement guaranteed delivery publisher acknowledgements have to be activated together with a *return listener* and publishing messages as mandatory.In this case the basic.return will be returned to the publisher before the basic.nack or basic.ack. Only in this case we can be sure that the message is really delivered to the configured queue (or fails if no queue is available).As a solution I provided a pull request on github together with integration tests.https://github.com/apache/camel/pull/1116Please let me know if I can provide further support/input. New Feature Extend Camel RabbitMQ with guaranteed delivery (basic.return) So far camel-rabbitmq supports publisher acknowledgements to ensure that a massage was delivered to the brokers. However this does not guarantee that the message is delivered to queue (https://www.rabbitmq.com/confirms.html - 'When will messages be confirmed?').To implement guaranteed delivery publisher acknowledgements have to be activated together with a *return listener* and publishing messages as mandatory.In this case the basic.return will be returned to the publisher before the basic.nack or basic.ack. Only in this case we can be sure that the message is really delivered to the configured queue (or fails if no queue is available).As a solution I provided a pull request on github together with integration tests.https://github.com/apache/camel/pull/1116Please let me know if I can provide further support/input.
CAMEL-10235 Add fluentTemplate to XML DSL So you can define a fluentTemplate id which can easily get injected to your beans Improvement Add fluentTemplate to XML DSL So you can define a fluentTemplate id which can easily get injected to your beans
CAMEL-10233 SpringCamelContext should lazy load ModelJAXBContextFactory The SpringCamelContext contains a constructor where it does:{code}setModelJAXBContextFactory(new SpringModelJAXBContextFactory());{code}This should ideally be done lazilly (which is how the DefaultCamelContext does things). The issue with having this logic in the constructor is that when super() is called, camel will fire the 'context created' event. If a context create event handler happens to set the JAXBContextFactory, it ends up being overwritten later on in the SpringCamelContext constructor. Improvement SpringCamelContext should lazy load ModelJAXBContextFactory The SpringCamelContext contains a constructor where it does:{code}setModelJAXBContextFactory(new SpringModelJAXBContextFactory());{code}This should ideally be done lazilly (which is how the DefaultCamelContext does things). The issue with having this logic in the constructor is that when super() is called, camel will fire the 'context created' event. If a context create event handler happens to set the JAXBContextFactory, it ends up being overwritten later on in the SpringCamelContext constructor.
CAMEL-10223 XmlRpc dataformat - Setting request=true should also apply for marshal See nabblehttp://camel.465427.n5.nabble.com/XmlRpc-marshalling-issue-tt5777193.html Improvement XmlRpc dataformat - Setting request=true should also apply for marshal See nabblehttp://camel.465427.n5.nabble.com/XmlRpc-marshalling-issue-tt5777193.html
CAMEL-10219 Add support in JAXB module to use injected CharacterEscapeHandler There is no support in existing module to inject CharacterEscapeHandler in JAXB marshaller. Improvement Add support in JAXB module to use injected CharacterEscapeHandler There is no support in existing module to inject CharacterEscapeHandler in JAXB marshaller.
CAMEL-10214 File Component: doneFileName option of Consumer missing from generated documentation http://camel.apache.org/file2.html has the doneFileName option for both consumer and producer, but in GenericFileEndpoint.java{code:java}@UriParam(label = "producer")protected String doneFileName;{code}and in file.adoc  {code}| doneFileName | producer |{code}the consumer option is missing. Task File Component: doneFileName option of Consumer missing from generated documentation http://camel.apache.org/file2.html has the doneFileName option for both consumer and producer, but in GenericFileEndpoint.java{code:java}@UriParam(label = "producer")protected String doneFileName;{code}and in file.adoc  {code}| doneFileName | producer |{code}the consumer option is missing.
CAMEL-10213 Camel Kafka doesn't support setting "max.poll.records" and "session.timeout.ms"  Currently it is not possible to control the processing time in the poll loop in Camel Kafka consumers. It is important to have the possibility to control the poll loop by adjusting {{max.poll.records}} and {{session.timeout.ms}} . Otherwise this warning is produced when consuming a large backlog from kafka topic:{code}Auto offset commit failed for group consumerGroup: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured session.timeout.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batchesreturned in poll() with max.poll.records.{code}Please add {{max.poll.records}} and {{session.timeout.ms}} to Kafka endpoint configuration. Improvement Camel Kafka doesn't support setting "max.poll.records" and "session.timeout.ms"  Currently it is not possible to control the processing time in the poll loop in Camel Kafka consumers. It is important to have the possibility to control the poll loop by adjusting {{max.poll.records}} and {{session.timeout.ms}} . Otherwise this warning is produced when consuming a large backlog from kafka topic:{code}Auto offset commit failed for group consumerGroup: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured session.timeout.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batchesreturned in poll() with max.poll.records.{code}Please add {{max.poll.records}} and {{session.timeout.ms}} to Kafka endpoint configuration.
CAMEL-10211 spring boot - Auto configuration of tracer Allow to configure all the tracer options (eg in DefaultTraceFormatter) to configure what to output with the tracer. Improvement spring boot - Auto configuration of tracer Allow to configure all the tracer options (eg in DefaultTraceFormatter) to configure what to output with the tracer.
CAMEL-10210 Trace formatter - Add support for multiline See nabblehttp://camel.465427.n5.nabble.com/Tracer-multiline-tp5785600.htmlSee DefaultExchangeFormatter which has multiline support. Add something similar to DefaultTraceFormatter. Also expose that as JMX option in ManagedTracer so you can change it over JMX at runtime. Improvement Trace formatter - Add support for multiline See nabblehttp://camel.465427.n5.nabble.com/Tracer-multiline-tp5785600.htmlSee DefaultExchangeFormatter which has multiline support. Add something similar to DefaultTraceFormatter. Also expose that as JMX option in ManagedTracer so you can change it over JMX at runtime.
CAMEL-10209 spring boot - Auto configuration for languages We should also generate auto configuration for languages. We do this already for components and data formats. New Feature spring boot - Auto configuration for languages We should also generate auto configuration for languages. We do this already for components and data formats.
CAMEL-10208 FluentProducerTemplate - Allow to be injected We should create an interface at org.apache.camel.FluentProducerTemplate and have a DefaultFluentProducerTemplate implementation.We should then allow to create a new FluentProducerTemplate from CamelContext API as well (like for producer template)And also allow to inject FluentProducerTemplate using @EndpointInject and @Produces in the DefaultCamelBeanPostProcessor New Feature FluentProducerTemplate - Allow to be injected We should create an interface at org.apache.camel.FluentProducerTemplate and have a DefaultFluentProducerTemplate implementation.We should then allow to create a new FluentProducerTemplate from CamelContext API as well (like for producer template)And also allow to inject FluentProducerTemplate using @EndpointInject and @Produces in the DefaultCamelBeanPostProcessor
CAMEL-10203 Spring boot - Auto configuration should not use primitive types but should use their wrapper types, so null means that the option has not been configured. Improvement Spring boot - Auto configuration should not use primitive types but should use their wrapper types, so null means that the option has not been configured.
CAMEL-10202 camel-netty4-http - Spring Boot auto configuration Have this errorCaused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route94: Route(route94)[[From[netty4-http:http://0.0.0.0:{{http.port}... because of Failed to resolve endpoint: netty4-http://http://0.0.0.0:11268 due to: Cannot auto create component: netty4-httpCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: netty4-http://http://0.0.0.0:11268 due to: Cannot auto create component: netty4-httpCaused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: netty4-httpCaused by: java.lang.IllegalArgumentException: nThreads: 0 (expected: > 0)Because the default value of that a thread pool becomes 0, which is not a valid value for netty.  Task camel-netty4-http - Spring Boot auto configuration Have this errorCaused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route94: Route(route94)[[From[netty4-http:http://0.0.0.0:{{http.port}... because of Failed to resolve endpoint: netty4-http://http://0.0.0.0:11268 due to: Cannot auto create component: netty4-httpCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: netty4-http://http://0.0.0.0:11268 due to: Cannot auto create component: netty4-httpCaused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: netty4-httpCaused by: java.lang.IllegalArgumentException: nThreads: 0 (expected: > 0)Because the default value of that a thread pool becomes 0, which is not a valid value for netty. 
CAMEL-10199 EndpointInject injects not started ProducerTemplate I use Camel with Spring framework and create my routes as spring beans. I use {{<camel:ContextScan/>}} to have my routes started. The problem I have is that the {{ProducerTemplate}} that is injected into my bean (a different bean - not the route bean) using {{@EndpointInject}} is not ready for use. When I try to call producerTemplate.send() I get:{noformat}IllegalStateException: ProducerTemplate has not been started{noformat}I am using {{?block=true}} in the uri when I call producerTemplate.send() Improvement EndpointInject injects not started ProducerTemplate I use Camel with Spring framework and create my routes as spring beans. I use {{<camel:ContextScan/>}} to have my routes started. The problem I have is that the {{ProducerTemplate}} that is injected into my bean (a different bean - not the route bean) using {{@EndpointInject}} is not ready for use. When I try to call producerTemplate.send() I get:{noformat}IllegalStateException: ProducerTemplate has not been started{noformat}I am using {{?block=true}} in the uri when I call producerTemplate.send()
CAMEL-10189 camel-jsonpath - Add support for simple functions See SOhttp://stackoverflow.com/questions/38609231/can-i-use-camel-simple-expression-inside-jsonpath-languageWe can roll our own predicates in jsonpath where you can use ? as the placeholder. The trick would be to either inline the functions in the string, and then do our own pre-parsing to replace those predicates to ?, eg{code}"$.person[?(@.role=='${headers.role}')]"{code}gets pre-parsed as{code}"$.person[?(@.role=='?')]"{code}And then we know that ${headers.role} is the simple funktion to execute as the predicate. Improvement camel-jsonpath - Add support for simple functions See SOhttp://stackoverflow.com/questions/38609231/can-i-use-camel-simple-expression-inside-jsonpath-languageWe can roll our own predicates in jsonpath where you can use ? as the placeholder. The trick would be to either inline the functions in the string, and then do our own pre-parsing to replace those predicates to ?, eg{code}"$.person[?(@.role=='${headers.role}')]"{code}gets pre-parsed as{code}"$.person[?(@.role=='?')]"{code}And then we know that ${headers.role} is the simple funktion to execute as the predicate.
CAMEL-10180 weaveByToUri - To make it easier to match sending to uris See CAMEL-10174We should make it easier to match when using to(uris) in the routes to match those by their uri. Today you may need to use toString which can trigger other EIPs to match which output children such as CBR. Improvement weaveByToUri - To make it easier to match sending to uris See CAMEL-10174We should make it easier to match when using to(uris) in the routes to match those by their uri. Today you may need to use toString which can trigger other EIPs to match which output children such as CBR.
CAMEL-10179 Frequent BlockingOperationExceptions under load in NettyProducer.openChannel() I have a class that uses a netty4 producer. While doing some load testing, I started seeing a lot of stack traces like the following:{code}io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@3ee2397e(incomplete)        at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:391) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.channel.DefaultChannelPromise.checkDeadLock(DefaultChannelPromise.java:157) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.util.concurrent.DefaultPromise.awaitUninterruptibly(DefaultPromise.java:284) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:135) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:28) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at org.apache.camel.component.netty4.NettyProducer.openChannel(NettyProducer.java:468) ~[camel-netty4-2.17.1.jar:2.17.1]...{code}It seems to be the same like in CAMEL-8193 but during the opening phase, not the closing phase.I had a look at {{org.apache.camel.component.netty4.NettyProducer.openChannel()}}, line 468 and maybe using {{channelFuture..addListener(...)}} instead of {{channelFuture.awaitUninterruptibly();}} at that point may fix this issue.Would be great if somebody could take a look. Improvement Frequent BlockingOperationExceptions under load in NettyProducer.openChannel() I have a class that uses a netty4 producer. While doing some load testing, I started seeing a lot of stack traces like the following:{code}io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@3ee2397e(incomplete)        at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:391) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.channel.DefaultChannelPromise.checkDeadLock(DefaultChannelPromise.java:157) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.util.concurrent.DefaultPromise.awaitUninterruptibly(DefaultPromise.java:284) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:135) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:28) ~[netty-all-4.0.34.Final.jar:4.0.34.Final]        at org.apache.camel.component.netty4.NettyProducer.openChannel(NettyProducer.java:468) ~[camel-netty4-2.17.1.jar:2.17.1]...{code}It seems to be the same like in CAMEL-8193 but during the opening phase, not the closing phase.I had a look at {{org.apache.camel.component.netty4.NettyProducer.openChannel()}}, line 468 and maybe using {{channelFuture..addListener(...)}} instead of {{channelFuture.awaitUninterruptibly();}} at that point may fix this issue.Would be great if somebody could take a look.
CAMEL-10175 camel-jetty - Continuation timeout should send back HTTP timeout status code See the proposed solution at SOhttp://stackoverflow.com/questions/36656391/camel-exchange-expired-via-jetty-continuation/36660661?noredirect=1#comment64460262_36660661We can bake that out of the box into the default binding. Improvement camel-jetty - Continuation timeout should send back HTTP timeout status code See the proposed solution at SOhttp://stackoverflow.com/questions/36656391/camel-exchange-expired-via-jetty-continuation/36660661?noredirect=1#comment64460262_36660661We can bake that out of the box into the default binding.
CAMEL-10172 BeanProducer unlike BeanProcessor do not implement fully async protocol Currently BeanProducer converts any async call into a sync call.It leads to unnessesary locking & thread usage when using bean:* uris and routing to Async endpoints.The workaround is to use bean( * ) instead of to("bean:*") as this way BeanProducer is not used and BeanProcessor is fully async. Improvement BeanProducer unlike BeanProcessor do not implement fully async protocol Currently BeanProducer converts any async call into a sync call.It leads to unnessesary locking & thread usage when using bean:* uris and routing to Async endpoints.The workaround is to use bean( * ) instead of to("bean:*") as this way BeanProducer is not used and BeanProcessor is fully async.
CAMEL-10169 supporting OSGi service.pid by registry Declarative services are registered for interfaces only by default in OSGi environment. Components that implement Processor interface only (i.e. name of the class is not specified in Service annotation) cannot be added as "bean:" (components) in Camel routes.LookupByName method in default OsgiServiceRegistry should be extended to support service.pid that references the exact component class so existing services could be used in routed without source changes/redundant source fragments. New Feature supporting OSGi service.pid by registry Declarative services are registered for interfaces only by default in OSGi environment. Components that implement Processor interface only (i.e. name of the class is not specified in Service annotation) cannot be added as "bean:" (components) in Camel routes.LookupByName method in default OsgiServiceRegistry should be extended to support service.pid that references the exact component class so existing services could be used in routed without source changes/redundant source fragments.
CAMEL-10168 Don't print stacktrace when Kinesis not available on startup When using camel-spring-boot-starter and camel-aws and also excluding the aws-jdk a stacktrace is thrown on startup complaining about not finding the Kinesis model Record class not being found. (full trace below)We exclude the full aws-jdk dependency as it pulls in ALL aws jars, and thats not needed or desired when we only want integration with a couple of their services.As far as I can tell this doesn't affect the actual running or behavior of our application, but it's still not very nice to have a stacktrace thrown every time it starts up.java.lang.NoClassDefFoundError: com/amazonaws/services/kinesis/model/Record        at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_91]        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_91]        at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_91]        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.loadConverterMethods(AnnotationTypeConverterLoader.java:262) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:130) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:602) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:53) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3275) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1243) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1204) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1200) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:2326) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.spring.boot.TypeConversionConfiguration.typeConverter(TypeConversionConfiguration.java:39) [camel-spring-boot-2.17.2.jar:2.17.2]        at org.apache.camel.spring.boot.TypeConversionConfiguration$$EnhancerBySpringCGLIB$$624837ff.CGLIB$typeConverter$2(<generated>) [camel-spring-boot-2.17.2.jar:2.17.2]        at org.apache.camel.spring.boot.TypeConversionConfiguration$$EnhancerBySpringCGLIB$$624837ff$$FastClassBySpringCGLIB$$567ec3c0.invoke(<generated>) [camel-spring-boot-2.17.2.jar:2.17.2]        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) [spring-core-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) [spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.apache.camel.spring.boot.TypeConversionConfiguration$$EnhancerBySpringCGLIB$$624837ff.typeConverter(<generated>) [camel-spring-boot-2.17.2.jar:2.17.2]        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) [spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) [spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:760) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]        at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:360) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]        at org.springframework.boot.SpringApplication.run(SpringApplication.java:306) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE] Improvement Don't print stacktrace when Kinesis not available on startup When using camel-spring-boot-starter and camel-aws and also excluding the aws-jdk a stacktrace is thrown on startup complaining about not finding the Kinesis model Record class not being found. (full trace below)We exclude the full aws-jdk dependency as it pulls in ALL aws jars, and thats not needed or desired when we only want integration with a couple of their services.As far as I can tell this doesn't affect the actual running or behavior of our application, but it's still not very nice to have a stacktrace thrown every time it starts up.java.lang.NoClassDefFoundError: com/amazonaws/services/kinesis/model/Record        at java.lang.Class.getDeclaredMethods0(Native Method) ~[na:1.8.0_91]        at java.lang.Class.privateGetDeclaredMethods(Class.java:2701) ~[na:1.8.0_91]        at java.lang.Class.getDeclaredMethods(Class.java:1975) ~[na:1.8.0_91]        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.loadConverterMethods(AnnotationTypeConverterLoader.java:262) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:130) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:602) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:53) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3275) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1243) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1204) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1200) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:2326) [camel-core-2.17.2.jar:2.17.2]        at org.apache.camel.spring.boot.TypeConversionConfiguration.typeConverter(TypeConversionConfiguration.java:39) [camel-spring-boot-2.17.2.jar:2.17.2]        at org.apache.camel.spring.boot.TypeConversionConfiguration$$EnhancerBySpringCGLIB$$624837ff.CGLIB$typeConverter$2(<generated>) [camel-spring-boot-2.17.2.jar:2.17.2]        at org.apache.camel.spring.boot.TypeConversionConfiguration$$EnhancerBySpringCGLIB$$624837ff$$FastClassBySpringCGLIB$$567ec3c0.invoke(<generated>) [camel-spring-boot-2.17.2.jar:2.17.2]        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) [spring-core-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) [spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.apache.camel.spring.boot.TypeConversionConfiguration$$EnhancerBySpringCGLIB$$624837ff.typeConverter(<generated>) [camel-spring-boot-2.17.2.jar:2.17.2]        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) [spring-beans-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) [spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) [spring-context-4.2.7.RELEASE.jar:4.2.7.RELEASE]        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:118) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:760) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]        at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:360) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]        at org.springframework.boot.SpringApplication.run(SpringApplication.java:306) [spring-boot-1.3.6.RELEASE.jar:1.3.6.RELEASE]
CAMEL-10164 camel-swagger to component The idea is to allow to call a rest endpoint where you specify the swagger api the service is based upon. Then in the endpoint you select the verb/path to call. Then because of the swagger api we are able to validate and know if the payload is validate before calling the service.This can be a facade for the actual http component that does the call. So in other words its like the *to* for the rest-dsl. New Feature camel-swagger to component The idea is to allow to call a rest endpoint where you specify the swagger api the service is based upon. Then in the endpoint you select the verb/path to call. Then because of the swagger api we are able to validate and know if the payload is validate before calling the service.This can be a facade for the actual http component that does the call. So in other words its like the *to* for the rest-dsl.
CAMEL-10163 camel-twitter - Component docs - Some options are labelled wrong The label=filter should be label=filter,consumer so they are assigned to the consumer side. Task camel-twitter - Component docs - Some options are labelled wrong The label=filter should be label=filter,consumer so they are assigned to the consumer side.
CAMEL-10156 arguments of <bean method> ignored if syntax error in method call I have route definition with following BeanProcessor call:{noformat}<bean ref="service" method="method(${header.foo},${header.hoo}))" />{noformat}Note syntax error at the end - one more right parenthesis.Parameters foo and hoo are present in exchange headers.In Camel 2.17.1, method is invoked with (null,null) because the parameters are not recognized in ObjectHelper.betweenOuterPair method.In Camel 2.14.1 (from which we migrated recently), extra parenthesis is ignored and parameters are parsed correctly in ObjectHelper.between method.I will certainly fix my syntax error, though I would really appreciate either 2.14.1-behavior or rather fail fast just on route construction during Spring webapp initialization.Thanks! Improvement arguments of <bean method> ignored if syntax error in method call I have route definition with following BeanProcessor call:{noformat}<bean ref="service" method="method(${header.foo},${header.hoo}))" />{noformat}Note syntax error at the end - one more right parenthesis.Parameters foo and hoo are present in exchange headers.In Camel 2.17.1, method is invoked with (null,null) because the parameters are not recognized in ObjectHelper.betweenOuterPair method.In Camel 2.14.1 (from which we migrated recently), extra parenthesis is ignored and parameters are parsed correctly in ObjectHelper.between method.I will certainly fix my syntax error, though I would really appreciate either 2.14.1-behavior or rather fail fast just on route construction during Spring webapp initialization.Thanks!
CAMEL-10138 beanio - add support for reload of mappings In my project we are using SpringBoot (war) + Apache Camel + BeanIO for data integration purpose where first step is to implement data load from files (csv, excel, etc.) and produce extract in csv , pdf, excel, etc. formatOne of the important requirement is to be able to reload the routes and mapping configurations.Was able to reload the routes but couldn't find a way to reload beanio data format. I think there should be some provision in BeanIODataFormat to reload mappings.Have a look at the poc project etl @  https://github.com/Jayeshecs/incubate/tree/etl New Feature beanio - add support for reload of mappings In my project we are using SpringBoot (war) + Apache Camel + BeanIO for data integration purpose where first step is to implement data load from files (csv, excel, etc.) and produce extract in csv , pdf, excel, etc. formatOne of the important requirement is to be able to reload the routes and mapping configurations.Was able to reload the routes but couldn't find a way to reload beanio data format. I think there should be some provision in BeanIODataFormat to reload mappings.Have a look at the poc project etl @  https://github.com/Jayeshecs/incubate/tree/etl
CAMEL-10133 New camel-lumberjack component The {{camel-lumberjack}} component allows to receives log streams over the {{lumberjack}} protocol. For instance it can receives logs from [Filebeat|https://www.elastic.co/products/beats/filebeat].The pull-request is here : https://github.com/apache/camel/pull/1071 New Feature New camel-lumberjack component The {{camel-lumberjack}} component allows to receives log streams over the {{lumberjack}} protocol. For instance it can receives logs from [Filebeat|https://www.elastic.co/products/beats/filebeat].The pull-request is here : https://github.com/apache/camel/pull/1071
CAMEL-10130 Removed deprecated vtdxml language Has been deprecated for a while and should be removed Task Removed deprecated vtdxml language Has been deprecated for a while and should be removed
CAMEL-10127 OsgiDefaultCamelContext should call parent constructor with registry OsgiDefaultCamelContext constructor doesn't call super to pass registry so inconsistent registries are set in DefaultCamelContext and DefaultCamelContext instances.If a client create OsgiDefaultCamelContext with custom registry then (private) variable in DefaultCamelContext is not initialized and a different new instance will be created by getRegistry method.Either scope of registry in DefaultCamelContext should be changed to protected or OsgiDefaultCamelContext should pass the reference. Improvement OsgiDefaultCamelContext should call parent constructor with registry OsgiDefaultCamelContext constructor doesn't call super to pass registry so inconsistent registries are set in DefaultCamelContext and DefaultCamelContext instances.If a client create OsgiDefaultCamelContext with custom registry then (private) variable in DefaultCamelContext is not initialized and a different new instance will be created by getRegistry method.Either scope of registry in DefaultCamelContext should be changed to protected or OsgiDefaultCamelContext should pass the reference.
CAMEL-10126 Aggregate - Has name clash for some options The aggregate EIP has two option you can set as both attributes and expressions, and this causes a name clash.See screenshot Improvement Aggregate - Has name clash for some options The aggregate EIP has two option you can set as both attributes and expressions, and this causes a name clash.See screenshot
CAMEL-10125 WARN on startup: "No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@3d484181" When using JettyHttpComponent with the default ErrorHandler a warning is logged on startup: "No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@3d484181".It doesn't seem to do any harm, but it is annoying.. I'll propose a fix in a PR. Improvement WARN on startup: "No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@3d484181" When using JettyHttpComponent with the default ErrorHandler a warning is logged on startup: "No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@3d484181".It doesn't seem to do any harm, but it is annoying.. I'll propose a fix in a PR.
CAMEL-10124 Karaf commands - Switch to non deprecated The karaf commands are using    <dependency>      <groupId>org.apache.karaf.shell</groupId>      <artifactId>org.apache.karaf.shell.console</artifactId>      <version>${karaf-version}</version>    </dependency>And that module is deprecated. There is some other module to be used. Improvement Karaf commands - Switch to non deprecated The karaf commands are using    <dependency>      <groupId>org.apache.karaf.shell</groupId>      <artifactId>org.apache.karaf.shell.console</artifactId>      <version>${karaf-version}</version>    </dependency>And that module is deprecated. There is some other module to be used.
CAMEL-10122 spring boot - Auto configuration for http component has prefix https It should be http and not https. That is because this component does http and https at the same time. Improvement spring boot - Auto configuration for http component has prefix https It should be http and not https. That is because this component does http and https at the same time.
CAMEL-10119 Upgrade to Spring 4.3.x We should upgrade to 4.3.x as its the new main line now.  Improvement Upgrade to Spring 4.3.x We should upgrade to 4.3.x as its the new main line now. 
CAMEL-10114 camel-spring-boot - Allow to configure stream caching using application.properties Today you can only turn it on|off. We should have all the other options you can configure.See initStreamCachingStrategy in AbstractCamelContextFactoryBean in camel-core-xml Improvement camel-spring-boot - Allow to configure stream caching using application.properties Today you can only turn it on|off. We should have all the other options you can configure.See initStreamCachingStrategy in AbstractCamelContextFactoryBean in camel-core-xml
CAMEL-10113 camel-spring-boot - Add support for auto detection of advanced configuration See CAMEL-10109We should allow to configure many of these in spring bean with just a @bean annotationhttp://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html Improvement camel-spring-boot - Add support for auto detection of advanced configuration See CAMEL-10109We should allow to configure many of these in spring bean with just a @bean annotationhttp://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html
CAMEL-10109 Camel Spring Boot does not load EventNotifiers When using the camel spring XML, {{EventNotifier}} objects in the Spring context are automatically detected and used by the camel context. This is not the case when using camel-spring-boot, but it should be.See http://camel.apache.org/eventnotifier-to-log-details-about-all-sent-exchanges.html Improvement Camel Spring Boot does not load EventNotifiers When using the camel spring XML, {{EventNotifier}} objects in the Spring context are automatically detected and used by the camel context. This is not the case when using camel-spring-boot, but it should be.See http://camel.apache.org/eventnotifier-to-log-details-about-all-sent-exchanges.html
CAMEL-10098 AbstractJdbcMessageIdRepository<T> is not actually parameterizable The org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository class is advertised as being extendable in the documentation, and is declared as parameterized in the source code, so that developers "can extend to build custom JDBC idempotent repository."However, attempting to parameterize with anything other than String fails. The cause appears to be org.apache.camel.processor.idempotent.IdempotentConsumer, whose process() method assumes that the key is always a String before handing it off to the repository instance (which may in fact be a AbstractJdbcMessageIdRepository<T> where T is *not* String). The results is an unavoidable ClassCastException.Here is the relevant bit from a stack trace using {{public class IdempRepository extends AbstractJdbcMessageIdRepository<IdempKey>}}:{code}Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to my.custom.IdempKey	at my.custom.IdempRepository.queryForInt(IdempRepository.java:18)[515:my-bundle:1.0.0.SNAPSHOT]	at org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository$1.doInTransaction(AbstractJdbcMessageIdRepository.java:122)[273:org.apache.camel.camel-sql:2.15.1.redhat-620133]	at org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository$1.doInTransaction(AbstractJdbcMessageIdRepository.java:120)[273:org.apache.camel.camel-sql:2.15.1.redhat-620133]	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131)[202:org.apache.servicemix.bundles.spring-tx:3.2.12.RELEASE_1]	at org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository.add(AbstractJdbcMessageIdRepository.java:120)[273:org.apache.camel.camel-sql:2.15.1.redhat-620133]	at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:94)[198:org.apache.camel.camel-core:2.15.1.redhat-620133]{code} Improvement AbstractJdbcMessageIdRepository<T> is not actually parameterizable The org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository class is advertised as being extendable in the documentation, and is declared as parameterized in the source code, so that developers "can extend to build custom JDBC idempotent repository."However, attempting to parameterize with anything other than String fails. The cause appears to be org.apache.camel.processor.idempotent.IdempotentConsumer, whose process() method assumes that the key is always a String before handing it off to the repository instance (which may in fact be a AbstractJdbcMessageIdRepository<T> where T is *not* String). The results is an unavoidable ClassCastException.Here is the relevant bit from a stack trace using {{public class IdempRepository extends AbstractJdbcMessageIdRepository<IdempKey>}}:{code}Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to my.custom.IdempKey	at my.custom.IdempRepository.queryForInt(IdempRepository.java:18)[515:my-bundle:1.0.0.SNAPSHOT]	at org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository$1.doInTransaction(AbstractJdbcMessageIdRepository.java:122)[273:org.apache.camel.camel-sql:2.15.1.redhat-620133]	at org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository$1.doInTransaction(AbstractJdbcMessageIdRepository.java:120)[273:org.apache.camel.camel-sql:2.15.1.redhat-620133]	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131)[202:org.apache.servicemix.bundles.spring-tx:3.2.12.RELEASE_1]	at org.apache.camel.processor.idempotent.jdbc.AbstractJdbcMessageIdRepository.add(AbstractJdbcMessageIdRepository.java:120)[273:org.apache.camel.camel-sql:2.15.1.redhat-620133]	at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:94)[198:org.apache.camel.camel-core:2.15.1.redhat-620133]{code}
CAMEL-10096 Camel tracer with stream caching should tracer after stream cache has been setup When using tracer then it may run before stream caching gets kicked-in, which means the tracer may read the input stream causing the stream to not be re-readable by the stream caching, and therefore cause it to be empty.This only happens if you turn on stream cache bodies on the tracer, which is off by default. And if the input message is stream based that is no re-readable by itself.We should ensure the stream caching advice is run first so its applied before any tracer and other stuff going on. Improvement Camel tracer with stream caching should tracer after stream cache has been setup When using tracer then it may run before stream caching gets kicked-in, which means the tracer may read the input stream causing the stream to not be re-readable by the stream caching, and therefore cause it to be empty.This only happens if you turn on stream cache bodies on the tracer, which is off by default. And if the input message is stream based that is no re-readable by itself.We should ensure the stream caching advice is run first so its applied before any tracer and other stuff going on.
CAMEL-10095 bug in "remove whitespace noise from uri" in:{noformat}org.apache.camel.spring.handler.CamelNamespaceHandler.doBeforeParse(Node){noformat}on row 107 is:{noformat}String changed = value.replaceAll("\\s{2,}", "");{noformat}but it removes all the white chars that are in an even number (2,4,6,8 etc) Improvement bug in "remove whitespace noise from uri" in:{noformat}org.apache.camel.spring.handler.CamelNamespaceHandler.doBeforeParse(Node){noformat}on row 107 is:{noformat}String changed = value.replaceAll("\\s{2,}", "");{noformat}but it removes all the white chars that are in an even number (2,4,6,8 etc)
CAMEL-10092 Camel catalog - Include offline details about previous releases Related to CAMEL-9729We can now download older versions of camel-catalog JAR over the internet when using camel-catalog to switch to a different Camel version.But it would be good if the camel-catalog had included offline in the same JAR all the previous versions of the catalog (starting with 2.17.0) so the data is pre-downloaded.This can be done as part of the build of camel-catalog to make it download these older JARs and include their json schema files in the built camel-catalog.We then need to store the data in version named folders, eg component/2170 component/2171 etc. New Feature Camel catalog - Include offline details about previous releases Related to CAMEL-9729We can now download older versions of camel-catalog JAR over the internet when using camel-catalog to switch to a different Camel version.But it would be good if the camel-catalog had included offline in the same JAR all the previous versions of the catalog (starting with 2.17.0) so the data is pre-downloaded.This can be done as part of the build of camel-catalog to make it download these older JARs and include their json schema files in the built camel-catalog.We then need to store the data in version named folders, eg component/2170 component/2171 etc.
CAMEL-10086 Remove Pattern.compile usages Please heck Pattern.compile usage across Camel source code - also *not* direct usage.For example: Whenever one of these methods are used from String class a Pattern.compile() is utilized:- matches- replaceFirst- replaceAll- replace- split: has an optimization and for certain characters it doesn’t use Pattern.compile.For example:GenericFileConsumer.isMatched calls name.matches(endpoint.getExclude())GenericFileEndpoint could contain also excludePattern as well.Possible solution:Walk through the code and replace usages of these methods with static Pattern variables. Improvement Remove Pattern.compile usages Please heck Pattern.compile usage across Camel source code - also *not* direct usage.For example: Whenever one of these methods are used from String class a Pattern.compile() is utilized:- matches- replaceFirst- replaceAll- replace- split: has an optimization and for certain characters it doesn't use Pattern.compile.For example:GenericFileConsumer.isMatched calls name.matches(endpoint.getExclude())GenericFileEndpoint could contain also excludePattern as well.Possible solution:Walk through the code and replace usages of these methods with static Pattern variables.
CAMEL-10081 Camel OSGi examples - Update readme for karaf 4 style We should look at all the readme.md files for the osgi examples and make their instructions to be for karaf 4. See for example: https://github.com/apache/camel/commit/13d1255ec54467093aefe4c18f19a50bb736da6b Improvement Camel OSGi examples - Update readme for karaf 4 style We should look at all the readme.md files for the osgi examples and make their instructions to be for karaf 4. See for example: https://github.com/apache/camel/commit/13d1255ec54467093aefe4c18f19a50bb736da6b
CAMEL-10078 Add Field ordering feature in QuickFixj camel Hi,Generally message are sorted as per tag key. Some venue  accept message in different order  . I would request you to please provide this feature in Next release. If not possible due to time constraint. Please give me hint so i can customise myself . New Feature Add Field ordering feature in QuickFixj camel Hi,Generally message are sorted as per tag key. Some venue  accept message in different order  . I would request you to please provide this feature in Next release. If not possible due to time constraint. Please give me hint so i can customise myself .
CAMEL-10077 Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20 steps to reproduce.* go to http://camel.apache.org/file2.html* scroll untill "Using a JPA based idempotent repository"* under the sentence "Then we need to setup a Spring jpaTemplate in the spring XML file:" there is the following error message: "Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20" Task Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20 steps to reproduce.* go to http://camel.apache.org/file2.html* scroll untill "Using a JPA based idempotent repository"* under the sentence "Then we need to setup a Spring jpaTemplate in the spring XML file:" there is the following error message: "Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20"
CAMEL-10075 using-propertyplaceholder - rror formatting macro: snippet: java.lang.IndexOutOfBoundsException Doc page reports this error:{code}Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20{code}See attached screenshot!Screenshot from 2016-06-20 12-58-06.png! Task using-propertyplaceholder - rror formatting macro: snippet: java.lang.IndexOutOfBoundsException Doc page reports this error:{code}Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20{code}See attached screenshot!Screenshot from 2016-06-20 12-58-06.png!
CAMEL-10062 For specialized Dataformats, provide default value in catalog For bindy dataformat, 3 different dataformats are provided:bindy-csvbindy-fixedbindy-kpvIn their respective JSon there is no default value provided for the type, no defautl value is provided. it would be better to provide defautl value corresponding to their name:bindy-csv --> Csvbindy-fixed -> Fixedbindy-kpv -> KeyValueSame applies for json dataformats Improvement For specialized Dataformats, provide default value in catalog For bindy dataformat, 3 different dataformats are provided:bindy-csvbindy-fixedbindy-kpvIn their respective JSon there is no default value provided for the type, no defautl value is provided. it would be better to provide defautl value corresponding to their name:bindy-csv --> Csvbindy-fixed -> Fixedbindy-kpv -> KeyValueSame applies for json dataformats
CAMEL-10059 Add option to generate Java 1.8 Optional<?> based DTOs See GitHub PR: https://github.com/apache/camel/pull/1033Also upgrades to Jackson 2.x to allow injecting a custom {{ObjectMapper}} into {{SalesforceEndpointConfig}}, which in turn allows registering the {{Jdk8Module}} when using Java 1.8, which handles (de)serializing of {{Optional<?>}} in a reasonable manner. Jackson 1.x does not have the {{Jdk8Module}}.Note that this requires that the project using the plugin is itself using Java 1.8+.To use {{Jdk8Module}}, add this dependency:{code:xml}		<dependency>			<groupId>com.fasterxml.jackson.datatype</groupId>			<artifactId>jackson-datatype-jdk8</artifactId>		</dependency>{code}Then configure a custom {{ObjectMapper}} like the following snippet:{code}import org.apache.camel.component.salesforce.SalesforceEndpointConfig;...import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;...	@Bean	public SalesforceEndpointConfig salesforceEndpointConfig() {		SalesforceEndpointConfig salesforceEndpointConfig = new SalesforceEndpointConfig();		...		ObjectMapper objectMapper = new ObjectMapper();		objectMapper.registerModule(new Jdk8Module());		objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);		salesforceEndpointConfig.setObjectMapper(objectMapper);		return salesforceEndpointConfig;	}{code} New Feature Add option to generate Java 1.8 Optional<?> based DTOs See GitHub PR: https://github.com/apache/camel/pull/1033Also upgrades to Jackson 2.x to allow injecting a custom {{ObjectMapper}} into {{SalesforceEndpointConfig}}, which in turn allows registering the {{Jdk8Module}} when using Java 1.8, which handles (de)serializing of {{Optional<?>}} in a reasonable manner. Jackson 1.x does not have the {{Jdk8Module}}.Note that this requires that the project using the plugin is itself using Java 1.8+.To use {{Jdk8Module}}, add this dependency:{code:xml}		<dependency>			<groupId>com.fasterxml.jackson.datatype</groupId>			<artifactId>jackson-datatype-jdk8</artifactId>		</dependency>{code}Then configure a custom {{ObjectMapper}} like the following snippet:{code}import org.apache.camel.component.salesforce.SalesforceEndpointConfig;...import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;...	@Bean	public SalesforceEndpointConfig salesforceEndpointConfig() {		SalesforceEndpointConfig salesforceEndpointConfig = new SalesforceEndpointConfig();		...		ObjectMapper objectMapper = new ObjectMapper();		objectMapper.registerModule(new Jdk8Module());		objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);		salesforceEndpointConfig.setObjectMapper(objectMapper);		return salesforceEndpointConfig;	}{code}
CAMEL-10057 Support Spring modular batch config  Currently the spring-batch:jobName component cannot find the jobName in the registry if the project is configured with modular=true in Spring Batch. In a modular batch project the jobs are created in a child context and reference to the Job is typically located using the configured JobRegistry. I suggest an option for injecting a JobRegistry that if set is used to locate Jobs instead of directly in the camel registry. Improvement Support Spring modular batch config  Currently the spring-batch:jobName component cannot find the jobName in the registry if the project is configured with modular=true in Spring Batch. In a modular batch project the jobs are created in a child context and reference to the Job is typically located using the configured JobRegistry. I suggest an option for injecting a JobRegistry that if set is used to locate Jobs instead of directly in the camel registry.
CAMEL-10050 Routing slip - Consider not caching error handlers See CAMEL-10048If the routing slip creates many unique slip uri's then we cache error handlers. We should instead create the error handler, use it, and then delete/stop when its done. Improvement Routing slip - Consider not caching error handlers See CAMEL-10048If the routing slip creates many unique slip uri's then we cache error handlers. We should instead create the error handler, use it, and then delete/stop when its done.
CAMEL-10049 Context scoped processors should be shutdown when CamelContext is shutting down See nabblehttp://camel.465427.n5.nabble.com/Context-scoped-onCompletion-not-closing-RabbitMQ-connection-tp5783908.html Improvement Context scoped processors should be shutdown when CamelContext is shutting down See nabblehttp://camel.465427.n5.nabble.com/Context-scoped-onCompletion-not-closing-RabbitMQ-connection-tp5783908.html
CAMEL-10045 camel-spring-boot - Allow to load sensitive options from external file So you can configure this externally from your app / not hardcode. So options such as password can be loaded from a file mounted / ENV or something else. Improvement camel-spring-boot - Allow to load sensitive options from external file So you can configure this externally from your app / not hardcode. So options such as password can be loaded from a file mounted / ENV or something else.
CAMEL-10044 Mark secret options such as password/passphrase so tooling would be aware So we would be aware that this is a sensitive option such as password for the FTP server and that we should not show/hide that in tooling / JMX attributes etc.We can do this with some option to @Metadata annotation you can add to the fields in the components/endpoints/data format options. Improvement Mark secret options such as password/passphrase so tooling would be aware So we would be aware that this is a sensitive option such as password for the FTP server and that we should not show/hide that in tooling / JMX attributes etc.We can do this with some option to @Metadata annotation you can add to the fields in the components/endpoints/data format options.
CAMEL-10041 camel-spring-boot - Add data format options as type-safe configuration properties Just as we generate for component options, we could do this for data formats as well. Improvement camel-spring-boot - Add data format options as type-safe configuration properties Just as we generate for component options, we could do this for data formats as well.
CAMEL-10036 Dynamicaly Loaded XML Rests Bind to all RestConfigurations When dynamically loading a Rests xml, you need to call:{code}xmlDef.asRouteDefinition(camelContext); {code}to created the routes, but it creates routes for every RestConfiguration in the camelContext.  This can result in duplicate route errors. We should also be able to choose which RestConfiguration to bind to.  Can we get the following Method added to org.camel.model.rest.RestDefinition:{code}public List<RouteDefinition> asRouteDefinition(CamelContext camelContext, RestConfiguration restConfig) {         // sanity check this rest definition do not have duplicates         validateUniquePaths();         List<RouteDefinition> answer = new ArrayList<RouteDefinition>();                 addRouteDefinition(camelContext, answer, restConfig.getComponent());                 return answer;     }{code} Improvement Dynamicaly Loaded XML Rests Bind to all RestConfigurations When dynamically loading a Rests xml, you need to call:{code}xmlDef.asRouteDefinition(camelContext); {code}to created the routes, but it creates routes for every RestConfiguration in the camelContext.  This can result in duplicate route errors. We should also be able to choose which RestConfiguration to bind to.  Can we get the following Method added to org.camel.model.rest.RestDefinition:{code}public List<RouteDefinition> asRouteDefinition(CamelContext camelContext, RestConfiguration restConfig) {         // sanity check this rest definition do not have duplicates         validateUniquePaths();         List<RouteDefinition> answer = new ArrayList<RouteDefinition>();                 addRouteDefinition(camelContext, answer, restConfig.getComponent());                 return answer;     }{code}
CAMEL-10029 Allow camel-jackson to unmarshall more type by default By default camel jackson unmarshaller accept to read only json which are map (eg the json document begin with "{" ). If you want to be able to unmarshal more json document like simple string or list you have to specify the unmarshalTypeName which is not very convenient, eg:{noformat}<unmarshal>    <json library="Jackson" unmarshalTypeName="java.lang.Object"/></unmarshal>{noformat}You should be able to unmarshall any type of json document with the default setting, eg:{noformat}<unmarshal>    <json library="Jackson"/></unmarshal>{noformat} Improvement Allow camel-jackson to unmarshall more type by default By default camel jackson unmarshaller accept to read only json which are map (eg the json document begin with "{" ). If you want to be able to unmarshal more json document like simple string or list you have to specify the unmarshalTypeName which is not very convenient, eg:{noformat}<unmarshal>    <json library="Jackson" unmarshalTypeName="java.lang.Object"/></unmarshal>{noformat}You should be able to unmarshall any type of json document with the default setting, eg:{noformat}<unmarshal>    <json library="Jackson"/></unmarshal>{noformat}
CAMEL-10023 camel-mongodb - Consider sortBy header when performing findOneByQuery operation There is a often a requirement to fetch the min/max record from Mongo based on a particular field. Typically the operation is performed using syntax similar to:  db.collection.find().sort({_id: -1}).limit(1) or  db.collection.findOne({$query:{},$orderby:{_id:-1}})As implemented the findOneByQuery operation currently ignores the sortBy header. This trivial patch passes sortBy to the sort parameter of findOne(), if set.Helpfully, if the projection parameter is null findOne() returns all fields, so the state of fieldFilter is not checked before passing when the sortBy header has been set. Improvement camel-mongodb - Consider sortBy header when performing findOneByQuery operation There is a often a requirement to fetch the min/max record from Mongo based on a particular field. Typically the operation is performed using syntax similar to:  db.collection.find().sort({_id: -1}).limit(1) or  db.collection.findOne({$query:{},$orderby:{_id:-1}})As implemented the findOneByQuery operation currently ignores the sortBy header. This trivial patch passes sortBy to the sort parameter of findOne(), if set.Helpfully, if the projection parameter is null findOne() returns all fields, so the state of fieldFilter is not checked before passing when the sortBy header has been set.
CAMEL-10022 add a Spring Boot HealthIndicator to check that all camel contexts have started up and all the routes started OK see the section on writing custom health indicators:http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#_writing_custom_healthindicatorsit'd be awesome if any spring boot camel application automatically got a health indicator to show if any camel contexts or routes fail to startup (or fail during their lifetime) New Feature add a Spring Boot HealthIndicator to check that all camel contexts have started up and all the routes started OK see the section on writing custom health indicators:http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#_writing_custom_healthindicatorsit'd be awesome if any spring boot camel application automatically got a health indicator to show if any camel contexts or routes fail to startup (or fail during their lifetime)
CAMEL-10021 Class component - Should allow to call static method on class without ctr For example kotlin functions will be compiled as static methods on a class without a ctr.Seehttps://github.com/fabric8io/funktion/issues/9#issuecomment-223590803 Improvement Class component - Should allow to call static method on class without ctr For example kotlin functions will be compiled as static methods on a class without a ctr.Seehttps://github.com/fabric8io/funktion/issues/9#issuecomment-223590803
CAMEL-10020 Camel KafkaProducer should be able to return back RecordMetadata Current implementation of KafkaProducer throws away RecordMetadata; it is  returned as part of the callback and also as part of the synchronous get() call. RecordMetadata contains important information about the partition and offset of the record as saved by the broker. Improvement Camel KafkaProducer should be able to return back RecordMetadata Current implementation of KafkaProducer throws away RecordMetadata; it is  returned as part of the callback and also as part of the synchronous get() call. RecordMetadata contains important information about the partition and offset of the record as saved by the broker.
CAMEL-10019 camel-mongodb - Consider sortBy header when performing findOneByQuery operation This patch implements the same improvement as CAMEL-10023 in a manner that cleanly applies to the refactored camel-mongodb in master Improvement camel-mongodb - Consider sortBy header when performing findOneByQuery operation This patch implements the same improvement as CAMEL-10023 in a manner that cleanly applies to the refactored camel-mongodb in master
CAMEL-10007 camel-zipfile - ZipAggregationStrategy should ignore zero byte files See SOhttp://stackoverflow.com/questions/37520347/camel-zipaggregator-stuck-after-camellockWe should detect that the input stream is empty on begin, so we wont cause some kind of lock/issue for windows users. Improvement camel-zipfile - ZipAggregationStrategy should ignore zero byte files See SOhttp://stackoverflow.com/questions/37520347/camel-zipaggregator-stuck-after-camellockWe should detect that the input stream is empty on begin, so we wont cause some kind of lock/issue for windows users.
CAMEL-10006 Create MongoDB Idempotent repository HIFor projects that have an uderlaying mongo database as a persistance engine, it'd be nice to create a mongodb IdempotentRepository.If it would be accepted I can create a PR@davsclausSounds ok? New Feature Create MongoDB Idempotent repository HIFor projects that have an uderlaying mongo database as a persistance engine, it'd be nice to create a mongodb IdempotentRepository.If it would be accepted I can create a PR@davsclausSounds ok?
CAMEL-10004 PollEnrich - Allow to bridge error handler If you use pollEnrich to poll an URI such as file/ftp, then its using the PollingConsumer API that is designed to return an exchange, and the enricher will attempt to poll until an exchange is succesfull retrieved. However you may want to receive any exceptions during polling to be propagated to the pollEnrich so you can let routing error handler deal with it. Improvement PollEnrich - Allow to bridge error handler If you use pollEnrich to poll an URI such as file/ftp, then its using the PollingConsumer API that is designed to return an exchange, and the enricher will attempt to poll until an exchange is succesfull retrieved. However you may want to receive any exceptions during polling to be propagated to the pollEnrich so you can let routing error handler deal with it.
CAMEL-10003 camel-netty4 - Add support for native transport Seehttp://netty.io/wiki/native-transports.html Improvement camel-netty4 - Add support for native transport Seehttp://netty.io/wiki/native-transports.html
CAMEL-10001 Add support for using any property placeholders on load balancers See SOhttp://stackoverflow.com/questions/37535150/camel-loadbalance-failover-maximumfailoverattempts-doesnt-support-propertiesThe model does not include this for the load balancer EIPs. Improvement Add support for using any property placeholders on load balancers See SOhttp://stackoverflow.com/questions/37535150/camel-loadbalance-failover-maximumfailoverattempts-doesnt-support-propertiesThe model does not include this for the load balancer EIPs.
CAMEL-9990 camel-ftp: Excessive loggging: JSCH -> Permanently added 'X' (RSA) to the list of known hosts. Excessive logging with the misleading message:{code}JSCH -> Permanently added 'X' (RSA) to the list of known hosts.{code}It is misleading because the addition is not permament. It repeats with every SFTP connection. It is logged as a WARN which creates unnecesary review and filtering when analyzing the log files.The previous ticket (CAMEL-8202) resolved this issue for camel-ssh rather than camel-ftp. Improvement camel-ftp: Excessive loggging: JSCH -> Permanently added 'X' (RSA) to the list of known hosts. Excessive logging with the misleading message:{code}JSCH -> Permanently added 'X' (RSA) to the list of known hosts.{code}It is misleading because the addition is not permament. It repeats with every SFTP connection. It is logged as a WARN which creates unnecesary review and filtering when analyzing the log files.The previous ticket (CAMEL-8202) resolved this issue for camel-ssh rather than camel-ftp.
CAMEL-9980 Allow to call OGNL on simple bodyAs function It would be good to be able to do{code}bodyAs(String).toUpperCase()mandatoryBodyAs(String).toUpperCase(){code}That will convert the body to a string type first and then invoke the ognl. You can use any type not only just String. New Feature Allow to call OGNL on simple bodyAs function It would be good to be able to do{code}bodyAs(String).toUpperCase()mandatoryBodyAs(String).toUpperCase(){code}That will convert the body to a string type first and then invoke the ognl. You can use any type not only just String.
CAMEL-9979 Bean parameter binding should reset stream cache before evaluate message body See nabblehttp://camel.465427.n5.nabble.com/Inject-multiple-JsonPath-parameters-to-bean-method-tp5782825.html Improvement Bean parameter binding should reset stream cache before evaluate message body See nabblehttp://camel.465427.n5.nabble.com/Inject-multiple-JsonPath-parameters-to-bean-method-tp5782825.html
CAMEL-9974 camel-sjms - Add completionPredicate to batch component So we can trigger the completion based on a predicate.http://camel.apache.org/sjms-batch.html New Feature camel-sjms - Add completionPredicate to batch component So we can trigger the completion based on a predicate.http://camel.apache.org/sjms-batch.html
CAMEL-9971 file2 component should support appending chars in append mode I've found some code in a route that writes a message to a file with `fileExist=Append` as an option.To my surprise it first goes through a processor that adds a newline character to the end of the text message. It seems our reader (Logstash) requires one-message-per-line in it's input files.Of course, if we re-pointed ourselves at a message broker instead of file: the newline-appender processor becomes redundant and thus our code would need to change so it doesn't feel right at all.If we had a `appendChars` option we could do `&appendChars=\n` instead on the file endpoint uri which feels more natural. Improvement file2 component should support appending chars in append mode I've found some code in a route that writes a message to a file with `fileExist=Append` as an option.To my surprise it first goes through a processor that adds a newline character to the end of the text message. It seems our reader (Logstash) requires one-message-per-line in it's input files.Of course, if we re-pointed ourselves at a message broker instead of file: the newline-appender processor becomes redundant and thus our code would need to change so it doesn't feel right at all.If we had a `appendChars` option we could do `&appendChars=\n` instead on the file endpoint uri which feels more natural.
CAMEL-9969 Adding a component for Telegram I think it is worth adding a camel-telegram component, to allow users integrating their apps with Telegram (https://telegram.org/).Telegram is a popular messaging application (similar to WhatsApp), providing good security mechanisms and an open source communication protocol and APIs.According to some statistics (https://telegram.org/blog/100-million), it has about 100 million active users worldwide (as of May 2016).Telegram allows registering Bots (accounts operated by software) that can be ultimately used to let a Camel based application communicate with other Telegram users.I have developed a first (working) draft of the camel component and I'm currently working on it to include tests and additional features. New Feature Adding a component for Telegram I think it is worth adding a camel-telegram component, to allow users integrating their apps with Telegram (https://telegram.org/).Telegram is a popular messaging application (similar to WhatsApp), providing good security mechanisms and an open source communication protocol and APIs.According to some statistics (https://telegram.org/blog/100-million), it has about 100 million active users worldwide (as of May 2016).Telegram allows registering Bots (accounts operated by software) that can be ultimately used to let a Camel based application communicate with other Telegram users.I have developed a first (working) draft of the camel component and I'm currently working on it to include tests and additional features.
CAMEL-9966 Restlet - Should not enable stream by default See nabblehttp://camel.465427.n5.nabble.com/Restlet-GET-request-can-cause-Memeory-leak-Stream-not-closed-due-to-CAMEL-9611-tp5782546.htmlAnd CAMEL-9611If you do not read the response from restlet producer call then due to streaming then the restlet do not close its internal stream buffer.If people want to use streaming then they need to enable this explicit. And there is an option to turn on an auto close stream also. Improvement Restlet - Should not enable stream by default See nabblehttp://camel.465427.n5.nabble.com/Restlet-GET-request-can-cause-Memeory-leak-Stream-not-closed-due-to-CAMEL-9611-tp5782546.htmlAnd CAMEL-9611If you do not read the response from restlet producer call then due to streaming then the restlet do not close its internal stream buffer.If people want to use streaming then they need to enable this explicit. And there is an option to turn on an auto close stream also.
CAMEL-9965 Throw meaningful exception of a streamed body has been consumed already As I see in CAMEL-9864 there is an incompatible change about the usage of http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Message.html#getBody%28java.lang.Class%29 in case the underlying body is subject to streaming.I understand the reasons for that change, but usually Java getters are assumed to be not modifying the underlying object.So it would be nice to add a small hint in the API that indicates that getBody may not be callable multiple times (esp. in context of streams)In case a stream was already consumed throwing a meaningful exception with a hint about how to fix this (either *not* call the method altogether or switching on stream caching ...) would be great. Improvement Throw meaningful exception of a streamed body has been consumed already As I see in CAMEL-9864 there is an incompatible change about the usage of http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Message.html#getBody%28java.lang.Class%29 in case the underlying body is subject to streaming.I understand the reasons for that change, but usually Java getters are assumed to be not modifying the underlying object.So it would be nice to add a small hint in the API that indicates that getBody may not be callable multiple times (esp. in context of streams)In case a stream was already consumed throwing a meaningful exception with a hint about how to fix this (either *not* call the method altogether or switching on stream caching ...) would be great.
CAMEL-9963 camel-blueprint - Namespace parser should skip placeholders for component dependencies See nabblehttp://camel.465427.n5.nabble.com/Restriction-in-RestConfiguration-with-blueprint-tp5782461.html Improvement camel-blueprint - Namespace parser should skip placeholders for component dependencies See nabblehttp://camel.465427.n5.nabble.com/Restriction-in-RestConfiguration-with-blueprint-tp5782461.html
CAMEL-9957 camel-kafka producer sends the message in an async way CAMEL-9790 made the sync sending, it could cause some trouble when ppl has lots of data to send.We need to provide an async way to send the message to kafka.  Improvement camel-kafka producer sends the message in an async way CAMEL-9790 made the sync sending, it could cause some trouble when ppl has lots of data to send.We need to provide an async way to send the message to kafka. 
CAMEL-9955 Add uptimeMillis as JMX attribute to CamelContextMBean So we have that as a long value also, as uptime is a human readable string text. Improvement Add uptimeMillis as JMX attribute to CamelContextMBean So we have that as a long value also, as uptime is a human readable string text.
CAMEL-9954 FormatFactory should be real Factory-pattern The class org.apache.camel.dataformat.bindy.FormatFactory is a utility class which supports a factory-pattern.According to the factory-pattern this should not be a utility-class but it should be a class that can be instantiated.This class should implement an interface or extend an abstract class.Maybe we should make a factory per Format and choose amongst the following solutions:* let each formatter answer the question about being able to format for certain formating-options (based on type and optionally the pattern for all "numeric" format factories);* put all formatters in a hashmap with the type as a key.With this last solution all the "numeric" format factory should decide which format to return (e.g. BytePatternFormat or ByteFormat based on the pattern being empty or not) Improvement FormatFactory should be real Factory-pattern The class org.apache.camel.dataformat.bindy.FormatFactory is a utility class which supports a factory-pattern.According to the factory-pattern this should not be a utility-class but it should be a class that can be instantiated.This class should implement an interface or extend an abstract class.Maybe we should make a factory per Format and choose amongst the following solutions:* let each formatter answer the question about being able to format for certain formating-options (based on type and optionally the pattern for all "numeric" format factories);* put all formatters in a hashmap with the type as a key.With this last solution all the "numeric" format factory should decide which format to return (e.g. BytePatternFormat or ByteFormat based on the pattern being empty or not)
CAMEL-9943 Expose mail session as a URI option for camel-mail endpoints In a JavaEE container, mail sessions are typically managed resources that are looked up from JNDI or injected as resources into objects.Right now the only way I see to configure a custom session for camel-mail is by:{code}mailEndpoint.getConfiguration().setSession(myMailSession);{code}Or by implementing a custom JavaMailSender.It'd be nicer if we could do something like:{code}from("direct:start").to("smtp://localhost?session=#myMailSession"){code} New Feature Expose mail session as a URI option for camel-mail endpoints In a JavaEE container, mail sessions are typically managed resources that are looked up from JNDI or injected as resources into objects.Right now the only way I see to configure a custom session for camel-mail is by:{code}mailEndpoint.getConfiguration().setSession(myMailSession);{code}Or by implementing a custom JavaMailSender.It'd be nicer if we could do something like:{code}from("direct:start").to("smtp://localhost?session=#myMailSession"){code}
CAMEL-9940 ProducerTemplate - Make extract result set part of UoW So any conversion or part of the extract result set is done within the UoW as otherwise resources such as buffers and whatnot may have been closed.This only affects when using raw buffers from netty/jetty etc. So if we can get the task of conversion from the producertemplate/producercache to run before the UoW done then the coversions is able to work on those buffers.This helps with CAMEL-9040 Improvement ProducerTemplate - Make extract result set part of UoW So any conversion or part of the extract result set is done within the UoW as otherwise resources such as buffers and whatnot may have been closed.This only affects when using raw buffers from netty/jetty etc. So if we can get the task of conversion from the producertemplate/producercache to run before the UoW done then the coversions is able to work on those buffers.This helps with CAMEL-9040
CAMEL-9938 TimerPatternConverter - Should be more strict So it would report an error if attempting to use delay=5ssegegegegqergergeg as today its too lenient and assume people do not make typo's. So if you type 5s then its 5 seconds. Improvement TimerPatternConverter - Should be more strict So it would report an error if attempting to use delay=5ssegegegegqergergeg as today its too lenient and assume people do not make typo's. So if you type 5s then its 5 seconds.
CAMEL-9937 camel-catalog - Add api to validate time pattern So if people configure endpoints with delay=5s to indicate 5 seconds, we have a api that can validate if 5s is a valid pattern or not. Improvement camel-catalog - Add api to validate time pattern So if people configure endpoints with delay=5s to indicate 5 seconds, we have a api that can validate if 5s is a valid pattern or not.
CAMEL-9936 Camel-parent 17.0 uses incompatible logback-classic and slf4j-api Camel-parent 17.0 uses logback-classic:1.1.5 and slf4j-api:1.7.13These are not compatible and produce the following error: java.lang.NoClassDefFoundError: org/slf4j/event/LoggingEventSee the following page:http://www.slf4j.org/codes.htmlLogback-classic version 1.1.4 and later require slf4j-api version 1.7.15 or later.With an earlier slf4j-api.jar in the classpath, attempting introspection of a Logger instance returned by logback version 1.1.4 or later will result in a NoClassDefFoundError similar to that shown below.... Task Camel-parent 17.0 uses incompatible logback-classic and slf4j-api Camel-parent 17.0 uses logback-classic:1.1.5 and slf4j-api:1.7.13These are not compatible and produce the following error: java.lang.NoClassDefFoundError: org/slf4j/event/LoggingEventSee the following page:http://www.slf4j.org/codes.htmlLogback-classic version 1.1.4 and later require slf4j-api version 1.7.15 or later.With an earlier slf4j-api.jar in the classpath, attempting introspection of a Logger instance returned by logback version 1.1.4 or later will result in a NoClassDefFoundError similar to that shown below....
CAMEL-9932 sql-stored - Add support for arrays in grammar See nabblehttp://camel.465427.n5.nabble.com/SQL-Stored-Procedure-Component-2-17-0-Parsing-Error-tp5782030.html Improvement sql-stored - Add support for arrays in grammar See nabblehttp://camel.465427.n5.nabble.com/SQL-Stored-Procedure-Component-2-17-0-Parsing-Error-tp5782030.html
CAMEL-9930 camel timer docs - add supported formats Documentation of camel timer component http://camel.apache.org/timer.htmldescribes option {{period}} but it lacks list (or link) to supported formatshttp://camel.apache.org/how-do-i-specify-time-period-in-a-human-friendly-syntax.html Task camel timer docs - add supported formats Documentation of camel timer component http://camel.apache.org/timer.htmldescribes option {{period}} but it lacks list (or link) to supported formatshttp://camel.apache.org/how-do-i-specify-time-period-in-a-human-friendly-syntax.html
CAMEL-9924 Consider keeping custom add components in camelcontext when stopped so people can start again See CAMEL-9916If people restart manually using stop/start then Camel does not guarantee it can startup again. The stop is for a hard shutdown. Ideally you should use suspend/resume. Or if in some app server then restart there, eg where its a full restart of the deployed unit.But we could consider keeping custom added components in stop so when you call start again they are still there.For components that has been default created then Camel can create them again. Improvement Consider keeping custom add components in camelcontext when stopped so people can start again See CAMEL-9916If people restart manually using stop/start then Camel does not guarantee it can startup again. The stop is for a hard shutdown. Ideally you should use suspend/resume. Or if in some app server then restart there, eg where its a full restart of the deployed unit.But we could consider keeping custom added components in stop so when you call start again they are still there.For components that has been default created then Camel can create them again.
CAMEL-9916 SJMS component is not currently nodev/XML route compatible SJMS component is currently not friendly for XML route usage because:* You need a component instance which has been "activated" - has had a connection factory set.* On route restart, the component cannot be reused because the underlying pool is closed and not recreated New Feature SJMS component is not currently nodev/XML route compatible SJMS component is currently not friendly for XML route usage because:* You need a component instance which has been "activated" - has had a connection factory set.* On route restart, the component cannot be reused because the underlying pool is closed and not recreated
CAMEL-9915 Allow to use the tarfile data format in XML marshal/unmarshal The {{tarfile}} data format is very handy but unfortunatly it's not possible to use it in the {{<marshal>}} and {{<unmarshal>}} tags. Improvement Allow to use the tarfile data format in XML marshal/unmarshal The {{tarfile}} data format is very handy but unfortunatly it's not possible to use it in the {{<marshal>}} and {{<unmarshal>}} tags.
CAMEL-9910 Camel Rest - automatic component discovery It would be useful if camel rest supported automatic discovery of rest components based on classpath.  Currently if I only declare a dependency on jetty, i need to register it via rest component.If I fail to, I get an error {{Cannot find RestConsumerFactory in Registry or as a Component to use}} but ideally camel should figure out which component I want. Improvement Camel Rest - automatic component discovery It would be useful if camel rest supported automatic discovery of rest components based on classpath.  Currently if I only declare a dependency on jetty, i need to register it via rest component.If I fail to, I get an error {{Cannot find RestConsumerFactory in Registry or as a Component to use}} but ideally camel should figure out which component I want.
CAMEL-9908 Remove jetty8 We should remove camel-jetty8 and change the other components that use jetty8 to use jetty9 such as some still use jetty8 for testing.eg do a "git grep jetty8" to see where its in use. Task Remove jetty8 We should remove camel-jetty8 and change the other components that use jetty8 to use jetty9 such as some still use jetty8 for testing.eg do a "git grep jetty8" to see where its in use.
CAMEL-9905 TarAggregationStragegy should delete temporary files See nabblehttp://camel.465427.n5.nabble.com/TarAggregationStrategy-tmp-directory-is-full-tp5781302.htmlIt may leave dead files in the tmp folder which are not cleaned up. We should delete temporary files when no longer needed. And allow to configure the temporary directory in use. Improvement TarAggregationStragegy should delete temporary files See nabblehttp://camel.465427.n5.nabble.com/TarAggregationStrategy-tmp-directory-is-full-tp5781302.htmlIt may leave dead files in the tmp folder which are not cleaned up. We should delete temporary files when no longer needed. And allow to configure the temporary directory in use.
CAMEL-9901 CameBlueprintTest support doesn't update values in routes if placeholders are used If you specify placeholder-prefix and placeholder-suffix in a blueprint property-placeholder, properties are overridden correctly in beans, but not in routes.  For example, if you apply the changes below to https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/configadmin-loadfileoverride.xml and run ConfigAdminLoadConfigurationFileAndOverrideTest it will fail because it can't substitute for "[destination]".  If you leave the uris in the route set to "{{destination}}" the test will pass.  <!-- blueprint property placeholders, that will use etc/stuff.cfg as the properties file -->-  <cm:property-placeholder persistent-id="stuff" update-strategy="reload">+  <cm:property-placeholder persistent-id="stuff" update-strategy="reload" placeholder-prefix="[" placeholder-suffix="]">     <cm:default-properties>       <cm:property name="greeting" value="Hello" />       <cm:property name="echo" value="Hey" />@@ -34,8 +34,8 @@    <!-- a bean that uses a blueprint property placeholder -->   <bean id="myCoolBean" class="org.apache.camel.test.blueprint.MyCoolBean">-    <property name="say" value="${greeting}"/>-    <property name="echo" value="${echo}"/>+    <property name="say" value="[greeting]"/>+    <property name="echo" value="[echo]"/>   </bean>    <camelContext xmlns="http://camel.apache.org/schema/blueprint">@@ -43,9 +43,9 @@     <route>       <from uri="direct:start"/>       <bean ref="myCoolBean" method="saySomething"/>-      <to uri="{{destination}}"/>+      <to uri="[destination]"/>       <bean ref="myCoolBean" method="echoSomething"/>-      <to uri="{{destination}}"/> Improvement CameBlueprintTest support doesn't update values in routes if placeholders are used If you specify placeholder-prefix and placeholder-suffix in a blueprint property-placeholder, properties are overridden correctly in beans, but not in routes.  For example, if you apply the changes below to https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/test/resources/org/apache/camel/test/blueprint/configadmin-loadfileoverride.xml and run ConfigAdminLoadConfigurationFileAndOverrideTest it will fail because it can't substitute for "[destination]".  If you leave the uris in the route set to "{{destination}}" the test will pass.  <!-- blueprint property placeholders, that will use etc/stuff.cfg as the properties file -->-  <cm:property-placeholder persistent-id="stuff" update-strategy="reload">+  <cm:property-placeholder persistent-id="stuff" update-strategy="reload" placeholder-prefix="[" placeholder-suffix="]">     <cm:default-properties>       <cm:property name="greeting" value="Hello" />       <cm:property name="echo" value="Hey" />@@ -34,8 +34,8 @@    <!-- a bean that uses a blueprint property placeholder -->   <bean id="myCoolBean" class="org.apache.camel.test.blueprint.MyCoolBean">-    <property name="say" value="${greeting}"/>-    <property name="echo" value="${echo}"/>+    <property name="say" value="[greeting]"/>+    <property name="echo" value="[echo]"/>   </bean>    <camelContext xmlns="http://camel.apache.org/schema/blueprint">@@ -43,9 +43,9 @@     <route>       <from uri="direct:start"/>       <bean ref="myCoolBean" method="saySomething"/>-      <to uri="{{destination}}"/>+      <to uri="[destination]"/>       <bean ref="myCoolBean" method="echoSomething"/>-      <to uri="{{destination}}"/>
CAMEL-9899 camel-rx - Use a worker pool for tasks such as stopping consumers     // a worker pool for running tasks such as stopping consumers which should not use the event loop    // thread from rx-java but use our own thread to process such tasks Improvement camel-rx - Use a worker pool for tasks such as stopping consumers     // a worker pool for running tasks such as stopping consumers which should not use the event loop    // thread from rx-java but use our own thread to process such tasks
CAMEL-9897 Add an Option to the XSLT Component to support custom EntityResolver While using the XSLT component of Camel i came across this post in Nabble:[http://camel.465427.n5.nabble.com/Make-xslt-component-not-to-validate-dtd-s-or-use-local-copy-td5727789.html#a5728034]I am using XML files that looks like:{code:xml}<!DOCTYPE E20 SYSTEM  "myapp.dtd"><E20>	<E20.001>		<REC.ID>A00008:20:018046</REC.ID>	</E20.001><COMP VAR="A">&lt;&lt;m&eacute;talliques&gt;&gt; &lt;s&eacute;dimentation&gt; pargravi</COMP>...{code}so it would be nice to have a EntityResolver for my DTD and the entities.At the moment i can only specify a custom URIResolver bean (which works great, by the way).(see "uriResolver"-option documentation [http://camel.apache.org/xslt.html])Is it possible to add an simliar option to the XSLT component to achieve this?I am using Camel 2.17.0 and Saxon 9.5.1. Improvement Add an Option to the XSLT Component to support custom EntityResolver While using the XSLT component of Camel i came across this post in Nabble:[http://camel.465427.n5.nabble.com/Make-xslt-component-not-to-validate-dtd-s-or-use-local-copy-td5727789.html#a5728034]I am using XML files that looks like:{code:xml}<!DOCTYPE E20 SYSTEM  "myapp.dtd"><E20>	<E20.001>		<REC.ID>A00008:20:018046</REC.ID>	</E20.001><COMP VAR="A">&lt;&lt;m&eacute;talliques&gt;&gt; &lt;s&eacute;dimentation&gt; pargravi</COMP>...{code}so it would be nice to have a EntityResolver for my DTD and the entities.At the moment i can only specify a custom URIResolver bean (which works great, by the way).(see "uriResolver"-option documentation [http://camel.apache.org/xslt.html])Is it possible to add an simliar option to the XSLT component to achieve this?I am using Camel 2.17.0 and Saxon 9.5.1.
CAMEL-9892 Aggregator completionPredicate does not support a more complex block with scala DSL Will provide pull request. Improvement Aggregator completionPredicate does not support a more complex block with scala DSL Will provide pull request.
CAMEL-9889 Allow external components to provide custom mbeans for processors So the component can at runtime leverage information from the 3rd party component. For example camel-hystrix to tie into hystrix to grab health and metrics data in the JMX processor mbean. Improvement Allow external components to provide custom mbeans for processors So the component can at runtime leverage information from the 3rd party component. For example camel-hystrix to tie into hystrix to grab health and metrics data in the JMX processor mbean.
CAMEL-9879 Circuit Breaker EIP - That is using hystrix The CB load balancer do not offer a fallback and will just reject if the state is open.We should try to have a CB that can configure options for fallback, and be integrated with hystrix, so if you add camel-hystrix on the classpath it uses hystrix.Then its using the real Netflix OSS stuff that are so popular. New Feature Circuit Breaker EIP - That is using hystrix The CB load balancer do not offer a fallback and will just reject if the state is open.We should try to have a CB that can configure options for fallback, and be integrated with hystrix, so if you add camel-hystrix on the classpath it uses hystrix.Then its using the real Netflix OSS stuff that are so popular.
CAMEL-9878 camel-commands - Add command to show top N inflight exchanges per routes A command that can show you details about the top-N inflight exchanges per routes.Some kind of table that output the top oldest inflight grouped by route.{code}exchange   route    duration    node --------------------------------abcdef{code}You can use route-list and context-list and see the inflight counter, but you cannot yet see more fine grained details.  Improvement camel-commands - Add command to show top N inflight exchanges per routes A command that can show you details about the top-N inflight exchanges per routes.Some kind of table that output the top oldest inflight grouped by route.{code}exchange   route    duration    node --------------------------------abcdef{code}You can use route-list and context-list and see the inflight counter, but you cannot yet see more fine grained details. 
CAMEL-9877 InflightRepository - Add browse that can limit per route We have a browse that limits per context{code}	browse(int limit, boolean sortByLongestDuration)A read-only browser of the InflightRepository.InflightExchanges that are currently inflight.{code}But we need one that limits per route, eg{code}	browse(String routeId, int limit, boolean sortByLongestDuration)A read-only browser of the InflightRepository.InflightExchanges that are currently inflight on that given route.{code} Improvement InflightRepository - Add browse that can limit per route We have a browse that limits per context{code}	browse(int limit, boolean sortByLongestDuration)A read-only browser of the InflightRepository.InflightExchanges that are currently inflight.{code}But we need one that limits per route, eg{code}	browse(String routeId, int limit, boolean sortByLongestDuration)A read-only browser of the InflightRepository.InflightExchanges that are currently inflight on that given route.{code}
CAMEL-9873 Component should provide detail if a consumer/producer is native async supported Some components support native async non blocked. We should make this detail in the component docs and also in some api that you can check at runtime.This would allow callers that use these components to know that information such as reactive systems. Improvement Component should provide detail if a consumer/producer is native async supported Some components support native async non blocked. We should make this detail in the component docs and also in some api that you can check at runtime.This would allow callers that use these components to know that information such as reactive systems.
CAMEL-9871 FlatpackDataFormat ignores errors in Flatpack's DataSet Given a route        from("file:/temp/flatpack")            .unmarshal(new FlatpackDataFormat())            .split(body())            .log("Record found");and an input file        foo,bar        1        2,foo        3,foo,barI get one record logged; there are no errors or exceptions.DataSet contains errors (for too few and too many fields), however, it is wrapped in a DataSetList and access to the errors is lost. Improvement FlatpackDataFormat ignores errors in Flatpack's DataSet Given a route        from("file:/temp/flatpack")            .unmarshal(new FlatpackDataFormat())            .split(body())            .log("Record found");and an input file        foo,bar        1        2,foo        3,foo,barI get one record logged; there are no errors or exceptions.DataSet contains errors (for too few and too many fields), however, it is wrapped in a DataSetList and access to the errors is lost.
CAMEL-9870 bean component - Add validation for parenthesis check If you specify a method to call and provide parameters with (1, 2) then we should validate that there is a pair.You may mistake and forget the last parenthesis such as{code} <bean ref="invoiceService" method="addNote(${body}, ${header.note}"/>{code}See nabblehttp://camel.465427.n5.nabble.com/Apache-Camel-bean-parameter-binding-issue-with-Spring-DSL-tp5772200.html Improvement bean component - Add validation for parenthesis check If you specify a method to call and provide parameters with (1, 2) then we should validate that there is a pair.You may mistake and forget the last parenthesis such as{code} <bean ref="invoiceService" method="addNote(${body}, ${header.note}"/>{code}See nabblehttp://camel.465427.n5.nabble.com/Apache-Camel-bean-parameter-binding-issue-with-Spring-DSL-tp5772200.html
CAMEL-9869 Create Apache Flink Component Hello,I have created an Apache Flink component for Camel which makes it easier to use Flink for analytics. One can use DataSet callbacks with Spring beans/OSGI services.Using Spring's application context, it can be accessed like {noformat}@Beanpublic DataSetCallback<Long> countLinesContaining() {    return new DataSetCallback<Long>() {        public Long onDataSet(DataSet dataSet, Object... objects) {            try {                dataSet.print();                return new Long(0);            } catch (Exception e) {                return new Long(-1);            }        }    };}@Beanpublic DataSet myDataSet() {    final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();    DataSet<String> text = env.fromElements(            "Who's there?",            "I think I hear them. Stand ho! Who's there?");    return text;}{noformat}The results can be accessed like {noformat}Long count = template.requestBody("flink:dataSet?dataSet=#myDataSet&dataSetCallback=#countLinesContaining", pattern, Long.class);{noformat}Please review & accept my contribution. New Feature Create Apache Flink Component Hello,I have created an Apache Flink component for Camel which makes it easier to use Flink for analytics. One can use DataSet callbacks with Spring beans/OSGI services.Using Spring's application context, it can be accessed like {noformat}@Beanpublic DataSetCallback<Long> countLinesContaining() {    return new DataSetCallback<Long>() {        public Long onDataSet(DataSet dataSet, Object... objects) {            try {                dataSet.print();                return new Long(0);            } catch (Exception e) {                return new Long(-1);            }        }    };}@Beanpublic DataSet myDataSet() {    final ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();    DataSet<String> text = env.fromElements(            "Who's there?",            "I think I hear them. Stand ho! Who's there?");    return text;}{noformat}The results can be accessed like {noformat}Long count = template.requestBody("flink:dataSet?dataSet=#myDataSet&dataSetCallback=#countLinesContaining", pattern, Long.class);{noformat}Please review & accept my contribution.
CAMEL-9865 Camel Karaf Commands - Upgrade to Karaf 3/4 The commands may not work on karaf 4 due lovely osgi changes116 | Installed |  80 | 2.18.0.SNAPSHOT  | camel-karaf-commands119 | Active    |  80 | 2.18.0.SNAPSHOT  | camel-commands-corekaraf@root()> start 116Error executing command: Error executing command on bundles:	Error starting bundle116: Unable to resolve org.apache.camel.karaf.camel-karaf-commands [116](R 116.0): missing requirement [org.apache.camel.karaf.camel-karaf-commands [116](R 116.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.karaf.util) Unresolved requirements: [[org.apache.camel.karaf.camel-karaf-commands [116](R 116.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.karaf.util)] Improvement Camel Karaf Commands - Upgrade to Karaf 3/4 The commands may not work on karaf 4 due lovely osgi changes116 | Installed |  80 | 2.18.0.SNAPSHOT  | camel-karaf-commands119 | Active    |  80 | 2.18.0.SNAPSHOT  | camel-commands-corekaraf@root()> start 116Error executing command: Error executing command on bundles:	Error starting bundle116: Unable to resolve org.apache.camel.karaf.camel-karaf-commands [116](R 116.0): missing requirement [org.apache.camel.karaf.camel-karaf-commands [116](R 116.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.karaf.util) Unresolved requirements: [[org.apache.camel.karaf.camel-karaf-commands [116](R 116.0)] osgi.wiring.package; (osgi.wiring.package=org.apache.karaf.util)]
CAMEL-9849 camel-sql - Add support for OutputType=StreamList in the producer See SOhttp://stackoverflow.com/questions/36518454/camel-sql-component-useiterator-not-working-as-expected/36526340#36526340We have this in the JDBC component but would be good to have in the SQL as well. New Feature camel-sql - Add support for OutputType=StreamList in the producer See SOhttp://stackoverflow.com/questions/36518454/camel-sql-component-useiterator-not-working-as-expected/36526340#36526340We have this in the JDBC component but would be good to have in the SQL as well.
CAMEL-9846 camel-test-json Add a Camel test module that integrates well with json assured test libraryhttps://github.com/jayway/rest-assured New Feature camel-test-json Add a Camel test module that integrates well with json assured test libraryhttps://github.com/jayway/rest-assured
CAMEL-9845 camel-jdbc - Silent ignore close errors  See nabblehttp://camel.465427.n5.nabble.com/Camel-Hive-Issue-tp5780522.htmlWe should check for not already closed before closing. Improvement camel-jdbc - Silent ignore close errors  See nabblehttp://camel.465427.n5.nabble.com/Camel-Hive-Issue-tp5780522.htmlWe should check for not already closed before closing.
CAMEL-9844 support for arn in aws-sqs connection string Further to http://mail-archives.apache.org/mod_mbox/camel-dev/201604.mbox/ajax/%3C570645AC.2020206%40saticed.me.uk%3ETo support a aws-sqs://queueNameOrArn[?options] style connection uri Improvement support for arn in aws-sqs connection string Further to http://mail-archives.apache.org/mod_mbox/camel-dev/201604.mbox/ajax/%3C570645AC.2020206%40saticed.me.uk%3ETo support a aws-sqs://queueNameOrArn[?options] style connection uri
CAMEL-9843 camel-beanio - Add BeanIOSplitter So you can use it directly in a splitter eip in streaming mode and read data on the fly. Improvement camel-beanio - Add BeanIOSplitter So you can use it directly in a splitter eip in streaming mode and read data on the fly.
CAMEL-9842 Expose additional endpoint configuration options to UndertowHost handler methods Currently interface UndertowHost registerHandler and unregisterHandler methods only allow implementing classes to get a handle on the UndertowEndpoint HTTP URI path. It'd be useful to be able to get at some of the other configuration options. E.g to help with this: https://github.com/wildfly-extras/wildfly-camel/issues/1165  Improvement Expose additional endpoint configuration options to UndertowHost handler methods Currently interface UndertowHost registerHandler and unregisterHandler methods only allow implementing classes to get a handle on the UndertowEndpoint HTTP URI path. It'd be useful to be able to get at some of the other configuration options. E.g to help with this: https://github.com/wildfly-extras/wildfly-camel/issues/1165 
CAMEL-9837 Camel mail component documentation has BCC and CC options as upper-cased As of 2.17, it appears that "The Mail component now requires to configure to, cc, and bcc using lower case keys, eg to=foo@bar.com, instead of To=foo@bar.com as previously.".    The Mail component documentation still refers to these keys in upper case form :http://camel.apache.org/mail.html Task Camel mail component documentation has BCC and CC options as upper-cased As of 2.17, it appears that "The Mail component now requires to configure to, cc, and bcc using lower case keys, eg to=foo@bar.com, instead of To=foo@bar.com as previously.".    The Mail component documentation still refers to these keys in upper case form :http://camel.apache.org/mail.html
CAMEL-9836 Add file id of the gridfs file created in the header of the exchange Currently the camel-mongodb-gridfs component (which is not available in this Jira) when a file is cretated does not return back the Id (_id) of the file created, it only returns  the filename{code}String metaData = exchange.getIn().getHeader(GridFsEndpoint.GRIDFS_METADATA, String.class);            DBObject dbObject = (DBObject) JSON.parse(metaData);            gfsFile.setMetaData(dbObject);            gfsFile.save();            exchange.getIn().setHeader(Exchange.FILE_NAME_PRODUCED, gfsFile.getFilename());{code}mongodb api has the method getid: http://api.mongodb.org/java/current/com/mongodb/gridfs/GridFSFile.html#getId--So i'd like to ask to:a) create a header field (maybe GridFsEndpoint.GRIDFS_FILE_ID_PRODUCED)b) Add the header after the creation{code}String metaData = exchange.getIn().getHeader(GridFsEndpoint.GRIDFS_METADATA, String.class);            DBObject dbObject = (DBObject) JSON.parse(metaData);            gfsFile.setMetaData(dbObject);            gfsFile.save();            exchange.getIn().setHeader(Exchange.FILE_NAME_PRODUCED, gfsFile.getFilename());            exchange.getIn().setHeader(GridFsEndpoint.GRIDFS_FILE_ID_PRODUCED, gfsFile.getId());{code}Of course I can create a PR myself, but I think the administrative work would be more? Up to you guys. Wish Add file id of the gridfs file created in the header of the exchange Currently the camel-mongodb-gridfs component (which is not available in this Jira) when a file is cretated does not return back the Id (_id) of the file created, it only returns  the filename{code}String metaData = exchange.getIn().getHeader(GridFsEndpoint.GRIDFS_METADATA, String.class);            DBObject dbObject = (DBObject) JSON.parse(metaData);            gfsFile.setMetaData(dbObject);            gfsFile.save();            exchange.getIn().setHeader(Exchange.FILE_NAME_PRODUCED, gfsFile.getFilename());{code}mongodb api has the method getid: http://api.mongodb.org/java/current/com/mongodb/gridfs/GridFSFile.html#getId--So i'd like to ask to:a) create a header field (maybe GridFsEndpoint.GRIDFS_FILE_ID_PRODUCED)b) Add the header after the creation{code}String metaData = exchange.getIn().getHeader(GridFsEndpoint.GRIDFS_METADATA, String.class);            DBObject dbObject = (DBObject) JSON.parse(metaData);            gfsFile.setMetaData(dbObject);            gfsFile.save();            exchange.getIn().setHeader(Exchange.FILE_NAME_PRODUCED, gfsFile.getFilename());            exchange.getIn().setHeader(GridFsEndpoint.GRIDFS_FILE_ID_PRODUCED, gfsFile.getId());{code}Of course I can create a PR myself, but I think the administrative work would be more? Up to you guys.
CAMEL-9830 camel-spring-javaconfig - Add routes like spring-boot does This helps avoid those circular event issues you can get from spring.See CAMEL-9789 Improvement camel-spring-javaconfig - Add routes like spring-boot does This helps avoid those circular event issues you can get from spring.See CAMEL-9789
CAMEL-9829 camel-cxf namespace parser has hard dependency on jaxrs client I am trying to declare an endpoint like this in my spring context:{code}    <cxf:cxfEndpoint           xmlns:cxf="http://camel.apache.org/schema/cxf"         id="myEndpoint" address="${myUrl}"/>{code}I want to use it in a route like this: .to("cxf:bean:myEndpoint?dataFormat=PAYLOAD")I am not using rs, but the cxf NamespaceHandler has a dependency CxfRsClientFactoryBeanDefinitionParser which again has a dependency on org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean so I get a java.lang.NoClassDefFoundError.I found a workaround - not using the cxf namespace and declaring a bean of class org.apache.camel.component.cxf.CxfSpringEndpoint.But the error was a bit hard to diagnose.Could the NamespaceHandler lazy-load the xxxBeanDefinitionParser instances so that the class CxfRsClientFactoryBeanDefinitionParser doesn't get loaded if I don't have a cxf:rsClient tag? Improvement camel-cxf namespace parser has hard dependency on jaxrs client I am trying to declare an endpoint like this in my spring context:{code}    <cxf:cxfEndpoint           xmlns:cxf="http://camel.apache.org/schema/cxf"         id="myEndpoint" address="${myUrl}"/>{code}I want to use it in a route like this: .to("cxf:bean:myEndpoint?dataFormat=PAYLOAD")I am not using rs, but the cxf NamespaceHandler has a dependency CxfRsClientFactoryBeanDefinitionParser which again has a dependency on org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean so I get a java.lang.NoClassDefFoundError.I found a workaround - not using the cxf namespace and declaring a bean of class org.apache.camel.component.cxf.CxfSpringEndpoint.But the error was a bit hard to diagnose.Could the NamespaceHandler lazy-load the xxxBeanDefinitionParser instances so that the class CxfRsClientFactoryBeanDefinitionParser doesn't get loaded if I don't have a cxf:rsClient tag?
CAMEL-9827 MongoDB - The unit tests have some issues The tests outputs some errors in the mongo console and causes the thread to deadlock and die after the surefire test plugin timeout. Test MongoDB - The unit tests have some issues The tests outputs some errors in the mongo console and causes the thread to deadlock and die after the surefire test plugin timeout.
CAMEL-9816 StreamCache - The cache method should support OUT as well Calling the cache method will cache the IN message. But if we have an OUT we should cache that instead. Improvement StreamCache - The cache method should support OUT as well Calling the cache method will cache the IN message. But if we have an OUT we should cache that instead.
CAMEL-9815 Add URI parameter to skip the declaration of the exchange Certain servers require to declare a queue on an existing exchange (e.g. the standard exchange without a name).These servers don't allow to re declare these existing exchanges.In this case it would be helpful to have an option similar to the skipQueueDeclare option. Improvement Add URI parameter to skip the declaration of the exchange Certain servers require to declare a queue on an existing exchange (e.g. the standard exchange without a name).These servers don't allow to re declare these existing exchanges.In this case it would be helpful to have an option similar to the skipQueueDeclare option.
CAMEL-9810 Cleanup remote branches To not forget about thishttp://camel.465427.n5.nabble.com/Cleanup-remote-branches-tp5780146.html Task Cleanup remote branches To not forget about thishttp://camel.465427.n5.nabble.com/Cleanup-remote-branches-tp5780146.html
CAMEL-9808 SFTP: Enable configuration of bulk requests JSch uses multiple requests to pull files from / push files to a SFTP server. The number of bulk requests can be configured via {{ChannelSftp#setBulkRequests(int)}}. The API documentation states that increasing this value may slightly improve file transfer speed at the cost of memory usage.The configuration option should be made available in Camel.h4. BackgroundI came across an issue with a specific SFTP server product. I tracked this issue down to the way bulk requests are sent to the SFTP server. To cut a long story short ([details here|https://sourceforge.net/p/jsch/mailman/jsch-users/thread/AM4PR10MB01646456AD2C94D911BDA763E1880%40AM4PR10MB0164.EURPRD10.PROD.OUTLOOK.COM/#msg34933773]) setting the number of bulk requests to 1 solves the problem, so it would be nice to have this option available via Camel. Improvement SFTP: Enable configuration of bulk requests JSch uses multiple requests to pull files from / push files to a SFTP server. The number of bulk requests can be configured via {{ChannelSftp#setBulkRequests(int)}}. The API documentation states that increasing this value may slightly improve file transfer speed at the cost of memory usage.The configuration option should be made available in Camel.h4. BackgroundI came across an issue with a specific SFTP server product. I tracked this issue down to the way bulk requests are sent to the SFTP server. To cut a long story short ([details here|https://sourceforge.net/p/jsch/mailman/jsch-users/thread/AM4PR10MB01646456AD2C94D911BDA763E1880%40AM4PR10MB0164.EURPRD10.PROD.OUTLOOK.COM/#msg34933773]) setting the number of bulk requests to 1 solves the problem, so it would be nice to have this option available via Camel.
CAMEL-9801 Camel Archetypes - Add Camel BOM as dependency management We should import the Camel BOM (camel-parent) in the archetypes. Improvement Camel Archetypes - Add Camel BOM as dependency management We should import the Camel BOM (camel-parent) in the archetypes.
CAMEL-9799 JSON/JSON Schema validator > Von: Gnanaguru S> An: ★ dev@camel.apache.org>> Subject: \[DISCUSS\] - Thoughts on Apache Camel 2.18 and towards 3.0>> \[...\]> 7.  JSON validator. XML XSD validation is nice and straight forward, but it> will be great if we have something similar for JSON as well. like> to:json-validator:classpath/response.json> \[...\] New Feature JSON/JSON Schema validator > Von: Gnanaguru S> An:  dev@camel.apache.org>> Subject: \[DISCUSS\] - Thoughts on Apache Camel 2.18 and towards 3.0>> \[...\]> 7.  JSON validator. XML XSD validation is nice and straight forward, but it> will be great if we have something similar for JSON as well. like> to:json-validator:classpath/response.json> \[...\]
CAMEL-9796 Internal Access still displayed, no change to JSON generated When setting ".access" either "internal" or as "false" it still appears in Swagger-UI/doesn't modify the JSON to "paramAccess":"internal"{code}rest(baseUrl).get("/{customerId}")  //--------Swagger Documentation--------                    .param().name("customerId").access("internal").type(RestParamType.body).description("The customer ID number.").required(true).dataType("string").endParam();{code}JSON Generated:{code}parameters: [{  name: "customerId",  in: "path",  description: "The customer ID number.",  required: true,  type: "string"},...]{code} Improvement Internal Access still displayed, no change to JSON generated When setting ".access" either "internal" or as "false" it still appears in Swagger-UI/doesn't modify the JSON to "paramAccess":"internal"{code}rest(baseUrl).get("/{customerId}")  //--------Swagger Documentation--------                    .param().name("customerId").access("internal").type(RestParamType.body).description("The customer ID number.").required(true).dataType("string").endParam();{code}JSON Generated:{code}parameters: [{  name: "customerId",  in: "path",  description: "The customer ID number.",  required: true,  type: "string"},...]{code}
CAMEL-9795 camel-zipkin - Reuse existing span for complex eips like multicast This requires a way of keep the state and handover among exchanges during these complex eips like multicast splitter recipinent list et all Improvement camel-zipkin - Reuse existing span for complex eips like multicast This requires a way of keep the state and handover among exchanges during these complex eips like multicast splitter recipinent list et all
CAMEL-9791 DeadLetterChannel not triggered on RejectedExecutionException I use a thread processor to implement multi-threadingI wish that the deadletter endpoint of the route to be called when the pool reject the execution of the task (to save the message on disk)However, whatever the rejectedPolicy I choose, the rejected exchange is just dropped because the exchange is marked with routeStop and redeliveryExhausted.I think it's correct to not redeliver (we are lacking resources, replaying won't help), but there should at least be a way to handle the failed message somehow. Improvement DeadLetterChannel not triggered on RejectedExecutionException I use a thread processor to implement multi-threadingI wish that the deadletter endpoint of the route to be called when the pool reject the execution of the task (to save the message on disk)However, whatever the rejectedPolicy I choose, the rejected exchange is just dropped because the exchange is marked with routeStop and redeliveryExhausted.I think it's correct to not redeliver (we are lacking resources, replaying won't help), but there should at least be a way to handle the failed message somehow.
CAMEL-9790 camel-kafka 2.17 not throwing TimeoutException back which is throw by Kafka client  if  org.apache.kafka.clients.producer.KafkaProducer.waitOnMetadata  throwing org.apache.kafka.common.errors.TimeoutException exception  then it catching warping  up in FutureFailure(e)passing to camel KafkaProducer but camel KafkaProuder is not doing anything with that.it will be good if camel KafkaProducer  throws it so, we can set for retry it. http://camel.465427.n5.nabble.com/camel-kafka-2-17-not-throwing-TimeoutException-back-which-is-throw-by-Kafka-client-td5780199.html#a5780249 Improvement camel-kafka 2.17 not throwing TimeoutException back which is throw by Kafka client  if  org.apache.kafka.clients.producer.KafkaProducer.waitOnMetadata  throwing org.apache.kafka.common.errors.TimeoutException exception  then it catching warping  up in FutureFailure(e)passing to camel KafkaProducer but camel KafkaProuder is not doing anything with that.it will be good if camel KafkaProducer  throws it so, we can set for retry it. http://camel.465427.n5.nabble.com/camel-kafka-2-17-not-throwing-TimeoutException-back-which-is-throw-by-Kafka-client-td5780199.html#a5780249
CAMEL-9789 CamelContext.getEndpoint should not start endpoint if Camel is starting up See nabblehttp://camel.465427.n5.nabble.com/Quartz2-Endpoint-Exception-td5780221.html Improvement CamelContext.getEndpoint should not start endpoint if Camel is starting up See nabblehttp://camel.465427.n5.nabble.com/Quartz2-Endpoint-Exception-td5780221.html
CAMEL-9787 Migrate Maven Archetypes to new build system See CAMEL-9764 Task Migrate Maven Archetypes to new build system See CAMEL-9764
CAMEL-9785 camel-zipkin - If doing multiple client requests then assign new span id I forgot about thishttp://zipkin.io/pages/instrumenting Task camel-zipkin - If doing multiple client requests then assign new span id I forgot about thishttp://zipkin.io/pages/instrumenting
CAMEL-9783 Allow ConnectionConfiguration to be be injected to endpoint during connection creation I was playing around with camel-xmpp and Google Cloud Messaging. I was able to connect to GCM servers using the sample codes in Google's website but was not able to connect when using the camel-xmpp component.I did some reading and discovered that the ConnectionConfiguration in GCM's sample has some configurations:config.setSocketFactory(SSLSocketFactory.getDefault());config.setSecurityMode(SecurityMode.disabled);config.setReconnectionAllowed(true);config.setRosterLoadedAtLogin(false);config.setSendPresence(false);However in camel-xmpp the configuration cannot be injected:        if (connection == null) {            if (port > 0) {                if (getServiceName() == null) {                    connection = new XMPPTCPConnection(ConnectionConfiguration(host, port));                } else {                    connection = new XMPPTCPConnection(new ConnectionConfiguration(host, port, serviceName));                }            } else {                connection = new XMPPTCPConnection(host);            }        }I am thinking if we could make the endpoint to allow Smack's ConnectionConfiguration to be injected before the connection creation. Improvement Allow ConnectionConfiguration to be be injected to endpoint during connection creation I was playing around with camel-xmpp and Google Cloud Messaging. I was able to connect to GCM servers using the sample codes in Google's website but was not able to connect when using the camel-xmpp component.I did some reading and discovered that the ConnectionConfiguration in GCM's sample has some configurations:config.setSocketFactory(SSLSocketFactory.getDefault());config.setSecurityMode(SecurityMode.disabled);config.setReconnectionAllowed(true);config.setRosterLoadedAtLogin(false);config.setSendPresence(false);However in camel-xmpp the configuration cannot be injected:        if (connection == null) {            if (port > 0) {                if (getServiceName() == null) {                    connection = new XMPPTCPConnection(ConnectionConfiguration(host, port));                } else {                    connection = new XMPPTCPConnection(new ConnectionConfiguration(host, port, serviceName));                }            } else {                connection = new XMPPTCPConnection(host);            }        }I am thinking if we could make the endpoint to allow Smack's ConnectionConfiguration to be injected before the connection creation.
CAMEL-9782 camel-spring-boot - Allow to configure options on CamelContext using auto config Such as options for tracer=true, logMessageHistory, useBreadcrumbs and what else there is  Improvement camel-spring-boot - Allow to configure options on CamelContext using auto config Such as options for tracer=true, logMessageHistory, useBreadcrumbs and what else there is 
CAMEL-9781 Installing camel in Karaf 3.0.x There is this issue about aries-blueprint is not there{code}karaf@root()> feature:install camel-corekaraf@root()> feature:install camel-blueprintError executing command: Can't install feature camel-blueprint/0.0.0:No feature named 'aries-blueprint' with version '0.0.0' available{code}Wonder if we can make that conditional as its a feature that is in karaf 4 and we use Task Installing camel in Karaf 3.0.x There is this issue about aries-blueprint is not there{code}karaf@root()> feature:install camel-corekaraf@root()> feature:install camel-blueprintError executing command: Can't install feature camel-blueprint/0.0.0:No feature named 'aries-blueprint' with version '0.0.0' available{code}Wonder if we can make that conditional as its a feature that is in karaf 4 and we use
CAMEL-9775 Clean configuration meta-datat description Spring Boot configuration meta-data should not contain any javadoc tag. Could you please remove the {{tt}} tags? For instance [here|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/CamelConfigurationProperties.java#L53] Improvement Clean configuration meta-datat description Spring Boot configuration meta-data should not contain any javadoc tag. Could you please remove the {{tt}} tags? For instance [here|https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/CamelConfigurationProperties.java#L53]
CAMEL-9772 Make it easier to turn on/off logExhaustedMessageBody Make logExhaustedMessageBody an option on CamelContext to turn on/off header and message body logging. Default should be false.See http://camel.465427.n5.nabble.com/setting-logExhaustedMessageBody-in-Spring-xml-td5779942.html  Improvement Make it easier to turn on/off logExhaustedMessageBody Make logExhaustedMessageBody an option on CamelContext to turn on/off header and message body logging. Default should be false.See http://camel.465427.n5.nabble.com/setting-logExhaustedMessageBody-in-Spring-xml-td5779942.html 
CAMEL-9769 camel-spring-javaconfig - Make the main class easier To make using the main class a bit easier, and improve its documentation. Improvement camel-spring-javaconfig - Make the main class easier To make using the main class a bit easier, and improve its documentation.
CAMEL-9763 onCompletion() removes all evidence of why an exchange failed. onCompletion() removes all evidence of why an exchange failed. This makes it impossible to use the routing DSL/XML's onCompletion processing for error conditions where one needs to know the cause of the error.OnCompletionSynchronizationAfterConsumer::onFailure() and OnCompletionProcessor::doProcess() remove Exchange.EXCEPTION_CAUGHT with comments to say this is to allow the exchange to be processed successfully..I compare this to the behavior of the onException()'s CatchProcessor::process() where Exchange.EXCEPTION_CAUGHT is not removed before being passed on to the child (processor) for handling.Further this behavior is not documented on the wiki.I would propose that onCompletion() maintain the fault/cause of the error just like the onException() construct does.I can understand why it removes other things that may cause issues, but not quite the Exchange.EXCEPTION_CAUGHT. Improvement onCompletion() removes all evidence of why an exchange failed. onCompletion() removes all evidence of why an exchange failed. This makes it impossible to use the routing DSL/XML's onCompletion processing for error conditions where one needs to know the cause of the error.OnCompletionSynchronizationAfterConsumer::onFailure() and OnCompletionProcessor::doProcess() remove Exchange.EXCEPTION_CAUGHT with comments to say this is to allow the exchange to be processed successfully..I compare this to the behavior of the onException()'s CatchProcessor::process() where Exchange.EXCEPTION_CAUGHT is not removed before being passed on to the child (processor) for handling.Further this behavior is not documented on the wiki.I would propose that onCompletion() maintain the fault/cause of the error just like the onException() construct does.I can understand why it removes other things that may cause issues, but not quite the Exchange.EXCEPTION_CAUGHT.
CAMEL-9762 Add setters on SecureSocketProtocolsParameters and CipherSuitesParameters The {{SecureSocketProtocolsParameters}} and the {{CipherSuitesParameters}} have a strange API. If you want to set the list you have to do a {{getXXX()}} and then call {{addAll(mylist)}}I would be nice if those class can have setters. Improvement Add setters on SecureSocketProtocolsParameters and CipherSuitesParameters The {{SecureSocketProtocolsParameters}} and the {{CipherSuitesParameters}} have a strange API. If you want to set the list you have to do a {{getXXX()}} and then call {{addAll(mylist)}}I would be nice if those class can have setters.
CAMEL-9761 camel-swagger-java - Allow to use custom CORS headers for api-docs Today they are hardcoded for the api-doc, but you can customize for the rest services. We should let api-doc use the same cors headers as the services.Also we should make api-docs CORS enabled if you enable CORS on the REST services so its done in the same place.Today you need to turn on both. Improvement camel-swagger-java - Allow to use custom CORS headers for api-docs Today they are hardcoded for the api-doc, but you can customize for the rest services. We should let api-doc use the same cors headers as the services.Also we should make api-docs CORS enabled if you enable CORS on the REST services so its done in the same place.Today you need to turn on both.
CAMEL-9760 Google drive component syntax inconsistency I think that there is an error for Google drive "syntax".on https://github.com/apache/camel/blob/master/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.javathe syntax described is "google:drive:apiName/methodName" although the scheme is "google-drive" and on the documentation http://camel.apache.org/googledrive.html , it is stated that the URI format is "google-drive://endpoint-prefix/endpoint?[options]"I'm not sure about what should be the real values Task Google drive component syntax inconsistency I think that there is an error for Google drive "syntax".on https://github.com/apache/camel/blob/master/components/camel-google-drive/src/main/java/org/apache/camel/component/google/drive/GoogleDriveEndpoint.javathe syntax described is "google:drive:apiName/methodName" although the scheme is "google-drive" and on the documentation http://camel.apache.org/googledrive.html , it is stated that the URI format is "google-drive://endpoint-prefix/endpoint?[options]"I'm not sure about what should be the real values
CAMEL-9759 camel-zipkin - Instrument Camel So we can track service calls using zipkin. New Feature camel-zipkin - Instrument Camel So we can track service calls using zipkin.
CAMEL-9758 Remove releasing xxxComponent.properties et all From Camel 2.15 onwards there was additional meta-data release per component- camelComponent.properties- camelDataFormat.properties- camelLanguage.properties- camelModel.propertiesThough we have all that in one module now in camel-catalog.So we dont need to do these fine grained files to be releasedhttp://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.camel%22%20AND%20a%3A%22camel-core%22 Task Remove releasing xxxComponent.properties et all From Camel 2.15 onwards there was additional meta-data release per component- camelComponent.properties- camelDataFormat.properties- camelLanguage.properties- camelModel.propertiesThough we have all that in one module now in camel-catalog.So we dont need to do these fine grained files to be releasedhttp://search.maven.org/#search%7Cgav%7C1%7Cg%3A%22org.apache.camel%22%20AND%20a%3A%22camel-core%22
CAMEL-9757 camel-gae - Deprecate Depreacte this old module. Task camel-gae - Deprecate Depreacte this old module.
CAMEL-9755 Allow for nickserv identification I think the Camel IRC component should allow for identifying a user w/the servers nickserv (https://meta.wikimedia.org/wiki/IRC/Instructions#Register_your_nickname.2C_identify.2C_and_enforce).  Attached is a patch to allow that to happen for the IrcConsumer.   The same action could be applied to the IrcProducer if the IrcConfiguration was available in that class.Part of what I did was also to put a Thread.sleep() before the identification.  I did this because when connecting to some servers (ex irc.anonops.com:6697) I found I needed to pause for a few moments while the server completed the connection and displayed a bunch of banner info.  Having an additional param to pause before joining channels may be worth implementing as well, however I tried not to do too much customization since I'm not that familiar with the component code. Improvement Allow for nickserv identification I think the Camel IRC component should allow for identifying a user w/the servers nickserv (https://meta.wikimedia.org/wiki/IRC/Instructions#Register_your_nickname.2C_identify.2C_and_enforce).  Attached is a patch to allow that to happen for the IrcConsumer.   The same action could be applied to the IrcProducer if the IrcConfiguration was available in that class.Part of what I did was also to put a Thread.sleep() before the identification.  I did this because when connecting to some servers (ex irc.anonops.com:6697) I found I needed to pause for a few moments while the server completed the connection and displayed a bunch of banner info.  Having an additional param to pause before joining channels may be worth implementing as well, however I tried not to do too much customization since I'm not that familiar with the component code.
CAMEL-9753 Improve endpoint/component configuration See http://camel.465427.n5.nabble.com/Improve-endpoint-configuration-td5779566.html Improvement Improve endpoint/component configuration See http://camel.465427.n5.nabble.com/Improve-endpoint-configuration-td5779566.html
CAMEL-9751 Add support for security requirements to swagger java component Swagger Java component does not currently allow security requirements to be specified. Would be useful to be able to do so.But as security is usually applied at the container level its not clear what the best approach would be.  New Feature Add support for security requirements to swagger java component Swagger Java component does not currently allow security requirements to be specified. Would be useful to be able to do so.But as security is usually applied at the container level its not clear what the best approach would be. 
CAMEL-9747 Java 8 upgrade - Set source and target to java 1.8 We should upgrade the pom.xml to be java 1.8. Also do this for the maven archetypes in tooling. Task Java 8 upgrade - Set source and target to java 1.8 We should upgrade the pom.xml to be java 1.8. Also do this for the maven archetypes in tooling.
CAMEL-9745 Splitter - Should skip null messages if iterator returns null When splitting and using an iterator the usually hasNext -> next is paired so if hasNext returns true, then next returns data. But there can be situations where this is tricky to determine up front, and therefore a hasNext may return true, and then next() return null if there was no data really. Then the splitter should just skip that null and continue. Improvement Splitter - Should skip null messages if iterator returns null When splitting and using an iterator the usually hasNext -> next is paired so if hasNext returns true, then next returns data. But there can be situations where this is tricky to determine up front, and therefore a hasNext may return true, and then next() return null if there was no data really. Then the splitter should just skip that null and continue.
CAMEL-9744 camel-bindy - Add support for Java 8 date and time API Add possibility of use the date and time API types of Java 8 in the model objects. The objects should be generated from the property "pattern" of annotation "DataField" as occurs for the type date. New Feature camel-bindy - Add support for Java 8 date and time API Add possibility of use the date and time API types of Java 8 in the model objects. The objects should be generated from the property "pattern" of annotation "DataField" as occurs for the type date.
CAMEL-9743 Apache Camel distro - Only keep camel JARs We do not need to ship slf4j and jasypt etc. But just the camel-xxx JARs.Those were used to run the camel-jasypt toolinghttp://camel.apache.org/jasyptBut people can download those jars themselves if they use this rare tools. Improvement Apache Camel distro - Only keep camel JARs We do not need to ship slf4j and jasypt etc. But just the camel-xxx JARs.Those were used to run the camel-jasypt toolinghttp://camel.apache.org/jasyptBut people can download those jars themselves if they use this rare tools.
CAMEL-9735 camel-tarfile throws OutOfMemoryError when splitting large files After the change in https://issues.apache.org/jira/browse/CAMEL-9375 I started to get failures with the following stacktrace:{noformat}Caused by: java.lang.OutOfMemoryError: Java heap space        at java.util.Arrays.copyOf(Arrays.java:3236)        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:118)        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93)        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:153)        at org.apache.camel.converter.stream.CachedOutputStream.write(CachedOutputStream.java:104)        at org.apache.camel.util.IOHelper.copy(IOHelper.java:199)        at org.apache.camel.util.IOHelper.copy(IOHelper.java:169)        at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:218)        at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:214)        at org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(StreamCacheConverter.java:82)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:497)        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)        at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:293)        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:168)        at org.apache.camel.dataformat.tarfile.TarIterator.createNextMessage(TarIterator.java:121)        at org.apache.camel.dataformat.tarfile.TarIterator.tryAdvanceToNext(TarIterator.java:100)        at org.apache.camel.dataformat.tarfile.TarIterator.hasNext(TarIterator.java:78)        at org.apache.camel.processor.Splitter$SplitterIterable$1.hasNext(Splitter.java:163)        at org.apache.camel.processor.Splitter.updateNewExchange(Splitter.java:256){noformat}I.e. using StreamCache makes the whole entry go into memory and since they in my usecase are several gigabytes it doesn't work very well. I realize that this might be caused since I don't set any StreamCachingStrategy on my context but reading the corresponding doc part I get the impression that the default settings should be that it will spool to disk after reading 128 kbyte.However, I really don't want it to do that neither as that would 1) be a significant overhead to write gigabytes of data to a temp file and 2) I might not even have that much space where my temp directory is located. Instead the functionality that I want is that the tarfile entries are streamed and written directly to the destination files without any unnecessary caching in between. Improvement camel-tarfile throws OutOfMemoryError when splitting large files After the change in https://issues.apache.org/jira/browse/CAMEL-9375 I started to get failures with the following stacktrace:{noformat}Caused by: java.lang.OutOfMemoryError: Java heap space        at java.util.Arrays.copyOf(Arrays.java:3236)        at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:118)        at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93)        at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:153)        at org.apache.camel.converter.stream.CachedOutputStream.write(CachedOutputStream.java:104)        at org.apache.camel.util.IOHelper.copy(IOHelper.java:199)        at org.apache.camel.util.IOHelper.copy(IOHelper.java:169)        at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:218)        at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:214)        at org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(StreamCacheConverter.java:82)        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)        at java.lang.reflect.Method.invoke(Method.java:497)        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1243)        at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:293)        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:168)        at org.apache.camel.dataformat.tarfile.TarIterator.createNextMessage(TarIterator.java:121)        at org.apache.camel.dataformat.tarfile.TarIterator.tryAdvanceToNext(TarIterator.java:100)        at org.apache.camel.dataformat.tarfile.TarIterator.hasNext(TarIterator.java:78)        at org.apache.camel.processor.Splitter$SplitterIterable$1.hasNext(Splitter.java:163)        at org.apache.camel.processor.Splitter.updateNewExchange(Splitter.java:256){noformat}I.e. using StreamCache makes the whole entry go into memory and since they in my usecase are several gigabytes it doesn't work very well. I realize that this might be caused since I don't set any StreamCachingStrategy on my context but reading the corresponding doc part I get the impression that the default settings should be that it will spool to disk after reading 128 kbyte.However, I really don't want it to do that neither as that would 1) be a significant overhead to write gigabytes of data to a temp file and 2) I might not even have that much space where my temp directory is located. Instead the functionality that I want is that the tarfile entries are streamed and written directly to the destination files without any unnecessary caching in between.
CAMEL-9734 Camel-Kafka Component Wiki page update Update Camel-Kafka Component Wiki page with Ver 2.17.0 changes Improvement Camel-Kafka Component Wiki page update Update Camel-Kafka Component Wiki page with Ver 2.17.0 changes
CAMEL-9733 enable dynamic job name in component spring-batch HiCurrently springBatch accepts a parameter jobName in the url, which is evaluated during the creation of the endpoint.This makes impossible to launch different jobs dinamically.The requested feature would be to make it message context based, in the headers with a parameter "jobNameHeader", which would be evaluated per message. In a similar way as SQL and the columns value parameters.If the project is interested and willing to incorporate it into the sources, I could offer me to code it. Wish enable dynamic job name in component spring-batch HiCurrently springBatch accepts a parameter jobName in the url, which is evaluated during the creation of the endpoint.This makes impossible to launch different jobs dinamically.The requested feature would be to make it message context based, in the headers with a parameter "jobNameHeader", which would be evaluated per message. In a similar way as SQL and the columns value parameters.If the project is interested and willing to incorporate it into the sources, I could offer me to code it.
CAMEL-9729 Camel catalog - Allow to query older versions So you can use the catalog to query for eg 2.17.0 camel version when using catalog version 2.18.0 etc. This requires the catalog being able to download the older version of the catalog etc or somehow load the schema files from older versions. Or the other way around a newer version. New Feature Camel catalog - Allow to query older versions So you can use the catalog to query for eg 2.17.0 camel version when using catalog version 2.18.0 etc. This requires the catalog being able to download the older version of the catalog etc or somehow load the schema files from older versions. Or the other way around a newer version.
CAMEL-9727 New camel-cm component  I've started a new component to interface with CM SMS API mantained by CM Telecom.using their java api to send sms messages.Pull Request Link:https://github.com/apache/camel/pull/911PR submitted so you can consider to include it in your components catalogue. If i need to change anything, just let me know.Best regards.Some useful links:[original camel-cm repository](https://github.com/oalles/camel-cm)[CM Telecom](https://www.cmtelecom.com)[CM Api](https://dashboard.onlinesmsgateway.com/docs) New Feature New camel-cm component  I've started a new component to interface with CM SMS API mantained by CM Telecom.using their java api to send sms messages.Pull Request Link:https://github.com/apache/camel/pull/911PR submitted so you can consider to include it in your components catalogue. If i need to change anything, just let me know.Best regards.Some useful links:[original camel-cm repository](https://github.com/oalles/camel-cm)[CM Telecom](https://www.cmtelecom.com)[CM Api](https://dashboard.onlinesmsgateway.com/docs)
CAMEL-9726 camel-swagger-java - Add support for yaml We should allow to output in yaml also.So you can do /api-doc/swagger.json and /api-doc/swagger.yaml. Or use the accept headers of the http request. Improvement camel-swagger-java - Add support for yaml We should allow to output in yaml also.So you can do /api-doc/swagger.json and /api-doc/swagger.yaml. Or use the accept headers of the http request.
CAMEL-9725 camel-example-osgi-cdi - Some maven warns [WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-cdi-osgi:bundle:2.17-SNAPSHOT[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.camel.karaf:camel-karaf-commands:jar with value '*' does not match a valid id pattern. @ line 153, column 20[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.camel.karaf:camel-karaf-commands:jar with value '*' does not match a valid id pattern. @ line 154, column 23[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.camel.karaf:apache-camel:xml:features with value '*' does not match a valid id pattern. @ line 189, column 20[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.camel.karaf:apache-camel:xml:features with value '*' does not match a valid id pattern. @ line 190, column 23[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.activemq:activemq-karaf:xml:features with value '*' does not match a valid id pattern. @ line 203, column 20[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.activemq:activemq-karaf:xml:features with value '*' does not match a valid id pattern. @ line 204, column 23 Task camel-example-osgi-cdi - Some maven warns [WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-cdi-osgi:bundle:2.17-SNAPSHOT[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.camel.karaf:camel-karaf-commands:jar with value '*' does not match a valid id pattern. @ line 153, column 20[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.camel.karaf:camel-karaf-commands:jar with value '*' does not match a valid id pattern. @ line 154, column 23[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.camel.karaf:apache-camel:xml:features with value '*' does not match a valid id pattern. @ line 189, column 20[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.camel.karaf:apache-camel:xml:features with value '*' does not match a valid id pattern. @ line 190, column 23[WARNING] 'dependencies.dependency.exclusions.exclusion.groupId' for org.apache.activemq:activemq-karaf:xml:features with value '*' does not match a valid id pattern. @ line 203, column 20[WARNING] 'dependencies.dependency.exclusions.exclusion.artifactId' for org.apache.activemq:activemq-karaf:xml:features with value '*' does not match a valid id pattern. @ line 204, column 23
CAMEL-9722 Explicitly define cxf transitive dependencies According to [Importing Dependencies|https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies], it is possible to import the dependency management sections from multiple projects. The [wildfly-camel|https://github.com/wildfly-extras/wildfly-camel] project does this both with wildfly and camel dependencies.Generally we'd like to use the camel defined dependencies, it is however often the case that there is a version skew for a give project - cxf for example. To avoid an incorrect mix of cxf versions, camel should not only define its top-level cxf deps but also the transitive dependencies that it expects to be using Task Explicitly define cxf transitive dependencies According to [Importing Dependencies|https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies], it is possible to import the dependency management sections from multiple projects. The [wildfly-camel|https://github.com/wildfly-extras/wildfly-camel] project does this both with wildfly and camel dependencies.Generally we'd like to use the camel defined dependencies, it is however often the case that there is a version skew for a give project - cxf for example. To avoid an incorrect mix of cxf versions, camel should not only define its top-level cxf deps but also the transitive dependencies that it expects to be using
CAMEL-9721 Camel spring-batch can't be used in OSGI (karaf 4.0.4) Hi allthe camel-spring-batch component does only depend on spring-batch (by pom.xml) but in the karaf features.xml it is said that it depends on camel-spring (which is not correct but in test).{code:xml} <feature name='camel-spring-batch' version='${project.version}' resolver='(obr)' start-level='50'>    <bundle dependency='true'>mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/${geronimo-jms-spec-version}</bundle>    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-batch-core/${spring-batch-bundle-version}</bundle>    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-batch-infrastructure/${spring-batch-bundle-version}</bundle>    <feature version='${project.version}'>camel-spring</feature>    <bundle>mvn:org.apache.camel/camel-spring-batch/${project.version}</bundle>  </feature>{code}So this has a very downside, that drags the deprecated sprin-dm and impossible to run anythign on spring higher than 3.2. And the spring-batch version used by camel (2.16.2 needs spring-batch 3.0.4, that depends on spring 4, which is blocked by adding spring-camel), result, jar hell, and unable to read the XML Namespace errors. Good this is: removing the dependency of camel-spring and adding spring directly, solves the issue and can run spring-batch in any upper version correctly.thanks! Task Camel spring-batch can't be used in OSGI (karaf 4.0.4) Hi allthe camel-spring-batch component does only depend on spring-batch (by pom.xml) but in the karaf features.xml it is said that it depends on camel-spring (which is not correct but in test).{code:xml} <feature name='camel-spring-batch' version='${project.version}' resolver='(obr)' start-level='50'>    <bundle dependency='true'>mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/${geronimo-jms-spec-version}</bundle>    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-batch-core/${spring-batch-bundle-version}</bundle>    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-batch-infrastructure/${spring-batch-bundle-version}</bundle>    <feature version='${project.version}'>camel-spring</feature>    <bundle>mvn:org.apache.camel/camel-spring-batch/${project.version}</bundle>  </feature>{code}So this has a very downside, that drags the deprecated sprin-dm and impossible to run anythign on spring higher than 3.2. And the spring-batch version used by camel (2.16.2 needs spring-batch 3.0.4, that depends on spring 4, which is blocked by adding spring-camel), result, jar hell, and unable to read the XML Namespace errors. Good this is: removing the dependency of camel-spring and adding spring directly, solves the issue and can run spring-batch in any upper version correctly.thanks!
CAMEL-9720 camel-spring-boot - Make it easy to keep the JVM running When you run a spring boot app then it may terminate asap because the main thread is not keep running.We should make this easy.And that applies when you code this using the spring boot way with a application class with main.eg along the lines using this hack for now{code}@SpringBootApplicationpublic class SampleCamelApplication {    public static void main(String[] args) {        ConfigurableApplicationContext ctx = new SpringApplicationBuilder().sources(SampleCamelApplication.class).run(args);        // keep the JVM running as Camel uses only daemon threads in the sample        CamelSpringBootApplicationController controller = ctx.getBean(CamelSpringBootApplicationController.class);        controller.blockMainThread();    }}{code}We should be able to run that without the hack Improvement camel-spring-boot - Make it easy to keep the JVM running When you run a spring boot app then it may terminate asap because the main thread is not keep running.We should make this easy.And that applies when you code this using the spring boot way with a application class with main.eg along the lines using this hack for now{code}@SpringBootApplicationpublic class SampleCamelApplication {    public static void main(String[] args) {        ConfigurableApplicationContext ctx = new SpringApplicationBuilder().sources(SampleCamelApplication.class).run(args);        // keep the JVM running as Camel uses only daemon threads in the sample        CamelSpringBootApplicationController controller = ctx.getBean(CamelSpringBootApplicationController.class);        controller.blockMainThread();    }}{code}We should be able to run that without the hack
CAMEL-9719 Spring Boot Starter Make a spring-boot starter for Apache Camel so it follow the starter guidelines and feel like any of the other starters for end users.Some details also herehttps://github.com/spring-projects/spring-boot/pull/5426 New Feature Spring Boot Starter Make a spring-boot starter for Apache Camel so it follow the starter guidelines and feel like any of the other starters for end users.Some details also herehttps://github.com/spring-projects/spring-boot/pull/5426
CAMEL-9715 Log EIP - Allow to configure the log name globally When using log in the routes, then it log using route id by default.We should allow to setup a global name it uses instead of route id, that can help people log to com.foo.myapp. Today you would have to set the log name manually on each log which can be tedious. Improvement Log EIP - Allow to configure the log name globally When using log in the routes, then it log using route id by default.We should allow to setup a global name it uses instead of route id, that can help people log to com.foo.myapp. Today you would have to set the log name manually on each log which can be tedious.
CAMEL-9711 camel-sql - Allow to use IN queries where the parameter is expanded So you can do a select * from foo where bar IN :#myValuesAnd then have myValues being expanded into a list of values separated by comma. The trick is to know if the values should be quoted or not, egIN (1, 2, 3)or IN ('1', '2', '3')So we may need a way to specify that. Or defer if its numbering then its not quoted, and non numeric is quoted. But then you may want numeric quoted still. Improvement camel-sql - Allow to use IN queries where the parameter is expanded So you can do a select * from foo where bar IN :#myValuesAnd then have myValues being expanded into a list of values separated by comma. The trick is to know if the values should be quoted or not, egIN (1, 2, 3)or IN ('1', '2', '3')So we may need a way to specify that. Or defer if its numbering then its not quoted, and non numeric is quoted. But then you may want numeric quoted still.
CAMEL-9709 Define jackson version in dependency management Without proper dependency definition, clients may see a variety of versions{code}$ mvn dependency:tree | grep jackson[INFO] |     +- com.fasterxml.jackson.core:jackson-core:jar:2.5.4:compile[INFO] |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.6.2:compile[INFO] |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.6.2:compile[INFO] +- org.apache.camel:camel-jackson:jar:2.17-SNAPSHOT:compile[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.5.4:compile[INFO] |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.5.4:compile[INFO] |  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile[INFO] |  |  \- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.5.4:compile[INFO] |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.7.2:compile[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.7.2:compile[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.7.2:compile[INFO] |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.5.4:compile[INFO] |  |  \- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.5.4:compile{code} Task Define jackson version in dependency management Without proper dependency definition, clients may see a variety of versions{code}$ mvn dependency:tree | grep jackson[INFO] |     +- com.fasterxml.jackson.core:jackson-core:jar:2.5.4:compile[INFO] |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.6.2:compile[INFO] |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.6.2:compile[INFO] +- org.apache.camel:camel-jackson:jar:2.17-SNAPSHOT:compile[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.5.4:compile[INFO] |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.5.4:compile[INFO] |  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.13:compile[INFO] |  |  \- org.codehaus.jackson:jackson-core-asl:jar:1.9.13:compile[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.5.4:compile[INFO] |  +- com.fasterxml.jackson.datatype:jackson-datatype-joda:jar:2.7.2:compile[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.7.2:compile[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.7.2:compile[INFO] |  +- com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:jar:2.5.4:compile[INFO] |  |  \- com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:jar:2.5.4:compile{code}
CAMEL-9708 Multiple tests not using equality predicate correctly There are multiple test having similar 'assertion' that do not verify equality:{quote} mockEndpoint.message(0).body().equals(body);{quote}The correct syntax would be:{quote} mockEndpoint.message(0).body().isEqualTo(body);{quote} Test Multiple tests not using equality predicate correctly There are multiple test having similar 'assertion' that do not verify equality:{quote} mockEndpoint.message(0).body().equals(body);{quote}The correct syntax would be:{quote} mockEndpoint.message(0).body().isEqualTo(body);{quote}
CAMEL-9706 MockEndpoint: isEqualTo predicate does not handle arrays correctly IsEquals predicate does not work correctly for arrays while running tests with MockEndpoint.Source of problem was the final line of ObjectHelper#equal method -array1.equals(array2) does not compare the contents of arrays. Improvement MockEndpoint: isEqualTo predicate does not handle arrays correctly IsEquals predicate does not work correctly for arrays while running tests with MockEndpoint.Source of problem was the final line of ObjectHelper#equal method -array1.equals(array2) does not compare the contents of arrays.
CAMEL-9705 rest-dsl - Do not allow duplicate verbs If some user by mistake try to add 2 x get for the same resource path then we should not allow that and fail fast. Improvement rest-dsl - Do not allow duplicate verbs If some user by mistake try to add 2 x get for the same resource path then we should not allow that and fail fast.
CAMEL-9704 rest-dsl - Options requests should not be routed If using rest-dsl and sending in a HTTP OPTIONS then we should just return back the CORS headers, and not route in Camel.This is also to support the pre-flight HTTP OPTIONS requests, where rest-dsl returns the CORS headers, then the client can send the actual HTTP request afterwards.Some good details of CORS herehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORSWe should maybe also consider trying to leverage native cors filters from jetty / netty etc if they provide one and use that. Though these filters like rest-dsl tend to just specify that anything is possible.We could in rest-dsl look at the rest model and know what each url path has of HTTP methods, so we can return that instead of allowing all HTTP methods.if there is a simple rest-dsl model with only GET /users/{id}POST /usersThen the allowed methods is GET, POST for /users and only GET for /users/123. Improvement rest-dsl - Options requests should not be routed If using rest-dsl and sending in a HTTP OPTIONS then we should just return back the CORS headers, and not route in Camel.This is also to support the pre-flight HTTP OPTIONS requests, where rest-dsl returns the CORS headers, then the client can send the actual HTTP request afterwards.Some good details of CORS herehttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORSWe should maybe also consider trying to leverage native cors filters from jetty / netty etc if they provide one and use that. Though these filters like rest-dsl tend to just specify that anything is possible.We could in rest-dsl look at the rest model and know what each url path has of HTTP methods, so we can return that instead of allowing all HTTP methods.if there is a simple rest-dsl model with only GET /users/{id}POST /usersThen the allowed methods is GET, POST for /users and only GET for /users/123.
CAMEL-9702 CORS support in servlet I'm trying to have CORS working with with the REST DSL (I'm actually using XML) in a servlet context (to run under tomcat).I've put enableCORS="true" at the <rest> level and in all my <put> and <get> elements. That seems to work fine as long as I only do GET and PUT queries. The problem is that web clients have to do OPTIONS queries when some criteria are not met. And OPTIONS queries are not returning the required headers (Access-Control-Allow-Origin and Access-Control-Allow-Methods mainly). I just have a weird Allow header.After trying to add an <options> section in my <rest> section to handle that manually, I've quickly figured out that they where never called. Then I've looked at the code and seen that CamelServlet.service is directly handling the OPTIONS query and is never forwarding them to the consumer. So it seems it's impossible to properly handling CORS queries with my setup. Improvement CORS support in servlet I'm trying to have CORS working with with the REST DSL (I'm actually using XML) in a servlet context (to run under tomcat).I've put enableCORS="true" at the <rest> level and in all my <put> and <get> elements. That seems to work fine as long as I only do GET and PUT queries. The problem is that web clients have to do OPTIONS queries when some criteria are not met. And OPTIONS queries are not returning the required headers (Access-Control-Allow-Origin and Access-Control-Allow-Methods mainly). I just have a weird Allow header.After trying to add an <options> section in my <rest> section to handle that manually, I've quickly figured out that they where never called. Then I've looked at the code and seen that CamelServlet.service is directly handling the OPTIONS query and is never forwarding them to the consumer. So it seems it's impossible to properly handling CORS queries with my setup.
CAMEL-9697 Test component - Allow to receive in any order, or split using expression See nabblehttp://camel.465427.n5.nabble.com/Camel-Test-Endpoint-Error-tp5778858.html Improvement Test component - Allow to receive in any order, or split using expression See nabblehttp://camel.465427.n5.nabble.com/Camel-Test-Endpoint-Error-tp5778858.html
CAMEL-9696 test component - Allow to pass in uri options to endpoint The uri parameters are lost so you cannot pass in noop=true to a file endpoint etc. Improvement test component - Allow to pass in uri options to endpoint The uri parameters are lost so you cannot pass in noop=true to a file endpoint etc.
CAMEL-9690 bean parameter binding should check parameter types when using simple expressions HelloI’m using camel 2.16.2 and I’m finding the bean parameter binding doesn’t seem to work very well on overloaded methods. See below for an example{noformat}public class ClassA {	public int foo() {		return 0;	}	public int foo(String param1) {		return 1;	}	public int foo(String param1, String param2) {		return 2;	}	public int foo(String param1, ClassB param2) {		return 3;	}	public int foo(boolean param1, String param2) {		return 4;	}}public class ClassB {}{noformat}Here are the routes{noformat}from("direct:noParam").bean(ClassA.class, "foo()").to("mock:end");from("direct:1Param").bean(ClassA.class, "foo(${body})").to("mock:end");from("direct:2Param").bean(ClassA.class, "foo(${body}, ${header.key})").to("mock:end”);{noformat}And here are the tests{noformat}	@EndpointInject(uri = "mock:end")	private MockEndpoint end;	@Produce	private ProducerTemplate producerTemplate;	@Test	// passes	public void testNoParam() throws InterruptedException {		end.expectedBodiesReceived(0);		producerTemplate.sendBodyAndHeader("direct:noParam", "body", "key", "value");		end.assertIsSatisfied();	}	@Test	// passes	public void test1Param() throws InterruptedException {		end.expectedBodiesReceived(1);		producerTemplate.sendBodyAndHeader("direct:1Param", "body", "key", "value");		end.assertIsSatisfied();	}	@Test	// throws ambiguous method call exception	public void test2Param_string() throws InterruptedException {		end.expectedBodiesReceived(2);		producerTemplate.sendBodyAndHeader("direct:2Param", "body", "key", "value");		end.assertIsSatisfied();	}	@Test	// throws ambiguous method call exception	public void test2Param_classB() throws InterruptedException {		end.expectedBodiesReceived(3);		producerTemplate.sendBodyAndHeader("direct:2Param", "body", "key", new ClassB());		end.assertIsSatisfied();	}	@Test	// passes	public void test2Param_boolBody() throws InterruptedException {		end.expectedBodiesReceived(4);		producerTemplate.sendBodyAndHeader("direct:2Param", true, "key", "value");		end.assertIsSatisfied();	}{noformat}I don’t understand why test2Param_string and test2Param_classB throw ambiguous call exceptions. Here’s a sample stack trace.{noformat}org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public int au.com.winning.navmidware.routes.navws.ClassA.foo(java.lang.String,java.lang.String), public int au.com.winning.navmidware.routes.navws.ClassA.foo(java.lang.String,au.com.winning.navmidware.routes.navws.ClassB)]. Exchange[ID-minhmac-local-53614-1457474273519-0-2][Message: body]	at org.apache.camel.component.bean.BeanInfo.chooseBestPossibleMethodInfo(BeanInfo.java:835) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.chooseMethodWithMatchingBody(BeanInfo.java:764) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.chooseMethod(BeanInfo.java:621) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:254) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:183) ~[camel-core-2.16.2.jar:2.16.2]{noformat}From looking at the code in BeanInfo, I *think* it just tries to match the type on the body and if it sees multiple possible methods then it throws the exception. I believe it should go further and try to match the type on the other parameters as well?To get around this issue temporarily, I’ve had to write an adapter class that wraps around ClassA but it’s not an ideal solution. Improvement bean parameter binding should check parameter types when using simple expressions HelloI'm using camel 2.16.2 and I'm finding the bean parameter binding doesn't seem to work very well on overloaded methods. See below for an example{noformat}public class ClassA {	public int foo() {		return 0;	}	public int foo(String param1) {		return 1;	}	public int foo(String param1, String param2) {		return 2;	}	public int foo(String param1, ClassB param2) {		return 3;	}	public int foo(boolean param1, String param2) {		return 4;	}}public class ClassB {}{noformat}Here are the routes{noformat}from("direct:noParam").bean(ClassA.class, "foo()").to("mock:end");from("direct:1Param").bean(ClassA.class, "foo(${body})").to("mock:end");from("direct:2Param").bean(ClassA.class, "foo(${body}, ${header.key})").to("mock:end");{noformat}And here are the tests{noformat}	@EndpointInject(uri = "mock:end")	private MockEndpoint end;	@Produce	private ProducerTemplate producerTemplate;	@Test	// passes	public void testNoParam() throws InterruptedException {		end.expectedBodiesReceived(0);		producerTemplate.sendBodyAndHeader("direct:noParam", "body", "key", "value");		end.assertIsSatisfied();	}	@Test	// passes	public void test1Param() throws InterruptedException {		end.expectedBodiesReceived(1);		producerTemplate.sendBodyAndHeader("direct:1Param", "body", "key", "value");		end.assertIsSatisfied();	}	@Test	// throws ambiguous method call exception	public void test2Param_string() throws InterruptedException {		end.expectedBodiesReceived(2);		producerTemplate.sendBodyAndHeader("direct:2Param", "body", "key", "value");		end.assertIsSatisfied();	}	@Test	// throws ambiguous method call exception	public void test2Param_classB() throws InterruptedException {		end.expectedBodiesReceived(3);		producerTemplate.sendBodyAndHeader("direct:2Param", "body", "key", new ClassB());		end.assertIsSatisfied();	}	@Test	// passes	public void test2Param_boolBody() throws InterruptedException {		end.expectedBodiesReceived(4);		producerTemplate.sendBodyAndHeader("direct:2Param", true, "key", "value");		end.assertIsSatisfied();	}{noformat}I don't understand why test2Param_string and test2Param_classB throw ambiguous call exceptions. Here's a sample stack trace.{noformat}org.apache.camel.component.bean.AmbiguousMethodCallException: Ambiguous method invocations possible: [public int au.com.winning.navmidware.routes.navws.ClassA.foo(java.lang.String,java.lang.String), public int au.com.winning.navmidware.routes.navws.ClassA.foo(java.lang.String,au.com.winning.navmidware.routes.navws.ClassB)]. Exchange[ID-minhmac-local-53614-1457474273519-0-2][Message: body]	at org.apache.camel.component.bean.BeanInfo.chooseBestPossibleMethodInfo(BeanInfo.java:835) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.chooseMethodWithMatchingBody(BeanInfo.java:764) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.chooseMethod(BeanInfo.java:621) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:254) ~[camel-core-2.16.2.jar:2.16.2]	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:183) ~[camel-core-2.16.2.jar:2.16.2]{noformat}From looking at the code in BeanInfo, I *think* it just tries to match the type on the body and if it sees multiple possible methods then it throws the exception. I believe it should go further and try to match the type on the other parameters as well?To get around this issue temporarily, I've had to write an adapter class that wraps around ClassA but it's not an ideal solution.
CAMEL-9688 Documentation: Wrong header name on smpp wiki page There is a small error on the http://camel.apache.org/smpp.html wiki page. At least in 2.16.2 and current master there is no header called "CamelSmppFinalStatus", the header is called "CamelSmppStatus" (see: https://github.com/apache/camel/blob/cc9924f41965885af25027fc053adaf21f15b5b4/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConstants.java#L41) Task Documentation: Wrong header name on smpp wiki page There is a small error on the http://camel.apache.org/smpp.html wiki page. At least in 2.16.2 and current master there is no header called "CamelSmppFinalStatus", the header is called "CamelSmppStatus" (see: https://github.com/apache/camel/blob/cc9924f41965885af25027fc053adaf21f15b5b4/components/camel-smpp/src/main/java/org/apache/camel/component/smpp/SmppConstants.java#L41)
CAMEL-9683 native client side kubernetes based load balancer when using kubernetes you can use Kubernetes Services to do the load balancing across endpointshttp://kubernetes.io/v1.1/docs/user-guide/services.html#services-in-kubernetessometimes folks want to do the discovery and load balancing on the client side. We've added a plugin to Ribbon to do this in the kubeflix project:https://github.com/fabric8io/kubeflixe.g. here https://github.com/fabric8io/kubeflix/blob/master/ribbon-discovery/src/main/java/io/fabric8/kubeflix/ribbon/KubernetesServerList.java#L66-L87it might be nice to add something like that for Camel LoadBalancers for folks using Camel on Kubernetes who wish to use client side discovery and load balancing Improvement native client side kubernetes based load balancer when using kubernetes you can use Kubernetes Services to do the load balancing across endpointshttp://kubernetes.io/v1.1/docs/user-guide/services.html#services-in-kubernetessometimes folks want to do the discovery and load balancing on the client side. We've added a plugin to Ribbon to do this in the kubeflix project:https://github.com/fabric8io/kubeflixe.g. here https://github.com/fabric8io/kubeflix/blob/master/ribbon-discovery/src/main/java/io/fabric8/kubeflix/ribbon/KubernetesServerList.java#L66-L87it might be nice to add something like that for Camel LoadBalancers for folks using Camel on Kubernetes who wish to use client side discovery and load balancing
CAMEL-9679 Support for Hessian serialization - add new Data Format Implement new Data Format using [Hessian serialization|http://hessian.caucho.com/doc/hessian-serialization.html]. New Feature Support for Hessian serialization - add new Data Format Implement new Data Format using [Hessian serialization|http://hessian.caucho.com/doc/hessian-serialization.html].
CAMEL-9677 FallbackTypeConverter that are CamelContextAware should have it injected For example fallback type converters may want to have the camel context injected and then perform some logic in start/stop etc. Improvement FallbackTypeConverter that are CamelContextAware should have it injected For example fallback type converters may want to have the camel context injected and then perform some logic in start/stop etc.
CAMEL-9675 Improve loop EIP to act like a while loop So instead of a hardcoded number, you can specify a predicate that allows to loop until its false.See for examplehttp://camel.465427.n5.nabble.com/Polling-http-endpoints-tp5778533.html Improvement Improve loop EIP to act like a while loop So instead of a hardcoded number, you can specify a predicate that allows to loop until its false.See for examplehttp://camel.465427.n5.nabble.com/Polling-http-endpoints-tp5778533.html
CAMEL-9669 Allow setting of noNamespaceSchemaLocation on JaxbDataFormat In order for JAXB marshalled XML output to include a noNamespaceSchemaLocation reference, the JaxbDataFormat should allow the property "jaxb.noNamespaceSchemaLocation" to be set on the marshaller.  It is already possible to set "jaxb.schemaLocation" via the JaxbDataFormat and other properies, so this should be a straightforward addition. Improvement Allow setting of noNamespaceSchemaLocation on JaxbDataFormat In order for JAXB marshalled XML output to include a noNamespaceSchemaLocation reference, the JaxbDataFormat should allow the property "jaxb.noNamespaceSchemaLocation" to be set on the marshaller.  It is already possible to set "jaxb.schemaLocation" via the JaxbDataFormat and other properies, so this should be a straightforward addition.
CAMEL-9657 Problems with DefaultCamelContext constructor calling Container.Instance.manage()  [This code|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L300] can cause problems when Camel runs in a container (like WildFly) with CDI.The code assumes that the camel context will get started and stopped at some point during its lifecycle, which then triggers an [unmanage|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L3151] from the Container instance object. With CDI, this scenario may not happen. Especially when CDI proxies are created for @Injecting camel contexts into beans. The camel context in this scenario is never started or stopped, resulting in this [map of contexts|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L51] filling up with redundant objects.  Not sure what the best way of dealing with this is. It'd be nice to remove the Container.manage code from the DefaultCamelContext default constructor or implement Container in such a way that clients can override its behaviour.  Improvement Problems with DefaultCamelContext constructor calling Container.Instance.manage()  [This code|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L300] can cause problems when Camel runs in a container (like WildFly) with CDI.The code assumes that the camel context will get started and stopped at some point during its lifecycle, which then triggers an [unmanage|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java#L3151] from the Container instance object. With CDI, this scenario may not happen. Especially when CDI proxies are created for @Injecting camel contexts into beans. The camel context in this scenario is never started or stopped, resulting in this [map of contexts|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L51] filling up with redundant objects.  Not sure what the best way of dealing with this is. It'd be nice to remove the Container.manage code from the DefaultCamelContext default constructor or implement Container in such a way that clients can override its behaviour. 
CAMEL-9655 rest-dsl - Default hostname should be 0.0.0.0 To make it consistent as some components will not accept localhost or 0.0.0.0 when calling locally due they work a bit different when given local host name.Add new allLocalIp to host name resolver and use it as default. Improvement rest-dsl - Default hostname should be 0.0.0.0 To make it consistent as some components will not accept localhost or 0.0.0.0 when calling locally due they work a bit different when given local host name.Add new allLocalIp to host name resolver and use it as default.
CAMEL-9654 camel-undertow - rest-dsl should support {name} placeholders from path Like the other rest-dsl components it should support foo/{name} in the urls, so it maps that to a header with the key name, and the value in the http path. Improvement camel-undertow - rest-dsl should support {name} placeholders from path Like the other rest-dsl components it should support foo/{name} in the urls, so it maps that to a header with the key name, and the value in the http path.
CAMEL-9653 Bean language - Add support for calling purely static methods See nabblehttp://camel.465427.n5.nabble.com/Bean-instance-is-null-OGNL-bean-expressions-requires-bean-instances-tp5778338.htmlIn the code we say{code}            // loop and invoke each method            Object beanToCall = beanHolder.getBean();            // there must be a bean to call with, we currently does not support OGNL expressions on using purely static methods            if (beanToCall == null) {                throw new IllegalArgumentException("Bean instance is null. OGNL bean expressions requires bean instances.");            }{code} Improvement Bean language - Add support for calling purely static methods See nabblehttp://camel.465427.n5.nabble.com/Bean-instance-is-null-OGNL-bean-expressions-requires-bean-instances-tp5778338.htmlIn the code we say{code}            // loop and invoke each method            Object beanToCall = beanHolder.getBean();            // there must be a bean to call with, we currently does not support OGNL expressions on using purely static methods            if (beanToCall == null) {                throw new IllegalArgumentException("Bean instance is null. OGNL bean expressions requires bean instances.");            }{code}
CAMEL-9652 camel-spark-rest - Add support for hosting swagger api See nabbelhttp://camel.465427.n5.nabble.com/Why-can-t-I-use-swagger-java-with-spark-rest-tp5778341.html New Feature camel-spark-rest - Add support for hosting swagger api See nabbelhttp://camel.465427.n5.nabble.com/Why-can-t-I-use-swagger-java-with-spark-rest-tp5778341.html
CAMEL-9650 <contextScan/> equivalent in Spring JavaConfig There could be an equivalent to <contextScan/> from XML configuration in JavaConfig to automatically find routes created as Spring beans using `RouteBuilder` (in non Spring Boot applications).Currently they need to be added manually with `camelContext.addRoute(...)`.More details:https://mail-archives.apache.org/mod_mbox/camel-users/201602.mbox/%3C56C90F42.5000600%40wp.pl%3E New Feature <contextScan/> equivalent in Spring JavaConfig There could be an equivalent to <contextScan/> from XML configuration in JavaConfig to automatically find routes created as Spring beans using `RouteBuilder` (in non Spring Boot applications).Currently they need to be added manually with `camelContext.addRoute(...)`.More details:https://mail-archives.apache.org/mod_mbox/camel-users/201602.mbox/%3C56C90F42.5000600%40wp.pl%3E
CAMEL-9649 Do not require @XmlRootElement annotation in JAXB FallbackTypeConverter We should fix method {{org.apache.camel.converter.jaxb.FallbackTypeConverter#isJaxbType}}. It can only handle beans with annotation  {{@XmlRootElement}} now. But this annotation is not necessary. We should check if there is {{ObjectFactory.java}} class in current java package and explore this class if there is proper method returning {{JAXBElement<T>}} with annotation {{@XmlElementDecl}}. Improvement Do not require @XmlRootElement annotation in JAXB FallbackTypeConverter We should fix method {{org.apache.camel.converter.jaxb.FallbackTypeConverter#isJaxbType}}. It can only handle beans with annotation  {{@XmlRootElement}} now. But this annotation is not necessary. We should check if there is {{ObjectFactory.java}} class in current java package and explore this class if there is proper method returning {{JAXBElement<T>}} with annotation {{@XmlElementDecl}}.
CAMEL-9648 IronMQ Component Create an IronMQ component for Camel New Feature IronMQ Component Create an IronMQ component for Camel
CAMEL-9647 Camel Circuit Breaker to output Hystrix metrics? It might be nice if the circuit breakers in Apache Camel could expose metrics to Hystrix so that the Hystrix dashboard could be included to visualise themhttp://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_hystrix_metrics_streamIts pretty easy to add the Hystrix dashboard to spring boot apps; and use Turbine to aggregate them etc New Feature Camel Circuit Breaker to output Hystrix metrics? It might be nice if the circuit breakers in Apache Camel could expose metrics to Hystrix so that the Hystrix dashboard could be included to visualise themhttp://projects.spring.io/spring-cloud/docs/1.0.3/spring-cloud.html#_hystrix_metrics_streamIts pretty easy to add the Hystrix dashboard to spring boot apps; and use Turbine to aggregate them etc
CAMEL-9645 Add messageHistory function to simple to allow to dump it anywhere We should add a messageHistory function so you can doSo end users can use that in their loggings or whatnot.{code}<log message="I am at ${messageHistory}"/>{code}Then it uses that same message history dumping we used in the error handler that you see when an exception occurred. New Feature Add messageHistory function to simple to allow to dump it anywhere We should add a messageHistory function so you can doSo end users can use that in their loggings or whatnot.{code}<log message="I am at ${messageHistory}"/>{code}Then it uses that same message history dumping we used in the error handler that you see when an exception occurred.
CAMEL-9639 camel-netty - Should invalidate object if cannot return to pool So the pool knows its invalidated and not still borrowed Improvement camel-netty - Should invalidate object if cannot return to pool So the pool knows its invalidated and not still borrowed
CAMEL-9637 camel-netty - Allow to reuse previous Channel in next call If you want to re-use the same Channel when calling a remote TCP server with netty producer, then this requires to store the Channel on the exchange so it can be re-used on the next netty producer and so on. And then use an UoW to return the Channel in the pool when the Exchange is done.For example in the route below, the 2 x netty should use the same Channel.{code}from foo  to netty  to bar  to netty{code} New Feature camel-netty - Allow to reuse previous Channel in next call If you want to re-use the same Channel when calling a remote TCP server with netty producer, then this requires to store the Channel on the exchange so it can be re-used on the next netty producer and so on. And then use an UoW to return the Channel in the pool when the Exchange is done.For example in the route below, the 2 x netty should use the same Channel.{code}from foo  to netty  to bar  to netty{code}
CAMEL-9635 Continuation settings are only evaluated on first creation for each port/connector Assume the following endpoints configured (in this order!):{code}<from uri="jetty:http://0.0.0.0/myservice1/?useContinuation=false"/><from uri="jetty:http://0.0.0.0/myservice2/?useContinuation=true"/><from uri="jetty:http://0.0.0.0:9090/myservice3/"/><from uri="jetty:http://0.0.0.0:9090/myservice4/?continuationTimeout=10000"/>{code}This results in endpoints myservice1 and myservice2 NOT using continuation, and myservice4 usind the default timeout of 30seconds.This is especially confusing if you use something like bluprint where different bundles might use the jetty endpoint with different configurations. In such a case it is highly dependant on the start order what configuration wins that makes this issue more confusing and hard to debug.The cause of this is, that the configuration of the endpoint is only evaluated once when the *Connector* is created and then never changed as long as you do not shut down ALL endpoints of this connector.This can be fixed by reading the configuration on each request instead of once at connector creation.I have seen this issue on Camel 2.10 but the code seems not to have changed in the master until now, so I'll provide a patch for the master branch only. Improvement Continuation settings are only evaluated on first creation for each port/connector Assume the following endpoints configured (in this order!):{code}<from uri="jetty:http://0.0.0.0/myservice1/?useContinuation=false"/><from uri="jetty:http://0.0.0.0/myservice2/?useContinuation=true"/><from uri="jetty:http://0.0.0.0:9090/myservice3/"/><from uri="jetty:http://0.0.0.0:9090/myservice4/?continuationTimeout=10000"/>{code}This results in endpoints myservice1 and myservice2 NOT using continuation, and myservice4 usind the default timeout of 30seconds.This is especially confusing if you use something like bluprint where different bundles might use the jetty endpoint with different configurations. In such a case it is highly dependant on the start order what configuration wins that makes this issue more confusing and hard to debug.The cause of this is, that the configuration of the endpoint is only evaluated once when the *Connector* is created and then never changed as long as you do not shut down ALL endpoints of this connector.This can be fixed by reading the configuration on each request instead of once at connector creation.I have seen this issue on Camel 2.10 but the code seems not to have changed in the master until now, so I'll provide a patch for the master branch only.
CAMEL-9632 Allow for adding ResponeHeader info to documentation. Would be nice to be able to document ResponseHeader for the output values of a request. Currently you can only document incoming values using param() values, and the responseMessage is currently limited in what it takes for values.RestOperationResponseMsgDefinition seems like the appropriate spot for this if it were to be added. Improvement Allow for adding ResponeHeader info to documentation. Would be nice to be able to document ResponseHeader for the output values of a request. Currently you can only document incoming values using param() values, and the responseMessage is currently limited in what it takes for values.RestOperationResponseMsgDefinition seems like the appropriate spot for this if it were to be added.
CAMEL-9629 camel-cxfrs - Allow to configure providers easily from endpoint Today you have to refer to a list, but it should be easier to just specify the names separated by comma. Improvement camel-cxfrs - Allow to configure providers easily from endpoint Today you have to refer to a list, but it should be easier to just specify the names separated by comma.
CAMEL-9628 camel-cxfrs - RsEndpoint should be enlisted in JMX The CxfRsEndpoint should be singleton like the regular CxfEndpoint is. This prevents it from being enlisted in JMX, and also allows to reuse the endpoint because its singleton. Improvement camel-cxfrs - RsEndpoint should be enlisted in JMX The CxfRsEndpoint should be singleton like the regular CxfEndpoint is. This prevents it from being enlisted in JMX, and also allows to reuse the endpoint because its singleton.
CAMEL-9625 rest-dsl - Marshal should only happen if content-type is json or xml See nabblehttp://camel.465427.n5.nabble.com/Is-there-a-way-to-selectively-disable-data-binding-in-a-rest-dsl-route-tp5777887.htmlWe should allow end users to specify a custom content-type that is not xml/json based and then if so not do any marshalling. Improvement rest-dsl - Marshal should only happen if content-type is json or xml See nabblehttp://camel.465427.n5.nabble.com/Is-there-a-way-to-selectively-disable-data-binding-in-a-rest-dsl-route-tp5777887.htmlWe should allow end users to specify a custom content-type that is not xml/json based and then if so not do any marshalling.
CAMEL-9621 camel-restlet - The producer should support message body as bytes or streams It uses string as the message body. We should try to detect the current body type and use byte array / input stream etc that restlet has a representation that fits, and then use string as fallback. Improvement camel-restlet - The producer should support message body as bytes or streams It uses string as the message body. We should try to detect the current body type and use byte array / input stream etc that restlet has a representation that fits, and then use string as fallback.
CAMEL-9618 File endpoint - Move some options from generic to file as they are file specifc There is a few options for posix attributes and whatnot that are java.io.File specific and should be on the FileEndpoint and not the abstract generic. The latter allow the ftp components to inherit these options which they should not. Task File endpoint - Move some options from generic to file as they are file specifc There is a few options for posix attributes and whatnot that are java.io.File specific and should be on the FileEndpoint and not the abstract generic. The latter allow the ftp components to inherit these options which they should not.
CAMEL-9610 Chmod does not work properly with "recursive=true" Hello,It seems that the chmod does not work properly with the "recursive=true" URI option.The chmod is only applied on the file, not also on the parent directories.Example:<camel:from uri="file:{{local.inputDir}}?readLock=changed&amp;consumer.delay=2000&amp;recursive=true" /><camel:to uri="file:{{local.outputDir}}?chmod={{output.chmod}}&amp;charset={{charset}}"/>If I paste a file into my input directory, everything works properly.However, if I paste a directory into my input directory, only the "final' files will be chmoded. The parent directories of the file, located in my output directory, are not chmoded.Best,Nicolas. Improvement Chmod does not work properly with "recursive=true" Hello,It seems that the chmod does not work properly with the "recursive=true" URI option.The chmod is only applied on the file, not also on the parent directories.Example:<camel:from uri="file:{{local.inputDir}}?readLock=changed&amp;consumer.delay=2000&amp;recursive=true" /><camel:to uri="file:{{local.outputDir}}?chmod={{output.chmod}}&amp;charset={{charset}}"/>If I paste a file into my input directory, everything works properly.However, if I paste a directory into my input directory, only the "final' files will be chmoded. The parent directories of the file, located in my output directory, are not chmoded.Best,Nicolas.
CAMEL-9609 camel-aws - SQS allow to configure attribute names easier Sadly it uses a collection for a set of names which should just be a string separated with comma. Improvement camel-aws - SQS allow to configure attribute names easier Sadly it uses a collection for a set of names which should just be a string separated with comma.
CAMEL-9605 Allow camel-gson to unmarshall more type by default By default camel json unmarshaller accept to read only json which are map (eg the json document begin with "{" ). If you want to be able to umarshal more json document like simple string or list you have to specify the unmarshalTypeName which is not very convenient, eg:{code:xml}<unmarshal>    <json library="Gson" unmarshalTypeName="java.lang.Object"/></unmarshal>{code}You should be able to unmarshall any type of json document with the default setting, eg:{code:xml}<unmarshal>    <json library="Gson"/></unmarshal>{code} Improvement Allow camel-gson to unmarshall more type by default By default camel json unmarshaller accept to read only json which are map (eg the json document begin with "{" ). If you want to be able to umarshal more json document like simple string or list you have to specify the unmarshalTypeName which is not very convenient, eg:{code:xml}<unmarshal>    <json library="Gson" unmarshalTypeName="java.lang.Object"/></unmarshal>{code}You should be able to unmarshall any type of json document with the default setting, eg:{code:xml}<unmarshal>    <json library="Gson"/></unmarshal>{code}
CAMEL-9604 camel-jpa - Endpoint should be singleton The jpa endpoint should be singleton.It can lead to issues with JMX such ashttp://camel.465427.n5.nabble.com/JMX-Management-tp5777750.html Improvement camel-jpa - Endpoint should be singleton The jpa endpoint should be singleton.It can lead to issues with JMX such ashttp://camel.465427.n5.nabble.com/JMX-Management-tp5777750.html
CAMEL-9601 camel-restlet - Should support the Accept header When using Accept http header then restlet do not understand it, as you need to do some special restlet code instead of using the headers 1:1 :( Improvement camel-restlet - Should support the Accept header When using Accept http header then restlet do not understand it, as you need to do some special restlet code instead of using the headers 1:1 :(
CAMEL-9600 camel-fop - Upgrade fop to 2.1 We should upgrade camel-fop to use fop 2.1. It uses 1.1 today. Improvement camel-fop - Upgrade fop to 2.1 We should upgrade camel-fop to use fop 2.1. It uses 1.1 today.
CAMEL-9597 camel-nagios - Mockito for testing the test jar it uses for jsendnca is downloaded from jboss nexus maven. We should consider mocking the unit tests so we can drop the test jar, and then just the jar from maven central so we can drop the 3rd party repo. Improvement camel-nagios - Mockito for testing the test jar it uses for jsendnca is downloaded from jboss nexus maven. We should consider mocking the unit tests so we can drop the test jar, and then just the jar from maven central so we can drop the 3rd party repo.
CAMEL-9596 REST DSL  - Jetty component ignores custom HTTP Binding I am attempting to set a custom HTTP binding on the Jetty component used with the REST DSL:{code:xml}<bean id="jettyNoStackTraceHTTPBinding" class="ch.vivates.vel.rest.JettyNoStacktraceHttpBinding" /><camelContext id="vel-jetty-rest-service" allowUseOriginalMessage="false" xmlns="http://camel.apache.org/schema/blueprint" streamCache="false">    <restConfiguration component="jetty" scheme="http" host="{{vel.rest.host}}" port="{{vel.rest.port}}" contextPath="{{vel.rest.contextpath}}" bindingMode="json">        <endpointProperty key="httpBindingRef" value="jettyNoStackTraceHTTPBinding" />    </restConfiguration>    <!-- ... --></camelContext>{code}The http binding is not picked up though. At runtime the custom binding does not get triggered.The logs show the generated endpoint URL without the {{httpBindingRef}} query parameter:{noformat}2016-02-12 16:22:15,454 | INFO  | pool-37-thread-1 | BlueprintCamelContext            | 64 - org.apache.camel.camel-core - 2.16.2 |   | Route: route1 started and consuming from: Endpoint[jetty:http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpMethodRestrict=PUT]{noformat}However, if I try to specify a binding bean that does not exist I receive an error during context ramp-up (as would be expected); the endpoint URI logged in the error message includes the {{httpBindingRef}} query parameter:{noformat}2016-02-12 16:26:17,194 | ERROR | Thread-35        | BlueprintCamelContext            | 61 - org.apache.camel.camel-blueprint - 2.16.2 |   | Error occurred during starting Camel: CamelContext(vel-jetty-rest-service) due Failed to resolve endpoint: jetty://http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpBindingRef=thisBindingBeanDoesNotExist&httpMethodRestrict=PUT due to: No bean could be found in the registry for: thisBindingBeanDoesNotExist of type: org.apache.camel.http.common.HttpBindingorg.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jetty://http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpBindingRef=thisBindingBeanDoesNotExist&httpMethodRestrict=PUT due to: No bean could be found in the registry for: thisBindingBeanDoesNotExist of type: org.apache.camel.http.common.HttpBinding{noformat} Improvement REST DSL  - Jetty component ignores custom HTTP Binding I am attempting to set a custom HTTP binding on the Jetty component used with the REST DSL:{code:xml}<bean id="jettyNoStackTraceHTTPBinding" class="ch.vivates.vel.rest.JettyNoStacktraceHttpBinding" /><camelContext id="vel-jetty-rest-service" allowUseOriginalMessage="false" xmlns="http://camel.apache.org/schema/blueprint" streamCache="false">    <restConfiguration component="jetty" scheme="http" host="{{vel.rest.host}}" port="{{vel.rest.port}}" contextPath="{{vel.rest.contextpath}}" bindingMode="json">        <endpointProperty key="httpBindingRef" value="jettyNoStackTraceHTTPBinding" />    </restConfiguration>    <!-- ... --></camelContext>{code}The http binding is not picked up though. At runtime the custom binding does not get triggered.The logs show the generated endpoint URL without the {{httpBindingRef}} query parameter:{noformat}2016-02-12 16:22:15,454 | INFO  | pool-37-thread-1 | BlueprintCamelContext            | 64 - org.apache.camel.camel-core - 2.16.2 |   | Route: route1 started and consuming from: Endpoint[jetty:http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpMethodRestrict=PUT]{noformat}However, if I try to specify a binding bean that does not exist I receive an error during context ramp-up (as would be expected); the endpoint URI logged in the error message includes the {{httpBindingRef}} query parameter:{noformat}2016-02-12 16:26:17,194 | ERROR | Thread-35        | BlueprintCamelContext            | 61 - org.apache.camel.camel-blueprint - 2.16.2 |   | Error occurred during starting Camel: CamelContext(vel-jetty-rest-service) due Failed to resolve endpoint: jetty://http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpBindingRef=thisBindingBeanDoesNotExist&httpMethodRestrict=PUT due to: No bean could be found in the registry for: thisBindingBeanDoesNotExist of type: org.apache.camel.http.common.HttpBindingorg.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jetty://http://0.0.0.0:8181/vivates/vel/event/%7Bid%7D?httpBindingRef=thisBindingBeanDoesNotExist&httpMethodRestrict=PUT due to: No bean could be found in the registry for: thisBindingBeanDoesNotExist of type: org.apache.camel.http.common.HttpBinding{noformat}
CAMEL-9594 Use swagger.json instead of api-doc in examples We should use swagger.json which is the convention name used by swaggerhttp://swagger.io/specification/api-docs was the old for 1.x spec. Improvement Use swagger.json instead of api-doc in examples We should use swagger.json which is the convention name used by swaggerhttp://swagger.io/specification/api-docs was the old for 1.x spec.
CAMEL-9589 Apache Artemis example with Camel We should have an example that uses Camel with ActiveMQ Artemis as the broker. For example we have the widget-gadget that uses regular ActiveMQ. We could create an example with something similar or something else.The idea is to show Camel as a client connecting to a remote Artemis broker. New Feature Apache Artemis example with Camel We should have an example that uses Camel with ActiveMQ Artemis as the broker. For example we have the widget-gadget that uses regular ActiveMQ. We could create an example with something similar or something else.The idea is to show Camel as a client connecting to a remote Artemis broker.
CAMEL-9585 camel-jms: Support dynamic username/password settings Right now camel-jms sets username/password when it starts up herehttps://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java#L864-L871But it would be great if it can override the credentials per exchange dynamically via exchange header or something like that.The org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter has setCredentialsForCurrentThread() method, which looks useful for this purpose. Improvement camel-jms: Support dynamic username/password settings Right now camel-jms sets username/password when it starts up herehttps://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java#L864-L871But it would be great if it can override the credentials per exchange dynamically via exchange header or something like that.The org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter has setCredentialsForCurrentThread() method, which looks useful for this purpose.
CAMEL-9583 camel-jackson - Allow the FallbackTypeConverter to convert to/from string types So it can be similar to what camel-jaxb can do with annotated POJOs, but just for json.We need to have a few options to configure it so you can limit how far jackson should go etc. Improvement camel-jackson - Allow the FallbackTypeConverter to convert to/from string types So it can be similar to what camel-jaxb can do with annotated POJOs, but just for json.We need to have a few options to configure it so you can limit how far jackson should go etc.
CAMEL-9577 Only support suspension if a component has custom logic We should mark components that has custom logic for suspend with a Suspenable marker interface.This allows us to know this as the ServiceSupport base class has a default suspend implementation that the component inherits. This leads to situations where a suspend do not appear to suspend because the default implement is a noop. Improvement Only support suspension if a component has custom logic We should mark components that has custom logic for suspend with a Suspenable marker interface.This allows us to know this as the ServiceSupport base class has a default suspend implementation that the component inherits. This leads to situations where a suspend do not appear to suspend because the default implement is a noop.
CAMEL-9573 Multicast and RecipientList - ShareUnitOfWork should rework a bit They should not return CamelInternalProcessor in the createProcessor. But should like aggregate / splitter does.We would need a way to add the advice in another way, so we can return the real processor in the method. Task Multicast and RecipientList - ShareUnitOfWork should rework a bit They should not return CamelInternalProcessor in the createProcessor. But should like aggregate / splitter does.We would need a way to add the advice in another way, so we can return the real processor in the method.
CAMEL-9564 EndpointHelper.resolveReferenceListParameter should not return immutable lists EndpointHelper.resolveReferenceListParameter can sometimes return immutable lists, which can cause issues when other components try to add items to those lists.The fact that other endpoints (like jetty-common JettyHttpComponent [enableCors line 279]) can add other components into the lists can cause hard to track down failures.Sorry don't have a patch file, but the lines i would fix in EndpointHelper.java would be:line 350: return Collections.emptyList();line 360: return Arrays.asList(elements.size())These should just return ArrayLists.I know these parameters should optionally be Lists already, and this is a slight performance hit when starting up, but i think it's better than trying to figure out what went wrong when it fails.My particular scenario was a Jetty endpoint with a filtersRef (with a single Filter - not a list) and then enableCORS=true.  The filtersRef returned Arrays.asLIst and then enableCORS tried to add an element into that list and crashed. Improvement EndpointHelper.resolveReferenceListParameter should not return immutable lists EndpointHelper.resolveReferenceListParameter can sometimes return immutable lists, which can cause issues when other components try to add items to those lists.The fact that other endpoints (like jetty-common JettyHttpComponent [enableCors line 279]) can add other components into the lists can cause hard to track down failures.Sorry don't have a patch file, but the lines i would fix in EndpointHelper.java would be:line 350: return Collections.emptyList();line 360: return Arrays.asList(elements.size())These should just return ArrayLists.I know these parameters should optionally be Lists already, and this is a slight performance hit when starting up, but i think it's better than trying to figure out what went wrong when it fails.My particular scenario was a Jetty endpoint with a filtersRef (with a single Filter - not a list) and then enableCORS=true.  The filtersRef returned Arrays.asLIst and then enableCORS tried to add an element into that list and crashed.
CAMEL-9563 Please delete old releases from mirroring system To reduce the load on the ASF mirrors, projects are required to delete old releases [1]Please can you remove all non-current releases?i.e. 2.14.4, 2.15.2Thanks![1] http://www.apache.org/dev/release.html#when-to-archive Task Please delete old releases from mirroring system To reduce the load on the ASF mirrors, projects are required to delete old releases [1]Please can you remove all non-current releases?i.e. 2.14.4, 2.15.2Thanks![1] http://www.apache.org/dev/release.html#when-to-archive
CAMEL-9559 camel-undertow - Allow to configure SSL on component level See SOhttp://stackoverflow.com/questions/35136796/how-do-i-configure-sslcontextparameters-for-camel-undertow-to-use-with-the-rest Improvement camel-undertow - Allow to configure SSL on component level See SOhttp://stackoverflow.com/questions/35136796/how-do-i-configure-sslcontextparameters-for-camel-undertow-to-use-with-the-rest
CAMEL-9551 ErrorHandler - Should not log message body by default Related to ticket: CAMEL-9539	The error handler will log exhausted exchanges with stacktrace and exchange message body/header details. We should turn the latter off, so they are not logged by default.This helps to avoid logging message details that may be sensitive. And do that by default.People can turn on the old behavior with the new logExhaustedMessageBody option. Which logs all the message exchange/body details as before (also headers). Improvement ErrorHandler - Should not log message body by default Related to ticket: CAMEL-9539	The error handler will log exhausted exchanges with stacktrace and exchange message body/header details. We should turn the latter off, so they are not logged by default.This helps to avoid logging message details that may be sensitive. And do that by default.People can turn on the old behavior with the new logExhaustedMessageBody option. Which logs all the message exchange/body details as before (also headers).
CAMEL-9550 File consumer - Use Filter while deleting orphaned marker lock files Assume we have the FileComponent configured as follows:* {{recursive=true}}* {{filter=#DirectoryFilter}}* {{readLockDeleteOrphanLockFiles=true}}The FileComponent visits the *whole* directory tree in order to delete the orphaned marker lock files:* This can takes a lot of time (especially if remote filesystem)* And it is dangerous, because unwanted directories are visited too and may conflict with other processes.The orphaned marker lock files procedure, should be close to the polling procedure ({{filter}}, {{include}}, {{exclude}}, {{antInclude}}, {{antExclude}}, ...) Improvement File consumer - Use Filter while deleting orphaned marker lock files Assume we have the FileComponent configured as follows:* {{recursive=true}}* {{filter=#DirectoryFilter}}* {{readLockDeleteOrphanLockFiles=true}}The FileComponent visits the *whole* directory tree in order to delete the orphaned marker lock files:* This can takes a lot of time (especially if remote filesystem)* And it is dangerous, because unwanted directories are visited too and may conflict with other processes.The orphaned marker lock files procedure, should be close to the polling procedure ({{filter}}, {{include}}, {{exclude}}, {{antInclude}}, {{antExclude}}, ...)
CAMEL-9549 camel-schematron - More fine grained error messages when compiling the schema When pre-compiling the schematron rules files. Errors such as xslt-compilation errors, includes not found etc. are always caught and presented with an error message saying incorrectly that the schematron rules file could not be found. In the two errors above the file has been found but compilation of it has failed. To make troubleshooting easier i think that a more fine grained error handling could provide the user with a better view of what the underlying error really is.  Improvement camel-schematron - More fine grained error messages when compiling the schema When pre-compiling the schematron rules files. Errors such as xslt-compilation errors, includes not found etc. are always caught and presented with an error message saying incorrectly that the schematron rules file could not be found. In the two errors above the file has been found but compilation of it has failed. To make troubleshooting easier i think that a more fine grained error handling could provide the user with a better view of what the underlying error really is. 
CAMEL-9548 Dead link in "Apache Camel: Contributing" page On the Apache Camel Contribution page (http://camel.apache.org/contributing.html) there is a dead link to a SonarQube dashboard (http://nemo.sonarsource.org/dashboard/index/org.apache.camel:camel). When you go to that link SonarQube says "The requested project does not exist. Either it has never been analyzed successfully or it has been deleted.". So there is no obvious way to few the coverage report. Thanks, Caleb Test Dead link in "Apache Camel: Contributing" page On the Apache Camel Contribution page (http://camel.apache.org/contributing.html) there is a dead link to a SonarQube dashboard (http://nemo.sonarsource.org/dashboard/index/org.apache.camel:camel). When you go to that link SonarQube says "The requested project does not exist. Either it has never been analyzed successfully or it has been deleted.". So there is no obvious way to few the coverage report. Thanks, Caleb
CAMEL-9544 Option to add headers to MIME-Multipart in DataFormat In some cases it might be useful to add Camel headers to a MIME Multipart when the MIME headers are part of the message body.The attached patch allows to transfer header (and attachment) information with protocols that support neither headers nor attachments (e.g. FTP).It adds one additional parameter to the MIME-Multipart DataFormat:includeHeaders: A regex that defines which Camel headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true.Default is to include no Camel headers. New Feature Option to add headers to MIME-Multipart in DataFormat In some cases it might be useful to add Camel headers to a MIME Multipart when the MIME headers are part of the message body.The attached patch allows to transfer header (and attachment) information with protocols that support neither headers nor attachments (e.g. FTP).It adds one additional parameter to the MIME-Multipart DataFormat:includeHeaders: A regex that defines which Camel headers are also included as MIME headers into the MIME multipart. This will only work if headersInline is set to true.Default is to include no Camel headers.
CAMEL-9539 toString of Exchange/Message should only output id  See nabblehttp://camel.465427.n5.nabble.com/Change-in-exception-messages-between-2-15-3-and-2-16-1-message-bodies-are-logged-tp5776788.htmlWe should avoid outputting message body etc as that may contain sensitive information. Improvement toString of Exchange/Message should only output id  See nabblehttp://camel.465427.n5.nabble.com/Change-in-exception-messages-between-2-15-3-and-2-16-1-message-bodies-are-logged-tp5776788.htmlWe should avoid outputting message body etc as that may contain sensitive information.
CAMEL-9537 Specifying allowableValues in RestOperationParamDefinition is not output as an enum in swagger output Doing something like this:{code}rest("/").post("{siteKey}/{userId}")  .param()    .name("siteKey")    .allowableValues("ST1", "ST2", "ST3", "ST7", "SP1")  .endParam().endRest();{code}Is only outputting a parameter object like this:{code}{"name": "siteKey","in": "path","description": "Which site to use for the login.","required": true,"type": "string"}{code}[There's an enum key|http://swagger.io/specification/#parameterObject]. Improvement Specifying allowableValues in RestOperationParamDefinition is not output as an enum in swagger output Doing something like this:{code}rest("/").post("{siteKey}/{userId}")  .param()    .name("siteKey")    .allowableValues("ST1", "ST2", "ST3", "ST7", "SP1")  .endParam().endRest();{code}Is only outputting a parameter object like this:{code}{"name": "siteKey","in": "path","description": "Which site to use for the login.","required": true,"type": "string"}{code}[There's an enum key|http://swagger.io/specification/#parameterObject].
CAMEL-9536 org.codehaus.mojo:taglist-maven-plugin:maven-plugin:2.10 does not exist When you run mvn dependency:resolve-plugins in camel root, you could not get org.codehaus.mojo:taglist-maven-plugin:maven-plugin:2.10.I checked the mojohaus project and github taglist-maven-plugin source and there is not 2.10 version. The last version is 2.4.http://www.mojohaus.org/plugins.html Task org.codehaus.mojo:taglist-maven-plugin:maven-plugin:2.10 does not exist When you run mvn dependency:resolve-plugins in camel root, you could not get org.codehaus.mojo:taglist-maven-plugin:maven-plugin:2.10.I checked the mojohaus project and github taglist-maven-plugin source and there is not 2.10 version. The last version is 2.4.http://www.mojohaus.org/plugins.html
CAMEL-9535 Could not find artifact camel-commands-spring-boot SNAPSHOT in maven2 repository When you run mvn dependency:resolve in camel source root directory, you get the error:[ERROR] Failed to execute goal on project camel-example-spring-boot: Could not resolve dependencies for project org.apache.camel:camel-example-spring-boot:war:2.17-SNAPSHOT: Could not find artifact org.apache.camel:camel-commands-spring-boot:jar:2.17-SNAPSHOT in apache.snapshots (http://repository.apache.org/snapshots/) -> [Help 1]I browsed the apache snapshot repository (https://repository.apache.org/content/repositories/snapshots/org/apache/camel/) and "org.apache.camel:camel-commands-spring-boot:jar:2.17-SNAPSHOT" is not found.I saw that it is a new artifact... can you upload it to maven repository? Improvement Could not find artifact camel-commands-spring-boot SNAPSHOT in maven2 repository When you run mvn dependency:resolve in camel source root directory, you get the error:[ERROR] Failed to execute goal on project camel-example-spring-boot: Could not resolve dependencies for project org.apache.camel:camel-example-spring-boot:war:2.17-SNAPSHOT: Could not find artifact org.apache.camel:camel-commands-spring-boot:jar:2.17-SNAPSHOT in apache.snapshots (http://repository.apache.org/snapshots/) -> [Help 1]I browsed the apache snapshot repository (https://repository.apache.org/content/repositories/snapshots/org/apache/camel/) and "org.apache.camel:camel-commands-spring-boot:jar:2.17-SNAPSHOT" is not found.I saw that it is a new artifact... can you upload it to maven repository?
CAMEL-9531 Camel catalog - method call, tokenizer and xtokenizer do not use @XmlValue These 3 languages do not use any @XmlValue as the expression but are solely configured using attributes. Improvement Camel catalog - method call, tokenizer and xtokenizer do not use @XmlValue These 3 languages do not use any @XmlValue as the expression but are solely configured using attributes.
CAMEL-9524 file - Allow to turn on|off probe content type See nabblehttp://camel.465427.n5.nabble.com/Error-Reading-Files-from-four-different-Routes-tp5776391.htmlWe should turn off file probe by default as it brings little value, and can cause problems on various file systems.Also its likely some bottleneck with various probes that may try to read the file content to see if its xml or json files or whatnot. And we do not want that overhead of routing files by default. Improvement file - Allow to turn on|off probe content type See nabblehttp://camel.465427.n5.nabble.com/Error-Reading-Files-from-four-different-Routes-tp5776391.htmlWe should turn off file probe by default as it brings little value, and can cause problems on various file systems.Also its likely some bottleneck with various probes that may try to read the file content to see if its xml or json files or whatnot. And we do not want that overhead of routing files by default.
CAMEL-9521 camel-spring - Move osgi/spring-dm to camel-spring-dm We should move the osgi/spring-dm part out of camel-spring, so it can be a standalone module that do not import the old spring-dm stuff.Then we can have a camel-spring-dm module as a legacy way of using spring xml on osgi.This makes it possible to install and use camel-spring without bringing in the old spring-dm and spring 3.x libraries on osgi. Improvement camel-spring - Move osgi/spring-dm to camel-spring-dm We should move the osgi/spring-dm part out of camel-spring, so it can be a standalone module that do not import the old spring-dm stuff.Then we can have a camel-spring-dm module as a legacy way of using spring xml on osgi.This makes it possible to install and use camel-spring without bringing in the old spring-dm and spring 3.x libraries on osgi.
CAMEL-9520 DdbStreamConsumer should inherit ?pollStrategy from DdbStreamEndpoint I would like to be able to define my own PollingConsumerPollStrategy for a DdbStream.I can add ?pollStrategy=#myStrategy to the URI of the endpoint, and that does indeed define it correctly on the endpoint (as shown by endpoint.getPollStrategy()).However the poll strategy is not copied across to the consumer (consumer.getPollStrategy() shows the DefaultPollingConsumerPollStrategy, not my custom one). Task DdbStreamConsumer should inherit ?pollStrategy from DdbStreamEndpoint I would like to be able to define my own PollingConsumerPollStrategy for a DdbStream.I can add ?pollStrategy=#myStrategy to the URI of the endpoint, and that does indeed define it correctly on the endpoint (as shown by endpoint.getPollStrategy()).However the poll strategy is not copied across to the consumer (consumer.getPollStrategy() shows the DefaultPollingConsumerPollStrategy, not my custom one).
CAMEL-9518 Swagger may see non-camel MBeans {code}10:06:13,591 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-1-thread-1) Apache Camel 2.16.1.redhat-630008 (CamelContext: swagger-test) started in 0.399 seconds10:06:14,413 INFO  [stdout] (pool-1-thread-1) org.apache.camel:context=swagger-test,type=context,name="swagger-test": <?xml version="1.0" encoding="UTF-8" standalone="yes"?>10:06:14,413 INFO  [stdout] (pool-1-thread-1) <rests xmlns="http://camel.apache.org/schema/spring">10:06:14,414 INFO  [stdout] (pool-1-thread-1)     <rest path="/hello">10:06:14,414 INFO  [stdout] (pool-1-thread-1)         <get uri="/{name}" consumes="application/json" produces="application/json" outType="org.wildfly.camel.test.swagger.subA.User" routeId="route1">10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <description>A user object</description>10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <param name="name" type="path"/>10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <to uri="direct:hello" customId="true" id="route1"/>10:06:14,414 INFO  [stdout] (pool-1-thread-1)         </get>10:06:14,414 INFO  [stdout] (pool-1-thread-1)     </rest>10:06:14,414 INFO  [stdout] (pool-1-thread-1) </rests>10:06:14,415 INFO  [stdout] (pool-1-thread-1) 10:06:14,416 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=JVM,name=default,J2EEServer=default: null10:06:14,417 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=J2EEServer,name=default: null10:06:14,417 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=J2EEDomain,name=jboss.jsr77: null10:06:14,447 WARN  [org.apache.camel.swagger.servlet.RestSwaggerServlet] (http-/127.0.0.1:8080-1) Error rendering Swagger API due JBAS019903: No attribute called CamelVersion: javax.management.AttributeNotFoundException: JBAS019903: No attribute called CamelVersion	at org.jboss.as.jsr77.managedobject.BaseHandler.getAttribute(BaseHandler.java:59)	at org.jboss.as.jsr77.managedobject.JVMHandler.getAttribute(JVMHandler.java:80)	at org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry.getAttribute(ManagedObjectHandlerRegistry.java:91)	at org.jboss.as.jsr77.subsystem.JSR77ManagementMBeanServer.getAttribute(JSR77ManagementMBeanServer.java:141)	at org.jboss.as.jmx.PluggableMBeanServerImpl.getAttribute(PluggableMBeanServerImpl.java:392)	at org.apache.camel.swagger.RestSwaggerSupport.findCamelContexts(RestSwaggerSupport.java:162) [camel-swagger-java-2.16.1.redhat-630008.jar:2.16.1.redhat-630008]	at org.apache.camel.swagger.servlet.RestSwaggerServlet.doGet(RestSwaggerServlet.java:140) [camel-swagger-java-2.16.1.redhat-630008.jar:2.16.1.redhat-630008]	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734) [jboss-servlet-api_3.0_spec-1.0.2.Final-redhat-2.jar:1.0.2.Final-redhat-2]{code} Improvement Swagger may see non-camel MBeans {code}10:06:13,591 INFO  [org.apache.camel.impl.DefaultCamelContext] (pool-1-thread-1) Apache Camel 2.16.1.redhat-630008 (CamelContext: swagger-test) started in 0.399 seconds10:06:14,413 INFO  [stdout] (pool-1-thread-1) org.apache.camel:context=swagger-test,type=context,name="swagger-test": <?xml version="1.0" encoding="UTF-8" standalone="yes"?>10:06:14,413 INFO  [stdout] (pool-1-thread-1) <rests xmlns="http://camel.apache.org/schema/spring">10:06:14,414 INFO  [stdout] (pool-1-thread-1)     <rest path="/hello">10:06:14,414 INFO  [stdout] (pool-1-thread-1)         <get uri="/{name}" consumes="application/json" produces="application/json" outType="org.wildfly.camel.test.swagger.subA.User" routeId="route1">10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <description>A user object</description>10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <param name="name" type="path"/>10:06:14,414 INFO  [stdout] (pool-1-thread-1)             <to uri="direct:hello" customId="true" id="route1"/>10:06:14,414 INFO  [stdout] (pool-1-thread-1)         </get>10:06:14,414 INFO  [stdout] (pool-1-thread-1)     </rest>10:06:14,414 INFO  [stdout] (pool-1-thread-1) </rests>10:06:14,415 INFO  [stdout] (pool-1-thread-1) 10:06:14,416 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=JVM,name=default,J2EEServer=default: null10:06:14,417 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=J2EEServer,name=default: null10:06:14,417 INFO  [stdout] (pool-1-thread-1) jboss.jsr77:j2eeType=J2EEDomain,name=jboss.jsr77: null10:06:14,447 WARN  [org.apache.camel.swagger.servlet.RestSwaggerServlet] (http-/127.0.0.1:8080-1) Error rendering Swagger API due JBAS019903: No attribute called CamelVersion: javax.management.AttributeNotFoundException: JBAS019903: No attribute called CamelVersion	at org.jboss.as.jsr77.managedobject.BaseHandler.getAttribute(BaseHandler.java:59)	at org.jboss.as.jsr77.managedobject.JVMHandler.getAttribute(JVMHandler.java:80)	at org.jboss.as.jsr77.managedobject.ManagedObjectHandlerRegistry.getAttribute(ManagedObjectHandlerRegistry.java:91)	at org.jboss.as.jsr77.subsystem.JSR77ManagementMBeanServer.getAttribute(JSR77ManagementMBeanServer.java:141)	at org.jboss.as.jmx.PluggableMBeanServerImpl.getAttribute(PluggableMBeanServerImpl.java:392)	at org.apache.camel.swagger.RestSwaggerSupport.findCamelContexts(RestSwaggerSupport.java:162) [camel-swagger-java-2.16.1.redhat-630008.jar:2.16.1.redhat-630008]	at org.apache.camel.swagger.servlet.RestSwaggerServlet.doGet(RestSwaggerServlet.java:140) [camel-swagger-java-2.16.1.redhat-630008.jar:2.16.1.redhat-630008]	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734) [jboss-servlet-api_3.0_spec-1.0.2.Final-redhat-2.jar:1.0.2.Final-redhat-2]{code}
CAMEL-9514 camel-netty4 maximumPoolSize option is ignored We need to move the maximumPoolSize option to the camel-netty4 component as wile. Task camel-netty4 maximumPoolSize option is ignored We need to move the maximumPoolSize option to the camel-netty4 component as wile.
CAMEL-9510 In Netty4 HTTP Component there is a bug in maxHeaderSize option documentation There is a *maxHeadersSize* option in [documentation|http://camel.apache.org/netty4-http.html] but in source code is attribute *maxHeaderSize*. I think it should be *maxHeaderSize* in documentation too. Task In Netty4 HTTP Component there is a bug in maxHeaderSize option documentation There is a *maxHeadersSize* option in [documentation|http://camel.apache.org/netty4-http.html] but in source code is attribute *maxHeaderSize*. I think it should be *maxHeaderSize* in documentation too.
CAMEL-9508 camel-sjms to support jms 2.0 in osgi manifest The camel-sjms component for now supports only jms 1.1 spec, Since the JMS 2 spec maintains the backward compatibility with jms 1.1 it would be possible for the camel-sjms component to support jms 2 spec as well. Change in OSGI manfiest would allow camel-sjms to work with jms 2.0 providers as well.Issue was previously discussed in http://camel.465427.n5.nabble.com/camel-sjms-support-for-JMS-2-in-OSGI-td5776164.html Improvement camel-sjms to support jms 2.0 in osgi manifest The camel-sjms component for now supports only jms 1.1 spec, Since the JMS 2 spec maintains the backward compatibility with jms 1.1 it would be possible for the camel-sjms component to support jms 2 spec as well. Change in OSGI manfiest would allow camel-sjms to work with jms 2.0 providers as well.Issue was previously discussed in http://camel.465427.n5.nabble.com/camel-sjms-support-for-JMS-2-in-OSGI-td5776164.html
CAMEL-9507 Support suppressing body from aws-s3 consumer Add a configuration option to suppress the downloading of the s3 object for the aws-s3 consumer. Just return the metadata.Sometimes, you may want to use the claimcheck pattern with S3, where you care about a new object but will not actually download it in Camel.  An example of this is the Redshift COPY command.  When a file arrives in S3, we can import it into Redshift. New Feature Support suppressing body from aws-s3 consumer Add a configuration option to suppress the downloading of the s3 object for the aws-s3 consumer. Just return the metadata.Sometimes, you may want to use the claimcheck pattern with S3, where you care about a new object but will not actually download it in Camel.  An example of this is the Redshift COPY command.  When a file arrives in S3, we can import it into Redshift.
CAMEL-9504 OnCompletion - Keep caught exception so it can access the exception CAMEL-7707 fixed an issue with onCompletion. But some end user would like to access the caught exception in the onCompletion / onFailureOnly. And its remove currently. So we should keep that information in the exchange property. Improvement OnCompletion - Keep caught exception so it can access the exception CAMEL-7707 fixed an issue with onCompletion. But some end user would like to access the caught exception in the onCompletion / onFailureOnly. And its remove currently. So we should keep that information in the exchange property.
CAMEL-9501 Support to setup the filter InitParameter from Jetty URI Current Jetty endpoint doesn't support to setup the InitParameters from the URI, it could be handy if we support this kind of feature in camel. Improvement Support to setup the filter InitParameter from Jetty URI Current Jetty endpoint doesn't support to setup the InitParameters from the URI, it could be handy if we support this kind of feature in camel.
CAMEL-9500 CamelVersionHelper cannot handle version qualifier {code}15:16:52,966 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/swagger-tests].[ApiDeclarationServlet]] (http-/127.0.0.1:8080-1) JBWEB000236: Servlet.service() for servlet ApiDeclarationServlet threw exception: java.lang.NumberFormatException: For input string: "2161redhat-630004"	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) [rt.jar:1.8.0_31]	at java.lang.Integer.parseInt(Integer.java:580) [rt.jar:1.8.0_31]	at java.lang.Integer.valueOf(Integer.java:766) [rt.jar:1.8.0_31]	at org.apache.camel.util.CamelVersionHelper.isGE(CamelVersionHelper.java:42) [camel-core-2.16.1.redhat-630004.jar:2.16.1.redhat-630004]	at org.apache.camel.component.swagger.DefaultCamelSwaggerServlet$$anonfun$findCamelContexts$1.apply(DefaultCamelSwaggerServlet.scala:87) [camel-swagger-2.16.1.redhat-6{code} Improvement CamelVersionHelper cannot handle version qualifier {code}15:16:52,966 ERROR [org.apache.catalina.core.ContainerBase.[jboss.web].[default-host].[/swagger-tests].[ApiDeclarationServlet]] (http-/127.0.0.1:8080-1) JBWEB000236: Servlet.service() for servlet ApiDeclarationServlet threw exception: java.lang.NumberFormatException: For input string: "2161redhat-630004"	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) [rt.jar:1.8.0_31]	at java.lang.Integer.parseInt(Integer.java:580) [rt.jar:1.8.0_31]	at java.lang.Integer.valueOf(Integer.java:766) [rt.jar:1.8.0_31]	at org.apache.camel.util.CamelVersionHelper.isGE(CamelVersionHelper.java:42) [camel-core-2.16.1.redhat-630004.jar:2.16.1.redhat-630004]	at org.apache.camel.component.swagger.DefaultCamelSwaggerServlet$$anonfun$findCamelContexts$1.apply(DefaultCamelSwaggerServlet.scala:87) [camel-swagger-2.16.1.redhat-6{code}
CAMEL-9499 JMS - destination type for temp should use dash instead of colon We use colon today which makes the uri ambigious and confusing. As colon is a separator for other options.So we should use dash insteadtemp:queue -> temp-queuetemp:topic -> temp-topic Improvement JMS - destination type for temp should use dash instead of colon We use colon today which makes the uri ambigious and confusing. As colon is a separator for other options.So we should use dash insteadtemp:queue -> temp-queuetemp:topic -> temp-topic
CAMEL-9498 Always provide a writable local registry Many Camel components need to reference objects in CamelContext's registry as part of their configuration (for example httpClientConfigurer for http/http4 and restletRealm for restlet).These objects often apply to that particular CamelContext and not others, thus the registry holding these bits could be local instead of, say, OSGi service registry. Using a local registry prevents the risk of conflicting keys and spares us from devising a naming policy for even trivial stuff.To conveniently create and add these objects, even from inside RouteBuilder's configure method, we need write access to said registry.CamelContext should, in my opinion, provide a local SimpleRegistry that is always available. Improvement Always provide a writable local registry Many Camel components need to reference objects in CamelContext's registry as part of their configuration (for example httpClientConfigurer for http/http4 and restletRealm for restlet).These objects often apply to that particular CamelContext and not others, thus the registry holding these bits could be local instead of, say, OSGi service registry. Using a local registry prevents the risk of conflicting keys and spares us from devising a naming policy for even trivial stuff.To conveniently create and add these objects, even from inside RouteBuilder's configure method, we need write access to said registry.CamelContext should, in my opinion, provide a local SimpleRegistry that is always available.
CAMEL-9496 camel-hbase - The mapping options in the uri should use prefix Today you can provide a number of dynamic key/values in the uri for row mapping. We should prefix them with mapping. so they are more understandable and also useable for component docs and tooling Improvement camel-hbase - The mapping options in the uri should use prefix Today you can provide a number of dynamic key/values in the uri for row mapping. We should prefix them with mapping. so they are more understandable and also useable for component docs and tooling
CAMEL-9495 camel-hipchat - Should require url for hipchat server And also fix the parsing logic that is wrong today.We should require to specify the url of the hipchat server so its consistent and not magic what happens. Improvement camel-hipchat - Should require url for hipchat server And also fix the parsing logic that is wrong today.We should require to specify the url of the hipchat server so its consistent and not magic what happens.
CAMEL-9492 camel-netty-http - The http/https protocol should be mandatory Like the other http components you need to tell if its http or https. And its also as shown on the documentation.But you could potential omit http, and get http protocol. But we should make it required option. Improvement camel-netty-http - The http/https protocol should be mandatory Like the other http components you need to tell if its http or https. And its also as shown on the documentation.But you could potential omit http, and get http protocol. But we should make it required option.
CAMEL-9490 FacebookMethodsTypeHelperTest.testGetType fails with IllegalArgument Exception The FacebookMethodsTypeHelperTest fails with the error shown below.  It looks like the result of this commit:  https://github.com/apache/camel/commit/846b097c2b881eac68328800bdd6a9d3017921c7Running org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTestTests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.324 sec <<< FAILURE! - in org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTesttestGetType(org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest)  Time elapsed: 0.012 sec  <<< ERROR!java.lang.IllegalArgumentException: readingOptions	at org.apache.camel.component.facebook.data.FacebookMethodsTypeHelper.getType(FacebookMethodsTypeHelper.java:264)	at org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest.testGetType(FacebookMethodsTypeHelperTest.java:125) Test FacebookMethodsTypeHelperTest.testGetType fails with IllegalArgument Exception The FacebookMethodsTypeHelperTest fails with the error shown below.  It looks like the result of this commit:  https://github.com/apache/camel/commit/846b097c2b881eac68328800bdd6a9d3017921c7Running org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTestTests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.324 sec <<< FAILURE! - in org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTesttestGetType(org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest)  Time elapsed: 0.012 sec  <<< ERROR!java.lang.IllegalArgumentException: readingOptions	at org.apache.camel.component.facebook.data.FacebookMethodsTypeHelper.getType(FacebookMethodsTypeHelper.java:264)	at org.apache.camel.component.facebook.data.FacebookMethodsTypeHelperTest.testGetType(FacebookMethodsTypeHelperTest.java:125)
CAMEL-9488 Camel script - Add missing languages There is some not so often used langauges like ruby php that are avail using camel-script, but they are not available as a Camel language for the component docs and catalog. Improvement Camel script - Add missing languages There is some not so often used langauges like ruby php that are avail using camel-script, but they are not available as a Camel language for the component docs and catalog.
CAMEL-9487 Why does camel http depends on org.apache.geronimo.specs:geronimo-servlet_3.0_spec? Why does camel http depend on org.apache.geronimo.specs':'geronimo-servlet_3.0_spec'?This could conflict with project's servlet-api dependency. I had a really hard to find bug caused by this geronimo dependency conflicting with my servlet-api dependency.There is any special reason for camel http depend on it? Looks like it could run outside a servlet container, so this dependency shouldn't be needed. Improvement Why does camel http depends on org.apache.geronimo.specs:geronimo-servlet_3.0_spec? Why does camel http depend on org.apache.geronimo.specs':'geronimo-servlet_3.0_spec'?This could conflict with project's servlet-api dependency. I had a really hard to find bug caused by this geronimo dependency conflicting with my servlet-api dependency.There is any special reason for camel http depend on it? Looks like it could run outside a servlet container, so this dependency shouldn't be needed.
CAMEL-9486 Camel component docs - Add support for username password configured in userinfo part of uri Some components allow to configure username and/or password in userinfo part of uri, such as ftp / ssh components.This alternative syntax should be supported, so Camel catalog and the component docs is aware of this. Improvement Camel component docs - Add support for username password configured in userinfo part of uri Some components allow to configure username and/or password in userinfo part of uri, such as ftp / ssh components.This alternative syntax should be supported, so Camel catalog and the component docs is aware of this.
CAMEL-9484 Make CamelTestContextManager extendable Recently i've been working on testing framework on top of camel-test and found, that making org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner.CamelTestContextManager as non-final and separate public class would make extendability of camel-test component easier. As now i have to extend CamelSpringJUnit4ClassRunner, make my own and copy-paste the code from CamelTestContextManager in order to add common TestExecutionListener. Having @TestExecutionListeners(listeners = {... is not really an option, as it is not really prone to human error factor.any thoughts on this? Improvement Make CamelTestContextManager extendable Recently i've been working on testing framework on top of camel-test and found, that making org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner.CamelTestContextManager as non-final and separate public class would make extendability of camel-test component easier. As now i have to extend CamelSpringJUnit4ClassRunner, make my own and copy-paste the code from CamelTestContextManager in order to add common TestExecutionListener. Having @TestExecutionListeners(listeners = {... is not really an option, as it is not really prone to human error factor.any thoughts on this?
CAMEL-9482 Remove some deprecated options on http/http4/servlet Remove some old options that has been deprecated forever Improvement Remove some deprecated options on http/http4/servlet Remove some old options that has been deprecated forever
CAMEL-9479 bean/class component - Should use bean. prefix for bean options The bean/class component allows configuring the bean instance with additional parameters from the uri. But this is maybe not well know. We should make those options stand out and use bean. as prefix, so users should use that to make it clear its for the bean. Then we can also add that better in the docs. Improvement bean/class component - Should use bean. prefix for bean options The bean/class component allows configuring the bean instance with additional parameters from the uri. But this is maybe not well know. We should make those options stand out and use bean. as prefix, so users should use that to make it clear its for the bean. Then we can also add that better in the docs.
CAMEL-9475 Simple - Calling method should favor best matching type If you have an ArrayList in the message body, and do a   <to uri="language:simple:${body.remove(0)}?transform=false"/>Then Camel may call the remove(Object) on the list, instead of remove(int) Improvement Simple - Calling method should favor best matching type If you have an ArrayList in the message body, and do a   <to uri="language:simple:${body.remove(0)}?transform=false"/>Then Camel may call the remove(Object) on the list, instead of remove(int)
CAMEL-9474 camel-jpa - Add consumer options to component docs All the consumer specific options is not in the component docs Improvement camel-jpa - Add consumer options to component docs All the consumer specific options is not in the component docs
CAMEL-9473 camel-mail - The from/to/cc/bcc options should be like others and in component docs They are not defined as options on the endpoint, and they are using different case, eg To instead of to.We should align this so they are just like any other options. Improvement camel-mail - The from/to/cc/bcc options should be like others and in component docs They are not defined as options on the endpoint, and they are using different case, eg To instead of to.We should align this so they are just like any other options.
CAMEL-9472 Add multi value to component docs Some options can be configured using multi-value key/values such as setting options on scheduler, and other where the options is a Map type.Some components allow setting those map key/values in the uri, as multi values, eg{code}file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456";{code}The option on the endpoint is named schedulerProperties of Map type. But in the uri you can also configure them with the scheduler. prefix. We need this information in the component docs schema. Improvement Add multi value to component docs Some options can be configured using multi-value key/values such as setting options on scheduler, and other where the options is a Map type.Some components allow setting those map key/values in the uri, as multi values, eg{code}file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456";{code}The option on the endpoint is named schedulerProperties of Map type. But in the uri you can also configure them with the scheduler. prefix. We need this information in the component docs schema.
CAMEL-9471 Tokenizer - Add option to skip first To make it easy to skip first element when for example splitting a CSV file and using the tokenizer to split the file. Improvement Tokenizer - Add option to skip first To make it easy to skip first element when for example splitting a CSV file and using the tokenizer to split the file.
CAMEL-9470 Add consumer option to component docs Some options is now in the component docs, which is the consumer options that is prefixed with consumer. such as{code}	seda:foo?synchronous=true&consumer.exceptionHandler=#myHandler	file://target/pollstrategy/?consumer.pollStrategy=#myPoll&noop=true&initialDelay=0&delay=10{code}Ideally we shouldn't have the consumer. prefix anymore, which is more of historical reasons we have them. But an option is just as-is on the endpoint, and marked with labels if its consumer/producer etc. Improvement Add consumer option to component docs Some options is now in the component docs, which is the consumer options that is prefixed with consumer. such as{code}	seda:foo?synchronous=true&consumer.exceptionHandler=#myHandler	file://target/pollstrategy/?consumer.pollStrategy=#myPoll&noop=true&initialDelay=0&delay=10{code}Ideally we shouldn't have the consumer. prefix anymore, which is more of historical reasons we have them. But an option is just as-is on the endpoint, and marked with labels if its consumer/producer etc.
CAMEL-9469 Properties component - Should include component docs So we have it auto documented as well like any of the other components. Improvement Properties component - Should include component docs So we have it auto documented as well like any of the other components.
CAMEL-9467 Camel-Kafka: Upgrade to kafka 0.9 and use the Java client instead of Scala From release 0.9.0.0 the Kafka Consumer/Producer configuration properties seems to be changed a little.Also we have to use the new Java implementation of Kafka Producer/Consumer, actually we are using the Scala version Task Camel-Kafka: Upgrade to kafka 0.9 and use the Java client instead of Scala From release 0.9.0.0 the Kafka Consumer/Producer configuration properties seems to be changed a little.Also we have to use the new Java implementation of Kafka Producer/Consumer, actually we are using the Scala version
CAMEL-9466 Camel model - We should be able to know if its a predicate or expression The EIPs that use an expression is set this as a ExpressionDefinition which is dual that can be predicate or expression.We should have a way in the model to determine if its used as expression or predicate.eg filter is using a predicatebut transform is using an expression Improvement Camel model - We should be able to know if its a predicate or expression The EIPs that use an expression is set this as a ExpressionDefinition which is dual that can be predicate or expression.We should have a way in the model to determine if its used as expression or predicate.eg filter is using a predicatebut transform is using an expression
CAMEL-9461 camel-sql - Allow to load sql from resource The sql queries are in the endpoint uri. We should allow to refer to external file. Today you can use property placeholder, but then the uri still include the query.This improves the situation so the uri dont include the SQL query but only the reference. Which makes the uri shorter. Improvement camel-sql - Allow to load sql from resource The sql queries are in the endpoint uri. We should allow to refer to external file. Today you can use property placeholder, but then the uri still include the query.This improves the situation so the uri dont include the SQL query but only the reference. Which makes the uri shorter.
CAMEL-9457 Camel Main - Stop from JMX should trigger stop of the Main/JVM See nabblehttp://camel.465427.n5.nabble.com/MainListenerSupport-afterStop-is-never-called-spring-Main-tp5775458.htmlThis requires we add an lifecycle listener in the main so the main can react when the stop is invoked on JMX, so it can trigger its shutdown routine. Improvement Camel Main - Stop from JMX should trigger stop of the Main/JVM See nabblehttp://camel.465427.n5.nabble.com/MainListenerSupport-afterStop-is-never-called-spring-Main-tp5775458.htmlThis requires we add an lifecycle listener in the main so the main can react when the stop is invoked on JMX, so it can trigger its shutdown routine.
CAMEL-9456 Component docs - Add information if a component is deprecated So we can know if the component is deprecated or not Improvement Component docs - Add information if a component is deprecated So we can know if the component is deprecated or not
CAMEL-9455 Enhance Google Calendar service account with user impersonation support Enhance the service account feature of the Google Calendar component (as introduced with [CAMEL-8777|https://issues.apache.org/jira/browse/CAMEL-8777]) with support for [user impersonation|https://developers.google.com/identity/protocols/OAuth2ServiceAccount#delegatingauthority]. Improvement Enhance Google Calendar service account with user impersonation support Enhance the service account feature of the Google Calendar component (as introduced with [CAMEL-8777|https://issues.apache.org/jira/browse/CAMEL-8777]) with support for [user impersonation|https://developers.google.com/identity/protocols/OAuth2ServiceAccount#delegatingauthority].
CAMEL-9454 camel-gora - Should preserve headers It losses the headers, we should preserve them which the other component does. Improvement camel-gora - Should preserve headers It losses the headers, we should preserve them which the other component does.
CAMEL-9451 Rabbitmq consumer should be able to suspend/resume Add support for suspend and resume on rabbit mq consumer Improvement Rabbitmq consumer should be able to suspend/resume Add support for suspend and resume on rabbit mq consumer
CAMEL-9450 rest-dsl - Configuration allow to use # to refer to beans to be looked up So you can configure rest configuration to refer to beans in the registry. Improvement rest-dsl - Configuration allow to use # to refer to beans to be looked up So you can configure rest configuration to refer to beans in the registry.
CAMEL-9447 camel-swagger-java - Add type for response model See SOhttp://stackoverflow.com/questions/34410649/responsemodel-method-in-restoperationresponsemsgdefinition-of-apache-camel Improvement camel-swagger-java - Add type for response model See SOhttp://stackoverflow.com/questions/34410649/responsemodel-method-in-restoperationresponsemsgdefinition-of-apache-camel
CAMEL-9446 camel-swagger-java - Support allowedValues in model generated See SOhttp://stackoverflow.com/questions/34416205/how-to-write-a-param-with-query-values-of-enum-type-in-camel-2-16 Improvement camel-swagger-java - Support allowedValues in model generated See SOhttp://stackoverflow.com/questions/34416205/how-to-write-a-param-with-query-values-of-enum-type-in-camel-2-16
CAMEL-9437 Fix checkstyle indentation violation for generated API test cases  The .to element of route definition generated by camel-api-component-maven-plugin is not properly indented and that triggers checkstyle violations.I'll provide a PR. Improvement Fix checkstyle indentation violation for generated API test cases  The .to element of route definition generated by camel-api-component-maven-plugin is not properly indented and that triggers checkstyle violations.I'll provide a PR.
CAMEL-9436 camel-catalog - Make it easy to include extra components For example to add activemq-camel to include activemq, and then what extra components end user may develop and use in-house.They should be able to add easily to the camel-catalog so they are first-class citizen in the catalog too. Improvement camel-catalog - Make it easy to include extra components For example to add activemq-camel to include activemq, and then what extra components end user may develop and use in-house.They should be able to add easily to the camel-catalog so they are first-class citizen in the catalog too.
CAMEL-9434 camel-catalog - Add did you mean functionality We could add an optional module to use lucene spell checker to provide suggestions if people make a mistype in an endpoint uri option.We could make a camel-catalog-lucene module or something that is optional to include, and if present then the validator can leverage it to get suggestions that it can report back. Improvement camel-catalog - Add did you mean functionality We could add an optional module to use lucene spell checker to provide suggestions if people make a mistype in an endpoint uri option.We could make a camel-catalog-lucene module or something that is optional to include, and if present then the validator can leverage it to get suggestions that it can report back.
CAMEL-9429 Upgrade to ActiveMQ 5.13.1 When updating then do as dejan says hereHi Claus, I implemented a fix for this in https://issues.apache.org/jira/browse/AMQ-6077. If you can give it a look and see if anything else is missing, it would greatly appreciated. Here are the proposed changes to the Camel once we have 5.13.1 release https://github.com/dejanb/camel/commit/6c942f4bac18ab84c76411515d1e87caaf7705a4BTW. We should change version of the current master to 5.14-SNAPSHOT now that 5.13.0 is out. Regards -- Dejan Bosanac about.me/dejanb Also I think the examples such as the spring jms remoting is affecteted if it sends objects over the wirehttps://github.com/apache/camel/tree/master/examples/camel-example-spring-jms Task Upgrade to ActiveMQ 5.13.1 When updating then do as dejan says hereHi Claus, I implemented a fix for this in https://issues.apache.org/jira/browse/AMQ-6077. If you can give it a look and see if anything else is missing, it would greatly appreciated. Here are the proposed changes to the Camel once we have 5.13.1 release https://github.com/dejanb/camel/commit/6c942f4bac18ab84c76411515d1e87caaf7705a4BTW. We should change version of the current master to 5.14-SNAPSHOT now that 5.13.0 is out. Regards -- Dejan Bosanac about.me/dejanb Also I think the examples such as the spring jms remoting is affecteted if it sends objects over the wirehttps://github.com/apache/camel/tree/master/examples/camel-example-spring-jms
CAMEL-9428 Camel catalog - Include details about CamelContext XML We include a lot of details in camel-catalog. What is missing is the model of <camelContext> which we do not include today. We only include the eip models from camel-core. As <camelContext> is outside core in spring/blueprint, then we need to add some work in these modules to generate that model that the catalog can include.When we have that we have everything covered. Improvement Camel catalog - Include details about CamelContext XML We include a lot of details in camel-catalog. What is missing is the model of <camelContext> which we do not include today. We only include the eip models from camel-core. As <camelContext> is outside core in spring/blueprint, then we need to add some work in these modules to generate that model that the catalog can include.When we have that we have everything covered.
CAMEL-9427 camel-jetty - Should also support rest-dsl with api-doc It should also implement api consumer so you can use jetty to service api-docs when adding camel-swagger-java to the classpath. The other components support this already. Improvement camel-jetty - Should also support rest-dsl with api-doc It should also implement api consumer so you can use jetty to service api-docs when adding camel-swagger-java to the classpath. The other components support this already.
CAMEL-9419 camel-spring-boot - Add component options as type-safe configuration properties So you in the applicaition.properties etc can integrate with the camel catalog, so we can provide type safe options in SB and the tooling would use this out of the box.http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-propertiesAnd make the type-safe options for configuring CamelContext itself, so you can configure options like tracing, shutdown timeout, and various others you may enable.And also for JMX management etc. New Feature camel-spring-boot - Add component options as type-safe configuration properties So you in the applicaition.properties etc can integrate with the camel catalog, so we can provide type safe options in SB and the tooling would use this out of the box.http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-propertiesAnd make the type-safe options for configuring CamelContext itself, so you can configure options like tracing, shutdown timeout, and various others you may enable.And also for JMX management etc.
CAMEL-9416 Creation of Camel-MLLP component The camel-mllp component is specifically designed to handle the nuances of the MLLP protocol and provide the functionality required by Healthcare providers to communicate with other systems using the MLLP protocol.The component is capable of handling both byte[] and String payloads which allows using other HL7 Libraries (i.e. HAPI) to parse the messages. When String payloads are specified, the component will use the systems default Charset for encoding/decoding, but this can be overridden.The component provides a simple URI for configuring MLLP endpoints: MLLP-Producers: to( "mllp://:" ) MLLP-Consumers: from("mllp://:) to listen on a specific address from("mllp://port") to listen on all local addressesMLLP-Producers also interrogate the HL7 Acknowledgment received from the external system and if a negative acknowledgment is received, the producer sets an exception on the exchange indicating the type of negative acknowledgement that was received (i.e. a HL7 Application Reject Acknowledgement or a HL7 Application Error Acknowledgement). This enables the use of Camel Redelivery Policies to configure redelivery attempts and routing erroneous messages to alternate endpoints for analysis.MLLP-Consumers will, by default, automatically generate an acknowledgement (a HL7 Application Accept Acknowledgment for successfully processed messages, or a HL7 Application Error Acknowledgement for messages where an exception is generated). This behaviour can be disabled with the autoAck=false URI parameter, which allows the user to generated their own HL7 Acknowledgment.The component also provides a Camel Processor that is capable of generating HL7 Acknowledgements. Therefore, the HAPI is not required to generate HL7 Acknowledgements - however, it can be used if desired.By default, the processor will generate a HL7 Application Accept Acknowledgement if there is not an exception on the Camel Exchange - otherwise it will generate a HL7 Application Error Acknowledgement. The generated acknowledgement is placed in the "Out" Message of the Exchange by default in order to preserve the original HL7 message for later processing (i.e. log the HL7 message and the acknowledgment together).Since the MLLP protocol does not typically use a large number of concurrent connections, the camel-mllp component uses a simple thread-per-connection model based an standard Java Sockets. This keeps the implementation simple, and also eliminates the dependencies on other camel components.An initial code base has been developed here:https://github.com/hqstevenson/camel-mllp New Feature Creation of Camel-MLLP component The camel-mllp component is specifically designed to handle the nuances of the MLLP protocol and provide the functionality required by Healthcare providers to communicate with other systems using the MLLP protocol.The component is capable of handling both byte[] and String payloads which allows using other HL7 Libraries (i.e. HAPI) to parse the messages. When String payloads are specified, the component will use the systems default Charset for encoding/decoding, but this can be overridden.The component provides a simple URI for configuring MLLP endpoints: MLLP-Producers: to( "mllp://:" ) MLLP-Consumers: from("mllp://:) to listen on a specific address from("mllp://port") to listen on all local addressesMLLP-Producers also interrogate the HL7 Acknowledgment received from the external system and if a negative acknowledgment is received, the producer sets an exception on the exchange indicating the type of negative acknowledgement that was received (i.e. a HL7 Application Reject Acknowledgement or a HL7 Application Error Acknowledgement). This enables the use of Camel Redelivery Policies to configure redelivery attempts and routing erroneous messages to alternate endpoints for analysis.MLLP-Consumers will, by default, automatically generate an acknowledgement (a HL7 Application Accept Acknowledgment for successfully processed messages, or a HL7 Application Error Acknowledgement for messages where an exception is generated). This behaviour can be disabled with the autoAck=false URI parameter, which allows the user to generated their own HL7 Acknowledgment.The component also provides a Camel Processor that is capable of generating HL7 Acknowledgements. Therefore, the HAPI is not required to generate HL7 Acknowledgements - however, it can be used if desired.By default, the processor will generate a HL7 Application Accept Acknowledgement if there is not an exception on the Camel Exchange - otherwise it will generate a HL7 Application Error Acknowledgement. The generated acknowledgement is placed in the "Out" Message of the Exchange by default in order to preserve the original HL7 message for later processing (i.e. log the HL7 message and the acknowledgment together).Since the MLLP protocol does not typically use a large number of concurrent connections, the camel-mllp component uses a simple thread-per-connection model based an standard Java Sockets. This keeps the implementation simple, and also eliminates the dependencies on other camel components.An initial code base has been developed here:https://github.com/hqstevenson/camel-mllp
CAMEL-9415 Component docs - enum options that are optional should include a none enum We should generate a "none" as the enum choice when its optional. Otherwise the enum choices make it appear that you must be one of them and therefore it becomes as mandatory option.For example the auth for http has these 3 enums    "authMethodPriority": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "enum": [ "Basic", "Digest", "NTLM" ], "deprecated": "false", "description": "Authentication method for proxy either as Basic Digest or NTLM." },But we should have "none" as the 1st choice to indicate its not in use Task Component docs - enum options that are optional should include a none enum We should generate a "none" as the enum choice when its optional. Otherwise the enum choices make it appear that you must be one of them and therefore it becomes as mandatory option.For example the auth for http has these 3 enums    "authMethodPriority": { "kind": "parameter", "group": "producer", "label": "producer", "type": "string", "javaType": "java.lang.String", "enum": [ "Basic", "Digest", "NTLM" ], "deprecated": "false", "description": "Authentication method for proxy either as Basic Digest or NTLM." },But we should have "none" as the 1st choice to indicate its not in use
CAMEL-9414 Update quickfixj to v1.6.1  quickfixj 1.6.1 is now OSGi ready and available on marketcetera maven repo{code}  <repositories>    <repository>      <id>marketcetera</id>      <url>http://repo.marketcetera.org/maven</url>      <snapshots>        <enabled>false</enabled>      </snapshots>    </repository>  </repositories>{code}information about maven repo on h ttp://www.quickfixj.org/quickfixj/usermanual/1.5.3/installation.html) Task Update quickfixj to v1.6.1  quickfixj 1.6.1 is now OSGi ready and available on marketcetera maven repo{code}  <repositories>    <repository>      <id>marketcetera</id>      <url>http://repo.marketcetera.org/maven</url>      <snapshots>        <enabled>false</enabled>      </snapshots>    </repository>  </repositories>{code}information about maven repo on h ttp://www.quickfixj.org/quickfixj/usermanual/1.5.3/installation.html)
CAMEL-9410 camel-netty-http - should default to port 80 and 443 should use port 80 or 443 by default if just http or https selected. Improvement camel-netty-http - should default to port 80 and 443 should use port 80 or 443 by default if just http or https selected.
CAMEL-9409 wiretap - Allow to use endpoint injected instance wiretap in java dsl accepts only a string uri, but we should allow endpoint instance as well. Improvement wiretap - Allow to use endpoint injected instance wiretap in java dsl accepts only a string uri, but we should allow endpoint instance as well.
CAMEL-9408 Camel ApiName Enumeration : object creation optimization The code generated by camel-api-component-maven-plugin for ApiName can potentially generate excessive garbage if fromValue is invoked often, this is because:- enum::values() is not cached so it generates a new array for each call- new for style generates an iterator each time  Improvement Camel ApiName Enumeration : object creation optimization The code generated by camel-api-component-maven-plugin for ApiName can potentially generate excessive garbage if fromValue is invoked often, this is because:- enum::values() is not cached so it generates a new array for each call- new for style generates an iterator each time 
CAMEL-9403 camel-examples should not be in BOM We should remove the camel-examples from the BOM. The examples are to be built from source, and its included in the .zip download. Task camel-examples should not be in BOM We should remove the camel-examples from the BOM. The examples are to be built from source, and its included in the .zip download.
CAMEL-9402 Upgrade Spring Dependency to 4.1.9.RELEASE or later Camel  2.16.1 has dependencies on spring 4.1.8.RELEASEThis is causing Sonatype Nexus Pro reports to identify a level 9 threat (See "foxglove" link) against artifact spring-core used in Camel.Upgrade dependency to 4.2.3.RELEASE  (see linked SPR issue). Task Upgrade Spring Dependency to 4.1.9.RELEASE or later Camel  2.16.1 has dependencies on spring 4.1.8.RELEASEThis is causing Sonatype Nexus Pro reports to identify a level 9 threat (See "foxglove" link) against artifact spring-core used in Camel.Upgrade dependency to 4.2.3.RELEASE  (see linked SPR issue).
CAMEL-9399 Provide support for Publisher Acknowledges Currently, when publishing a message through Camel there is no way make sure that the message was actually delivered to appropriate queues which does not meet the reliability requirements of certain mission-critical applications. While there are two ways of doing this - AMQP transactions and RabbitMQ's Confirms - the former is considered overly heavyweight and latter is preferred [as per RabbitMQ's documentation|https://www.rabbitmq.com/confirms.html].New configuration properties should be added to RabbitMQ endpoint - a boolean property for enabling publisher acknowledges and a long property for configuring a timeout (in most cases the publisher will not want to wait forever for a confirmation).I am almost done with the implementation - the only thing left to do is to perform a bit of code cleanup and add a few integration tests to verify that the acknowledges are working correctly. Improvement Provide support for Publisher Acknowledges Currently, when publishing a message through Camel there is no way make sure that the message was actually delivered to appropriate queues which does not meet the reliability requirements of certain mission-critical applications. While there are two ways of doing this - AMQP transactions and RabbitMQ's Confirms - the former is considered overly heavyweight and latter is preferred [as per RabbitMQ's documentation|https://www.rabbitmq.com/confirms.html].New configuration properties should be added to RabbitMQ endpoint - a boolean property for enabling publisher acknowledges and a long property for configuring a timeout (in most cases the publisher will not want to wait forever for a confirmation).I am almost done with the implementation - the only thing left to do is to perform a bit of code cleanup and add a few integration tests to verify that the acknowledges are working correctly.
CAMEL-9395 Reduce the number of default services registered in JMX There is a number of services that are enlisted in JMX under services that do not bring any value. We should introduce a NonManagedService marker interface so its easy to mark those to not be enlisted. Improvement Reduce the number of default services registered in JMX There is a number of services that are enlisted in JMX under services that do not bring any value. We should introduce a NonManagedService marker interface so its easy to mark those to not be enlisted.
CAMEL-9393 Add ability to send a message to multiple defined connections with guaranty of delivery For that moment of time there are two ways of sending message (to all available connections and to one specific) I want to extend this by providing a list of connection keys for broadcasting a message. Addition to this I want to be notified about that one or more connections were not available and have not received the message. So I can handle this situation somehow for example store the message or re send.To solve this 1) I create a new constant CONNECTION_KEY_LIST = "websocket.connectionKey.list"for transferring connections which should receive the message and ERROR_TYPE = "websocket.errorType" MESSAGE_NOT_SENT_ERROR_TYPE = 1to mark the callback event when some connections have not received the message. 2) create sendNotDeliveredMessage method in WebsocketConsumer for re sending the error event.3) change WebsocketEndpoint to provide access to WebsocketConsumer4) change WebsocketProducer to handle a new case (broadcast to defined list of connections and send error event in case some connections have not received the message) New Feature Add ability to send a message to multiple defined connections with guaranty of delivery For that moment of time there are two ways of sending message (to all available connections and to one specific) I want to extend this by providing a list of connection keys for broadcasting a message. Addition to this I want to be notified about that one or more connections were not available and have not received the message. So I can handle this situation somehow for example store the message or re send.To solve this 1) I create a new constant CONNECTION_KEY_LIST = "websocket.connectionKey.list"for transferring connections which should receive the message and ERROR_TYPE = "websocket.errorType" MESSAGE_NOT_SENT_ERROR_TYPE = 1to mark the callback event when some connections have not received the message. 2) create sendNotDeliveredMessage method in WebsocketConsumer for re sending the error event.3) change WebsocketEndpoint to provide access to WebsocketConsumer4) change WebsocketProducer to handle a new case (broadcast to defined list of connections and send error event in case some connections have not received the message)
CAMEL-9392 Add ability to pass parameters within websocket url and handle them in onOpen event  To give more dynamic for my app I need to send some additional information at the moment client connect to server through websocket. So the URL will be like :ws://localhost:" + PORT + "/hola1?param1=value1&param2=value2There is no limit of parameters for that moment of time.To use this parameters : they will be added to header as key/value and send with onOpen event.Solution:1) create map when service method is called at WebsocketConsumer such as this.queryMap = getQueryMap(request.getQueryString());2) add them to header when sendEventNotification triggered :        for (Map.Entry<String, String> param : queryMap.entrySet()) {             exchange.getIn().setHeader(param.getKey(), param.getValue());        } New Feature Add ability to pass parameters within websocket url and handle them in onOpen event  To give more dynamic for my app I need to send some additional information at the moment client connect to server through websocket. So the URL will be like :ws://localhost:" + PORT + "/hola1?param1=value1&param2=value2There is no limit of parameters for that moment of time.To use this parameters : they will be added to header as key/value and send with onOpen event.Solution:1) create map when service method is called at WebsocketConsumer such as this.queryMap = getQueryMap(request.getQueryString());2) add them to header when sendEventNotification triggered :        for (Map.Entry<String, String> param : queryMap.entrySet()) {             exchange.getIn().setHeader(param.getKey(), param.getValue());        }
CAMEL-9389 camel-metrics - Allow to capture message history easily Allow to capture the message history eip using the metrics library easily by just configuring it a bit like the route policy you can do for the routes. New Feature camel-metrics - Allow to capture message history easily Allow to capture the message history eip using the metrics library easily by just configuring it a bit like the route policy you can do for the routes.
CAMEL-9382 netty4-http - Hostname should allow without double slash If you forget http:// then netty4 cannot lookup the hostname{code}netty4-http:http://myhost/camel/hello{code}but if forget // and type{code}netty4-http:http:myhost/camel/hello{code}then the latter fails. Improvement netty4-http - Hostname should allow without double slash If you forget http:// then netty4 cannot lookup the hostname{code}netty4-http:http://myhost/camel/hello{code}but if forget // and type{code}netty4-http:http:myhost/camel/hello{code}then the latter fails.
CAMEL-9380 Method call expression - Validate bean name for mistake You may by mistake use bean: or ref: as prefix when using the method call expression.For example {code}.to("bean:foo"){code}vs{code}method("foo"){code}And this is not correct{code}method("bean:foo")method("ref:foo"){code}We could maybe in the latter case be lenient and allow using bean: and ref: as prefix as its used in endpoints etc so people may mistake and use those in the bean id in the method call expression Improvement Method call expression - Validate bean name for mistake You may by mistake use bean: or ref: as prefix when using the method call expression.For example {code}.to("bean:foo"){code}vs{code}method("foo"){code}And this is not correct{code}method("bean:foo")method("ref:foo"){code}We could maybe in the latter case be lenient and allow using bean: and ref: as prefix as its used in endpoints etc so people may mistake and use those in the bean id in the method call expression
CAMEL-9379 Camel BOM should not include tooling depdencies We have some tooling dependencies in the parent bom that causes pain for Camel end users that import the bom, and cause these depencies to influence them.We should move them to the tooling pom.xml so the Camel tooling dependencies are listed there, and thus separated from the parent bom. Improvement Camel BOM should not include tooling depdencies We have some tooling dependencies in the parent bom that causes pain for Camel end users that import the bom, and cause these depencies to influence them.We should move them to the tooling pom.xml so the Camel tooling dependencies are listed there, and thus separated from the parent bom.
CAMEL-9373 Camel JSSE security - Allow to use custom trust manager We should make it easier to use a custom TrustManager implementation so people can implement dummy / or their own kind.See nabblehttp://camel.465427.n5.nabble.com/Camel-iMap-ignore-SSL-certificat-tp5774348.html Improvement Camel JSSE security - Allow to use custom trust manager We should make it easier to use a custom TrustManager implementation so people can implement dummy / or their own kind.See nabblehttp://camel.465427.n5.nabble.com/Camel-iMap-ignore-SSL-certificat-tp5774348.html
CAMEL-9372 camel java dsl - Parameters with uris should denote that with an annotation This allows end users and tooling to know exactly if a parameter is for a Camel endpoint uri or not. Improvement camel java dsl - Parameters with uris should denote that with an annotation This allows end users and tooling to know exactly if a parameter is for a Camel endpoint uri or not.
CAMEL-9371 Add support of Swagger for restlet component Currently Swagger doesn't support restlet component, only jetty etc.It will be great to add support of restlet as some projects using this type, not jetty. Improvement Add support of Swagger for restlet component Currently Swagger doesn't support restlet component, only jetty etc.It will be great to add support of restlet as some projects using this type, not jetty.
CAMEL-9369 Acknowledge messages for RabbitMQ InOut exchange when transferring exception Currently if an exception is thrown during the processing of an InOut exchange on rabbitMQ, and both transferException=true and autoAck=false, the exception will be transferred back to the producer however the original message will remain unacknowledged.  If the server is restarted, the application will attempt to reprocess the message.I would like to propose a patch to include a basicAck in the rabbitMQ consumer in this scenario.  I’ve chosen to use a basicAck rather than a rejection given that the exception would be handled by the producer in this scenario and there should be no need to deadletter/requeue the messages on rabbitmq.More details on our setup here:http://camel.465427.n5.nabble.com/Messages-remain-unacknowledged-when-exception-thrown-during-RabbitMQ-InOut-td5773786.html Improvement Acknowledge messages for RabbitMQ InOut exchange when transferring exception Currently if an exception is thrown during the processing of an InOut exchange on rabbitMQ, and both transferException=true and autoAck=false, the exception will be transferred back to the producer however the original message will remain unacknowledged.  If the server is restarted, the application will attempt to reprocess the message.I would like to propose a patch to include a basicAck in the rabbitMQ consumer in this scenario.  I've chosen to use a basicAck rather than a rejection given that the exception would be handled by the producer in this scenario and there should be no need to deadletter/requeue the messages on rabbitmq.More details on our setup here:http://camel.465427.n5.nabble.com/Messages-remain-unacknowledged-when-exception-thrown-during-RabbitMQ-InOut-td5773786.html
CAMEL-9367 The Apache Camel Components Poster links broken The Apache Camel Components Poster links at the end of Components page [1] seems to be broken. [1] http://camel.apache.org/components.html Task The Apache Camel Components Poster links broken The Apache Camel Components Poster links at the end of Components page [1] seems to be broken. [1] http://camel.apache.org/components.html
CAMEL-9365 camel-metrics - Allow to configure naming pattern for route policy And use dot instead of colon as separator as that works better with external systems such as grafana etc. Improvement camel-metrics - Allow to configure naming pattern for route policy And use dot instead of colon as separator as that works better with external systems such as grafana etc.
CAMEL-9364 Add ability to receive onOpen/onClose/onError websocket events through camel rout. There is a case when I need to maintain my own map (websocket session key, user object). Consequently I need to receive events from onOpen/onClose/onError methods of websocket protocol and add/remove item from my map. To achieve this :1) I will add special servlet parameter, let's call it "events" with value "true". Which will enable this feature. By default it will be "false" (no parameter needed) and current functionality will not be influenced any how.<servlet>		<servlet-name>CamelWsServlet</servlet-name>		<servlet-class>org.apache.camel.component.atmosphere.websocket.CamelWebSocketServlet</servlet-class>		<init-param>			<param-name>events</param-name>			<param-value>true</param-value>		</init-param>		<load-on-startup>2</load-on-startup>	</servlet>2) I will change WebsocketHandler sending exchange message with header key such as "websocket.eventType" and possible values :ONOPEN_EVENT_TYPE = 1;ONCLOSE_EVENT_TYPE = 0;ONERROR_EVENT_TYPE = -1;to camel rout each time when we trigger onOpen/onClose/onError methods. In addition to this header parameter session key will be send as well. 3) Rout on client side will filter messages by header to distinguish events and their purposes.   New Feature Add ability to receive onOpen/onClose/onError websocket events through camel rout. There is a case when I need to maintain my own map (websocket session key, user object). Consequently I need to receive events from onOpen/onClose/onError methods of websocket protocol and add/remove item from my map. To achieve this :1) I will add special servlet parameter, let's call it "events" with value "true". Which will enable this feature. By default it will be "false" (no parameter needed) and current functionality will not be influenced any how.<servlet>		<servlet-name>CamelWsServlet</servlet-name>		<servlet-class>org.apache.camel.component.atmosphere.websocket.CamelWebSocketServlet</servlet-class>		<init-param>			<param-name>events</param-name>			<param-value>true</param-value>		</init-param>		<load-on-startup>2</load-on-startup>	</servlet>2) I will change WebsocketHandler sending exchange message with header key such as "websocket.eventType" and possible values :ONOPEN_EVENT_TYPE = 1;ONCLOSE_EVENT_TYPE = 0;ONERROR_EVENT_TYPE = -1;to camel rout each time when we trigger onOpen/onClose/onError methods. In addition to this header parameter session key will be send as well. 3) Rout on client side will filter messages by header to distinguish events and their purposes.  
CAMEL-9359 DefaultExchangeHolder.marshal() logs NULL header values to WARN As described on this post on the mailing list (http://camel.465427.n5.nabble.com/DefaultExchangeHolder-marshal-produces-a-lot-of-warnings-CAMEL-8415-td5773927.html) DefaultExchangeHolder.marshal() logs NULL header values to WARN (since Camel 2.16).Some standard components such as camel-activemq, however, write a lot of headers being mostly NULL such as JMSDestination, JMSCorrelationID, etc.Hence, I would suggest to change the log level from WARN to INFO in line https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java#L358. Improvement DefaultExchangeHolder.marshal() logs NULL header values to WARN As described on this post on the mailing list (http://camel.465427.n5.nabble.com/DefaultExchangeHolder-marshal-produces-a-lot-of-warnings-CAMEL-8415-td5773927.html) DefaultExchangeHolder.marshal() logs NULL header values to WARN (since Camel 2.16).Some standard components such as camel-activemq, however, write a lot of headers being mostly NULL such as JMSDestination, JMSCorrelationID, etc.Hence, I would suggest to change the log level from WARN to INFO in line https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java#L358.
CAMEL-9358 Support UPDATE request in elastic-search component Please add the support for UPDATE request in elasticsearch component.Here is my usecase :I send a first message with a lot of data, that i want to index by id, and then I periodically sends a limited amount of data, that I want to use to update one or two fields in the previously indexed data. Improvement Support UPDATE request in elastic-search component Please add the support for UPDATE request in elasticsearch component.Here is my usecase :I send a first message with a lot of data, that i want to index by id, and then I periodically sends a limited amount of data, that I want to use to update one or two fields in the previously indexed data.
CAMEL-9356 Allow delivery receipts with empty shortMessage field According to the SMPP 3.4 documentation, the short_message field can be empty and ESME’s can use the optional message_payload parameter. Improvement Allow delivery receipts with empty shortMessage field According to the SMPP 3.4 documentation, the short_message field can be empty and ESME's can use the optional message_payload parameter.
CAMEL-9355 Current Throttler implementation is not accurate and does not work in a multi-threaded route Current Throttler implementation is not accurate and is even more inaccurate in a multi-threaded route (think sjms....consumerCount=100).The delay to sleep cannot be calculated ahead of time in a multi-threaded environment, to this end the Throttler should not extend DelayProcessorSupport.Attached is a patch that changes throttler to use a Semaphore to do accurate and multi-thread safe throttling.The code I think is much cleaner, smaller and easier to understand. Than it used to be before.Unit tests still pass, I had to make some changes to ThrottlerTest as it made assumptions about the implementation and was doing bad things like adding a 750ms buffer to validating the minimum throttle delay.. ThrottlerTest is now very sane.I've also implemented support to allow the throttler construct to be used without any nested outputs. For example the follow code is now valid.{code}<throttle><constant>100</constant></throttle> {code}If you want to disable this feature it can be done in ThrottlerDefinition::createProcessor() line 82 changing false to true.I think this allows more flexible usage of the throttler, in my use case I want to delay the further execution of the route, and I don't want to have to split my routes up into separate sub-routes to be able to do that.  Improvement Current Throttler implementation is not accurate and does not work in a multi-threaded route Current Throttler implementation is not accurate and is even more inaccurate in a multi-threaded route (think sjms....consumerCount=100).The delay to sleep cannot be calculated ahead of time in a multi-threaded environment, to this end the Throttler should not extend DelayProcessorSupport.Attached is a patch that changes throttler to use a Semaphore to do accurate and multi-thread safe throttling.The code I think is much cleaner, smaller and easier to understand. Than it used to be before.Unit tests still pass, I had to make some changes to ThrottlerTest as it made assumptions about the implementation and was doing bad things like adding a 750ms buffer to validating the minimum throttle delay.. ThrottlerTest is now very sane.I've also implemented support to allow the throttler construct to be used without any nested outputs. For example the follow code is now valid.{code}<throttle><constant>100</constant></throttle> {code}If you want to disable this feature it can be done in ThrottlerDefinition::createProcessor() line 82 changing false to true.I think this allows more flexible usage of the throttler, in my use case I want to delay the further execution of the route, and I don't want to have to split my routes up into separate sub-routes to be able to do that. 
CAMEL-9353 Getting the run time exception while Marshalling using JAXB Marshaller [javax.xml.bind.PropertyException: property "com.sun.xml.bind.characterEscapeHandler" must be an instance of type com.sun.xml.bind.marshaller.CharacterEscapeHandler, not com.test.jaxb.util.ExampleTransform$1	at com.sun.xml.bind.v2.runtime.MarshallerImpl.setProperty(MarshallerImpl.java:492)	at com.test.jaxb.util.ExampleTransform.toXML(ExampleTransform.java:301)	at com.test.jaxb.util.ExampleTransform.toXML(ExampleTransform.java:275)	at com.test.jaxb.util.ExampleTransform.transform(ExampleTransform.java:147)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:279)	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:171)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:68)	at org.apache.camel.component.bean.BeanProducer.process(BeanProducer.java:38)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.LoopProcessor.process(LoopProcessor.java:109)	at org.apache.camel.processor.LoopProcessor.process(LoopProcessor.java:79)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:43)	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:136)	at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:83)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745)] Test Getting the run time exception while Marshalling using JAXB Marshaller [javax.xml.bind.PropertyException: property "com.sun.xml.bind.characterEscapeHandler" must be an instance of type com.sun.xml.bind.marshaller.CharacterEscapeHandler, not com.test.jaxb.util.ExampleTransform$1	at com.sun.xml.bind.v2.runtime.MarshallerImpl.setProperty(MarshallerImpl.java:492)	at com.test.jaxb.util.ExampleTransform.toXML(ExampleTransform.java:301)	at com.test.jaxb.util.ExampleTransform.toXML(ExampleTransform.java:275)	at com.test.jaxb.util.ExampleTransform.transform(ExampleTransform.java:147)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:279)	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:171)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:68)	at org.apache.camel.component.bean.BeanProducer.process(BeanProducer.java:38)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.LoopProcessor.process(LoopProcessor.java:109)	at org.apache.camel.processor.LoopProcessor.process(LoopProcessor.java:79)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:448)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:43)	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:136)	at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:83)	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)	at java.util.concurrent.FutureTask.run(FutureTask.java:266)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)	at java.lang.Thread.run(Thread.java:745)]
CAMEL-9352 camel-jms - Add transferFault option So you can transfer the fault flag over JMS if for example you call a CXF / Spring-WS endpoint that returns a SOAP fault. Then you may want to have that fault returned over JMS so Camel can react on the other side.We have transferException already for similar functionality. Improvement camel-jms - Add transferFault option So you can transfer the fault flag over JMS if for example you call a CXF / Spring-WS endpoint that returns a SOAP fault. Then you may want to have that fault returned over JMS so Camel can react on the other side.We have transferException already for similar functionality.
CAMEL-9350 Improvement of the JUnit-Tests, especially the property handling within a spring-boot project Currently it is a bit complicated to test webservices, created with camel and spring boot. The main problem is to run up the whole spring/camel context with its configuration. I would like to use some annotations in the test-class and be sure that camel recognized all its routes and properties, also the possibility to use the CamelContextLifecycle would be great.The annotation @PropertySource should also work in JUnit-Tests to inject every property sucessfully into the "two curly braces"someProperty"two curly braces" syntax. Last but not least, I rather would be able to use the method whenAnyExchangeReceived of the class MockEndpoint with an exchange object as a parameter, instead of a processor. Improvement Improvement of the JUnit-Tests, especially the property handling within a spring-boot project Currently it is a bit complicated to test webservices, created with camel and spring boot. The main problem is to run up the whole spring/camel context with its configuration. I would like to use some annotations in the test-class and be sure that camel recognized all its routes and properties, also the possibility to use the CamelContextLifecycle would be great.The annotation @PropertySource should also work in JUnit-Tests to inject every property sucessfully into the "two curly braces"someProperty"two curly braces" syntax. Last but not least, I rather would be able to use the method whenAnyExchangeReceived of the class MockEndpoint with an exchange object as a parameter, instead of a processor.
CAMEL-9349 ResourceHelper - Allow to load resource from registry Some components uses this to load resources from file / classpath / http etc. But we should also allow to use ref: to lookup in the registry and read that content as a input streamorg.apache.camel.util.ResourceHelper#resolveResourceAsInputStream Improvement ResourceHelper - Allow to load resource from registry Some components uses this to load resources from file / classpath / http etc. But we should also allow to use ref: to lookup in the registry and read that content as a input streamorg.apache.camel.util.ResourceHelper#resolveResourceAsInputStream
CAMEL-9346 camel-sql - Add transacted option If starting from sql in a transaction then we should eager rollback on first failure. Improvement camel-sql - Add transacted option If starting from sql in a transaction then we should eager rollback on first failure.
CAMEL-9338 Upgrade camel-spring-integration Should be updated to latest release as we are far behind on this one.It may no longer work in OSGi and that is fine, just remove the feature Task Upgrade camel-spring-integration Should be updated to latest release as we are far behind on this one.It may no longer work in OSGi and that is fine, just remove the feature
CAMEL-9335 camel-netty-http - Suppress Connection reset by peer WARNs Due to various reasons a remote connection may close and you can end up having WARN logs on the netty http server side. We should suppress these logs and do them on a DEBUG level instead. Improvement camel-netty-http - Suppress Connection reset by peer WARNs Due to various reasons a remote connection may close and you can end up having WARN logs on the netty http server side. We should suppress these logs and do them on a DEBUG level instead.
CAMEL-9334 Upgrade to spring 4.2x. We should upgrade to spring 4.2.x as the default for Camel 2.17 Task Upgrade to spring 4.2x. We should upgrade to spring 4.2.x as the default for Camel 2.17
CAMEL-9332 Support @MockEndpoint and @MockEndpointAndSkip in Spring Boot My route looks likefrom(“direct:start”).to(“direct:end”)My unit test looks like{noformat}@RunWith(SpringJUnit4ClassRunner.class)@SpringApplicationConfiguration(classes = Config.class)@MockEndpointspublic class MyUnitTest { @Produce(uri=“direct:start”) private ProducerTemplate producer; @EndpointInject(uri=“mock:direct:end”) private MockEndpoint end;	@Test	public void testMock() throws InterruptedException {		end.expectedBodiesReceived("blah");		producerTemplate.sendBody("blah");		end.assertIsSatisfied();	}}{noformat}It looks like the direct:end bit is never mocked so the assertion fails. It’s like @MockEndpoints is completely ignored. There are workarounds described here http://camel.465427.n5.nabble.com/spring-boot-test-mocks-td5773902.htmlThere are disadvantages to these workarounds as listed in that thread. Thanks Improvement Support @MockEndpoint and @MockEndpointAndSkip in Spring Boot My route looks likefrom("direct:start").to("direct:end")My unit test looks like{noformat}@RunWith(SpringJUnit4ClassRunner.class)@SpringApplicationConfiguration(classes = Config.class)@MockEndpointspublic class MyUnitTest { @Produce(uri="direct:start") private ProducerTemplate producer; @EndpointInject(uri="mock:direct:end") private MockEndpoint end;	@Test	public void testMock() throws InterruptedException {		end.expectedBodiesReceived("blah");		producerTemplate.sendBody("blah");		end.assertIsSatisfied();	}}{noformat}It looks like the direct:end bit is never mocked so the assertion fails. It's like @MockEndpoints is completely ignored. There are workarounds described here http://camel.465427.n5.nabble.com/spring-boot-test-mocks-td5773902.htmlThere are disadvantages to these workarounds as listed in that thread. Thanks
CAMEL-9327 TransactedErrorHandler - Should log commit/rollback only once You may ned up withtx begin 123tx commit 123tx rollback 123tx commit 123As the rollback overrule the commit the tx is really rolled back. We should defer to commit/rollback logging till the end of the tx boundary so we only get the logging once. Improvement TransactedErrorHandler - Should log commit/rollback only once You may ned up withtx begin 123tx commit 123tx rollback 123tx commit 123As the rollback overrule the commit the tx is really rolled back. We should defer to commit/rollback logging till the end of the tx boundary so we only get the logging once.
CAMEL-9326 JndiRegistry should default to use CamelInitialContextFactory if no env factory specified You will get errors like{code}	at org.apache.camel.impl.JndiRegistry.bind(JndiRegistry.java:126)	at camelinaction.JndiRegistryTest.setUp(JndiRegistryTest.java:25)	at junit.framework.TestCase.runBare(TestCase.java:139)	at junit.framework.TestResult$1.protect(TestResult.java:122)	at junit.framework.TestResult.runProtected(TestResult.java:142)	at junit.framework.TestResult.run(TestResult.java:125)	at junit.framework.TestCase.run(TestCase.java:129)	at junit.framework.TestSuite.runTest(TestSuite.java:252)	at junit.framework.TestSuite.run(TestSuite.java:247)	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)Caused by: javax.naming.NoInitialContextException: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial{code}If using JndiRegistry manually.  Improvement JndiRegistry should default to use CamelInitialContextFactory if no env factory specified You will get errors like{code}	at org.apache.camel.impl.JndiRegistry.bind(JndiRegistry.java:126)	at camelinaction.JndiRegistryTest.setUp(JndiRegistryTest.java:25)	at junit.framework.TestCase.runBare(TestCase.java:139)	at junit.framework.TestResult$1.protect(TestResult.java:122)	at junit.framework.TestResult.runProtected(TestResult.java:142)	at junit.framework.TestResult.run(TestResult.java:125)	at junit.framework.TestCase.run(TestCase.java:129)	at junit.framework.TestSuite.runTest(TestSuite.java:252)	at junit.framework.TestSuite.run(TestSuite.java:247)	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)Caused by: javax.naming.NoInitialContextException: Need to specify class name in environment or system property, or as an applet parameter, or in an application resource file:  java.naming.factory.initial{code}If using JndiRegistry manually. 
CAMEL-9325 camel-spring-boot - Allow to use spring xml easier We should make it easier to use camel-spring-boot where users use existing xml files with either <camelContext> or <routes> eg so its easier for them to migrate. Improvement camel-spring-boot - Allow to use spring xml easier We should make it easier to use camel-spring-boot where users use existing xml files with either <camelContext> or <routes> eg so its easier for them to migrate.
CAMEL-9312 Rest DSL should support defaulting values for query strings Popular restful implementations such as plain JAX-RS or Spring MVC support defaulting values for query strings. Camel rest DSL should support this same behavior in order to make easy it to use. New Feature Rest DSL should support defaulting values for query strings Popular restful implementations such as plain JAX-RS or Spring MVC support defaulting values for query strings. Camel rest DSL should support this same behavior in order to make easy it to use.
CAMEL-9310 Undocumented new exchange header The new exchange header introduced in https://github.com/apache/camel/commit/a4828fa2849dbb3424fb41c83bf6d89ed64f279f is not documented in https://camel.apache.org/http4.html (and perhaps in the documentation of other affected components as well). Task Undocumented new exchange header The new exchange header introduced in https://github.com/apache/camel/commit/a4828fa2849dbb3424fb41c83bf6d89ed64f279f is not documented in https://camel.apache.org/http4.html (and perhaps in the documentation of other affected components as well).
CAMEL-9309 camel-jetty - Make it easier to turn on|off java transport over http We should make it easier to turn this on or off, whether the end user wants to have it on or off. There should be a simple option on the component. Improvement camel-jetty - Make it easier to turn on|off java transport over http We should make it easier to turn this on or off, whether the end user wants to have it on or off. There should be a simple option on the component.
CAMEL-9308 Suggestion for download page At present the download page uses the generic ASF mirror page for downloading the release files.This works fine, but requires an extra step for the user who has to click on one of the mirror links.The closer.lua script also supports a redirect option as follows:www.apache.org/dyn/closer.lua?filename=camel/apache-camel/2.15.4/apache-camel-2.15.4.zip&action=downloadThe disadvantage is that the mirror cannot be selected by the user in case of problems with the initial choice. However the mirrors are chosen randomly each time the closer.lua script is used, so a simple retry should resolve the issue. Improvement Suggestion for download page At present the download page uses the generic ASF mirror page for downloading the release files.This works fine, but requires an extra step for the user who has to click on one of the mirror links.The closer.lua script also supports a redirect option as follows:www.apache.org/dyn/closer.lua?filename=camel/apache-camel/2.15.4/apache-camel-2.15.4.zip&action=downloadThe disadvantage is that the mirror cannot be selected by the user in case of problems with the initial choice. However the mirrors are chosen randomly each time the closer.lua script is used, so a simple retry should resolve the issue.
CAMEL-9307 Remove unnecessary call to setCamelContext when adding a component by name Quite often, the method {{Component.setCamelContext}} is called while adding a component to a Camel context while that is not necessary as it is done within the later call. Task Remove unnecessary call to setCamelContext when adding a component by name Quite often, the method {{Component.setCamelContext}} is called while adding a component to a Camel context while that is not necessary as it is done within the later call.
CAMEL-9305 PropertiesComponent.isDefaultCreated method only check the absence of defined locations In some situations, Camel falls back to creating a default {{PropertiesComponent}} and emits the following log statement when a configuration property resolution fails:{code}PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [foo] not found in properties from text: {{foo}}{code}The first sentence is logged when the {{PropertiesComponent.isDefaultCreated}} method returns {{true}} which indicates that Camel has created this component on its own. However, as the current implementation solely relies on whether a location has been set on the component, this leads to some situations where that sentence is logged while the end-user has actually registered a {{PropertiesComponent}} with the name {{properties}}.This happens in the following examples among others:{code}@Produces@ApplicationScoped@Named("properties")PropertiesComponent configuration() {    Properties properties = new Properties();    properties.put("foo", "bar");    PropertiesComponent component = new PropertiesComponent();    component.setInitialProperties(properties);    return component;}{code}{code}@BeanPropertiesComponent properties() {    PropertiesComponent properties = new PropertiesComponent();    properties.setPropertiesParser(...);    return properties;}{code} Improvement PropertiesComponent.isDefaultCreated method only check the absence of defined locations In some situations, Camel falls back to creating a default {{PropertiesComponent}} and emits the following log statement when a configuration property resolution fails:{code}PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [foo] not found in properties from text: {{foo}}{code}The first sentence is logged when the {{PropertiesComponent.isDefaultCreated}} method returns {{true}} which indicates that Camel has created this component on its own. However, as the current implementation solely relies on whether a location has been set on the component, this leads to some situations where that sentence is logged while the end-user has actually registered a {{PropertiesComponent}} with the name {{properties}}.This happens in the following examples among others:{code}@Produces@ApplicationScoped@Named("properties")PropertiesComponent configuration() {    Properties properties = new Properties();    properties.put("foo", "bar");    PropertiesComponent component = new PropertiesComponent();    component.setInitialProperties(properties);    return component;}{code}{code}@BeanPropertiesComponent properties() {    PropertiesComponent properties = new PropertiesComponent();    properties.setPropertiesParser(...);    return properties;}{code}
CAMEL-9304 Camel should detect auto generated ids and mitigate clashes If for some reason end users use generated naming patterns for ids, in their routes such as - to1, to2, log1, log2, etc and have others without ids, then there may be a naming clash when Camel auto assigns the ids.We can try to mitigate this and detect the name clash, and then just re-create the ids again which will use a new running number.We do similar for JMX naming clashes etc. Improvement Camel should detect auto generated ids and mitigate clashes If for some reason end users use generated naming patterns for ids, in their routes such as - to1, to2, log1, log2, etc and have others without ids, then there may be a naming clash when Camel auto assigns the ids.We can try to mitigate this and detect the name clash, and then just re-create the ids again which will use a new running number.We do similar for JMX naming clashes etc.
CAMEL-9303 PropertiesComponent - Allow service host and port to be specified individually Today the lookup both the host and port. But you may want to only lookup either the host or port. Improvement PropertiesComponent - Allow service host and port to be specified individually Today the lookup both the host and port. But you may want to only lookup either the host or port.
CAMEL-9301 Community chat We could have a community chat with slack or any other service Wish Community chat We could have a community chat with slack or any other service
CAMEL-9300 DeltaSpike container control dependency in Camel CDI should be optional DeltaSpike container control API is only used to bootstrap Camel CDI in Java SE either directly with the {{Main}} class or via the Camel Maven plugin. Hence that dependency should be declared {{optional}} so that dependent projects that uses Camel CDI in non SE environments do not have to deal with it. This is the case of WildFly Camel for example. Note that the DeltaSpike container control packages are already excluded form OSGi imports.As the Camel Maven plugin does not check for optionality when adding CDI extra plugin dependencies (when {{useCDI}} is set to {{true}}), it is safe to declare that dependency optional. Task DeltaSpike container control dependency in Camel CDI should be optional DeltaSpike container control API is only used to bootstrap Camel CDI in Java SE either directly with the {{Main}} class or via the Camel Maven plugin. Hence that dependency should be declared {{optional}} so that dependent projects that uses Camel CDI in non SE environments do not have to deal with it. This is the case of WildFly Camel for example. Note that the DeltaSpike container control packages are already excluded form OSGi imports.As the Camel Maven plugin does not check for optionality when adding CDI extra plugin dependencies (when {{useCDI}} is set to {{true}}), it is safe to declare that dependency optional.
CAMEL-9298 camel-netty4 - Connection timeout is already done by netty itself There is no need for the code with the latch and whatnot that makes this logic a bit more complicated. Netty handles IO connection timeout already.See ChannelFuture javadoc for more. Improvement camel-netty4 - Connection timeout is already done by netty itself There is no need for the code with the latch and whatnot that makes this logic a bit more complicated. Netty handles IO connection timeout already.See ChannelFuture javadoc for more.
CAMEL-9286 Log component - Include log formatter options in docs We dont have the log formatter options in the log schema docs. We should grab those for inclusion as well.http://camel.apache.org/logSo we know that there is options like showBody / showBodyType / and so on Improvement Log component - Include log formatter options in docs We dont have the log formatter options in the log schema docs. We should grab those for inclusion as well.http://camel.apache.org/logSo we know that there is options like showBody / showBodyType / and so on
CAMEL-9283 Data Format for MIME-Multipart This data format that can convert a Camel message with attachments into a Camel message having a MIME-Multipart message as message body (and no attachments).The use case for this is to enable the user to send attachments over endpoints that do not directly support attachments, either as special protocol implementation (e.g. send a MIME-multipart over an HTTP endpoint) or as a kind of tunneling solution (e.g. because camel-jms does not support attachments but by marshalling the message with attachments into a MIME-Multipart, sending that to a JMS queue,Receiving the message from the JMS queue and unmarshalling it again (into a message body with attachments). New Feature Data Format for MIME-Multipart This data format that can convert a Camel message with attachments into a Camel message having a MIME-Multipart message as message body (and no attachments).The use case for this is to enable the user to send attachments over endpoints that do not directly support attachments, either as special protocol implementation (e.g. send a MIME-multipart over an HTTP endpoint) or as a kind of tunneling solution (e.g. because camel-jms does not support attachments but by marshalling the message with attachments into a MIME-Multipart, sending that to a JMS queue,Receiving the message from the JMS queue and unmarshalling it again (into a message body with attachments).
CAMEL-9280 Allow passing custom headers to the proxy server in camel-smpp component We have a requirement were we need to pass a custom header to our proxy-server. New Feature Allow passing custom headers to the proxy server in camel-smpp component We have a requirement were we need to pass a custom header to our proxy-server.
CAMEL-9278 camel-undertow - Should support multiple rest services For example change the component to undertow in camel-swagger-cdi example and all three rest services should be accessible from undertow. Improvement camel-undertow - Should support multiple rest services For example change the component to undertow in camel-swagger-cdi example and all three rest services should be accessible from undertow.
CAMEL-9275 camel-jackson - Allow to use a custom ObjectMapper instance People may configure a ObjectMapper instance themselves and want to use that with the data format.See SOhttp://stackoverflow.com/questions/33397359/how-to-configure-jackson-objectmapper-for-camel-in-spring-boot Improvement camel-jackson - Allow to use a custom ObjectMapper instance People may configure a ObjectMapper instance themselves and want to use that with the data format.See SOhttp://stackoverflow.com/questions/33397359/how-to-configure-jackson-objectmapper-for-camel-in-spring-boot
CAMEL-9274 StreamCache does not work correctly with MarshalProcessor and pretty much all DataFormats StreamCache does not work correctly with MarshalProcessor and pretty much all DataFormats# Documentation states that stream caching can be turned on, on a per route basis. The places were we actually try and utilize stream caching only checks if the global option is turned on (MarshalProcessor + PGPKeyAccessDataFormat, I can't find any other meaningful attempts to use stream caching anywhere else) not the per route setting.# Secondly, if we ignore the first problem, only one data formatter tries to use stream caching for unmarshaling: PGPKeyAccessDataFormat. If you try and unzip a large zip file it's contents will be decompressed into memory. The same goes for any other large data formatter conversion (unmarshaling, only).Attached is a patch that corrects the first problem and part of the second problem (ZipFileDataFormat, ZipDataFormat and PGPKeyAccessDataFormat).A separate issue should probably be opened to fix all the remaining DataFormat implementation to support Stream Caching.  Improvement StreamCache does not work correctly with MarshalProcessor and pretty much all DataFormats StreamCache does not work correctly with MarshalProcessor and pretty much all DataFormats# Documentation states that stream caching can be turned on, on a per route basis. The places were we actually try and utilize stream caching only checks if the global option is turned on (MarshalProcessor + PGPKeyAccessDataFormat, I can't find any other meaningful attempts to use stream caching anywhere else) not the per route setting.# Secondly, if we ignore the first problem, only one data formatter tries to use stream caching for unmarshaling: PGPKeyAccessDataFormat. If you try and unzip a large zip file it's contents will be decompressed into memory. The same goes for any other large data formatter conversion (unmarshaling, only).Attached is a patch that corrects the first problem and part of the second problem (ZipFileDataFormat, ZipDataFormat and PGPKeyAccessDataFormat).A separate issue should probably be opened to fix all the remaining DataFormat implementation to support Stream Caching. 
CAMEL-9271 Extending RouteDefinition Extending RouteDefinition gives issues because of 1 line in the ProcessorDefinition. RouteDefinition should be made final or the attached patch is needed. changing:boolean parentIsRoute = this.getClass().isAssignableFrom(RouteDefinition.class.);toboolean parentIsRoute = RouteDefinition.class.isAssignableFrom(this.getClass()); Improvement Extending RouteDefinition Extending RouteDefinition gives issues because of 1 line in the ProcessorDefinition. RouteDefinition should be made final or the attached patch is needed. changing:boolean parentIsRoute = this.getClass().isAssignableFrom(RouteDefinition.class.);toboolean parentIsRoute = RouteDefinition.class.isAssignableFrom(this.getClass());
CAMEL-9265 Use servicemix-specs version of jsr311-api jsr311-api's FindFactory class causes classloading problems in OSGI.     Should substitute the servicemix-specs version of the jsr311-api for jsr311-api in the three places it is used :camel-jcloudscamel-olingo2camel-swagger Task Use servicemix-specs version of jsr311-api jsr311-api's FindFactory class causes classloading problems in OSGI.     Should substitute the servicemix-specs version of the jsr311-api for jsr311-api in the three places it is used :camel-jcloudscamel-olingo2camel-swagger
CAMEL-9263 camel-servlet - Allow to configure the context path without leading slash You can easily mis configure servlet endpoint because it must start with a leading slash to match the incoming requests.We should make that optional how its configured as{code}servlet:helloservlet:/helloservlet:///hello{code} Improvement camel-servlet - Allow to configure the context path without leading slash You can easily mis configure servlet endpoint because it must start with a leading slash to match the incoming requests.We should make that optional how its configured as{code}servlet:helloservlet:/helloservlet:///hello{code}
CAMEL-9262 stopOnSuccess in Multicast, RecipientList Let's say we have an endpoint where we should send a message and if sending fails there are a number of fallback endpoints we should try stopping after the first successful sending (=no exception thrown during sending).This sounds like a case for doTry..doCatch, but then we can't use defaultErrorHander and friends.I think it would look quite right if we could say .stopOnSuccess() or .shortCircuit() on multicast and have it stop after the first successful send. Improvement stopOnSuccess in Multicast, RecipientList Let's say we have an endpoint where we should send a message and if sending fails there are a number of fallback endpoints we should try stopping after the first successful sending (=no exception thrown during sending).This sounds like a case for doTry..doCatch, but then we can't use defaultErrorHander and friends.I think it would look quite right if we could say .stopOnSuccess() or .shortCircuit() on multicast and have it stop after the first successful send.
CAMEL-9252 Batch camel messages This is a new feature to batch camel messages.{code}	<bean id="groupMessageAggregationStrategy" class="org.apache.camel.processor.aggregate.GroupedMessageAggregationStrategy" />	    <route>        <from uri="direct:order"/>        <aggregate strategyRef="groupMessageAggregationStrategy" completionSize="500" completionTimeout="3000">            <correlationExpression>                <simple>${header[some.thing]}</simple>            </correlationExpression>			            <to uri="direct:aggregatedOrders"/>        </aggregate>    </route>    <route>        <from uri="direct:aggregated"/>  		<bean ref="externalResource" method="batchOrders"/>		<split>            <xpath>/invoice/lineItems</xpath>			<to uri="mock:result" />        </split>    </route>{code}This is different from GroupedExchangeAggregationStrategy, because Splitter supports org.camel.Message. New Feature Batch camel messages This is a new feature to batch camel messages.{code}	<bean id="groupMessageAggregationStrategy" class="org.apache.camel.processor.aggregate.GroupedMessageAggregationStrategy" />	    <route>        <from uri="direct:order"/>        <aggregate strategyRef="groupMessageAggregationStrategy" completionSize="500" completionTimeout="3000">            <correlationExpression>                <simple>${header[some.thing]}</simple>            </correlationExpression>			            <to uri="direct:aggregatedOrders"/>        </aggregate>    </route>    <route>        <from uri="direct:aggregated"/>  		<bean ref="externalResource" method="batchOrders"/>		<split>            <xpath>/invoice/lineItems</xpath>			<to uri="mock:result" />        </split>    </route>{code}This is different from GroupedExchangeAggregationStrategy, because Splitter supports org.camel.Message.
CAMEL-9251 rest-dsl - Allow to configure api-doc route id You may want to be able to specify a route id as by default its an auto assigned route id.There is a new apiContextRouteId option you can use to configure this. Improvement rest-dsl - Allow to configure api-doc route id You may want to be able to specify a route id as by default its an auto assigned route id.There is a new apiContextRouteId option you can use to configure this.
CAMEL-9250 Configure AllowUseOriginalMessage to be disabled by default if not in use on error handler When people start Camel they set this INFO log:AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.As the most normal use case is to not use this, then we should flip the default to let it be disabled out of the box, unless the error handler has been configured to access it.And then on the Java api on UoW where you can access it we will throw an exception if the option is disabled. Improvement Configure AllowUseOriginalMessage to be disabled by default if not in use on error handler When people start Camel they set this INFO log:AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.As the most normal use case is to not use this, then we should flip the default to let it be disabled out of the box, unless the error handler has been configured to access it.And then on the Java api on UoW where you can access it we will throw an exception if the option is disabled.
CAMEL-9242 Upgrade slf4j-api to 1.7 We have been on 1.6 for a long time, and many others are on 1.7 which can cause problems such as from karaf / pax-logging{code}Caused by: java.lang.NoSuchMethodError: org.apache.log4j.Logger.<init>(Ljava/lang/String;)V	at org.apache.log4j.spi.RootLogger.<init>(RootLogger.java:45)	at org.apache.log4j.LogManager.<clinit>(LogManager.java:82)	at org.ops4j.pax.logging.service.internal.PaxLoggingServiceImpl.configureDefaults(PaxLoggingServiceImpl.java:299)	at org.ops4j.pax.logging.service.internal.PaxLoggingServiceImpl.<init>(PaxLoggingServiceImpl.java:70)	at org.ops4j.pax.logging.service.internal.Activator.start(Activator.java:117)	at org.apache.felix.connect.PojoSRBundle.start(PojoSRBundle.java:153)	... 20 more{code} Task Upgrade slf4j-api to 1.7 We have been on 1.6 for a long time, and many others are on 1.7 which can cause problems such as from karaf / pax-logging{code}Caused by: java.lang.NoSuchMethodError: org.apache.log4j.Logger.<init>(Ljava/lang/String;)V	at org.apache.log4j.spi.RootLogger.<init>(RootLogger.java:45)	at org.apache.log4j.LogManager.<clinit>(LogManager.java:82)	at org.ops4j.pax.logging.service.internal.PaxLoggingServiceImpl.configureDefaults(PaxLoggingServiceImpl.java:299)	at org.ops4j.pax.logging.service.internal.PaxLoggingServiceImpl.<init>(PaxLoggingServiceImpl.java:70)	at org.ops4j.pax.logging.service.internal.Activator.start(Activator.java:117)	at org.apache.felix.connect.PojoSRBundle.start(PojoSRBundle.java:153)	... 20 more{code}
CAMEL-9239 camel-sjms - Add completionInterval to batch jms Add new completionInterval option to http://camel.apache.org/sjms-batch.htmlThat works like the aggreagator eiphttp://camel.apache.org/aggregator2Note you can only set either completionTimeout or completionInterval Improvement camel-sjms - Add completionInterval to batch jms Add new completionInterval option to http://camel.apache.org/sjms-batch.htmlThat works like the aggreagator eiphttp://camel.apache.org/aggregator2Note you can only set either completionTimeout or completionInterval
CAMEL-9232 camel-paho - Create exchange correct This PRhttps://github.com/apache/camel/pull/635And the component creates the exchange wrong and a few other things to improve. Improvement camel-paho - Create exchange correct This PRhttps://github.com/apache/camel/pull/635And the component creates the exchange wrong and a few other things to improve.
CAMEL-9229 Wrong folder name for jacksonxml test resources Wrong folder name used for test resources, PR coming. Test Wrong folder name for jacksonxml test resources Wrong folder name used for test resources, PR coming.
CAMEL-9228 Update to undertow-1.3.0 Needed for WildFly-Camel integration with WildFly-10CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/903 Task Update to undertow-1.3.0 Needed for WildFly-Camel integration with WildFly-10CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/903
CAMEL-9225 camel-exec - Enrich exception with stdout/stderr So users can get access to the output that may have been written to stdout/stderr during the processing.See nabblehttp://camel.465427.n5.nabble.com/Output-of-exec-used-for-exception-handling-to-enable-message-redelivery-tp5772641.html Improvement camel-exec - Enrich exception with stdout/stderr So users can get access to the output that may have been written to stdout/stderr during the processing.See nabblehttp://camel.465427.n5.nabble.com/Output-of-exec-used-for-exception-handling-to-enable-message-redelivery-tp5772641.html
CAMEL-9224 Camel specific commands for spring boot shell As an integration administrator who has to monitor/troubleshoot running PROD environments I would like to have camel specific commands in spring boot shell:camel:context-infocamel:context-listcamel:context-startcamel:context-stopcamel:endpoint-listcamel:route-infocamel:route-listcamel:route-profilecamel:route-reset-statscamel:route-resumecamel:route-showcamel:route-startcamel:route-stopcamel:route-suspend New Feature Camel specific commands for spring boot shell As an integration administrator who has to monitor/troubleshoot running PROD environments I would like to have camel specific commands in spring boot shell:camel:context-infocamel:context-listcamel:context-startcamel:context-stopcamel:endpoint-listcamel:route-infocamel:route-listcamel:route-profilecamel:route-reset-statscamel:route-resumecamel:route-showcamel:route-startcamel:route-stopcamel:route-suspend
CAMEL-9219 Base64 Spring XML tests and documentation The base64 component only tests for the Java DSL and the basic data format options.This contribution adds additional tests against the Spring XML DSL, testing the same options as in Java.More important: those tests can be used to document usage in Spring XML ; so once they're in I'd like to reference them in the documentation. Improvement Base64 Spring XML tests and documentation The base64 component only tests for the Java DSL and the basic data format options.This contribution adds additional tests against the Spring XML DSL, testing the same options as in Java.More important: those tests can be used to document usage in Spring XML ; so once they're in I'd like to reference them in the documentation.
CAMEL-9213 CamelContext - explainEndpointJson should not include component properties Only endpoint properties should be in the json output Improvement CamelContext - explainEndpointJson should not include component properties Only endpoint properties should be in the json output
CAMEL-9212 Enable dynamic values in the headerName / propertyName It would be really helpful for me if exchange properties and headers would allow dynamic values to be set from the XML DSL, for example:{code:xml}<setProperty propertyName="$simple{type:my.domain.StringConstants.EXCHANGE_PROP_TX_FAILED}">        <simple>${type:java.lang.Boolean.TRUE}</simple></setProperty>{code}{code:java}StringConstants.EXCHANGE_PROP_TX_FAILED = "exchange_prop_tx_failed";{code}See also [this thread|http://camel.465427.n5.nabble.com/Simple-expression-not-evaluated-in-Spring-DSL-setProperty-td5765820.html] from camel-users. New Feature Enable dynamic values in the headerName / propertyName It would be really helpful for me if exchange properties and headers would allow dynamic values to be set from the XML DSL, for example:{code:xml}<setProperty propertyName="$simple{type:my.domain.StringConstants.EXCHANGE_PROP_TX_FAILED}">        <simple>${type:java.lang.Boolean.TRUE}</simple></setProperty>{code}{code:java}StringConstants.EXCHANGE_PROP_TX_FAILED = "exchange_prop_tx_failed";{code}See also [this thread|http://camel.465427.n5.nabble.com/Simple-expression-not-evaluated-in-Spring-DSL-setProperty-td5765820.html] from camel-users.
CAMEL-9207 Make it easy to collate/group N items from a message body with the splitter For example if you have a list / resultset or something, and you want to split that by 1000, then its not super easy to do.The tokenizer language has that but it assume a token is in place. But if the body is list / collection, we should be able to group them.Maybe a function on simple language?{code}<split>  <simple>${collate(${body}, 1000)}</simple>  ...</split>{code}Now its to come up with a good function name.Also the body could be implied, so its just{code}<split>  <simple>${collate(1000)}</simple>  ...</split>{code} Improvement Make it easy to collate/group N items from a message body with the splitter For example if you have a list / resultset or something, and you want to split that by 1000, then its not super easy to do.The tokenizer language has that but it assume a token is in place. But if the body is list / collection, we should be able to group them.Maybe a function on simple language?{code}<split>  <simple>${collate(${body}, 1000)}</simple>  ...</split>{code}Now its to come up with a good function name.Also the body could be implied, so its just{code}<split>  <simple>${collate(1000)}</simple>  ...</split>{code}
CAMEL-9206 add Kerberos Security into camel-HBase camel-hbase cannot work with kerberos security defined by application. There is no property to set to be able to use particular user or keytab (jaas.conf?) or UserGroupInformation as a context of hbase operationsThere should be a parameter to enable Kerberos for the component (and parameters defining which credentials <system/ from file/from login&password/ camel-context(? if there are there)> should be used) New Feature add Kerberos Security into camel-HBase camel-hbase cannot work with kerberos security defined by application. There is no property to set to be able to use particular user or keytab (jaas.conf?) or UserGroupInformation as a context of hbase operationsThere should be a parameter to enable Kerberos for the component (and parameters defining which credentials <system/ from file/from login&password/ camel-context(? if there are there)> should be used)
CAMEL-9194 camel-elasticsearch search request only supports map object camel-elasticsearch search request converter should support more then just map object. Improvement camel-elasticsearch search request only supports map object camel-elasticsearch search request converter should support more then just map object.
CAMEL-9193 Aggregator in preCompletion mode should also timeout if the new group does not receive further messages Camel Aggregator's Pre-completion mode might not work correctly with option completionTimeout. Comment this line AggregatePreCompleteAwareStrategyTimeoutTest and test will fail. When the old exchange is marked as pre-complete, there is no timeout started for new group of aggregated messages.https://github.com/apache/camel/blob/master/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatePreCompleteAwareStrategyTimeoutTest.java#L38 Improvement Aggregator in preCompletion mode should also timeout if the new group does not receive further messages Camel Aggregator's Pre-completion mode might not work correctly with option completionTimeout. Comment this line AggregatePreCompleteAwareStrategyTimeoutTest and test will fail. When the old exchange is marked as pre-complete, there is no timeout started for new group of aggregated messages.https://github.com/apache/camel/blob/master/camel-core/src/test/java/org/apache/camel/processor/aggregator/AggregatePreCompleteAwareStrategyTimeoutTest.java#L38
CAMEL-9192 camel-elsql - Allow using simple language as named parameters See tickethttps://github.com/OpenGamma/ElSql/issues/24The reason is to allow to bind parameter values from POJOs etc where you can use simple language in an OGNL style to access getters and nested objects in the graph.Also it would be nice to allow to bind to xml/json structures too.  Improvement camel-elsql - Allow using simple language as named parameters See tickethttps://github.com/OpenGamma/ElSql/issues/24The reason is to allow to bind parameter values from POJOs etc where you can use simple language in an OGNL style to access getters and nested objects in the graph.Also it would be nice to allow to bind to xml/json structures too. 
CAMEL-9189 Jackson XML Mapper Data format This is a contribution of a new component that represents a XML data format backed by Jackson. Jackson offers XML databind capabilities.See here the project for background: https://github.com/FasterXML/jackson-dataformat-xmlThe motivation to bring in yet another XML data format is that this format is very easy to work with in ad hoc scenarios, with no schema or POJO in place. I also can profess that Woodstox and Jackson are of very high quality and very well maintained, and thus my tools of choice. Bringing them to Camel is a joy.Dependencies:jackson-dataformat-xml: ASL 2.0 licensed (see here: https://github.com/FasterXML/jackson-dataformat-xml/wiki)woodstox: ASL 2.0 licensedPatch:https://github.com/apache/camel/pull/631All dependencies are available as OSGi bundles.Wiki page is still TODO. New Feature Jackson XML Mapper Data format This is a contribution of a new component that represents a XML data format backed by Jackson. Jackson offers XML databind capabilities.See here the project for background: https://github.com/FasterXML/jackson-dataformat-xmlThe motivation to bring in yet another XML data format is that this format is very easy to work with in ad hoc scenarios, with no schema or POJO in place. I also can profess that Woodstox and Jackson are of very high quality and very well maintained, and thus my tools of choice. Bringing them to Camel is a joy.Dependencies:jackson-dataformat-xml: ASL 2.0 licensed (see here: https://github.com/FasterXML/jackson-dataformat-xml/wiki)woodstox: ASL 2.0 licensedPatch:https://github.com/apache/camel/pull/631All dependencies are available as OSGi bundles.Wiki page is still TODO.
CAMEL-9187 Add support in endpoint for setting splunk event host field component/camel-splunk:add eventHost parameter to endpoint to support splunk host override per: http://docs.splunk.com/Documentation/Splunk/6.2.6/Data/Aboutdefaultfields#Override_host_assignmenthttps://github.com/apache/camel/pull/630 New Feature Add support in endpoint for setting splunk event host field component/camel-splunk:add eventHost parameter to endpoint to support splunk host override per: http://docs.splunk.com/Documentation/Splunk/6.2.6/Data/Aboutdefaultfields#Override_host_assignmenthttps://github.com/apache/camel/pull/630
CAMEL-9186 Camel-Scala: Ability to add route policy in the Scala DSL based route definition  As a developer wanting to use *quartz2* scheduler and wanting to use {{CronScheduledRoutePolicy}} to be able to configure the route start time, suspend time and resume time, I would like to do the following{code:title=routepolicysample.scala}val rpolicy = new CronScheduledRoutePolicyrpolicy.setRouteStartTime("0 30 * * *")from("quartz2://mytest/test?cron=0+0/2+*+*+*+?").routePolicy(rpolicy).noAutoStart().to("log:foo"){code} New Feature Camel-Scala: Ability to add route policy in the Scala DSL based route definition  As a developer wanting to use *quartz2* scheduler and wanting to use {{CronScheduledRoutePolicy}} to be able to configure the route start time, suspend time and resume time, I would like to do the following{code:title=routepolicysample.scala}val rpolicy = new CronScheduledRoutePolicyrpolicy.setRouteStartTime("0 30 * * *")from("quartz2://mytest/test?cron=0+0/2+*+*+*+?").routePolicy(rpolicy).noAutoStart().to("log:foo"){code}
CAMEL-9184 Throttler: Rejected message whe rejectExecution=true When a message gets rejected and rejectExecution is true, the rejected message is still assigned to the new time-slot.When you use the throttler to secure against DOS going to the backend a DOS can fill up many time-slots.I'm not sure whether this behaviour is the expected behaviour. My feeling says that the rejected message should not be assigned to a new time-slot.Maybe the exception should be raised in the synchronized method that determines the starting of a new time-slot. Improvement Throttler: Rejected message whe rejectExecution=true When a message gets rejected and rejectExecution is true, the rejected message is still assigned to the new time-slot.When you use the throttler to secure against DOS going to the backend a DOS can fill up many time-slots.I'm not sure whether this behaviour is the expected behaviour. My feeling says that the rejected message should not be assigned to a new time-slot.Maybe the exception should be raised in the synchronized method that determines the starting of a new time-slot.
CAMEL-9181 Simpler, less picky ScrHelper Previous ScrHelper could break when there are certain XML libraries in the classpath (e.g. XOM or Saxon). Also, it doesn't work with component description files generated by the latest org.apache.felix/maven-scr-plugin version 1.21.0 (format has changed).This is a simpler, less picky implementation using StAX. Improvement Simpler, less picky ScrHelper Previous ScrHelper could break when there are certain XML libraries in the classpath (e.g. XOM or Saxon). Also, it doesn't work with component description files generated by the latest org.apache.felix/maven-scr-plugin version 1.21.0 (format has changed).This is a simpler, less picky implementation using StAX.
CAMEL-9178 Apache Camel is not able to read map-id in Dozer mapping xml but does not throw any error I used camel dozer and configured with a mapping.xml for dozer mapping.Camel fails to do Dozer mapping for the elements mapped with map-id but does not throw any error.In camel context file define DozerTypeConverterLoader and DozerBeanMapper as follows:    <bean id="dozerConverterLoader"		class="org.apache.camel.converter.dozer.DozerTypeConverterLoader" />	<!-- use bean mapping configuration -->	<bean id="mapper" class="org.dozer.DozerBeanMapper">		<property name="mappingFiles">			<list>				<value>dozer/mapping.xml</value>			</list>		</property>	</bean>		where mapping.xml is the file where the dozer mappings should be defined.				Example:	In camel-context camel will look for the mapping for conversion to PortInNotification as defined in the dozer/mapping.xml	<setBody id="setBodyNPOCIn">	<simple resultType="x.y.NPOCType">${body.getNPOOrNPOCOrNPOR.get(0)}</simple>	</setBody>		<convertBodyTo 	type="a.b.v1.PortInNotification" id="convertToNPOCPortIn" />		In mapping.xml:		<mapping map-id="mapNPOCtoPortIn">		<class-a>a.b.v1.PortInNotification</class-a>		<class-b>x.y.NPOCType</class-b>				<field>			<a>requestID.id</a>			<b>requestId</b>		</field>		<field>		    <a>referenceID.id</a>			<b>referenceId</b>				</field> 					</mapping>Camel-dozer is not able to trace this mapping,however it does not throw any error and simply returns an object of type PortInNotification with null attributes.On removal of map-id attribute it is able to correctly lookup the mapping of PortInNotification from the mapping.xml Improvement Apache Camel is not able to read map-id in Dozer mapping xml but does not throw any error I used camel dozer and configured with a mapping.xml for dozer mapping.Camel fails to do Dozer mapping for the elements mapped with map-id but does not throw any error.In camel context file define DozerTypeConverterLoader and DozerBeanMapper as follows:    <bean id="dozerConverterLoader"		class="org.apache.camel.converter.dozer.DozerTypeConverterLoader" />	<!-- use bean mapping configuration -->	<bean id="mapper" class="org.dozer.DozerBeanMapper">		<property name="mappingFiles">			<list>				<value>dozer/mapping.xml</value>			</list>		</property>	</bean>		where mapping.xml is the file where the dozer mappings should be defined.				Example:	In camel-context camel will look for the mapping for conversion to PortInNotification as defined in the dozer/mapping.xml	<setBody id="setBodyNPOCIn">	<simple resultType="x.y.NPOCType">${body.getNPOOrNPOCOrNPOR.get(0)}</simple>	</setBody>		<convertBodyTo 	type="a.b.v1.PortInNotification" id="convertToNPOCPortIn" />		In mapping.xml:		<mapping map-id="mapNPOCtoPortIn">		<class-a>a.b.v1.PortInNotification</class-a>		<class-b>x.y.NPOCType</class-b>				<field>			<a>requestID.id</a>			<b>requestId</b>		</field>		<field>		    <a>referenceID.id</a>			<b>referenceId</b>				</field> 					</mapping>Camel-dozer is not able to trace this mapping,however it does not throw any error and simply returns an object of type PortInNotification with null attributes.On removal of map-id attribute it is able to correctly lookup the mapping of PortInNotification from the mapping.xml
CAMEL-9176 CXFRS endpoint should ideally be singleton Look into why its currently not singletonhttps://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java#L205Endpoints should ideally be singletons to allow reuse, and enlisting in JMX. The overhead of re-creating the endpoints can be high, and only in more rare cases should endpoints be non singleton. Improvement CXFRS endpoint should ideally be singleton Look into why its currently not singletonhttps://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsEndpoint.java#L205Endpoints should ideally be singletons to allow reuse, and enlisting in JMX. The overhead of re-creating the endpoints can be high, and only in more rare cases should endpoints be non singleton.
CAMEL-9174 Main - Make it easier to configure CamelContext before its started So you can easier setup JMX and what else you may want. Today its a bit to cumbersome with the main. Improvement Main - Make it easier to configure CamelContext before its started So you can easier setup JMX and what else you may want. Today its a bit to cumbersome with the main.
CAMEL-9173 camel-artchetype-scr - Should be a simple route example This archetype creates a few complicated routes. It should be simple example like we have for the other archetypes. For example as blueprint does. Improvement camel-artchetype-scr - Should be a simple route example This archetype creates a few complicated routes. It should be simple example like we have for the other archetypes. For example as blueprint does.
CAMEL-9172 JOLT Component Create new transformation component for JOLT  (https://github.com/bazaarvoice/jolt)http://camel.465427.n5.nabble.com/Camel-Template-solution-for-JSON2JSON-tc5758858.html New Feature JOLT Component Create new transformation component for JOLT  (https://github.com/bazaarvoice/jolt)http://camel.465427.n5.nabble.com/Camel-Template-solution-for-JSON2JSON-tc5758858.html
CAMEL-9162 camel-elsql component Wonder if this SQL library would be handy for a Camel componenthttps://github.com/OpenGamma/ElSql New Feature camel-elsql component Wonder if this SQL library would be handy for a Camel componenthttps://github.com/OpenGamma/ElSql
CAMEL-9160 Dynamic to - Should use language: as prefix when using other languages So we know its a language and not a component. In rare cases there is both with same name. Improvement Dynamic to - Should use language: as prefix when using other languages So we know its a language and not a component. In rare cases there is both with same name.
CAMEL-9157 JMX - Add dataformat as mbean category Some data formats are listed in JMX such as jackson etc. Although they currently do not have any specialized information, but we can add that with the management annotations.Today they clutter the services category. Instead we can group them under .dataformats, like we have for endpoints and so on. New Feature JMX - Add dataformat as mbean category Some data formats are listed in JMX such as jackson etc. Although they currently do not have any specialized information, but we can add that with the management annotations.Today they clutter the services category. Instead we can group them under .dataformats, like we have for endpoints and so on.
CAMEL-9156 camel-swagger-java - Add JMX and Camel commands So the api can be reachable from JMX and also from the Camel commands in Karaf etc. New Feature camel-swagger-java - Add JMX and Camel commands So the api can be reachable from JMX and also from the Camel commands in Karaf etc.
CAMEL-9153 ThreadPoolRejectedPolicy does not implement Abort as expected Not sure if this is a bug or just a documentation flaw (in fact I could not find documentation for it). Nevertheless, as a naive user, I kind of expected that the {{RejectedExecutionHandler}} of {{ThreadPoolRejectedPolicy.Abort}} would have similar semantics as Java's {{ThreadPoolExecutor.AbortPolicy}}. That is, I expected it to throw an {{Exception}}.Currently (that is in the 2.15.2 release, and on the master branch in git) that is not the case. In fact, {{Abort}} seems to work exactly the same way as {{Discard}}. Improvement ThreadPoolRejectedPolicy does not implement Abort as expected Not sure if this is a bug or just a documentation flaw (in fact I could not find documentation for it). Nevertheless, as a naive user, I kind of expected that the {{RejectedExecutionHandler}} of {{ThreadPoolRejectedPolicy.Abort}} would have similar semantics as Java's {{ThreadPoolExecutor.AbortPolicy}}. That is, I expected it to throw an {{Exception}}.Currently (that is in the 2.15.2 release, and on the master branch in git) that is not the case. In fact, {{Abort}} seems to work exactly the same way as {{Discard}}.
CAMEL-9148 camel-hbase tests pass despite setup error there is clause in tests: when system is not ready (a local test cluster failed) then test is passed. It concerns all test cases. It is because a setUp method is: {code:java}try {            hbaseUtil.startMiniCluster(numServers);        } catch (Exception e) {            LOG.error("couldn't start HBase cluster.", e);            systemReady = false;        }{code}in my opinion this catch should be droped. When start of a miniCluster is failed, then tests should failed. Test camel-hbase tests pass despite setup error there is clause in tests: when system is not ready (a local test cluster failed) then test is passed. It concerns all test cases. It is because a setUp method is: {code:java}try {            hbaseUtil.startMiniCluster(numServers);        } catch (Exception e) {            LOG.error("couldn't start HBase cluster.", e);            systemReady = false;        }{code}in my opinion this catch should be droped. When start of a miniCluster is failed, then tests should failed.
CAMEL-9145 Upgrade camel-hbase component to hbase 1.1.1 on Hadoop 2.7.1 There is a new HBase version with changed API. HBase 1.1.1 is also a part of Hortonworks Data Platform 2.3 http://hortonworks.com/hdp/whats-new/ There are changes in HBase 1.1.1 API in compare to 0.98 (currently in Camel). The question is how to provide two version of camel-hbase (for HBase 0.98 and HBase 1.1.1)?I've just started to prepare a version compatible with HBase 1.1.1 and Hadoop 2.7.1 Improvement Upgrade camel-hbase component to hbase 1.1.1 on Hadoop 2.7.1 There is a new HBase version with changed API. HBase 1.1.1 is also a part of Hortonworks Data Platform 2.3 http://hortonworks.com/hdp/whats-new/ There are changes in HBase 1.1.1 API in compare to 0.98 (currently in Camel). The question is how to provide two version of camel-hbase (for HBase 0.98 and HBase 1.1.1)?I've just started to prepare a version compatible with HBase 1.1.1 and Hadoop 2.7.1
CAMEL-9137 RestBindingDefinition should allow to set Include("NON_NULL") for JsonDataFormat There is option to set properties from Jackson classes:- com.fasterxml.jackson.databind.SerializationFeature- com.fasterxml.jackson.databind.DeserializationFeature- com.fasterxml.jackson.databind.MapperFeaturebut it is not possible to set JsonInclude.Include.NON_NULL to return only non-null json properties. New Feature RestBindingDefinition should allow to set Include("NON_NULL") for JsonDataFormat There is option to set properties from Jackson classes:- com.fasterxml.jackson.databind.SerializationFeature- com.fasterxml.jackson.databind.DeserializationFeature- com.fasterxml.jackson.databind.MapperFeaturebut it is not possible to set JsonInclude.Include.NON_NULL to return only non-null json properties.
CAMEL-9136 JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed fails intermittently The JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed test fails intermittently with errors like the one below.    (Although sometimes the number of messages received is close to 100, and sometimes it's close to 0).------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 35.665 sec <<< FAILURE! - in org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTesttestTempQueueRefreshed(org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTest)  Time elapsed: 32.14 sec  <<< FAILURE!java.lang.AssertionError: mock://result Received message count. Expected: <100> but was: <0>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1394)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1376)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:230)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:682)	at org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTest.doSendMessages(JmsRequestReplyTempQueueMultipleConsumersTest.java:83)	at org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed(JmsRequestReplyTempQueueMultipleConsumersTest.java:59)Results :Failed tests:   JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed:59->doSendMessages:83->CamelTestSupport.assertMockEndpointsSatisfied:682 mock://result Received message count. Expected: <100> but was: <0>Tests run: 2, Failures: 1, Errors: 0, Skipped: 0 Test JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed fails intermittently The JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed test fails intermittently with errors like the one below.    (Although sometimes the number of messages received is close to 100, and sometimes it's close to 0).------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 35.665 sec <<< FAILURE! - in org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTesttestTempQueueRefreshed(org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTest)  Time elapsed: 32.14 sec  <<< FAILURE!java.lang.AssertionError: mock://result Received message count. Expected: <100> but was: <0>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1394)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1376)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:230)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:682)	at org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTest.doSendMessages(JmsRequestReplyTempQueueMultipleConsumersTest.java:83)	at org.apache.camel.component.jms.JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed(JmsRequestReplyTempQueueMultipleConsumersTest.java:59)Results :Failed tests:   JmsRequestReplyTempQueueMultipleConsumersTest.testTempQueueRefreshed:59->doSendMessages:83->CamelTestSupport.assertMockEndpointsSatisfied:682 mock://result Received message count. Expected: <100> but was: <0>Tests run: 2, Failures: 1, Errors: 0, Skipped: 0
CAMEL-9135 BasicDisruptorComponentTest.testMultipleConsumers fails intermittently The BasicDisruptorComponentTest.testMultipleConsumers test fails intermittently (about once every 7-8 times) with one of the two errors below:Running org.apache.camel.component.disruptor.BasicDisruptorComponentTestTests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 6.299 sec <<< FAILURE! - in org.apache.camel.component.disruptor.BasicDisruptorComponentTesttestMultipleConsumers(org.apache.camel.component.disruptor.BasicDisruptorComponentTest)  Time elapsed: 5.199 sec  <<< FAILURE!java.lang.AssertionError: expected:<4> but was:<5>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.disruptor.BasicDisruptorComponentTest.testMultipleConsumers(BasicDisruptorComponentTest.java:103)Results :Failed tests:   BasicDisruptorComponentTest.testMultipleConsumers:103->Assert.assertEquals:542->Assert.assertEquals:555->Assert.assertEquals:118->Assert.failNotEquals:743->Assert.fail:88 expected:<4> but was:<5>ORjava.lang.AssertionError: expected:<4> but was:<3>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.disruptor.BasicDisruptorComponentTest.testMultipleConsumers(BasicDisruptorComponentTest.java:103) Test BasicDisruptorComponentTest.testMultipleConsumers fails intermittently The BasicDisruptorComponentTest.testMultipleConsumers test fails intermittently (about once every 7-8 times) with one of the two errors below:Running org.apache.camel.component.disruptor.BasicDisruptorComponentTestTests run: 3, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 6.299 sec <<< FAILURE! - in org.apache.camel.component.disruptor.BasicDisruptorComponentTesttestMultipleConsumers(org.apache.camel.component.disruptor.BasicDisruptorComponentTest)  Time elapsed: 5.199 sec  <<< FAILURE!java.lang.AssertionError: expected:<4> but was:<5>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.disruptor.BasicDisruptorComponentTest.testMultipleConsumers(BasicDisruptorComponentTest.java:103)Results :Failed tests:   BasicDisruptorComponentTest.testMultipleConsumers:103->Assert.assertEquals:542->Assert.assertEquals:555->Assert.assertEquals:118->Assert.failNotEquals:743->Assert.fail:88 expected:<4> but was:<5>ORjava.lang.AssertionError: expected:<4> but was:<3>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.disruptor.BasicDisruptorComponentTest.testMultipleConsumers(BasicDisruptorComponentTest.java:103)
CAMEL-9133 FileChangedReadLockMinAgeTes fails intermittently The FileChangedReadLockMinAgeTest fails intermettently, maybe once every 5 times for me, with the error below:------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.954 sec <<< FAILURE! - in org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTesttestChangedReadLockMinAge(org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTest)  Time elapsed: 4.867 sec  <<< FAILURE!java.lang.AssertionError: Assertion error at index 0 on mock mock://result with predicate: exchangeProperty{exchangeProperty(CamelReceivedTimestamp)} > 1442223116043 evaluated as: 1442223115077 > 1442223116043 on Exchange[ID-planet-express-42451-1442223110794-0-2][slowfile.dat]	at org.apache.camel.util.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:43)	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:106)	at org.apache.camel.component.mock.MockEndpoint$6.run(MockEndpoint.java:702)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:414)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:382)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:370)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:208)	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:343)	at org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTest.testChangedReadLockMinAge(FileChangedReadLockMinAgeTest.java:53)Results :Failed tests:   FileChangedReadLockMinAgeTest>TestSupport.runBare:58->testChangedReadLockMinAge:53->ContextTestSupport.assertMockEndpointsSatisfied:343 Assertion error at index 0 on mock mock://result with predicate: exchangeProperty{exchangeProperty(CamelReceivedTimestamp)} > 1442223116043 evaluated as: 1442223115077 > 1442223116043 on Exchange[ID-planet-express-42451-1442223110794-0-2][slowfile.dat]Tests run: 1, Failures: 1, Errors: 0, Skipped: 0 Test FileChangedReadLockMinAgeTes fails intermittently The FileChangedReadLockMinAgeTest fails intermettently, maybe once every 5 times for me, with the error below:------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 4.954 sec <<< FAILURE! - in org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTesttestChangedReadLockMinAge(org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTest)  Time elapsed: 4.867 sec  <<< FAILURE!java.lang.AssertionError: Assertion error at index 0 on mock mock://result with predicate: exchangeProperty{exchangeProperty(CamelReceivedTimestamp)} > 1442223116043 evaluated as: 1442223115077 > 1442223116043 on Exchange[ID-planet-express-42451-1442223110794-0-2][slowfile.dat]	at org.apache.camel.util.PredicateAssertHelper.assertMatches(PredicateAssertHelper.java:43)	at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:106)	at org.apache.camel.component.mock.MockEndpoint$6.run(MockEndpoint.java:702)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:414)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:382)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:370)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:208)	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:343)	at org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTest.testChangedReadLockMinAge(FileChangedReadLockMinAgeTest.java:53)Results :Failed tests:   FileChangedReadLockMinAgeTest>TestSupport.runBare:58->testChangedReadLockMinAge:53->ContextTestSupport.assertMockEndpointsSatisfied:343 Assertion error at index 0 on mock mock://result with predicate: exchangeProperty{exchangeProperty(CamelReceivedTimestamp)} > 1442223116043 evaluated as: 1442223115077 > 1442223116043 on Exchange[ID-planet-express-42451-1442223110794-0-2][slowfile.dat]Tests run: 1, Failures: 1, Errors: 0, Skipped: 0
CAMEL-9131 Camel components - Add more labels to group the options See nabblehttp://camel.465427.n5.nabble.com/advanced-label-for-params-tp5771390.htmlWe should add more labels to the various endpoint / component options os they can be grouped, eg when an endpoint has many options then maybe 50 options is listed in the same group. If we can figure out which options are- advanced- security- locking- threadingetc then we can add such as labels. This will help group the options and make it easier for users to understand and use the components.Over time we should come up with a list of known names for these labels, so we reuse the same names. Improvement Camel components - Add more labels to group the options See nabblehttp://camel.465427.n5.nabble.com/advanced-label-for-params-tp5771390.htmlWe should add more labels to the various endpoint / component options os they can be grouped, eg when an endpoint has many options then maybe 50 options is listed in the same group. If we can figure out which options are- advanced- security- locking- threadingetc then we can add such as labels. This will help group the options and make it easier for users to understand and use the components.Over time we should come up with a list of known names for these labels, so we reuse the same names.
CAMEL-9119 XSLT errors should not be ignored Since CAMEL-4396, XSLT exceptions are not logged anymore on System.err.Unfortunately, the XsltErrorHandler which was introduced does not behave as the default ErrorHandler which logs on System.err and re-throws exceptions (my mistake). The XsltErrorHandler should re-throw exceptions for ERROR or FATAL, otherwise they are ignored and the service is allowed to start, although the XSLT transformation is not successfully started.Here is a small patch that fixes that.The test "XsltTestErrorListenerTest" is still successful. Improvement XSLT errors should not be ignored Since CAMEL-4396, XSLT exceptions are not logged anymore on System.err.Unfortunately, the XsltErrorHandler which was introduced does not behave as the default ErrorHandler which logs on System.err and re-throws exceptions (my mistake). The XsltErrorHandler should re-throw exceptions for ERROR or FATAL, otherwise they are ignored and the service is allowed to start, although the XSLT transformation is not successfully started.Here is a small patch that fixes that.The test "XsltTestErrorListenerTest" is still successful.
CAMEL-9118 camel-pgevent, use pg_notify for sending notifications with postgres verion 9 and above In camel-pgevent use the pg_notify function via a callablestatement on postgres version 9.0 and above.This is an add-on to the patch supplied for camel-9088 Improvement camel-pgevent, use pg_notify for sending notifications with postgres verion 9 and above In camel-pgevent use the pg_notify function via a callablestatement on postgres version 9.0 and above.This is an add-on to the patch supplied for camel-9088
CAMEL-9116 camel-sjms - Should use same binding to/from JMS messages as camel-jms This allows end users to switch between camel-jms and camel-sjms easier. Also camel-jms has been proven for a longer time, and would be better if camel-sjms supports and is more similar to some of the functions it has.The binding between JMS and Camel should be a good start to make that the same/similar as in JMS.See nabblehttp://camel.465427.n5.nabble.com/Camel-SJMS-cannot-convert-Jetty-objects-to-JMS-object-tp5771193.html Improvement camel-sjms - Should use same binding to/from JMS messages as camel-jms This allows end users to switch between camel-jms and camel-sjms easier. Also camel-jms has been proven for a longer time, and would be better if camel-sjms supports and is more similar to some of the functions it has.The binding between JMS and Camel should be a good start to make that the same/similar as in JMS.See nabblehttp://camel.465427.n5.nabble.com/Camel-SJMS-cannot-convert-Jetty-objects-to-JMS-object-tp5771193.html
CAMEL-9115 camel-restlet - Should doneUoW using restlet callback See nabblehttp://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-when-marshaling-to-JSON-with-Jackson-tp5769699.htmlTo ensure we done the UoW after restlet is done sending the reply message. Improvement camel-restlet - Should doneUoW using restlet callback See nabblehttp://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-when-marshaling-to-JSON-with-Jackson-tp5769699.htmlTo ensure we done the UoW after restlet is done sending the reply message.
CAMEL-9105 Camel DefaultHttpBinding should convert response Date headers to HTTP-friendly format This is related to CAMEL-9091 except that the optional transformation of Date and also Locale instances can be of use to all of Camel HTTP consumers depending on a Camel transport. It is also likely a cleaner solution because at the CXF component level the headers may be going out to JMS/etc flowsNote the use of type converters will still be possible, however installing a global type converter converting Date to HTTP-friendly rep is deemed sensitive.  Improvement Camel DefaultHttpBinding should convert response Date headers to HTTP-friendly format This is related to CAMEL-9091 except that the optional transformation of Date and also Locale instances can be of use to all of Camel HTTP consumers depending on a Camel transport. It is also likely a cleaner solution because at the CXF component level the headers may be going out to JMS/etc flowsNote the use of type converters will still be possible, however installing a global type converter converting Date to HTTP-friendly rep is deemed sensitive. 
CAMEL-9102 CxfEndpoint could use loggingSizeLimit = -1 for no size limit When creating a CxfEndpoint, setting a loggingSizeLimit -1 to disable limiting payload logging cause no effect due to the code bellow. CXF own LoggingIn/OutInterceptor code accept -1 as unlimited.org.apache.camel.component.cxf.CxfEndpoint{code:java}if (getLoggingSizeLimit() > 0) {    sfb.getFeatures().add(new LoggingFeature(getLoggingSizeLimit()));} else {    sfb.getFeatures().add(new LoggingFeature());}{code}org.apache.cxf.feature.LoggingFeature{code:java}private static final int DEFAULT_LIMIT = AbstractLoggingInterceptor.DEFAULT_LIMIT;private static final LoggingInInterceptor IN = new LoggingInInterceptor(DEFAULT_LIMIT);private static final LoggingOutInterceptor OUT = new LoggingOutInterceptor(DEFAULT_LIMIT);int limit = DEFAULT_LIMIT;public LoggingFeature() {}protected void initializeProvider(InterceptorProvider provider, Bus bus) {    if (limit == DEFAULT_LIMIT && inLocation == null && outLocation == null && !prettyLogging) {        provider.getInInterceptors().add(IN);        provider.getInFaultInterceptors().add(IN);        provider.getOutInterceptors().add(OUT);        provider.getOutFaultInterceptors().add(OUT);    } else {           //Creates and uses new Interceptors with specified limit    }{code}org.apache.cxf.interceptor.LoggingInInterceptor{code:java}public LoggingInInterceptor(int lim) {    this();    limit = lim;}protected void logInputStream(Message message, InputStream is, LoggingMessage buffer, String encoding, String ct) {(...)    //only copy up to the limit since that's all we need to log    //we can stream the rest    IOUtils.copyAtLeast(bis, bos, limit == -1 ? Integer.MAX_VALUE : limit);{code} Improvement CxfEndpoint could use loggingSizeLimit = -1 for no size limit When creating a CxfEndpoint, setting a loggingSizeLimit -1 to disable limiting payload logging cause no effect due to the code bellow. CXF own LoggingIn/OutInterceptor code accept -1 as unlimited.org.apache.camel.component.cxf.CxfEndpoint{code:java}if (getLoggingSizeLimit() > 0) {    sfb.getFeatures().add(new LoggingFeature(getLoggingSizeLimit()));} else {    sfb.getFeatures().add(new LoggingFeature());}{code}org.apache.cxf.feature.LoggingFeature{code:java}private static final int DEFAULT_LIMIT = AbstractLoggingInterceptor.DEFAULT_LIMIT;private static final LoggingInInterceptor IN = new LoggingInInterceptor(DEFAULT_LIMIT);private static final LoggingOutInterceptor OUT = new LoggingOutInterceptor(DEFAULT_LIMIT);int limit = DEFAULT_LIMIT;public LoggingFeature() {}protected void initializeProvider(InterceptorProvider provider, Bus bus) {    if (limit == DEFAULT_LIMIT && inLocation == null && outLocation == null && !prettyLogging) {        provider.getInInterceptors().add(IN);        provider.getInFaultInterceptors().add(IN);        provider.getOutInterceptors().add(OUT);        provider.getOutFaultInterceptors().add(OUT);    } else {           //Creates and uses new Interceptors with specified limit    }{code}org.apache.cxf.interceptor.LoggingInInterceptor{code:java}public LoggingInInterceptor(int lim) {    this();    limit = lim;}protected void logInputStream(Message message, InputStream is, LoggingMessage buffer, String encoding, String ct) {(...)    //only copy up to the limit since that's all we need to log    //we can stream the rest    IOUtils.copyAtLeast(bis, bos, limit == -1 ? Integer.MAX_VALUE : limit);{code}
CAMEL-9096 rest-dsl - Reuse logic for matching best rest path to use Allow to reuse shared logic for matching best consumer to use for handling an incoming rest when using rest-dsl, and there request may match 1 or more paths. Improvement rest-dsl - Reuse logic for matching best rest path to use Allow to reuse shared logic for matching best consumer to use for handling an incoming rest when using rest-dsl, and there request may match 1 or more paths.
CAMEL-9095 Upgrade to spring 4.2.x Upgrade to latest spring release which is currently 4.2.0.RELEASE Wish Upgrade to spring 4.2.x Upgrade to latest spring release which is currently 4.2.0.RELEASE
CAMEL-9088 camel-pgevent - Use prepared statement and close resources The camel-pgevent component uses plain statement. We should use PreparedStatement and also close the resources after usage.Contributions is welcome. Improvement camel-pgevent - Use prepared statement and close resources The camel-pgevent component uses plain statement. We should use PreparedStatement and also close the resources after usage.Contributions is welcome.
CAMEL-9083 Investigate camel-hazelcast feature failure when installed with other bundles {code}karaf@root> features:install camel-awskaraf@root> features:install camel-groovykaraf@root> features:install camel-hazelcastError executing command: Can't install feature camel-hazelcast/0.0.0:Could not start bundle mvn:com.hazelcast/hazelcast/3.5.1 in feature(s) camel-hazelcast-2.16-SNAPSHOT, camel-vertx-2.16-SNAPSHOT: Activator start error in bundle com.hazelcast [79].{code}Where camel-hazelcast throws this exception:{code}Caused by: org.osgi.framework.BundleException: Activator start error in bundle com.hazelcast [188].	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2204)	at org.apache.felix.framework.Felix.startBundle(Felix.java:2072)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)	... 17 moreCaused by: java.lang.reflect.InvocationTargetException	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]	at com.hazelcast.internal.osgi.Activator.activateJavaxScripting(Activator.java:70)	at com.hazelcast.internal.osgi.Activator.start(Activator.java:46)	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2154)	... 21 moreCaused by: java.lang.NoSuchMethodError: javax.script.ScriptEngineManager.setBindings(Ljavax/script/Bindings;)V	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.createScriptEngineManager(OSGiScriptEngineManager.java:262)	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.findManagers(OSGiScriptEngineManager.java:235)	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.<init>(OSGiScriptEngineManager.java:87)	at com.hazelcast.internal.osgi.ScriptEngineActivator.registerOsgiScriptEngineManager(ScriptEngineActivator.java:44)	... 29 more{code}This issue only occurs when certain other bundles are installed. In the above example, either one of camel-aws or camel-groovy are dragging some dependencies related to scripting (likely camel-groovy) that the Hazelcast library doesn't like. Probably because Hazelcast doesn't specify a version range in their javax.script import:{code}[...]Bundle-Vendor = Hazelcast, Inc.Bundle-Activator = com.hazelcast.internal.osgi.ActivatorBundle-Name = hazelcastBundle-DocURL = http://www.hazelcast.com/Bundle-Description = Core Hazelcast ModuleBundle-SymbolicName = com.hazelcastBundle-Version = 3.5.1Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txtBundle-ManifestVersion = 2[...]Import-Package =[...]	javax.script,[...]{code}We'll have to investigate further and perhaps open a ticket at Hazelcast. Task Investigate camel-hazelcast feature failure when installed with other bundles {code}karaf@root> features:install camel-awskaraf@root> features:install camel-groovykaraf@root> features:install camel-hazelcastError executing command: Can't install feature camel-hazelcast/0.0.0:Could not start bundle mvn:com.hazelcast/hazelcast/3.5.1 in feature(s) camel-hazelcast-2.16-SNAPSHOT, camel-vertx-2.16-SNAPSHOT: Activator start error in bundle com.hazelcast [79].{code}Where camel-hazelcast throws this exception:{code}Caused by: org.osgi.framework.BundleException: Activator start error in bundle com.hazelcast [188].	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2204)	at org.apache.felix.framework.Felix.startBundle(Felix.java:2072)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:976)	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:963)	at org.apache.karaf.shell.osgi.InstallBundle.doExecute(InstallBundle.java:51)	... 17 moreCaused by: java.lang.reflect.InvocationTargetException	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_79]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_79]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_79]	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_79]	at com.hazelcast.internal.osgi.Activator.activateJavaxScripting(Activator.java:70)	at com.hazelcast.internal.osgi.Activator.start(Activator.java:46)	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2154)	... 21 moreCaused by: java.lang.NoSuchMethodError: javax.script.ScriptEngineManager.setBindings(Ljavax/script/Bindings;)V	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.createScriptEngineManager(OSGiScriptEngineManager.java:262)	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.findManagers(OSGiScriptEngineManager.java:235)	at com.hazelcast.internal.osgi.OSGiScriptEngineManager.<init>(OSGiScriptEngineManager.java:87)	at com.hazelcast.internal.osgi.ScriptEngineActivator.registerOsgiScriptEngineManager(ScriptEngineActivator.java:44)	... 29 more{code}This issue only occurs when certain other bundles are installed. In the above example, either one of camel-aws or camel-groovy are dragging some dependencies related to scripting (likely camel-groovy) that the Hazelcast library doesn't like. Probably because Hazelcast doesn't specify a version range in their javax.script import:{code}[...]Bundle-Vendor = Hazelcast, Inc.Bundle-Activator = com.hazelcast.internal.osgi.ActivatorBundle-Name = hazelcastBundle-DocURL = http://www.hazelcast.com/Bundle-Description = Core Hazelcast ModuleBundle-SymbolicName = com.hazelcastBundle-Version = 3.5.1Bundle-License = http://www.apache.org/licenses/LICENSE-2.0.txtBundle-ManifestVersion = 2[...]Import-Package =[...]	javax.script,[...]{code}We'll have to investigate further and perhaps open a ticket at Hazelcast.
CAMEL-9081 No Scala equivalent for AdviceWithRouteBuilder (e.g, ScalaAdviceWithRouteBuilder) I was thinking of adding an {{AdviceWithRouteBuilder}} implementation for Scala (e.g, ScalaAdviceWithRouteBuilder). As far as i understand the API, the {{weave*}}/{{replace}} etc methods return a single {{ProcessorDefinition}}. The Scala API only has {{org.apache.camel.scala.dsl.DSL}} where each keyword returns the {{DSL}} again. If my assumption is correct than that whole DSL part would need refactoring. Feels quite invasive. Are my assumptions correct?  New Feature No Scala equivalent for AdviceWithRouteBuilder (e.g, ScalaAdviceWithRouteBuilder) I was thinking of adding an {{AdviceWithRouteBuilder}} implementation for Scala (e.g, ScalaAdviceWithRouteBuilder). As far as i understand the API, the {{weave*}}/{{replace}} etc methods return a single {{ProcessorDefinition}}. The Scala API only has {{org.apache.camel.scala.dsl.DSL}} where each keyword returns the {{DSL}} again. If my assumption is correct than that whole DSL part would need refactoring. Feels quite invasive. Are my assumptions correct? 
CAMEL-9078 camel-http - Allow to configure the success range for http status codes See SOhttp://stackoverflow.com/questions/31980769/how-can-i-add-failover-in-custom-load-balancer?noredirect=1#comment51870781_31980769It should be possible for people to say, successStatusCodeRange=200-200 to let only 200 be success, and eg 200-209 for that range etc. Improvement camel-http - Allow to configure the success range for http status codes See SOhttp://stackoverflow.com/questions/31980769/how-can-i-add-failover-in-custom-load-balancer?noredirect=1#comment51870781_31980769It should be possible for people to say, successStatusCodeRange=200-200 to let only 200 be success, and eg 200-209 for that range etc.
CAMEL-9069 Add processor to immediately handle exception while in retry loop We have a recipientList of http4 endpoints.  Occasionally an endpoint won't be available, and will return an exception (whether a ConnectException, or any other ex and a status code of >=400).  To handle these errors we can use a defaultErrorHandler or leverage onException, and setup redelivery. What we then would like to do is some custom error handling on each occurrence of an exception.Both the defaultErrorHandler and onException support .onRedelivery().  While this is nice, when a retry delay grows large enough the lag between the exception and the .onRedelivery() call really begins to grow and so our custom error handling isn't as much “on error” as it is “on error and after a wait”.onException also supports a .process() call, however this only occurs once all redeliveries have failed.What would be ideal would be an additional .onExceptionOccur(Processor processor) method (or some such name) that allows for immediate processing upon an exception, even if its being handled within a retry loop. Improvement Add processor to immediately handle exception while in retry loop We have a recipientList of http4 endpoints.  Occasionally an endpoint won't be available, and will return an exception (whether a ConnectException, or any other ex and a status code of >=400).  To handle these errors we can use a defaultErrorHandler or leverage onException, and setup redelivery. What we then would like to do is some custom error handling on each occurrence of an exception.Both the defaultErrorHandler and onException support .onRedelivery().  While this is nice, when a retry delay grows large enough the lag between the exception and the .onRedelivery() call really begins to grow and so our custom error handling isn't as much "on error" as it is "on error and after a wait".onException also supports a .process() call, however this only occurs once all redeliveries have failed.What would be ideal would be an additional .onExceptionOccur(Processor processor) method (or some such name) that allows for immediate processing upon an exception, even if its being handled within a retry loop.
CAMEL-9068 Log output to show which route is shutdown and has a pending message It'd be great to see in the log output which route is shutdown and has a pending message:{noformat}2015-08-06 09:11:45,312 | INFO  | FelixDispatchQueue       | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  184 | 94 - org.apache.camel.camel-core - 2.15.1 | Starting to graceful shutdown 1 routes (timeout 300 seconds)2015-08-06 09:11:45,318 | INFO  | hread #23 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  606 | 94 - org.apache.camel.camel-core - 2.15.1 | Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds.{noformat} Improvement Log output to show which route is shutdown and has a pending message It'd be great to see in the log output which route is shutdown and has a pending message:{noformat}2015-08-06 09:11:45,312 | INFO  | FelixDispatchQueue       | DefaultShutdownStrategy          | mel.impl.DefaultShutdownStrategy  184 | 94 - org.apache.camel.camel-core - 2.15.1 | Starting to graceful shutdown 1 routes (timeout 300 seconds)2015-08-06 09:11:45,318 | INFO  | hread #23 - ShutdownTask | DefaultShutdownStrategy          | ultShutdownStrategy$ShutdownTask  606 | 94 - org.apache.camel.camel-core - 2.15.1 | Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 300 seconds.{noformat}
CAMEL-9067 File consumer - Allow to filter by expression and have two options one for directory and another for file name See nabblehttp://camel.465427.n5.nabble.com/smb-endpoint-modified-files-not-copied-to-destination-tp5770499p5770521.htmlPeople who want to consume from a directory using today as timestamp need to write a custom filter java impl to do so. We have a bunch of include/antInclude etc options today but they are regex/ant based.We should have a way of using an expression (simple language) so you can filter such as{code}filterDirectory=${date:now:yyyyMMdd}&filterFile=${file:ext} == 'xml' && ${file:size} > 20000{code} Improvement File consumer - Allow to filter by expression and have two options one for directory and another for file name See nabblehttp://camel.465427.n5.nabble.com/smb-endpoint-modified-files-not-copied-to-destination-tp5770499p5770521.htmlPeople who want to consume from a directory using today as timestamp need to write a custom filter java impl to do so. We have a bunch of include/antInclude etc options today but they are regex/ant based.We should have a way of using an expression (simple language) so you can filter such as{code}filterDirectory=${date:now:yyyyMMdd}&filterFile=${file:ext} == 'xml' && ${file:size} > 20000{code}
CAMEL-9066 Include any headers unmarshalled by SoapJaxbDataFormat in content marshalled by the same. The current implementation of the Soap11DataFormatAdapter and Soap12DataFormatAdapter will never generate SOAP Headers when a JAXB object is the inputObject.If the unmarshal is done with ignoreUnmarshalledHeaders set to false, then the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST message header is populated with a list of Objects or JAXBElement<?>s.  However, during the doMarshal, this message header is never referenced.  Therefore, the sequence:from("direct:source").unmarshal(fromSoapDataFormat).process(doSomething).marshal(toSoapDataFormat).to("mock:end");will never produce SOAP Headers in the outbound document.The doUnmarshal passes the inputObject and an empty List<JAXBElement<?>> into createContentFromObject.  However, is the inputObject is an ordinary JAXB object (or JAXBElement<?>) then no header content will be created, and since the Exchange isn't sent to createContentFromObject, the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST cannot be referenced.It seems to me that, if ignoreUnmarshalledHeaders is false, and the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST is non-empty, and in the event the inbound Exchange does not contain an Exception, then the contents of the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST should be added to the headerContent before the call to createContentFromObject.I have checked the code for SoapJaxbDataFormat, Soap11DataFormatAdapter and Soap12DataFormatAdapter from camel-soap 2.12.0 through 2.15.2 and it looks like these three classes haven't changed.I crated a demo project and patch, originally against JBoss Fuse 6.1.0, but offer it here for the camel-soap 2.12.x branch.  I have also applied and tested the patch against camel-soap in the master branch (2.16-SNAPSHOT).  Indeed, it looks like this patch can be applied from any point 2.12 and forward.The demo can be run against 2.12.5 (or any released version - just change the camel.version property in the POM) to demonstrate what I think is the failure.  It can also be run against a patched 2.12.6-SNAPSHOT or 2.16-SNAPSHOT (again, just play around with the camel.version property) to demonstrate what I think is correct behavior. Improvement Include any headers unmarshalled by SoapJaxbDataFormat in content marshalled by the same. The current implementation of the Soap11DataFormatAdapter and Soap12DataFormatAdapter will never generate SOAP Headers when a JAXB object is the inputObject.If the unmarshal is done with ignoreUnmarshalledHeaders set to false, then the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST message header is populated with a list of Objects or JAXBElement<?>s.  However, during the doMarshal, this message header is never referenced.  Therefore, the sequence:from("direct:source").unmarshal(fromSoapDataFormat).process(doSomething).marshal(toSoapDataFormat).to("mock:end");will never produce SOAP Headers in the outbound document.The doUnmarshal passes the inputObject and an empty List<JAXBElement<?>> into createContentFromObject.  However, is the inputObject is an ordinary JAXB object (or JAXBElement<?>) then no header content will be created, and since the Exchange isn't sent to createContentFromObject, the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST cannot be referenced.It seems to me that, if ignoreUnmarshalledHeaders is false, and the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST is non-empty, and in the event the inbound Exchange does not contain an Exception, then the contents of the SoapJaxbDataFormat.SOAP_UNMARSHALLED_HEADER_LIST should be added to the headerContent before the call to createContentFromObject.I have checked the code for SoapJaxbDataFormat, Soap11DataFormatAdapter and Soap12DataFormatAdapter from camel-soap 2.12.0 through 2.15.2 and it looks like these three classes haven't changed.I crated a demo project and patch, originally against JBoss Fuse 6.1.0, but offer it here for the camel-soap 2.12.x branch.  I have also applied and tested the patch against camel-soap in the master branch (2.16-SNAPSHOT).  Indeed, it looks like this patch can be applied from any point 2.12 and forward.The demo can be run against 2.12.5 (or any released version - just change the camel.version property in the POM) to demonstrate what I think is the failure.  It can also be run against a patched 2.12.6-SNAPSHOT or 2.16-SNAPSHOT (again, just play around with the camel.version property) to demonstrate what I think is correct behavior.
CAMEL-9064 File language - Add functions to get extension in single mode See nabblehttp://camel.465427.n5.nabble.com/donefilename-behavior-change-tp5770446.html Improvement File language - Add functions to get extension in single mode See nabblehttp://camel.465427.n5.nabble.com/donefilename-behavior-change-tp5770446.html
CAMEL-9063 Add useGetBytesForBlob option in camel-jdbc As described in Oracle documentation(avaliable at http://docs.oracle.com/cd/E18283_01/java.112/e16548/oralob.htm#CHDCDFAC ):  "The getString and getNString methods cannot be used for retrieving BLOB column values". So i changed the component to accept an option to use  the getBytes method instead. Improvement Add useGetBytesForBlob option in camel-jdbc As described in Oracle documentation(avaliable at http://docs.oracle.com/cd/E18283_01/java.112/e16548/oralob.htm#CHDCDFAC ):  "The getString and getNString methods cannot be used for retrieving BLOB column values". So i changed the component to accept an option to use  the getBytes method instead.
CAMEL-9062 Java DSL - ValueBuilder should build expressions as languages so they model can be dumped When using Java DSL and building expressions you may use .constant / .bean or whatever that causes the route model to be dumped using the <expressionDefinition> as a fallback because the dsl did not use the language types that you use in xml dsl etc.So we should align ValueBuilder to build the same way as in xml dsl, then it work for both worlds. Improvement Java DSL - ValueBuilder should build expressions as languages so they model can be dumped When using Java DSL and building expressions you may use .constant / .bean or whatever that causes the route model to be dumped using the <expressionDefinition> as a fallback because the dsl did not use the language types that you use in xml dsl etc.So we should align ValueBuilder to build the same way as in xml dsl, then it work for both worlds.
CAMEL-9061 Java DSL - Allow to configure parallel processing and similar using a string configuration type In XML DSL you can configure parallelProcessing="{{myConfig}}" to refer to a property placeholder.In Java DSL this is a bit harder as the DSL uses .parallelProcessing() to enable this. But to use a placeholder you would need to write a bit more java code to do this.We should allow to do in Java DSL, eg a boolean and String type, where the latter does the same as XML DSL to do a property placeholder..parallelProcessing(true) .parallelProcessing("{{myConfig}}") See nabblehttp://camel.465427.n5.nabble.com/DSL-to-dynamically-enable-disable-parallelProcessing-tp5770389.html Improvement Java DSL - Allow to configure parallel processing and similar using a string configuration type In XML DSL you can configure parallelProcessing="{{myConfig}}" to refer to a property placeholder.In Java DSL this is a bit harder as the DSL uses .parallelProcessing() to enable this. But to use a placeholder you would need to write a bit more java code to do this.We should allow to do in Java DSL, eg a boolean and String type, where the latter does the same as XML DSL to do a property placeholder..parallelProcessing(true) .parallelProcessing("{{myConfig}}") See nabblehttp://camel.465427.n5.nabble.com/DSL-to-dynamically-enable-disable-parallelProcessing-tp5770389.html
CAMEL-9056 Aggregator - Allow to clear closed correlation key cache See nabblehttp://camel.465427.n5.nabble.com/Aggregator-discard-new-messages-tp5770276p5770319.htmlWe should add to jmx api and api on the processor to allow to clear the cache map. Improvement Aggregator - Allow to clear closed correlation key cache See nabblehttp://camel.465427.n5.nabble.com/Aggregator-discard-new-messages-tp5770276p5770319.htmlWe should add to jmx api and api on the processor to allow to clear the cache map.
CAMEL-9055 camel-aws - SQS should not allow handover the delete task See nabblehttp://camel.465427.n5.nabble.com/SQS-component-and-SEDA-queue-tp5770123.html Improvement camel-aws - SQS should not allow handover the delete task See nabblehttp://camel.465427.n5.nabble.com/SQS-component-and-SEDA-queue-tp5770123.html
CAMEL-9054 sftp - Reduce logging noise from JSCH JSCH is verbose on INFO level.  Improvement sftp - Reduce logging noise from JSCH JSCH is verbose on INFO level. 
CAMEL-9052 HttpHeaderFilterStrategy should filter any Camel header on consumer side as well We filter only on producer, eg when using to. But if you use jetty as consumer then it may return Camel headers in the http response by default.Those headers are not intended for http responses and should be skipped. This is done already when using the producer.See nabblehttp://camel.465427.n5.nabble.com/security-http4-endpoint-headers-leaking-tp5770298.html Improvement HttpHeaderFilterStrategy should filter any Camel header on consumer side as well We filter only on producer, eg when using to. But if you use jetty as consumer then it may return Camel headers in the http response by default.Those headers are not intended for http responses and should be skipped. This is done already when using the producer.See nabblehttp://camel.465427.n5.nabble.com/security-http4-endpoint-headers-leaking-tp5770298.html
CAMEL-9042 Incorrect default value in a documentation of camel-atom Option {{consumer.delay}} in documentaion of [camel-atom|https://camel.apache.org/atom.html]  has  incorrect default value {{60000}} but correct value is {{500}}. Task Incorrect default value in a documentation of camel-atom Option {{consumer.delay}} in documentaion of [camel-atom|https://camel.apache.org/atom.html]  has  incorrect default value {{60000}} but correct value is {{500}}.
CAMEL-9033 Abstract undertow HttpHandler creation This would allow Undertow consumers to get created on the default host of an already running server, which would be the case for wildfly integrationCrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/779 Improvement Abstract undertow HttpHandler creation This would allow Undertow consumers to get created on the default host of an already running server, which would be the case for wildfly integrationCrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/779
CAMEL-9023 Use Redis String instead of Set as datatype for idempotent consumer The current implementation of the RedisIdempotentRepository uses a (Redis) set as the underlying data structure. This is conceptually nice for keeping all consumed keys in a single logical location. However, it makes the management of keys more difficult, since we cannot use Redis' built in mechanisms for expiring keys and have to do a manual cleanup.Thus, this issue proposes to use Redis String as the datatype for a single entry in order to provide support for expiring keys. If the community is in favor of this idea, I am happy to provide a patch (or a second, alternative implementation). Improvement Use Redis String instead of Set as datatype for idempotent consumer The current implementation of the RedisIdempotentRepository uses a (Redis) set as the underlying data structure. This is conceptually nice for keeping all consumed keys in a single logical location. However, it makes the management of keys more difficult, since we cannot use Redis' built in mechanisms for expiring keys and have to do a manual cleanup.Thus, this issue proposes to use Redis String as the datatype for a single entry in order to provide support for expiring keys. If the community is in favor of this idea, I am happy to provide a patch (or a second, alternative implementation).
CAMEL-9021 depends on non-free JAR The Camel SIP component depends on org.apache.servicemix.specs / org.apache.servicemix.specs.jain-sip-api-1.2That JAR depends on javax.sip / jain-sip-apiThe JAIN sip-api classes are not under an Apache compatible free software license.The related jain-sip-ri classes (the runtime implementation) are under an Apache compatible license so this bug doesn't concern them.The solution is to change the dependency to org.opentelecoms.sip / sip-api or one of the other implementations.http://search.maven.org/#search|ga|1|sip-api Task depends on non-free JAR The Camel SIP component depends on org.apache.servicemix.specs / org.apache.servicemix.specs.jain-sip-api-1.2That JAR depends on javax.sip / jain-sip-apiThe JAIN sip-api classes are not under an Apache compatible free software license.The related jain-sip-ri classes (the runtime implementation) are under an Apache compatible license so this bug doesn't concern them.The solution is to change the dependency to org.opentelecoms.sip / sip-api or one of the other implementations.http://search.maven.org/#search|ga|1|sip-api
CAMEL-9020 Splunk component should use TLS instead of SSLv3 SSLv3 support has been removed in jdk 8.The component should be upgraded to Splunk sdk 1.4.0, and use TLS instead. See https://github.com/splunk/splunk-sdk-java#java-and-ant.A bundle is ready at http://mvnrepository.com/artifact/org.apache.servicemix.bundles/org.apache.servicemix.bundles.splunk/1.4.0.0_1 Improvement Splunk component should use TLS instead of SSLv3 SSLv3 support has been removed in jdk 8.The component should be upgraded to Splunk sdk 1.4.0, and use TLS instead. See https://github.com/splunk/splunk-sdk-java#java-and-ant.A bundle is ready at http://mvnrepository.com/artifact/org.apache.servicemix.bundles/org.apache.servicemix.bundles.splunk/1.4.0.0_1
CAMEL-9016 <jmxAgent> in XML DSL should not output default values when dumped When dumping the routes as xml we rely on not outputting default values, and the <jmxAgent> has a bunch of those set which we should configured as null and then infer their default value which we do in elsewhere. Improvement <jmxAgent> in XML DSL should not output default values when dumped When dumping the routes as xml we rely on not outputting default values, and the <jmxAgent> has a bunch of those set which we should configured as null and then infer their default value which we do in elsewhere.
CAMEL-9015 JMX agent - JVM system properties should always take precedence The agent is initialized with JVM system properties and some are fallback and others take precedence.A JVM system property should always take precedence. Improvement JMX agent - JVM system properties should always take precedence The agent is initialized with JVM system properties and some are fallback and others take precedence.A JVM system property should always take precedence.
CAMEL-9014 Add statistics for usage of endpoints in EIPs We can gather statistics for how often each endpoint is used in dynamic EIPs such as recipient list, dynamic to, enricher, pollEnricher, dynamic router, and so on.However this requires to store counters, and that would require AtomicLong so they are safe in concurrent environments, or use long with synchronized. We can have an option on JMXAgent to turn this on|off so people can turn it off if they dont need it.However it may be nice to see which are the most used endpoint uris in all those dynamic EIPs.Today you can see it from the managed endpoint registry, but it does not keep score which EIP its used by. New Feature Add statistics for usage of endpoints in EIPs We can gather statistics for how often each endpoint is used in dynamic EIPs such as recipient list, dynamic to, enricher, pollEnricher, dynamic router, and so on.However this requires to store counters, and that would require AtomicLong so they are safe in concurrent environments, or use long with synchronized. We can have an option on JMXAgent to turn this on|off so people can turn it off if they dont need it.However it may be nice to see which are the most used endpoint uris in all those dynamic EIPs.Today you can see it from the managed endpoint registry, but it does not keep score which EIP its used by.
CAMEL-9011 Circuit Breaker LB - Only supports 1 processor so validate it has only 1 This EIP only uses 1 processor, but you can configure 2+ or more. But only the 1st is always used.We should add a validation that would fail if people mis configured thus. Improvement Circuit Breaker LB - Only supports 1 processor so validate it has only 1 This EIP only uses 1 processor, but you can configure 2+ or more. But only the 1st is always used.We should add a validation that would fail if people mis configured thus.
CAMEL-9010 camel-stream - When using scanStream it should be able to deal if the file is deleted or not present See SOhttp://stackoverflow.com/questions/31601385/read-file-line-by-line-as-soon-as-these-lines-appear-in-the-file-using-apache-ca?noredirect=1#comment51156841_31601385We should support the use-case if the file is deleted then its temporary not available, and the consumer should just ignore this and try to read the stream on next poll. Improvement camel-stream - When using scanStream it should be able to deal if the file is deleted or not present See SOhttp://stackoverflow.com/questions/31601385/read-file-line-by-line-as-soon-as-these-lines-appear-in-the-file-using-apache-ca?noredirect=1#comment51156841_31601385We should support the use-case if the file is deleted then its temporary not available, and the consumer should just ignore this and try to read the stream on next poll.
CAMEL-9009 Camel RSS module should support basic authentication There is an question for Camel RSS module with basic authentication in  [Stakoverflow|http://stackoverflow.com/questions/31567021/apache-camel-rss-module-with-basic-authentication].It should not be so complicated, to supplement the function. Wish Camel RSS module should support basic authentication There is an question for Camel RSS module with basic authentication in  [Stakoverflow|http://stackoverflow.com/questions/31567021/apache-camel-rss-module-with-basic-authentication].It should not be so complicated, to supplement the function.
CAMEL-9007 Contributing Zipkin / Brave support Hi,We're building Microservices with Camel, predominantly producing from REST DSL components and have got to the point where having easy support for Zipkin[1] / Brave [2] would be of great help.We wondered if this was already on the cards for a future release, and if we might be able to work on it, and if not, if it would be something we could work on and contribute (with guidance to smooth the design and implementation)?Kind regards, the Capgemini UK and Indian Camel teams[1] https://github.com/openzipkin/zipkin[2] https://github.com/openzipkin/brave New Feature Contributing Zipkin / Brave support Hi,We're building Microservices with Camel, predominantly producing from REST DSL components and have got to the point where having easy support for Zipkin[1] / Brave [2] would be of great help.We wondered if this was already on the cards for a future release, and if we might be able to work on it, and if not, if it would be something we could work on and contribute (with guidance to smooth the design and implementation)?Kind regards, the Capgemini UK and Indian Camel teams[1] https://github.com/openzipkin/zipkin[2] https://github.com/openzipkin/brave
CAMEL-9002 Headers set within velocity header are not saved when using custom VelocityContext Normally, any headers set within the velocity header are preserved as headers on the out message.  However, this does not work if you use your own VelocityContext via the CamelVelocityContext.  This is because VelocityEndpoint relies on the fact that the "headers" entry in the velocity context normally points directly to the current Exchange's in headers.  This is not likely true when using an existing velocity context.A more foolproof solution might be to look for and explicitly copy any updated headers from the velocity context to the out message. Improvement Headers set within velocity header are not saved when using custom VelocityContext Normally, any headers set within the velocity header are preserved as headers on the out message.  However, this does not work if you use your own VelocityContext via the CamelVelocityContext.  This is because VelocityEndpoint relies on the fact that the "headers" entry in the velocity context normally points directly to the current Exchange's in headers.  This is not likely true when using an existing velocity context.A more foolproof solution might be to look for and explicitly copy any updated headers from the velocity context to the out message.
CAMEL-8996 camel-undertow - Add support for Exchange.HTTP_QUERY Component camel-undertowAdd support for {code}            ProducerTemplate producer = camelctx.createProducerTemplate();            String result = producer.requestBodyAndHeader("direct:start", null, Exchange.HTTP_QUERY, "name=Kermit", String.class);            Assert.assertEquals("Hello Kermit", result);{code}and possibly other headers. This works for camel-http4 New Feature camel-undertow - Add support for Exchange.HTTP_QUERY Component camel-undertowAdd support for {code}            ProducerTemplate producer = camelctx.createProducerTemplate();            String result = producer.requestBodyAndHeader("direct:start", null, Exchange.HTTP_QUERY, "name=Kermit", String.class);            Assert.assertEquals("Hello Kermit", result);{code}and possibly other headers. This works for camel-http4
CAMEL-8995 camel-restlet - Should defer UoW done until after writing response See nabblehttp://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-when-marshaling-to-JSON-with-Jackson-tp5769699.html Improvement camel-restlet - Should defer UoW done until after writing response See nabblehttp://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-when-marshaling-to-JSON-with-Jackson-tp5769699.html
CAMEL-8994 Large memory use on Large core count(512) servers ConcurrentLinkedHashmap get huge on these servers (200 +Mb) There are some CPU related defaults + Some padding that are the source of this, more discussion at:https://github.com/ben-manes/concurrentlinkedhashmap/issues/43upgrading to a newer version should remove the padding and reduce memory usage...Another thing I noticed that is related, is that LRUCache default initial size is equal with maximum size... which is 1000, would it make more sense to have a lower default for initialSize? (64)  Improvement Large memory use on Large core count(512) servers ConcurrentLinkedHashmap get huge on these servers (200 +Mb) There are some CPU related defaults + Some padding that are the source of this, more discussion at:https://github.com/ben-manes/concurrentlinkedhashmap/issues/43upgrading to a newer version should remove the padding and reduce memory usage...Another thing I noticed that is related, is that LRUCache default initial size is equal with maximum size... which is 1000, would it make more sense to have a lower default for initialSize? (64) 
CAMEL-8992 EIPs with Expression - Allow to detail those in jmx friendly information The various EIPs have mbeans that exposes details about those processors. However when they use expression/predicate we only have the actual created instances of those available for JMX.That means they cannot reverse engineer or represent in a format that is better understood by humans/jmx/toolings.For example{code}                from("direct:start").pollEnrich().simple("seda:${header.whereto}").timeout(1000).id("mysend")                    .to("mock:foo");{code}The simple expression on poll enrich becomes{code}        String uri = (String) mbeanServer.getAttribute(on, "Expression");        assertEquals("Simple: seda:${header.whereto}", uri);{code}Ideally we should have two information- the language used for the expression- the value as-isSo we can show that its simple language with the value "seda:${header.whereto}" Improvement EIPs with Expression - Allow to detail those in jmx friendly information The various EIPs have mbeans that exposes details about those processors. However when they use expression/predicate we only have the actual created instances of those available for JMX.That means they cannot reverse engineer or represent in a format that is better understood by humans/jmx/toolings.For example{code}                from("direct:start").pollEnrich().simple("seda:${header.whereto}").timeout(1000).id("mysend")                    .to("mock:foo");{code}The simple expression on poll enrich becomes{code}        String uri = (String) mbeanServer.getAttribute(on, "Expression");        assertEquals("Simple: seda:${header.whereto}", uri);{code}Ideally we should have two information- the language used for the expression- the value as-isSo we can show that its simple language with the value "seda:${header.whereto}"
CAMEL-8991 rest-dsl - Add support for toD So you can easily use toD in the rest-dsl to call a dynamic to. Today you can choose among to or route. So we add to, toD, and route as the choices. Improvement rest-dsl - Add support for toD So you can easily use toD in the rest-dsl to call a dynamic to. Today you can choose among to or route. So we add to, toD, and route as the choices.
CAMEL-8986 Add specialized mbean for enrich and pollEnrich We should have a ManagedEnricherMBean and ManagedPollEnricherMBean that exposes additional details about those eips than what a regular managed processor would do.Se for example ManagedSendDynamicProcessor for an example. Improvement Add specialized mbean for enrich and pollEnrich We should have a ManagedEnricherMBean and ManagedPollEnricherMBean that exposes additional details about those eips than what a regular managed processor would do.Se for example ManagedSendDynamicProcessor for an example.
CAMEL-8985 camel-jetty - A test fails Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 2.341 sec <<< FAILURE! - in org.apache.camel.component.jetty.HttpStreamCacheFileTesttestStreamCacheToFileShouldBeDeletedInCaseOfException(org.apache.camel.component.jetty.HttpStreamCacheFileTest)  Time elapsed: 0.165 sec  <<< FAILURE!java.lang.AssertionError: Should have thrown an exception	at org.junit.Assert.fail(Assert.java:88)	at org.apache.camel.component.jetty.HttpStreamCacheFileTest.testStreamCacheToFileShouldBeDeletedInCaseOfException(HttpStreamCacheFileTest.java:61) Test camel-jetty - A test fails Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 2.341 sec <<< FAILURE! - in org.apache.camel.component.jetty.HttpStreamCacheFileTesttestStreamCacheToFileShouldBeDeletedInCaseOfException(org.apache.camel.component.jetty.HttpStreamCacheFileTest)  Time elapsed: 0.165 sec  <<< FAILURE!java.lang.AssertionError: Should have thrown an exception	at org.junit.Assert.fail(Assert.java:88)	at org.apache.camel.component.jetty.HttpStreamCacheFileTest.testStreamCacheToFileShouldBeDeletedInCaseOfException(HttpStreamCacheFileTest.java:61)
CAMEL-8981 camel-test-spring - Allow to use UseOverridePropertiesWithPropertiesComponent If you use spring testing with annotations, then you cannot override properties.We should add @UseOverridePropertiesWithPropertiesComponent so you do that.See nabblehttp://camel.465427.n5.nabble.com/overriding-properties-in-Camel-Enhanced-Spring-test-td5768561.html Improvement camel-test-spring - Allow to use UseOverridePropertiesWithPropertiesComponent If you use spring testing with annotations, then you cannot override properties.We should add @UseOverridePropertiesWithPropertiesComponent so you do that.See nabblehttp://camel.465427.n5.nabble.com/overriding-properties-in-Camel-Enhanced-Spring-test-td5768561.html
CAMEL-8979 Camel Kafka component is using Producer and KeyedMessage class Hi, I looked into the camel-kafka component version 2.15.2 and it's using old Producer and KeyedMessage class for posting the message to kafka topic. From 0.8.2 version we have new KafkaProducer and ProduceRecord classes. Can we change the component to use the KafkaProducer and ProduceRecord classes? Improvement Camel Kafka component is using Producer and KeyedMessage class Hi, I looked into the camel-kafka component version 2.15.2 and it's using old Producer and KeyedMessage class for posting the message to kafka topic. From 0.8.2 version we have new KafkaProducer and ProduceRecord classes. Can we change the component to use the KafkaProducer and ProduceRecord classes?
CAMEL-8977 Enrich and PollEnrich - Add option ignoreInvalidEndpoint Now that they are dynamic we can add this ignoreInvalidEndpoint option to ignore like we have on other eips Improvement Enrich and PollEnrich - Add option ignoreInvalidEndpoint Now that they are dynamic we can add this ignoreInvalidEndpoint option to ignore like we have on other eips
CAMEL-8976 netty-http - Allow to configure max size of headers Today its hard-coded to 8192 because that is a netty default. We should allow end users to configure this to a higher value as some need that. Improvement netty-http - Allow to configure max size of headers Today its hard-coded to 8192 because that is a netty default. We should allow end users to configure this to a higher value as some need that.
CAMEL-8974 DefaultPropertiesParser does not support the system properties mode org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigureris delegating the property parsing for camelContext to DefaultPropertiesParser.DefaultPropertiesParse does not have support for System Properties Mode such as OVERRIDE, FALLBACK.It's always taking System properties over provided properties. (OVERRIDE Mode)DefaultPropertiesParser Line 299{code}private String doGetPropertyValue(String key) {            String value = System.getProperty(key);            if (value != null) {                log.debug("Found a JVM system property: {} with value: {} to be used.", key, value);            } else if (properties != null) {                value = properties.getProperty(key);            }            return parseProperty(key, value, properties);        }{code} Improvement DefaultPropertiesParser does not support the system properties mode org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigureris delegating the property parsing for camelContext to DefaultPropertiesParser.DefaultPropertiesParse does not have support for System Properties Mode such as OVERRIDE, FALLBACK.It's always taking System properties over provided properties. (OVERRIDE Mode)DefaultPropertiesParser Line 299{code}private String doGetPropertyValue(String key) {            String value = System.getProperty(key);            if (value != null) {                log.debug("Found a JVM system property: {} with value: {} to be used.", key, value);            } else if (properties != null) {                value = properties.getProperty(key);            }            return parseProperty(key, value, properties);        }{code}
CAMEL-8973 Add Batching JMS component Add specialised component that performs batch consumption of messages from a JMS destination using local transactions.Pull request to follow.Original post to mailing list:--I have written a consumer-only component that combines aggregation logicwith transacted JMS sessions that I would like to contribute. Thecomponentvastly speeds up message consumption and aggregation without message losson failure when compared with using a regular JMS component andaggregator.The problem that it solves is that when you want to aggregate a set ofmessages from JMS and avoid message loss, you typically reach for aJdbcAggregationRepository. This in turn fetches and writes progressivelylarger blobs from the database on receipt of each message, slowing downlinearly in relation to to the number of messages consumed - i.e. itperforms progressively worse the larger the batch.Old way:from("jms:myQueue")     .transacted()     .aggregate(constant(true), myAggStrategy)         .aggregationRepository(jdbcAggregationRepository)         .completionSize(100)         .completionTimeout(500)This also suffers from a problem that message loss is still possiblebetween the message broker and the database that stores the aggregatedmessage (unless you use XA transactions....).The component that I have developed starts a JMS session, and receivesmessages synchronously until it meets a completion size, or until acompletion timeout is met, each time calling an AggregationStrategy. Onlywhen the completion conditions have been matched does it emit theaggregated message.The component will commit the batch transaction if the Exchange isprocessed successfully, or roll the entire thing back on exception - soall of the original messages will end up back on the queue for re-processing.In the event of failure of the Camel process, the messages remain on thebroker for re-dispatch.So in terms of "where is my data stored?", the answer is it remains onthebroker until the batch is successfully processed. New Feature Add Batching JMS component Add specialised component that performs batch consumption of messages from a JMS destination using local transactions.Pull request to follow.Original post to mailing list:--I have written a consumer-only component that combines aggregation logicwith transacted JMS sessions that I would like to contribute. Thecomponentvastly speeds up message consumption and aggregation without message losson failure when compared with using a regular JMS component andaggregator.The problem that it solves is that when you want to aggregate a set ofmessages from JMS and avoid message loss, you typically reach for aJdbcAggregationRepository. This in turn fetches and writes progressivelylarger blobs from the database on receipt of each message, slowing downlinearly in relation to to the number of messages consumed - i.e. itperforms progressively worse the larger the batch.Old way:from("jms:myQueue")     .transacted()     .aggregate(constant(true), myAggStrategy)         .aggregationRepository(jdbcAggregationRepository)         .completionSize(100)         .completionTimeout(500)This also suffers from a problem that message loss is still possiblebetween the message broker and the database that stores the aggregatedmessage (unless you use XA transactions....).The component that I have developed starts a JMS session, and receivesmessages synchronously until it meets a completion size, or until acompletion timeout is met, each time calling an AggregationStrategy. Onlywhen the completion conditions have been matched does it emit theaggregated message.The component will commit the batch transaction if the Exchange isprocessed successfully, or roll the entire thing back on exception - soall of the original messages will end up back on the queue for re-processing.In the event of failure of the Camel process, the messages remain on thebroker for re-dispatch.So in terms of "where is my data stored?", the answer is it remains onthebroker until the batch is successfully processed.
CAMEL-8972 Classloader leak reported in Apache tomcat Wonder if we can try to fix this. When deploying a Camel WAR in Tomcat and stopping Tomcat it repors{code}15-Jul-2015 08:44:42.598 SEVERE [localhost-startStop-1] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [/myweb] created a ThreadLocal with key of type [com.sun.xml.bind.v2.ClassFactory$1] (value [com.sun.xml.bind.v2.ClassFactory$1@2bd27391]) and a value of type [java.util.WeakHashMap] (value [{class org.apache.camel.spring.CamelContextFactoryBean=java.lang.ref.WeakReference@5a14b11, class javax.xml.bind.annotation.adapters.CollapsedStringAdapter=java.lang.ref.WeakReference@20474bfa, class org.apache.camel.model.SetBodyDefinition=java.lang.ref.WeakReference@28cd1aa4, class org.apache.camel.model.language.SimpleExpression=java.lang.ref.WeakReference@319019e9, class org.apache.camel.model.WhenDefinition=java.lang.ref.WeakReference@6b95296a, class org.apache.camel.model.RouteDefinition=java.lang.ref.WeakReference@dd22554, class org.apache.camel.model.ToDefinition=java.lang.ref.WeakReference@5f90b4e2, class org.apache.camel.model.FromDefinition=java.lang.ref.WeakReference@15539272, class org.apache.camel.model.ChoiceDefinition=java.lang.ref.WeakReference@21b3854e, class org.apache.camel.model.OtherwiseDefinition=java.lang.ref.WeakReference@10f4d52b, class org.apache.camel.model.language.HeaderExpression=java.lang.ref.WeakReference@39d702bf, class org.apache.camel.model.TransformDefinition=java.lang.ref.WeakReference@52f56743, class org.apache.camel.model.language.ConstantExpression=java.lang.ref.WeakReference@6d4e8a41}]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.{code} Improvement Classloader leak reported in Apache tomcat Wonder if we can try to fix this. When deploying a Camel WAR in Tomcat and stopping Tomcat it repors{code}15-Jul-2015 08:44:42.598 SEVERE [localhost-startStop-1] org.apache.catalina.loader.WebappClassLoader.checkThreadLocalMapForLeaks The web application [/myweb] created a ThreadLocal with key of type [com.sun.xml.bind.v2.ClassFactory$1] (value [com.sun.xml.bind.v2.ClassFactory$1@2bd27391]) and a value of type [java.util.WeakHashMap] (value [{class org.apache.camel.spring.CamelContextFactoryBean=java.lang.ref.WeakReference@5a14b11, class javax.xml.bind.annotation.adapters.CollapsedStringAdapter=java.lang.ref.WeakReference@20474bfa, class org.apache.camel.model.SetBodyDefinition=java.lang.ref.WeakReference@28cd1aa4, class org.apache.camel.model.language.SimpleExpression=java.lang.ref.WeakReference@319019e9, class org.apache.camel.model.WhenDefinition=java.lang.ref.WeakReference@6b95296a, class org.apache.camel.model.RouteDefinition=java.lang.ref.WeakReference@dd22554, class org.apache.camel.model.ToDefinition=java.lang.ref.WeakReference@5f90b4e2, class org.apache.camel.model.FromDefinition=java.lang.ref.WeakReference@15539272, class org.apache.camel.model.ChoiceDefinition=java.lang.ref.WeakReference@21b3854e, class org.apache.camel.model.OtherwiseDefinition=java.lang.ref.WeakReference@10f4d52b, class org.apache.camel.model.language.HeaderExpression=java.lang.ref.WeakReference@39d702bf, class org.apache.camel.model.TransformDefinition=java.lang.ref.WeakReference@52f56743, class org.apache.camel.model.language.ConstantExpression=java.lang.ref.WeakReference@6d4e8a41}]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.{code}
CAMEL-8970 File consumer - Add option to turn on/off whether to delete orphaned marker lock files These files are deleted by default. You may want to not do that if you have multiple consumers compete for files in the same shared directory. Then starting up new consumers wont delete any in-flight marker lock files. Improvement File consumer - Add option to turn on/off whether to delete orphaned marker lock files These files are deleted by default. You may want to not do that if you have multiple consumers compete for files in the same shared directory. Then starting up new consumers wont delete any in-flight marker lock files.
CAMEL-8968 Broken Link in Camel-OAuth-Tutorial On the camel OAuth-Tutorial at URL "http://camel.apache.org/tutorial-oauth.html" in the "Overview" section at the top there is a link to "http://gauthcloud.appspot.com/oauth/calendar" which results in a 404. Task Broken Link in Camel-OAuth-Tutorial On the camel OAuth-Tutorial at URL "http://camel.apache.org/tutorial-oauth.html" in the "Overview" section at the top there is a link to "http://gauthcloud.appspot.com/oauth/calendar" which results in a 404.
CAMEL-8966 Add a dynamic to that is simpler to use than recipient list To do dynamic to then see this FAQhttp://camel.apache.org/how-to-use-a-dynamic-uri-in-to.htmlI think we should consider a dynamic to variation, or make to dynamic out of the box?For example to send a message to a dynamic computed uri with a header that has a stock symbol name:{code}<toD uri="jms:queue:stock-${header.stock}"/>{code}Notice the toD for to dynamic.It should be as simple so its a one-liner like today. If you want a bit more elaborate then use recipient list. Also the language it uses is simple only.We could also ponder about making that defailt for <to> to use simple language. However a few components like file uses simple language in its parameters. So we would need to tell simple to be lenient and keep tokens it cannot parse at this time, so you can do: {code}<to uri="file:inbox?fileName=backup-${file:name}"/>{code}So parsing {code}${file:name}{code} don't barf Improvement Add a dynamic to that is simpler to use than recipient list To do dynamic to then see this FAQhttp://camel.apache.org/how-to-use-a-dynamic-uri-in-to.htmlI think we should consider a dynamic to variation, or make to dynamic out of the box?For example to send a message to a dynamic computed uri with a header that has a stock symbol name:{code}<toD uri="jms:queue:stock-${header.stock}"/>{code}Notice the toD for to dynamic.It should be as simple so its a one-liner like today. If you want a bit more elaborate then use recipient list. Also the language it uses is simple only.We could also ponder about making that defailt for <to> to use simple language. However a few components like file uses simple language in its parameters. So we would need to tell simple to be lenient and keep tokens it cannot parse at this time, so you can do: {code}<to uri="file:inbox?fileName=backup-${file:name}"/>{code}So parsing {code}${file:name}{code} don't barf
CAMEL-8965 Wire Tap EIP - Support dynamic uris Just like enrich/pollEnrich now support dynamic uris from an expression, we could do the same fore wireTap. Today it uses a static endpoint.So in the future you can do{code}<wireTap>  <simple>jms:queue:copy-${customer}</simple></wireTap>{code} Improvement Wire Tap EIP - Support dynamic uris Just like enrich/pollEnrich now support dynamic uris from an expression, we could do the same fore wireTap. Today it uses a static endpoint.So in the future you can do{code}<wireTap>  <simple>jms:queue:copy-${customer}</simple></wireTap>{code}
CAMEL-8961 Update Camel-Docker to support docker-java 1.4.0 Update the camel-docker component to support docker-java library version 1.4.0Changes from previous 1.3.x:{quote}* Removed deprecated start options* Add Domainname attribute on create command* Added ReadonlyRootfs option* Labels are array of Strings* Add docker stats support{quote} Improvement Update Camel-Docker to support docker-java 1.4.0 Update the camel-docker component to support docker-java library version 1.4.0Changes from previous 1.3.x:{quote}* Removed deprecated start options* Add Domainname attribute on create command* Added ReadonlyRootfs option* Labels are array of Strings* Add docker stats support{quote}
CAMEL-8960 direct component - Should defer failing if no active consumer until camel context is started So you can define routes and link them with direct in any kind of order and Camel will not care.See nabblehttp://camel.465427.n5.nabble.com/Dynamic-calculation-of-route-startupOrder-through-dependencies-tp5769071.html Improvement direct component - Should defer failing if no active consumer until camel context is started So you can define routes and link them with direct in any kind of order and Camel will not care.See nabblehttp://camel.465427.n5.nabble.com/Dynamic-calculation-of-route-startupOrder-through-dependencies-tp5769071.html
CAMEL-8959 Remove old code from camel-cxf no longer needed due the CXF 3.0+ upgrade See nabblehttp://camel.465427.n5.nabble.com/Upgrade-to-CXF-3-1-x-tp5769010.html Task Remove old code from camel-cxf no longer needed due the CXF 3.0+ upgrade See nabblehttp://camel.465427.n5.nabble.com/Upgrade-to-CXF-3-1-x-tp5769010.html
CAMEL-8958 Add push/pop to the DSL so people can easily preserve and get back a message as-is We may ponder about some good naming for an EIP that remembers an Exchange and then allow to restore that Exchange at a later point.We could have push/pop as a stack fashion. Or use some kind of naming, push(foo) and then pop(foo). Or some better naming.People today have stored the message body as an exchange body and then restored that later. But this may be simpler.For pop we could allow an optional aggregation strategy so people can merge the current exchange with the pop in any way they want. New Feature Add push/pop to the DSL so people can easily preserve and get back a message as-is We may ponder about some good naming for an EIP that remembers an Exchange and then allow to restore that Exchange at a later point.We could have push/pop as a stack fashion. Or use some kind of naming, push(foo) and then pop(foo). Or some better naming.People today have stored the message body as an exchange body and then restored that later. But this may be simpler.For pop we could allow an optional aggregation strategy so people can merge the current exchange with the pop in any way they want.
CAMEL-8953 Update camel-cdi headers and Karaf feature to be (mostly) OSGI ready Camel-cdi is missing some 'Require-capability' provided by pax-cdi (I think).I'll send a PR that correct this (and also enabling the camel-cdi karaf feature) Improvement Update camel-cdi headers and Karaf feature to be (mostly) OSGI ready Camel-cdi is missing some 'Require-capability' provided by pax-cdi (I think).I'll send a PR that correct this (and also enabling the camel-cdi karaf feature)
CAMEL-8952 Expression or predicates - allow to refer to external script on file/classpath We should allow users to just type a file or classpath name as the value and Camel will load the resource from that. For example{code}    <route>      <from uri="direct:start"/>      <script>        <simple>resource:classpath:org/apache/camel/spring/processor/mysimplescript.txt</simple>      </script>      <to uri="mock:result"/>    </route>{code}You may want to use a more powerful language like groovy. New Feature Expression or predicates - allow to refer to external script on file/classpath We should allow users to just type a file or classpath name as the value and Camel will load the resource from that. For example{code}    <route>      <from uri="direct:start"/>      <script>        <simple>resource:classpath:org/apache/camel/spring/processor/mysimplescript.txt</simple>      </script>      <to uri="mock:result"/>    </route>{code}You may want to use a more powerful language like groovy.
CAMEL-8946 Original SSLHandshakeException was overridden by Camel Netty Http producer I am having difficulties to troubleshoot some of the SSL failures when my application attempts to connect to back ends. I am not able to understand by looking at the logs what is making the connection to fail.When inspecting the behavior of 'camel-netty-http' for a particular use case where no trusted certificates are available, I realize that Netty is throwing an SSLHandshakeException, but then it gets lost and a ClosedChannelExcetpion is thrown back instead.While DEBUG and WARN level messages give indication about the real source of the problem, the final ERROR level message looses the error context. This is problematic when I run the system in ERROR level, and when I see failures I can't determine the reasons.The sequence of logs is as follows:1) first a DEBUG trace:DEBUG Closing channel as an exception was thrown from Nettyjavax.net.ssl.SSLHandshakeException: General SSLEngine problem... Caused by: javax.net.ssl.SSLHandshakeException: General SSLEngine problem... Caused by: sun.security.validator.ValidatorException: No trusted certificate found2) then a WARN trace:WARN  HttpServerChannelHandler is not found as attachment to handle exception, send 404 back to the client.javax.net.ssl.SSLException: Received fatal alert: certificate_unknown3) and an ERROR trace:ERROR Failed delivery for...... java.nio.channels.ClosedChannelException	at org.jboss.netty.handler.ssl.SslHandler$7.run(SslHandler.java:1766)I have made a simple fix on NettyProducer.java class since NettyHttpProducer class is inherited from it.I'll also attach a junit testorg/apache/camel/component/netty/http/NettyHttpSSLHandshakeErrorTest.javathat reproduces the situation as well as a patch (patch.txt) to this JIRA. Note, the junit test requires some keystore files so you will need to copy over following four files:camel-cxf/src/test/resources/wssecurity/keystore/client-keystore.jkscamel-cxf/src/test/resources/wssecurity/keystore/client-truststore.jkscamel-cxf/src/test/resources/wssecurity/keystore/server-keystore.jkscamel-cxf/src/test/resources/wssecurity/keystore/server-truststore.jksover to camel-netty-http/src/test/resources/jsse/ folder in order to get the junit test to work. Improvement Original SSLHandshakeException was overridden by Camel Netty Http producer I am having difficulties to troubleshoot some of the SSL failures when my application attempts to connect to back ends. I am not able to understand by looking at the logs what is making the connection to fail.When inspecting the behavior of 'camel-netty-http' for a particular use case where no trusted certificates are available, I realize that Netty is throwing an SSLHandshakeException, but then it gets lost and a ClosedChannelExcetpion is thrown back instead.While DEBUG and WARN level messages give indication about the real source of the problem, the final ERROR level message looses the error context. This is problematic when I run the system in ERROR level, and when I see failures I can't determine the reasons.The sequence of logs is as follows:1) first a DEBUG trace:DEBUG Closing channel as an exception was thrown from Nettyjavax.net.ssl.SSLHandshakeException: General SSLEngine problem... Caused by: javax.net.ssl.SSLHandshakeException: General SSLEngine problem... Caused by: sun.security.validator.ValidatorException: No trusted certificate found2) then a WARN trace:WARN  HttpServerChannelHandler is not found as attachment to handle exception, send 404 back to the client.javax.net.ssl.SSLException: Received fatal alert: certificate_unknown3) and an ERROR trace:ERROR Failed delivery for...... java.nio.channels.ClosedChannelException	at org.jboss.netty.handler.ssl.SslHandler$7.run(SslHandler.java:1766)I have made a simple fix on NettyProducer.java class since NettyHttpProducer class is inherited from it.I'll also attach a junit testorg/apache/camel/component/netty/http/NettyHttpSSLHandshakeErrorTest.javathat reproduces the situation as well as a patch (patch.txt) to this JIRA. Note, the junit test requires some keystore files so you will need to copy over following four files:camel-cxf/src/test/resources/wssecurity/keystore/client-keystore.jkscamel-cxf/src/test/resources/wssecurity/keystore/client-truststore.jkscamel-cxf/src/test/resources/wssecurity/keystore/server-keystore.jkscamel-cxf/src/test/resources/wssecurity/keystore/server-truststore.jksover to camel-netty-http/src/test/resources/jsse/ folder in order to get the junit test to work.
CAMEL-8944 Routing engine - When UoW done let the route context be present so MDC logging is possible When the UoW is done then it happens last today. But we could make the route context advice be last which allows any logic performed as UoW done know what route this is part of, which makes MDC logging print route id, and what not.This complicates the logic a bit as we need to merge RouteContextAdvice into UnitOfWorkProcessorAdvice. Improvement Routing engine - When UoW done let the route context be present so MDC logging is possible When the UoW is done then it happens last today. But we could make the route context advice be last which allows any logic performed as UoW done know what route this is part of, which makes MDC logging print route id, and what not.This complicates the logic a bit as we need to merge RouteContextAdvice into UnitOfWorkProcessorAdvice.
CAMEL-8943 camel-jetty should use jetty9 as default We should use jetty 9 as the default jetty version Improvement camel-jetty should use jetty9 as default We should use jetty 9 as the default jetty version
CAMEL-8941 Restlet supports binary files only with media type application/octet-stream  The camel-restlet component populates Camel Exchange from Restlet Response via DefaultRestletBinding. However, it only properly reads binary contents if media type is "application/octet-stream". In all other cases it reads contents as String, even if contents are binary. For example, if the contents are of type "audio/wave" - a normal .wav file returned by a REST service - they would be read as a String, which results in an unplayable file.See code extract:{code}if (mediaType != null && mediaType.equals(MediaType.APPLICATION_OCTET_STREAM)) {    exchange.getOut().setBody(response.getEntity().getStream());} else if (response.getEntity() instanceof Representation) {    Representation representationDecoded = new DecodeRepresentation(response.getEntity());    exchange.getOut().setBody(representationDecoded.getText());} else {    // get content text by default    String text = response.getEntity().getText();    LOG.debug("Populate exchange from Restlet response: {}", text);    exchange.getOut().setBody(text);}{code} Improvement Restlet supports binary files only with media type application/octet-stream  The camel-restlet component populates Camel Exchange from Restlet Response via DefaultRestletBinding. However, it only properly reads binary contents if media type is "application/octet-stream". In all other cases it reads contents as String, even if contents are binary. For example, if the contents are of type "audio/wave" - a normal .wav file returned by a REST service - they would be read as a String, which results in an unplayable file.See code extract:{code}if (mediaType != null && mediaType.equals(MediaType.APPLICATION_OCTET_STREAM)) {    exchange.getOut().setBody(response.getEntity().getStream());} else if (response.getEntity() instanceof Representation) {    Representation representationDecoded = new DecodeRepresentation(response.getEntity());    exchange.getOut().setBody(representationDecoded.getText());} else {    // get content text by default    String text = response.getEntity().getText();    LOG.debug("Populate exchange from Restlet response: {}", text);    exchange.getOut().setBody(text);}{code}
CAMEL-8935 camel-spring-ws - Expose more options Some of the options is not exposed, and also the reference options should use default logic and use # syntax lookup. Improvement camel-spring-ws - Expose more options Some of the options is not exposed, and also the reference options should use default logic and use # syntax lookup.
CAMEL-8932 Cannot chain RouteDefinition.autoStartup Pull request at GitHub. Improvement Cannot chain RouteDefinition.autoStartup Pull request at GitHub.
CAMEL-8931 Add completionInterval for aggregator DSL I have no unit test for this. Pull request at GitHub. Improvement Add completionInterval for aggregator DSL I have no unit test for this. Pull request at GitHub.
CAMEL-8930 Add removeHeader and family to route DSL removeHeader, and removeHeaders is not available when using the DSL. Pull request will be made available at GitHub. Improvement Add removeHeader and family to route DSL removeHeader, and removeHeaders is not available when using the DSL. Pull request will be made available at GitHub.
CAMEL-8926 camel-spring - contextScan should allow to exclude non-singletons See nabblehttp://camel.465427.n5.nabble.com/Excluding-prototype-scoped-Component-route-builder-from-contextScan-tp5768755.htmlWe should add option so people can turn this on|off what they prefer. We should likely turn this off by default so only singletons is included, so we wont hit that problem from the nabble link. Improvement camel-spring - contextScan should allow to exclude non-singletons See nabblehttp://camel.465427.n5.nabble.com/Excluding-prototype-scoped-Component-route-builder-from-contextScan-tp5768755.htmlWe should add option so people can turn this on|off what they prefer. We should likely turn this off by default so only singletons is included, so we wont hit that problem from the nabble link.
CAMEL-8924 camel-maven-plugin - The goal that generates the list of components etc should only write a file if there is some changes. As then the timestamp of the file is updated, and the maven plugin is unfortunately triggering a full rebuild[INFO] --- camel-package-maven-plugin:2.16-SNAPSHOT:generate-languages-list (languages) @ camel-core ---[INFO] Generated /Users/davsclaus/workspace/camel/camel-core/target/generated/camel/languages/META-INF/services/org/apache/camel/language.properties containing 10 Camel languages: bean constant exchangeProperty file header ref simple tokenize xpath xtokenize[INFO][INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-core ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 126 resources[INFO] Copying 3 resources[INFO][INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ camel-core ---[INFO] Changes detected - recompiling the module! Improvement camel-maven-plugin - The goal that generates the list of components etc should only write a file if there is some changes. As then the timestamp of the file is updated, and the maven plugin is unfortunately triggering a full rebuild[INFO] --- camel-package-maven-plugin:2.16-SNAPSHOT:generate-languages-list (languages) @ camel-core ---[INFO] Generated /Users/davsclaus/workspace/camel/camel-core/target/generated/camel/languages/META-INF/services/org/apache/camel/language.properties containing 10 Camel languages: bean constant exchangeProperty file header ref simple tokenize xpath xtokenize[INFO][INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-core ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 126 resources[INFO] Copying 3 resources[INFO][INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ camel-core ---[INFO] Changes detected - recompiling the module!
CAMEL-8921 Cleanup a bit on the example-cdi and archetype There is a few EJB annotations and whatnot we do not need to use, and that can remove clutter in the pom.xml and sample code. Improvement Cleanup a bit on the example-cdi and archetype There is a few EJB annotations and whatnot we do not need to use, and that can remove clutter in the pom.xml and sample code.
CAMEL-8919 NettyUDPMulticastAsyncTest failing on Windows The NettyUDPMulticastAsyncTest fails with an java.nio.channels.ClosedChannelException even with a valid interface. The udp multicast functionality does not seem to work on windows although it works perfectly on OSX.Stacktrace-Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.026 sec <<< FAILURE! - in org.apache.camel.component.netty4.NettyUDPMulticastAsyncTesttestUDPInOnlyMulticastWithNettyConsumer(org.apache.camel.component.netty4.NettyUDPMulticastAsyncTest)  Time elapsed: 0.023 sec  <<< ERROR!java.nio.channels.ClosedChannelException: null        at sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:832)        at sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:894)        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:409)        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:382)        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:375)        at org.apache.camel.component.netty4.SingleUDPNettyServerBootstrapFactory.startServerBootstrap(SingleUDPNettyServerBootstrapFactory.java:171)        at org.apache.camel.component.netty4.SingleUDPNettyServerBootstrapFactory.doStart(SingleUDPNettyServerBootstrapFactory.java:92) Test NettyUDPMulticastAsyncTest failing on Windows The NettyUDPMulticastAsyncTest fails with an java.nio.channels.ClosedChannelException even with a valid interface. The udp multicast functionality does not seem to work on windows although it works perfectly on OSX.Stacktrace-Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.026 sec <<< FAILURE! - in org.apache.camel.component.netty4.NettyUDPMulticastAsyncTesttestUDPInOnlyMulticastWithNettyConsumer(org.apache.camel.component.netty4.NettyUDPMulticastAsyncTest)  Time elapsed: 0.023 sec  <<< ERROR!java.nio.channels.ClosedChannelException: null        at sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:832)        at sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:894)        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:409)        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:382)        at io.netty.channel.socket.nio.NioDatagramChannel.joinGroup(NioDatagramChannel.java:375)        at org.apache.camel.component.netty4.SingleUDPNettyServerBootstrapFactory.startServerBootstrap(SingleUDPNettyServerBootstrapFactory.java:171)        at org.apache.camel.component.netty4.SingleUDPNettyServerBootstrapFactory.doStart(SingleUDPNettyServerBootstrapFactory.java:92)
CAMEL-8915 rest-dsl - Add support for adding swagger docs to model classes See CAMEL-7936In the servlet-rest-tomcat example we should be able to document the User model class from the rest-dsl.Also maybe we should have a set of annotations that people can add to their model classes so they are done that automatic. But in the rest-dsl we should allow to do it as well.The goal would be for the example to have documentation about the id, name fields on the user etc. Improvement rest-dsl - Add support for adding swagger docs to model classes See CAMEL-7936In the servlet-rest-tomcat example we should be able to document the User model class from the rest-dsl.Also maybe we should have a set of annotations that people can add to their model classes so they are done that automatic. But in the rest-dsl we should allow to do it as well.The goal would be for the example to have documentation about the id, name fields on the user etc.
CAMEL-8907 Correct groupId for camel-zeromq should be org.apache-extras.camel-extra http://camel.apache.org/zeromq.html is incorrect about Maven dependencyCorrect groupId for camel-zeromq should be org.apache-extras.camel-extra Task Correct groupId for camel-zeromq should be org.apache-extras.camel-extra http://camel.apache.org/zeromq.html is incorrect about Maven dependencyCorrect groupId for camel-zeromq should be org.apache-extras.camel-extra
CAMEL-8906 Application hangs when Spring Boot Actuator shutdown hook is used After some investigation:* {{org.apache.camel.spring.boot.CamelSpringBootApplicationController}} creates {{org.apache.camel.main.MainSupport}} instance* {{MainSupport.waitUntilCompleted()}} will hang on {{latch.await()}}* To release this lock {{MainSupport.completed()}} has to be called. But this never happens* CamelSpringBootApplicationController should implement {{@PreDestroy}} callback and call {{mainSupport.completed()}}* Workaround:{code}  @Autowired  private CamelSpringBootApplicationController camelSpringBootApplicationController;  @PreDestroy  public void preDestroy() throws Exception {    final Field f = camelSpringBootApplicationController.getClass().getDeclaredField("mainSupport");    f.setAccessible(true);    MainSupport mainSupport = (MainSupport) f.get(camelSpringBootApplicationController);    mainSupport.completed();  }{code} Sub-task Application hangs when Spring Boot Actuator shutdown hook is used After some investigation:* {{org.apache.camel.spring.boot.CamelSpringBootApplicationController}} creates {{org.apache.camel.main.MainSupport}} instance* {{MainSupport.waitUntilCompleted()}} will hang on {{latch.await()}}* To release this lock {{MainSupport.completed()}} has to be called. But this never happens* CamelSpringBootApplicationController should implement {{@PreDestroy}} callback and call {{mainSupport.completed()}}* Workaround:{code}  @Autowired  private CamelSpringBootApplicationController camelSpringBootApplicationController;  @PreDestroy  public void preDestroy() throws Exception {    final Field f = camelSpringBootApplicationController.getClass().getDeclaredField("mainSupport");    f.setAccessible(true);    MainSupport mainSupport = (MainSupport) f.get(camelSpringBootApplicationController);    mainSupport.completed();  }{code}
CAMEL-8897 camel-example-servlet-rest-tomcat should include rest-dsl query params docs The rest-dsl now supports fine grained docs per query parameter and whatnot.We should add to this example so its included so ppl can see it in the swagger api. Improvement camel-example-servlet-rest-tomcat should include rest-dsl query params docs The rest-dsl now supports fine grained docs per query parameter and whatnot.We should add to this example so its included so ppl can see it in the swagger api.
CAMEL-8894 Support to reconnect the server in ClientMode. If the connection of the ClientMode Consumer is broken, current camel-netty and camel-netty4 component doesn't support to reconnect the server. We could introduce a reconnection mechanism to address this kind of issue. Improvement Support to reconnect the server in ClientMode. If the connection of the ClientMode Consumer is broken, current camel-netty and camel-netty4 component doesn't support to reconnect the server. We could introduce a reconnection mechanism to address this kind of issue.
CAMEL-8891 MVEL link on page http://camel.apache.org/mvel.html outdated The MVEL link on page http://camel.apache.org/mvel.html is outdated.Can you update link to where MVEL is documented? Improvement MVEL link on page http://camel.apache.org/mvel.html outdated The MVEL link on page http://camel.apache.org/mvel.html is outdated.Can you update link to where MVEL is documented?
CAMEL-8889 Please delete old releases from mirroring system To reduce the load on the ASF mirrors, projects are required to delete old releases [1]Please can you remove all non-current releases?i.e. 2.13.4This is documented as being no longer maintained, so should not be stored on the mirrors. It can remain on the download page, but download links should point to the archive server.Thanks![1] http://www.apache.org/dev/release.html#when-to-archive Task Please delete old releases from mirroring system To reduce the load on the ASF mirrors, projects are required to delete old releases [1]Please can you remove all non-current releases?i.e. 2.13.4This is documented as being no longer maintained, so should not be stored on the mirrors. It can remain on the download page, but download links should point to the archive server.Thanks![1] http://www.apache.org/dev/release.html#when-to-archive
CAMEL-8886 camel-cxf - 2 tests fails Tests run: 11, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.426 sec <<< FAILURE! - in org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTesttestMultipartPostWithParametersAndPayload(org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest)  Time elapsed: 0.057 sec  <<< FAILURE!java.lang.AssertionError: expected:<200> but was:<500>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest.testMultipartPostWithParametersAndPayload(CxfRsConsumerSimpleBindingTest.java:305)testMultipartPostWithoutParameters(org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest)  Time elapsed: 0.04 sec  <<< FAILURE!java.lang.AssertionError: expected:<200> but was:<500>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest.testMultipartPostWithoutParameters(CxfRsConsumerSimpleBindingTest.java:319)Running org.apache.camel.component.cxf.jms.CxfEndpointJMSConsumerTest Test camel-cxf - 2 tests fails Tests run: 11, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.426 sec <<< FAILURE! - in org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTesttestMultipartPostWithParametersAndPayload(org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest)  Time elapsed: 0.057 sec  <<< FAILURE!java.lang.AssertionError: expected:<200> but was:<500>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest.testMultipartPostWithParametersAndPayload(CxfRsConsumerSimpleBindingTest.java:305)testMultipartPostWithoutParameters(org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest)  Time elapsed: 0.04 sec  <<< FAILURE!java.lang.AssertionError: expected:<200> but was:<500>	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.failNotEquals(Assert.java:743)	at org.junit.Assert.assertEquals(Assert.java:118)	at org.junit.Assert.assertEquals(Assert.java:555)	at org.junit.Assert.assertEquals(Assert.java:542)	at org.apache.camel.component.cxf.jaxrs.simplebinding.CxfRsConsumerSimpleBindingTest.testMultipartPostWithoutParameters(CxfRsConsumerSimpleBindingTest.java:319)Running org.apache.camel.component.cxf.jms.CxfEndpointJMSConsumerTest
CAMEL-8880 Enable ability to expose Camel JMX service using IP address via API It would be very helpful to me if the Camel API (Spring and Java) had the ability to expose the JMX service either using the host name or using IP address. At present release no option is given and the host name is always used.This would mean a change to the logic in {{org.apache.camel.management.DefaultManagementAgent}} for determining JMX hostname in {code}protected void createMBeanServer(){code} method:{code}if (canAccessSystemProps) {   try {      hostName = InetAddress.getLocalHost().getHostName();   } catch (UnknownHostException uhe) {      LOG.info("Cannot determine localhost name. Using default: " +         DEFAULT_REGISTRY_PORT, uhe);      hostName = DEFAULT_HOST;   }} else {   hostName = DEFAULT_HOST;}{code}If the API passed down a request to use the IP then {{InetAddress.getLocalHost().getHostAddress()}} should be called rather than {{InetAddress.getLocalHost().getHostName()}}.The reason for wanting this is that my host has an underscore {{_}} character in its name.  A {{java.net.MalformedURLException: Bad URL path:}} exception is (correctly) thrown by {{javax.management.remote.JMXServiceURL}} when the looked up name is used to form the URL for the JMX service.  I know this is not a valid host name according to the various RFCs, but I have been unable to convince network administrators to change the host name.  If I used the IP instead then validation would pass and the JMX service would be correctly exposed.  I would find it very helpful if the Camel API could expose an option to use JMX with host IP address as well as for the host name.I would like to be able to configure something like this:{code:xml}<jmxAgent id="camelJmxAgent" createConnector="true"   registryPort="{{jmx.registry.port:1099}}" useIpAddress="true"  />{code}Thanks! New Feature Enable ability to expose Camel JMX service using IP address via API It would be very helpful to me if the Camel API (Spring and Java) had the ability to expose the JMX service either using the host name or using IP address. At present release no option is given and the host name is always used.This would mean a change to the logic in {{org.apache.camel.management.DefaultManagementAgent}} for determining JMX hostname in {code}protected void createMBeanServer(){code} method:{code}if (canAccessSystemProps) {   try {      hostName = InetAddress.getLocalHost().getHostName();   } catch (UnknownHostException uhe) {      LOG.info("Cannot determine localhost name. Using default: " +         DEFAULT_REGISTRY_PORT, uhe);      hostName = DEFAULT_HOST;   }} else {   hostName = DEFAULT_HOST;}{code}If the API passed down a request to use the IP then {{InetAddress.getLocalHost().getHostAddress()}} should be called rather than {{InetAddress.getLocalHost().getHostName()}}.The reason for wanting this is that my host has an underscore {{_}} character in its name.  A {{java.net.MalformedURLException: Bad URL path:}} exception is (correctly) thrown by {{javax.management.remote.JMXServiceURL}} when the looked up name is used to form the URL for the JMX service.  I know this is not a valid host name according to the various RFCs, but I have been unable to convince network administrators to change the host name.  If I used the IP instead then validation would pass and the JMX service would be correctly exposed.  I would find it very helpful if the Camel API could expose an option to use JMX with host IP address as well as for the host name.I would like to be able to configure something like this:{code:xml}<jmxAgent id="camelJmxAgent" createConnector="true"   registryPort="{{jmx.registry.port:1099}}" useIpAddress="true"  />{code}Thanks!
CAMEL-8879 Camel-sjms doesn't treat InOnly and InOut equally The Camel-sjms component doesn't treat messages being sent to the InOnlyProducer equally to the ones sent to the InOutProducer.As far as i can tell, the InOnlyProducer handles messages the correct way, by splitting up the ArrayList<BatchMessage<...>> into individual messages, which it then sends. The InOutProducer just calls "JmsMessageHelper.createMessage" with the ArrayList<BatchMessage<...>> payload.When used with WebSphere MQ, the InOutProducer causes an exception:JMSCC0083: An incorrect object of type 'org.apache.camel.component.sjms.BatchMessage' was provided. Improvement Camel-sjms doesn't treat InOnly and InOut equally The Camel-sjms component doesn't treat messages being sent to the InOnlyProducer equally to the ones sent to the InOutProducer.As far as i can tell, the InOnlyProducer handles messages the correct way, by splitting up the ArrayList<BatchMessage<...>> into individual messages, which it then sends. The InOutProducer just calls "JmsMessageHelper.createMessage" with the ArrayList<BatchMessage<...>> payload.When used with WebSphere MQ, the InOutProducer causes an exception:JMSCC0083: An incorrect object of type 'org.apache.camel.component.sjms.BatchMessage' was provided.
CAMEL-8876 Add an option for HttpProducer to ignore response body avoiding stream caching Sometime the user just want to check the response code and don't want to read the response, we can enable this kind of feature with the option "ignoreRequestBody". Improvement Add an option for HttpProducer to ignore response body avoiding stream caching Sometime the user just want to check the response code and don't want to read the response, we can enable this kind of feature with the option "ignoreRequestBody".
CAMEL-8873 Management api for ErrorHandler to expose stats about pending exchanges scheduled for redelivery See nabblehttp://camel.465427.n5.nabble.com/DeadLetterQueue-Access-the-object-before-shutDown-tp5768069p5768244.htmlWe could expose some more stats on ManagedErrorHandlerMBean to include details about number of pending exchanges for redelivery, and a tabular list with  the list of exchanges etc.Currently end users can get some details from the inflight repo but that is generic. You may want to pin down on exchanges pending for redelivery in the error handlers. New Feature Management api for ErrorHandler to expose stats about pending exchanges scheduled for redelivery See nabblehttp://camel.465427.n5.nabble.com/DeadLetterQueue-Access-the-object-before-shutDown-tp5768069p5768244.htmlWe could expose some more stats on ManagedErrorHandlerMBean to include details about number of pending exchanges for redelivery, and a tabular list with  the list of exchanges etc.Currently end users can get some details from the inflight repo but that is generic. You may want to pin down on exchanges pending for redelivery in the error handlers.
CAMEL-8870 Remove version from URL in Maven web archetype The archteype currently generates a project where the version is required to be entered when accessing the deployed application. Removing the requirement of specifying the version. Improvement Remove version from URL in Maven web archetype The archteype currently generates a project where the version is required to be entered when accessing the deployed application. Removing the requirement of specifying the version.
CAMEL-8865 Remove version from URL in Camel web examples Currently, several of the web based examples require the build version in the URL. To simplify the documentation and to align all web examples, all example projects should be invoked without requiring the use of a version number  Improvement Remove version from URL in Camel web examples Currently, several of the web based examples require the build version in the URL. To simplify the documentation and to align all web examples, all example projects should be invoked without requiring the use of a version number 
CAMEL-8861 Add a factory to support custom websocket sub-protocol Websocket supports sub-protocol definition (see https://tools.ietf.org/html/rfc6455#section-1.9). However, there is no way to provide your own websocket implementation to handle your own subprotocol. Adding a configurable websocket factory to the component could enable this functionnality. New Feature Add a factory to support custom websocket sub-protocol Websocket supports sub-protocol definition (see https://tools.ietf.org/html/rfc6455#section-1.9). However, there is no way to provide your own websocket implementation to handle your own subprotocol. Adding a configurable websocket factory to the component could enable this functionnality.
CAMEL-8857 Camel SCR should create OSGi service for CamelContext Camel SCR should publish the CamelContext to OSGi registry like camel-spring and camel-blueprint do. Otherwise eg. Karaf commands cannot work with camel-scr. Improvement Camel SCR should create OSGi service for CamelContext Camel SCR should publish the CamelContext to OSGi registry like camel-spring and camel-blueprint do. Otherwise eg. Karaf commands cannot work with camel-scr.
CAMEL-8854 Support setting sendServerVersion as parameter of the JettyHttpComponent To completely prevent information leakage from Jetty, you have to- change its default error page (already possible, but broken, see CAMEL-8179)- disable the default Server HTTP response header with JettyHttpEndpoint#setSendServerVersion(false).This option is also missing as a String-based endpoint parameter in JettyHttpComponent#createEndpoint(). Improvement Support setting sendServerVersion as parameter of the JettyHttpComponent To completely prevent information leakage from Jetty, you have to- change its default error page (already possible, but broken, see CAMEL-8179)- disable the default Server HTTP response header with JettyHttpEndpoint#setSendServerVersion(false).This option is also missing as a String-based endpoint parameter in JettyHttpComponent#createEndpoint().
CAMEL-8846 camel-archetype-web - Should use servlet as example This archetype creates a project that uses a timer -> stream out. As a war app it should really be the servlet etc instead. So lets use the tomcat-example as base for this quickstart. Improvement camel-archetype-web - Should use servlet as example This archetype creates a project that uses a timer -> stream out. As a war app it should really be the servlet etc instead. So lets use the tomcat-example as base for this quickstart.
CAMEL-8845 Property placeholder - service lookup should use underscore instead of dash When looking up the service then if the end user specify the service name in a nicer human readable format such as:service:foo-barthen the ENV variables areFOO_BAR_SERVICEeg all upper case, and dash is a underscore. Improvement Property placeholder - service lookup should use underscore instead of dash When looking up the service then if the end user specify the service name in a nicer human readable format such as:service:foo-barthen the ENV variables areFOO_BAR_SERVICEeg all upper case, and dash is a underscore.
CAMEL-8837 camel-archetype-cdi Maven archetype for creating a Camel CDI project New Feature camel-archetype-cdi Maven archetype for creating a Camel CDI project
CAMEL-8836 Remove the joda-time bundle camel-elasticsearch As elasticsearch already include the joda-time into its bundle, we don't need to install the jode-time bundle anymore in the camel-elasticsearch feature. Improvement Remove the joda-time bundle camel-elasticsearch As elasticsearch already include the joda-time into its bundle, we don't need to install the jode-time bundle anymore in the camel-elasticsearch feature.
CAMEL-8832 Add =~ operation as equals ignore case operation to simple language See nabblehttp://camel.465427.n5.nabble.com/Can-simple-be-made-to-compare-strings-in-a-case-insensitive-way-tp5767732.htmlI New Feature Add =~ operation as equals ignore case operation to simple language See nabblehttp://camel.465427.n5.nabble.com/Can-simple-be-made-to-compare-strings-in-a-case-insensitive-way-tp5767732.htmlI
CAMEL-8828 camel-ftp component does not support absolute path. - If a user uses absolute path in ftp component like{code}<route id="timerToLog1">      <from uri="file:///path/to/input"/>      <to uri="sftp://rider:secret@localhost:21000//absolute/path/to/dir?fileExist=Move&amp;moveExisting=${file:name}-${date:now:yyyyMMdd-HHmmssSSS}"/></route>{code}- User receives following error{code}org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: /absolute/path/to/dir/filename.ext to: absolute/path/to/dir/filename-20150602-103603722.ext    at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:397)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.SftpOperations.doMoveExistingFile(SftpOperations.java:909)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:811)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:784)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)[280:org.apache.camel.camel-core:2.12.0.redhat-610379]    at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)[280:org.apache.camel.camel-core:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[280:org.apache.camel.camel-core:2.12.0.redhat-610379]    at ...{code}- After discussion with camel experts, It is confirmed that only relative path are supported in camel-ftp components. As earlier there was support for absolute but it caused too much problems for some people with something working and not working. Also its not a good security model to allow absolute file access over FTP.- But this is not documented with http://camel.apache.org/ftp2.html. This would be helpful for users.- If people really want a ftp user to access some path outside the FTP folder, then use symlinks and so on.- *It is expected that document should cleary say that absolute path is not recommended when using camel-ftp component.* Improvement camel-ftp component does not support absolute path. - If a user uses absolute path in ftp component like{code}<route id="timerToLog1">      <from uri="file:///path/to/input"/>      <to uri="sftp://rider:secret@localhost:21000//absolute/path/to/dir?fileExist=Move&amp;moveExisting=${file:name}-${date:now:yyyyMMdd-HHmmssSSS}"/></route>{code}- User receives following error{code}org.apache.camel.component.file.GenericFileOperationFailedException: Cannot rename file from: /absolute/path/to/dir/filename.ext to: absolute/path/to/dir/filename-20150602-103603722.ext    at org.apache.camel.component.file.remote.SftpOperations.renameFile(SftpOperations.java:397)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.SftpOperations.doMoveExistingFile(SftpOperations.java:909)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.SftpOperations.doStoreFile(SftpOperations.java:811)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:784)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)[280:org.apache.camel.camel-core:2.12.0.redhat-610379]    at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)[280:org.apache.camel.camel-core:2.12.0.redhat-610379]    at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)[284:org.apache.camel.camel-ftp:2.12.0.redhat-610379]    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[280:org.apache.camel.camel-core:2.12.0.redhat-610379]    at ...{code}- After discussion with camel experts, It is confirmed that only relative path are supported in camel-ftp components. As earlier there was support for absolute but it caused too much problems for some people with something working and not working. Also its not a good security model to allow absolute file access over FTP.- But this is not documented with http://camel.apache.org/ftp2.html. This would be helpful for users.- If people really want a ftp user to access some path outside the FTP folder, then use symlinks and so on.- *It is expected that document should cleary say that absolute path is not recommended when using camel-ftp component.*
CAMEL-8827 Enable file component to accept expression for the noop option When using the file consumer it would be very useful for me to set the noop option dynamically using a camel expression.For example I would like to be able to write a Simple expression such as noop=${sys.someSystemProperty}This is already possible on other options on this component such as move and preMove and I would like it to work in the same way.Thanks in advance! New Feature Enable file component to accept expression for the noop option When using the file consumer it would be very useful for me to set the noop option dynamically using a camel expression.For example I would like to be able to write a Simple expression such as noop=${sys.someSystemProperty}This is already possible on other options on this component such as move and preMove and I would like it to work in the same way.Thanks in advance!
CAMEL-8826 Add timezone parameter to Cron Scheduler Route Policy The current CronScheduledRoutePolicy in Camel does not allow you to set a timezone offset. Improvement Add timezone parameter to Cron Scheduler Route Policy The current CronScheduledRoutePolicy in Camel does not allow you to set a timezone offset.
CAMEL-8824 Add startTimestamp to JMX attributes So we have the timestamp when the mbean was initially started such as when Camel itself started.There is a reset timestamp but that changes when you call reset.Also there us uptime but that is human readable format that goes into saying: 5 minutes and therefore loose precision.See nabblehttp://camel.465427.n5.nabble.com/How-to-react-when-there-is-a-fixed-period-of-inactivity-no-traffic-in-a-route-tp5767607.html Improvement Add startTimestamp to JMX attributes So we have the timestamp when the mbean was initially started such as when Camel itself started.There is a reset timestamp but that changes when you call reset.Also there us uptime but that is human readable format that goes into saying: 5 minutes and therefore loose precision.See nabblehttp://camel.465427.n5.nabble.com/How-to-react-when-there-is-a-fixed-period-of-inactivity-no-traffic-in-a-route-tp5767607.html
CAMEL-8822 New camel-slack component I've created a new component to work with Slack incoming web hooks (https://api.slack.com/incoming-webhooks). This is based on initial work I did at https://github.com/highlnd/camel-slack but decided to contribute it directly to the project. I'll create pull request rather than a patch if that's ok. Please let me know if a patch is better. New Feature New camel-slack component I've created a new component to work with Slack incoming web hooks (https://api.slack.com/incoming-webhooks). This is based on initial work I did at https://github.com/highlnd/camel-slack but decided to contribute it directly to the project. I'll create pull request rather than a patch if that's ok. Please let me know if a patch is better.
CAMEL-8821 Support to disable the stream caching in camel-servlet from the camel context Current camel-servlet doesn't support to disable the stream caching from the camel context, it just check the exchange property for it. Improvement Support to disable the stream caching in camel-servlet from the camel context Current camel-servlet doesn't support to disable the stream caching from the camel context, it just check the exchange property for it.
CAMEL-8820 Allow to do post logic when creating expression/predicate from routes Needed by CAMEL-8799When using languages / data formats etc which configures their properties from the DSL defined in camel-core, then we need a way of doing post configured logic to init the expression.Currently this is not so easy.Introducing a AfterPropertiesConfigured callback allows those components to implement that interface and do their needed logic. Improvement Allow to do post logic when creating expression/predicate from routes Needed by CAMEL-8799When using languages / data formats etc which configures their properties from the DSL defined in camel-core, then we need a way of doing post configured logic to init the expression.Currently this is not so easy.Introducing a AfterPropertiesConfigured callback allows those components to implement that interface and do their needed logic.
CAMEL-8819 Jetty Maven Plugin - 8.1.7 does not exist The new jetty 8.1.7 release do not include the maven plugin. So we need to use the older release for that ;(8.1.16.v20140903 [WARNING] The POM for org.eclipse.jetty:jetty-maven-plugin:jar:8.1.17.v20150415 is missing, no dependency information available[WARNING] Failed to retrieve plugin descriptor for org.eclipse.jetty:jetty-maven-plugin:8.1.17.v20150415: Plugin org.eclipse.jetty:jetty-maven-plugin:8.1.17.v20150415 or one of its dependencies could not be resolved: Failure to find org.eclipse.jetty:jetty-maven-plugin:jar:8.1.17.v20150415 in https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced Task Jetty Maven Plugin - 8.1.7 does not exist The new jetty 8.1.7 release do not include the maven plugin. So we need to use the older release for that ;(8.1.16.v20140903 [WARNING] The POM for org.eclipse.jetty:jetty-maven-plugin:jar:8.1.17.v20150415 is missing, no dependency information available[WARNING] Failed to retrieve plugin descriptor for org.eclipse.jetty:jetty-maven-plugin:8.1.17.v20150415: Plugin org.eclipse.jetty:jetty-maven-plugin:8.1.17.v20150415 or one of its dependencies could not be resolved: Failure to find org.eclipse.jetty:jetty-maven-plugin:jar:8.1.17.v20150415 in https://repo.maven.apache.org/maven2 was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced
CAMEL-8818 Set default for SO_TIMEOUT in camel-ftp The current default for the SO_TIMEOUT in camel-ftp is IMO not optimal.0 means that the camel-ftp component will wait forever if a connection gets lost during polling (e.g. the ftp server loses network connectivity and is restarted).The attached patch will change the default for the SO_TIMEOUT to 5 minutes. As this is an incompatible change it is probably better to apply this only to 2.16.0, not to earlier versions.This is somewhat a followup to CAMEL-8757. Improvement Set default for SO_TIMEOUT in camel-ftp The current default for the SO_TIMEOUT in camel-ftp is IMO not optimal.0 means that the camel-ftp component will wait forever if a connection gets lost during polling (e.g. the ftp server loses network connectivity and is restarted).The attached patch will change the default for the SO_TIMEOUT to 5 minutes. As this is an incompatible change it is probably better to apply this only to 2.16.0, not to earlier versions.This is somewhat a followup to CAMEL-8757.
CAMEL-8817 Expose additional geolocation parameters in standard search The current camel-twitter component only supports geography searches using the streaming API which only returns results that have latitude and longitude values.The standard search also supports geolocation queries and can return results that do not have latitude and longitude metadata but are geocoded by twitter and determined to be within a geolocation.It would be ideal if this API was also exposed.Patch and pull request to be provided shortly. New Feature Expose additional geolocation parameters in standard search The current camel-twitter component only supports geography searches using the streaming API which only returns results that have latitude and longitude values.The standard search also supports geolocation queries and can return results that do not have latitude and longitude metadata but are geocoded by twitter and determined to be within a geolocation.It would be ideal if this API was also exposed.Patch and pull request to be provided shortly.
CAMEL-8811 No data coding headers in deliverSM When I try to parse Deliver SM messages I don't see data encoding.I fix this for my purposes inorg/apache/camel/component/smpp/SmppBinding.javaby adding smppMessage.setHeader(SmppConstants.DATA_CODING, deliverSm.getDataCoding());in method public SmppMessage createSmppMessage(DeliverSm deliverSm) throws Exception { Improvement No data coding headers in deliverSM When I try to parse Deliver SM messages I don't see data encoding.I fix this for my purposes inorg/apache/camel/component/smpp/SmppBinding.javaby adding smppMessage.setHeader(SmppConstants.DATA_CODING, deliverSm.getDataCoding());in method public SmppMessage createSmppMessage(DeliverSm deliverSm) throws Exception {
CAMEL-8807 camel-ftp - Add option to turn off sendNoop as alive check There may be some FTP servers or scenarious where this seems to cause problems.See nabblehttp://camel.465427.n5.nabble.com/camel-ftp-sendNoOp-takes-15-minutes-tp5767210p5767547.html Improvement camel-ftp - Add option to turn off sendNoop as alive check There may be some FTP servers or scenarious where this seems to cause problems.See nabblehttp://camel.465427.n5.nabble.com/camel-ftp-sendNoOp-takes-15-minutes-tp5767210p5767547.html
CAMEL-8806 Links broken in camel-ftp docs The links mentioned in http://camel.apache.org/ftp.html ".... See the documentation of the Apache Commons FTP FTPClientConfig for possible options and more details.And as well for Apache Commons FTP FTPClient."are broken. Task Links broken in camel-ftp docs The links mentioned in http://camel.apache.org/ftp.html ".... See the documentation of the Apache Commons FTP FTPClientConfig for possible options and more details.And as well for Apache Commons FTP FTPClient."are broken.
CAMEL-8802 Upgrade to CXF 3.0.5 This test fails{code}Failed tests:  CxfRsConsumerSimpleBindingTest.testMultipartPostWithoutParameters:319->Assert.assertEquals:542->Assert.assertEquals:555->Assert.assertEquals:118->Assert.failNotEquals:743->Assert.fail:88 expected:<200> but was:<405>{code}But the others works. Wonder if you could take a look? Task Upgrade to CXF 3.0.5 This test fails{code}Failed tests:  CxfRsConsumerSimpleBindingTest.testMultipartPostWithoutParameters:319->Assert.assertEquals:542->Assert.assertEquals:555->Assert.assertEquals:118->Assert.failNotEquals:743->Assert.fail:88 expected:<200> but was:<405>{code}But the others works. Wonder if you could take a look?
CAMEL-8800 Upgrade kafka to 0.8.2.1 CAMEL-8621 upgraded kafka from 0.8.1.1 to 0.8.2.0.  The issue mentioned that 0.8.2.1 was available, but the bundle had not yet been created.  The bundle is available, and the upgrade to 0.8.2.1 should be made as soon as possible.  Version 0.8.2.0 had 1 Critical and 3 Blocker bugs that were [fixed by 0.8.2.1|https://archive.apache.org/dist/kafka/0.8.2.1/RELEASE_NOTES.html].  Those bugs can result in crashes and/or loss of data. Improvement Upgrade kafka to 0.8.2.1 CAMEL-8621 upgraded kafka from 0.8.1.1 to 0.8.2.0.  The issue mentioned that 0.8.2.1 was available, but the bundle had not yet been created.  The bundle is available, and the upgrade to 0.8.2.1 should be made as soon as possible.  Version 0.8.2.0 had 1 Critical and 3 Blocker bugs that were [fixed by 0.8.2.1|https://archive.apache.org/dist/kafka/0.8.2.1/RELEASE_NOTES.html].  Those bugs can result in crashes and/or loss of data.
CAMEL-8799 Make it possible for JsonPath to suppress PathNotFoundException It should be possible to suppress exceptions when evaluating JsonPath's.See http://camel.465427.n5.nabble.com/How-to-suppress-exceptions-from-Jsonpath-expressions-td5767384.htmlThere are 2 options1.  Make it the default behaviour, so a null value will be returned instead of throwing an PathNotFoundException when evaluating json path expressions and the path is not found. I have a working patch for that here https://github.com/pax95/camel/commit/e09bd00d9199c88787f0acb0d2ea8c86e6a1bba9 that I can do a PR on.2. Make it configurable on the JsonPath component so you can enable/disable it on demand. This would also make it possible to expose other options from com.jayway.jsonpath.Option if they make sense. More work is require to make it available as both xml and java dsl.Currently I'm at bit overloaded to do a PR on 2 if that is the preferred option, so if any want to take over It will be fine.If option 1 is ok I'll create a PR. Improvement Make it possible for JsonPath to suppress PathNotFoundException It should be possible to suppress exceptions when evaluating JsonPath's.See http://camel.465427.n5.nabble.com/How-to-suppress-exceptions-from-Jsonpath-expressions-td5767384.htmlThere are 2 options1.  Make it the default behaviour, so a null value will be returned instead of throwing an PathNotFoundException when evaluating json path expressions and the path is not found. I have a working patch for that here https://github.com/pax95/camel/commit/e09bd00d9199c88787f0acb0d2ea8c86e6a1bba9 that I can do a PR on.2. Make it configurable on the JsonPath component so you can enable/disable it on demand. This would also make it possible to expose other options from com.jayway.jsonpath.Option if they make sense. More work is require to make it available as both xml and java dsl.Currently I'm at bit overloaded to do a PR on 2 if that is the preferred option, so if any want to take over It will be fine.If option 1 is ok I'll create a PR.
CAMEL-8795 camel-kafka - Support for Scala 2.11 Camel-kafka uses a kafka built with scala 2.10, so it becomes incompatible when used in a scala 2.11 project in runtime:{code}A needed class was not found. This could be due to an error in your runpath. Missing class: scala/collection/GenTraversableOnce$classjava.lang.NoClassDefFoundError: scala/collection/GenTraversableOnce$class{code}It seems to be solved excluding the kafka 2.10 dependency and adding the 2.11 version but I am afraid it could bring up new problems. Thanks, Álvaro Improvement camel-kafka - Support for Scala 2.11 Camel-kafka uses a kafka built with scala 2.10, so it becomes incompatible when used in a scala 2.11 project in runtime:{code}A needed class was not found. This could be due to an error in your runpath. Missing class: scala/collection/GenTraversableOnce$classjava.lang.NoClassDefFoundError: scala/collection/GenTraversableOnce$class{code}It seems to be solved excluding the kafka 2.10 dependency and adding the 2.11 version but I am afraid it could bring up new problems. Thanks, Alvaro
CAMEL-8794 Support to set username and password in CamelSwaggerServlet  As CamelSwaggerServlet need to access the JMX to dump the RestDefinition, and the JMX server could be guarded by the container. We need to support to set the username and password for accessing the JMX service. Improvement Support to set username and password in CamelSwaggerServlet  As CamelSwaggerServlet need to access the JMX to dump the RestDefinition, and the JMX server could be guarded by the container. We need to support to set the username and password for accessing the JMX service.
CAMEL-8790 Kafka producer hard coded to use Strings Kafka natively supports two encoders for messages:# {{kafka.serializer.DefaultEncoder}} - encodes as byte arrays# {{kafka.serializer.StringEncoder}} - encodes as StringsCamel-kafka exposes settings to select the encoder (({{serializerClass}} and {{keySerializerClass}}), but the {{org.apache.camel.component.kafka.KafkaProducer}} class hard-codes String for both the key and value types.  This results in a {{ClassCastException}} when using the {{DefaultDecoder}}.The attached patch fixes this as follows (conforming to kafka itself):* If no {{serializerClass}} option is specified, the {{DefaultDecoder}} is used.* If no {{keySerializerClass}} option is specified, the same encoder as {{serializerClass}} is usedThis fix shouldn't break any existing code, as there was not previously a default setting (i.e., {{StringEncoder}} always had to be specified).I created the patch against master, but it should backport easily to 2.15.x and 2.14.x. Improvement Kafka producer hard coded to use Strings Kafka natively supports two encoders for messages:# {{kafka.serializer.DefaultEncoder}} - encodes as byte arrays# {{kafka.serializer.StringEncoder}} - encodes as StringsCamel-kafka exposes settings to select the encoder (({{serializerClass}} and {{keySerializerClass}}), but the {{org.apache.camel.component.kafka.KafkaProducer}} class hard-codes String for both the key and value types.  This results in a {{ClassCastException}} when using the {{DefaultDecoder}}.The attached patch fixes this as follows (conforming to kafka itself):* If no {{serializerClass}} option is specified, the {{DefaultDecoder}} is used.* If no {{keySerializerClass}} option is specified, the same encoder as {{serializerClass}} is usedThis fix shouldn't break any existing code, as there was not previously a default setting (i.e., {{StringEncoder}} always had to be specified).I created the patch against master, but it should backport easily to 2.15.x and 2.14.x.
CAMEL-8779 camel-mail - Message copy can be optimized if mapMessage=false See nabblehttp://camel.465427.n5.nabble.com/Camel-Mail-mapMailMessage-flag-ignored-tp5766767.htmlWhen this flag is off, we do not need to create body/headers as we can just copy the raw message as-is. Improvement camel-mail - Message copy can be optimized if mapMessage=false See nabblehttp://camel.465427.n5.nabble.com/Camel-Mail-mapMailMessage-flag-ignored-tp5766767.htmlWhen this flag is off, we do not need to create body/headers as we can just copy the raw message as-is.
CAMEL-8777 Calendar component - support for Google Service Accounts I have am currently testing code for this feature which I intend to submit.  I don't see the Google Calendar component as a listed component.Did I miss it? New Feature Calendar component - support for Google Service Accounts I have am currently testing code for this feature which I intend to submit.  I don't see the Google Calendar component as a listed component.Did I miss it?
CAMEL-8775 Dozer Endpoint Documentation I was trying to set up a dozer endpoint as described on this page http://camel.apache.org/dozer.html but I was getting an error message:"No component found with scheme: dozer"I was using camel-dozer 2.14.Endpoint support for dozer was added in 2.15. Can this be reflected on the http://camel.apache.org/dozer.html page? Improvement Dozer Endpoint Documentation I was trying to set up a dozer endpoint as described on this page http://camel.apache.org/dozer.html but I was getting an error message:"No component found with scheme: dozer"I was using camel-dozer 2.14.Endpoint support for dozer was added in 2.15. Can this be reflected on the http://camel.apache.org/dozer.html page?
CAMEL-8773 In the Scheduler wiki page, the schedulerProperties.xxx option should be scheduler.xxx In the Scheduler page at http://camel.apache.org/scheduler.html, in the {{Options}} table, there is the {{schedulerProperties.xxx}} in order to specify custom properties on Quartz2 or Spring scheduler.Shouldn't {{schedulerProperties.xxx}} be in fact {{scheduler.xxx}} ?If you agree, I can update the wiki.Thanks,Stéphane Improvement In the Scheduler wiki page, the schedulerProperties.xxx option should be scheduler.xxx In the Scheduler page at http://camel.apache.org/scheduler.html, in the {{Options}} table, there is the {{schedulerProperties.xxx}} in order to specify custom properties on Quartz2 or Spring scheduler.Shouldn't {{schedulerProperties.xxx}} be in fact {{scheduler.xxx}} ?If you agree, I can update the wiki.Thanks,Stephane
CAMEL-8763 Default error handler should use default redelivery delay of 1 sec The delay is currently set to 0, which was not as intended, as it should be 1 sec just like for DLC etc. Improvement Default error handler should use default redelivery delay of 1 sec The delay is currently set to 0, which was not as intended, as it should be 1 sec just like for DLC etc.
CAMEL-8762 Support for adding multiple services with same interface in CamelBlueprintTestSupport The CamelBlueprintTestSupport provides the ability to specify services that may not be available in the unit testing environment. However, the current addServicesOnStartup method only allows for a single service interface to be specified.Additional methods should be added to enable the ability to specify multiple services with the same interface providing their own service propertiesCommon use cases:* Datasources* Camel components New Feature Support for adding multiple services with same interface in CamelBlueprintTestSupport The CamelBlueprintTestSupport provides the ability to specify services that may not be available in the unit testing environment. However, the current addServicesOnStartup method only allows for a single service interface to be specified.Additional methods should be added to enable the ability to specify multiple services with the same interface providing their own service propertiesCommon use cases:* Datasources* Camel components
CAMEL-8761 Idempotent Consumer EIP - Allow to commit when EIP scope ends This EIP will add/confirm the key using exchange on completion which happens when the entire routing is done.But there can be use cases where you want the EIP to do this sooner, eg when the EIP scope ends.For example outside the scope of the EIP and if some error happens then the on completion will rollback, and then a redelivery can happen. And if so then the idempotent block may execute again, despite that block was success before.If users do not want this to happen then we need a new option they can turn on to do the on completion when the eip ends, eg in its callback and not as on completion.What the name of this option should be is ... hard ;) Improvement Idempotent Consumer EIP - Allow to commit when EIP scope ends This EIP will add/confirm the key using exchange on completion which happens when the entire routing is done.But there can be use cases where you want the EIP to do this sooner, eg when the EIP scope ends.For example outside the scope of the EIP and if some error happens then the on completion will rollback, and then a redelivery can happen. And if so then the idempotent block may execute again, despite that block was success before.If users do not want this to happen then we need a new option they can turn on to do the on completion when the eip ends, eg in its callback and not as on completion.What the name of this option should be is ... hard ;)
CAMEL-8760 Upgrade Netty 3 We should upgrade Netty 3.x to their new releases.http://netty.io/news/2015/05/08/3-9-8-Final-and-3.htmlThey are not synched in mvn central yet Task Upgrade Netty 3 We should upgrade Netty 3.x to their new releases.http://netty.io/news/2015/05/08/3-9-8-Final-and-3.htmlThey are not synched in mvn central yet
CAMEL-8759 Try enabling google error prone source code detector Seehttp://errorprone.info/Its a project to scan and catch common java mistakes and turn them into javac compiler errors. Wonder if we should try this on the Camel source code - it may find some mistakes.You install it in the mvn http://errorprone.info/installation Task Try enabling google error prone source code detector Seehttp://errorprone.info/Its a project to scan and catch common java mistakes and turn them into javac compiler errors. Wonder if we should try this on the Camel source code - it may find some mistakes.You install it in the mvn http://errorprone.info/installation
CAMEL-8755 No Message History on deadLetterChannel If the default errorHandler is a deadLetterChannel, no MessageHistory will be displayed by an Error.This work:public class defaultRoutes extends RouteBuilder {	public void configure() throws Exception {		errorHandler(defaultErrorHandler()			.logExhausted(true)			.logExhaustedMessageHistory(true));This not:public class defaultRoutes extends RouteBuilder {	public void configure() throws Exception {		errorHandler(deadLetterChannel("direct:deadLetter")			.logExhausted(true)			.logExhaustedMessageHistory(true)); Improvement No Message History on deadLetterChannel If the default errorHandler is a deadLetterChannel, no MessageHistory will be displayed by an Error.This work:public class defaultRoutes extends RouteBuilder {	public void configure() throws Exception {		errorHandler(defaultErrorHandler()			.logExhausted(true)			.logExhaustedMessageHistory(true));This not:public class defaultRoutes extends RouteBuilder {	public void configure() throws Exception {		errorHandler(deadLetterChannel("direct:deadLetter")			.logExhausted(true)			.logExhaustedMessageHistory(true));
CAMEL-8754 camel-kafka prevents sending anything other than String Due to incorrect camel-kafka Producer implementation, it prevents sending anything other than String. See https://github.com/apache/camel/blob/a7dfc45097a610dca1a39c86f481182efc20e152/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java#L72{code}String msg = exchange.getIn().getBody(String.class);{code}Apparently it should be something like{code}Object msg = exchange.getIn().getBody();{code} Improvement camel-kafka prevents sending anything other than String Due to incorrect camel-kafka Producer implementation, it prevents sending anything other than String. See https://github.com/apache/camel/blob/a7dfc45097a610dca1a39c86f481182efc20e152/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaProducer.java#L72{code}String msg = exchange.getIn().getBody(String.class);{code}Apparently it should be something like{code}Object msg = exchange.getIn().getBody();{code}
CAMEL-8753 camel-twitter - Allow to configure http proxy on component level So you can configure this once for all your twitter endpoints. Improvement camel-twitter - Allow to configure http proxy on component level So you can configure this once for all your twitter endpoints.
CAMEL-8751 Cannot connect to S3 in Frankfurt with aws-s3. Authorization method not allowed. Using aws-s3 , trying to connect to amazon central-europe, amazon responds with: "The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256." . Aws-S3 uses an old version of aws-java-sdk.FIX: Update version to 1.9.33 and it allows conneciton Task Cannot connect to S3 in Frankfurt with aws-s3. Authorization method not allowed. Using aws-s3 , trying to connect to amazon central-europe, amazon responds with: "The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256." . Aws-S3 uses an old version of aws-java-sdk.FIX: Update version to 1.9.33 and it allows conneciton
CAMEL-8749 JMS message always acknowledged even with CLIENT_ACKNOWLEDGE On a JMS message consumer route, we support{code}jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE{code}The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()In a Processor we can now call Message.acknowledge() or  Session.recover(). However, even if the route (i.e. the client) does not call Message.acknowledge() it is called automatically in {{org.springframework.jms.listener.AbstractMessageListenerContainer}}{code}	protected void commitIfNecessary(Session session, Message message) throws JMSException {		// Commit session or acknowledge message.		if (session.getTransacted()) {			// Commit necessary - but avoid commit call within a JTA transaction.			if (isSessionLocallyTransacted(session)) {				// Transacted session created by this container -> commit.				JmsUtils.commitIfNecessary(session);			}		}		else if (message != null && isClientAcknowledge(session)) {			message.acknowledge();		}	}{code}This would not be correct if the route is the JMS client. Redelivery can only be achieved in the context of one message invocationCrossRef: https://jira.spring.io/browse/SPR-12995 Wish JMS message always acknowledged even with CLIENT_ACKNOWLEDGE On a JMS message consumer route, we support{code}jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE{code}The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()In a Processor we can now call Message.acknowledge() or  Session.recover(). However, even if the route (i.e. the client) does not call Message.acknowledge() it is called automatically in {{org.springframework.jms.listener.AbstractMessageListenerContainer}}{code}	protected void commitIfNecessary(Session session, Message message) throws JMSException {		// Commit session or acknowledge message.		if (session.getTransacted()) {			// Commit necessary - but avoid commit call within a JTA transaction.			if (isSessionLocallyTransacted(session)) {				// Transacted session created by this container -> commit.				JmsUtils.commitIfNecessary(session);			}		}		else if (message != null && isClientAcknowledge(session)) {			message.acknowledge();		}	}{code}This would not be correct if the route is the JMS client. Redelivery can only be achieved in the context of one message invocationCrossRef: https://jira.spring.io/browse/SPR-12995
CAMEL-8740 DeadLetterChannel - Add SPI so custom components can prepare message for DLC When you use Camel's DLC as error queue, then when a message is moved to the DLQ, you may want to do some custom adjustment to the message before that happens.As an end user you have the onPrepare where you can do that.But for various Camel components then they may want to be able to hook in and be able to do some work.For example you may may want to configure camel-jms or activemq-camel to store the caused exception message and stacktrace as JMS headers so they are avalable on the JMS queue. Also for ActiveMQ we want to allow it to store the original destination property so AMQ broker knows which original JMS message the message was consumed from. This makes redelivery from the web console or JMX easier, as its a click on a button. New Feature DeadLetterChannel - Add SPI so custom components can prepare message for DLC When you use Camel's DLC as error queue, then when a message is moved to the DLQ, you may want to do some custom adjustment to the message before that happens.As an end user you have the onPrepare where you can do that.But for various Camel components then they may want to be able to hook in and be able to do some work.For example you may may want to configure camel-jms or activemq-camel to store the caused exception message and stacktrace as JMS headers so they are avalable on the JMS queue. Also for ActiveMQ we want to allow it to store the original destination property so AMQ broker knows which original JMS message the message was consumed from. This makes redelivery from the web console or JMX easier, as its a click on a button.
CAMEL-8734 camel-netty-http - Should ignore case of context-path We should ignore case when matching context-path. We have some code that matches using .startsWith. But that does not match with different case, such as Customer vs customer.People dont really want to expose HTTP services where the context path uses different case. So if people type /customer or /Customer or /CUSTOMER then it should match the same.See nabblehttp://camel.465427.n5.nabble.com/How-to-create-case-insensitive-URI-route-with-netty4-http-tp5766517.html Improvement camel-netty-http - Should ignore case of context-path We should ignore case when matching context-path. We have some code that matches using .startsWith. But that does not match with different case, such as Customer vs customer.People dont really want to expose HTTP services where the context path uses different case. So if people type /customer or /Customer or /CUSTOMER then it should match the same.See nabblehttp://camel.465427.n5.nabble.com/How-to-create-case-insensitive-URI-route-with-netty4-http-tp5766517.html
CAMEL-8732 File consumer - Allow to sort by random If a consumer is picking up many files from a directory, you may want to be able to sort the list by random, when you have competing consumers for the same files. This spread-out the list of names to avoid more frequent in-progress clashes between the consumers. Improvement File consumer - Allow to sort by random If a consumer is picking up many files from a directory, you may want to be able to sort the list by random, when you have competing consumers for the same files. This spread-out the list of names to avoid more frequent in-progress clashes between the consumers.
CAMEL-8728 Hazelcast idempotent repository - Should use locks We should use locks so the repo can support clustering Improvement Hazelcast idempotent repository - Should use locks We should use locks so the repo can support clustering
CAMEL-8727 File consumer - Add read lock that is based on idempotent repository The file consumer has a number of read locks that are file based, such as marker files, java FileLock api etc. But they are not guaranteed to work in a clustered environment where you want multiple nodes with Camel file routes compete for the same files.The file consumer do have both an in progress and idempontent repository associated with it, but they come after the read lock. And they are implemented assuming that the read lock would be atomic and if the lock was granted its the sole reader of the file. So we need to strength the weakest link which was the read lock.But using a read lock that reuse the existing idempotent implementations we can tap into clustering with zookeeper - hazelcast etc. or the shared JDBC database etc. New Feature File consumer - Add read lock that is based on idempotent repository The file consumer has a number of read locks that are file based, such as marker files, java FileLock api etc. But they are not guaranteed to work in a clustered environment where you want multiple nodes with Camel file routes compete for the same files.The file consumer do have both an in progress and idempontent repository associated with it, but they come after the read lock. And they are implemented assuming that the read lock would be atomic and if the lock was granted its the sole reader of the file. So we need to strength the weakest link which was the read lock.But using a read lock that reuse the existing idempotent implementations we can tap into clustering with zookeeper - hazelcast etc. or the shared JDBC database etc.
CAMEL-8725 explainEndpointJson should order the options according to the given order from the endpoint Seehttps://github.com/hawtio/hawtio/issues/1962We should always output in the order defined by the endpoint, so the options is always ordered the same way. Improvement explainEndpointJson should order the options according to the given order from the endpoint Seehttps://github.com/hawtio/hawtio/issues/1962We should always output in the order defined by the endpoint, so the options is always ordered the same way.
CAMEL-8722 File consumer - Allow to plugin a custom ExceptionHandler for the on completion unit of work This allows end users to do custom code if an exception was thrown from the file consumer, when it attempts to delete / move files when the consumer was done routing the file.By default the consumer would catch the exception and do a WARN log. This ticket allows to plugin a custom code to handle the exception. Improvement File consumer - Allow to plugin a custom ExceptionHandler for the on completion unit of work This allows end users to do custom code if an exception was thrown from the file consumer, when it attempts to delete / move files when the consumer was done routing the file.By default the consumer would catch the exception and do a WARN log. This ticket allows to plugin a custom code to handle the exception.
CAMEL-8716 camel-http - Make it easier to extend DefaultHttpBinding and have default no-arg ctr See SOhttp://stackoverflow.com/questions/29861465/custom-httpbinding-in-camel-http-componentThe class org.apache.camel.component.http.DefaultHttpBinding should have a default no arg ctr, and then dependency inject the endpoint instead. So it should have a getter/setter for the endpoint.Then the component can inject the endpoint automatic.Then end users can easy extend the default and provide it to Camel as the default no-arg ctr is used. Improvement camel-http - Make it easier to extend DefaultHttpBinding and have default no-arg ctr See SOhttp://stackoverflow.com/questions/29861465/custom-httpbinding-in-camel-http-componentThe class org.apache.camel.component.http.DefaultHttpBinding should have a default no arg ctr, and then dependency inject the endpoint instead. So it should have a getter/setter for the endpoint.Then the component can inject the endpoint automatic.Then end users can easy extend the default and provide it to Camel as the default no-arg ctr is used.
CAMEL-8712 User the Netty Timer per Component It could be better to just share the timer inside the camel netty component instead of using static variable to share it across the JVM. Improvement User the Netty Timer per Component It could be better to just share the timer inside the camel netty component instead of using static variable to share it across the JVM.
CAMEL-8711 JMS Session not exposed to Camel route On a JMS message consumer route, we support{code}jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE{code}The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()The Session is however not exposed to the client, which makes it impossible to call Session.recover(). CLIENT_ACKNOWLEDGE has IMHO currently limited use because of this.CrossRef: https://jira.spring.io/browse/SPR-12961 Improvement JMS Session not exposed to Camel route On a JMS message consumer route, we support{code}jms:...&acknowledgementModeName=CLIENT_ACKNOWLEDGE{code}The pattern is that a client may chose to process a batch of msgs before it acks. If batch processing succeeds the client calls Message.acknowledge(). If it fails, the client may choose to recover the msgs in the batch with Session.recover()The Session is however not exposed to the client, which makes it impossible to call Session.recover(). CLIENT_ACKNOWLEDGE has IMHO currently limited use because of this.CrossRef: https://jira.spring.io/browse/SPR-12961
CAMEL-8704 Building Camel 2.14.x fails due no OSGi jar found The CI server cannot build 2.14.x due OSGi jar not foundhttps://builds.apache.org/job/Camel.2.14.x.notest/147/consoleFull{code}Waiting for Jenkins to finish collecting data[ERROR] Failed to execute goal on project camel-karaf-commands: Could not resolve dependencies for project org.apache.camel.karaf:camel-karaf-commands:bundle:2.14.3-SNAPSHOT: Could not find artifact org.eclipse.osgi:org.eclipse.osgi:jar:3.7.0.v20110124-0830 in central (http://repo.maven.apache.org/maven2) -> [Help 1]org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project camel-karaf-commands: Could not resolve dependencies for project org.apache.camel.karaf:camel-karaf-commands:bundle:2.14.3-SNAPSHOT: Could not find artifact org.eclipse.osgi:org.eclipse.osgi:jar:3.7.0.v20110124-0830 in central (http://repo.maven.apache.org/maven2)	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:210){code}It seems the OSGi jar is in central but only 2 versions. There is a 3.6.0 and 3.7.1 JAR. So I guess it may fool Mvn to download from central instead of some eclipse repo. As I think those JARs are in Eclipse Maven Repo as well. Nevertheless building the source should work out of the box. Task Building Camel 2.14.x fails due no OSGi jar found The CI server cannot build 2.14.x due OSGi jar not foundhttps://builds.apache.org/job/Camel.2.14.x.notest/147/consoleFull{code}Waiting for Jenkins to finish collecting data[ERROR] Failed to execute goal on project camel-karaf-commands: Could not resolve dependencies for project org.apache.camel.karaf:camel-karaf-commands:bundle:2.14.3-SNAPSHOT: Could not find artifact org.eclipse.osgi:org.eclipse.osgi:jar:3.7.0.v20110124-0830 in central (http://repo.maven.apache.org/maven2) -> [Help 1]org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project camel-karaf-commands: Could not resolve dependencies for project org.apache.camel.karaf:camel-karaf-commands:bundle:2.14.3-SNAPSHOT: Could not find artifact org.eclipse.osgi:org.eclipse.osgi:jar:3.7.0.v20110124-0830 in central (http://repo.maven.apache.org/maven2)	at org.apache.maven.lifecycle.internal.LifecycleDependencyResolver.getDependencies(LifecycleDependencyResolver.java:210){code}It seems the OSGi jar is in central but only 2 versions. There is a 3.6.0 and 3.7.1 JAR. So I guess it may fool Mvn to download from central instead of some eclipse repo. As I think those JARs are in Eclipse Maven Repo as well. Nevertheless building the source should work out of the box.
CAMEL-8696 Allow ApnsNotification/EnhancedApnsNotification instances to be send to apns endpoints The Apns Endpoint only accepts Strings with the payload.It would be great if we alternatively could send EnhancedApnsNotifications so we have more control about the message that is being sent.This would especially help with handling notification errors, since the java-apns allows a ApnsDelegate to be notified about errors "messageSendFailed(ApnsNotification message, Throwable e)" - only we currently have no way of linking these failure messages to the exchange send by camel. New Feature Allow ApnsNotification/EnhancedApnsNotification instances to be send to apns endpoints The Apns Endpoint only accepts Strings with the payload.It would be great if we alternatively could send EnhancedApnsNotifications so we have more control about the message that is being sent.This would especially help with handling notification errors, since the java-apns allows a ApnsDelegate to be notified about errors "messageSendFailed(ApnsNotification message, Throwable e)" - only we currently have no way of linking these failure messages to the exchange send by camel.
CAMEL-8693 java.net.URISyntaxException: Invalid uri syntax: Trailing & marker found error should be configurable or skipped I am using camel with netty4-http 2.15.1 and getting the following exception because the query string my server is receiving ends with '&'. As far as I know most sites simply ignore the trailing & at the end of query string. Camel should either ignore the trailing "&" or provide an optional option to skip this check. This error prevents replacing an existing ESB product with Apache Camel since our exiting ESB product doesn't flag this as error.23769 [Camel (camel-1) thread #0 - NettyEventExecutorGroup] WARN  - Closing channel as an exception was thrown from Netty java.net.URISyntaxException: Invalid uri syntax: Trailing & marker found. Check the uri and remove the trailing & marker.: version=765&responseencoding=JSON&appid=xxxxxxx&siteid=0&callname=xxxx&ItemID=131334609454&IncludeSelector=Details&         at org.apache.camel.util.URISupport.parseQuery(URISupport.java:153) ~[camel-core-2.15.1.jar:2.15.1]         at org.apache.camel.util.URISupport.parseQuery(URISupport.java:133) ~[camel-core-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.DefaultNettyHttpBinding.populateCamelHeaders(DefaultNettyHttpBinding.java:182) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.RestNettyHttpBinding.populateCamelHeaders(RestNettyHttpBinding.java:50) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.DefaultNettyHttpBinding.toCamelMessage(DefaultNettyHttpBinding.java:89) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.NettyHttpEndpoint.createExchange(NettyHttpEndpoint.java:103) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:87) ~[camel-netty4-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:202) ~[camel-netty4-http-2.15.1.jar:2.15.1]        at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.0.26.Final.jar:4.0.26.Final]         at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:119) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339) [netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:32) [netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:329) [netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:36) [netty-common-4.0.26.Final.jar:4.0.26.Final]         at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111) [netty-common-4.0.26.Final.jar:4.0.26.Final]         at java.lang.Thread.run(Thread.java:744) [na:1.7.0-45] Improvement java.net.URISyntaxException: Invalid uri syntax: Trailing & marker found error should be configurable or skipped I am using camel with netty4-http 2.15.1 and getting the following exception because the query string my server is receiving ends with '&'. As far as I know most sites simply ignore the trailing & at the end of query string. Camel should either ignore the trailing "&" or provide an optional option to skip this check. This error prevents replacing an existing ESB product with Apache Camel since our exiting ESB product doesn't flag this as error.23769 [Camel (camel-1) thread #0 - NettyEventExecutorGroup] WARN  - Closing channel as an exception was thrown from Netty java.net.URISyntaxException: Invalid uri syntax: Trailing & marker found. Check the uri and remove the trailing & marker.: version=765&responseencoding=JSON&appid=xxxxxxx&siteid=0&callname=xxxx&ItemID=131334609454&IncludeSelector=Details&         at org.apache.camel.util.URISupport.parseQuery(URISupport.java:153) ~[camel-core-2.15.1.jar:2.15.1]         at org.apache.camel.util.URISupport.parseQuery(URISupport.java:133) ~[camel-core-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.DefaultNettyHttpBinding.populateCamelHeaders(DefaultNettyHttpBinding.java:182) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.RestNettyHttpBinding.populateCamelHeaders(RestNettyHttpBinding.java:50) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.DefaultNettyHttpBinding.toCamelMessage(DefaultNettyHttpBinding.java:89) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.NettyHttpEndpoint.createExchange(NettyHttpEndpoint.java:103) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:87) ~[camel-netty4-2.15.1.jar:2.15.1]         at org.apache.camel.component.netty4.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:202) ~[camel-netty4-http-2.15.1.jar:2.15.1]        at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.0.26.Final.jar:4.0.26.Final]         at org.apache.camel.component.netty4.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:119) ~[camel-netty4-http-2.15.1.jar:2.15.1]         at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) ~[netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:339) [netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:32) [netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:329) [netty-transport-4.0.26.Final.jar:4.0.26.Final]         at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:36) [netty-common-4.0.26.Final.jar:4.0.26.Final]         at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111) [netty-common-4.0.26.Final.jar:4.0.26.Final]         at java.lang.Thread.run(Thread.java:744) [na:1.7.0-45]
CAMEL-8686 Camel-Infinispan Replace operation can use options Lifespan and Max Idle Time The Camel-Infinispan Replace operation can use the options Lifespan and Max Idle Time in his implementation. Improvement Camel-Infinispan Replace operation can use options Lifespan and Max Idle Time The Camel-Infinispan Replace operation can use the options Lifespan and Max Idle Time in his implementation.
CAMEL-8684 Load balancer model should not implement processor The load balancer model classes build a bit wrong in java dsl, as the definiton classes implements LoadBalancer processor which is for the runtime. The model is for design time only.This is some very old code we havent spotted this before. Improvement Load balancer model should not implement processor The load balancer model classes build a bit wrong in java dsl, as the definiton classes implements LoadBalancer processor which is for the runtime. The model is for design time only.This is some very old code we havent spotted this before.
CAMEL-8681 Camel-Infinispan: use Lifespan and Max Idle Time in the implementation In Camel-infinispan we don't use Lifespan and Max Idle Time variable when we put a key/value pair in an Infinispan cache.There are some methods that use this variables and I think we have to change the implementation.  Improvement Camel-Infinispan: use Lifespan and Max Idle Time in the implementation In Camel-infinispan we don't use Lifespan and Max Idle Time variable when we put a key/value pair in an Infinispan cache.There are some methods that use this variables and I think we have to change the implementation. 
CAMEL-8679 Update Openshift Java Client Version from 2.5.0.Final to 2.7.0.Final We need to update Openshift Java Client version from 2.5.0.Final to 2.7.0.Final Task Update Openshift Java Client Version from 2.5.0.Final to 2.7.0.Final We need to update Openshift Java Client version from 2.5.0.Final to 2.7.0.Final
CAMEL-8677 Update iCal4j from version 1.5.0.2 to version 1.6.0 We need to update the version of iCal4j from 1.5.0.2 to version 1.6.0 Task Update iCal4j from version 1.5.0.2 to version 1.6.0 We need to update the version of iCal4j from 1.5.0.2 to version 1.6.0
CAMEL-8671 Update XStream from version 1.4.7 to version 1.4.8 We need to update XStream from version 1.4.7 to version 1.4.8.Since I have this problem with Karaf Integration Tests ( https://issues.apache.org/jira/browse/CAMEL-8669 ), can you please control the tests related to camel-salesforce, camel-optaplanner and camel-xstream. The dependencies of Xstream version 1.4.8 are the same of version 1.4.7, so I don't think there will be problems. I hope to resolve the problem related to Karaf Integration Tests, if it is a local problem of my environment. Task Update XStream from version 1.4.7 to version 1.4.8 We need to update XStream from version 1.4.7 to version 1.4.8.Since I have this problem with Karaf Integration Tests ( https://issues.apache.org/jira/browse/CAMEL-8669 ), can you please control the tests related to camel-salesforce, camel-optaplanner and camel-xstream. The dependencies of Xstream version 1.4.8 are the same of version 1.4.7, so I don't think there will be problems. I hope to resolve the problem related to Karaf Integration Tests, if it is a local problem of my environment.
CAMEL-8670 Add spring-ws:uripath endpoint mapping Extend Camel endpoint mapping for spring-ws endpoints, so routes can use uri path instead of complete WebService uri. This way route definitions are independent of host and port specifications that may be different in test and production environments. Improvement Add spring-ws:uripath endpoint mapping Extend Camel endpoint mapping for spring-ws endpoints, so routes can use uri path instead of complete WebService uri. This way route definitions are independent of host and port specifications that may be different in test and production environments.
CAMEL-8666 Infinispan add other operations to the available I think we can add some other operations to the available inside camel-infinispan.There are PUT, GET, REMOVE and CLEAR, but looking at the infinispan documentation and to the JSR-107 specs too, we can implements many other useful operations, like PUT IF ABSENT, REPLACE and so on. Improvement Infinispan add other operations to the available I think we can add some other operations to the available inside camel-infinispan.There are PUT, GET, REMOVE and CLEAR, but looking at the infinispan documentation and to the JSR-107 specs too, we can implements many other useful operations, like PUT IF ABSENT, REPLACE and so on.
CAMEL-8664 Update MongoDB Java Driver from 2.13.1 to 3.0.0 I think we have to update the MongoDB driver to the 3.x family. There are some changes, related to our component, to note:- WriteResultThe getLastError method in WriteResult has been removed: this method does not work reliably in the 2.x series and there is no way to make work reliably, so it has been removed. Replace with use of an acknowledged WriteConcern when executing the write operation.- DBCollectionThe ensureIndex methods in DBCollection have been removed: replace with the corresponding createIndex method.From: http://mongodb.github.io/mongo-java-driver/3.0/whats-new/upgrading/ Task Update MongoDB Java Driver from 2.13.1 to 3.0.0 I think we have to update the MongoDB driver to the 3.x family. There are some changes, related to our component, to note:- WriteResultThe getLastError method in WriteResult has been removed: this method does not work reliably in the 2.x series and there is no way to make work reliably, so it has been removed. Replace with use of an acknowledged WriteConcern when executing the write operation.- DBCollectionThe ensureIndex methods in DBCollection have been removed: replace with the corresponding createIndex method.From: http://mongodb.github.io/mongo-java-driver/3.0/whats-new/upgrading/
CAMEL-8657 Add Maven Plugin to generate route coverage report With help from CAMEL-8656 we can enable unit tests to generate xml files with route statistics.What we need is then a mvn plugin to generate a nice report from those, such as a html page that has a summary, and then a detailed route with colored lines for route usage, so you can spot which routes has unused parts etc.For starters the route can be dumped as xml from the report as its already in xml format. Its a matter of removing the noise, and then apply css or what style to do if exchangesTotal=0 and if its > 0 etc. New Feature Add Maven Plugin to generate route coverage report With help from CAMEL-8656 we can enable unit tests to generate xml files with route statistics.What we need is then a mvn plugin to generate a nice report from those, such as a html page that has a summary, and then a detailed route with colored lines for route usage, so you can spot which routes has unused parts etc.For starters the route can be dumped as xml from the report as its already in xml format. Its a matter of removing the noise, and then apply css or what style to do if exchangesTotal=0 and if its > 0 etc.
CAMEL-8656 camel-test - Add option to dump route stats to file We should allow users to configure the camel tests to dump route stats to files. Then they can inspect those files to see which EIPs have been used.We can then later add some maven plugin that generates a nice report based on those stats dumps. To make it easier to spot which parts of your routes have or havent been used.Sorta like a code coverage report but for Camel routes. New Feature camel-test - Add option to dump route stats to file We should allow users to configure the camel tests to dump route stats to files. Then they can inspect those files to see which EIPs have been used.We can then later add some maven plugin that generates a nice report based on those stats dumps. To make it easier to spot which parts of your routes have or havent been used.Sorta like a code coverage report but for Camel routes.
CAMEL-8654 Camel http should not de-serialize the ObjectInputStream when it works in Proxy mode Current Camel always to try to de-serialize the ObjectInputStream even in proxy mode which could introduce some issue when the route has some trouble to load the class. Improvement Camel http should not de-serialize the ObjectInputStream when it works in Proxy mode Current Camel always to try to de-serialize the ObjectInputStream even in proxy mode which could introduce some issue when the route has some trouble to load the class.
CAMEL-8653 camel-kafka need to commit the last batch offset when shutdown the consumer Fix of CAMEL-8636 would solve the scenario of when Kafka Broker is shutdown. Client shutdown scenario still results in un-committed offsets from the last batch. For this situation, Offset needs to be commited just before the *Customer* shutdown. Meanwhile some lock mechanism needs to be built with Shutdown hook that would do the following: * Block messages from getting consumed from kafka * Wait for all the messages that are getting processed to be completed. * Commit the Offset * Shutdown the Cosumer Improvement camel-kafka need to commit the last batch offset when shutdown the consumer Fix of CAMEL-8636 would solve the scenario of when Kafka Broker is shutdown. Client shutdown scenario still results in un-committed offsets from the last batch. For this situation, Offset needs to be commited just before the *Customer* shutdown. Meanwhile some lock mechanism needs to be built with Shutdown hook that would do the following: * Block messages from getting consumed from kafka * Wait for all the messages that are getting processed to be completed. * Commit the Offset * Shutdown the Cosumer
CAMEL-8652 Update MongoDB Java Driver to 2.13.1 and Embed-Mongo to 1.47.2 We need to update the MongoDB java driver from version 2.13.0 to version 2.13.1.Related to this we can update the embed-mongo version from 1.47.0 to version 1.47.2 Task Update MongoDB Java Driver to 2.13.1 and Embed-Mongo to 1.47.2 We need to update the MongoDB java driver from version 2.13.0 to version 2.13.1.Related to this we can update the embed-mongo version from 1.47.0 to version 1.47.2
CAMEL-8651 Update Ehcache from version 2.9.1 to 2.10.0 We need to update Ehcache from version 2.9.1 to version 2.10.0 Task Update Ehcache from version 2.9.1 to 2.10.0 We need to update Ehcache from version 2.9.1 to version 2.10.0
CAMEL-8648 Update Docker-java version from 0.10.5 to 1.2.0 We need to update Docker-java version from 0.10.5 to 1.2.0 Task Update Docker-java version from 0.10.5 to 1.2.0 We need to update Docker-java version from 0.10.5 to 1.2.0
CAMEL-8644 Update Google Gson version from 2.3 to 2.3.1 We need to update Google gson version from 3.2 to 3.2.1. Task Update Google Gson version from 2.3 to 2.3.1 We need to update Google gson version from 3.2 to 3.2.1.
CAMEL-8642 Support to use custom classloader when deserializeJavaObjectFromStream in HttpHelper The ObjectInputStream uses latestUserDefinedLoader() to load the class [1], But I think we need to use ApplicationContextClassLoader of the camel context to load the class, in this way we can give the user right to change the classloader as they want.[1]https://community.oracle.com/thread/1151865 Improvement Support to use custom classloader when deserializeJavaObjectFromStream in HttpHelper The ObjectInputStream uses latestUserDefinedLoader() to load the class [1], But I think we need to use ApplicationContextClassLoader of the camel context to load the class, in this way we can give the user right to change the classloader as they want.[1]https://community.oracle.com/thread/1151865
CAMEL-8640 BacklogTracer allocates 100k elements for an array even it is not enabled By default each camel context has one BacklogTracer which is by default disabled.However BacklogTracer  contains a queue with{code}public static final int MAX_BACKLOG_SIZE = 100 * 1000;private final Queue<DefaultBacklogTracerEventMessage> queue = new ArrayBlockingQueue<DefaultBacklogTracerEventMessage>(MAX_BACKLOG_SIZE);{code}The easiest way:is it possible to replace it with LinkedBlockingQueue(int capacity)?Ideally the object could be initialized only when it is enabled but it seems BacklogTracer  is not fully encapsulated (the queue reference is maintained also outside BacklogTracer   in BacklogTracerAdvice) Improvement BacklogTracer allocates 100k elements for an array even it is not enabled By default each camel context has one BacklogTracer which is by default disabled.However BacklogTracer  contains a queue with{code}public static final int MAX_BACKLOG_SIZE = 100 * 1000;private final Queue<DefaultBacklogTracerEventMessage> queue = new ArrayBlockingQueue<DefaultBacklogTracerEventMessage>(MAX_BACKLOG_SIZE);{code}The easiest way:is it possible to replace it with LinkedBlockingQueue(int capacity)?Ideally the object could be initialized only when it is enabled but it seems BacklogTracer  is not fully encapsulated (the queue reference is maintained also outside BacklogTracer   in BacklogTracerAdvice)
CAMEL-8634 Wire tap - Should emit event notification about sending to tapped endpoint See nabblehttp://camel.465427.n5.nabble.com/Wiretap-not-firing-events-tp5765760.html Improvement Wire tap - Should emit event notification about sending to tapped endpoint See nabblehttp://camel.465427.n5.nabble.com/Wiretap-not-firing-events-tp5765760.html
CAMEL-8633 Servlet & Multipart  The servlet component cannot handle attachments from a multipart request.In our situation a REST multipart call is made and the attachments must be handled.I created a extension on the DefaultHttpBinding and added functionality for multipart parsing. May be this functionality can be added to apache camel. Improvement Servlet & Multipart  The servlet component cannot handle attachments from a multipart request.In our situation a REST multipart call is made and the attachments must be handled.I created a extension on the DefaultHttpBinding and added functionality for multipart parsing. May be this functionality can be added to apache camel.
CAMEL-8632 httpBindingRef & httpBinding for the servlet component documentation In the documentation of apache camel servlet (http://camel.apache.org/servlet.html) the option for the HttpBindingRef is missing.HttpBinding is not supported on the servlet. It would be nice if this works the same as for the HTTP component Improvement httpBindingRef & httpBinding for the servlet component documentation In the documentation of apache camel servlet (http://camel.apache.org/servlet.html) the option for the HttpBindingRef is missing.HttpBinding is not supported on the servlet. It would be nice if this works the same as for the HTTP component
CAMEL-8631 Allow use of Spring 4 in Karaf environment It's currently not possible to use Camel with Spring version 4.When first installing Spring 4:   feature:install -v spring/4.1.2.RELEASE_1and then installing Camel:   feature:repo-add mvn:org.apache.camel.karaf/apache-camel/2.15.1/xml/features   feature:install camelThe Camel feature file will actually install Spring 3 and not use the version 4 that is already installed.One can verify this with   bundle:requirements camel-springto see that it resolved the 'spring' packages with 3.2.11.RELEASE and not version 4.E.g.:osgi.wiring.package; (&(osgi.wiring.package=org.springframework.beans)(version>=3.2.0)(!(version>=5.0.0))) resolved by:   osgi.wiring.package; org.springframework.beans 3.2.11.RELEASE from org.apache.servicemix.bundles.spring-beans [83]I believe the Camel features file needs to be modified to support Spring 4. It currently has range restrictions that exclude version 4. Improvement Allow use of Spring 4 in Karaf environment It's currently not possible to use Camel with Spring version 4.When first installing Spring 4:   feature:install -v spring/4.1.2.RELEASE_1and then installing Camel:   feature:repo-add mvn:org.apache.camel.karaf/apache-camel/2.15.1/xml/features   feature:install camelThe Camel feature file will actually install Spring 3 and not use the version 4 that is already installed.One can verify this with   bundle:requirements camel-springto see that it resolved the 'spring' packages with 3.2.11.RELEASE and not version 4.E.g.:osgi.wiring.package; (&(osgi.wiring.package=org.springframework.beans)(version>=3.2.0)(!(version>=5.0.0))) resolved by:   osgi.wiring.package; org.springframework.beans 3.2.11.RELEASE from org.apache.servicemix.bundles.spring-beans [83]I believe the Camel features file needs to be modified to support Spring 4. It currently has range restrictions that exclude version 4.
CAMEL-8629 Update AWS SDK from version 1.9.17 to version 1.9.30 After the latest update from old version of SDK to 1.9.17, I've opened a ticket into Servicemix JIRA to ask for  a bundle release of latest AWS SDK version, 1.9.30. The ticket has been resolved.We need to update the dependency from 1.9.17 to 1.9.30. Task Update AWS SDK from version 1.9.17 to version 1.9.30 After the latest update from old version of SDK to 1.9.17, I've opened a ticket into Servicemix JIRA to ask for  a bundle release of latest AWS SDK version, 1.9.30. The ticket has been resolved.We need to update the dependency from 1.9.17 to 1.9.30.
CAMEL-8627 Update Infinispan version from 6.0.2.Final to 7.1.1.Final We need to update Infinispan from version 6.0.2.Final to the latest stable version 7.1.1.Final Task Update Infinispan version from 6.0.2.Final to 7.1.1.Final We need to update Infinispan from version 6.0.2.Final to the latest stable version 7.1.1.Final
CAMEL-8623 Update Dropwizard Metrics from version 3.1.0 to 3.1.1 We need to update Metrics from version 3.1.0 to the latest version 3.1.1 Improvement Update Dropwizard Metrics from version 3.1.0 to 3.1.1 We need to update Metrics from version 3.1.0 to the latest version 3.1.1
CAMEL-8622 Update Apache PdfBox from version 1.6.0 to version 1.8.9 We need to update Apache PDFbox from version 1.6.0 to the latest release 1.8.9 Improvement Update Apache PdfBox from version 1.6.0 to version 1.8.9 We need to update Apache PDFbox from version 1.6.0 to the latest release 1.8.9
CAMEL-8621 Update Apache Kafka version from 0.8.1.1 to 0.8.2.0 We need to update Apache Kafka from 0.8.1.1 to 0.8.2.0.Actually there is also a 0.8.2.1 version, but the related bundle has not been released yet. Improvement Update Apache Kafka version from 0.8.1.1 to 0.8.2.0 We need to update Apache Kafka from 0.8.1.1 to 0.8.2.0.Actually there is also a 0.8.2.1 version, but the related bundle has not been released yet.
CAMEL-8620 Update LightCouch version from 0.1.3 to 0.1.6 We need to update the LightCouch version from 0.1.3 to the latest release 0.1.6 Improvement Update LightCouch version from 0.1.3 to 0.1.6 We need to update the LightCouch version from 0.1.3 to the latest release 0.1.6
CAMEL-8619 Camel WebSocket SSL tests fail The two Camel-WebSocket SSL Tests fails. It seems to be related to the update of Async-http-client from 1.9.8 to 1.9.17.The Jenkins job Camel.trunk.fulltest fail on this two tests.https://builds.apache.org/job/Camel.trunk.fulltest/2260/org.apache.camel$camel-websocket/ Test Camel WebSocket SSL tests fail The two Camel-WebSocket SSL Tests fails. It seems to be related to the update of Async-http-client from 1.9.8 to 1.9.17.The Jenkins job Camel.trunk.fulltest fail on this two tests.https://builds.apache.org/job/Camel.trunk.fulltest/2260/org.apache.camel$camel-websocket/
CAMEL-8618 Camel Catalog - Remove the label commands These commands dont bring much value. You can see the labels from the regular list commands.They just clutter up the list of commands. Improvement Camel Catalog - Remove the label commands These commands dont bring much value. You can see the labels from the regular list commands.They just clutter up the list of commands.
CAMEL-8617 camel-vertx - Add timeout during startup to wait for EventBus to be ready If starting a clustered vertx eventbus then it may need extra time to startup which requires using its async api to get the notification. The current api calls the sync which says in javadoc that the eventbus may not be ready.So lets improved this and wait for it with a default timeout of 60 sec Improvement camel-vertx - Add timeout during startup to wait for EventBus to be ready If starting a clustered vertx eventbus then it may need extra time to startup which requires using its async api to get the notification. The current api calls the sync which says in javadoc that the eventbus may not be ready.So lets improved this and wait for it with a default timeout of 60 sec
CAMEL-8615 Update Dropbox-core-sdk from 1.7.6 to 1.7.7 We need to update Dropbox-core-sdk from 1.7.6 to 1.7.7. Improvement Update Dropbox-core-sdk from 1.7.6 to 1.7.7 We need to update Dropbox-core-sdk from 1.7.6 to 1.7.7.
CAMEL-8614 camel-linkedin and camel-olingo2 should use same Maven coord as others So all the mvn coord is the same and consistent Task camel-linkedin and camel-olingo2 should use same Maven coord as others So all the mvn coord is the same and consistent
CAMEL-8612 Update Cassandraql component dependencies We need to update the dependencies of cassandraql component with the latest releases:- Datastax Cassandra Driver version from 2.1.2 to 2.1.5- Cassandra-all version from 2.1.2 to 2.1.4- Cassandra-Unit version from 2.0.2.2 to 2.1.3.1 Improvement Update Cassandraql component dependencies We need to update the dependencies of cassandraql component with the latest releases:- Datastax Cassandra Driver version from 2.1.2 to 2.1.5- Cassandra-all version from 2.1.2 to 2.1.4- Cassandra-Unit version from 2.0.2.2 to 2.1.3.1
CAMEL-8608 Update async-http-client version from 1.9.8 to 1.9.17 We need to update the async-http-client library version from version 1.9.8 to latest version 1.9.17.The affected components are:- Camel-ahc- Camel-websocket (test dependency)- Camel-atmosphere-websocket (test dependency) Improvement Update async-http-client version from 1.9.8 to 1.9.17 We need to update the async-http-client library version from version 1.9.8 to latest version 1.9.17.The affected components are:- Camel-ahc- Camel-websocket (test dependency)- Camel-atmosphere-websocket (test dependency)
CAMEL-8606 Attack Vector: java.util.Random.nextInt Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().Remediation: If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.Few classes used java.util.Random.WeightedRandomLoadBalancer.java: 56RedeliveryPolicy.java: 221FileUtil.java: 330RandomLoadBalancer.java: 44FileUtil.java: 334OptimisticLockRetryPolicy.java: 63 Improvement Attack Vector: java.util.Random.nextInt Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().Remediation: If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.Few classes used java.util.Random.WeightedRandomLoadBalancer.java: 56RedeliveryPolicy.java: 221FileUtil.java: 330RandomLoadBalancer.java: 44FileUtil.java: 334OptimisticLockRetryPolicy.java: 63
CAMEL-8603 camel-ftp - Reduce connection info logging from INFO to DEBUG See SOhttp://stackoverflow.com/questions/29496850/reduce-camel-ftp-component-loggingWe should change the 2 places in camel-ftp where we log at INFO level to DEBUG level so we dont noise the production logs.Its in both the consumer and producer, such aslog.info("Connected and logged in to: " + remoteServer());Contributions for a patch / PR is much welcome. Improvement camel-ftp - Reduce connection info logging from INFO to DEBUG See SOhttp://stackoverflow.com/questions/29496850/reduce-camel-ftp-component-loggingWe should change the 2 places in camel-ftp where we log at INFO level to DEBUG level so we dont noise the production logs.Its in both the consumer and producer, such aslog.info("Connected and logged in to: " + remoteServer());Contributions for a patch / PR is much welcome.
CAMEL-8602 Java 8: ConcurrentLinkedHashMap -> Caffeine When Camel transitions to requiring Java 8, please upgrade to Caffeine. The performance should be relatively the same. The per-instance memory usage should be smaller and Camel may decide to opt-in to use some of the additional features. The only drawback is that the jar size is larger due to code generation, though that may be trimmed over time and usually is not a concern for server-side applications.ConcurrentLinkedHashMap changes will continue to be minimal, even more so now, and driven by requests from Java 6 users unable to upgrade. Caffeine is ideally the upgrade path for Guava cache users too, which due to Android cannot be significantly modified.Caffeine: https://github.com/ben-manes/caffeineBenchmarks: https://github.com/ben-manes/caffeine/wiki/BenchmarksConcurrentLinkedHashMap: https://code.google.com/p/concurrentlinkedhashmap Task Java 8: ConcurrentLinkedHashMap -> Caffeine When Camel transitions to requiring Java 8, please upgrade to Caffeine. The performance should be relatively the same. The per-instance memory usage should be smaller and Camel may decide to opt-in to use some of the additional features. The only drawback is that the jar size is larger due to code generation, though that may be trimmed over time and usually is not a concern for server-side applications.ConcurrentLinkedHashMap changes will continue to be minimal, even more so now, and driven by requests from Java 6 users unable to upgrade. Caffeine is ideally the upgrade path for Guava cache users too, which due to Android cannot be significantly modified.Caffeine: https://github.com/ben-manes/caffeineBenchmarks: https://github.com/ben-manes/caffeine/wiki/BenchmarksConcurrentLinkedHashMap: https://code.google.com/p/concurrentlinkedhashmap
CAMEL-8600 Change the ftp default separator to be Unix style As most Ftp server use the file separator as Unit style, we should use it as default. Here is an use case which send the file from windows box to a FTP server, if the file separator is Auto, the file is upload with an error path.  Improvement Change the ftp default separator to be Unix style As most Ftp server use the file separator as Unit style, we should use it as default. Here is an use case which send the file from windows box to a FTP server, if the file separator is Auto, the file is upload with an error path. 
CAMEL-8596 Add getRequestHeaders to JettyContentExchange Could you addMap<String, Collection<String>> getRequestHeaders() method to JettyContentExchange interface?Context:In Camel 2.14.x JettyContentExchange was a class extending ContentExchange so that it gives access to ContentExchange methods.Currently it is an interface and it is impossible to access (without hacking access to private final field.... hell yeah ]:->)  for example in order to access to HTTP request headers... Improvement Add getRequestHeaders to JettyContentExchange Could you addMap<String, Collection<String>> getRequestHeaders() method to JettyContentExchange interface?Context:In Camel 2.14.x JettyContentExchange was a class extending ContentExchange so that it gives access to ContentExchange methods.Currently it is an interface and it is impossible to access (without hacking access to private final field.... hell yeah ]:->)  for example in order to access to HTTP request headers...
CAMEL-8595 AWS SNS add messageStructure property configuration Json message body support added as a new feature.on the URI configuration "..&messageStructure=json"or on the message header add (SnsConstans.MESSAGE_STRUCTURE,"json") key-value New Feature AWS SNS add messageStructure property configuration Json message body support added as a new feature.on the URI configuration "..&messageStructure=json"or on the message header add (SnsConstans.MESSAGE_STRUCTURE,"json") key-value
CAMEL-8593 JmsEndpoint.configureListenerContainer() some debug logs miss {} In method JmsEndpoint.configureListenerContainer() there are a few debug logs that miss the second {} Improvement JmsEndpoint.configureListenerContainer() some debug logs miss {} In method JmsEndpoint.configureListenerContainer() there are a few debug logs that miss the second {}
CAMEL-8591 Upgrade to restlet 2.3.x Its not API compatible a code change was needed in camel-restlet. Task Upgrade to restlet 2.3.x Its not API compatible a code change was needed in camel-restlet.
CAMEL-8588 REST DSL with camel-restlet: Status 302 (redirect) and the 'location' header There doesn't seem to be a way to use the REST DSL in a provider-agnostic way in order to produce a redirect. Setting the location header generates a warning sent to the console:{noformat}Addition of the standard header "location" is not allowed. Please use the equivalent property in the Restlet API.{noformat}Very small example: http://pastebin.com/Zaq7p0UsAlso see linked JIRA. Improvement REST DSL with camel-restlet: Status 302 (redirect) and the 'location' header There doesn't seem to be a way to use the REST DSL in a provider-agnostic way in order to produce a redirect. Setting the location header generates a warning sent to the console:{noformat}Addition of the standard header "location" is not allowed. Please use the equivalent property in the Restlet API.{noformat}Very small example: http://pastebin.com/Zaq7p0UsAlso see linked JIRA.
CAMEL-8586 File component optimization required for file response body I have a producer which makes files (writes data to a temp file) and sets it as output message body. I was expecting Camel file component to just rename the resulting file. But instead it copies the file leaving the temporary file intact. Here's a snippet from the FileOperations class which raised my concern:{code}            // we can optimize and use file based if no charset must be used, and the input body is a file            File source = null;            boolean fileBased = false;            if (charset == null) {                // if no charset, then we can try using file directly (optimized)                Object body = exchange.getIn().getBody();                if (body instanceof WrappedFile) {                    body = ((WrappedFile<?>) body).getFile();                    fileBased = true;                }                if (body instanceof File) {                    source = (File) body;                }            }            if (fileBased) {                // okay we know the body is a file based{code}So the fileBased is only assumed if we are using a proprietary WrappedFile body, whereas normal file is not considered a fileBased body. Am I missing something?We could just treat files the same way as WrappedFile, or have an endpoint option to treat them as such, what do you think? Improvement File component optimization required for file response body I have a producer which makes files (writes data to a temp file) and sets it as output message body. I was expecting Camel file component to just rename the resulting file. But instead it copies the file leaving the temporary file intact. Here's a snippet from the FileOperations class which raised my concern:{code}            // we can optimize and use file based if no charset must be used, and the input body is a file            File source = null;            boolean fileBased = false;            if (charset == null) {                // if no charset, then we can try using file directly (optimized)                Object body = exchange.getIn().getBody();                if (body instanceof WrappedFile) {                    body = ((WrappedFile<?>) body).getFile();                    fileBased = true;                }                if (body instanceof File) {                    source = (File) body;                }            }            if (fileBased) {                // okay we know the body is a file based{code}So the fileBased is only assumed if we are using a proprietary WrappedFile body, whereas normal file is not considered a fileBased body. Am I missing something?We could just treat files the same way as WrappedFile, or have an endpoint option to treat them as such, what do you think?
CAMEL-8582 No way to specify a custom ModelJAXBContextFactory when using Spring DSL/XML Namespace No way to specify a custom ModelJAXBContextFactory when using Spring DSL/Xml Namespace.The ModelJAXBContextFactory reference should be specifiable on the CamelContext Spring XML Namespace. And it should be searched via the spring bean registry. Improvement No way to specify a custom ModelJAXBContextFactory when using Spring DSL/XML Namespace No way to specify a custom ModelJAXBContextFactory when using Spring DSL/Xml Namespace.The ModelJAXBContextFactory reference should be specifiable on the CamelContext Spring XML Namespace. And it should be searched via the spring bean registry.
CAMEL-8581 Cross-compile Scala DSL Currently, the documentation at https://camel.apache.org/scala-dsl.html shows that only Scala 2.10 is supported by the current versions scala-dsl. The Scala version is no longer part of the artifactId as it normally is in Scala.Scala 2.10 and 2.11 aren't very different and it is usually easy to cross-compile the two. Scala 2.10's EOL is approaching and Scala 2.12 is also going to take over later this year. For this DSL to remain relevant, it should be figured out how to cross-compile the artifacts. Improvement Cross-compile Scala DSL Currently, the documentation at https://camel.apache.org/scala-dsl.html shows that only Scala 2.10 is supported by the current versions scala-dsl. The Scala version is no longer part of the artifactId as it normally is in Scala.Scala 2.10 and 2.11 aren't very different and it is usually easy to cross-compile the two. Scala 2.10's EOL is approaching and Scala 2.12 is also going to take over later this year. For this DSL to remain relevant, it should be figured out how to cross-compile the artifacts.
CAMEL-8580 Upgrade jackson 2 We should upgrade to latest release Improvement Upgrade jackson 2 We should upgrade to latest release
CAMEL-8576 Added a option to let camel netty take the message body as byte buffer When using the camel-netty to send the syslog server we need to convert the message body into ChannelBuffer otherwise we will get complain from Netty just like this.{code}[org.jboss.netty.channel.socket.nio.AbstractNioSelector] Unexpected exception in the selector loop.java.lang.IllegalArgumentException: unsupported message type: class [B	at org.jboss.netty.channel.socket.nio.SocketSendBufferPool.acquire(SocketSendBufferPool.java:52)	at org.jboss.netty.channel.socket.nio.NioDatagramWorker.write0(NioDatagramWorker.java:260)	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromTaskLoop(AbstractNioWorker.java:151)	at org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteTask.run(AbstractNioChannel.java:335)	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.processTaskQueue(AbstractNioSelector.java:372)	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:296)	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)	at org.jboss.netty.channel.socket.nio.NioDatagramWorker.run(NioDatagramWorker.java:343)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_71]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_71]	at java.lang.Thread.run(Thread.java:745)[:1.7.0_71]{code}It could be handy if we just have a option in the netty endpoint for it. Improvement Added a option to let camel netty take the message body as byte buffer When using the camel-netty to send the syslog server we need to convert the message body into ChannelBuffer otherwise we will get complain from Netty just like this.{code}[org.jboss.netty.channel.socket.nio.AbstractNioSelector] Unexpected exception in the selector loop.java.lang.IllegalArgumentException: unsupported message type: class [B	at org.jboss.netty.channel.socket.nio.SocketSendBufferPool.acquire(SocketSendBufferPool.java:52)	at org.jboss.netty.channel.socket.nio.NioDatagramWorker.write0(NioDatagramWorker.java:260)	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.writeFromTaskLoop(AbstractNioWorker.java:151)	at org.jboss.netty.channel.socket.nio.AbstractNioChannel$WriteTask.run(AbstractNioChannel.java:335)	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.processTaskQueue(AbstractNioSelector.java:372)	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:296)	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)	at org.jboss.netty.channel.socket.nio.NioDatagramWorker.run(NioDatagramWorker.java:343)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_71]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_71]	at java.lang.Thread.run(Thread.java:745)[:1.7.0_71]{code}It could be handy if we just have a option in the netty endpoint for it.
CAMEL-8572 Upgrade aws sdk java version and add support for DynamoDB v2 Hi,We should upgrade the AWS sdk version to something >= 1.9. I've made some test on the code, and the DynamoDB part of the component is affected from this change.We need to support DynamoDB v2, if we want to use a newer version.I would like to study this improvement and work on this. Is possible to assign this JIRA to me? I would like to be able to assign JIRAs to myself. Is it possible? Bye,Andrea Improvement Upgrade aws sdk java version and add support for DynamoDB v2 Hi,We should upgrade the AWS sdk version to something >= 1.9. I've made some test on the code, and the DynamoDB part of the component is affected from this change.We need to support DynamoDB v2, if we want to use a newer version.I would like to study this improvement and work on this. Is possible to assign this JIRA to me? I would like to be able to assign JIRAs to myself. Is it possible? Bye,Andrea
CAMEL-8571 Split EIP - Should use new message id per splitted message The splitter seems to copy the message and preserving the original message id for each sub message. As each sub message is a new message they should use their own message id. Which their exchange already does. Improvement Split EIP - Should use new message id per splitted message The splitter seems to copy the message and preserving the original message id for each sub message. As each sub message is a new message they should use their own message id. Which their exchange already does.
CAMEL-8569 Ability to easily extract email attachments The existing support for splitting an email by it's attachments (org.apache.camel.component.mail.SplitAttachmentsExpression) is limiting that the attachments are still mime encoded, and cannot be easily used by the next stage in a route.e.g.from("pop3://james@mymailserver.com?...    .split(new SplitAttachmentsExpression())     .to("file:///myAttachmentsFolder")doesn't workAn improved splitter that decodes the mime parts into byte arrays would be more useful Improvement Ability to easily extract email attachments The existing support for splitting an email by it's attachments (org.apache.camel.component.mail.SplitAttachmentsExpression) is limiting that the attachments are still mime encoded, and cannot be easily used by the next stage in a route.e.g.from("pop3://james@mymailserver.com?...    .split(new SplitAttachmentsExpression())     .to("file:///myAttachmentsFolder")doesn't workAn improved splitter that decodes the mime parts into byte arrays would be more useful
CAMEL-8567 New camel-raspberry component I've started a new component to interface with an RaspberryPI.I think it could be very interesting component to have for camel.With this first version you manage all GPIO for  Model A, A+, B, B+, 2BFeatures -  input / ouput digital pin management   * with TOGGLE, LOW, HIGH action    * from("rbpi://pin?id=2&mode=input&state=HIGH") --> send new msg when HIGH   * to("rbpi://pin?id=9&mode=output&state=LOW&action=HIGH") --> when receive msg set to HIGH-  input / ouput analog pin management  * for double value  * rbpi://pin?id=1&mode=analog_input-  input / ouput pwn pin  * for int value  * rbpi://pin?id=1&mode=pwm_inputI also developed an CamelMain stuff to test it very quickly on a Raspberry Pi.One input -> log -> one output, stay tuned !!!I've also create a mock to emulate RBPI on my MacPi4j uses ASF : http://pi4j.com/license.htmlPi4j is OSGi compliantbut I don't know if component is correctly OSGi compliantI am writing an documentation too.TODO :- smarter URI style like rbpi://pin/1/mode?[options]- output endpoint with dynamic PIN- GUI GPIO emulator - i2c integration- spi integration New Feature New camel-raspberry component I've started a new component to interface with an RaspberryPI.I think it could be very interesting component to have for camel.With this first version you manage all GPIO for  Model A, A+, B, B+, 2BFeatures -  input / ouput digital pin management   * with TOGGLE, LOW, HIGH action    * from("rbpi://pin?id=2&mode=input&state=HIGH") --> send new msg when HIGH   * to("rbpi://pin?id=9&mode=output&state=LOW&action=HIGH") --> when receive msg set to HIGH-  input / ouput analog pin management  * for double value  * rbpi://pin?id=1&mode=analog_input-  input / ouput pwn pin  * for int value  * rbpi://pin?id=1&mode=pwm_inputI also developed an CamelMain stuff to test it very quickly on a Raspberry Pi.One input -> log -> one output, stay tuned !!!I've also create a mock to emulate RBPI on my MacPi4j uses ASF : http://pi4j.com/license.htmlPi4j is OSGi compliantbut I don't know if component is correctly OSGi compliantI am writing an documentation too.TODO :- smarter URI style like rbpi://pin/1/mode?[options]- output endpoint with dynamic PIN- GUI GPIO emulator - i2c integration- spi integration
CAMEL-8565 Support for camel-gson to handle generic types Currently camel-gson only supports the ability to marshal or unmarshall a concrete class. It should provide the functionality handle generic types such as collections. New Feature Support for camel-gson to handle generic types Currently camel-gson only supports the ability to marshal or unmarshall a concrete class. It should provide the functionality handle generic types such as collections.
CAMEL-8564 Add support for dataformat ref parameter Java DSL allows us to use a named reference to a data format defined in the Registry. Improvement Add support for dataformat ref parameter Java DSL allows us to use a named reference to a data format defined in the Registry.
CAMEL-8563 camel-ftp - Add support for account option for login See nabblehttp://camel.465427.n5.nabble.com/Camel-FTP-Component-does-not-support-ACCOUNT-ACCT-in-RFC959-yet-tp5764879.html New Feature camel-ftp - Add support for account option for login See nabblehttp://camel.465427.n5.nabble.com/Camel-FTP-Component-does-not-support-ACCOUNT-ACCT-in-RFC959-yet-tp5764879.html
CAMEL-8562 Removing a route - Should check if the route input endpoint is static and used by other routes See nabblehttp://camel.465427.n5.nabble.com/Route-removal-triggers-endpoint-shutdown-tp5764796.htmlWe should check if the endpoint may be in use by other routes, just as we do for endpoints within the route itself. And if so avoid stopping it, as its still in use. Improvement Removing a route - Should check if the route input endpoint is static and used by other routes See nabblehttp://camel.465427.n5.nabble.com/Route-removal-triggers-endpoint-shutdown-tp5764796.htmlWe should check if the endpoint may be in use by other routes, just as we do for endpoints within the route itself. And if so avoid stopping it, as its still in use.
CAMEL-8561 Camel Catalog - Add better description of components and others The description for components is taken from endpoint javadoc, maven description.We should improve this so we have better javadoc description for all components. Then its documented in one place.And then maybe have the description into two- summary- descriptionWhere summary is a one liner sentence to be used for headlines / tables to tell what the component does.And description is the more in-depth text about the component. Improvement Camel Catalog - Add better description of components and others The description for components is taken from endpoint javadoc, maven description.We should improve this so we have better javadoc description for all components. Then its documented in one place.And then maybe have the description into two- summary- descriptionWhere summary is a one liner sentence to be used for headlines / tables to tell what the component does.And description is the more in-depth text about the component.
CAMEL-8559 Upgrade to jsonpath 2 They have released 2.0. We should upgrade to thishttps://github.com/jayway/JsonPath Improvement Upgrade to jsonpath 2 They have released 2.0. We should upgrade to thishttps://github.com/jayway/JsonPath
CAMEL-8558 Camel Catalog - Add humanize component name Each component has a name such as ejb, ftp, jms, mqtt, file etc. But presenting these names to humans,we may want to let the component provide a humainzed text of its name, so we can do 100% correct names.- ejb = EJB- mqtt = MQTT- sap-netweaver = SAP NetWeaverand so on. Improvement Camel Catalog - Add humanize component name Each component has a name such as ejb, ftp, jms, mqtt, file etc. But presenting these names to humans,we may want to let the component provide a humainzed text of its name, so we can do 100% correct names.- ejb = EJB- mqtt = MQTT- sap-netweaver = SAP NetWeaverand so on.
CAMEL-8554 camel-jackson should provide Map => Object converter Jackson's {{ObjectMapper}} can be used to convert {{Map}} to pojo. It would be nice if Jackson component provide this kind of fallback converter then. Improvement camel-jackson should provide Map => Object converter Jackson's {{ObjectMapper}} can be used to convert {{Map}} to pojo. It would be nice if Jackson component provide this kind of fallback converter then.
CAMEL-8545 Allow camel-swagger component to run in an internal container I use camel as a front end to provide a RESTful API in front of a mix of various web services. Requests come in in either xml or json, and are converted to xml, transformed and sent on to the back end services which only support an RPC style.I use rest dsl with configuration via spring xml, and it runs in a java process.{noformat}  <restConfiguration bindingMode="auto" component="jetty" host="localhost" port="18910"/>{noformat}I would love to use the camel-swagger component to provide a live API document of the Rest API's configured, but it seems that it is not possible without configuring a web.xml file.Is this feasible? Is there an alternative to document the Rest API the camel context provides?Camel-context below.{noformat}<beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:camel="http://camel.apache.org/schema/spring"       xmlns:cxf="http://camel.apache.org/schema/cxf"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">                    <import resource="classpath:META-INF/spring/jolokia.xml"/>                                                                   <bean id="metricsRoutePolicyFactory" class="org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory"/>  <camelContext xmlns="http://camel.apache.org/schema/spring">    <properties>        <property key="CamelLogDebugBodyStreams" value="true"/>   </properties>    <propertyPlaceholder location="classpath:incident.properties,file:target/custom.properties" id="properties"/>    	<endpoint uri="jetty:http://localhost:28950/ig?bridgeEndpoint=true" id="jsonEndpoint"/>	<endpoint uri="cxf:http://localhost:28960/ig?dataFormat=PAYLOAD&amp;wsdlURL=http://localhost:28960/ig?WSDL&amp;loggingFeatureEnabled=true" id="soapEndpoint"/>         	<dataFormats>    		<xmljson id="xmljson" forceTopLevelObject="true" removeNamespacePrefixes="true"/>    		<xmljson id="xmljsonWithOptions" trimSpaces="true" skipNamespaces="true"             removeNamespacePrefixes="true"/>	</dataFormats>    <restConfiguration bindingMode="auto" component="jetty" host="localhost" port="18910"/>  <rest path="/SubscriberProfilesJson/" consumes="application/json">    <get uri="/{SubscriberId}">      <to uri="direct:GetProfileJson"/>    </get>    <post uri="/{SubscriberId}/Subscriptions" consumes="application/json">      <to uri="direct:CreateSubscriptionJson"/>    </post>    <get uri="/{SubscriberId}/Subscriptions" consumes="application/json">      <to uri="direct:GetSubscriptionsJson"/>    </get>  </rest>    <rest path="/SubscriberProfilesXml/" consumes="application/xml">    <get uri="/{SubscriberId}">      <to uri="direct:GetProfile"/>    </get>    <get uri="/{SubscriberId}/Subscriptions" consumes="application/xml">      <to uri="direct:GetSubscriptions"/>    </get>    <post uri="/{SubscriberId}/Subscriptions" consumes="application/xml">      <to uri="direct:CreateSubscription"/>    </post>  </rest>    <rest path="/SubscriberProfilesJsonConvert/" consumes="application/json">    <get uri="/{SubscriberId}/Subscriptions" consumes="application/json">      <to uri="direct:GetSubscriptionsJsonConvert"/>    </get>  </rest>{noformat} Improvement Allow camel-swagger component to run in an internal container I use camel as a front end to provide a RESTful API in front of a mix of various web services. Requests come in in either xml or json, and are converted to xml, transformed and sent on to the back end services which only support an RPC style.I use rest dsl with configuration via spring xml, and it runs in a java process.{noformat}  <restConfiguration bindingMode="auto" component="jetty" host="localhost" port="18910"/>{noformat}I would love to use the camel-swagger component to provide a live API document of the Rest API's configured, but it seems that it is not possible without configuring a web.xml file.Is this feasible? Is there an alternative to document the Rest API the camel context provides?Camel-context below.{noformat}<beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xmlns:camel="http://camel.apache.org/schema/spring"       xmlns:cxf="http://camel.apache.org/schema/cxf"       xmlns:context="http://www.springframework.org/schema/context"       xsi:schemaLocation="       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd">                    <import resource="classpath:META-INF/spring/jolokia.xml"/>                                                                   <bean id="metricsRoutePolicyFactory" class="org.apache.camel.component.metrics.routepolicy.MetricsRoutePolicyFactory"/>  <camelContext xmlns="http://camel.apache.org/schema/spring">    <properties>        <property key="CamelLogDebugBodyStreams" value="true"/>   </properties>    <propertyPlaceholder location="classpath:incident.properties,file:target/custom.properties" id="properties"/>    	<endpoint uri="jetty:http://localhost:28950/ig?bridgeEndpoint=true" id="jsonEndpoint"/>	<endpoint uri="cxf:http://localhost:28960/ig?dataFormat=PAYLOAD&amp;wsdlURL=http://localhost:28960/ig?WSDL&amp;loggingFeatureEnabled=true" id="soapEndpoint"/>         	<dataFormats>    		<xmljson id="xmljson" forceTopLevelObject="true" removeNamespacePrefixes="true"/>    		<xmljson id="xmljsonWithOptions" trimSpaces="true" skipNamespaces="true"             removeNamespacePrefixes="true"/>	</dataFormats>    <restConfiguration bindingMode="auto" component="jetty" host="localhost" port="18910"/>  <rest path="/SubscriberProfilesJson/" consumes="application/json">    <get uri="/{SubscriberId}">      <to uri="direct:GetProfileJson"/>    </get>    <post uri="/{SubscriberId}/Subscriptions" consumes="application/json">      <to uri="direct:CreateSubscriptionJson"/>    </post>    <get uri="/{SubscriberId}/Subscriptions" consumes="application/json">      <to uri="direct:GetSubscriptionsJson"/>    </get>  </rest>    <rest path="/SubscriberProfilesXml/" consumes="application/xml">    <get uri="/{SubscriberId}">      <to uri="direct:GetProfile"/>    </get>    <get uri="/{SubscriberId}/Subscriptions" consumes="application/xml">      <to uri="direct:GetSubscriptions"/>    </get>    <post uri="/{SubscriberId}/Subscriptions" consumes="application/xml">      <to uri="direct:CreateSubscription"/>    </post>  </rest>    <rest path="/SubscriberProfilesJsonConvert/" consumes="application/json">    <get uri="/{SubscriberId}/Subscriptions" consumes="application/json">      <to uri="direct:GetSubscriptionsJsonConvert"/>    </get>  </rest>{noformat}
CAMEL-8544 Camel - Dynamic router - unsupported cacheSize attribute Dynamic Router pattern does not contain attribute cacheSize but RecipientList and Routing slip already support it. Improvement Camel - Dynamic router - unsupported cacheSize attribute Dynamic Router pattern does not contain attribute cacheSize but RecipientList and Routing slip already support it.
CAMEL-8541 Camel main TestSupport class is incompatible with the CDI specification JUnit4 test support class (org.apache.camel.test.junit4.TestSupport) contains the following declaration:{noformat}    // CHECKSTYLE:OFF    @Rule    public TestName testName = new TestName();    // CHECKSTYLE:ON{noformat}In addition to being a terrible idea overall, this public field also breaks CDI integration, as any tests attempted to be bootstrapped in CDI will throw the following error (WELD trace is shown for an example):{noformat}org.jboss.weld.exceptions.DefinitionException: WELD-000075: Normal scoped managed bean implementation class has a public field:  [EnhancedAnnotatedFieldImpl] @Rule public com.netotc.ha.route.TestCDI.testName	at org.jboss.weld.bean.ManagedBean.checkBeanImplementation(ManagedBean.java:227)	at org.jboss.weld.bean.AbstractClassBean.internalInitialize(AbstractClassBean.java:74)	at org.jboss.weld.bean.ManagedBean.internalInitialize(ManagedBean.java:105)	at org.jboss.weld.bean.RIBean.initialize(RIBean.java:66)	at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$5.doWork(ConcurrentBeanDeployer.java:121)	at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$5.doWork(ConcurrentBeanDeployer.java:118)	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:60)	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:53)	at java.util.concurrent.FutureTask.run(FutureTask.java:262)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)	at java.lang.Thread.run(Thread.java:745){noformat}Suggesting to create a getter for this field, making the field private, and moving the @Rule annotation to the getter. Improvement Camel main TestSupport class is incompatible with the CDI specification JUnit4 test support class (org.apache.camel.test.junit4.TestSupport) contains the following declaration:{noformat}    // CHECKSTYLE:OFF    @Rule    public TestName testName = new TestName();    // CHECKSTYLE:ON{noformat}In addition to being a terrible idea overall, this public field also breaks CDI integration, as any tests attempted to be bootstrapped in CDI will throw the following error (WELD trace is shown for an example):{noformat}org.jboss.weld.exceptions.DefinitionException: WELD-000075: Normal scoped managed bean implementation class has a public field:  [EnhancedAnnotatedFieldImpl] @Rule public com.netotc.ha.route.TestCDI.testName	at org.jboss.weld.bean.ManagedBean.checkBeanImplementation(ManagedBean.java:227)	at org.jboss.weld.bean.AbstractClassBean.internalInitialize(AbstractClassBean.java:74)	at org.jboss.weld.bean.ManagedBean.internalInitialize(ManagedBean.java:105)	at org.jboss.weld.bean.RIBean.initialize(RIBean.java:66)	at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$5.doWork(ConcurrentBeanDeployer.java:121)	at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$5.doWork(ConcurrentBeanDeployer.java:118)	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:60)	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:53)	at java.util.concurrent.FutureTask.run(FutureTask.java:262)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)	at java.lang.Thread.run(Thread.java:745){noformat}Suggesting to create a getter for this field, making the field private, and moving the @Rule annotation to the getter.
CAMEL-8537 CamelHazelcast component should create its own HZ instance only if it's not provided HiCurrently Hazelcast component creates its own HZ instance regardless if a reference to a HZ instance is provided or not. So in the case of a reference of HZ instance is provided, the one created by the component does not get shutdown - see below code snippet, doesn't get shutdown. So one end up with multipole instances.I believe the component should not create its own instance at the doStart() method. It should first check if a reference to HZ instance is provided, if yes then use it and if not create its own. I have made the changes to reflect the correct behaviour described above. The changes will make sure only one instance of HZ is created. Also, added the ability to reference HZ instance by its name.{panel:title=What remains?|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1|bgColor=#FFFFCE}* Update the wiki to show how to reference HZ by its name* Update the wiki to show the newly introduced parameter (hazelcastInstanceName)* Update the wiki to ideally show an example of how to publish HZ instance as an OSGI service for reuse by multiple bundles.{panel}{panel:title=Changes made|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1|bgColor=#FFFFCE}* No longer the component creates its own HZ instance in doStart() method.* When the component is initialised, only one instance is either been created or use the referenced on in the endpoint.* Ability to reference HZ instance by its name. This will serve the use case whereby the hazelcast cluster is running remotely or not part of the camel context.{panel}{code:title=HazelcastComponent.java|borderStyle=solid} @Override    public void doStart() throws Exception {        super.doStart();        if (hazelcastInstance == null) {            createOwnInstance = true;            hazelcastInstance = createOwnInstance();        }    }{code}I have created a pull request for this, details can be seen here: https://github.com/apache/camel/pull/443 Improvement CamelHazelcast component should create its own HZ instance only if it's not provided HiCurrently Hazelcast component creates its own HZ instance regardless if a reference to a HZ instance is provided or not. So in the case of a reference of HZ instance is provided, the one created by the component does not get shutdown - see below code snippet, doesn't get shutdown. So one end up with multipole instances.I believe the component should not create its own instance at the doStart() method. It should first check if a reference to HZ instance is provided, if yes then use it and if not create its own. I have made the changes to reflect the correct behaviour described above. The changes will make sure only one instance of HZ is created. Also, added the ability to reference HZ instance by its name.{panel:title=What remains?|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1|bgColor=#FFFFCE}* Update the wiki to show how to reference HZ by its name* Update the wiki to show the newly introduced parameter (hazelcastInstanceName)* Update the wiki to ideally show an example of how to publish HZ instance as an OSGI service for reuse by multiple bundles.{panel}{panel:title=Changes made|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1|bgColor=#FFFFCE}* No longer the component creates its own HZ instance in doStart() method.* When the component is initialised, only one instance is either been created or use the referenced on in the endpoint.* Ability to reference HZ instance by its name. This will serve the use case whereby the hazelcast cluster is running remotely or not part of the camel context.{panel}{code:title=HazelcastComponent.java|borderStyle=solid} @Override    public void doStart() throws Exception {        super.doStart();        if (hazelcastInstance == null) {            createOwnInstance = true;            hazelcastInstance = createOwnInstance();        }    }{code}I have created a pull request for this, details can be seen here: https://github.com/apache/camel/pull/443
CAMEL-8536 Using JCR API 2.0 jar which is already OSGi bundle Current ServiceMix JCR API 2.0 bundle 2.4 is not generated right. AS the JCR API bundle is already OSGi bundle, we should use it directly.BTW, I checked the code of camel-jcr, the user need to setup the Repository directly to the JCR endpoint, so we don't need to leverage the service locator lookup feature that servicemix spec provides. Improvement Using JCR API 2.0 jar which is already OSGi bundle Current ServiceMix JCR API 2.0 bundle 2.4 is not generated right. AS the JCR API bundle is already OSGi bundle, we should use it directly.BTW, I checked the code of camel-jcr, the user need to setup the Repository directly to the JCR endpoint, so we don't need to leverage the service locator lookup feature that servicemix spec provides.
CAMEL-8531 Make it easy to get the management mbean for a given process by its id As we primary have the performance stats and whatnot in JMX MBeans that are registered in the mbean server, end users would need to use the clunky JMX API to lookup the mbean for a process id.From Java code, you may just want to easily grab the mbean. For example:{code}ManagedAggregateProcessorMBean mbean = context.getManagedProcessor("myAggregator", ManagedAggregateProcessorMBean.class);{code}Then you have from java code, all the power of the mbean to get any kind of statistics you want, just like from JMX. New Feature Make it easy to get the management mbean for a given process by its id As we primary have the performance stats and whatnot in JMX MBeans that are registered in the mbean server, end users would need to use the clunky JMX API to lookup the mbean for a process id.From Java code, you may just want to easily grab the mbean. For example:{code}ManagedAggregateProcessorMBean mbean = context.getManagedProcessor("myAggregator", ManagedAggregateProcessorMBean.class);{code}Then you have from java code, all the power of the mbean to get any kind of statistics you want, just like from JMX.
CAMEL-8528 rest-dsl - Allow producers to control what content-type header to return For example having{code}                rest("book").produces("application/json")                    .get("/order/{id}")                        .to("bean:bookService?method=getOrder");{code}You may want this rest service to return application/json as the content-type header.We should have an option that control what behavior to use- always use - use if no existing header- off Improvement rest-dsl - Allow producers to control what content-type header to return For example having{code}                rest("book").produces("application/json")                    .get("/order/{id}")                        .to("bean:bookService?method=getOrder");{code}You may want this rest service to return application/json as the content-type header.We should have an option that control what behavior to use- always use - use if no existing header- off
CAMEL-8527 Processor in routes should be IdAware so we can easily map from/to its model definition When the routes are created based on the model, the processors do not include information from which model it was created. We should introduce IdAware so we can inject the id, and then allow the processor to find its model etc. Improvement Processor in routes should be IdAware so we can easily map from/to its model definition When the routes are created based on the model, the processors do not include information from which model it was created. We should introduce IdAware so we can inject the id, and then allow the processor to find its model etc.
CAMEL-8526 EIPs - Expose more statistics for the different EIPs in Java and JMX Like CAMEL-8525 we should have more ManagedXXXMBean that include statics about the given EIP. This allows end users to gain even more insight to the various EIPs and how the operate at runtime.The filter EIP can have- number of messages filtered- number of messages not filteredThe CBR could have a break down per predicate which matchedThe resequencer could have a statics with which id is currently missing, and the likesThe throttler could have statics about number of messages hold back being throttled currently, and time until next timeslot opens, and so forthThe delayer similar to the throttler, eg number of messages hold back being delated, and time left in the timeslotThe idempotent consumer could have statics about how many idempotent messages arrived, and number of keys in the repo and so forth. Improvement EIPs - Expose more statistics for the different EIPs in Java and JMX Like CAMEL-8525 we should have more ManagedXXXMBean that include statics about the given EIP. This allows end users to gain even more insight to the various EIPs and how the operate at runtime.The filter EIP can have- number of messages filtered- number of messages not filteredThe CBR could have a break down per predicate which matchedThe resequencer could have a statics with which id is currently missing, and the likesThe throttler could have statics about number of messages hold back being throttled currently, and time until next timeslot opens, and so forthThe delayer similar to the throttler, eg number of messages hold back being delated, and time left in the timeslotThe idempotent consumer could have statics about how many idempotent messages arrived, and number of keys in the repo and so forth.
CAMEL-8525 Aggregate - Expose statistics about completed exchanges We should capture statistics in the aggregator so we can see number of completed exchanges by completion type- size- timeout- forcedAnd other relevant stats. Improvement Aggregate - Expose statistics about completed exchanges We should capture statistics in the aggregator so we can see number of completed exchanges by completion type- size- timeout- forcedAnd other relevant stats.
CAMEL-8522 Set OriginalDestination AMQ message property before sending it to DLQ Can we consider setting OriginalDestination property on the ActiveMQMessage when sending it to the DLQ in Camel?That would be useful for tools like Hawt.io or FMC. For example FMC relies on the OriginalDestination to provide "retry" functionality. Currently Camel doesn't set OriginalDestination, so we can't retry the delivery of the AMQ messages from Camel DLQ. Improvement Set OriginalDestination AMQ message property before sending it to DLQ Can we consider setting OriginalDestination property on the ActiveMQMessage when sending it to the DLQ in Camel?That would be useful for tools like Hawt.io or FMC. For example FMC relies on the OriginalDestination to provide "retry" functionality. Currently Camel doesn't set OriginalDestination, so we can't retry the delivery of the AMQ messages from Camel DLQ.
CAMEL-8513 FTP consumer - Add option to use a larger buffer size so download is faster It seems ftp downloads can be slow out of the box as the ftp client uses an internal small buffer.We could configure the bufferSize of the ftp client to use the bufferSize option from the ftp endpoint which is 128kb by default.http://camel.465427.n5.nabble.com/Slow-FTP-tp5764223.html Improvement FTP consumer - Add option to use a larger buffer size so download is faster It seems ftp downloads can be slow out of the box as the ftp client uses an internal small buffer.We could configure the bufferSize of the ftp client to use the bufferSize option from the ftp endpoint which is 128kb by default.http://camel.465427.n5.nabble.com/Slow-FTP-tp5764223.html
CAMEL-8512 Simple - Add exchange as function to access the exchange easily To allow the simple language to access the exchange instance, and also use OGNL on the instance.See nabblehttp://camel.465427.n5.nabble.com/Does-the-Simple-language-have-an-easy-way-to-get-the-current-exchange-object-tp5764371.html Improvement Simple - Add exchange as function to access the exchange easily To allow the simple language to access the exchange instance, and also use OGNL on the instance.See nabblehttp://camel.465427.n5.nabble.com/Does-the-Simple-language-have-an-easy-way-to-get-the-current-exchange-object-tp5764371.html
CAMEL-8511 Properties component - Add encoding option to use when reading the properties files See nabblehttp://camel.465427.n5.nabble.com/Camel-Property-UTF-8-issues-tp5764281p5764291.html Improvement Properties component - Add encoding option to use when reading the properties files See nabblehttp://camel.465427.n5.nabble.com/Camel-Property-UTF-8-issues-tp5764281p5764291.html
CAMEL-8509 camel-catalog - Add api to parse endpoint uri and reverse  So tooling and camel commands can easier work and understand endpoint uris. So they can parse the uri and map that as options from the schema model and vice versa. Improvement camel-catalog - Add api to parse endpoint uri and reverse  So tooling and camel commands can easier work and understand endpoint uris. So they can parse the uri and map that as options from the schema model and vice versa.
CAMEL-8507 camel-rabbitmq - Support for the mandatory and immediate flags Producers should be able to publish AMQP messages with the immediate and/or the mandatory flags (see https://www.rabbitmq.com/amqp-0-9-1-reference.html#basic.publish.mandatory). Ideally, this should be configurable for publisher (with an URI parameter) and overridable for each message (with a Camel message header). New Feature camel-rabbitmq - Support for the mandatory and immediate flags Producers should be able to publish AMQP messages with the immediate and/or the mandatory flags (see https://www.rabbitmq.com/amqp-0-9-1-reference.html#basic.publish.mandatory). Ideally, this should be configurable for publisher (with an URI parameter) and overridable for each message (with a Camel message header).
CAMEL-8503 camel-jms - Have replyTo options for concurrent consumers See nabblehttp://camel.465427.n5.nabble.com/Camel-ActiveMQ-In-OUT-endpoint-creates-additional-consumers-on-response-queue-which-are-more-than-mas-tp5764288.htmlYou may want to have different number of concurrent consumers for a request/reply over JMS, than a regular from(jms) has.In older versions of Camel the reply to was always 1 consumer. But today it uses the concurrentConsumers option from JMS component / endpoint.  Improvement camel-jms - Have replyTo options for concurrent consumers See nabblehttp://camel.465427.n5.nabble.com/Camel-ActiveMQ-In-OUT-endpoint-creates-additional-consumers-on-response-queue-which-are-more-than-mas-tp5764288.htmlYou may want to have different number of concurrent consumers for a request/reply over JMS, than a regular from(jms) has.In older versions of Camel the reply to was always 1 consumer. But today it uses the concurrentConsumers option from JMS component / endpoint. 
CAMEL-8501 BOM does not publish restlet dependencies camel-restlet also incorrectly has a dependency on the osgi variants of restlet. this leads to no source availability in the dep tree. CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/432 Wish BOM does not publish restlet dependencies camel-restlet also incorrectly has a dependency on the osgi variants of restlet. this leads to no source availability in the dep tree. CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/432
CAMEL-8497 Add extra capabilities to the github component To extend the use cases that the github component can be used for, we should add the following capabilities:- able to set the 'state' on a commit associated with a PR - this enables the "All is well" green tick to be added to the PR- retrieve list of files (summary details) associated with PR- get a specific file content Improvement Add extra capabilities to the github component To extend the use cases that the github component can be used for, we should add the following capabilities:- able to set the 'state' on a commit associated with a PR - this enables the "All is well" green tick to be added to the PR- retrieve list of files (summary details) associated with PR- get a specific file content
CAMEL-8491 Camel POJO producer/consumer should defer starting until CamelContext is starting See SOhttp://stackoverflow.com/questions/29031456/why-does-this-apache-camel-intercept-not-workWhen using @Produce @Consume and other POJO injected resources they may be started during the injection phase. We should defer starting till CamelContext has started other resources, and its routes, so they are ready before the POJO resources.For example this allows interceptors and whatnot to be properly initialized at first.So we should have some api on CamelContext these POJO resources can register and then let CamelContext handle their lifecycle.This also aids to ensure these resources gets shutdown when CamelContext shutdown itself also. Improvement Camel POJO producer/consumer should defer starting until CamelContext is starting See SOhttp://stackoverflow.com/questions/29031456/why-does-this-apache-camel-intercept-not-workWhen using @Produce @Consume and other POJO injected resources they may be started during the injection phase. We should defer starting till CamelContext has started other resources, and its routes, so they are ready before the POJO resources.For example this allows interceptors and whatnot to be properly initialized at first.So we should have some api on CamelContext these POJO resources can register and then let CamelContext handle their lifecycle.This also aids to ensure these resources gets shutdown when CamelContext shutdown itself also.
CAMEL-8489 camel-sjms - Allow to create empty message for null body Add support for allowNullBody which the regular camel-jms has.See also nabblehttp://camel.465427.n5.nabble.com/Camel-SJMS-Null-pointer-exception-when-sending-a-message-proposed-patch-tp5764093.html Improvement camel-sjms - Allow to create empty message for null body Add support for allowNullBody which the regular camel-jms has.See also nabblehttp://camel.465427.n5.nabble.com/Camel-SJMS-Null-pointer-exception-when-sending-a-message-proposed-patch-tp5764093.html
CAMEL-8488 Java DSL - Improved CBR to detect if endChoice vs end was invalid used See SOhttp://stackoverflow.com/questions/29044571/camel-java-dsl-route-with-choice-proceeds-only-for-last-conditionUsers of Java DSL may improperly use the wrong end when ending the entire choice by using endChoice which then would by default add further outputs to the last clause, eg last when/otherwise.We should detect this so when using endChoice the next output must be when/otherwise (or another end) Improvement Java DSL - Improved CBR to detect if endChoice vs end was invalid used See SOhttp://stackoverflow.com/questions/29044571/camel-java-dsl-route-with-choice-proceeds-only-for-last-conditionUsers of Java DSL may improperly use the wrong end when ending the entire choice by using endChoice which then would by default add further outputs to the last clause, eg last when/otherwise.We should detect this so when using endChoice the next output must be when/otherwise (or another end)
CAMEL-8487 Custom arguments to RabbitMQ queues I wanted to use RabbitMQ as a priority queue which required passing custom arguments during queue creation. The camel-rabbitmq component version 2.14.1 doesn't provide this capability. New Feature Custom arguments to RabbitMQ queues I wanted to use RabbitMQ as a priority queue which required passing custom arguments during queue creation. The camel-rabbitmq component version 2.14.1 doesn't provide this capability.
CAMEL-8486 Producer should not bind exchange to queue The {{RabbitMQConsumer}} and {{RabbitMQProducer}} classes both use the {{declareExchangeAndQueue(Channel)}} method of the {{RabbitMQEndpoint}} class, where an exchange always is declared and when the {{getQueue}} method does not return {{null}} (line 222) a queue is declared and bound to the exchange.First the {{getQueue}} method cannot return {{null}}, since the underlying parameter is initialized at line 75 and as far as I know cannot be set to {{null}} by an URI specification.The fact that both the consumer and producer _connect_ the same way is wrong I think. A producer should always publish to a queue or an exchange, while a consumer always consumes from a queue, which optionally can be bound to an exchange.I would suggest to make separate declare methods for consumers and producers.For consumers:* always declare exchange (because of component URI specification)* always declare queue (specified name or _random_)* bind queue to exchange** basicConsume(<queue>, ...)For producers:* only declare exchange when no queue specified** basicPublish(<exchange>, routingKey, ...)* only declare queue when specified (ignore exchange in URI specification)** basicPublish("", <queue>, ...)Unless the {{declare=false}} property is specified ofcourse. Note that the binding still needs to be performed for a consumer (even when the queue and the exchange are not declared)With this the processing of the camel exchange for a producer might have to be changed also; the current implementation always publishes to the exchange, but it has to publish to the queue (exchange="", routingKey=<queue>) in the case a queue is specified.Because the current implementation also creates a binding between a (random named) queue and an exchange the RabbitMQ broker is left with unused bounded queues every time the application is started, which results in a new random queue being created. The created queues with their bindings are not deleted after the application stops (might be a bug in the broker. I'm not sure). Improvement Producer should not bind exchange to queue The {{RabbitMQConsumer}} and {{RabbitMQProducer}} classes both use the {{declareExchangeAndQueue(Channel)}} method of the {{RabbitMQEndpoint}} class, where an exchange always is declared and when the {{getQueue}} method does not return {{null}} (line 222) a queue is declared and bound to the exchange.First the {{getQueue}} method cannot return {{null}}, since the underlying parameter is initialized at line 75 and as far as I know cannot be set to {{null}} by an URI specification.The fact that both the consumer and producer _connect_ the same way is wrong I think. A producer should always publish to a queue or an exchange, while a consumer always consumes from a queue, which optionally can be bound to an exchange.I would suggest to make separate declare methods for consumers and producers.For consumers:* always declare exchange (because of component URI specification)* always declare queue (specified name or _random_)* bind queue to exchange** basicConsume(<queue>, ...)For producers:* only declare exchange when no queue specified** basicPublish(<exchange>, routingKey, ...)* only declare queue when specified (ignore exchange in URI specification)** basicPublish("", <queue>, ...)Unless the {{declare=false}} property is specified ofcourse. Note that the binding still needs to be performed for a consumer (even when the queue and the exchange are not declared)With this the processing of the camel exchange for a producer might have to be changed also; the current implementation always publishes to the exchange, but it has to publish to the queue (exchange="", routingKey=<queue>) in the case a queue is specified.Because the current implementation also creates a binding between a (random named) queue and an exchange the RabbitMQ broker is left with unused bounded queues every time the application is started, which results in a new random queue being created. The created queues with their bindings are not deleted after the application stops (might be a bug in the broker. I'm not sure).
CAMEL-8485 Simple binary operator - Add support for comparing string with enum type See SOhttp://stackoverflow.com/questions/29044571/camel-route-choice-with-when-simple-works-only-for-last-condition?noredirect=1#comment46337406_29044571 Improvement Simple binary operator - Add support for comparing string with enum type See SOhttp://stackoverflow.com/questions/29044571/camel-route-choice-with-when-simple-works-only-for-last-condition?noredirect=1#comment46337406_29044571
CAMEL-8474 Download page title still reads "currently in progress" The title of download page for release 2.15.0 reads "currently in progress" while the release has been done already. Task Download page title still reads "currently in progress" The title of download page for release 2.15.0 reads "currently in progress" while the release has been done already.
CAMEL-8473 DeadLetterChannel - Add onPrepare When using the DLC you may want to prepare the exchange before its sent to the dead letter uri. Today you would need to create a new route, and use direct to link the routes.We should make it easier to plugin a custom processor / bean to do the prepare logic.Some EIPs has a onPrepare option. Improvement DeadLetterChannel - Add onPrepare When using the DLC you may want to prepare the exchange before its sent to the dead letter uri. Today you would need to create a new route, and use direct to link the routes.We should make it easier to plugin a custom processor / bean to do the prepare logic.Some EIPs has a onPrepare option.
CAMEL-8472 Improve test coverage of camel-eip-documentation-enricher-maven-plugin  Currently camel-eip-documentation-enricher-maven-plugin has pretty low test coverage. It would be nice to improve it with adding unit/integration tests. Task Improve test coverage of camel-eip-documentation-enricher-maven-plugin  Currently camel-eip-documentation-enricher-maven-plugin has pretty low test coverage. It would be nice to improve it with adding unit/integration tests.
CAMEL-8468 Usage of camel-xstream depends on TCCL XStream unmarshalling does not respect the ApplicationContextClassLoaderCrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/387 Improvement Usage of camel-xstream depends on TCCL XStream unmarshalling does not respect the ApplicationContextClassLoaderCrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/387
CAMEL-8463 Have Camel Support Method Overloading With Implicit Binding Of Exchange Allow overloading of methods that accept a Camel exchange.Suppose one defines a bean called “helloBean” with the following two methods:{code}public void hello(String first) public void hello(String first, String last) {code}The following Camel route will distinguish one method from the other. {code}from("timer://foo?repeatCount=1").beanRef("helloBean", "hello('Wilma')").beanRef("helloBean", "hello('Wilma','Flintstone')");{code}Now alter the two methods to have them accept a Camel Exchange, as follows:{code}public void hello(String first, Exchange ex1)public void hello(String first, String last, Exchange ex1) {code}The same Camel route will not be able to distinguish one method from the other. The route will throw either an AmbiguousMethodCallException or ParameterBindingException exception. If, on the other hand, you remove one of the methods, and alter the route accordingly, then the route will work just fine and the exchange will be implicitly passed to the method. For example, {code}public void hello(String first, String last, Exchange ex1) from("timer://foo?repeatCount=1").beanRef("helloBean", "hello('Wilma','Flintstone')");{code} Improvement Have Camel Support Method Overloading With Implicit Binding Of Exchange Allow overloading of methods that accept a Camel exchange.Suppose one defines a bean called "helloBean" with the following two methods:{code}public void hello(String first) public void hello(String first, String last) {code}The following Camel route will distinguish one method from the other. {code}from("timer://foo?repeatCount=1").beanRef("helloBean", "hello('Wilma')").beanRef("helloBean", "hello('Wilma','Flintstone')");{code}Now alter the two methods to have them accept a Camel Exchange, as follows:{code}public void hello(String first, Exchange ex1)public void hello(String first, String last, Exchange ex1) {code}The same Camel route will not be able to distinguish one method from the other. The route will throw either an AmbiguousMethodCallException or ParameterBindingException exception. If, on the other hand, you remove one of the methods, and alter the route accordingly, then the route will work just fine and the exchange will be implicitly passed to the method. For example, {code}public void hello(String first, String last, Exchange ex1) from("timer://foo?repeatCount=1").beanRef("helloBean", "hello('Wilma','Flintstone')");{code}
CAMEL-8459 Java DSL - Align beanRef as bean to be similar to xml dsl When calling a bean using the bean eip in the Java DSL, then to refer to a bean its named beanRef in Java, where as in XML its just bean.We should align this so its the same. Also for processRef it should just be process. Improvement Java DSL - Align beanRef as bean to be similar to xml dsl When calling a bean using the bean eip in the Java DSL, then to refer to a bean its named beanRef in Java, where as in XML its just bean.We should align this so its the same. Also for processRef it should just be process.
CAMEL-8449 camel-cdi - Support CDI 1.0 We should support a broader range of CDI as 1.2 is very new and many libraries and containers do not support that yet.And CDI 1.2 is compatible with the older versions, so there is no harm. Improvement camel-cdi - Support CDI 1.0 We should support a broader range of CDI as 1.2 is very new and many libraries and containers do not support that yet.And CDI 1.2 is compatible with the older versions, so there is no harm.
CAMEL-8447 Add camel-jetty module to republish the camel-jetty8 jar into maven repo Here we just add the camel-jetty module which is based on the camel-jetty8 to provide the pom backward support, and we can switch the camel-jetty to camel-jetty9 once it is used by default. Improvement Add camel-jetty module to republish the camel-jetty8 jar into maven repo Here we just add the camel-jetty module which is based on the camel-jetty8 to provide the pom backward support, and we can switch the camel-jetty to camel-jetty9 once it is used by default.
CAMEL-8446 Camel Toolbox - Add support for @UriParam / @UriParams on component level See CAMEL-7999 and CAMEL-8444.We should allow options on component level to have same level of information as endpoints.  Improvement Camel Toolbox - Add support for @UriParam / @UriParams on component level See CAMEL-7999 and CAMEL-8444.We should allow options on component level to have same level of information as endpoints. 
CAMEL-8444 Camel Toolbox - Component properties to include setters The component options are currently discovered in apt from fields. But there is a few components that has delegate setters, such as JMS component.We can improve apt to discover those setters as well to be included.Or better to use the same set of @UriParam on component level as well so its the same all over. But that would need to migrate on all the components if going down that path. Improvement Camel Toolbox - Component properties to include setters The component options are currently discovered in apt from fields. But there is a few components that has delegate setters, such as JMS component.We can improve apt to discover those setters as well to be included.Or better to use the same set of @UriParam on component level as well so its the same all over. But that would need to migrate on all the components if going down that path.
CAMEL-8443 Add properties to route via DSL and XML, expose route properties via JMX Allow adding arbitrary String properties to a route, with .routeProperty(name, value) in Java DSL and <routeProperty name="..." value="..."/> in XML.Expose getProperties(), getProperty(String name) and setProperty(String name, String value) for routes in JMX.Our use case:Add documentation to route in code and show it on a graph of Camel contexts, routes and endpoints in a running system. Graph is generated from JMX data.This would be nice data to show on hawtio as well. Although in this case we might want to use an explicit documentation variable rather than a reserved property name.Route has a properties map but that's used internally. These public properties would be held in a new map: publicProperties. Improvement Add properties to route via DSL and XML, expose route properties via JMX Allow adding arbitrary String properties to a route, with .routeProperty(name, value) in Java DSL and <routeProperty name="..." value="..."/> in XML.Expose getProperties(), getProperty(String name) and setProperty(String name, String value) for routes in JMX.Our use case:Add documentation to route in code and show it on a graph of Camel contexts, routes and endpoints in a running system. Graph is generated from JMX data.This would be nice data to show on hawtio as well. Although in this case we might want to use an explicit documentation variable rather than a reserved property name.Route has a properties map but that's used internally. These public properties would be held in a new map: publicProperties.
CAMEL-8441 Add required 3rd party dependencies to the BOM  For wildfly-camel we have to redefine a number of camel 3rd party dependencies like this{code}        <!-- Camel version -->        <version.apache.camel>2.14.1</version.apache.camel>                <!-- Camel 3rd party versions for artefacts that are not defined in the BOM -->        <version.apache.abdera>1.1.3</version.apache.abdera>        <version.apache.activemq>5.10.0</version.apache.activemq>        <version.apache.cxf>3.0.2</version.apache.cxf>        <version.apache.lucene>4.6.1</version.apache.lucene>        <version.apache.mina>2.0.7</version.apache.mina>        <version.beanshell>2.0b5</version.beanshell>        <version.hapi>2.2</version.hapi>{code}These should probably come from the camel BOM  Improvement Add required 3rd party dependencies to the BOM  For wildfly-camel we have to redefine a number of camel 3rd party dependencies like this{code}        <!-- Camel version -->        <version.apache.camel>2.14.1</version.apache.camel>                <!-- Camel 3rd party versions for artefacts that are not defined in the BOM -->        <version.apache.abdera>1.1.3</version.apache.abdera>        <version.apache.activemq>5.10.0</version.apache.activemq>        <version.apache.cxf>3.0.2</version.apache.cxf>        <version.apache.lucene>4.6.1</version.apache.lucene>        <version.apache.mina>2.0.7</version.apache.mina>        <version.beanshell>2.0b5</version.beanshell>        <version.hapi>2.2</version.hapi>{code}These should probably come from the camel BOM 
CAMEL-8440 Components with windows test failures The following components have/may have unit test failures- jms- apns- aws- beanstalk- barcode-elasticsearch- gae- hdfs- hdfs2- mina- mina2- mqtt- quartz2- restlet- univercity-parser- zookeeper Test Components with windows test failures The following components have/may have unit test failures- jms- apns- aws- beanstalk- barcode-elasticsearch- gae- hdfs- hdfs2- mina- mina2- mqtt- quartz2- restlet- univercity-parser- zookeeper
CAMEL-8439 camel-src - Use setAutoStartup(false) instead of skipping start() Instead of skipping Camel context's start() when active property is false, we should call Camel context's setAutoStartup(false). This way Camel context will start without starting any of the routes, and allows us to see and control the "inactive" context through JMX/Jolokia/hawtio. Improvement camel-src - Use setAutoStartup(false) instead of skipping start() Instead of skipping Camel context's start() when active property is false, we should call Camel context's setAutoStartup(false). This way Camel context will start without starting any of the routes, and allows us to see and control the "inactive" context through JMX/Jolokia/hawtio.
CAMEL-8421 Add minimum age option to readLock=changed I'm a fan of noop=true in file consumers since it means I don't have to worry about how many readers I have and where. But eventually I came across a scenario where current features are not sufficient.Let's say we have a source system which writes files with name <timestamp>_something.xml, and it won't use temp files or .done marker files or anything like that. We want to get the latest file as soon as it's created. Consider the following route:{code}from("file:////somewhere/data?noop=true&include=.*_something[.]xml&readLock=changed&sortBy=file:name")	.aggregate(constant(true), new UseLatestAggregationStrategy()).completionFromBatchConsumer()		.to("amq:topic:something");{code}When this route is started it will go through the files in order and get the last one. Then it will wait for new files. This works fine as long as the writer is not "slow".Now, we had cases of incomplete files being read and I was requested to not to read the file before it is 10 minutes old, just in case. If I increase readLockCheckInterval to 10 minutes getting to the latest file at route startup will take close to forever. The current readLock=changed implementation always sleeps for at least one readLockCheckInterval per file.If we had readLockMinAge option to define the minimum age for the target file the consumer could acquire readLock on the first poll and breeze through the files until too young a file is reached.The route below would poll a file every 500ms (default poll delay), while the current readLock=changed would take 1500ms (default poll delay + default readLockCheckInterval) per file. Consumer goes through the files until it hits the end and gets the last one as soon as it becomes old enough.{code}from("file:////somewhere/data?noop=true&include=.*_something[.]xml&readLock=changed&readLockMinAge=600000&sortBy=file:name")	.aggregate(constant(true), new UseLatestAggregationStrategy()).completionFromBatchConsumer()		.to("amq:topic:something");{code} Improvement Add minimum age option to readLock=changed I'm a fan of noop=true in file consumers since it means I don't have to worry about how many readers I have and where. But eventually I came across a scenario where current features are not sufficient.Let's say we have a source system which writes files with name <timestamp>_something.xml, and it won't use temp files or .done marker files or anything like that. We want to get the latest file as soon as it's created. Consider the following route:{code}from("file:////somewhere/data?noop=true&include=.*_something[.]xml&readLock=changed&sortBy=file:name")	.aggregate(constant(true), new UseLatestAggregationStrategy()).completionFromBatchConsumer()		.to("amq:topic:something");{code}When this route is started it will go through the files in order and get the last one. Then it will wait for new files. This works fine as long as the writer is not "slow".Now, we had cases of incomplete files being read and I was requested to not to read the file before it is 10 minutes old, just in case. If I increase readLockCheckInterval to 10 minutes getting to the latest file at route startup will take close to forever. The current readLock=changed implementation always sleeps for at least one readLockCheckInterval per file.If we had readLockMinAge option to define the minimum age for the target file the consumer could acquire readLock on the first poll and breeze through the files until too young a file is reached.The route below would poll a file every 500ms (default poll delay), while the current readLock=changed would take 1500ms (default poll delay + default readLockCheckInterval) per file. Consumer goes through the files until it hits the end and gets the last one as soon as it becomes old enough.{code}from("file:////somewhere/data?noop=true&include=.*_something[.]xml&readLock=changed&readLockMinAge=600000&sortBy=file:name")	.aggregate(constant(true), new UseLatestAggregationStrategy()).completionFromBatchConsumer()		.to("amq:topic:something");{code}
CAMEL-8420 Not possible to use inner classes for Dtos in Camel Swagger If you inline your Dto classes with your services then Camel fails to load them (ClassNotFoundException).Can easily be reproduced by modifying the Camel :: Example :: Serlet REST  example by moving the User class into the UserService and update the UserRoute builder to use the moved type.{code:title=UserService.java|borderStyle=solid}public class UserService {    // use a tree map so they become sorted    private final Map<String, org.apache.camel.example.rest.UserService.User> users = new TreeMap<String, org.apache.camel.example.rest.UserService.User>();    private Random ran = new Random();    public UserService() {        users.put("123", new org.apache.camel.example.rest.UserService.User(123, "John Doe"));        users.put("456", new org.apache.camel.example.rest.UserService.User(456, "Donald Duck"));        users.put("789", new org.apache.camel.example.rest.UserService.User(789, "Slow Turtle"));    }    /**     * Gets a user by the given id     *     * @param id  the id of the user     * @return the user, or <tt>null</tt> if no user exists     */    public org.apache.camel.example.rest.UserService.User getUser(String id) {       ....    }    /**     * List all users     *     * @return the list of all users     */    public Collection<org.apache.camel.example.rest.UserService.User> listUsers() {       ....    }    /**     * Updates or creates the given user     *     * @param user the user     */    public void updateUser(org.apache.camel.example.rest.UserService.User user) {        ....    }    public static class User {        private int id;        private String name;        ........}{code} Improvement Not possible to use inner classes for Dtos in Camel Swagger If you inline your Dto classes with your services then Camel fails to load them (ClassNotFoundException).Can easily be reproduced by modifying the Camel :: Example :: Serlet REST  example by moving the User class into the UserService and update the UserRoute builder to use the moved type.{code:title=UserService.java|borderStyle=solid}public class UserService {    // use a tree map so they become sorted    private final Map<String, org.apache.camel.example.rest.UserService.User> users = new TreeMap<String, org.apache.camel.example.rest.UserService.User>();    private Random ran = new Random();    public UserService() {        users.put("123", new org.apache.camel.example.rest.UserService.User(123, "John Doe"));        users.put("456", new org.apache.camel.example.rest.UserService.User(456, "Donald Duck"));        users.put("789", new org.apache.camel.example.rest.UserService.User(789, "Slow Turtle"));    }    /**     * Gets a user by the given id     *     * @param id  the id of the user     * @return the user, or <tt>null</tt> if no user exists     */    public org.apache.camel.example.rest.UserService.User getUser(String id) {       ....    }    /**     * List all users     *     * @return the list of all users     */    public Collection<org.apache.camel.example.rest.UserService.User> listUsers() {       ....    }    /**     * Updates or creates the given user     *     * @param user the user     */    public void updateUser(org.apache.camel.example.rest.UserService.User user) {        ....    }    public static class User {        private int id;        private String name;        ........}{code}
CAMEL-8416 camel-jetty - Allow multiple restrict headers The option httpMethodRestrict is currently limited to one method. We should allow multiple separated by comma. Improvement camel-jetty - Allow multiple restrict headers The option httpMethodRestrict is currently limited to one method. We should allow multiple separated by comma.
CAMEL-8415 DefaultExchangeHolder - Only transfer primitive headers/properties We should only store the serialized body. And for headers it should only be primitive types. The reason is that headers can be used by components to store transient objects to allow access to JPA entity manager / HTTP servlet requests etc.Its really only the body we want to serialize. And the headers which are primitive types, and String etc. Improvement DefaultExchangeHolder - Only transfer primitive headers/properties We should only store the serialized body. And for headers it should only be primitive types. The reason is that headers can be used by components to store transient objects to allow access to JPA entity manager / HTTP servlet requests etc.Its really only the body we want to serialize. And the headers which are primitive types, and String etc.
CAMEL-8410 Add stream caching for CxfPayload The provided patch adds StreamCache support for CxfPayload objects.It also removes the side effects of the type converters for CxfPayload. As a consequence CxfPayload objects may be read only once if stream caching is disabled. Improvement Add stream caching for CxfPayload The provided patch adds StreamCache support for CxfPayload objects.It also removes the side effects of the type converters for CxfPayload. As a consequence CxfPayload objects may be read only once if stream caching is disabled.
CAMEL-8407 camel-test-karaf - A few test failures camel-itest-karafThese test fails on java 7Failed tests:  CamelGangliaTest.test:32->AbstractFeatureTest.testComponent:74 Cannot get component with name: ganglia  CamelSpringLdapTest.test:32->AbstractFeatureTest.testComponent:74 Cannot get component with name: spring-ldap  CamelSpringWebServiceTest.test:32->AbstractFeatureTest.testComponent:74 Cannot get component with name: spring-ws Test camel-test-karaf - A few test failures camel-itest-karafThese test fails on java 7Failed tests:  CamelGangliaTest.test:32->AbstractFeatureTest.testComponent:74 Cannot get component with name: ganglia  CamelSpringLdapTest.test:32->AbstractFeatureTest.testComponent:74 Cannot get component with name: spring-ldap  CamelSpringWebServiceTest.test:32->AbstractFeatureTest.testComponent:74 Cannot get component with name: spring-ws
CAMEL-8406 Camel Toolbox - Jetty8/Jetty9 special As we have special about jetty8 and jetty9 using same component name, eg jetty.We need some special handling in the apt / maven tooling to deal with this. Sub-task Camel Toolbox - Jetty8/Jetty9 special As we have special about jetty8 and jetty9 using same component name, eg jetty.We need some special handling in the apt / maven tooling to deal with this.
CAMEL-8400 camel-mqtt: multiple topic subscriptions I'm beginning to work with MQTT brokers, and have found that having an endpoint only able to subscribe to a single topic is limiting.  Looking at the code, the underlying implementation (fusesource mqtt-client) accepts an array of Topics when creating a subscription.  I have modified the camel-mqtt component to allow for a "subscribeTopicNames" option, which expects a comma-delimited list of topics that will be subscribed.I'm attaching a patch (after creating the issue) that includes additional unit tests for this functionality.  It would be really great if this could be accepted before the 2.14.2 release is cut!A couple of notes:# If the new "subscribeTopicNames" option is specified, anything specified for the existing "subscribeTopicName" option will be ignored.  Long term, it doesn't make sense to maintain both options.  Should the singular version be deprecated?  If so, I can submit another patch that deprecates that option within the code.# I don't know how to submit a "patch" for the component documentation.  Here's something that would work:||Property||Default||Description|||subscribeTopicName| |The name of the Topic to subscribe to for messages. _Deprecated since 2.14.2 (use subscribeTopicNames instead)._||subscribeTopicNames| |*Since Camel 2.14.2.*  A comma-delimited list of Topics to subscribe to for messages.  \\ \\ Note that each item of this list can contain MQTT wildcards ('\+' and/or '#'), in order to subscribe to topics matching a certain pattern within a hierarchy.  For example, '\+' is a wildcard for all topics at a level within the hierarchy, so if a broker has topics "topics/one" and "topics/two", then "topics/\+" can be used to subscribe to both.  A caveat to consider here is that if the broker adds "topics/three", the route would also begin to receive messages from that topic.| Improvement camel-mqtt: multiple topic subscriptions I'm beginning to work with MQTT brokers, and have found that having an endpoint only able to subscribe to a single topic is limiting.  Looking at the code, the underlying implementation (fusesource mqtt-client) accepts an array of Topics when creating a subscription.  I have modified the camel-mqtt component to allow for a "subscribeTopicNames" option, which expects a comma-delimited list of topics that will be subscribed.I'm attaching a patch (after creating the issue) that includes additional unit tests for this functionality.  It would be really great if this could be accepted before the 2.14.2 release is cut!A couple of notes:# If the new "subscribeTopicNames" option is specified, anything specified for the existing "subscribeTopicName" option will be ignored.  Long term, it doesn't make sense to maintain both options.  Should the singular version be deprecated?  If so, I can submit another patch that deprecates that option within the code.# I don't know how to submit a "patch" for the component documentation.  Here's something that would work:||Property||Default||Description|||subscribeTopicName| |The name of the Topic to subscribe to for messages. _Deprecated since 2.14.2 (use subscribeTopicNames instead)._||subscribeTopicNames| |*Since Camel 2.14.2.*  A comma-delimited list of Topics to subscribe to for messages.  \\ \\ Note that each item of this list can contain MQTT wildcards ('\+' and/or '#'), in order to subscribe to topics matching a certain pattern within a hierarchy.  For example, '\+' is a wildcard for all topics at a level within the hierarchy, so if a broker has topics "topics/one" and "topics/two", then "topics/\+" can be used to subscribe to both.  A caveat to consider here is that if the broker adds "topics/three", the route would also begin to receive messages from that topic.|
CAMEL-8399 Support setMode in JsonDataFormat CAMEL-7592 introduced the ability to customise the XStream mode, however org.apache.camel.dataformat.xstream.JsonDataFormat#createXStream still sets the mode explicitly to NO_REFERENCES.I think someone just has to update the method to do the following instead:{code}                if (getMode() != null) {                    xs.setMode(getModeFromString(getMode()));                }{code} Improvement Support setMode in JsonDataFormat CAMEL-7592 introduced the ability to customise the XStream mode, however org.apache.camel.dataformat.xstream.JsonDataFormat#createXStream still sets the mode explicitly to NO_REFERENCES.I think someone just has to update the method to do the following instead:{code}                if (getMode() != null) {                    xs.setMode(getModeFromString(getMode()));                }{code}
CAMEL-8394 camel-docker - DockerConfiguration should not keep client state The configuration classes should be pure configuration, eg for users to configure options.Any state such as client in use et all should be stored on endpoint or component.eg move the options from DockerClientProfile to DockerConfiguration so there is only 1 class.And move the map with DockerClient to the component. Improvement camel-docker - DockerConfiguration should not keep client state The configuration classes should be pure configuration, eg for users to configure options.Any state such as client in use et all should be stored on endpoint or component.eg move the options from DockerClientProfile to DockerConfiguration so there is only 1 class.And move the map with DockerClient to the component.
CAMEL-8392 Upgrade Camel-Gora to Gora 0.6 We recently release Apache Gora 0.6 and we are doing the usual rounds now trying to identify which projects consume Gora and require updating.The Camel-Gora Camel component relies upon Gora 0.4 so the upgrade will be a very good step forward for the Camel-Gora components.I am tagging in [~ipolyzos] here because he was the original author of the component. [~ipolyzos], I am not suggesting that you do this upgrade, I am merely tagging you here for awareness. :)BTW, it also appears that there is no tag for camel-gora Improvement Upgrade Camel-Gora to Gora 0.6 We recently release Apache Gora 0.6 and we are doing the usual rounds now trying to identify which projects consume Gora and require updating.The Camel-Gora Camel component relies upon Gora 0.4 so the upgrade will be a very good step forward for the Camel-Gora components.I am tagging in [~ipolyzos] here because he was the original author of the component. [~ipolyzos], I am not suggesting that you do this upgrade, I am merely tagging you here for awareness. :)BTW, it also appears that there is no tag for camel-gora
CAMEL-8391 camel-mina / camel-mina2 - The new client mode fails test and seems to accept ghose The client mode test fails sometimes, getting 2 messages. The 2nd message has empty body. Test camel-mina / camel-mina2 - The new client mode fails test and seems to accept ghose The client mode test fails sometimes, getting 2 messages. The 2nd message has empty body.
CAMEL-8390 camel-cmis - Cannot test under Java8 Tests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 6.929 sec <<< FAILURE! - in org.apache.camel.component.cmis.CMISQueryProducerTestgetResultCountFromHeader(org.apache.camel.component.cmis.CMISQueryProducerTest)  Time elapsed: 0.423 sec  <<< ERROR!java.lang.NoClassDefFoundError: Could not initialize class org.apache.chemistry.opencmis.commons.impl.JaxBHelper	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.unmarshalElement(AtomPubParser.java:396)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseWorkspaceElement(AtomPubParser.java:448)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseWorkspace(AtomPubParser.java:221)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseServiceDoc(AtomPubParser.java:191)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parse(AtomPubParser.java:138)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.parse(AbstractAtomPubService.java:529)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.getRepositoriesInternal(AbstractAtomPubService.java:719)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.RepositoryServiceImpl.getRepositoryInfos(RepositoryServiceImpl.java:59)	at org.apache.chemistry.opencmis.client.bindings.impl.RepositoryServiceImpl.getRepositoryInfos(RepositoryServiceImpl.java:85)	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.getRepositories(SessionFactoryImpl.java:109)	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.getRepositories(SessionFactoryImpl.java:96)	at org.apache.camel.component.cmis.CMISTestSupport.createSession(CMISTestSupport.java:102)	at org.apache.camel.component.cmis.CMISTestSupport.deleteAllContent(CMISTestSupport.java:79)	at org.apache.camel.component.cmis.CMISTestSupport.setUp(CMISTestSupport.java:166)	at org.apache.camel.component.cmis.CMISQueryProducerTest.setUp(CMISQueryProducerTest.java:36) Test camel-cmis - Cannot test under Java8 Tests run: 4, Failures: 0, Errors: 4, Skipped: 0, Time elapsed: 6.929 sec <<< FAILURE! - in org.apache.camel.component.cmis.CMISQueryProducerTestgetResultCountFromHeader(org.apache.camel.component.cmis.CMISQueryProducerTest)  Time elapsed: 0.423 sec  <<< ERROR!java.lang.NoClassDefFoundError: Could not initialize class org.apache.chemistry.opencmis.commons.impl.JaxBHelper	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.unmarshalElement(AtomPubParser.java:396)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseWorkspaceElement(AtomPubParser.java:448)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseWorkspace(AtomPubParser.java:221)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parseServiceDoc(AtomPubParser.java:191)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AtomPubParser.parse(AtomPubParser.java:138)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.parse(AbstractAtomPubService.java:529)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.getRepositoriesInternal(AbstractAtomPubService.java:719)	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.RepositoryServiceImpl.getRepositoryInfos(RepositoryServiceImpl.java:59)	at org.apache.chemistry.opencmis.client.bindings.impl.RepositoryServiceImpl.getRepositoryInfos(RepositoryServiceImpl.java:85)	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.getRepositories(SessionFactoryImpl.java:109)	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.getRepositories(SessionFactoryImpl.java:96)	at org.apache.camel.component.cmis.CMISTestSupport.createSession(CMISTestSupport.java:102)	at org.apache.camel.component.cmis.CMISTestSupport.deleteAllContent(CMISTestSupport.java:79)	at org.apache.camel.component.cmis.CMISTestSupport.setUp(CMISTestSupport.java:166)	at org.apache.camel.component.cmis.CMISQueryProducerTest.setUp(CMISQueryProducerTest.java:36)
CAMEL-8389 camel-jackson - Allow to configure jackson object mapper from XML DSL We should make it easier to configure jackson as a <dataFormat> using the XML DSL.Its ObjectMapper has a fluent builder using with and without to turn things on or off. We would need some kind of mapping to this from the XML DSL, so end users can configure this. Improvement camel-jackson - Allow to configure jackson object mapper from XML DSL We should make it easier to configure jackson as a <dataFormat> using the XML DSL.Its ObjectMapper has a fluent builder using with and without to turn things on or off. We would need some kind of mapping to this from the XML DSL, so end users can configure this.
CAMEL-8387 File consumer fails to acquire lock if readLockTimeout >= readLockCheckInterval If the {{readLockCheckInterval}} is greater than or equal to {{readLockTimeout}} when using {{readLock=changed}}, the consumer never picks up any files.So this URI will triggers the behaviour:{{file:some-folder?readLock=changed&readLockCheckInterval=1000&readLockTimeout=500}}The problem is that {{FileChangedExclusiveReadLockStrategy}} only takes {{readLockTimeout}} into account. 1. {{FileChangedExclusiveReadLockStrategy}} get the last modified and size of the file.2. It sleeps for the duration configured in {{readLockCheckInterval}}3. Now the timeout configured in {{readLockTimeout}} is exceeded, so {{FileChangedExclusiveReadLockStrategy}} logs "Cannot acquire read lock within.." and returns false  Improvement File consumer fails to acquire lock if readLockTimeout >= readLockCheckInterval If the {{readLockCheckInterval}} is greater than or equal to {{readLockTimeout}} when using {{readLock=changed}}, the consumer never picks up any files.So this URI will triggers the behaviour:{{file:some-folder?readLock=changed&readLockCheckInterval=1000&readLockTimeout=500}}The problem is that {{FileChangedExclusiveReadLockStrategy}} only takes {{readLockTimeout}} into account. 1. {{FileChangedExclusiveReadLockStrategy}} get the last modified and size of the file.2. It sleeps for the duration configured in {{readLockCheckInterval}}3. Now the timeout configured in {{readLockTimeout}} is exceeded, so {{FileChangedExclusiveReadLockStrategy}} logs "Cannot acquire read lock within.." and returns false 
CAMEL-8386 Wiretap - Should copy stream cache when tapping Related to CAMEL-8284. Improvement Wiretap - Should copy stream cache when tapping Related to CAMEL-8284.
CAMEL-8384 2.14.2 Snapshot builds missing sources/javadoc jars From a message I sent last night to dev@camel.apache.org:{quote}I’m using the 2.14.2-SNAPSHOT builds at the moment (need a fix I submitted after 2.14.1).  Since I started using the snapshot builds, whenever I click “download sources” in my IDE (so I can view documentation/source as I code against the API), I see the “sources not found” message.  I originally thought the sources were not being built for snapshot builds.https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.14.2-SNAPSHOT/However, after checking the repo with the link above, I was able to see that some builds include the sources and javadoc, and some don’t.  I also noticed that there seem to be two nightly builds which complete 30-60 minutes apart each night, where the first build includes the sources and javadoc, but the second build does not.  Here are the available builds, the time they completed, and whether the sources/javadoc jars were included:Fri Feb 13 buildsBuild 64   03:18 UTC   yesBuild 65   03:50 UTC   noSat Feb 14 build (just one build for some reason)Build 66   06:33 UTC   yesSun Feb 15 buildsBuild 67   06:56 UTC   yesBuild 68   07:54 UTC   noMon Feb 16 buildsBuild 69   02:30 UTC   yesBuild 70   03:02 UTC   noTue Feb 17 buildsBuild 71   02:31 UTC   yesBuild 72   02:49 UTC   noWed Feb 18 buildsBuild 73   02:36 UTC   yesBuild 74   03:06 UTC   noThu Feb 19 buildsBuild 75   02:34 UTC   yesBuild 76   03:06 UTC   noI see the same pattern with the camel component builds as well (two nightly builds, only first has sources/javadoc jars).Does anyone know what might be happening here?  It would be greatly appreciated if this could be fixed so all the builds include the sources and javadoc!{quote}Marked as regression since this was fixed back in CAMEL-5318. Task 2.14.2 Snapshot builds missing sources/javadoc jars From a message I sent last night to dev@camel.apache.org:{quote}I'm using the 2.14.2-SNAPSHOT builds at the moment (need a fix I submitted after 2.14.1).  Since I started using the snapshot builds, whenever I click "download sources" in my IDE (so I can view documentation/source as I code against the API), I see the "sources not found" message.  I originally thought the sources were not being built for snapshot builds.https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.14.2-SNAPSHOT/However, after checking the repo with the link above, I was able to see that some builds include the sources and javadoc, and some don't.  I also noticed that there seem to be two nightly builds which complete 30-60 minutes apart each night, where the first build includes the sources and javadoc, but the second build does not.  Here are the available builds, the time they completed, and whether the sources/javadoc jars were included:Fri Feb 13 buildsBuild 64   03:18 UTC   yesBuild 65   03:50 UTC   noSat Feb 14 build (just one build for some reason)Build 66   06:33 UTC   yesSun Feb 15 buildsBuild 67   06:56 UTC   yesBuild 68   07:54 UTC   noMon Feb 16 buildsBuild 69   02:30 UTC   yesBuild 70   03:02 UTC   noTue Feb 17 buildsBuild 71   02:31 UTC   yesBuild 72   02:49 UTC   noWed Feb 18 buildsBuild 73   02:36 UTC   yesBuild 74   03:06 UTC   noThu Feb 19 buildsBuild 75   02:34 UTC   yesBuild 76   03:06 UTC   noI see the same pattern with the camel component builds as well (two nightly builds, only first has sources/javadoc jars).Does anyone know what might be happening here?  It would be greatly appreciated if this could be fixed so all the builds include the sources and javadoc!{quote}Marked as regression since this was fixed back in CAMEL-5318.
CAMEL-8383 CXFRS Consumer processors should be able to use JAX-RS contexts CXFRS consumer processors should be able to use JAX-RS Contexts, for example, instead of {code:java}String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);if (path.equals("/customers")) {//...} {code}do something like{code:java}javax.ws.rs.core.UriInfo ui = exchange.getProperty(UriInfo.class.getName(), UriInfo.class);if (ui.getPath().equals("/customers")) {//...} {code}This will make the processor code more JAX-RS friendly. Besides UriInfo, Request, HttpHeaders and other JAX-RS contexts offer a lot of utility methods for simplifying managing an HTTP request Improvement CXFRS Consumer processors should be able to use JAX-RS contexts CXFRS consumer processors should be able to use JAX-RS Contexts, for example, instead of {code:java}String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);if (path.equals("/customers")) {//...} {code}do something like{code:java}javax.ws.rs.core.UriInfo ui = exchange.getProperty(UriInfo.class.getName(), UriInfo.class);if (ui.getPath().equals("/customers")) {//...} {code}This will make the processor code more JAX-RS friendly. Besides UriInfo, Request, HttpHeaders and other JAX-RS contexts offer a lot of utility methods for simplifying managing an HTTP request
CAMEL-8381 XML XSD enriched documentation should maybe word wrap for easier read in raw format If we look at the springframework schema, they word wrap their documentation and use CDATA section{code}		<xsd:attribute name="lazy-init" default="default" type="defaultable-boolean">			<xsd:annotation>				<xsd:documentation><![CDATA[	Indicates whether or not this bean is to be lazily initialized.	If false, it will be instantiated on startup by bean factories	that perform eager initialization of singletons. The default is	"false".	Note: This attribute will not be inherited by child bean definitions.	Hence, it needs to be specified per concrete bean definition.				]]></xsd:documentation>			</xsd:annotation>		</xsd:attribute>{code}As our documentation is single line, then it can be very long. I wonder if we should not word wrap as well, and format similar to spring so its easier to read directly from the schema file. Improvement XML XSD enriched documentation should maybe word wrap for easier read in raw format If we look at the springframework schema, they word wrap their documentation and use CDATA section{code}		<xsd:attribute name="lazy-init" default="default" type="defaultable-boolean">			<xsd:annotation>				<xsd:documentation><![CDATA[	Indicates whether or not this bean is to be lazily initialized.	If false, it will be instantiated on startup by bean factories	that perform eager initialization of singletons. The default is	"false".	Note: This attribute will not be inherited by child bean definitions.	Hence, it needs to be specified per concrete bean definition.				]]></xsd:documentation>			</xsd:annotation>		</xsd:attribute>{code}As our documentation is single line, then it can be very long. I wonder if we should not word wrap as well, and format similar to spring so its easier to read directly from the schema file.
CAMEL-8380 Add documentation for spring/blueprint only types that are in the generated xml dsl Now that we have eip documentation enriched using the maven plugin. We should see if we cannot grab the additional documentation for the spring / blueprint types such as <camelContext> and others.eg today the generated xsd contains{code}  <xs:complexType name="camelContextFactoryBean">    <xs:complexContent>      <xs:extension base="tns:abstractCamelContextFactoryBean">        <xs:sequence>          <xs:element minOccurs="0" ref="tns:properties"/>          <xs:element minOccurs="0" ref="tns:propertyPlaceholder"/>          <xs:element maxOccurs="unbounded" minOccurs="0" name="package" type="xs:string"/>          <xs:element minOccurs="0" ref="tns:packageScan"/>          <xs:element minOccurs="0" ref="tns:contextScan"/>          <xs:element minOccurs="0" ref="tns:streamCaching"/>          <xs:element minOccurs="0" ref="tns:jmxAgent"/>          <xs:choice maxOccurs="unbounded" minOccurs="0">            <xs:element ref="tns:template"/>            <xs:element ref="tns:consumerTemplate"/>            <xs:element ref="tns:proxy"/>            <xs:element ref="tns:export"/>            <xs:element ref="tns:errorHandler"/>          </xs:choice>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:routeBuilder"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:routeContextRef"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:restContextRef"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:threadPoolProfile"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:threadPool"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:endpoint"/>          <xs:element minOccurs="0" ref="tns:dataFormats"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:redeliveryPolicyProfile"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:onException"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:onCompletion"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:intercept"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:interceptFrom"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:interceptSendToEndpoint"/>          <xs:element minOccurs="0" ref="tns:restConfiguration"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:rest"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:route"/>        </xs:sequence>        <xs:attribute name="depends-on" type="xs:string"/>        <xs:attribute name="trace" type="xs:string"/>        <xs:attribute name="messageHistory" type="xs:string"/>        <xs:attribute name="streamCache" type="xs:string"/>        <xs:attribute name="delayer" type="xs:string"/>        <xs:attribute name="handleFault" type="xs:string"/>        <xs:attribute name="errorHandlerRef" type="xs:string"/>        <xs:attribute name="autoStartup" type="xs:string"/>        <xs:attribute name="shutdownEager" type="xs:string"/>        <xs:attribute name="useMDCLogging" type="xs:string"/>        <xs:attribute name="useBreadcrumb" type="xs:string"/>        <xs:attribute name="allowUseOriginalMessage" type="xs:string"/>        <xs:attribute name="runtimeEndpointRegistryEnabled" type="xs:string"/>        <xs:attribute name="managementNamePattern" type="xs:string"/>        <xs:attribute name="threadNamePattern" type="xs:string"/>        <xs:attribute name="shutdownRoute" type="tns:shutdownRoute"/>        <xs:attribute name="shutdownRunningTask" type="tns:shutdownRunningTask"/>        <xs:attribute name="lazyLoadTypeConverters" type="xs:boolean"/>        <xs:attribute name="typeConverterStatisticsEnabled" type="xs:boolean"/>      </xs:extension>    </xs:complexContent>  </xs:complexType>{code}We may need to let the apt plugin run on camel-spring to generate json schema files for those extra JAXB annotated classes so we can grab the documentation like we do for EIPs Improvement Add documentation for spring/blueprint only types that are in the generated xml dsl Now that we have eip documentation enriched using the maven plugin. We should see if we cannot grab the additional documentation for the spring / blueprint types such as <camelContext> and others.eg today the generated xsd contains{code}  <xs:complexType name="camelContextFactoryBean">    <xs:complexContent>      <xs:extension base="tns:abstractCamelContextFactoryBean">        <xs:sequence>          <xs:element minOccurs="0" ref="tns:properties"/>          <xs:element minOccurs="0" ref="tns:propertyPlaceholder"/>          <xs:element maxOccurs="unbounded" minOccurs="0" name="package" type="xs:string"/>          <xs:element minOccurs="0" ref="tns:packageScan"/>          <xs:element minOccurs="0" ref="tns:contextScan"/>          <xs:element minOccurs="0" ref="tns:streamCaching"/>          <xs:element minOccurs="0" ref="tns:jmxAgent"/>          <xs:choice maxOccurs="unbounded" minOccurs="0">            <xs:element ref="tns:template"/>            <xs:element ref="tns:consumerTemplate"/>            <xs:element ref="tns:proxy"/>            <xs:element ref="tns:export"/>            <xs:element ref="tns:errorHandler"/>          </xs:choice>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:routeBuilder"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:routeContextRef"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:restContextRef"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:threadPoolProfile"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:threadPool"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:endpoint"/>          <xs:element minOccurs="0" ref="tns:dataFormats"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:redeliveryPolicyProfile"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:onException"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:onCompletion"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:intercept"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:interceptFrom"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:interceptSendToEndpoint"/>          <xs:element minOccurs="0" ref="tns:restConfiguration"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:rest"/>          <xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:route"/>        </xs:sequence>        <xs:attribute name="depends-on" type="xs:string"/>        <xs:attribute name="trace" type="xs:string"/>        <xs:attribute name="messageHistory" type="xs:string"/>        <xs:attribute name="streamCache" type="xs:string"/>        <xs:attribute name="delayer" type="xs:string"/>        <xs:attribute name="handleFault" type="xs:string"/>        <xs:attribute name="errorHandlerRef" type="xs:string"/>        <xs:attribute name="autoStartup" type="xs:string"/>        <xs:attribute name="shutdownEager" type="xs:string"/>        <xs:attribute name="useMDCLogging" type="xs:string"/>        <xs:attribute name="useBreadcrumb" type="xs:string"/>        <xs:attribute name="allowUseOriginalMessage" type="xs:string"/>        <xs:attribute name="runtimeEndpointRegistryEnabled" type="xs:string"/>        <xs:attribute name="managementNamePattern" type="xs:string"/>        <xs:attribute name="threadNamePattern" type="xs:string"/>        <xs:attribute name="shutdownRoute" type="tns:shutdownRoute"/>        <xs:attribute name="shutdownRunningTask" type="tns:shutdownRunningTask"/>        <xs:attribute name="lazyLoadTypeConverters" type="xs:boolean"/>        <xs:attribute name="typeConverterStatisticsEnabled" type="xs:boolean"/>      </xs:extension>    </xs:complexContent>  </xs:complexType>{code}We may need to let the apt plugin run on camel-spring to generate json schema files for those extra JAXB annotated classes so we can grab the documentation like we do for EIPs
CAMEL-8379 Camel catalog - Include xml schema and maven archetype catalog We should include this in the catalog.And also add java api to access those as well.And then add JMX api as well to all the catalog functions. Task Camel catalog - Include xml schema and maven archetype catalog We should include this in the catalog.And also add java api to access those as well.And then add JMX api as well to all the catalog functions.
CAMEL-8378 Move Camel catalog commands to separate module Today the catalog commands are part of the Camel karaf commands. We should move them to a separate module, so they dont clutter the existing karaf commands.Then the end user can install the camel-catalog feature in karaf if he/she wants to use the catalog commands. Task Move Camel catalog commands to separate module Today the catalog commands are part of the Camel karaf commands. We should move them to a separate module, so they dont clutter the existing karaf commands.Then the end user can install the camel-catalog feature in karaf if he/she wants to use the catalog commands.
CAMEL-8376 Removed old deprecated Maven archetype - camel-archetype-webconsole This archetype has been deprecated for a long time. Lets remove it Task Removed old deprecated Maven archetype - camel-archetype-webconsole This archetype has been deprecated for a long time. Lets remove it
CAMEL-8375 activity task thread pool is not configurable The aws-swf component doesn't support a way to configure the activity thread pool size. By default, the aws-sdk's activity task thread pool is 100 threads -- which is way too high for cpu-intensive activities.Here's a PR: https://github.com/apache/camel/pull/399 that adds SWFConfiguration.activityThreadPoolSizePlease let me know if there are changes you need to facilitate the merge. Improvement activity task thread pool is not configurable The aws-swf component doesn't support a way to configure the activity thread pool size. By default, the aws-sdk's activity task thread pool is 100 threads -- which is way too high for cpu-intensive activities.Here's a PR: https://github.com/apache/camel/pull/399 that adds SWFConfiguration.activityThreadPoolSizePlease let me know if there are changes you need to facilitate the merge.
CAMEL-8373 rest-dsl - CORS may have issue with non simple requests Look into reported on SOhttp://stackoverflow.com/questions/28562817/camel-rest-dsl-enablecors-only-working-for-getFor non simple requests, such as PUT seehttp://www.w3.org/TR/cors/ Task rest-dsl - CORS may have issue with non simple requests Look into reported on SOhttp://stackoverflow.com/questions/28562817/camel-rest-dsl-enablecors-only-working-for-getFor non simple requests, such as PUT seehttp://www.w3.org/TR/cors/
CAMEL-8371 Update Camel Docker Component to support docker-java version 0.10.5 Update Camel Docker component to support underlying docker-java library version 0.10.5 Improvement Update Camel Docker Component to support docker-java version 0.10.5 Update Camel Docker component to support underlying docker-java library version 0.10.5
CAMEL-8370 CamelHttpResponseCode missing from documentation I sent the following to the users@camel.apache.org list earlier today:{quote}I’m using the camel-netty4-http (latest 2.14.2-SNAPSHOT) component to create an endpoint that receives an HTTP POST from a device, translates the message from binary to JSON, then sends it along to a kafka topic for further processing.  When there are errors in validating or translating the incoming message, I need to be able to return a HTTP response code and response body.The camel-netty4-http documentation has an “Access to Netty types” section, which says that I should be able to do the following to access the instance of io.netty.handler.codec.http.HttpResponse:    HttpResponse response = exchange.getIn(NettyHttpMessage.class).getHttpResponse();Regardless of where I access the exchange within the route, getHttpResponse() is always returning null.  On the "happy path” I can return 200 by calling exchange.getOut().setBody(myResponse), but I have been unable to figure out how to return another response code.Is this a bug?  Or is there another way to accomplish what I’m trying to do?{quote}After digging around in the code, it looks like the HTTP status code is set via the CamelHttpResponseCode message header (org.apache.camel.component.netty4.http.DefaultNettyHttpBinding, line 308).  However, there is no mention of this message header in either the camel-netty-http or camel-netty4-http documentation.  It would be helpful to add this header to the list of applicable message headers, and also to include an example that demonstrates how to set the response status code and body:Finally, the existing "Access to Netty types" example should be modified to be clear that only the request can be accessed in this way.{code}// specify response body and statusexchange.getOut().setBody(myResponseBody);               exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 401);{code} Task CamelHttpResponseCode missing from documentation I sent the following to the users@camel.apache.org list earlier today:{quote}I'm using the camel-netty4-http (latest 2.14.2-SNAPSHOT) component to create an endpoint that receives an HTTP POST from a device, translates the message from binary to JSON, then sends it along to a kafka topic for further processing.  When there are errors in validating or translating the incoming message, I need to be able to return a HTTP response code and response body.The camel-netty4-http documentation has an "Access to Netty types" section, which says that I should be able to do the following to access the instance of io.netty.handler.codec.http.HttpResponse:    HttpResponse response = exchange.getIn(NettyHttpMessage.class).getHttpResponse();Regardless of where I access the exchange within the route, getHttpResponse() is always returning null.  On the "happy path" I can return 200 by calling exchange.getOut().setBody(myResponse), but I have been unable to figure out how to return another response code.Is this a bug?  Or is there another way to accomplish what I'm trying to do?{quote}After digging around in the code, it looks like the HTTP status code is set via the CamelHttpResponseCode message header (org.apache.camel.component.netty4.http.DefaultNettyHttpBinding, line 308).  However, there is no mention of this message header in either the camel-netty-http or camel-netty4-http documentation.  It would be helpful to add this header to the list of applicable message headers, and also to include an example that demonstrates how to set the response status code and body:Finally, the existing "Access to Netty types" example should be modified to be clear that only the request can be accessed in this way.{code}// specify response body and statusexchange.getOut().setBody(myResponseBody);               exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 401);{code}
CAMEL-8368 Timer component - Support for greedy, backoff Look into letting timer endpoint support those backoff, greedy options we have. The idea would be that the exchange at the end of the routing, has some property/header, that the timer consumer understands, and then know if it should regard as one message polled, or zero message polled, etc.Then greedy, backoff, and the other options can work as usual.This allows people to have the simple timer scheduler to scale up / down depending on demand. New Feature Timer component - Support for greedy, backoff Look into letting timer endpoint support those backoff, greedy options we have. The idea would be that the exchange at the end of the routing, has some property/header, that the timer consumer understands, and then know if it should regard as one message polled, or zero message polled, etc.Then greedy, backoff, and the other options can work as usual.This allows people to have the simple timer scheduler to scale up / down depending on demand.
CAMEL-8367 Better report runtime exceptions from the route builder while Unit Testing Reference Link: http://stackoverflow.com/questions/28508351/apache-camel-how-to-print-exception-trace-while-unit-testing-using-cameltestsupWhile unit testing a Route Builder class, a Runtime exception takes place in code that creates routes. This is simply reported as test failure.No Stacktrace or any reason of failure of a particular test is printed.Would prefer better reporting of runtime exceptions while testing. Improvement Better report runtime exceptions from the route builder while Unit Testing Reference Link: http://stackoverflow.com/questions/28508351/apache-camel-how-to-print-exception-trace-while-unit-testing-using-cameltestsupWhile unit testing a Route Builder class, a Runtime exception takes place in code that creates routes. This is simply reported as test failure.No Stacktrace or any reason of failure of a particular test is printed.Would prefer better reporting of runtime exceptions while testing.
CAMEL-8366 Close used iterator if RuntimeException is thrown at next()/hasNext() in Splitter There're some spots using user provided iterator but don't close them if RuntimeException is thrown during iteration even if it's Closeable . It would be convenient if it is closed in finally block.I immediately found 2, guessing there're some more else:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Splitter.java#L232-L234https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java#L267-L347 Improvement Close used iterator if RuntimeException is thrown at next()/hasNext() in Splitter There're some spots using user provided iterator but don't close them if RuntimeException is thrown during iteration even if it's Closeable . It would be convenient if it is closed in finally block.I immediately found 2, guessing there're some more else:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Splitter.java#L232-L234https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java#L267-L347
CAMEL-8365 Release Apache Camel Archetype Catalog We have a bunch of Maven Archetypes in tooling/archetypes. But we do not have a camel-archetype.xml file as part of the release which is published to maven central, so users / tooling can use that to know the Camel only archetypes.Today they are in the big maven central at, but it contains all 1000+ archetypeshttp://repo2.maven.org/maven2/archetype-catalog.xmlWe should build our own camel-catalog.xml and publish athttp://repo1.maven.org/maven2/org/apache/camel/archetypes/2.14.1/And maybe name it archetype-catalog.xml.And then we should include the archetype in the camel-catalog JAR so its also easy for offline tooling and whatnot to grab that file. New Feature Release Apache Camel Archetype Catalog We have a bunch of Maven Archetypes in tooling/archetypes. But we do not have a camel-archetype.xml file as part of the release which is published to maven central, so users / tooling can use that to know the Camel only archetypes.Today they are in the big maven central at, but it contains all 1000+ archetypeshttp://repo2.maven.org/maven2/archetype-catalog.xmlWe should build our own camel-catalog.xml and publish athttp://repo1.maven.org/maven2/org/apache/camel/archetypes/2.14.1/And maybe name it archetype-catalog.xml.And then we should include the archetype in the camel-catalog JAR so its also easy for offline tooling and whatnot to grab that file.
CAMEL-8364 camel-itest-osgi - Some failed tests Tests in error:  CxfBeanSpringRouteTest.testGetCustomer:45 » ClassNotFound javax.naming.Invalid...  CxfBeanBlueprintRouterTest.testGetCustomerWithQuery:67 » ClassNotFound javax.n...  CxfBeanBlueprintRouterTest.testGetCustomer:50 » ClassNotFound javax.naming.Inv...  CxfRsBlueprintRouterTest.testGetCustomers:115 » ClassNotFound javax.naming.Inv...  CxfRsBlueprintRouterTest.testPutConsumer:156 » ClassNotFound javax.naming.Inva...  CxfRsBlueprintRouterTest.testGetSubResource:138 » ClassNotFound javax.naming.I...  CxfRsBlueprintRouterTest.testGetCustomerWithQuery:99 » ClassNotFound javax.nam...  CxfRsBlueprintRouterTest.testPostConsumer:174 » ClassNotFound javax.naming.Inv...  CxfRsBlueprintRouterTest.testGetCustomer:78 » ClassNotFound javax.naming.Inval...  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed  Http4Test.testHttp4Get:38 » ClassNotFound javax.naming.InvalidNameException no...  Http4Test.testHttp4Post:44 » ClassNotFound javax.naming.InvalidNameException n...  RestletTest.testRestletProducer:41 » ClassNotFound javax.naming.InvalidNameExc...Tests run: 195, Failures: 0, Errors: 15, Skipped: 23 Test camel-itest-osgi - Some failed tests Tests in error:  CxfBeanSpringRouteTest.testGetCustomer:45 >> ClassNotFound javax.naming.Invalid...  CxfBeanBlueprintRouterTest.testGetCustomerWithQuery:67 >> ClassNotFound javax.n...  CxfBeanBlueprintRouterTest.testGetCustomer:50 >> ClassNotFound javax.naming.Inv...  CxfRsBlueprintRouterTest.testGetCustomers:115 >> ClassNotFound javax.naming.Inv...  CxfRsBlueprintRouterTest.testPutConsumer:156 >> ClassNotFound javax.naming.Inva...  CxfRsBlueprintRouterTest.testGetSubResource:138 >> ClassNotFound javax.naming.I...  CxfRsBlueprintRouterTest.testGetCustomerWithQuery:99 >> ClassNotFound javax.nam...  CxfRsBlueprintRouterTest.testPostConsumer:174 >> ClassNotFound javax.naming.Inv...  CxfRsBlueprintRouterTest.testGetCustomer:78 >> ClassNotFound javax.naming.Inval...  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 >> ResolveEndpointFailed  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 >> ResolveEndpointFailed  HazelcastTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 >> ResolveEndpointFailed  Http4Test.testHttp4Get:38 >> ClassNotFound javax.naming.InvalidNameException no...  Http4Test.testHttp4Post:44 >> ClassNotFound javax.naming.InvalidNameException n...  RestletTest.testRestletProducer:41 >> ClassNotFound javax.naming.InvalidNameExc...Tests run: 195, Failures: 0, Errors: 15, Skipped: 23
CAMEL-8363 Camel archetypes for xml dsl should not use camel: prefix This is verbose and not recommanded, ppl should just use <camelContext> as iseg remove <camel:xxx"> in the archetypeseg{code} <camel:camelContext xmlns="http://camel.apache.org/schema/spring">    <!-- here is a sample which processes the input files         (leaving them in place - see the 'noop' flag)         then performs content based routing on the message using XPath -->    <camel:route>      <camel:from uri="file:src/data?noop=true"/>      <camel:choice>        <camel:when>          <camel:xpath>/person/city = 'London'</camel:xpath>          <camel:log message="UK message"/>          <camel:to uri="file:target/messages/uk"/>        </camel:when>        <camel:otherwise>          <camel:log message="Other message"/>          <camel:to uri="file:target/messages/others"/>        </camel:otherwise>      </camel:choice>    </camel:route>  </camel:camelContext>{code} Improvement Camel archetypes for xml dsl should not use camel: prefix This is verbose and not recommanded, ppl should just use <camelContext> as iseg remove <camel:xxx"> in the archetypeseg{code} <camel:camelContext xmlns="http://camel.apache.org/schema/spring">    <!-- here is a sample which processes the input files         (leaving them in place - see the 'noop' flag)         then performs content based routing on the message using XPath -->    <camel:route>      <camel:from uri="file:src/data?noop=true"/>      <camel:choice>        <camel:when>          <camel:xpath>/person/city = 'London'</camel:xpath>          <camel:log message="UK message"/>          <camel:to uri="file:target/messages/uk"/>        </camel:when>        <camel:otherwise>          <camel:log message="Other message"/>          <camel:to uri="file:target/messages/others"/>        </camel:otherwise>      </camel:choice>    </camel:route>  </camel:camelContext>{code}
CAMEL-8357 Add JDK 7 Mime/Content Type Support To File Camel Consumers Enhance all Camel file-type consumers to probe the content type and populate a header on the exchange to allow access to content type.See:http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#probeContentType%28java.nio.file.Path%29 New Feature Add JDK 7 Mime/Content Type Support To File Camel Consumers Enhance all Camel file-type consumers to probe the content type and populate a header on the exchange to allow access to content type.See:http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#probeContentType%28java.nio.file.Path%29
CAMEL-8354 Bean component - Should not support consumer The bean component should be a producer only, which makes most sence, eg to call a bean by sending a message to it, where the message is data for the bean parameters.We should remove support for consumer, which was not intended but was possible due its use of ProcessorEndpoint and being based on old stuff from 1.x days.The bean component should also be more aligned like the other components and how it setup and initializes itself, using doStart / doStop as others do. Improvement Bean component - Should not support consumer The bean component should be a producer only, which makes most sence, eg to call a bean by sending a message to it, where the message is data for the bean parameters.We should remove support for consumer, which was not intended but was possible due its use of ProcessorEndpoint and being based on old stuff from 1.x days.The bean component should also be more aligned like the other components and how it setup and initializes itself, using doStart / doStop as others do.
CAMEL-8350 camel-netty4 - UDP unit test fails This test fails often when doing a full Camel testTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.113 sec <<< FAILURE! - in org.apache.camel.component.netty4.NettyUdpConnectedSendTestsendConnectedWithoutReceiver(org.apache.camel.component.netty4.NettyUdpConnectedSendTest)  Time elapsed: 0.076 sec  <<< FAILURE!java.lang.AssertionError: There should at least one exception because port is unreachable	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.assertTrue(Assert.java:41)	at org.apache.camel.component.netty4.NettyUdpConnectedSendTest.sendConnectedWithoutReceiver(NettyUdpConnectedSendTest.java:89) Test camel-netty4 - UDP unit test fails This test fails often when doing a full Camel testTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.113 sec <<< FAILURE! - in org.apache.camel.component.netty4.NettyUdpConnectedSendTestsendConnectedWithoutReceiver(org.apache.camel.component.netty4.NettyUdpConnectedSendTest)  Time elapsed: 0.076 sec  <<< FAILURE!java.lang.AssertionError: There should at least one exception because port is unreachable	at org.junit.Assert.fail(Assert.java:88)	at org.junit.Assert.assertTrue(Assert.java:41)	at org.apache.camel.component.netty4.NettyUdpConnectedSendTest.sendConnectedWithoutReceiver(NettyUdpConnectedSendTest.java:89)
CAMEL-8349 Context should be started with defined TCCL During CamelContext.start() we may call into various 3rd party modules that rely on resource discovery through TCCL. Therefore, we should provide a well defined value for TCCL during context start.In the WildFly integration layer I attempted to do this using events. This approach is flawed however because there is no guarantee of event delivery. Conceptually, the requirement for a certain TCCL by 3rd party should not leak into client code. Instead, camel should be dealing with these TCCL requirements and provide client code a way to defined the ClassLoader associated with the context. the role of which is the ApplicationClassLoader.I therefore propose setting the TCCL to the ApplicationClassLoader (if there is one) just before we call into doStart() Improvement Context should be started with defined TCCL During CamelContext.start() we may call into various 3rd party modules that rely on resource discovery through TCCL. Therefore, we should provide a well defined value for TCCL during context start.In the WildFly integration layer I attempted to do this using events. This approach is flawed however because there is no guarantee of event delivery. Conceptually, the requirement for a certain TCCL by 3rd party should not leak into client code. Instead, camel should be dealing with these TCCL requirements and provide client code a way to defined the ClassLoader associated with the context. the role of which is the ApplicationClassLoader.I therefore propose setting the TCCL to the ApplicationClassLoader (if there is one) just before we call into doStart()
CAMEL-8348 Scheduled polling endpoints should include their scheduling options in endpoint documentation Such as file consumer, and others which are scheduled. Currently we do not know about all these additional 15+ options.And also the component schema should filter options that are not supported such as if the component is producer only, then skip any options that are consumer labelled, and vice-versa. (This can happen for some components that inherit from some default impls in camel-core) Sub-task Scheduled polling endpoints should include their scheduling options in endpoint documentation Such as file consumer, and others which are scheduled. Currently we do not know about all these additional 15+ options.And also the component schema should filter options that are not supported such as if the component is producer only, then skip any options that are consumer labelled, and vice-versa. (This can happen for some components that inherit from some default impls in camel-core)
CAMEL-8345 We should use Properties instead of Property to define the properties in restConfiguration Current <restConfiguration> use xxxProperty to specify the properties, it is not the common usage. It could be better if we can fix it in Camel 2.15.0.{code}    @XmlElement(name = "componentProperty")    private List<RestPropertyDefinition> componentProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "endpointProperty")    private List<RestPropertyDefinition> endpointProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "consumerProperty")    private List<RestPropertyDefinition> consumerProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "dataFormatProperty")    private List<RestPropertyDefinition> dataFormatProperties = new ArrayList<RestPropertyDefinition>();{code}The XmlElement need to be changed to {code}    @XmlElement(name = "componentProperties")    private List<RestPropertyDefinition> componentProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "endpointProperties")    private List<RestPropertyDefinition> endpointProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "consumerProperties")    private List<RestPropertyDefinition> consumerProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "dataFormatProperties")    private List<RestPropertyDefinition> dataFormatProperties = new ArrayList<RestPropertyDefinition>();{code} Improvement We should use Properties instead of Property to define the properties in restConfiguration Current <restConfiguration> use xxxProperty to specify the properties, it is not the common usage. It could be better if we can fix it in Camel 2.15.0.{code}    @XmlElement(name = "componentProperty")    private List<RestPropertyDefinition> componentProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "endpointProperty")    private List<RestPropertyDefinition> endpointProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "consumerProperty")    private List<RestPropertyDefinition> consumerProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "dataFormatProperty")    private List<RestPropertyDefinition> dataFormatProperties = new ArrayList<RestPropertyDefinition>();{code}The XmlElement need to be changed to {code}    @XmlElement(name = "componentProperties")    private List<RestPropertyDefinition> componentProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "endpointProperties")    private List<RestPropertyDefinition> endpointProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "consumerProperties")    private List<RestPropertyDefinition> consumerProperties = new ArrayList<RestPropertyDefinition>();    @XmlElement(name = "dataFormatProperties")    private List<RestPropertyDefinition> dataFormatProperties = new ArrayList<RestPropertyDefinition>();{code}
CAMEL-8343 Migrate the two pax osgi components to be like the others They use custom activator which is not needed. Improvement Migrate the two pax osgi components to be like the others They use custom activator which is not needed.
CAMEL-8342 add Ganglia component Add a component to send values to Ganglia as metrics New Feature add Ganglia component Add a component to send values to Ganglia as metrics
CAMEL-8340 Every endpoint should declare if they are consumer or producer only - if they only support one kind The @UriEndpoint has two options to set the endpoint as an consumer or producer only.This aid Camel to know this instead of rely on the endpoint throwing an exception in the createConsumer / createProducer methods.By default its assumed its can do both. But we have some endpoints which can only do one kind, and we need to check that. Sub-task Every endpoint should declare if they are consumer or producer only - if they only support one kind The @UriEndpoint has two options to set the endpoint as an consumer or producer only.This aid Camel to know this instead of rely on the endpoint throwing an exception in the createConsumer / createProducer methods.By default its assumed its can do both. But we have some endpoints which can only do one kind, and we need to check that.
CAMEL-8334 EIP documentation maven plugin should aslo inject documentation to abstract/base types Currently maven plugin _camel-eip-documentation-enricher-maven-plugin_ injects ducumentation to attributest of top level elements. It would be nice if it could also inject documentation to attributes of base/abstract elements. Example:It's a snippet on top level _logDefinition_ type with injected documentation.{code:xml}<xs:complexType name="logDefinition">    <xs:complexContent>      <xs:extension base="tns:noOutputDefinition">        <xs:sequence/>        <xs:attribute name="message" type="xs:string" use="required">          <xs:annotation>            <xs:documentation xml:lang="en">Sets the log message (uses simple language)</xs:documentation>          </xs:annotation>        </xs:attribute>      ...</xs:complexType>{code}But for it's abstract base type documentation does not injected:{code:xml}<xs:complexType abstract="true" name="processorDefinition">    <xs:complexContent>      <xs:extension base="tns:optionalIdentifiedDefinition">        <xs:sequence/>        <!-- Documentation should be injected for this attribute. -->        <xs:attribute name="inheritErrorHandler" type="xs:boolean"/>        <xs:anyAttribute namespace="##other" processContents="skip"/>      </xs:extension>    </xs:complexContent>  </xs:complexType>{code} Improvement EIP documentation maven plugin should aslo inject documentation to abstract/base types Currently maven plugin _camel-eip-documentation-enricher-maven-plugin_ injects ducumentation to attributest of top level elements. It would be nice if it could also inject documentation to attributes of base/abstract elements. Example:It's a snippet on top level _logDefinition_ type with injected documentation.{code:xml}<xs:complexType name="logDefinition">    <xs:complexContent>      <xs:extension base="tns:noOutputDefinition">        <xs:sequence/>        <xs:attribute name="message" type="xs:string" use="required">          <xs:annotation>            <xs:documentation xml:lang="en">Sets the log message (uses simple language)</xs:documentation>          </xs:annotation>        </xs:attribute>      ...</xs:complexType>{code}But for it's abstract base type documentation does not injected:{code:xml}<xs:complexType abstract="true" name="processorDefinition">    <xs:complexContent>      <xs:extension base="tns:optionalIdentifiedDefinition">        <xs:sequence/>        <!-- Documentation should be injected for this attribute. -->        <xs:attribute name="inheritErrorHandler" type="xs:boolean"/>        <xs:anyAttribute namespace="##other" processContents="skip"/>      </xs:extension>    </xs:complexContent>  </xs:complexType>{code}
CAMEL-8332 Add component implementation to camel-dozer module The camel-dozer component does not actually provide a Camel component implementation today.  Rather, it provides a converter loader which can be used in combination with a set of Dozer mapping files to register a global set of converters within a CamelContext.  This issue proposes the addition of a full-blown component implementation within camel-dozer.  Advantages of this approach include:* The ability to manage Dozer mapping configuration on a per-endpoint basis vs. global configuration via the converter registry.* Dozer handles direct field assignment quite well, but does not provide other common mapping functions OOTB.  Camel can enrich Dozer via standard Dozer extensions, e.g.** Mapping constant values to target fields** Support for lookup tables, using the source value as the key** Convenience transformations for mappings (e.g. trim spaces, convertToLowerCase, regular expression evaluation)** Allow Camel message/exchange headers to be mapped to target fields* The ability to surround dozer mappings with data formats to support a single, any-to-any transformation endpointHere's an example of what the endpoint configuration would look like.{noformat}dozer:mytransform?mappingFile=dozerBeanMapping.xml&marshalId=json&unmarshalId=jaxb&targetModel=example.MyObject{noformat}An initial implementation of this component is available as a PR against the Camel GitHub repository.  Unit tests in the PR provide examples of various transformation use cases.  Many, but not all, of the features listed above are implemented already.  I can file follow-up JIRAs for additional features I have in mind.  I will also post a link to the PR and the topic branch in the issue comments. New Feature Add component implementation to camel-dozer module The camel-dozer component does not actually provide a Camel component implementation today.  Rather, it provides a converter loader which can be used in combination with a set of Dozer mapping files to register a global set of converters within a CamelContext.  This issue proposes the addition of a full-blown component implementation within camel-dozer.  Advantages of this approach include:* The ability to manage Dozer mapping configuration on a per-endpoint basis vs. global configuration via the converter registry.* Dozer handles direct field assignment quite well, but does not provide other common mapping functions OOTB.  Camel can enrich Dozer via standard Dozer extensions, e.g.** Mapping constant values to target fields** Support for lookup tables, using the source value as the key** Convenience transformations for mappings (e.g. trim spaces, convertToLowerCase, regular expression evaluation)** Allow Camel message/exchange headers to be mapped to target fields* The ability to surround dozer mappings with data formats to support a single, any-to-any transformation endpointHere's an example of what the endpoint configuration would look like.{noformat}dozer:mytransform?mappingFile=dozerBeanMapping.xml&marshalId=json&unmarshalId=jaxb&targetModel=example.MyObject{noformat}An initial implementation of this component is available as a PR against the Camel GitHub repository.  Unit tests in the PR provide examples of various transformation use cases.  Many, but not all, of the features listed above are implemented already.  I can file follow-up JIRAs for additional features I have in mind.  I will also post a link to the PR and the topic branch in the issue comments.
CAMEL-8331 OSGi bundle upgrades There is new osgi bundles. We should upgrade if possible.https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311208&version=12329297 Task OSGi bundle upgrades There is new osgi bundles. We should upgrade if possible.https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12311208&version=12329297
CAMEL-8330 camel-jms - Use 1000 as default receiveTimeout The receiveTimeout documentation is a bit confusing as it says None. But we use the spring-jms default value of 1000.We should set it to explicit 1000 like the others.And we should not set receiveTimeout in the JmsTemplate that we are using for sending messages, as we do not us its receive method. Improvement camel-jms - Use 1000 as default receiveTimeout The receiveTimeout documentation is a bit confusing as it says None. But we use the spring-jms default value of 1000.We should set it to explicit 1000 like the others.And we should not set receiveTimeout in the JmsTemplate that we are using for sending messages, as we do not us its receive method.
CAMEL-8325 Spring Boot and CDI integration don't detect duplicate routes, should support earlier context configuration See discussion:http://mail-archives.apache.org/mod_mbox/camel-users/201502.mbox/%3C8713C0A9-5CB3-45AC-871F-F58ECC28C71E%40christianbauer.name%3EMost users in both Spring Booth and CDI environments probably rely on auto-discovery of routes, so duplicate route identifiers are a common mistake and should be detected. For this to work, routes have to be added before the CamelContext is started. This affects both Spring Boot and CDI integration, where the routes are added after CamelContext start, which results in replacement of duplicates without error.The CDI integration code is actually worse than the Spring Boot code, since users have no chance of customizing the CamelContext with a CamelContextConfiguration. In the Spring Boot integration there is at least that option available to access the CamelContext after it has started, although that still doesn't give you access to the important configuration options such as ManagementStrategy.I recommend in both Spring Boot and CDI integration to share a (new?) CamelContextConfiguration interface with methods beforeContextStart(CamelContxt ctx) and afterContextStart(CamelContext ctx). Instances of that type should be auto-discovered so the user has a chance to edit the CamelContext. Improvement Spring Boot and CDI integration don't detect duplicate routes, should support earlier context configuration See discussion:http://mail-archives.apache.org/mod_mbox/camel-users/201502.mbox/%3C8713C0A9-5CB3-45AC-871F-F58ECC28C71E%40christianbauer.name%3EMost users in both Spring Booth and CDI environments probably rely on auto-discovery of routes, so duplicate route identifiers are a common mistake and should be detected. For this to work, routes have to be added before the CamelContext is started. This affects both Spring Boot and CDI integration, where the routes are added after CamelContext start, which results in replacement of duplicates without error.The CDI integration code is actually worse than the Spring Boot code, since users have no chance of customizing the CamelContext with a CamelContextConfiguration. In the Spring Boot integration there is at least that option available to access the CamelContext after it has started, although that still doesn't give you access to the important configuration options such as ManagementStrategy.I recommend in both Spring Boot and CDI integration to share a (new?) CamelContextConfiguration interface with methods beforeContextStart(CamelContxt ctx) and afterContextStart(CamelContext ctx). Instances of that type should be auto-discovered so the user has a chance to edit the CamelContext.
CAMEL-8324 Camel JMX - Allow to configure default management name pattern using JVM system property Currently it is not possible to define ManagementNamingStrategy globally through JVM system property for all deployed camel context. Instead, it can only be configured on each camel context. For instance, the following "managementNamePattern" parameter has to be added to all camel contexts.{code}managementNamePattern="#symbolicName#" {code}It would be a nice feature to set default "managementNamePattern" using JVM system property for all camel contexts where no managementNamePattern is configured. Considering that there are already JVM system property exists for default domain and turning on/off camel JMX etc. Improvement Camel JMX - Allow to configure default management name pattern using JVM system property Currently it is not possible to define ManagementNamingStrategy globally through JVM system property for all deployed camel context. Instead, it can only be configured on each camel context. For instance, the following "managementNamePattern" parameter has to be added to all camel contexts.{code}managementNamePattern="#symbolicName#" {code}It would be a nice feature to set default "managementNamePattern" using JVM system property for all camel contexts where no managementNamePattern is configured. Considering that there are already JVM system property exists for default domain and turning on/off camel JMX etc.
CAMEL-8323 Provide ability to specify node type JcrProducer creates nt:unstructured nodes without ability to specify node type. There should be possibility to specify node type by passing it through message header JcrConstants.JCR_NODE_TYPEDocumentation at http://camel.apache.org/jcr.html will need to be updated Improvement Provide ability to specify node type JcrProducer creates nt:unstructured nodes without ability to specify node type. There should be possibility to specify node type by passing it through message header JcrConstants.JCR_NODE_TYPEDocumentation at http://camel.apache.org/jcr.html will need to be updated
CAMEL-8322 Camel Toolbox - Include component options in json schema We have all the endpoint options, but do not have for the component itself.We should generate those based on getter/setter which is how you configure components.Then the apt plugin can discover and generate that information also. Sub-task Camel Toolbox - Include component options in json schema We have all the endpoint options, but do not have for the component itself.We should generate those based on getter/setter which is how you configure components.Then the apt plugin can discover and generate that information also.
CAMEL-8320 Camel Toolbox - @UriPath - context path style When using @UriPath on endpoints to denote that this is an option part of the beginning of the uri, such as host name, port, authority, context path etc. What we need is some way of being able to know what is the syntax, so when tools build endpoints using the information from @UriPath and @UriParam, then the tooling needs to know how to build that url.eg should it separate @UriPath using color or forward slash or something else. Sub-task Camel Toolbox - @UriPath - context path style When using @UriPath on endpoints to denote that this is an option part of the beginning of the uri, such as host name, port, authority, context path etc. What we need is some way of being able to know what is the syntax, so when tools build endpoints using the information from @UriPath and @UriParam, then the tooling needs to know how to build that url.eg should it separate @UriPath using color or forward slash or something else.
CAMEL-8319 Velocity template example from wiki fails when copy-pasted I was following the [velocity template example on the wiki|http://camel.apache.org/velocity.html] and had some confusion over why it was failing.  I was even more confused when the same test worked in the camel-velocity component project.What I did was cut-and-paste the template from the wiki page into letter.vm, and also cut-and-paste the unit test code into a JUnit test.Finally I noticed that the velocity template, when transcluded in the wiki page, has extra spaces in the empty lines that make it different than the one expected by the test.  Perhaps you can figure out a way to prevent the extra space from being added to the template when shown on the wiki, or modify the template so that it doesn't get affected by that whitespace.  Just want to avoid someone else getting confused like I did.  Task Velocity template example from wiki fails when copy-pasted I was following the [velocity template example on the wiki|http://camel.apache.org/velocity.html] and had some confusion over why it was failing.  I was even more confused when the same test worked in the camel-velocity component project.What I did was cut-and-paste the template from the wiki page into letter.vm, and also cut-and-paste the unit test code into a JUnit test.Finally I noticed that the velocity template, when transcluded in the wiki page, has extra spaces in the empty lines that make it different than the one expected by the test.  Perhaps you can figure out a way to prevent the extra space from being added to the template when shown on the wiki, or modify the template so that it doesn't get affected by that whitespace.  Just want to avoid someone else getting confused like I did. 
CAMEL-8317 XML DSL - Allow to use bean property style to configure endpoint options So we can do{code}<endpoint id="foo" uri="file:something">   <property name="includes" value="backup/*.xml"/>   <property name="recursive" value="true"/>   ...</endpoint>{code}See also CAMEL-7419 New Feature XML DSL - Allow to use bean property style to configure endpoint options So we can do{code}<endpoint id="foo" uri="file:something">   <property name="includes" value="backup/*.xml"/>   <property name="recursive" value="true"/>   ...</endpoint>{code}See also CAMEL-7419
CAMEL-8316 Rename property language to exchangeProperty Using the generic name property is unfortunate as it causes clash in XML DSL and also confusion about property placeholders etc.Also this language is less in use, as more often people use simple language which is more powerful with predicates and expressions around exchange properties / message headers / bodies etc.See also CAMEL-7094 as a side effect of this naming clash. Improvement Rename property language to exchangeProperty Using the generic name property is unfortunate as it causes clash in XML DSL and also confusion about property placeholders etc.Also this language is less in use, as more often people use simple language which is more powerful with predicates and expressions around exchange properties / message headers / bodies etc.See also CAMEL-7094 as a side effect of this naming clash.
CAMEL-8312 XML External Entity (XXE) issue in XPath If the documentType of an XPath expression is set to a class for that no type converter exists and the data to which the expression is applied is of type WrappedFile or String the XPath will seem to work anyway. However this setup will create issues by using an InputSource created from the String or Generic file. Improvement XML External Entity (XXE) issue in XPath If the documentType of an XPath expression is set to a class for that no type converter exists and the data to which the expression is applied is of type WrappedFile or String the XPath will seem to work anyway. However this setup will create issues by using an InputSource created from the String or Generic file.
CAMEL-8311 XML External Entity (XXE) issue in XmlConverter The XMLConverter creates issues when converting XML Documents for SAXSource.DOM and StAX parsing is not affected. Improvement XML External Entity (XXE) issue in XmlConverter The XMLConverter creates issues when converting XML Documents for SAXSource.DOM and StAX parsing is not affected.
CAMEL-8310 RabbitMQConsumer has hard coded requeue flag set to false Current implementation has requeue is set to false that means there is no way for me to put back message in the queue if its  one of the downstream system is down Improvement RabbitMQConsumer has hard coded requeue flag set to false Current implementation has requeue is set to false that means there is no way for me to put back message in the queue if its  one of the downstream system is down
CAMEL-8309 Camel XML DSL - Allow to specify uri attributes in multi lines to make long urs easier to read and maintain If you have very long uris in routes, then in Java DSL you can just split the code into new lines, as its just Java code.But in XML you cannot do that. So we should allow the uri attribute to have new lines, and then when parsing the CamelContext we remove those whitespace noise, so the uri is one line.The parser does this partly when you obtain the attribute. All new lines, tabs etc is represented as a space. But then the url has double spaces, we need to trim, in the parser.You will still have to use &amp; to separate the options thoughHere is a very little example with only 2 options, but just imagine if the url was longer{code}        <route>            <from uri="direct:start"/>            <to uri="seda:bar?timeout=10000              &amp;blockWhenFull=true"/>        </route>        <route>            <from uri="seda:bar?              timeout=10000&amp;              blockWhenFull=true"/>            <to uri="mock:bar"/>        </route>{code} Improvement Camel XML DSL - Allow to specify uri attributes in multi lines to make long urs easier to read and maintain If you have very long uris in routes, then in Java DSL you can just split the code into new lines, as its just Java code.But in XML you cannot do that. So we should allow the uri attribute to have new lines, and then when parsing the CamelContext we remove those whitespace noise, so the uri is one line.The parser does this partly when you obtain the attribute. All new lines, tabs etc is represented as a space. But then the url has double spaces, we need to trim, in the parser.You will still have to use &amp; to separate the options thoughHere is a very little example with only 2 options, but just imagine if the url was longer{code}        <route>            <from uri="direct:start"/>            <to uri="seda:bar?timeout=10000              &amp;blockWhenFull=true"/>        </route>        <route>            <from uri="seda:bar?              timeout=10000&amp;              blockWhenFull=true"/>            <to uri="mock:bar"/>        </route>{code}
CAMEL-8307 Properties are loaded only from the first source if whitespaces are used in propertyPlaceholder#location When whitespaces or newlines are used in {{location}} attribute of {{propertyPlaceholder}} (XML):{code:xml}<propertyPlaceholder id="camelPropertyPlaceholderConfigurer"    location="classpath:a/b/c/environments/base.properties,              classpath:a/b/c/environments/${env:ENV}/env.properties,              classpath:a/b/c/environments/${ENV}/env.properties"    ignoreMissingLocation="true"/>{code}, the properties are loaded only from the first source ({{base.properties}}) in this case. The problem may be in {{org.apache.camel.component.properties.DefaultPropertiesResolver#loadPropertiesFromClasspath}}:{code:java}    protected Properties loadPropertiesFromClasspath(CamelContext context, boolean ignoreMissingLocation, String path) throws IOException {        Properties answer = new Properties();        if (path.startsWith("classpath:")) {            path = ObjectHelper.after(path, "classpath:");        }        InputStream is = context.getClassResolver().loadResourceAsStream(path);        if (is == null) {           ...        } else {...}        return answer;    }{code}{{startsWith}} returns false as the path are splitted around {{,}}. Trimming the path somewhere around those calls may help. Improvement Properties are loaded only from the first source if whitespaces are used in propertyPlaceholder#location When whitespaces or newlines are used in {{location}} attribute of {{propertyPlaceholder}} (XML):{code:xml}<propertyPlaceholder id="camelPropertyPlaceholderConfigurer"    location="classpath:a/b/c/environments/base.properties,              classpath:a/b/c/environments/${env:ENV}/env.properties,              classpath:a/b/c/environments/${ENV}/env.properties"    ignoreMissingLocation="true"/>{code}, the properties are loaded only from the first source ({{base.properties}}) in this case. The problem may be in {{org.apache.camel.component.properties.DefaultPropertiesResolver#loadPropertiesFromClasspath}}:{code:java}    protected Properties loadPropertiesFromClasspath(CamelContext context, boolean ignoreMissingLocation, String path) throws IOException {        Properties answer = new Properties();        if (path.startsWith("classpath:")) {            path = ObjectHelper.after(path, "classpath:");        }        InputStream is = context.getClassResolver().loadResourceAsStream(path);        if (is == null) {           ...        } else {...}        return answer;    }{code}{{startsWith}} returns false as the path are splitted around {{,}}. Trimming the path somewhere around those calls may help.
CAMEL-8299 Let BulkRequest return the whole BulkResponse "I found out that I needed to get more information from the bulk-request result. elasticsearch provides the BulkResponse with the full info. returning the full BulkResponse allows the caller to tell the reason of index failures and more."Here is the [PR|https://github.com/apache/camel/pull/373] for it. Improvement Let BulkRequest return the whole BulkResponse "I found out that I needed to get more information from the bulk-request result. elasticsearch provides the BulkResponse with the full info. returning the full BulkResponse allows the caller to tell the reason of index failures and more."Here is the [PR|https://github.com/apache/camel/pull/373] for it.
CAMEL-8298 Remove the spring-test dependency from camel-spring-javaconfig We got a [PR|https://github.com/apache/camel/pull/385] which need to remove the deprecated class JavaConfigContextLoader at the same time. Improvement Remove the spring-test dependency from camel-spring-javaconfig We got a [PR|https://github.com/apache/camel/pull/385] which need to remove the deprecated class JavaConfigContextLoader at the same time.
CAMEL-8294 camel-cmis - Creating objects with custom data types See PRhttps://github.com/apache/camel/pull/379 Improvement camel-cmis - Creating objects with custom data types See PRhttps://github.com/apache/camel/pull/379
CAMEL-8293 Be more override-friendly in CamelTestSupport by returning interface type instead of concrete impl CamelTestSupport has a protected JndiRegistry createRegistry()method.It would be better if it returned the Generic type Registry instead - that way you can override the method and return a SimpleRegistry for your tests without having to do this in createCamelContext() which defats createRegistry's purpose. Improvement Be more override-friendly in CamelTestSupport by returning interface type instead of concrete impl CamelTestSupport has a protected JndiRegistry createRegistry()method.It would be better if it returned the Generic type Registry instead - that way you can override the method and return a SimpleRegistry for your tests without having to do this in createCamelContext() which defats createRegistry's purpose.
CAMEL-8288 Attach Lucene Documents to the Results(Hits) if header contains RETURN_LUCENE_DOCS=true Current Hits result only contains the lucene docId, score and assuming there will be a field with the name "contents". This feature will allow specifying a new header value {code} .setHeader("RETURN_LUCENE_DOCS",constant("true")){code}and return the actual lucene documents part of the Hits for further processing. This will allow us to retrieve any field from the actual lucene document. Both Lucene component and LuceneQueryProcessor should support this new header. Improvement Attach Lucene Documents to the Results(Hits) if header contains RETURN_LUCENE_DOCS=true Current Hits result only contains the lucene docId, score and assuming there will be a field with the name "contents". This feature will allow specifying a new header value {code} .setHeader("RETURN_LUCENE_DOCS",constant("true")){code}and return the actual lucene documents part of the Hits for further processing. This will allow us to retrieve any field from the actual lucene document. Both Lucene component and LuceneQueryProcessor should support this new header.
CAMEL-8284 MultiCast in Parallel Processing Mode with StreamCache leads to wrong results If the multi-cast processor gets as an input a stream cache in the parallel processing mode, then the stream is read by different threads concurrently. This leads to wrong results.The attached patch solves this issue. The idea of the patch is to provide a copy of the stream cache to each thread. The copy will use the same cache of the original stream cache, only the stream which accesses the cached data  will be a separate instance. For this, we introduced the new method   copy()in the StreamCache class.See also discussion in http://camel.465427.n5.nabble.com/Data-Corruption-in-SFTP-in-Parallel-Multicast-branches-td5761673.html#a5761781Franz ForsthoferSAP SEe-mail: franz.forsthofer[at]sap.com Improvement MultiCast in Parallel Processing Mode with StreamCache leads to wrong results If the multi-cast processor gets as an input a stream cache in the parallel processing mode, then the stream is read by different threads concurrently. This leads to wrong results.The attached patch solves this issue. The idea of the patch is to provide a copy of the stream cache to each thread. The copy will use the same cache of the original stream cache, only the stream which accesses the cached data  will be a separate instance. For this, we introduced the new method   copy()in the StreamCache class.See also discussion in http://camel.465427.n5.nabble.com/Data-Corruption-in-SFTP-in-Parallel-Multicast-branches-td5761673.html#a5761781Franz ForsthoferSAP SEe-mail: franz.forsthofer[at]sap.com
CAMEL-8283 Fix documentation for File2 component There is some incorrectness in description of "charset" option in documentation (http://camel.apache.org/file2.html):Camel 2.9.3: this option is used to specify the encoding of the file, _and camel will set the Exchange property with Exchange.CHARSET_NAME with the value of this option_. You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file, you can use this option to specify which charset to write the file as well. See further below for a examples and more important details.The incorrectness is highlighted in _italic_ above. No endpoint (file, ftp, sftp) sets Exchange.CHARSET_NAME as illustrated by the output of this test:{code}public class FileEncodingTest extends CamelTestSupport {    @Test    public void testFileEncoding() {        template.sendBody("direct:in", "Hi there");    }    @Override    protected RouteBuilder createRouteBuilder() throws Exception {        return new RouteBuilder() {            @Override            public void configure() throws Exception {                from("direct:in")                        .log("Charset name header (1): ${header.CamelCharsetName}")                        .to("file://output.txt?charset=iso-8859-1")                        .log("Charset name header (2): ${header.CamelCharsetName}")                        .setHeader(Exchange.CHARSET_NAME, constant("iso-8859-1"))                        .log("Charset name header (3): ${header.CamelCharsetName}");            }        };    }}{code}{code}[                          main] route1                         INFO  Charset name header (1): [                          main] SendProcessor                  DEBUG >>>> Endpoint[file://output.txt?charset=iso-8859-1] Exchange[Message: Hi there][                          main] FileOperations                 DEBUG Using Reader to write file: output.txt/ID-wheleph-Lenovo-G570-42931-1422203242220-0-1 with charset: iso-8859-1[                          main] GenericFileProducer            DEBUG Wrote [output.txt/ID-wheleph-Lenovo-G570-42931-1422203242220-0-1] to [Endpoint[file://output.txt?charset=iso-8859-1]][                          main] route1                         INFO  Charset name header (2): [                          main] route1                         INFO  Charset name header (3): iso-8859-1{code} Task Fix documentation for File2 component There is some incorrectness in description of "charset" option in documentation (http://camel.apache.org/file2.html):Camel 2.9.3: this option is used to specify the encoding of the file, _and camel will set the Exchange property with Exchange.CHARSET_NAME with the value of this option_. You can use this on the consumer, to specify the encodings of the files, which allow Camel to know the charset it should load the file content in case the file content is being accessed. Likewise when writing a file, you can use this option to specify which charset to write the file as well. See further below for a examples and more important details.The incorrectness is highlighted in _italic_ above. No endpoint (file, ftp, sftp) sets Exchange.CHARSET_NAME as illustrated by the output of this test:{code}public class FileEncodingTest extends CamelTestSupport {    @Test    public void testFileEncoding() {        template.sendBody("direct:in", "Hi there");    }    @Override    protected RouteBuilder createRouteBuilder() throws Exception {        return new RouteBuilder() {            @Override            public void configure() throws Exception {                from("direct:in")                        .log("Charset name header (1): ${header.CamelCharsetName}")                        .to("file://output.txt?charset=iso-8859-1")                        .log("Charset name header (2): ${header.CamelCharsetName}")                        .setHeader(Exchange.CHARSET_NAME, constant("iso-8859-1"))                        .log("Charset name header (3): ${header.CamelCharsetName}");            }        };    }}{code}{code}[                          main] route1                         INFO  Charset name header (1): [                          main] SendProcessor                  DEBUG >>>> Endpoint[file://output.txt?charset=iso-8859-1] Exchange[Message: Hi there][                          main] FileOperations                 DEBUG Using Reader to write file: output.txt/ID-wheleph-Lenovo-G570-42931-1422203242220-0-1 with charset: iso-8859-1[                          main] GenericFileProducer            DEBUG Wrote [output.txt/ID-wheleph-Lenovo-G570-42931-1422203242220-0-1] to [Endpoint[file://output.txt?charset=iso-8859-1]][                          main] route1                         INFO  Charset name header (2): [                          main] route1                         INFO  Charset name header (3): iso-8859-1{code}
CAMEL-8282 osgi test - Use correct version of ActiveMQ Maybe this test used an outdated AMQ version 5.6.0?https://github.com/apache/camel/blob/master/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jms/JmsTest.java#L52 Test osgi test - Use correct version of ActiveMQ Maybe this test used an outdated AMQ version 5.6.0?https://github.com/apache/camel/blob/master/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jms/JmsTest.java#L52
CAMEL-8281 camel-box - Improved type conversion BoxTypeConverter - documentation is ambiguous as to whether the folderId can be specified with a property or a header. The attached patch changes it so that it can be set on a header and adds a second conversion from byte[] so that camel-box endpoints can sit on the end of a message queue or other non-file like route.A dependence on the CamelFileName header is introduced. New Feature camel-box - Improved type conversion BoxTypeConverter - documentation is ambiguous as to whether the folderId can be specified with a property or a header. The attached patch changes it so that it can be set on a header and adds a second conversion from byte[] so that camel-box endpoints can sit on the end of a message queue or other non-file like route.A dependence on the CamelFileName header is introduced.
CAMEL-8279 ZipAggregationStrategy fails when used in multicast When aggregating byte arrays using a zipaggregationstrategy within a multicast the messageid will be the same resulting in an error because the filename will be duplicate Improvement ZipAggregationStrategy fails when used in multicast When aggregating byte arrays using a zipaggregationstrategy within a multicast the messageid will be the same resulting in an error because the filename will be duplicate
CAMEL-8278 Camel Toolbox - Combined schema for the eip model To provide a combined camelModel.json schema that includes all the eips, data formats, languages from the model, based on each individual schema, but being inter connected and easier for tooling, Camel commands, and Camel runtime management itself to leverage. Sub-task Camel Toolbox - Combined schema for the eip model To provide a combined camelModel.json schema that includes all the eips, data formats, languages from the model, based on each individual schema, but being inter connected and easier for tooling, Camel commands, and Camel runtime management itself to leverage.
CAMEL-8277 camel-hbase - Provide a row prefix filter for the scan method It can be useful to perform some scan requests based on a HBase row prefix filter. A "ModelAwareRowPrefixMatchingFilter" filter could be added to the existing set of available filters.  Improvement camel-hbase - Provide a row prefix filter for the scan method It can be useful to perform some scan requests based on a HBase row prefix filter. A "ModelAwareRowPrefixMatchingFilter" filter could be added to the existing set of available filters. 
CAMEL-8276 camel-hbase - Add timestamp on returned HBase objects The returned objects for scan / get methods does not contains the HBase timestamp. A timestamp field could be added on HBaseRow/HBaseCell classes to allow to get access to timestamps in mapping strategies / routes. Improvement camel-hbase - Add timestamp on returned HBase objects The returned objects for scan / get methods does not contains the HBase timestamp. A timestamp field could be added on HBaseRow/HBaseCell classes to allow to get access to timestamps in mapping strategies / routes.
CAMEL-8275 camel-hbase - Propagation of in message headers By default, the input exchange message headers are not propagated when the get/scan method is called. It is not convenient in routes if you want to call others endpoints after the hbase enpoint. Instead of extending the HeaderMappingStrategy or implementing your own strategy, the HeaderMappingStrategy should propagates input message headers. Improvement camel-hbase - Propagation of in message headers By default, the input exchange message headers are not propagated when the get/scan method is called. It is not convenient in routes if you want to call others endpoints after the hbase enpoint. Instead of extending the HeaderMappingStrategy or implementing your own strategy, the HeaderMappingStrategy should propagates input message headers.
CAMEL-8267 Allow to configure Salesforce URL when creating DTOs via camel-salesforce-maven-plugin When trying to generate DTOs for Salesforce, it is useful to allow using a different environment that production Salesforce. Currently the plugin does not allow to use a different URL, it always connect to https://login.salesforce.com.Suggestion is to add an extra parameter, camelSalesforce.loginUrl, that still uses the same URL as default value, but opens up the possibility to use a different url like https://test.salesforce.com/ Improvement Allow to configure Salesforce URL when creating DTOs via camel-salesforce-maven-plugin When trying to generate DTOs for Salesforce, it is useful to allow using a different environment that production Salesforce. Currently the plugin does not allow to use a different URL, it always connect to https://login.salesforce.com.Suggestion is to add an extra parameter, camelSalesforce.loginUrl, that still uses the same URL as default value, but opens up the possibility to use a different url like https://test.salesforce.com/
CAMEL-8266 [camel-sftp] Allow directories which are un-readable to be ignored on permission error When reading from SFTP server recursively it is possible that we read a directory that are not having permission to be read. Specifically, lost+found directory created by the OS with root permission. We should be able to ignore these kind of errors. I can fix this and submit patch but would need guidance towards the better approach:1. Re-use IgnoreFileNotFoundOrPermissionError flag and extend its functionality2. Add a new flag to ignore these errorsI think the first approach is better as I consider directories to be also a special type of files. I can work on this if you let me know which way to go from someone in Apache Camel team.Thanks,Shreyas Purohit Improvement [camel-sftp] Allow directories which are un-readable to be ignored on permission error When reading from SFTP server recursively it is possible that we read a directory that are not having permission to be read. Specifically, lost+found directory created by the OS with root permission. We should be able to ignore these kind of errors. I can fix this and submit patch but would need guidance towards the better approach:1. Re-use IgnoreFileNotFoundOrPermissionError flag and extend its functionality2. Add a new flag to ignore these errorsI think the first approach is better as I consider directories to be also a special type of files. I can work on this if you let me know which way to go from someone in Apache Camel team.Thanks,Shreyas Purohit
CAMEL-8265 Create a camel component that can Integrate with Hipchat Hipchat (www.hipchat.com) is a tool that allows teams to chat and exchange messages. Hipchat allows you to create room's where multiple users and talk and get notified upon events. Hipchat provides v2 API as defined at https://www.hipchat.com/docs/apiv2/auth. The tokens are called Personal Access Token in V2.Camel Hipchat Producer: It should be able to send message to a room and/or users. It must be able to define the supported color, message formats and notification triggers as provided by the API.Camel Hipchat Consumer: It should be able to consume the latest message from a given set of users identified by mention name or email address. The message and the datetime of the message should be passed as the exchange. New Feature Create a camel component that can Integrate with Hipchat Hipchat (www.hipchat.com) is a tool that allows teams to chat and exchange messages. Hipchat allows you to create room's where multiple users and talk and get notified upon events. Hipchat provides v2 API as defined at https://www.hipchat.com/docs/apiv2/auth. The tokens are called Personal Access Token in V2.Camel Hipchat Producer: It should be able to send message to a room and/or users. It must be able to define the supported color, message formats and notification triggers as provided by the API.Camel Hipchat Consumer: It should be able to consume the latest message from a given set of users identified by mention name or email address. The message and the datetime of the message should be passed as the exchange.
CAMEL-8264 camel-swagger - Add karaf feature So its installable in karaf containers out of the box. Task camel-swagger - Add karaf feature So its installable in karaf containers out of the box.
CAMEL-8263 Add adapt(T) to CamelContext to use instead of type cast to ModelCamelContext .. and remove the @deprecation on the CamelContext api as it causes confusion for people and just more work to work with 2 types. Improvement Add adapt(T) to CamelContext to use instead of type cast to ModelCamelContext .. and remove the @deprecation on the CamelContext api as it causes confusion for people and just more work to work with 2 types.
CAMEL-8262 Optimize CaseInsensitiveMap The CaseInsensitiveMap can be optimized as currently we keep 2 maps with the original keys + lower case keys.But all that can be done from the JDK using a TreeMap with a case insenstice comparator from the JDK itself. This reduces memory (only 1 map) and also better performance as its one map, with the trade-off that walking the map using entrySet no longer supports mutations. Improvement Optimize CaseInsensitiveMap The CaseInsensitiveMap can be optimized as currently we keep 2 maps with the original keys + lower case keys.But all that can be done from the JDK using a TreeMap with a case insenstice comparator from the JDK itself. This reduces memory (only 1 map) and also better performance as its one map, with the trade-off that walking the map using entrySet no longer supports mutations.
CAMEL-8260 Camel EIP model - Ensure consistent getter/setter style also for Boolean types The EIP model in camel-core has getter/setter for all the options. That should be plain getter/setter style without having a boolean isFoo() for an easy boolean simple type check. As the latter we cannot determine if the Foo value was set or not, as the isFoo() boolean has to return a value.We should simply just remove those boolean isFoo() and let it be 100% plain getter/setter with the given types. Improvement Camel EIP model - Ensure consistent getter/setter style also for Boolean types The EIP model in camel-core has getter/setter for all the options. That should be plain getter/setter style without having a boolean isFoo() for an easy boolean simple type check. As the latter we cannot determine if the Foo value was set or not, as the isFoo() boolean has to return a value.We should simply just remove those boolean isFoo() and let it be 100% plain getter/setter with the given types.
CAMEL-8256 Include deadLetterUri in ExchangeFailureHandledEvent To make it easier to grab hold of the dead letter uri from this event Improvement Include deadLetterUri in ExchangeFailureHandledEvent To make it easier to grab hold of the dead letter uri from this event
CAMEL-8255 camel-aws - Test fails This test fails if running a full Camel test{code}Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.063 sec <<< FAILURE! - in org.apache.camel.component.aws.swf.CamelSWFWorkflowConsumerTestreceivesDecisionTask(org.apache.camel.component.aws.swf.CamelSWFWorkflowConsumerTest)  Time elapsed: 3.062 sec  <<< FAILURE!java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <4>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1370)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1352)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:204)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)	at org.apache.camel.component.aws.swf.CamelSWFWorkflowConsumerTest.receivesDecisionTask(CamelSWFWorkflowConsumerTest.java:63){code} Test camel-aws - Test fails This test fails if running a full Camel test{code}Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.063 sec <<< FAILURE! - in org.apache.camel.component.aws.swf.CamelSWFWorkflowConsumerTestreceivesDecisionTask(org.apache.camel.component.aws.swf.CamelSWFWorkflowConsumerTest)  Time elapsed: 3.062 sec  <<< FAILURE!java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <4>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1370)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1352)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:399)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:378)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:366)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:204)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)	at org.apache.camel.component.aws.swf.CamelSWFWorkflowConsumerTest.receivesDecisionTask(CamelSWFWorkflowConsumerTest.java:63){code}
CAMEL-8254 camel-elasticsearch - Test hangs For some reason this test hangs on my laptop each time I do a full Camel test.{code}------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.elasticsearch.ElasticsearchComponentConfigurationAndDocumentationTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.475 sec - in org.apache.camel.component.elasticsearch.ElasticsearchComponentConfigurationAndDocumentationTestRunning org.apache.camel.component.elasticsearch.ElasticsearchComponentTestResults :Tests run: 2, Failures: 0, Errors: 0, Skipped: 0{code}And maven just report some generic error. Test camel-elasticsearch - Test hangs For some reason this test hangs on my laptop each time I do a full Camel test.{code}------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.elasticsearch.ElasticsearchComponentConfigurationAndDocumentationTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.475 sec - in org.apache.camel.component.elasticsearch.ElasticsearchComponentConfigurationAndDocumentationTestRunning org.apache.camel.component.elasticsearch.ElasticsearchComponentTestResults :Tests run: 2, Failures: 0, Errors: 0, Skipped: 0{code}And maven just report some generic error.
CAMEL-8252 Camel route status - Include inflight counter per processor node We have route stats with many details, but we dont include the current number of inflight per processor id, which allows us to break down where the messages are currently being processed in the routes. Improvement Camel route status - Include inflight counter per processor node We have route stats with many details, but we dont include the current number of inflight per processor id, which allows us to break down where the messages are currently being processed in the routes.
CAMEL-8251 eip model - Include EIP name in documentation / schema The eip model uses names such as choice, filter, aggregate etc. It would be good if we can get the EIP book names in the documentation as well, egContent Based RouterDynamic RouteAggregatorContent EnricherPipes and Filters Sub-task eip model - Include EIP name in documentation / schema The eip model uses names such as choice, filter, aggregate etc. It would be good if we can get the EIP book names in the documentation as well, egContent Based RouterDynamic RouteAggregatorContent EnricherPipes and Filters
CAMEL-8250 Add type converter for Saxon data types Camel does currently not contain any type converters for Saxon specific data types, particularily net.sf.saxon.om.NodeInfo (and List<NodeInfo>).This will lead to errors or an empty result (depending on the result type) if e.g. an XPath is executed with a SAXSource documentType with a Saxon XPathFactory as in        from("direct:test")            .setBody(xpath("/a/b/c", Document.class)                    .documentType(SAXSource.class)                    .factory(new XPathFactoryImpl())                    )The provided patch adds the appropriate type converters (and the unit tests for them) to camel-saxon. New Feature Add type converter for Saxon data types Camel does currently not contain any type converters for Saxon specific data types, particularily net.sf.saxon.om.NodeInfo (and List<NodeInfo>).This will lead to errors or an empty result (depending on the result type) if e.g. an XPath is executed with a SAXSource documentType with a Saxon XPathFactory as in        from("direct:test")            .setBody(xpath("/a/b/c", Document.class)                    .documentType(SAXSource.class)                    .factory(new XPathFactoryImpl())                    )The provided patch adds the appropriate type converters (and the unit tests for them) to camel-saxon.
CAMEL-8248 Camel Mail should filter the "Camel*" out header by default It's doesn't make sense that camel MailProducer sending the "Camel*" header to the mail server. We need to update the header filter to filter "Camel*" out headers by default. Improvement Camel Mail should filter the "Camel*" out header by default It's doesn't make sense that camel MailProducer sending the "Camel*" header to the mail server. We need to update the header filter to filter "Camel*" out headers by default.
CAMEL-8246 ZipAggregationStrategy does not preserve headers ZipAggregationStrategy does not preserve any headers from the aggregated exchanges.  This makes it difficult to do something like name the output zip file based on the correlation key:{code:xml}    <from uri="direct:input"/>    <aggregate strategyRef="zipStrategy" eagerCheckCompletion="true">      <correlationExpression>        <simple>${header[batchId]}</simple>      </correlationExpression>      <completionSize>        <simple>${header[batchSize]}</simple>      </completionSize>      <setHeader headerName="CamelFileName">        <simple>batch-${header[batchId]}.zip</simple>      </setHeader>      <to uri="direct:output"/>    </aggregate>{code}This behavior is inconsistent with other existing AggregationStrategies, including AggregationStrategyBeanAdapter, FlexibleAggregationStrategy, UseLatestAggregationStrategy, and UseOriginalAggregationStrategy, which all use the first exchange received (or a copy of it) to initialize the aggregated exchange, hence preserving headers and properties, including those which may used to determine the correlation of related exchanges.  Improvement ZipAggregationStrategy does not preserve headers ZipAggregationStrategy does not preserve any headers from the aggregated exchanges.  This makes it difficult to do something like name the output zip file based on the correlation key:{code:xml}    <from uri="direct:input"/>    <aggregate strategyRef="zipStrategy" eagerCheckCompletion="true">      <correlationExpression>        <simple>${header[batchId]}</simple>      </correlationExpression>      <completionSize>        <simple>${header[batchSize]}</simple>      </completionSize>      <setHeader headerName="CamelFileName">        <simple>batch-${header[batchId]}.zip</simple>      </setHeader>      <to uri="direct:output"/>    </aggregate>{code}This behavior is inconsistent with other existing AggregationStrategies, including AggregationStrategyBeanAdapter, FlexibleAggregationStrategy, UseLatestAggregationStrategy, and UseOriginalAggregationStrategy, which all use the first exchange received (or a copy of it) to initialize the aggregated exchange, hence preserving headers and properties, including those which may used to determine the correlation of related exchanges. 
CAMEL-8242 Camel Toolbox - Include documentation about languages We have schema and documentation for components + eip as part of the build process. We need to include information about languages as well Sub-task Camel Toolbox - Include documentation about languages We have schema and documentation for components + eip as part of the build process. We need to include information about languages as well
CAMEL-8240 camel-apns should allow custom expiration times so that users get fine grained expiration control for mobile push messages Currently it is not possible to send apns messages with a user defined expiration date.This affects both STRING and PAYLOAD message types.The org.apache.camel.component.apns.ApnsProducer calls the ApnsService.push(Collection<String> deviceTokens, String payload) throws NetworkIOException;method which uses a EnhancedApnsNotification.MAXIMUM_EXPIRY (somewhen in 2038).A possible solution would allow the usage of a new ApnsConstants.HEADER_EXPIRY message header where users could store the wanted expiration time. New Feature camel-apns should allow custom expiration times so that users get fine grained expiration control for mobile push messages Currently it is not possible to send apns messages with a user defined expiration date.This affects both STRING and PAYLOAD message types.The org.apache.camel.component.apns.ApnsProducer calls the ApnsService.push(Collection<String> deviceTokens, String payload) throws NetworkIOException;method which uses a EnhancedApnsNotification.MAXIMUM_EXPIRY (somewhen in 2038).A possible solution would allow the usage of a new ApnsConstants.HEADER_EXPIRY message header where users could store the wanted expiration time.
CAMEL-8235 MessageHistory - Should use CamelLogDebugBodyMaxChars to limit max length of message body End users can configure a property on CamelContext to control the max logging length of the message body, CamelLogDebugBodyMaxChars.That option is not in use with message history as the setMaxChars on the internal exchange formatter does not read that property value. Improvement MessageHistory - Should use CamelLogDebugBodyMaxChars to limit max length of message body End users can configure a property on CamelContext to control the max logging length of the message body, CamelLogDebugBodyMaxChars.That option is not in use with message history as the setMaxChars on the internal exchange formatter does not read that property value.
CAMEL-8234 DefaultClassLoader - Should use applicationContextClassLoader from CamelContext as fallback The DefaultClassResolver should also use the configured org.apache.camel.impl.DefaultCamelContext#getApplicationContextClassLoader if its available to attempt to load a class.There can be situations where otherwise loading a class would fail. Improvement DefaultClassLoader - Should use applicationContextClassLoader from CamelContext as fallback The DefaultClassResolver should also use the configured org.apache.camel.impl.DefaultCamelContext#getApplicationContextClassLoader if its available to attempt to load a class.There can be situations where otherwise loading a class would fail.
CAMEL-8232 Camel Toolbox - Include documentation about data formats We have schema and documentation for components + eip as part of the build process. We need to include information about data formats as well. Sub-task Camel Toolbox - Include documentation about data formats We have schema and documentation for components + eip as part of the build process. We need to include information about data formats as well.
CAMEL-8229 Move org.apache.camel.impl.RoutePolicySupport to org.apache.camel.support package We should have support classes in the support package.And then leave the old class as @deprecated which we have done for others, such as org.apache.camel.impl.ServiceSupportThe same should be done for RoutePolicySupport.And there is a few components that should migrated to the new class location- camel-metrics- camel-quartz- camel-quartz2- camel-zookeeper Task Move org.apache.camel.impl.RoutePolicySupport to org.apache.camel.support package We should have support classes in the support package.And then leave the old class as @deprecated which we have done for others, such as org.apache.camel.impl.ServiceSupportThe same should be done for RoutePolicySupport.And there is a few components that should migrated to the new class location- camel-metrics- camel-quartz- camel-quartz2- camel-zookeeper
CAMEL-8225 Graceful shutdown - Show inflight exchange details if forced shutdown triggered With CAMEL-8223 we can now show more details about those exchanges that are inflight but didnt complete in time.We can then show which exchanges, and where they are "stuck" in the routes. This may aid end users to know where to look to improve their situation. Improvement Graceful shutdown - Show inflight exchange details if forced shutdown triggered With CAMEL-8223 we can now show more details about those exchanges that are inflight but didnt complete in time.We can then show which exchanges, and where they are "stuck" in the routes. This may aid end users to know where to look to improve their situation.
CAMEL-8223 Inflight repository to allow browsing of current inflight exchanges We should improve the inflight repo, to allow to browse the exchanges, so end users can "see" where the exchange "are".Today we only offers a counter of the number of inflight per context / routes.But we are able to provide more details about each exchange, such as where they currently are being processed.We should also introduce a mbean so people can use that from tooling to browse. And as well from karaf commands etc. New Feature Inflight repository to allow browsing of current inflight exchanges We should improve the inflight repo, to allow to browse the exchanges, so end users can "see" where the exchange "are".Today we only offers a counter of the number of inflight per context / routes.But we are able to provide more details about each exchange, such as where they currently are being processed.We should also introduce a mbean so people can use that from tooling to browse. And as well from karaf commands etc.
CAMEL-8220 camel-archetype-component - Should be component doc ready The archertype should generate a component with the @UriEndpoint and UriEndpointComponent out of the box, so people get component documentation included.The pom.xml should also include the apt-plugin so Camel generates the .json and .html files in the build. Sub-task camel-archetype-component - Should be component doc ready The archertype should generate a component with the @UriEndpoint and UriEndpointComponent out of the box, so people get component documentation included.The pom.xml should also include the apt-plugin so Camel generates the .json and .html files in the build.
CAMEL-8219 camel-smpp - use jsmpp version 2.2.x or later There are a lot of bug fixes and also some new development in the master branch of jSMPP, recently released as v2.2.1Unfortunately, there are also API changes and some of the unit tests in camel-smpp fail with the new jSMPP.I've created a branch that includes all the fixes for compiler errors:https://github.com/dpocock/camel/tree/dpocock-jsmpp-updatebut more work is needed on the branch to fix the unit tests before it is merged. Improvement camel-smpp - use jsmpp version 2.2.x or later There are a lot of bug fixes and also some new development in the master branch of jSMPP, recently released as v2.2.1Unfortunately, there are also API changes and some of the unit tests in camel-smpp fail with the new jSMPP.I've created a branch that includes all the fixes for compiler errors:https://github.com/dpocock/camel/tree/dpocock-jsmpp-updatebut more work is needed on the branch to fix the unit tests before it is merged.
CAMEL-8215 camel-smpp - use jsmpp version 2.1.1 / new groupId A new jSMPP version is availableIt is released under a new groupId org.jsmppSome of the ServiceMix enhancements are included and it is also released as a bundle. Task camel-smpp - use jsmpp version 2.1.1 / new groupId A new jSMPP version is availableIt is released under a new groupId org.jsmppSome of the ServiceMix enhancements are included and it is also released as a bundle.
CAMEL-8212 CXFRS Consumer should always be able to work with interfaces only CXFRS Consumer often requires a no-op interface implementation provided. Having the interface alone should be enough. Improvement CXFRS Consumer should always be able to work with interfaces only CXFRS Consumer often requires a no-op interface implementation provided. Having the interface alone should be enough.
CAMEL-8210 camel-script - A ruby test keeps failing The CI server report this failurehttps://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-script/2111/testReport/junit/org.apache.camel.builder.script/JRubyScriptThreadSafeTest/testParallelLocalContext/Which happens locally as well. I guess the test runs for a too short time to process all 200 messages. I get about 70-80 processed messages before it fails.Also the test prints to system out which should use the logger instead. Test camel-script - A ruby test keeps failing The CI server report this failurehttps://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-script/2111/testReport/junit/org.apache.camel.builder.script/JRubyScriptThreadSafeTest/testParallelLocalContext/Which happens locally as well. I guess the test runs for a too short time to process all 200 messages. I get about 70-80 processed messages before it fails.Also the test prints to system out which should use the logger instead.
CAMEL-8209 Added "inputHeader" parameter to use a header value as input to the component instead of the body added "inputHeader" parameter to use a header value as input to the component instead of the bodyThis way parameters don't need to be set as body before a query. In combination with "outputHeader" you can completely retain the body and don't even take it as a parameter.Ultimately this reduces the boilderplate of "setBody"/"setHeader" statements even more.Here is the [PR|https://github.com/apache/camel/pull/368] for it. Improvement Added "inputHeader" parameter to use a header value as input to the component instead of the body added "inputHeader" parameter to use a header value as input to the component instead of the bodyThis way parameters don't need to be set as body before a query. In combination with "outputHeader" you can completely retain the body and don't even take it as a parameter.Ultimately this reduces the boilderplate of "setBody"/"setHeader" statements even more.Here is the [PR|https://github.com/apache/camel/pull/368] for it.
CAMEL-8206 Update chunk-templates version There is a new release of the chunk-templates library. We have to update from 2.6 to 2.6.3. Task Update chunk-templates version There is a new release of the chunk-templates library. We have to update from 2.6 to 2.6.3.
CAMEL-8204 Throw Exception if the JMS correlationId is not unique. It could help us to find out the reason of the thread block issue that the JmsProducer sends the request/reply message when there is duplicated correlationId. Improvement Throw Exception if the JMS correlationId is not unique. It could help us to find out the reason of the thread block issue that the JmsProducer sends the request/reply message when there is duplicated correlationId.
CAMEL-8202 Excessive loggging: JSCH -> Permanently added 'X' (RSA) to the list of known hosts. A previous issue, CAMEL-5242, "Add support for pki based auth in camel-jsch" defined the default location of the SSH known_hosts file to be...{code:java}DEFAULT_KNOWN_HOSTS = "META-INF/.ssh/known_hosts". {code}But this causes excessive logging with the misleading message:{code:none}JSCH -> Permanently added 'X' (RSA) to the list of known hosts.{code}It is misleading because the addition is not permament. It repeats with every SFTP connection. It is logged as a WARN which creates unnecesary review and filtering when analyzing the log files.Although it is possible to configure the SFTP endpoint to specify the location of the common {{known_hosts}} file location, this must be added to every SFTP endpoint deployed to a Camel engine. For example, in a Spring XML/DSL the additional option is:{code:xml}knownHostsFile={{user.home}}/.ssh/known_hosts{code}FIX: Change the default to be the ".ssh/known_hosts" file in the user's home path. In [ScpOperations.java|https://github.com/apache/camel/blob/master/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java], the declaration becomes...{code:java}private static final String DEFAULT_KNOWN_HOSTS;static { DEFAULT_KNOWN_HOSTS = System.getProperty("user.home") + "/.ssh/known_hosts"; }{code} Improvement Excessive loggging: JSCH -> Permanently added 'X' (RSA) to the list of known hosts. A previous issue, CAMEL-5242, "Add support for pki based auth in camel-jsch" defined the default location of the SSH known_hosts file to be...{code:java}DEFAULT_KNOWN_HOSTS = "META-INF/.ssh/known_hosts". {code}But this causes excessive logging with the misleading message:{code:none}JSCH -> Permanently added 'X' (RSA) to the list of known hosts.{code}It is misleading because the addition is not permament. It repeats with every SFTP connection. It is logged as a WARN which creates unnecesary review and filtering when analyzing the log files.Although it is possible to configure the SFTP endpoint to specify the location of the common {{known_hosts}} file location, this must be added to every SFTP endpoint deployed to a Camel engine. For example, in a Spring XML/DSL the additional option is:{code:xml}knownHostsFile={{user.home}}/.ssh/known_hosts{code}FIX: Change the default to be the ".ssh/known_hosts" file in the user's home path. In [ScpOperations.java|https://github.com/apache/camel/blob/master/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java], the declaration becomes...{code:java}private static final String DEFAULT_KNOWN_HOSTS;static { DEFAULT_KNOWN_HOSTS = System.getProperty("user.home") + "/.ssh/known_hosts"; }{code}
CAMEL-8198 Upgrade to JAXB 2.2.11 JAXB 2.2.7 has 2 additional JARS which was not needed such as the fastinfoset and whatnot.We should upgrade to 2.2.11 which now is also osgi bundles out of the box. So we should upgrade in the karaf features xml file also. Task Upgrade to JAXB 2.2.11 JAXB 2.2.7 has 2 additional JARS which was not needed such as the fastinfoset and whatnot.We should upgrade to 2.2.11 which now is also osgi bundles out of the box. So we should upgrade in the karaf features xml file also.
CAMEL-8197 Create Maven plugin to inject EIP documentation into the spring and blueprint XML DSL So we can include documentation out of the box in the XSD schema files, which allows end users to better work with Camel, as their IDE editors can show the documentation in the IDE.To do this we need to1)Create a new Maven plugin athttps://github.com/apache/camel/tree/master/tooling/mavenwhich can be inspired byhttps://github.com/apache/camel/tree/master/tooling/maven/camel-package-maven-plugin2)Run this plugin in camel-spring and camel-blueprint, so it can read the camel-spring.xsd, camel-blueprint.xsd file, and inject documentation.3)Parse the XSD maybe using SAX, and inject the documentation.For each xs:element in the top of the schema filehttp://camel.apache.org/schema/spring/camel-spring.xsdThen use the name, eg (name=split){code}<xs:element name="split" type="tns:splitDefinition"/>{code}To find the split.json file in camel-core. Then the json file has the documentation for that type (including inherited types).So for the split definition{code}<xs:complexType name="splitDefinition"><xs:complexContent><xs:extension base="tns:expressionNode"><xs:sequence/><xs:attribute name="parallelProcessing" type="xs:boolean"/><xs:attribute name="strategyRef" type="xs:string"/><xs:attribute name="strategyMethodName" type="xs:string"/><xs:attribute name="strategyMethodAllowNull" type="xs:boolean"/><xs:attribute name="executorServiceRef" type="xs:string"/><xs:attribute name="streaming" type="xs:boolean"/><xs:attribute name="stopOnException" type="xs:boolean"/><xs:attribute name="timeout" type="xs:long"/><xs:attribute name="onPrepareRef" type="xs:string"/><xs:attribute name="shareUnitOfWork" type="xs:boolean"/><xs:anyAttribute namespace="##other" processContents="skip"/></xs:extension></xs:complexContent></xs:complexType>{code}We can find the description of these attributes, and elements from the json file.For example for the streaming attribute we have{code} "streaming": { "kind": "attribute": "required": "false", "type": "boolean", "javaType": "java.lang.Boolean", "description": "The splitter should use streaming -- exchanges are being sent as the data for them becomes available. This improves throughput and memory usage but it has a drawback: - the sent exchanges will no longer contain the link org.apache.camel.ExchangeSPLIT_SIZE header property"{code}Then add the needed xs:annotation to document it. http://www.w3schools.com/schema/el_annotation.aspWhich should be{code}<xs:annotation>  <xs:documentation xml:lang="en">The splitter should use streaming -- exchanges are being sent as the data for them becomes available. This improves throughput and memory usage but it has a drawback: - the sent exchanges will no longer contain the link org.apache.camel.ExchangeSPLIT_SIZE header property    </xs:documentation></xs:annotation>{code}Notice that the xsd will become bigger due the verbosity of how to annotate xsd fields. Mind that sometimes there is not yet documentation, so check for not empty value.To parse the json file, then use this class from camel-core{code}List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema("properties", json, true);{code}Then you have a map with key/value for all those values. Sub-task Create Maven plugin to inject EIP documentation into the spring and blueprint XML DSL So we can include documentation out of the box in the XSD schema files, which allows end users to better work with Camel, as their IDE editors can show the documentation in the IDE.To do this we need to1)Create a new Maven plugin athttps://github.com/apache/camel/tree/master/tooling/mavenwhich can be inspired byhttps://github.com/apache/camel/tree/master/tooling/maven/camel-package-maven-plugin2)Run this plugin in camel-spring and camel-blueprint, so it can read the camel-spring.xsd, camel-blueprint.xsd file, and inject documentation.3)Parse the XSD maybe using SAX, and inject the documentation.For each xs:element in the top of the schema filehttp://camel.apache.org/schema/spring/camel-spring.xsdThen use the name, eg (name=split){code}<xs:element name="split" type="tns:splitDefinition"/>{code}To find the split.json file in camel-core. Then the json file has the documentation for that type (including inherited types).So for the split definition{code}<xs:complexType name="splitDefinition"><xs:complexContent><xs:extension base="tns:expressionNode"><xs:sequence/><xs:attribute name="parallelProcessing" type="xs:boolean"/><xs:attribute name="strategyRef" type="xs:string"/><xs:attribute name="strategyMethodName" type="xs:string"/><xs:attribute name="strategyMethodAllowNull" type="xs:boolean"/><xs:attribute name="executorServiceRef" type="xs:string"/><xs:attribute name="streaming" type="xs:boolean"/><xs:attribute name="stopOnException" type="xs:boolean"/><xs:attribute name="timeout" type="xs:long"/><xs:attribute name="onPrepareRef" type="xs:string"/><xs:attribute name="shareUnitOfWork" type="xs:boolean"/><xs:anyAttribute namespace="##other" processContents="skip"/></xs:extension></xs:complexContent></xs:complexType>{code}We can find the description of these attributes, and elements from the json file.For example for the streaming attribute we have{code} "streaming": { "kind": "attribute": "required": "false", "type": "boolean", "javaType": "java.lang.Boolean", "description": "The splitter should use streaming -- exchanges are being sent as the data for them becomes available. This improves throughput and memory usage but it has a drawback: - the sent exchanges will no longer contain the link org.apache.camel.ExchangeSPLIT_SIZE header property"{code}Then add the needed xs:annotation to document it. http://www.w3schools.com/schema/el_annotation.aspWhich should be{code}<xs:annotation>  <xs:documentation xml:lang="en">The splitter should use streaming -- exchanges are being sent as the data for them becomes available. This improves throughput and memory usage but it has a drawback: - the sent exchanges will no longer contain the link org.apache.camel.ExchangeSPLIT_SIZE header property    </xs:documentation></xs:annotation>{code}Notice that the xsd will become bigger due the verbosity of how to annotate xsd fields. Mind that sometimes there is not yet documentation, so check for not empty value.To parse the json file, then use this class from camel-core{code}List<Map<String, String>> rows = JsonSchemaHelper.parseJsonSchema("properties", json, true);{code}Then you have a map with key/value for all those values.
CAMEL-8196 Add labels for all the model classes so we categorize the EIPs Just like components we can now categorize all the EIPs (eg the model classes). You can see which eips have no labels, fromcd platform/catalogmvn clean install Sub-task Add labels for all the model classes so we categorize the EIPs Just like components we can now categorize all the EIPs (eg the model classes). You can see which eips have no labels, fromcd platform/catalogmvn clean install
CAMEL-8192 camel-mybatis - Replicate "outputHeader" parameter from camel-sql It would reduce a significant amount of boilerplate code (setting headers and body back and forth) if there would be an option to have the mybatis component write results to a specific header instead of the body.This feature was recently implemented for the sql component as CAMEL-8142 and it would be great is could be ported to the mybatis component. New Feature camel-mybatis - Replicate "outputHeader" parameter from camel-sql It would reduce a significant amount of boilerplate code (setting headers and body back and forth) if there would be an option to have the mybatis component write results to a specific header instead of the body.This feature was recently implemented for the sql component as CAMEL-8142 and it would be great is could be ported to the mybatis component.
CAMEL-8191 Charset is ignored for SFTP producer endpoints For SFTP producer endpoints option "charset" is ignored and the output file is created using platform-default charset (usually UTF-8). The simple Spring context illustrates the issue:{code}<beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="       http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd       http://camel.apache.org/schema/spring        http://camel.apache.org/schema/spring/camel-spring.xsd">  <camelContext xmlns="http://camel.apache.org/schema/spring">    <route>      <from uri="stream:in?promptMessage=Enter something:" />      <to uri="sftp://localhost:22/vso/sandbox?charset=ISO-8859-1&amp;username=fake_sftp_user&amp;password=qwerty"/>    </route>  </camelContext></beans>{code}This context defines a route that transfers the string entered by user via SFTP. If the user enters "Müller", I can see 7-byte message in the output directory (because "ü" is represented using 2 bytes in UTF-8). While it should be 6-byte message if the file was encoded in ISO-8859-1.This problem affects only SFTP endpoints. File and FTP endpoints treat the "charset" option correctly. Improvement Charset is ignored for SFTP producer endpoints For SFTP producer endpoints option "charset" is ignored and the output file is created using platform-default charset (usually UTF-8). The simple Spring context illustrates the issue:{code}<beans xmlns="http://www.springframework.org/schema/beans"       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"       xsi:schemaLocation="       http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd       http://camel.apache.org/schema/spring        http://camel.apache.org/schema/spring/camel-spring.xsd">  <camelContext xmlns="http://camel.apache.org/schema/spring">    <route>      <from uri="stream:in?promptMessage=Enter something:" />      <to uri="sftp://localhost:22/vso/sandbox?charset=ISO-8859-1&amp;username=fake_sftp_user&amp;password=qwerty"/>    </route>  </camelContext></beans>{code}This context defines a route that transfers the string entered by user via SFTP. If the user enters "Muller", I can see 7-byte message in the output directory (because "u" is represented using 2 bytes in UTF-8). While it should be 6-byte message if the file was encoded in ISO-8859-1.This problem affects only SFTP endpoints. File and FTP endpoints treat the "charset" option correctly.
CAMEL-8188 Support to configure the scripte engine from CamelContext propertes It should be useful for the user if we can configure the scripte builder behavior from the camel context properties.Such as "CamelCompileScripte" and "CamelReuseScripteEngine". Improvement Support to configure the scripte engine from CamelContext propertes It should be useful for the user if we can configure the scripte builder behavior from the camel context properties.Such as "CamelCompileScripte" and "CamelReuseScripteEngine".
CAMEL-8186 Upgrade camel-aws aws-java-sdk libraries As of 26/12/2014 Camel currently ships with 1.8.9_11 (defined in parent/pom.xml) for the aws-java-sdk (and corresponding servicemix wrapped bundle). New features were added to the 1.9.x series of the aws-java-sdk, such as the ability to use s3 create events that were recently added in November (http://aws.amazon.com/blogs/aws/s3-event-notification/). The class is named S3EventNotification.This upgrade requires referencing an OSGI-and non-OSGI jar per the current design (which relies on Apache ServiceMix wrapped bundles for the OSGi case). As of the time of writing, servicemix has a bundle version 1.9.8_1 that could be used. However, upgrading is not a drop-in task as the AWS java sdk has renamed the com.amazonaws.dynamodb package to com.amazonaws.dynamodbv2, so camel-aws dynamodb classes must be upgraded to support this change (to point to the right class locations). It's unknown at the moment whether there are any code-level incompatibilities introduced with the dynamodbv2 package rename. Improvement Upgrade camel-aws aws-java-sdk libraries As of 26/12/2014 Camel currently ships with 1.8.9_11 (defined in parent/pom.xml) for the aws-java-sdk (and corresponding servicemix wrapped bundle). New features were added to the 1.9.x series of the aws-java-sdk, such as the ability to use s3 create events that were recently added in November (http://aws.amazon.com/blogs/aws/s3-event-notification/). The class is named S3EventNotification.This upgrade requires referencing an OSGI-and non-OSGI jar per the current design (which relies on Apache ServiceMix wrapped bundles for the OSGi case). As of the time of writing, servicemix has a bundle version 1.9.8_1 that could be used. However, upgrading is not a drop-in task as the AWS java sdk has renamed the com.amazonaws.dynamodb package to com.amazonaws.dynamodbv2, so camel-aws dynamodb classes must be upgraded to support this change (to point to the right class locations). It's unknown at the moment whether there are any code-level incompatibilities introduced with the dynamodbv2 package rename.
CAMEL-8184 [AWS-S3] Add support to set/retrieve custom headers in S3 for Producers & Consumers AWS S3 SDK allows you to set any headers when sending set Object requests in S3 using either PutObjectRequest or multipart upload. This support especially needs to be added so that the users can use it to set encryption headers for SSE-KMS(http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) on S3 using the current 1.8.X library. Even if the library is upgraded to 1.9.X which have defined constants for encryption (which would currently break dynamodb) allowing to set headers manually by the users would allow time to add more constants without blocking any users and keeping it compatible,  The Github PR Link: https://github.com/apache/camel/pull/360 Improvement [AWS-S3] Add support to set/retrieve custom headers in S3 for Producers & Consumers AWS S3 SDK allows you to set any headers when sending set Object requests in S3 using either PutObjectRequest or multipart upload. This support especially needs to be added so that the users can use it to set encryption headers for SSE-KMS(http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) on S3 using the current 1.8.X library. Even if the library is upgraded to 1.9.X which have defined constants for encryption (which would currently break dynamodb) allowing to set headers manually by the users would allow time to add more constants without blocking any users and keeping it compatible,  The Github PR Link: https://github.com/apache/camel/pull/360
CAMEL-8183 JasyptPropertiesParser: Support for partially encrypted properties, custom encryptor COMPONENT: *camel-jasypt**Support for partially encrypted properties:*The proposed change allows for mixing encrypted and unencrypted content within a string (property value).Previously the whole property had to be encrypted, example: {noformat}Argument: ENC(123#def)Result: somepass{noformat}With the proposed change the following is supported:{noformat}Argument: http://somehost:port/path?pass=ENC(123#def)&token=ENC(321#fed)Result: http://somehost:port/path?pass=somepass&token=sometoken{noformat}An arbitrary amount of "ENC blocks" is supported, this is very helpful if you want to encrypt parts of uri's, as in the example above.*Support for specifying a custom encryptor:*-Previously the encryptor was always instanciated within the method:public StandardPBEStringEncryptor getEncryptor(). -A secret (password) as well as a custom encryption algorithm could be set using approperiate setter methods.-I have now added a setter method for the encryptor:public void setEncryptor(StandardPBEStringEncryptor encryptor)-If an encryptor is set, the username and algorithm setter methods is ignored.This change is useful when an encryptor is provided through an OSGI service, and the secret password is not known.The proposed changes are available on github:https://github.com/apache/camel/pull/357Patch: https://github.com/apache/camel/pull/357.patch Improvement JasyptPropertiesParser: Support for partially encrypted properties, custom encryptor COMPONENT: *camel-jasypt**Support for partially encrypted properties:*The proposed change allows for mixing encrypted and unencrypted content within a string (property value).Previously the whole property had to be encrypted, example: {noformat}Argument: ENC(123#def)Result: somepass{noformat}With the proposed change the following is supported:{noformat}Argument: http://somehost:port/path?pass=ENC(123#def)&token=ENC(321#fed)Result: http://somehost:port/path?pass=somepass&token=sometoken{noformat}An arbitrary amount of "ENC blocks" is supported, this is very helpful if you want to encrypt parts of uri's, as in the example above.*Support for specifying a custom encryptor:*-Previously the encryptor was always instanciated within the method:public StandardPBEStringEncryptor getEncryptor(). -A secret (password) as well as a custom encryption algorithm could be set using approperiate setter methods.-I have now added a setter method for the encryptor:public void setEncryptor(StandardPBEStringEncryptor encryptor)-If an encryptor is set, the username and algorithm setter methods is ignored.This change is useful when an encryptor is provided through an OSGI service, and the secret password is not known.The proposed changes are available on github:https://github.com/apache/camel/pull/357Patch: https://github.com/apache/camel/pull/357.patch
CAMEL-8182 xpath - Add documentType option to xml dsl See nabblehttp://camel.465427.n5.nabble.com/Is-it-possible-to-set-the-documentType-on-an-XPath-in-XML-DSL-Spring-Blueprint-td5760613.htmleg you can do in java dsl{code}      from("file://target/file/xpathsplit")                     // set documentType to org.xml.sax.InputSource then Camel will use SAX to split the file                     .split(xpath("/persons/person").documentType(InputSource.class)).streaming()                     .to("mock:splitted"); {code}We need to be able to set documentType in the xml dsl. Improvement xpath - Add documentType option to xml dsl See nabblehttp://camel.465427.n5.nabble.com/Is-it-possible-to-set-the-documentType-on-an-XPath-in-XML-DSL-Spring-Blueprint-td5760613.htmleg you can do in java dsl{code}      from("file://target/file/xpathsplit")                     // set documentType to org.xml.sax.InputSource then Camel will use SAX to split the file                     .split(xpath("/persons/person").documentType(InputSource.class)).streaming()                     .to("mock:splitted"); {code}We need to be able to set documentType in the xml dsl.
CAMEL-8180 Incorrect handling of ConsumerTimeoutException When there is 1 consumer connector and multiple consumer threads, the idea to handle consumer offset is to sync all consumer threads via cyclic barrier. In order to make sure threads will step on the barrier - "consumer.timeout.ms" property needs to be set, otherwise all threads may wait infinite time on "hasNext()" iterator call, since number of partitions can be less than number of threads.Attaching patch which fixes handling of ConsumerTimeoutException. Improvement Incorrect handling of ConsumerTimeoutException When there is 1 consumer connector and multiple consumer threads, the idea to handle consumer offset is to sync all consumer threads via cyclic barrier. In order to make sure threads will step on the barrier - "consumer.timeout.ms" property needs to be set, otherwise all threads may wait infinite time on "hasNext()" iterator call, since number of partitions can be less than number of threads.Attaching patch which fixes handling of ConsumerTimeoutException.
CAMEL-8179 Support to set the ErrorHandler from the JettyHttpComponent We should let user setup the ErrorHandler from JettyHttpComponent. Improvement Support to set the ErrorHandler from the JettyHttpComponent We should let user setup the ErrorHandler from JettyHttpComponent.
CAMEL-8178 ThreadPoolProfile - Add option for allowCorePoolTimeout This is a new option from Java7 onwards. We should allow people to configure that option as well. Improvement ThreadPoolProfile - Add option for allowCorePoolTimeout This is a new option from Java7 onwards. We should allow people to configure that option as well.
CAMEL-8177 Graceful shutdown - Should allow background thread to terminate See nabblehttp://camel.465427.n5.nabble.com/ShutdownTask-thread-does-not-complete-tp5756412.htmlIf you suspend/resume or stop/start routes etc then the graceful shutdown is in use to handle that. And it uses a background thread to do this work. But once that thread was created it would stay around forever as the core pool size is 1. But we should allow that thread to terminate. Improvement Graceful shutdown - Should allow background thread to terminate See nabblehttp://camel.465427.n5.nabble.com/ShutdownTask-thread-does-not-complete-tp5756412.htmlIf you suspend/resume or stop/start routes etc then the graceful shutdown is in use to handle that. And it uses a background thread to do this work. But once that thread was created it would stay around forever as the core pool size is 1. But we should allow that thread to terminate.
CAMEL-8176 camel-jackson - Make it easier to register custom modules See SOhttp://stackoverflow.com/questions/27624985/how-to-get-simple-datetime-serialization-with-camel-and-jacksonhttp://stackoverflow.com/questions/3269459/how-to-serialize-joda-datetime-with-jackson-json-processerWe should make it easier with camel-jackson to register custom modules from java and xml dsl.Also this should be easy when using rest-dsl as well. Improvement camel-jackson - Make it easier to register custom modules See SOhttp://stackoverflow.com/questions/27624985/how-to-get-simple-datetime-serialization-with-camel-and-jacksonhttp://stackoverflow.com/questions/3269459/how-to-serialize-joda-datetime-with-jackson-json-processerWe should make it easier with camel-jackson to register custom modules from java and xml dsl.Also this should be easy when using rest-dsl as well.
CAMEL-8175 camel-swagger - Add support for multiple CamelContexts Related to CAMEL-8161Instead of having to co-locate camel-swagger in the same deployment as your Camel, then we should add support for supporting multiple camel contexts, so the api-docs can support that.Then people can inspect the rest services per camel, using its id, etc/foo/api-docs/bar/api-docsWhere foo and bar is the camelId Improvement camel-swagger - Add support for multiple CamelContexts Related to CAMEL-8161Instead of having to co-locate camel-swagger in the same deployment as your Camel, then we should add support for supporting multiple camel contexts, so the api-docs can support that.Then people can inspect the rest services per camel, using its id, etc/foo/api-docs/bar/api-docsWhere foo and bar is the camelId
CAMEL-8174 Added TimeoutInflightRepository to track the long processing exchange It could be helpful is we can track the long processing exchange, user can log or send alarm when getting these exchange by extending the TimeoutInflightRepository. Improvement Added TimeoutInflightRepository to track the long processing exchange It could be helpful is we can track the long processing exchange, user can log or send alarm when getting these exchange by extending the TimeoutInflightRepository.
CAMEL-8173 Support to set InflightRepository from Camel XML DSL CamelContext has the method to setup the InflightRepository, but there is not XML DSL supports it. Improvement Support to set InflightRepository from Camel XML DSL CamelContext has the method to setup the InflightRepository, but there is not XML DSL supports it.
CAMEL-8172 Enable multiple consumers for kafka endpoint MultipleConsumersSupport.java{quote} * A rare few endpoints do in fact support multiple consumers and thus the purpose of this interface. * For example JMS endpoints which have topics that can be consumed by multiple consumers.{quote}Kafka has nothing, but topics and I'm wondering why this was not implemented right away.  Improvement Enable multiple consumers for kafka endpoint MultipleConsumersSupport.java{quote} * A rare few endpoints do in fact support multiple consumers and thus the purpose of this interface. * For example JMS endpoints which have topics that can be consumed by multiple consumers.{quote}Kafka has nothing, but topics and I'm wondering why this was not implemented right away. 
CAMEL-8170 add support to camel-solr for List<SolrInputDocument> objects in the message body upstream could prepare List of SolrInputDocument and we should support passing the list in via the message body.Here is the Github Pull requesthttps://github.com/apache/camel/pull/359 New Feature add support to camel-solr for List<SolrInputDocument> objects in the message body upstream could prepare List of SolrInputDocument and we should support passing the list in via the message body.Here is the Github Pull requesthttps://github.com/apache/camel/pull/359
CAMEL-8166 provide access to suspended exchanges in BacklogDebugger There is no way to get access to a suspended exchange through the BacklogDebugger. The attached patch provides a getter method for suspended exchanges. Improvement provide access to suspended exchanges in BacklogDebugger There is no way to get access to a suspended exchange through the BacklogDebugger. The attached patch provides a getter method for suspended exchanges.
CAMEL-8165 Async routing engine - Add insight into threads blocked waiting for callbacks During routing there async routing engine may kick-in and depending on which components / EIPs are in use, and what options people have turned on/off, there is many combos.In some situations the routing engine may need to block a thread to force it be synchronous at a given point.We should add insight at runtime when these situations happens, so end users can monitor that. And also control the locks in case something bad happens. Or they are want to force "rouge" threads to terminate.These bad situations can be caused by 3rd party developed components, the JVM running out of memory, or java.lang.Error being thrown, or 3rd party takes long time to process, or never signal a callback, or a hot redeployment of a Camel app leaked threads, or whatever.This can cause threads in Camel to appears as stuck, and today to remedy this is to restart the JVM, or force a thread to terminate using some JVM tool. New Feature Async routing engine - Add insight into threads blocked waiting for callbacks During routing there async routing engine may kick-in and depending on which components / EIPs are in use, and what options people have turned on/off, there is many combos.In some situations the routing engine may need to block a thread to force it be synchronous at a given point.We should add insight at runtime when these situations happens, so end users can monitor that. And also control the locks in case something bad happens. Or they are want to force "rouge" threads to terminate.These bad situations can be caused by 3rd party developed components, the JVM running out of memory, or java.lang.Error being thrown, or 3rd party takes long time to process, or never signal a callback, or a hot redeployment of a Camel app leaked threads, or whatever.This can cause threads in Camel to appears as stuck, and today to remedy this is to restart the JVM, or force a thread to terminate using some JVM tool.
CAMEL-8161 camel-swagger - Use JMX to lookup Camel's so we support everyone Currently there is only spring support out of the boxhttps://github.com/apache/camel/blob/master/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/spring/SpringRestSwaggerApiDeclarationServlet.scalaThough we could likely use jmx to lookup the Camel's and then grab the rest definition as xml, and marshal back to objects, which the scala swagger reader needs. Then it would work in any kind of environment. Improvement camel-swagger - Use JMX to lookup Camel's so we support everyone Currently there is only spring support out of the boxhttps://github.com/apache/camel/blob/master/components/camel-swagger/src/main/scala/org/apache/camel/component/swagger/spring/SpringRestSwaggerApiDeclarationServlet.scalaThough we could likely use jmx to lookup the Camel's and then grab the rest definition as xml, and marshal back to objects, which the scala swagger reader needs. Then it would work in any kind of environment.
CAMEL-8159 Using setHeader is not enlisted in JMX When using some minor EIPs such as setHeader / setProperty then they are not enlisted as JMX MBeans which means we do not capture full details when they are part of routes. Improvement Using setHeader is not enlisted in JMX When using some minor EIPs such as setHeader / setProperty then they are not enlisted as JMX MBeans which means we do not capture full details when they are part of routes.
CAMEL-8155 rest-dsl - Add support for bridgeErrorHandler See nabblehttp://camel.465427.n5.nabble.com/REST-DSL-Exception-Handling-tp5760600.htmlWe should add support for this option, so people can use Camel routes to deal with invalid input data. Improvement rest-dsl - Add support for bridgeErrorHandler See nabblehttp://camel.465427.n5.nabble.com/REST-DSL-Exception-Handling-tp5760600.htmlWe should add support for this option, so people can use Camel routes to deal with invalid input data.
CAMEL-8154 allow configuration of fallbackTimeout in BacklogDebugger There is a hard coded timeout of 5 minutes for suspended exchanges. This is reasonable for most cases but what if a user needs more time? I could imagine it being really annoying if my IDE resumed my Java breakpoints after 5 minutes automatically.A simple getter/setter on the fallbackTimeout value would be nice. Improvement allow configuration of fallbackTimeout in BacklogDebugger There is a hard coded timeout of 5 minutes for suspended exchanges. This is reasonable for most cases but what if a user needs more time? I could imagine it being really annoying if my IDE resumed my Java breakpoints after 5 minutes automatically.A simple getter/setter on the fallbackTimeout value would be nice.
CAMEL-8151 Support a custom transport client in camel-elasticsearch The camel-elasticsearch client does not support a customizable TransportClient. It currently configures the client with hard-coded values when the endpoint is created.This is problematic when fine-grain control over client creation is required. Also, this causes issues for the health of the camel build, as the current unit tests use a local client as a result which will spin up a full elasticsearch server during the build instead of relying on a mock object for the tests. Improvement Support a custom transport client in camel-elasticsearch The camel-elasticsearch client does not support a customizable TransportClient. It currently configures the client with hard-coded values when the endpoint is created.This is problematic when fine-grain control over client creation is required. Also, this causes issues for the health of the camel build, as the current unit tests use a local client as a result which will spin up a full elasticsearch server during the build instead of relying on a mock object for the tests.
CAMEL-8150 camel-hdfs sending message per chunk, not per file When hdfs consumer picks orinary file, it sends message per data chunk. Not message per file as one could expect.In the docs it is mentioned only in option description, which can be overlooked very easily.It should be explicitly written in the beginning of the [component doc page | https://camel.apache.org/hdfs2].Option description from docs|chunkSize | 4096 | When reading a normal file, this is split into chunks producing a message per chunk. |Sample camel route (workaround could be to add {{?fileExist=Append}} to file component){code:xml} <camel:route id="toFile">            <from uri="hdfs2:localhost:8020/tmp/camel-test/"/>            <log message="picked up file from hdfs with name $simple{header.CamelFileName}"/>            <to uri="file:test-dest"/>            <log message="file downloaded from hadoop"/></camel:route>{code} Task camel-hdfs sending message per chunk, not per file When hdfs consumer picks orinary file, it sends message per data chunk. Not message per file as one could expect.In the docs it is mentioned only in option description, which can be overlooked very easily.It should be explicitly written in the beginning of the [component doc page | https://camel.apache.org/hdfs2].Option description from docs|chunkSize | 4096 | When reading a normal file, this is split into chunks producing a message per chunk. |Sample camel route (workaround could be to add {{?fileExist=Append}} to file component){code:xml} <camel:route id="toFile">            <from uri="hdfs2:localhost:8020/tmp/camel-test/"/>            <log message="picked up file from hdfs with name $simple{header.CamelFileName}"/>            <to uri="file:test-dest"/>            <log message="file downloaded from hadoop"/></camel:route>{code}
CAMEL-8149 Support application-generated document identifiers in bulk index requests Elasticsearch (via the elasticsearch-java transport client) provides two categories of APIs to write and read data: Individual requests (index, get, delete) and bulk requests.When performing bulk updates one creates individual index requests and adds them to the bulk request. When creating an index request one can set the source document, id, etc. The current design of the camel-elasticsearch component controls the transformation and assembly of an input body (json string, byte[], xcontentfactory, map) to an index request. Thus, it is impossible to set the id on the index request that goes into a bulk action. The end result is that the id is set by the default behavior of the underlying elasticsearch-java client which generates a random identifier.  This is problematic in situations where control is needed over the id, e.g. for de-duplication purposes.My proposal is to improve the design of the producer to allow for elasticsearch-java ActionRequest sub-classes in the message body so that upstream message processors can control the creation of those requests.I've attached a patch and sent a pull request on github.Thank you!Derek Abdine Improvement Support application-generated document identifiers in bulk index requests Elasticsearch (via the elasticsearch-java transport client) provides two categories of APIs to write and read data: Individual requests (index, get, delete) and bulk requests.When performing bulk updates one creates individual index requests and adds them to the bulk request. When creating an index request one can set the source document, id, etc. The current design of the camel-elasticsearch component controls the transformation and assembly of an input body (json string, byte[], xcontentfactory, map) to an index request. Thus, it is impossible to set the id on the index request that goes into a bulk action. The end result is that the id is set by the default behavior of the underlying elasticsearch-java client which generates a random identifier.  This is problematic in situations where control is needed over the id, e.g. for de-duplication purposes.My proposal is to improve the design of the producer to allow for elasticsearch-java ActionRequest sub-classes in the message body so that upstream message processors can control the creation of those requests.I've attached a patch and sent a pull request on github.Thank you!Derek Abdine
CAMEL-8147 Using @ManagedResource on an Endpoint removes all the default JMX properties Using @ManagedResource on an Endpoint removes all the default JMX properties. For example:Camel: camelContextCamel management name: camelContextEndpoint uri: xxxxxxxxxxxxObject Name: xxxxxxxxxxSingleton: trueState: StartedAre present by default for all endpoints, as soon as you have a custom endpoint annotated with @ManagedResource these defaults are no longer present.  Improvement Using @ManagedResource on an Endpoint removes all the default JMX properties Using @ManagedResource on an Endpoint removes all the default JMX properties. For example:Camel: camelContextCamel management name: camelContextEndpoint uri: xxxxxxxxxxxxObject Name: xxxxxxxxxxSingleton: trueState: StartedAre present by default for all endpoints, as soon as you have a custom endpoint annotated with @ManagedResource these defaults are no longer present. 
CAMEL-8145 Mina Consumer doesn't send the message back if the response is set on in message Mina should send the message back if the user just set the in message body. Improvement Mina Consumer doesn't send the message back if the response is set on in message Mina should send the message back if the user just set the in message body.
CAMEL-8144 camel-reslet - May have slowdown when using their async client handler Seehttp://camel.465427.n5.nabble.com/Delayed-request-processing-with-Camel-Restlet-2-14-0-tp5759915.htmlAnd github tickethttps://github.com/restlet/restlet-framework-java/issues/996Adding support for using synchronous=true to use the sync client handler of theirs which worked with better performance in Camel 2.13.x or older. Task camel-reslet - May have slowdown when using their async client handler Seehttp://camel.465427.n5.nabble.com/Delayed-request-processing-with-Camel-Restlet-2-14-0-tp5759915.htmlAnd github tickethttps://github.com/restlet/restlet-framework-java/issues/996Adding support for using synchronous=true to use the sync client handler of theirs which worked with better performance in Camel 2.13.x or older.
CAMEL-8142 camel-sql: store query result in header instead of body The SQL component stores query results in the message body, clobbering the existing body.  It would be nice to store the results of some queries in a header.This would be particularly useful when combined with outputType=SelectOne to store a value such as a primary key / object ID into a header. New Feature camel-sql: store query result in header instead of body The SQL component stores query results in the message body, clobbering the existing body.  It would be nice to store the results of some queries in a header.This would be particularly useful when combined with outputType=SelectOne to store a value such as a primary key / object ID into a header.
CAMEL-8141 Upgrade to AWS SDK version 1.9.8 Camel-Aws uses deprecated classes for DynamoDb integration which makes it impossible to update Aws-SDK to 1.9xThis is a change that probably affects the backwards compatibility but at the same time very important for users of camel and aws to adopt new features from Amazon since the pace they arrive in is very fast. Improvement Upgrade to AWS SDK version 1.9.8 Camel-Aws uses deprecated classes for DynamoDb integration which makes it impossible to update Aws-SDK to 1.9xThis is a change that probably affects the backwards compatibility but at the same time very important for users of camel and aws to adopt new features from Amazon since the pace they arrive in is very fast.
CAMEL-8140 Camel commands - Remove backlog tracer commands They are not very useable from a cli, and they are currently too tied to a local jvm. Sub-task Camel commands - Remove backlog tracer commands They are not very useable from a cli, and they are currently too tied to a local jvm.
CAMEL-8139 rest-dsl - Allow to configure data format properties for IN vs OUT We should allow prefixing the keys with- xml.in.- xml.out.- json.in.- json.out.To denote that the configuration is only for that case. A key without any of these prefixes is a common key. Improvement rest-dsl - Allow to configure data format properties for IN vs OUT We should allow prefixing the keys with- xml.in.- xml.out.- json.in.- json.out.To denote that the configuration is only for that case. A key without any of these prefixes is a common key.
CAMEL-8138 camel-jaxb - Allow jaxb to marshal non JAXBElement For example if the content is already in XML and you use jaxb then it fails, as it requires the message body is a JAXBElement class (eg has those annotations etc.).We should add option so you can relax this and marshal the content as-is, such as if its already in XML from a String etc.  Improvement camel-jaxb - Allow jaxb to marshal non JAXBElement For example if the content is already in XML and you use jaxb then it fails, as it requires the message body is a JAXBElement class (eg has those annotations etc.).We should add option so you can relax this and marshal the content as-is, such as if its already in XML from a String etc. 
CAMEL-8136 rest-dsl - Auto binding mode should detect if JAXB unmarshal is needed to not You may want to marshal to a type as IN, but for OUT you want to use the message body as-is, as its already in XML format, eg a String or something.Currently because JAXB was used for IN, rest-dsl wants to use JAXB for OUT as well.See nabblehttp://camel.465427.n5.nabble.com/Rest-DSL-IN-OUT-types-tp5760404.html Improvement rest-dsl - Auto binding mode should detect if JAXB unmarshal is needed to not You may want to marshal to a type as IN, but for OUT you want to use the message body as-is, as its already in XML format, eg a String or something.Currently because JAXB was used for IN, rest-dsl wants to use JAXB for OUT as well.See nabblehttp://camel.465427.n5.nabble.com/Rest-DSL-IN-OUT-types-tp5760404.html
CAMEL-8133 rest-dsl - Make it easy to support CORS Rest services may need to support CORS to make using them easier for end users and tooling or whatnot.We should add an option to turn this on|off, so we add the needed HTTP headers out of the box for CORS. And provide a default set of CORS headers. Improvement rest-dsl - Make it easy to support CORS Rest services may need to support CORS to make using them easier for end users and tooling or whatnot.We should add an option to turn this on|off, so we add the needed HTTP headers out of the box for CORS. And provide a default set of CORS headers.
CAMEL-8132 Update Mongodb Java driver and flapdoodle for mongodb version  There are new version of mongodb java driver and flapdoodle for mongodb unit testing. We need to update:- mongodb java driver from 2.12.0 to 2.12.4- flapdoodle from 1.46.1 to 1.46.4 Task Update Mongodb Java driver and flapdoodle for mongodb version  There are new version of mongodb java driver and flapdoodle for mongodb unit testing. We need to update:- mongodb java driver from 2.12.0 to 2.12.4- flapdoodle from 1.46.1 to 1.46.4
CAMEL-8131 rest-dsl - Include route id in listRestServices JMX api So you would know which Camel route the rest service is using. Improvement rest-dsl - Include route id in listRestServices JMX api So you would know which Camel route the rest service is using.
CAMEL-8130 camel-sql - Allow selectList outputType to map to class as well selectOne can map to a class object. But selectList cannot Improvement camel-sql - Allow selectList outputType to map to class as well selectOne can map to a class object. But selectList cannot
CAMEL-8129 XAdES BES/EPES for XML Signature Signer XAdES is a standard from the European Telecomunications Standars Institute (ETSI). This standard is based on XML Signature and defines enhancements which are placed into the 'SignatureProperties' element of the XML Signature. You can find the latest version of the standard in  http://www.etsi.org/deliver/etsi_ts%5C101900_101999%5C101903%5C01.04.02_60%5Cts_101903v010402p.pdf.The attached patch implements the form Basic Electronic Signature (XAdES-BES) and the form Explicit Policy based Electronic Signature  (XAdES-EPES) for the XML Signature signer endpoint. It supports all current versions of XAdES (1.4.2, 1.4.1, 1.3.2., 1.2.2, 1.1.1).The implementation has the following limitations:- No support for 'QualifyingPropertiesReference' (see section 6.3.2 of spec).- No support for Transforms element contained in SignaturePolicyId element contained in SignaturePolicyIdentifier- No support of CounterSignature element - AllDataObjectsTimeStamp element is not supported - IndividualDataObjectsTimeStamp element is not supported It is possible to overcome the limitations in a later improvement.I can do the wiki-update.Regards Franz Forsthofer---------------------------------SAP SEe-mail: franz.forsthofer@sap.com Improvement XAdES BES/EPES for XML Signature Signer XAdES is a standard from the European Telecomunications Standars Institute (ETSI). This standard is based on XML Signature and defines enhancements which are placed into the 'SignatureProperties' element of the XML Signature. You can find the latest version of the standard in  http://www.etsi.org/deliver/etsi_ts%5C101900_101999%5C101903%5C01.04.02_60%5Cts_101903v010402p.pdf.The attached patch implements the form Basic Electronic Signature (XAdES-BES) and the form Explicit Policy based Electronic Signature  (XAdES-EPES) for the XML Signature signer endpoint. It supports all current versions of XAdES (1.4.2, 1.4.1, 1.3.2., 1.2.2, 1.1.1).The implementation has the following limitations:- No support for 'QualifyingPropertiesReference' (see section 6.3.2 of spec).- No support for Transforms element contained in SignaturePolicyId element contained in SignaturePolicyIdentifier- No support of CounterSignature element - AllDataObjectsTimeStamp element is not supported - IndividualDataObjectsTimeStamp element is not supported It is possible to overcome the limitations in a later improvement.I can do the wiki-update.Regards Franz Forsthofer---------------------------------SAP SEe-mail: franz.forsthofer@sap.com
CAMEL-8128 Polish the camel-example-servlet-tomcat-no-spring to show how to setup the registry Current example doesn't show how to setup the registry which is import part of camel context setup. We need to polish the example for that. Improvement Polish the camel-example-servlet-tomcat-no-spring to show how to setup the registry Current example doesn't show how to setup the registry which is import part of camel context setup. We need to polish the example for that.
CAMEL-8127 Camel-chunk: update chunk-templates version There is a new version of chunk-templates library used by camel-chunk component. We need to update from 2.5 to 2.6. Task Camel-chunk: update chunk-templates version There is a new version of chunk-templates library used by camel-chunk component. We need to update from 2.5 to 2.6.
CAMEL-8124 Using ServicePool in ConsumerCache Current ConsumerCache just cache the PollingConsumer in the map, it may cause some trouble if the PollingConsumer is not thread safe. Using the ServicePool to cache the PollingConsumer could help us with that.To workaround this issue, we cannot call the ConsumerTemplate in multithread mode. Improvement Using ServicePool in ConsumerCache Current ConsumerCache just cache the PollingConsumer in the map, it may cause some trouble if the PollingConsumer is not thread safe. Using the ServicePool to cache the PollingConsumer could help us with that.To workaround this issue, we cannot call the ConsumerTemplate in multithread mode.
CAMEL-8120 ChannelHandlerFactories.newDelimiterBasedFrameDecoder always strips delimiters The constructor of _{{io.netty.handler.codec.DelimiterBasedFrameDecoder}}_ includes a boolean _{{stripDelimiter}}_ parameter, which is always set to true by the _{{ChannelHandlerFactories.newDelimiterBasedFrameDecoder}}_ method (both directly and within _{{org.apache.camel.component.netty4.codec.DatagramPacketDelimiterDecoder}}_, which delegates to _{{DelimiterBasedFrameDecoder}}_)This parameter needs to be set to false when the end-of-frame delimiter is part of the message (e.g., the closing tag of an XML document), and therefore must not be discarded.Suggested fix:- Add a new constructor to _{{DatagramPacketDelimiterDecoder}}_ that includes the parameter, which is then passed through to the delegate _{{DelimiterBasedFrameDecoder}}_- Add a new method signature for _{{ChannelHandlerFactories.newDelimiterBasedFrameDecoder}}_ that includes the parameter- refactor existing _{{newDelimiterBasedFrameDecoder}}_ method to delegate to the new method Improvement ChannelHandlerFactories.newDelimiterBasedFrameDecoder always strips delimiters The constructor of _{{io.netty.handler.codec.DelimiterBasedFrameDecoder}}_ includes a boolean _{{stripDelimiter}}_ parameter, which is always set to true by the _{{ChannelHandlerFactories.newDelimiterBasedFrameDecoder}}_ method (both directly and within _{{org.apache.camel.component.netty4.codec.DatagramPacketDelimiterDecoder}}_, which delegates to _{{DelimiterBasedFrameDecoder}}_)This parameter needs to be set to false when the end-of-frame delimiter is part of the message (e.g., the closing tag of an XML document), and therefore must not be discarded.Suggested fix:- Add a new constructor to _{{DatagramPacketDelimiterDecoder}}_ that includes the parameter, which is then passed through to the delegate _{{DelimiterBasedFrameDecoder}}_- Add a new method signature for _{{ChannelHandlerFactories.newDelimiterBasedFrameDecoder}}_ that includes the parameter- refactor existing _{{newDelimiterBasedFrameDecoder}}_ method to delegate to the new method
CAMEL-8117 set encoding on a per-message basis There is an endpoint property for setting the encoding.It would be useful to set this on a per-message basis with a header too. Improvement set encoding on a per-message basis There is an endpoint property for setting the encoding.It would be useful to set this on a per-message basis with a header too.
CAMEL-8116 Allow more control of message splitting policy Currently, camel-smpp splits a long message into 140 byte SMS messages to go over the network.  This is done automatically for any long message.Not all networks support these split messages.  Some networks drop the subsequent frames after the first, some don't delivery anything.It would be useful to give users of the component the ability to set a message splitting policy, e.g. to refuse to split messages and throw an exception if a long message is encountered.  This will reduce load on the SMPP provider and may also avoid costs associated with messages that are never delivered. Improvement Allow more control of message splitting policy Currently, camel-smpp splits a long message into 140 byte SMS messages to go over the network.  This is done automatically for any long message.Not all networks support these split messages.  Some networks drop the subsequent frames after the first, some don't delivery anything.It would be useful to give users of the component the ability to set a message splitting policy, e.g. to refuse to split messages and throw an exception if a long message is encountered.  This will reduce load on the SMPP provider and may also avoid costs associated with messages that are never delivered.
CAMEL-8115 Properties component - Include default functions to lookup from ENV / SYS etc To make it easy to lookup property placeholders from the environment variables or JVM system properties etc.We should add property placeholder function to do that, so you can do{{env:FOO}}to lookup the FOO env variable. Improvement Properties component - Include default functions to lookup from ENV / SYS etc To make it easy to lookup property placeholders from the environment variables or JVM system properties etc.We should add property placeholder function to do that, so you can do{{env:FOO}}to lookup the FOO env variable.
CAMEL-8114 Add support for the JCR multi-valued property Regarding to the issue at Camel User Forum as http://camel.465427.n5.nabble.com/camel-jcr-The-trouble-about-the-JCR-multi-valued-property-when-using-JCR-GET-BY-ID-td5757029.html New Feature Add support for the JCR multi-valued property Regarding to the issue at Camel User Forum as http://camel.465427.n5.nabble.com/camel-jcr-The-trouble-about-the-JCR-multi-valued-property-when-using-JCR-GET-BY-ID-td5757029.html
CAMEL-8113 Look into optimize Camels type converter registry lookup See this bloghttp://tech.ticketmaster.com/2014/12/01/getting-over-the-performance-hump-with-apache-camel/There is some findings about how Camel's TC may produce GC overhead, and also the CXF MessageContextList.Yeah unfortuntalte camel-cxf had that MessageContextList from the beginning which has been a cause of pain ever since.  Improvement Look into optimize Camels type converter registry lookup See this bloghttp://tech.ticketmaster.com/2014/12/01/getting-over-the-performance-hump-with-apache-camel/There is some findings about how Camel's TC may produce GC overhead, and also the CXF MessageContextList.Yeah unfortuntalte camel-cxf had that MessageContextList from the beginning which has been a cause of pain ever since. 
CAMEL-8109 Allow to plugin custom functions to property placeholder To make it more DRY / easy to useWe should allow to plugin custom functions that the properties component (aka property placeholder) can leverage during resolution.A function has a name, which is used as prefix:remainder in the {{ }} syntax. Then people can plugin custom functions that can do any kind of resolution they want. Improvement Allow to plugin custom functions to property placeholder To make it more DRY / easy to useWe should allow to plugin custom functions that the properties component (aka property placeholder) can leverage during resolution.A function has a name, which is used as prefix:remainder in the {{ }} syntax. Then people can plugin custom functions that can do any kind of resolution they want.
CAMEL-8108 Type converters should not check for null values There is a number of type converters that due to old time behavior, are still doing a != null check for the passed in value.As Camel always passes in a value, then this check should be removed. Improvement Type converters should not check for null values There is a number of type converters that due to old time behavior, are still doing a != null check for the passed in value.As Camel always passes in a value, then this check should be removed.
CAMEL-8107 Allow to use property placeholder with default values without having to setup the properties component In combination with CAMEL-8099, we should make it easy to use property placeholders with default values, so end users do not have to specify a properties component if we have default values for all needed keys.This allows DRY and keep it minimal. Improvement Allow to use property placeholder with default values without having to setup the properties component In combination with CAMEL-8099, we should make it easy to use property placeholders with default values, so end users do not have to specify a properties component if we have default values for all needed keys.This allows DRY and keep it minimal.
CAMEL-8105 AWS-SQS - support for redrivePolicy inside SQSEndpoint Support currently doesn't exist for setting the redrivePolicy through the endpoint URI inside SQSEndpoint.  This means it is not possible to setup any dead letter queue logic in AWS SQS without doing so by hand through the front end.I'll attach a patch which adds the field to the SqsConfiguration and the handling of that logic inside the SqsEndpoint. As well as extended the basic tests on proving they get set correctly by the SqsComponentConfigurationTestRegardsRufus Improvement AWS-SQS - support for redrivePolicy inside SQSEndpoint Support currently doesn't exist for setting the redrivePolicy through the endpoint URI inside SQSEndpoint.  This means it is not possible to setup any dead letter queue logic in AWS SQS without doing so by hand through the front end.I'll attach a patch which adds the field to the SqsConfiguration and the handling of that logic inside the SqsEndpoint. As well as extended the basic tests on proving they get set correctly by the SqsComponentConfigurationTestRegardsRufus
CAMEL-8104 rest-dsl - Allow custom error responses as-is without invoking the output binding Seehttp://camel.465427.n5.nabble.com/Rest-DSL-OutType-in-case-of-error-message-problem-tp5759864.htmlWe should allow end users to define custom error messages as-is to be used as response. We add a flag that enables this out of the box. Then the end user just set a custom body and set the HTTP_RESPONSE_CODE header to >= 300 value to indicate an error. Then rest-dsl does not attempt to bind output. Improvement rest-dsl - Allow custom error responses as-is without invoking the output binding Seehttp://camel.465427.n5.nabble.com/Rest-DSL-OutType-in-case-of-error-message-problem-tp5759864.htmlWe should allow end users to define custom error messages as-is to be used as response. We add a flag that enables this out of the box. Then the end user just set a custom body and set the HTTP_RESPONSE_CODE header to >= 300 value to indicate an error. Then rest-dsl does not attempt to bind output.
CAMEL-8103 Make CxfEndpoint Camel Context aware Right now the CxfEndpoint is not Camel Context aware. This implies that the context needs to be "manually" set on the CxfEndpoint when added to the context.To make the use of CxfEndpoint a bit easier it would be good if the CxfEndpoint would be made Camel Context aware so that the context can take of setting a reference to it on the endpoint Improvement Make CxfEndpoint Camel Context aware Right now the CxfEndpoint is not Camel Context aware. This implies that the context needs to be "manually" set on the CxfEndpoint when added to the context.To make the use of CxfEndpoint a bit easier it would be good if the CxfEndpoint would be made Camel Context aware so that the context can take of setting a reference to it on the endpoint
CAMEL-8102 Add support to ObjectHelper to create Iterable's Add support to ObjectHelper to create Iterable'sPatch attached Improvement Add support to ObjectHelper to create Iterable's Add support to ObjectHelper to create Iterable'sPatch attached
CAMEL-8101 Add runCommand to MongoDB Camel component operations list Add runCommand to MongoDB Camel component operations listJavadoc of MongoDB driver is there https://api.mongodb.org/java/2.12/com/mongodb/DB.html#command(com.mongodb.DBObject)I should update wiki right after the PR is merge. Improvement Add runCommand to MongoDB Camel component operations list Add runCommand to MongoDB Camel component operations listJavadoc of MongoDB driver is there https://api.mongodb.org/java/2.12/com/mongodb/DB.html#command(com.mongodb.DBObject)I should update wiki right after the PR is merge.
CAMEL-8099 Add support for default values in Camel properties Add support for default values in Camel propertiesFor example:{code}{{key:default-value}}{code}Just like Spring's {code}${key:default-value} {code} syntax. Improvement Add support for default values in Camel properties Add support for default values in Camel propertiesFor example:{code}{{key:default-value}}{code}Just like Spring's {code}${key:default-value} {code} syntax.
CAMEL-8098 Route model using body expression should be representable in the xml model When defining routes using Java DSL its common to use the body() as an expression with the splittersplit().body()orsplit(body())But that is internally mapped using an anonymous expression type. This cannot be mapped nicely in XML	             <expressionDefinition>body</expressionDefinition>And if you want to do the same route in XML you would need to use simple language to refer to the body.<simple>body</simple>So we should do the same in Java DSL, so its identical. Improvement Route model using body expression should be representable in the xml model When defining routes using Java DSL its common to use the body() as an expression with the splittersplit().body()orsplit(body())But that is internally mapped using an anonymous expression type. This cannot be mapped nicely in XML	             <expressionDefinition>body</expressionDefinition>And if you want to do the same route in XML you would need to use simple language to refer to the body.<simple>body</simple>So we should do the same in Java DSL, so its identical.
CAMEL-8095 CaseInsensitiveMap for Camel headers should preserve original key cases in keySet The keySet can be improved to use an iterator that uses the original cases of the keys. Improvement CaseInsensitiveMap for Camel headers should preserve original key cases in keySet The keySet can be improved to use an iterator that uses the original cases of the keys.
CAMEL-8091 DefaultExchangeFormatter does not consider Exchange.LOG_DEBUG_BODY_MAX_CHARS The DefaultExchangeFormatter does not consider the Exchange.LOG_DEBUG_BODY_MAX_CHARS context property that is supposed to limit the size of the logged payload.It is possible to set a maxChars on the DefaultExchangeFormatter, but that has a different semantics (limits the length of the formatted exchange, not of the message payload) and is complicated to set in some cases (e.g. in the case of the default error handler)The attached extension also honors the Exchange.LOG_DEBUG_BODY_MAX_CHARS context property when formatting the exchange. Improvement DefaultExchangeFormatter does not consider Exchange.LOG_DEBUG_BODY_MAX_CHARS The DefaultExchangeFormatter does not consider the Exchange.LOG_DEBUG_BODY_MAX_CHARS context property that is supposed to limit the size of the logged payload.It is possible to set a maxChars on the DefaultExchangeFormatter, but that has a different semantics (limits the length of the formatted exchange, not of the message payload) and is complicated to set in some cases (e.g. in the case of the default error handler)The attached extension also honors the Exchange.LOG_DEBUG_BODY_MAX_CHARS context property when formatting the exchange.
CAMEL-8090 Camel-chunk component Hi all,I'm currently working on this new Camel component: https://github.com/oscerd/camel-chunkThis component allows for processing a message using a Chunk template. Chunk is a templating Java library released under Apache License 2.0. You can find more information here: http://www.x5software.com/chunk/examples/ChunkExampleLooking at the results of some tests Chunk seems to be very fast and I think it might be another solution to be added to existing components (Mustache, Velocity, FreeMarker etc.).I'd like to have some feedbacks from the developers community and from the Committers before submitting a pull request on the Camel master branch.Thanks in advance and let me know your opinion. *Edit:* _I've submitted a PR with the new component._Bye,Andrea New Feature Camel-chunk component Hi all,I'm currently working on this new Camel component: https://github.com/oscerd/camel-chunkThis component allows for processing a message using a Chunk template. Chunk is a templating Java library released under Apache License 2.0. You can find more information here: http://www.x5software.com/chunk/examples/ChunkExampleLooking at the results of some tests Chunk seems to be very fast and I think it might be another solution to be added to existing components (Mustache, Velocity, FreeMarker etc.).I'd like to have some feedbacks from the developers community and from the Committers before submitting a pull request on the Camel master branch.Thanks in advance and let me know your opinion. *Edit:* _I've submitted a PR with the new component._Bye,Andrea
CAMEL-8085 Add handling of offset in case of auto commit is disabled to prevent data loss In order to prevent data loss kafka client allows to manually handle consumer offset.According to this lady:http://ingest.tips/2014/10/12/kafka-high-level-consumer-frequently-missing-pieces/Kafka consumer "commitOffset" is committing offset for each consumer and for all streams of this consumer. I've made changes in camel-kafka in order to support handling of offset in case of auto-commit option is disabled.https://github.com/apache/camel/pull/342 Improvement Add handling of offset in case of auto commit is disabled to prevent data loss In order to prevent data loss kafka client allows to manually handle consumer offset.According to this lady:http://ingest.tips/2014/10/12/kafka-high-level-consumer-frequently-missing-pieces/Kafka consumer "commitOffset" is committing offset for each consumer and for all streams of this consumer. I've made changes in camel-kafka in order to support handling of offset in case of auto-commit option is disabled.https://github.com/apache/camel/pull/342
CAMEL-8084 PGP Data Format: file name parameter Currently, the PGP Data Format marshaler sets the file name of the PGP Literal Packet to "_CONSOLE" by default; and you can overwrite the file name via the header "CamelFileName". The attached patch introduces the parameter "fileName" so that you can set the file name during configuration time. The default value is still "_CONSOLE". Now it is also possible to use an empty string as file name, which was not possible before. We should allow an empty string value because the Open PGP specification (https://tools.ietf.org/html/rfc4880) explicitly mentions that the file name "may be a zero-length string" (see chapter "5.9.  Literal Data Packet (Tag 11)".The spec says about the "_CONSOLE" value: "_CONSOLE" is used to indicate that " the message is considered to be 'for your eyes only'.  This advises that the message data is unusually sensitive, and the receiving program should process it more carefully, perhaps avoiding storing the received data to disk, for example." There are some PGP programs available which will break of the processing of PGP messages which contain the value "_CONSOLE" as file name. In order to avoid such kind of "break-ofs", it makes sense to allow the configuration of the file name via a parameter so that you must not use a header.Regards Franz Improvement PGP Data Format: file name parameter Currently, the PGP Data Format marshaler sets the file name of the PGP Literal Packet to "_CONSOLE" by default; and you can overwrite the file name via the header "CamelFileName". The attached patch introduces the parameter "fileName" so that you can set the file name during configuration time. The default value is still "_CONSOLE". Now it is also possible to use an empty string as file name, which was not possible before. We should allow an empty string value because the Open PGP specification (https://tools.ietf.org/html/rfc4880) explicitly mentions that the file name "may be a zero-length string" (see chapter "5.9.  Literal Data Packet (Tag 11)".The spec says about the "_CONSOLE" value: "_CONSOLE" is used to indicate that " the message is considered to be 'for your eyes only'.  This advises that the message data is unusually sensitive, and the receiving program should process it more carefully, perhaps avoiding storing the received data to disk, for example." There are some PGP programs available which will break of the processing of PGP messages which contain the value "_CONSOLE" as file name. In order to avoid such kind of "break-ofs", it makes sense to allow the configuration of the file name via a parameter so that you must not use a header.Regards Franz
CAMEL-8083 Add an option of enable CORS in camel-jetty endpoint While connecting to a jetty endpoint from a development web server running on a different port, AJAX calls, fail due to CORS restrictions.It could be more easy for people to use just by set an boolean option from the endpoint.Here is a [PR|https://github.com/apache/camel/pull/341] for it.  New Feature Add an option of enable CORS in camel-jetty endpoint While connecting to a jetty endpoint from a development web server running on a different port, AJAX calls, fail due to CORS restrictions.It could be more easy for people to use just by set an boolean option from the endpoint.Here is a [PR|https://github.com/apache/camel/pull/341] for it. 
CAMEL-8080 Make Camel CXF dependency on Camel Spring optional By default, Camel-CXF depends on Camel-Spring, which prevents a ServiceMix installation using only Blueprint bundles from uninstalling Camel-Spring altogether.Here is a patch that makes Spring optional in Camel CXF dependencies, both in OSGi imports and within the Karaf feature. New Feature Make Camel CXF dependency on Camel Spring optional By default, Camel-CXF depends on Camel-Spring, which prevents a ServiceMix installation using only Blueprint bundles from uninstalling Camel-Spring altogether.Here is a patch that makes Spring optional in Camel CXF dependencies, both in OSGi imports and within the Karaf feature.
CAMEL-8079 Provide possibility to delegate charset evaluation of a HL7 message to HL7DataFormat The HL7Codec directly creates a String from the message, using the charset hardcoded in its HL7MLLPConfig. This is too static. * The field MSH-18 of the message may contain the charset in which the message is encoded (much like encoding=... in the XML header) and which shall be used for decoding.* Other information nested the exchange may also be usable to derive the appropriate charset if MSH-18 is empty.The attached patch improves the behavior in a backwards-compatible way.* HL7MLLPCodec has a new property named "produceString" (default true). If set to false, the codec sends a byte array into the route instead of a string. In this case, no charset is evaluated yet.* the HL7DataFormat checks the field MSH-18 for the charset to be used for marshalling and unmarshalling. If MSH-18 is empty,  it uses the standard Camel charset properties/headers by default. If MSH-18 was populated, the value is copied to a new message header "CamelHL7Charset"* the HL7DataFormat also offers an extension point in order to "guess" the charset from the byte array content (e.g. using ICU4J's CharsetDetector). New Feature Provide possibility to delegate charset evaluation of a HL7 message to HL7DataFormat The HL7Codec directly creates a String from the message, using the charset hardcoded in its HL7MLLPConfig. This is too static. * The field MSH-18 of the message may contain the charset in which the message is encoded (much like encoding=... in the XML header) and which shall be used for decoding.* Other information nested the exchange may also be usable to derive the appropriate charset if MSH-18 is empty.The attached patch improves the behavior in a backwards-compatible way.* HL7MLLPCodec has a new property named "produceString" (default true). If set to false, the codec sends a byte array into the route instead of a string. In this case, no charset is evaluated yet.* the HL7DataFormat checks the field MSH-18 for the charset to be used for marshalling and unmarshalling. If MSH-18 is empty,  it uses the standard Camel charset properties/headers by default. If MSH-18 was populated, the value is copied to a new message header "CamelHL7Charset"* the HL7DataFormat also offers an extension point in order to "guess" the charset from the byte array content (e.g. using ICU4J's CharsetDetector).
CAMEL-8078 camel-restlet should support to decode the response entity which is represent resource Current camel-restlet producer doesn't support to decode the GZIP response out of box.You can find more information from [this thread|http://camel.465427.n5.nabble.com/Camel-Restlet-2-14-0-DecodeRepresentation-td5759382.html] of camel user mailing list Improvement camel-restlet should support to decode the response entity which is represent resource Current camel-restlet producer doesn't support to decode the GZIP response out of box.You can find more information from [this thread|http://camel.465427.n5.nabble.com/Camel-Restlet-2-14-0-DecodeRepresentation-td5759382.html] of camel user mailing list
CAMEL-8076 We should avoid checking the DupTriggerKey if the recoverableJob is true Here is [a stackoverflow question|http://stackoverflow.com/questions/27031971/quartz-clustering-in-camel-spring-dsl] which shows when the clustered quartz wants to recovery the job, camel throw the java.lang.IllegalArgumentException:{code}Java.lang.IllegalArgumentException: Trigger key cluster.quartz is already in used by Endpoint[quartz2://cluster/quartz?cron=0+0%2F2+++*+%3F&durableJob=true&recoverableJob=true&stateful=true] at org.apache.camel.component.quartz2.QuartzEndpoint.ensureNoDupTriggerKey(QuartzEndpoint.java:272){code} We should avoid the checking of ensureNoDupTriggerKey, if the recoverableJob is true. Improvement We should avoid checking the DupTriggerKey if the recoverableJob is true Here is [a stackoverflow question|http://stackoverflow.com/questions/27031971/quartz-clustering-in-camel-spring-dsl] which shows when the clustered quartz wants to recovery the job, camel throw the java.lang.IllegalArgumentException:{code}Java.lang.IllegalArgumentException: Trigger key cluster.quartz is already in used by Endpoint[quartz2://cluster/quartz?cron=0+0%2F2+++*+%3F&durableJob=true&recoverableJob=true&stateful=true] at org.apache.camel.component.quartz2.QuartzEndpoint.ensureNoDupTriggerKey(QuartzEndpoint.java:272){code} We should avoid the checking of ensureNoDupTriggerKey, if the recoverableJob is true.
CAMEL-8075 Camel sftp should send a command to check if the connection is broken Here is [a question|http://stackoverflow.com/questions/26810743/org-apache-camel-component-file-genericfileoperationfailedexception-cannot-lis/27032384#27032384] in the stackoverflow. I just checked the code of camel-ftp, it has the code to check the connection, but it's hard to know if the connection is still opened if we don't send some bytes to server socket.The solution could be force the ftp client send some ping or list message to check if the connection is still open. Improvement Camel sftp should send a command to check if the connection is broken Here is [a question|http://stackoverflow.com/questions/26810743/org-apache-camel-component-file-genericfileoperationfailedexception-cannot-lis/27032384#27032384] in the stackoverflow. I just checked the code of camel-ftp, it has the code to check the connection, but it's hard to know if the connection is still opened if we don't send some bytes to server socket.The solution could be force the ftp client send some ping or list message to check if the connection is still open.
CAMEL-8074 Aggregator doesn't honour policies for messages completed on a different thread The following Java EIP looks textbook but the post-aggregation route is _not_ transacted as it runs on a different thread. The (transaction) policy meant to wrap the route doesn't get re-applied to the output.{code:java}from("direct:in") .transacted("requiresTransaction") .aggregate(simple("${header.symbol}"), new UseLatestAggregationStrategy())    .completionInterval(1000)  .bean(persistInDb)  .to("jms:output");{code}Since one cannot re-specify the transacted policy on the same route, the only workaround is to break it in two.{code:java}from("direct:in") .transacted("requiresTransaction") .aggregate(simple("${header.symbol}"), new UseLatestAggregationStrategy())    .completionInterval(1000)  .to("direct:x");from("direct:x")  .transacted("requiresTransaction")  .bean(persistInDb)  .to("jms:output");{code}Proposal is to ensure the route's transaction Policies is re-applied inside of the AggregateProcessor#onSubmitCompletion runnable if (and only if!) the current thread is not the one which started the route (which may be better inferred through {{exchange.getUnitOfWork}} - just a guess).  Wish Aggregator doesn't honour policies for messages completed on a different thread The following Java EIP looks textbook but the post-aggregation route is _not_ transacted as it runs on a different thread. The (transaction) policy meant to wrap the route doesn't get re-applied to the output.{code:java}from("direct:in") .transacted("requiresTransaction") .aggregate(simple("${header.symbol}"), new UseLatestAggregationStrategy())    .completionInterval(1000)  .bean(persistInDb)  .to("jms:output");{code}Since one cannot re-specify the transacted policy on the same route, the only workaround is to break it in two.{code:java}from("direct:in") .transacted("requiresTransaction") .aggregate(simple("${header.symbol}"), new UseLatestAggregationStrategy())    .completionInterval(1000)  .to("direct:x");from("direct:x")  .transacted("requiresTransaction")  .bean(persistInDb)  .to("jms:output");{code}Proposal is to ensure the route's transaction Policies is re-applied inside of the AggregateProcessor#onSubmitCompletion runnable if (and only if!) the current thread is not the one which started the route (which may be better inferred through {{exchange.getUnitOfWork}} - just a guess). 
CAMEL-8072 Netty Http Server should close the channel once it return an error message It's a common practice that http server close the connection once it send the error message to the client. Improvement Netty Http Server should close the channel once it return an error message It's a common practice that http server close the connection once it send the error message to the client.
CAMEL-8068 SplitAttachmentsExpression should set ID of splited attachment The https://svn.apache.org/repos/asf/camel/trunk/components/camel-mail/src/main/java/org/apache/camel/component/mail/SplitAttachmentsExpression.java currently splits the attachments by each ID but do not provide the ID as an additional header.It would be usefull for the processing code to know the ID so they simply get them e.g. by getAttachment(header[CamelSplitAttachmentName]) instead of looking in the map for names etc. or iterate over it. Improvement SplitAttachmentsExpression should set ID of splited attachment The https://svn.apache.org/repos/asf/camel/trunk/components/camel-mail/src/main/java/org/apache/camel/component/mail/SplitAttachmentsExpression.java currently splits the attachments by each ID but do not provide the ID as an additional header.It would be usefull for the processing code to know the ID so they simply get them e.g. by getAttachment(header[CamelSplitAttachmentName]) instead of looking in the map for names etc. or iterate over it.
CAMEL-8064 MockEndpointsAndSkip annotation does not resolve property placeholders We are using property placeholders in our route configuration in order to switch components in our unit tests. For example:{code}        from(MyRouteBuilder.ENTRY_ENDPOINT)            .routeId("some.route")            .process(doSomething())            .to(MyRouteBuilder.EXIT_ENDPOINT);{code}Where ENTRY_ENDPOINT = "{{entry.endpoint.uri}}"and EXIT_ENDPOINT = "{{exit.endpoint.uri}}"Then, in production, the Camel context is initialized with a properties file where the URIs use the "jms" component, while in our unit tests we initialise the context with a 'test' properties file where the URIs use the "direct" component. For example:{code}# test.propertiesentry.endpoint.uri = direct:myRouteBuilder.entryexit.endpoint.uri = direct:myRouteBuilder.exit{code}A typical RouteBuilder unit test looks something like this:{code}@RunWith(CamelSpringJUnit4ClassRunner.class)@ContextConfiguration(        classes = { MyRouteBuilderTest.TestConfig.class },        loader = CamelSpringDelegatingTestContextLoader.class)@MockEndpointsAndSkip(value =  "direct:myRouteBuilder.exit")public class MyRouteBuilderTest {    @Produce(uri = MyRouteBuilder.ENTRY_ENDPOINT)    private ProducerTemplate myRouteBuilderProducer;    @EndpointInject(uri = "mock:" + MyRouteBuilder.EXIT_ENDPOINT)    private MockEndpoint mockOutputServiceEndpoint;    @Autowired    private CamelContext camelContext;    @Test    public void testSomething() {        ....    }    @Configuration    public static class TestConfig extends SingleRouteCamelConfiguration {        @Override        protected void setupCamelContext(CamelContext camelContext) throws Exception {            super.setupCamelContext(camelContext);            PropertiesComponent prop = camelContext.getComponent("properties", PropertiesComponent.class);            prop.setLocation("myRouteBuilder.test.properties");        }        @Override        public RouteBuilder route() {            return new MyRouteBuilder();        }    }{code}The issue we're having is that the @MockEndpointsAndSkip annotation on the test class does not resolve property placeholders, therefore we have to write the resolved value instead of the property placeholder value (which is a public static variable in the RouteBuilder implementation) I.e. we want to use MyRouteBuilder.EXIT_ENDPOINT instead of "direct:myRouteBuilder.exit".It would be nicer to avoid having duplicate extra hard-coded Strings if possible, so that if the endpoint uri value is updated in the property file then all the tests don't also have to be updated. Improvement MockEndpointsAndSkip annotation does not resolve property placeholders We are using property placeholders in our route configuration in order to switch components in our unit tests. For example:{code}        from(MyRouteBuilder.ENTRY_ENDPOINT)            .routeId("some.route")            .process(doSomething())            .to(MyRouteBuilder.EXIT_ENDPOINT);{code}Where ENTRY_ENDPOINT = "{{entry.endpoint.uri}}"and EXIT_ENDPOINT = "{{exit.endpoint.uri}}"Then, in production, the Camel context is initialized with a properties file where the URIs use the "jms" component, while in our unit tests we initialise the context with a 'test' properties file where the URIs use the "direct" component. For example:{code}# test.propertiesentry.endpoint.uri = direct:myRouteBuilder.entryexit.endpoint.uri = direct:myRouteBuilder.exit{code}A typical RouteBuilder unit test looks something like this:{code}@RunWith(CamelSpringJUnit4ClassRunner.class)@ContextConfiguration(        classes = { MyRouteBuilderTest.TestConfig.class },        loader = CamelSpringDelegatingTestContextLoader.class)@MockEndpointsAndSkip(value =  "direct:myRouteBuilder.exit")public class MyRouteBuilderTest {    @Produce(uri = MyRouteBuilder.ENTRY_ENDPOINT)    private ProducerTemplate myRouteBuilderProducer;    @EndpointInject(uri = "mock:" + MyRouteBuilder.EXIT_ENDPOINT)    private MockEndpoint mockOutputServiceEndpoint;    @Autowired    private CamelContext camelContext;    @Test    public void testSomething() {        ....    }    @Configuration    public static class TestConfig extends SingleRouteCamelConfiguration {        @Override        protected void setupCamelContext(CamelContext camelContext) throws Exception {            super.setupCamelContext(camelContext);            PropertiesComponent prop = camelContext.getComponent("properties", PropertiesComponent.class);            prop.setLocation("myRouteBuilder.test.properties");        }        @Override        public RouteBuilder route() {            return new MyRouteBuilder();        }    }{code}The issue we're having is that the @MockEndpointsAndSkip annotation on the test class does not resolve property placeholders, therefore we have to write the resolved value instead of the property placeholder value (which is a public static variable in the RouteBuilder implementation) I.e. we want to use MyRouteBuilder.EXIT_ENDPOINT instead of "direct:myRouteBuilder.exit".It would be nicer to avoid having duplicate extra hard-coded Strings if possible, so that if the endpoint uri value is updated in the property file then all the tests don't also have to be updated.
CAMEL-8061 camel-test-blueprint - Use felix fileinstall JAR that do not have the NPE bug See pojosr bug #13https://code.google.com/p/pojosr/issues/detail?id=13We need to workaround this by using a lower version of felix fileinstall when testing.Otherwise we get endless NPE error in fileinstall that spikes the CPU Task camel-test-blueprint - Use felix fileinstall JAR that do not have the NPE bug See pojosr bug #13https://code.google.com/p/pojosr/issues/detail?id=13We need to workaround this by using a lower version of felix fileinstall when testing.Otherwise we get endless NPE error in fileinstall that spikes the CPU
CAMEL-8060 Create data formats based on uniVocity parsers There's a library called [uniVocity-parsers|https://github.com/uniVocity/univocity-parsers] that provides implementations for reading and writing CSV files, fixed-width files and TSV files.It's quite fast according to [this benchmark|https://github.com/uniVocity/csv-parsers-comparison]. Obviously it may be biased since they're doing the benchmark, but they're also open enough to provide the source code of the benchmark so anyone can reproduce it.So it would be nice to have data formats that uses those parsers. New Feature Create data formats based on uniVocity parsers There's a library called [uniVocity-parsers|https://github.com/uniVocity/univocity-parsers] that provides implementations for reading and writing CSV files, fixed-width files and TSV files.It's quite fast according to [this benchmark|https://github.com/uniVocity/csv-parsers-comparison]. Obviously it may be biased since they're doing the benchmark, but they're also open enough to provide the source code of the benchmark so anyone can reproduce it.So it would be nice to have data formats that uses those parsers.
CAMEL-8059 Add CamelContext creation hook There are a number of issues with the Container API that make it unusable in WildFly# Concept of unsynchronised singleton# Call to 3rd party code with partially constructed objects# Unsynchronised access to a shared resourceCurrently there are at least two components that compete for the Container singleton. The Camel Subsystem and Insight Camel. I suspect that the Container API cannot be fixed in a compatible way.  Task Add CamelContext creation hook There are a number of issues with the Container API that make it unusable in WildFly# Concept of unsynchronised singleton# Call to 3rd party code with partially constructed objects# Unsynchronised access to a shared resourceCurrently there are at least two components that compete for the Container singleton. The Camel Subsystem and Insight Camel. I suspect that the Container API cannot be fixed in a compatible way. 
CAMEL-8057 Disable SSLv3 in the Camel JSSE security utility Seehttp://www.oracle.com/technetwork/java/javase/documentation/cve-2014-3566-2342133.htmlIn thehttp://camel.apache.org/camel-configuration-utilities.htmlWe should disable SSLv3 (poddle) in the list of enabled protocols. There is code samples on the oracle link how to disable ssl v3 in the dynamic list of enabled protocols. Task Disable SSLv3 in the Camel JSSE security utility Seehttp://www.oracle.com/technetwork/java/javase/documentation/cve-2014-3566-2342133.htmlIn thehttp://camel.apache.org/camel-configuration-utilities.htmlWe should disable SSLv3 (poddle) in the list of enabled protocols. There is code samples on the oracle link how to disable ssl v3 in the dynamic list of enabled protocols.
CAMEL-8055 Camel component for atmos integration Create a camel component (producers and consumers ) for atmos integration. New Feature Camel component for atmos integration Create a camel component (producers and consumers ) for atmos integration.
CAMEL-8054 Use SharedEntityManager to reduce connections When using JpaTransactionManager it "Binds a JPA EntityManager from the specified factory to the thread". Meaning that on top of the EntityManager created for each JpaConsumer, each time it creates a new EntityManager.New property:*sharedEntityManager* - whether to use spring's SharedEntityManager for the consumer/producer. Sets joinTransaction=falseAlso added as a property to the JpaComponent. New Feature Use SharedEntityManager to reduce connections When using JpaTransactionManager it "Binds a JPA EntityManager from the specified factory to the thread". Meaning that on top of the EntityManager created for each JpaConsumer, each time it creates a new EntityManager.New property:*sharedEntityManager* - whether to use spring's SharedEntityManager for the consumer/producer. Sets joinTransaction=falseAlso added as a property to the JpaComponent.
CAMEL-8052 New: <removeProperties> <removeProperties> would have the same attributes and behavior of <removeHeaders>, except it works on properties instead of headers. New Feature New: <removeProperties> <removeProperties> would have the same attributes and behavior of <removeHeaders>, except it works on properties instead of headers.
CAMEL-8048 Main overrides context's registry org.apache.camel.main.Main with custom context overrides registry in case bind used Improvement Main overrides context's registry org.apache.camel.main.Main with custom context overrides registry in case bind used
CAMEL-8044 Camel commands - Make CamelController useable for remote JVMs The org.apache.camel.commands.CamelController which is used by the Camel commands to get the data, are currently tied to a local JVM only. We should make this support remoting so the commands can be used to control any JVMs with Camel whether that is local or remote. Sub-task Camel commands - Make CamelController useable for remote JVMs The org.apache.camel.commands.CamelController which is used by the Camel commands to get the data, are currently tied to a local JVM only. We should make this support remoting so the commands can be used to control any JVMs with Camel whether that is local or remote.
CAMEL-8043 saxon component - Make it like the others Same as the other tickets similar to this topic Improvement saxon component - Make it like the others Same as the other tickets similar to this topic
CAMEL-8041 Camel commands - Make the commands reusable The current Camel commands are Karaf implemented only. But we can make that pluggable so we have a core command module with the generic implementation, and then a plugin for when running in karaf.We can then provider other plugins for other environments, such as a jolokia based that works with JVMs that has jolokia agent installed. New Feature Camel commands - Make the commands reusable The current Camel commands are Karaf implemented only. But we can make that pluggable so we have a core command module with the generic implementation, and then a plugin for when running in karaf.We can then provider other plugins for other environments, such as a jolokia based that works with JVMs that has jolokia agent installed.
CAMEL-8039 Implement halfOpen state in CircuitBreaker The CircuitBreaker EIP described in ReleaseIt! has an halfOpen state. It means that after the halfOpen time timeout, the circuitBreaker is accepting one more exchange and it close the circuit only if the processor succeeds.This is not implemented in Camel, I would like to propose the attached patch with code and test for implementing the HalfOpen state. Improvement Implement halfOpen state in CircuitBreaker The CircuitBreaker EIP described in ReleaseIt! has an halfOpen state. It means that after the halfOpen time timeout, the circuitBreaker is accepting one more exchange and it close the circuit only if the processor succeeds.This is not implemented in Camel, I would like to propose the attached patch with code and test for implementing the HalfOpen state.
CAMEL-8038 Fix components to include @UriPath The components that are uri annotation documented need to define one @UriPath to map to the uri context path.This is now mistakenly mapped to a @UriParam. Sub-task Fix components to include @UriPath The components that are uri annotation documented need to define one @UriPath to map to the uri context path.This is now mistakenly mapped to a @UriParam.
CAMEL-8037 Type converters for enums should support case insensitve for example then people can configure the enums more safely without the hazzle of case,exchangePattern=inoutoutput=domWhere the enum is named DOM etc Improvement Type converters for enums should support case insensitve for example then people can configure the enums more safely without the hazzle of case,exchangePattern=inoutoutput=domWhere the enum is named DOM etc
CAMEL-8034 xslt component - Make it like the others It does not provide all its configuration options in the endpoint, but "cheat" by doing its own parsing in the component class. Improvement xslt component - Make it like the others It does not provide all its configuration options in the endpoint, but "cheat" by doing its own parsing in the component class.
CAMEL-8028 Validator component - Make it like the others This component does not provide its own endpoint class, which makes it different than other components. Improvement Validator component - Make it like the others This component does not provide its own endpoint class, which makes it different than other components.
CAMEL-8027 Add ByteArrayCodec implementation for udp to camel-netty4 Add a byte array codec for udp to the codec package so that it can be used directly from camel.  Improvement Add ByteArrayCodec implementation for udp to camel-netty4 Add a byte array codec for udp to the codec package so that it can be used directly from camel. 
CAMEL-8025 Camel Toolbox - Add JMX and API to explain component We now embed some meta data about each component. We should expose API for JMX / Java API to obtain that, as we did for endpoints. Sub-task Camel Toolbox - Add JMX and API to explain component We now embed some meta data about each component. We should expose API for JMX / Java API to obtain that, as we did for endpoints.
CAMEL-8024 Camel-sjms improvement to JMSMessageHelper Little improvements to JMSMessageHelper.- Adding some checks on discoverMessageTypeFromPayload method to cover more type- Test the JMSMessageHelper Improvement Camel-sjms improvement to JMSMessageHelper Little improvements to JMSMessageHelper.- Adding some checks on discoverMessageTypeFromPayload method to cover more type- Test the JMSMessageHelper
CAMEL-8023 Add javadoc documentation to camel-core endpoints so we have documentation out of the box See parent ticket.For each of the components in camel-core, we need to document each @UriParam option. This is done by adding javadoc to the setter method. Sub-task Add javadoc documentation to camel-core endpoints so we have documentation out of the box See parent ticket.For each of the components in camel-core, we need to document each @UriParam option. This is done by adding javadoc to the setter method.
CAMEL-8021 Fix Maven surefire warning during build We get[WARNING] The parameter forkMode is deprecated since version 2.14. Use forkCount and reuseForks instead. Task Fix Maven surefire warning during build We get[WARNING] The parameter forkMode is deprecated since version 2.14. Use forkCount and reuseForks instead.
CAMEL-8020 camel-quartz2 - OSGi friendly classloader helper See nabblehttp://camel.465427.n5.nabble.com/Quartz-job-data-deletion-in-clustered-quartz2-tp5757508p5758609.htmlWe need to implement org.quartz.spi.ClassLoadHelper and add support for loading classes from osgi by using the classresolver api from camel context.Then this likely helps in osgi situations where bundles can come and go. And so if a bundle gets uninstalled then it wont fail as with the quartz default impl as it would remember the old classloader that used to work, but that wont work anymore as osgi uninstalled the bundle. Improvement camel-quartz2 - OSGi friendly classloader helper See nabblehttp://camel.465427.n5.nabble.com/Quartz-job-data-deletion-in-clustered-quartz2-tp5757508p5758609.htmlWe need to implement org.quartz.spi.ClassLoadHelper and add support for loading classes from osgi by using the classresolver api from camel context.Then this likely helps in osgi situations where bundles can come and go. And so if a bundle gets uninstalled then it wont fail as with the quartz default impl as it would remember the old classloader that used to work, but that wont work anymore as osgi uninstalled the bundle.
CAMEL-8019 SSL Support for Camel Docker Component Add SSL support to the Camel Docker component Improvement SSL Support for Camel Docker Component Add SSL support to the Camel Docker component
CAMEL-8018 camel-jsonpath - Use the predicate api added to json-path Upgrading to 1.1.0 now has a predicate api in jsonpath, so we can leverage that in Apache Camel. eg in the jsonpath language impl. Improvement camel-jsonpath - Use the predicate api added to json-path Upgrading to 1.1.0 now has a predicate api in jsonpath, so we can leverage that in Apache Camel. eg in the jsonpath language impl.
CAMEL-8015 camel-aws - Has an unit test failure This test fails on masterTests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.14 sec <<< FAILURE! - in org.apache.camel.component.aws.s3.S3ComponentFileTestsendFileAndKeep(org.apache.camel.component.aws.s3.S3ComponentFileTest)  Time elapsed: 1.073 sec  <<< ERROR!org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due java.lang.NullPointerException	at com.amazonaws.internal.SdkFilterInputStream.close(SdkFilterInputStream.java:90)	at sun.nio.cs.StreamDecoder.implClose(StreamDecoder.java:377)	at sun.nio.cs.StreamDecoder.close(StreamDecoder.java:192)	at java.io.InputStreamReader.close(InputStreamReader.java:199)	at java.io.BufferedReader.close(BufferedReader.java:517)	at org.apache.camel.util.IOHelper.close(IOHelper.java:326)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:308)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:290)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:351)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:606)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1002)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:114)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.aws.s3.S3ComponentFileTest.assertResultExchange(S3ComponentFileTest.java:125)	at org.apache.camel.component.aws.s3.S3ComponentFileTest.sendFileAndKeep(S3ComponentFileTest.java:86) Test camel-aws - Has an unit test failure This test fails on masterTests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.14 sec <<< FAILURE! - in org.apache.camel.component.aws.s3.S3ComponentFileTestsendFileAndKeep(org.apache.camel.component.aws.s3.S3ComponentFileTest)  Time elapsed: 1.073 sec  <<< ERROR!org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due java.lang.NullPointerException	at com.amazonaws.internal.SdkFilterInputStream.close(SdkFilterInputStream.java:90)	at sun.nio.cs.StreamDecoder.implClose(StreamDecoder.java:377)	at sun.nio.cs.StreamDecoder.close(StreamDecoder.java:192)	at java.io.InputStreamReader.close(InputStreamReader.java:199)	at java.io.BufferedReader.close(BufferedReader.java:517)	at org.apache.camel.util.IOHelper.close(IOHelper.java:326)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:308)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:290)	at org.apache.camel.converter.IOConverter.toString(IOConverter.java:351)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:606)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1002)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:114)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.aws.s3.S3ComponentFileTest.assertResultExchange(S3ComponentFileTest.java:125)	at org.apache.camel.component.aws.s3.S3ComponentFileTest.sendFileAndKeep(S3ComponentFileTest.java:86)
CAMEL-8014 camel-metrics - Let route policy and metrics component reuse same metricsregistry So they use the same instance out of the box. See from user forumhttp://camel.465427.n5.nabble.com/camel-metrics-Component-tp5758627.html Improvement camel-metrics - Let route policy and metrics component reuse same metricsregistry So they use the same instance out of the box. See from user forumhttp://camel.465427.n5.nabble.com/camel-metrics-Component-tp5758627.html
CAMEL-8006 S3Producer should use File to upload directly. It's be better to use the File directly when load the the file to S3 service. Improvement S3Producer should use File to upload directly. It's be better to use the File directly when load the the file to S3 service.
CAMEL-8004 camel-quartz2 - A test may hang This test seems to hang. I killed the job Running org.apache.camel.component.quartz2.QuartzNameCollisionTest Test camel-quartz2 - A test may hang This test seems to hang. I killed the job Running org.apache.camel.component.quartz2.QuartzNameCollisionTest
CAMEL-8000 Add global notion of CamelContextRegistry There are a number of issues with the Container API that make it unusable in WildFly# Concept of unsynchronised singleton# Call to 3rd party code with partially constructed objects# Unsynchronised access to a shared resourceCurrently there are at least two components that compete for the Container singleton. The Camel Subsystem and Insight Camel.I suspect that the Container API cannot be fixed in a compatible way. Instead the notion of a CamelContextRegistry that fixes the issues with Container may need to get added. Improvement Add global notion of CamelContextRegistry There are a number of issues with the Container API that make it unusable in WildFly# Concept of unsynchronised singleton# Call to 3rd party code with partially constructed objects# Unsynchronised access to a shared resourceCurrently there are at least two components that compete for the Container singleton. The Camel Subsystem and Insight Camel.I suspect that the Container API cannot be fixed in a compatible way. Instead the notion of a CamelContextRegistry that fixes the issues with Container may need to get added.
CAMEL-7999 Camel Toolbox - Easy information about all Camel components and the release for tooling A Camel release contains many components, and we have the ability to let components document which options they offer.Though there is currently a few shortcomings that can be improved- the component json schema is currently runtime generated, which requires to load the component and create an instance of it. Instead we should build-time generate it, which we do today with the camel apt compiler plugin. *DONE*- we should include documentation about the option from the javadoc, that allows end users to fully document a component using plain java getter/settr with javadocs, and add those @UriParam annotations for the apt compiler to detect and leverage *DONE*- add a module that embeds all these json schema files in a single module, and also other information, such as the xml schemas, and what else can be handy. Then there is a single module as a one stop shop for tooling and whatnot to gather information about a Camel release. There is a new camel-catalog module that contains this now. *DONE*- allow at runtime to explain an endpoint uri what the options in use are, eg as we got the json schema, we can add mbeans that can explain those options, than we can use in tooling, JMX, karaf commands etc. And also IDE editors etc *DONE*- add JMX/Java API to explain a EIP and also get a tabular data with a list of all EIPs and their data. *DONE*- enrich the dsl xml to inject javadoc for the eips into the xml schema, so we have documented in the xsd directly that any tooling can use. We have a old ticket about this. But the apt compiler plugin can detect the @JAXB annotations in the model and extract the javadoc, and generate a json schema with, and then we can load those and enrich into the generated xsd, or enrich into the jaxb model generator, or something.- migrate more Camel components to include javadoc as documentation for their options *DONE* for all camel-core. Other components will be migrated over time.- figure out how to specify a default value in the json schema. Unfortunately the apt plugin cannot grab that from the source code. So the only solution I can think of now is to add an attribute to the @UriParam where you can specify that, eg this is also what I have seen others do. There is now a defaultValue attribute on UriParam to be used. *DONE*- add component summary to component json file so we have a description of what the component does *DONE*- add attribute to @UriEndpoint to link it to the component class, so we can include the class name of the component in the json schema, which allows Camel to link from component class -> schema. eg the point is that if people define a component as "activemq" we do not know its the jms schema that has its documentation. Though we can infer this by the component class name. And alternative is for a component to have an api to return its original schema name etc. So activemq can say "jms" etc. We can resolve this by iterating the component data, and find the FQN of the components. *DONE*- add @UriComponent annotation to component class which allows end users to provide meta-data about the component. Currently we grab a summary of what the component does from the maven pom.xml. Though this annotation prepares us for being able to scan the component class as well for which option it provides, so we can have out of the box documentation for that also. We detect getter/setter pairs as component options, and the apt plugin generates those in the schema. Use @Metadata to configure the options. *DONE*- add JMX/Java API to explain a component and also get a tabular data with a list of all components and that data. *DONE*- improve karaf commands to use the component information to show that also *DONE*- add name of karaf feature of the component, eg its 99% came-xxx, but there may be some exceptions. We can likely add a property to the maven plugin that generates component.properties to include the karaf feature name as the artifactId by default. But allow to set a property in the pom.xml in case there is another name, or no karaf feature- add support for @UriPath in apt plugin *DONE*- javadoc documentation is not acessible from components which extend other components (eg javadoc from source code of parent components). For example camel-ftp extending file in camel-core etc. Added description to @UriParam to be used for this purpose. *DONE*- add support for associating label(s) to a endpoint so we can group the various Camel components. A bit like this page: http://camel.apache.org/component-list-grouped.html *DONE*- rename @Label to something more generic like @Metadata or something, so we can introduce new attributes for new stuff. For example a link which refers to the project website, or an icon to refer to an icon that symbol the component, etc. *DONE*- we now support components + eip with json schema and documentation and jmx + commands out of the box. We should look into adding the same for languages and data formats. Then we have all of them covered.*DONE* New Feature Camel Toolbox - Easy information about all Camel components and the release for tooling A Camel release contains many components, and we have the ability to let components document which options they offer.Though there is currently a few shortcomings that can be improved- the component json schema is currently runtime generated, which requires to load the component and create an instance of it. Instead we should build-time generate it, which we do today with the camel apt compiler plugin. *DONE*- we should include documentation about the option from the javadoc, that allows end users to fully document a component using plain java getter/settr with javadocs, and add those @UriParam annotations for the apt compiler to detect and leverage *DONE*- add a module that embeds all these json schema files in a single module, and also other information, such as the xml schemas, and what else can be handy. Then there is a single module as a one stop shop for tooling and whatnot to gather information about a Camel release. There is a new camel-catalog module that contains this now. *DONE*- allow at runtime to explain an endpoint uri what the options in use are, eg as we got the json schema, we can add mbeans that can explain those options, than we can use in tooling, JMX, karaf commands etc. And also IDE editors etc *DONE*- add JMX/Java API to explain a EIP and also get a tabular data with a list of all EIPs and their data. *DONE*- enrich the dsl xml to inject javadoc for the eips into the xml schema, so we have documented in the xsd directly that any tooling can use. We have a old ticket about this. But the apt compiler plugin can detect the @JAXB annotations in the model and extract the javadoc, and generate a json schema with, and then we can load those and enrich into the generated xsd, or enrich into the jaxb model generator, or something.- migrate more Camel components to include javadoc as documentation for their options *DONE* for all camel-core. Other components will be migrated over time.- figure out how to specify a default value in the json schema. Unfortunately the apt plugin cannot grab that from the source code. So the only solution I can think of now is to add an attribute to the @UriParam where you can specify that, eg this is also what I have seen others do. There is now a defaultValue attribute on UriParam to be used. *DONE*- add component summary to component json file so we have a description of what the component does *DONE*- add attribute to @UriEndpoint to link it to the component class, so we can include the class name of the component in the json schema, which allows Camel to link from component class -> schema. eg the point is that if people define a component as "activemq" we do not know its the jms schema that has its documentation. Though we can infer this by the component class name. And alternative is for a component to have an api to return its original schema name etc. So activemq can say "jms" etc. We can resolve this by iterating the component data, and find the FQN of the components. *DONE*- add @UriComponent annotation to component class which allows end users to provide meta-data about the component. Currently we grab a summary of what the component does from the maven pom.xml. Though this annotation prepares us for being able to scan the component class as well for which option it provides, so we can have out of the box documentation for that also. We detect getter/setter pairs as component options, and the apt plugin generates those in the schema. Use @Metadata to configure the options. *DONE*- add JMX/Java API to explain a component and also get a tabular data with a list of all components and that data. *DONE*- improve karaf commands to use the component information to show that also *DONE*- add name of karaf feature of the component, eg its 99% came-xxx, but there may be some exceptions. We can likely add a property to the maven plugin that generates component.properties to include the karaf feature name as the artifactId by default. But allow to set a property in the pom.xml in case there is another name, or no karaf feature- add support for @UriPath in apt plugin *DONE*- javadoc documentation is not acessible from components which extend other components (eg javadoc from source code of parent components). For example camel-ftp extending file in camel-core etc. Added description to @UriParam to be used for this purpose. *DONE*- add support for associating label(s) to a endpoint so we can group the various Camel components. A bit like this page: http://camel.apache.org/component-list-grouped.html *DONE*- rename @Label to something more generic like @Metadata or something, so we can introduce new attributes for new stuff. For example a link which refers to the project website, or an icon to refer to an icon that symbol the component, etc. *DONE*- we now support components + eip with json schema and documentation and jmx + commands out of the box. We should look into adding the same for languages and data formats. Then we have all of them covered.*DONE*
CAMEL-7998 Support connection less udp sending An config parameter should be added to support connection less udp sending which is a real fire and forget. A connected udp send receive the PortUnreachableException if no one is listen on the receiving port. That might on some circumstances not what is expected e.g. sending a lot of data. New Feature Support connection less udp sending An config parameter should be added to support connection less udp sending which is a real fire and forget. A connected udp send receive the PortUnreachableException if no one is listen on the receiving port. That might on some circumstances not what is expected e.g. sending a lot of data.
CAMEL-7995 Route model - Keep the {{ }} placeholders and allow api to get the model with the resolved values When you define routes using {{ }} placeholders, they get resolved when Camel builds the runtime route. And the route model gets updated with the resolved values, eg so {{ }} gets replaced with the value.So when you dump the route model as xml (eg as source) then you loose the {{ }} placeholders and see the actual values.We should allow to keep the {{ }} so the route model is 100% as designed, but we should also store the resolved values that the runtime route is using, so you can see those values as well. Improvement Route model - Keep the {{ }} placeholders and allow api to get the model with the resolved values When you define routes using {{ }} placeholders, they get resolved when Camel builds the runtime route. And the route model gets updated with the resolved values, eg so {{ }} gets replaced with the value.So when you dump the route model as xml (eg as source) then you loose the {{ }} placeholders and see the actual values.We should allow to keep the {{ }} so the route model is 100% as designed, but we should also store the resolved values that the runtime route is using, so you can see those values as well.
CAMEL-7993 Log statement for chmod in ftp component is missing {} SftpOperations.java contains this log statement:LOG.trace("Setting chmod: {} on file: ", mode, targetName);It needs another set of brackets after file, otherwise it does not report the file name. Task Log statement for chmod in ftp component is missing {} SftpOperations.java contains this log statement:LOG.trace("Setting chmod: {} on file: ", mode, targetName);It needs another set of brackets after file, otherwise it does not report the file name.
CAMEL-7991 Add MultiPartUpload functionality to S3Producer The current S3 Producer implementation does not use S3's MultiPartUpload functionality. Therefore, the whole data blob needs to be buffered in memory before it can be uploaded to S3.Using MultiPartUpload, the blob can be uploaded in chunks thereby drastically reducing the required memory.  Improvement Add MultiPartUpload functionality to S3Producer The current S3 Producer implementation does not use S3's MultiPartUpload functionality. Therefore, the whole data blob needs to be buffered in memory before it can be uploaded to S3.Using MultiPartUpload, the blob can be uploaded in chunks thereby drastically reducing the required memory. 
CAMEL-7987 Distro -javadoc JARs has malfuncted .css stylesheet files For example camel-core -javadoc JAR has a stylesheet.css file embedded that is a bit wrong as the Apache header in the top seems to have cut off some of the css file. Task Distro -javadoc JARs has malfuncted .css stylesheet files For example camel-core -javadoc JAR has a stylesheet.css file embedded that is a bit wrong as the Apache header in the top seems to have cut off some of the css file.
CAMEL-7984 camel-sjms - Add support for jmsKeyFormatStrategy See CAMEL-7975 which hardcoded to use the default strategy. But we should allow end users to configure and use their own, and also use the passthrough. Eg see the jmsKeyFormatStrategy option at http://camel.apache.org/jms and implement it at camel-sjms. Improvement camel-sjms - Add support for jmsKeyFormatStrategy See CAMEL-7975 which hardcoded to use the default strategy. But we should allow end users to configure and use their own, and also use the passthrough. Eg see the jmsKeyFormatStrategy option at http://camel.apache.org/jms and implement it at camel-sjms.
CAMEL-7980 camel-ognl need to use the class resolver from camel context If using the ognl to call the static method of class from blueprint, it always complains about the ClassNotFoundException.  Improvement camel-ognl need to use the class resolver from camel context If using the ognl to call the static method of class from blueprint, it always complains about the ClassNotFoundException. 
CAMEL-7975 SJMS Endpoint does not reverse header encoding SJMS Endpoint does not reverse header encoding, when it replaces . with \_DOT\_ and - with \_HYPHEN\_ it does not replace them with the original values.So this breaks compatibility with the camel-jms component.Quote taken from: http://camel.apache.org/jms.html{quote}The current header name strategy for accepting header names in Camel is as follows:Dots are replaced by \_DOT\_ and the replacement is reversed when Camel consume the messageHyphen is replaced by \_HYPHEN\_ and the replacement is reversed when Camel consumes the message{quote} Improvement SJMS Endpoint does not reverse header encoding SJMS Endpoint does not reverse header encoding, when it replaces . with \_DOT\_ and - with \_HYPHEN\_ it does not replace them with the original values.So this breaks compatibility with the camel-jms component.Quote taken from: http://camel.apache.org/jms.html{quote}The current header name strategy for accepting header names in Camel is as follows:Dots are replaced by \_DOT\_ and the replacement is reversed when Camel consume the messageHyphen is replaced by \_HYPHEN\_ and the replacement is reversed when Camel consumes the message{quote}
CAMEL-7974 Provide CircuitBreaker state in an exchange property To be more flexible, the idea is to create some exchange propertiesPut circuit state in an exchange property (2 status : Open / closed, as halfOpen do the same as closed in term of business)use a Content Based Router to perform something likefrom("direct:a")    .loadBalance()//    .circuitBreaker(3, 3000L, MyCustomException.class)    .choice()        .when(property(Exchange.CircuitBreaker_state).isEqualTo("closed"))            .to("direct:normalMode")        .when(property(Exchange.CircuitBreaker_state).isEqualTo("opened"))            .to("direct:degradedMode")    .end() Improvement Provide CircuitBreaker state in an exchange property To be more flexible, the idea is to create some exchange propertiesPut circuit state in an exchange property (2 status : Open / closed, as halfOpen do the same as closed in term of business)use a Content Based Router to perform something likefrom("direct:a")    .loadBalance()//    .circuitBreaker(3, 3000L, MyCustomException.class)    .choice()        .when(property(Exchange.CircuitBreaker_state).isEqualTo("closed"))            .to("direct:normalMode")        .when(property(Exchange.CircuitBreaker_state).isEqualTo("opened"))            .to("direct:degradedMode")    .end()
CAMEL-7972 Make the Circuit Breaker EIP more robust - in state halfOpen let only one thread to perform a try when halfOpen is reached, (System.currentTimeMillis() - lastFailure < halfOpenAfter) there is no restriction on the number of calls (threads) that will perform a retry.When retry timeout is reached, we should let only 1 thread go in "halfOpen" mode, all other should be kept in "open" state until an halfOpen succeed. Improvement Make the Circuit Breaker EIP more robust - in state halfOpen let only one thread to perform a try when halfOpen is reached, (System.currentTimeMillis() - lastFailure < halfOpenAfter) there is no restriction on the number of calls (threads) that will perform a retry.When retry timeout is reached, we should let only 1 thread go in "halfOpen" mode, all other should be kept in "open" state until an halfOpen succeed.
CAMEL-7970 Container does not see the unregister event Clients of the Container SPI see contexts being added but not removed. In wildfly we expose every context as an msc service to allow for service dependencies on it. When a context gets unregistered we must also unregister the msc service.unmanage(CamelContext) should probably be exposed in the same way as manage(CamelContext) Improvement Container does not see the unregister event Clients of the Container SPI see contexts being added but not removed. In wildfly we expose every context as an msc service to allow for service dependencies on it. When a context gets unregistered we must also unregister the msc service.unmanage(CamelContext) should probably be exposed in the same way as manage(CamelContext)
CAMEL-7965 EndpointCache - Should keep endpoints from routes in the cache Seehttp://camel.465427.n5.nabble.com/camelContext-hasEndpoint-returns-null-when-endpoint-apparently-exists-tp5757907.htmlThe endpoint cache is a LRU based. But endpoints created from the routes may not be looked up in the cache for a while, and could potential be evicted from the cache.We should keep those endpoints from the routes in the cache at all times. Improvement EndpointCache - Should keep endpoints from routes in the cache Seehttp://camel.465427.n5.nabble.com/camelContext-hasEndpoint-returns-null-when-endpoint-apparently-exists-tp5757907.htmlThe endpoint cache is a LRU based. But endpoints created from the routes may not be looked up in the cache for a while, and could potential be evicted from the cache.We should keep those endpoints from the routes in the cache at all times.
CAMEL-7962 Pipeline factories names on netty4 component As ServerPipelineFactory & ClientPipelineFactory classes are now named as ServerInitializerFactory & ClientInitializerFactory, I thought that it will make sense to call the matching netty4 component parameter names as serverInitializerFactory & clientInitializerFactory (and also to fix the relevant documentations) Improvement Pipeline factories names on netty4 component As ServerPipelineFactory & ClientPipelineFactory classes are now named as ServerInitializerFactory & ClientInitializerFactory, I thought that it will make sense to call the matching netty4 component parameter names as serverInitializerFactory & clientInitializerFactory (and also to fix the relevant documentations)
CAMEL-7961 camel-scala - Auto startup not available in Scala DSL The [{{autoStartup}}|http://camel.apache.org/configuring-route-startup-ordering-and-autostartup.html] method is missing from the Scala DSL.{code:title=MyRoute.scala}import org.apache.camel.scala.dsl.builder.RouteBuilderclass MyRoute extends RouteBuilder {  "direct:start" ==> {    autoStartup(false) // this is not available    autoStartup("{{some.route.auto.startup}}") // this is not available    noAutoStartup() // this is not available    to("mock:end")  }}{code}This should be added to the Scala DSL. Improvement camel-scala - Auto startup not available in Scala DSL The [{{autoStartup}}|http://camel.apache.org/configuring-route-startup-ordering-and-autostartup.html] method is missing from the Scala DSL.{code:title=MyRoute.scala}import org.apache.camel.scala.dsl.builder.RouteBuilderclass MyRoute extends RouteBuilder {  "direct:start" ==> {    autoStartup(false) // this is not available    autoStartup("{{some.route.auto.startup}}") // this is not available    noAutoStartup() // this is not available    to("mock:end")  }}{code}This should be added to the Scala DSL.
CAMEL-7959 Rest DSL - Add support for onException, interceptor and other cross functionality It seems that onException, interceptor etc. is not in use when using embedded routes with the rest dsl. There has been some reports of this on the user forum. Improvement Rest DSL - Add support for onException, interceptor and other cross functionality It seems that onException, interceptor etc. is not in use when using embedded routes with the rest dsl. There has been some reports of this on the user forum.
CAMEL-7958 Java DSL - Should support nested choice in doTry .. doCatch See devhttp://camel.465427.n5.nabble.com/Why-this-syntax-is-not-accepted-doTry-doCatch-choiceWhen-tp5757614.html Improvement Java DSL - Should support nested choice in doTry .. doCatch See devhttp://camel.465427.n5.nabble.com/Why-this-syntax-is-not-accepted-doTry-doCatch-choiceWhen-tp5757614.html
CAMEL-7951 No way to configure the ExchangeFormatter in RedeliveryErrorHandler (want to see the Exchange's properties by default) No way to configure the ExchangeFormatter in RedeliveryErrorHandler (I want to see the Exchange's properties by default)Could be settable using a set method and/or looked up from the Registry with name supplied in the RedeliveryPolicyDefinition.. etc.Also I would ask if you could make the default behavior to print the Exchange's Properties. Improvement No way to configure the ExchangeFormatter in RedeliveryErrorHandler (want to see the Exchange's properties by default) No way to configure the ExchangeFormatter in RedeliveryErrorHandler (I want to see the Exchange's properties by default)Could be settable using a set method and/or looked up from the Registry with name supplied in the RedeliveryPolicyDefinition.. etc.Also I would ask if you could make the default behavior to print the Exchange's Properties.
CAMEL-7949 JmsMessageHelper to support automatic conversion from ByteBuffer to BytesMessage JmsMessageHelper to support automatic conversion from ByteBuffer to BytesMessage.Looking at the code, byte[] and InputStream conversion to BytesMessage could utilize camel's built in type conversion functionality and not reimplement it. Improvement JmsMessageHelper to support automatic conversion from ByteBuffer to BytesMessage JmsMessageHelper to support automatic conversion from ByteBuffer to BytesMessage.Looking at the code, byte[] and InputStream conversion to BytesMessage could utilize camel's built in type conversion functionality and not reimplement it.
CAMEL-7948 Add support for more/new encryption/signature algorithms See attached for a patch to support some new (to XML Security) digest algorithms such as RIPE-MD160 and SEED + CAMELLIA encryption algorithms. Also added a fairly comprehensive set of tests for different encryption/signature algorithms. Improvement Add support for more/new encryption/signature algorithms See attached for a patch to support some new (to XML Security) digest algorithms such as RIPE-MD160 and SEED + CAMELLIA encryption algorithms. Also added a fairly comprehensive set of tests for different encryption/signature algorithms.
CAMEL-7947 Support to set SSLContext in the camel-restlet We cannot setup the SSLContext for the camel-restlet component now. It could be helpful if we can pass the sslContextParameters reference through the restlet endpoint uri. Improvement Support to set SSLContext in the camel-restlet We cannot setup the SSLContext for the camel-restlet component now. It could be helpful if we can pass the sslContextParameters reference through the restlet endpoint uri.
CAMEL-7940 Disable SSL security protocol by default Camel SSLContextParameters doesn't disable the SSL protocol by default. Improvement Disable SSL security protocol by default Camel SSLContextParameters doesn't disable the SSL protocol by default.
CAMEL-7936 Add support for Query Params in the REST DSL Query parameters are currently supported implicitly through HTTP Headers. However, this does not play very well with the new Swagger component. Without the declarative support of query params in the Rest DSL camel-swagger cannot add that information to the REST-description (api-docs). New Feature Add support for Query Params in the REST DSL Query parameters are currently supported implicitly through HTTP Headers. However, this does not play very well with the new Swagger component. Without the declarative support of query params in the Rest DSL camel-swagger cannot add that information to the REST-description (api-docs).
CAMEL-7932 Adding initial properties to PropertiesComponent  Added setInitialProperties(Properties initialProperties) and getInitialProperties() public methods to PropertiesComponent. These methods allow us to add properties to PropertiesComponent when we can't/won't use external properties (locations). In SCR bundle, for example, properties are passed to our program as a Map and the only way to get them into PropertiesComponent was setOverrideProperties method. Override properties are however not used if they are the only properties, so we were forced to use a dummy properties file in the bundle. In addition to the new methods, this pull request changes the override properties handling so that they are always used if they exist (which is the logical thing to do). Here is pull request for it.https://github.com/apache/camel/pull/295.patch  Improvement Adding initial properties to PropertiesComponent  Added setInitialProperties(Properties initialProperties) and getInitialProperties() public methods to PropertiesComponent. These methods allow us to add properties to PropertiesComponent when we can't/won't use external properties (locations). In SCR bundle, for example, properties are passed to our program as a Map and the only way to get them into PropertiesComponent was setOverrideProperties method. Override properties are however not used if they are the only properties, so we were forced to use a dummy properties file in the bundle. In addition to the new methods, this pull request changes the override properties handling so that they are always used if they exist (which is the logical thing to do). Here is pull request for it.https://github.com/apache/camel/pull/295.patch 
CAMEL-7930 org.apache.camel.itest.ftp.SpringFtpEndpointTest is failing it's failing with the following stack trace:{noformat}java.lang.IllegalStateException: Failed to load ApplicationContext	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99)	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122)	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myFTPEndpoint' defined in class path resource [org/apache/camel/itest/ftp/SpringFtpEndpointTest-context.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'configuration' of bean class [org.apache.camel.component.file.remote.FtpEndpoint]: Bean property 'configuration' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1455)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120)	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:102)	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246)	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)	... 25 moreCaused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'configuration' of bean class [org.apache.camel.component.file.remote.FtpEndpoint]: Bean property 'configuration' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1044)	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:904)	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1452)	... 41 more{noformat} Improvement org.apache.camel.itest.ftp.SpringFtpEndpointTest is failing it's failing with the following stack trace:{noformat}java.lang.IllegalStateException: Failed to load ApplicationContext	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:99)	at org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:122)	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:211)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:288)	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:284)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:231)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:88)	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)	at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)	at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:174)	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myFTPEndpoint' defined in class path resource [org/apache/camel/itest/ftp/SpringFtpEndpointTest-context.xml]: Error setting property values; nested exception is org.springframework.beans.NotWritablePropertyException: Invalid property 'configuration' of bean class [org.apache.camel.component.file.remote.FtpEndpoint]: Bean property 'configuration' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1455)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1160)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:293)	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:191)	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:636)	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:934)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:120)	at org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:60)	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.delegateLoading(AbstractDelegatingSmartContextLoader.java:102)	at org.springframework.test.context.support.AbstractDelegatingSmartContextLoader.loadContext(AbstractDelegatingSmartContextLoader.java:246)	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)	at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)	... 25 moreCaused by: org.springframework.beans.NotWritablePropertyException: Invalid property 'configuration' of bean class [org.apache.camel.component.file.remote.FtpEndpoint]: Bean property 'configuration' is not writable or has an invalid setter method. Does the parameter type of the setter match the return type of the getter?	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:1044)	at org.springframework.beans.BeanWrapperImpl.setPropertyValue(BeanWrapperImpl.java:904)	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:75)	at org.springframework.beans.AbstractPropertyAccessor.setPropertyValues(AbstractPropertyAccessor.java:57)	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1452)	... 41 more{noformat}
CAMEL-7928 Camel-mustache - update to 0.8.17 version of mustache-java Currently we use mustache-java version 0.8.16, but it's available version 0.8.17 since September. Task Camel-mustache - update to 0.8.17 version of mustache-java Currently we use mustache-java version 0.8.16, but it's available version 0.8.17 since September.
CAMEL-7915 Share the HashedWheelTimer across the Camel NettyComponent HashedWheelTimer is should not create per producer, we need to share it across the Camel NettyComponent Improvement Share the HashedWheelTimer across the Camel NettyComponent HashedWheelTimer is should not create per producer, we need to share it across the Camel NettyComponent
CAMEL-7913 ObjectConverter does not support String to java.lang.Character conversion (only char primitive) ObjectConverter does not support String to java.lang.Character conversion (only char primitive) Improvement ObjectConverter does not support String to java.lang.Character conversion (only char primitive) ObjectConverter does not support String to java.lang.Character conversion (only char primitive)
CAMEL-7912 Add Character support to ObjectHelper::loadSimpleType() Add Character support to ObjectHelper::loadSimpleType()Currently all primitives are supported except java.lang.Character.. Improvement Add Character support to ObjectHelper::loadSimpleType() Add Character support to ObjectHelper::loadSimpleType()Currently all primitives are supported except java.lang.Character..
CAMEL-7911 Support for createSharedDurableConsumer according to JMS 2.0 Spec Support for createSharedDurableConsumer should be implemented according to the JMS 2.0 specification to allow load balancing for e.g. durable topic subscribers. Although Virtual Topics are preferred, there are situations where this is not feasible to use, e.g. when we need to connected to a topic which is part of a product, or for some other reason is not in our control.  New Feature Support for createSharedDurableConsumer according to JMS 2.0 Spec Support for createSharedDurableConsumer should be implemented according to the JMS 2.0 specification to allow load balancing for e.g. durable topic subscribers. Although Virtual Topics are preferred, there are situations where this is not feasible to use, e.g. when we need to connected to a topic which is part of a product, or for some other reason is not in our control. 
CAMEL-7908 Add a DestinationCreationStrategy to the SJMS component Add a DestinationCreationStrategy to the SJMS componentJMS implementations like HornetQ do not allow dynamic queue/topic creation via the pure JMS API's. Extending SJMS with a DestinationCreationStrategy would allow one to replace the DefaultDestinationCreationStrategy with a provider specific one that in the case of HornetQ dynamically creates the queue/topic using the correct management API.Implementation note:JmsObjectFactory::createMessageProducer would be modified to supply a DestinationCreateionStrategy, it would then use this to obtain Destination's. Improvement Add a DestinationCreationStrategy to the SJMS component Add a DestinationCreationStrategy to the SJMS componentJMS implementations like HornetQ do not allow dynamic queue/topic creation via the pure JMS API's. Extending SJMS with a DestinationCreationStrategy would allow one to replace the DefaultDestinationCreationStrategy with a provider specific one that in the case of HornetQ dynamically creates the queue/topic using the correct management API.Implementation note:JmsObjectFactory::createMessageProducer would be modified to supply a DestinationCreateionStrategy, it would then use this to obtain Destination's.
CAMEL-7907 Add support for JMSCorrelationIDAsBytes to jms component Camel actually does not support JMSCorrelationIDAsBytes. Improvement Add support for JMSCorrelationIDAsBytes to jms component Camel actually does not support JMSCorrelationIDAsBytes.
CAMEL-7903 Update to Smack 4 The currently used Smack version of component/camel-xmpp, 3.2.1 is very old and contains security vulnerabilities. Update to the latest stable Smack version, which is currently Smack 4.0.4. Improvement Update to Smack 4 The currently used Smack version of component/camel-xmpp, 3.2.1 is very old and contains security vulnerabilities. Update to the latest stable Smack version, which is currently Smack 4.0.4.
CAMEL-7902 Add tests for camel-github component The new camel-github component (See CAMEL-7777) needs integration tests. Improvement Add tests for camel-github component The new camel-github component (See CAMEL-7777) needs integration tests.
CAMEL-7889 Add Support for CamelRetrieveGeneratedKeys with useHeadersAsParameters Adds support for retrieving generated keys when also using prepared statements ("useHeadersAsParameters").  This combination was not previously supported. New Feature Add Support for CamelRetrieveGeneratedKeys with useHeadersAsParameters Adds support for retrieving generated keys when also using prepared statements ("useHeadersAsParameters").  This combination was not previously supported.
CAMEL-7887 Executing of 'mvn clean install -Pvalidate' in camel/platforms/karaf/features is failing Executing of 'mvn clean install -Pvalidate' in camel/platforms/karaf/features is failing:{noformat}$ mvn clean install -Pvalidate[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.15-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ apache-camel ---[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target[INFO][INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ apache-camel ---[INFO][INFO] --- maven-remote-resources-plugin:1.5:process (default) @ apache-camel ---[INFO][INFO] --- maven-resources-plugin:2.6:resources (filter) @ apache-camel ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO][INFO] >>> features-maven-plugin:2.4.0:validate (validate) @ apache-camel >>>[INFO][INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ apache-camel ---[INFO][INFO] --- maven-remote-resources-plugin:1.5:process (default) @ apache-camel ---[INFO][INFO] --- maven-resources-plugin:2.6:resources (filter) @ apache-camel ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO][INFO] <<< features-maven-plugin:2.4.0:validate (validate) @ apache-camel <<<[INFO][INFO] --- features-maven-plugin:2.4.0:validate (validate) @ apache-camel ---[INFO] == Preparing for validation ==[INFO]  - getting list of system bundle exports[INFO]  - getting list of provided bundle exports[INFO]     scanning org.apache.camel.karaf:apache-camel:pom:2.15-SNAPSHOT for exports[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports[INFO]     scanning org.ops4j.pax.logging:pax-logging-api:jar:1.7.1:provided for exports[INFO]     scanning org.ops4j.pax.logging:pax-logging-service:jar:1.7.1:provided for exports[INFO]     scanning log4j:log4j:jar:1.2.17:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.framework:jar:3.2.2:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.configadmin:jar:1.4.0:provided for exports[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:1.1.0:provided for exports[INFO]     scanning org.apache.karaf.shell:org.apache.karaf.shell.console:jar:2.4.0:provided for exports[INFO]     scanning jline:jline:jar:2.12:provided for exports[INFO]     scanning org.fusesource.jansi:jansi:jar:1.11:provided for exports[INFO]     scanning org.jledit:core:jar:0.2.1:provided for exports[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.3.1:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.4.0:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.modules:jar:2.4.0:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.config:jar:2.4.0:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.4.0:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.utils:jar:1.6.0:provided for exports[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.3.1:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.fileinstall:jar:3.4.2:provided for exports[INFO]     scanning org.apache.karaf:org.apache.karaf.util:jar:2.4.0:provided for exports[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.utils:jar:1.6.0:provided for exports[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint.core:jar:1.1.0:provided for exports[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint.api:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries.quiesce:org.apache.aries.quiesce.api:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries.proxy:org.apache.aries.proxy.api:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:1.0.0:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.gogo.runtime:jar:0.12.1:provided for exports[INFO]     scanning org.apache.sshd:sshd-core:jar:0.12.0:provided for exports[INFO]     scanning org.apache.mina:mina-core:jar:1.1.7:provided for exports[INFO]     scanning org.slf4j:slf4j-api:jar:1.6.6:provided for exports[INFO]     scanning com.sun.xml.bind:jaxb-impl:jar:2.2.7:compile for exports[INFO]     scanning com.sun.xml.bind:jaxb-core:jar:2.2.7:compile for exports[INFO]     scanning javax.xml.bind:jaxb-api:jar:2.2.7:compile for exports[INFO]     scanning com.sun.istack:istack-commons-runtime:jar:2.16:compile for exports[INFO]     scanning com.sun.xml.fastinfoset:FastInfoset:jar:1.2.12:compile for exports[INFO]     scanning javax.xml.bind:jsr173_api:jar:1.0:compile for exports[INFO]  - populating repositories with Karaf core features descriptors[INFO]  - validation of file:/Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml[INFO] == Analyzing feature descriptor ==[INFO]  - read /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/standard/2.4.0/xml/features[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/standard/2.4.0/xml/features[INFO]     scanning feature service-security for exports[INFO]     OK: imports resolved for aries-proxy[INFO]     scanning feature karaf-framework for exports[INFO]     scanning feature aries-proxy for exports[INFO]     scanning feature aries-blueprint for exports[INFO]     scanning feature features for exports[INFO]     scanning feature admin for exports[INFO]     OK: imports resolved for shell[INFO]     scanning feature diagnostic for exports[INFO]     scanning feature shell for exports[INFO]     OK: imports resolved for jaas[INFO]     scanning feature deployer for exports[INFO]     scanning feature wrapper for exports[INFO]     scanning feature service-wrapper for exports[INFO]     scanning feature obr for exports[INFO]     scanning feature config for exports[INFO]     scanning feature jetty for exports[INFO]     OK: imports resolved for pax-jetty[INFO]     scanning feature http for exports[INFO]     OK: imports resolved for pax-http[INFO]     scanning feature http-whiteboard for exports[INFO]     OK: imports resolved for pax-http-whiteboard[INFO]     scanning feature war for exports[INFO]     OK: imports resolved for pax-war[INFO]     scanning feature kar for exports[INFO]     scanning feature webconsole for exports[INFO]     scanning feature jaas for exports[INFO]     scanning feature ssh for exports[INFO]     scanning feature management for exports[INFO]     scanning feature eventadmin for exports[INFO]     scanning feature jasypt-encryption for exports[INFO]     scanning feature blueprint-web for exports[INFO]     scanning feature scr for exports[INFO]     scanning feature wrap for exports[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/enterprise/2.4.0/xml/features[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/enterprise/2.4.0/xml/features[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 5.365s[INFO] Finished at: Sun Oct 05 17:35:17 CEST 2014[INFO] Final Memory: 16M/244M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate (validate) on project apache-camel: Execution validate of goal org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate failed: An API incompatibility was encountered while executing org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate: java.lang.NoSuchMethodError: aQute.lib.io.IO.drain(Ljava/io/InputStream;)J[ERROR] -----------------------------------------------------[ERROR] realm =    plugin>org.apache.karaf.tooling:features-maven-plugin:2.4.0[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy[ERROR] urls[0] = file:/Users/cmueller/.m2/repository/org/apache/karaf/tooling/features-maven-plugin/2.4.0/features-maven-plugin-2.4.0.jar[ERROR] urls[1] = file:/Users/cmueller/.m2/repository/biz/aQute/bndlib/1.50.0/bndlib-1.50.0.jar[ERROR] urls[2] = file:/Users/cmueller/.m2/repository/org/slf4j/slf4j-jdk14/1.7.7/slf4j-jdk14-1.7.7.jar[ERROR] urls[3] = file:/Users/cmueller/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar[ERROR] urls[4] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar[ERROR] urls[5] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-inject-bean/2.3.0/sisu-inject-bean-2.3.0.jar[ERROR] urls[6] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-guice/3.1.0/sisu-guice-3.1.0-no_aop.jar[ERROR] urls[7] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-guava/0.9.9/sisu-guava-0.9.9.jar[ERROR] urls[8] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.1/plexus-interpolation-1.1.jar[ERROR] urls[9] = file:/Users/cmueller/.m2/repository/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar[ERROR] urls[10] = file:/Users/cmueller/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar[ERROR] urls[11] = file:/Users/cmueller/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar[ERROR] urls[12] = file:/Users/cmueller/.m2/repository/com/google/code/google-collections/google-collect/snapshot-20080530/google-collect-snapshot-20080530.jar[ERROR] urls[13] = file:/Users/cmueller/.m2/repository/junit/junit/3.8.2/junit-3.8.2.jar[ERROR] urls[14] = file:/Users/cmueller/.m2/repository/org/codehaus/woodstox/wstx-asl/3.2.6/wstx-asl-3.2.6.jar[ERROR] urls[15] = file:/Users/cmueller/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar[ERROR] urls[16] = file:/Users/cmueller/.m2/repository/org/sonatype/spice/model-builder/1.3/model-builder-1.3.jar[ERROR] urls[17] = file:/Users/cmueller/.m2/repository/org/apache/maven/maven-project-builder/3.0-alpha-2/maven-project-builder-3.0-alpha-2.jar[ERROR] urls[18] = file:/Users/cmueller/.m2/repository/org/apache/felix/maven-bundle-plugin/2.5.0/maven-bundle-plugin-2.5.0.jar[ERROR] urls[19] = file:/Users/cmueller/.m2/repository/biz/aQute/bnd/bndlib/2.3.0/bndlib-2.3.0.jar[ERROR] urls[20] = file:/Users/cmueller/.m2/repository/org/osgi/org.osgi.core/5.0.0/org.osgi.core-5.0.0.jar[ERROR] urls[21] = file:/Users/cmueller/.m2/repository/org/apache/felix/org.apache.felix.bundlerepository/2.0.2/org.apache.felix.bundlerepository-2.0.2.jar[ERROR] urls[22] = file:/Users/cmueller/.m2/repository/org/easymock/easymock/3.2/easymock-3.2.jar[ERROR] urls[23] = file:/Users/cmueller/.m2/repository/cglib/cglib-nodep/2.2.2/cglib-nodep-2.2.2.jar[ERROR] urls[24] = file:/Users/cmueller/.m2/repository/org/objenesis/objenesis/1.3/objenesis-1.3.jar[ERROR] urls[25] = file:/Users/cmueller/.m2/repository/org/apache/felix/org.apache.felix.utils/1.6.0/org.apache.felix.utils-1.6.0.jar[ERROR] urls[26] = file:/Users/cmueller/.m2/repository/org/osgi/org.osgi.compendium/5.0.0/org.osgi.compendium-5.0.0.jar[ERROR] urls[27] = file:/Users/cmueller/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.0.7/maven-reporting-api-2.0.7.jar[ERROR] urls[28] = file:/Users/cmueller/.m2/repository/commons-cli/commons-cli/1.0/commons-cli-1.0.jar[ERROR] urls[29] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar[ERROR] urls[30] = file:/Users/cmueller/.m2/repository/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.jar[ERROR] urls[31] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.jar[ERROR] urls[32] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.jar[ERROR] urls[33] = file:/Users/cmueller/.m2/repository/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.jar[ERROR] urls[34] = file:/Users/cmueller/.m2/repository/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar[ERROR] urls[35] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar[ERROR] urls[36] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.jar[ERROR] urls[37] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.jar[ERROR] urls[38] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.jar[ERROR] urls[39] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.jar[ERROR] urls[40] = file:/Users/cmueller/.m2/repository/org/apache/velocity/velocity/1.5/velocity-1.5.jar[ERROR] urls[41] = file:/Users/cmueller/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar[ERROR] urls[42] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.jar[ERROR] urls[43] = file:/Users/cmueller/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar[ERROR] urls[44] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.jar[ERROR] urls[45] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.jar[ERROR] urls[46] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.jar[ERROR] urls[47] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.jar[ERROR] urls[48] = file:/Users/cmueller/.m2/repository/org/apache/karaf/features/org.apache.karaf.features.core/2.4.0/org.apache.karaf.features.core-2.4.0.jar[ERROR] urls[49] = file:/Users/cmueller/.m2/repository/org/apache/karaf/shell/org.apache.karaf.shell.obr/2.4.0/org.apache.karaf.shell.obr-2.4.0.jar[ERROR] urls[50] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-wrap/2.1.0/pax-url-wrap-2.1.0.jar[ERROR] urls[51] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-net/1.4.0/ops4j-base-net-1.4.0.jar[ERROR] urls[52] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-lang/1.4.0/ops4j-base-lang-1.4.0.jar[ERROR] urls[53] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-monitors/1.4.0/ops4j-base-monitors-1.4.0.jar[ERROR] urls[54] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-bnd/1.7.1/pax-swissbox-bnd-1.7.1.jar[ERROR] urls[55] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-commons/2.1.0/pax-url-commons-2.1.0.jar[ERROR] urls[56] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-property/1.7.1/pax-swissbox-property-1.7.1.jar[ERROR] urls[57] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-util-property/1.4.0/ops4j-base-util-property-1.4.0.jar[ERROR] urls[58] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-aether/2.1.0/pax-url-aether-2.1.0.jar[ERROR] urls[59] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.spring/2.4.0/org.apache.karaf.deployer.spring-2.4.0.jar[ERROR] urls[60] = file:/Users/cmueller/.m2/repository/org/apache/karaf/org.apache.karaf.util/2.4.0/org.apache.karaf.util-2.4.0.jar[ERROR] urls[61] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.blueprint/2.4.0/org.apache.karaf.deployer.blueprint-2.4.0.jar[ERROR] urls[62] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.features/2.4.0/org.apache.karaf.deployer.features-2.4.0.jar[ERROR] urls[63] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.kar/2.4.0/org.apache.karaf.deployer.kar-2.4.0.jar[ERROR] urls[64] = file:/Users/cmueller/.m2/repository/org/apache/servicemix/bundles/org.apache.servicemix.bundles.ant/1.8.4_1/org.apache.servicemix.bundles.ant-1.8.4_1.jar[ERROR] urls[65] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar[ERROR] urls[66] = file:/Users/cmueller/.m2/repository/org/apache/maven/wagon/wagon-http-lightweight/2.6/wagon-http-lightweight-2.6.jar[ERROR] urls[67] = file:/Users/cmueller/.m2/repository/org/apache/maven/wagon/wagon-http-shared/2.6/wagon-http-shared-2.6.jar[ERROR] urls[68] = file:/Users/cmueller/.m2/repository/org/jsoup/jsoup/1.7.2/jsoup-1.7.2.jar[ERROR] urls[69] = file:/Users/cmueller/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar[ERROR] urls[70] = file:/Users/cmueller/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar[ERROR] Number of foreign imports: 1[ERROR] import: Entry[import  from realm ClassRealm[project>org.apache.camel.karaf:apache-camel:2.15-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]][ERROR][ERROR] -----------------------------------------------------[ERROR] -> [Help 1][ERROR][ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR][ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException{noformat} Task Executing of 'mvn clean install -Pvalidate' in camel/platforms/karaf/features is failing Executing of 'mvn clean install -Pvalidate' in camel/platforms/karaf/features is failing:{noformat}$ mvn clean install -Pvalidate[INFO] Scanning for projects...[INFO][INFO] ------------------------------------------------------------------------[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.15-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO][INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ apache-camel ---[INFO] Deleting /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target[INFO][INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ apache-camel ---[INFO][INFO] --- maven-remote-resources-plugin:1.5:process (default) @ apache-camel ---[INFO][INFO] --- maven-resources-plugin:2.6:resources (filter) @ apache-camel ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO][INFO] >>> features-maven-plugin:2.4.0:validate (validate) @ apache-camel >>>[INFO][INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ apache-camel ---[INFO][INFO] --- maven-remote-resources-plugin:1.5:process (default) @ apache-camel ---[INFO][INFO] --- maven-resources-plugin:2.6:resources (filter) @ apache-camel ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO][INFO] <<< features-maven-plugin:2.4.0:validate (validate) @ apache-camel <<<[INFO][INFO] --- features-maven-plugin:2.4.0:validate (validate) @ apache-camel ---[INFO] == Preparing for validation ==[INFO]  - getting list of system bundle exports[INFO]  - getting list of provided bundle exports[INFO]     scanning org.apache.camel.karaf:apache-camel:pom:2.15-SNAPSHOT for exports[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports[INFO]     scanning org.ops4j.pax.logging:pax-logging-api:jar:1.7.1:provided for exports[INFO]     scanning org.ops4j.pax.logging:pax-logging-service:jar:1.7.1:provided for exports[INFO]     scanning log4j:log4j:jar:1.2.17:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.framework:jar:3.2.2:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.configadmin:jar:1.4.0:provided for exports[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint:jar:1.1.0:provided for exports[INFO]     scanning org.apache.karaf.shell:org.apache.karaf.shell.console:jar:2.4.0:provided for exports[INFO]     scanning jline:jline:jar:2.12:provided for exports[INFO]     scanning org.fusesource.jansi:jansi:jar:1.11:provided for exports[INFO]     scanning org.jledit:core:jar:0.2.1:provided for exports[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.3.1:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.4.0:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.modules:jar:2.4.0:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.config:jar:2.4.0:provided for exports[INFO]     scanning org.apache.karaf.jaas:org.apache.karaf.jaas.boot:jar:2.4.0:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.utils:jar:1.6.0:provided for exports[INFO]     scanning org.osgi:org.osgi.compendium:jar:4.3.1:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.fileinstall:jar:3.4.2:provided for exports[INFO]     scanning org.apache.karaf:org.apache.karaf.util:jar:2.4.0:provided for exports[INFO]     scanning org.osgi:org.osgi.core:jar:4.3.1:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.utils:jar:1.6.0:provided for exports[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint.core:jar:1.1.0:provided for exports[INFO]     scanning org.apache.aries.blueprint:org.apache.aries.blueprint.api:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries.quiesce:org.apache.aries.quiesce.api:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries.proxy:org.apache.aries.proxy.api:jar:1.0.0:provided for exports[INFO]     scanning org.apache.aries:org.apache.aries.util:jar:1.0.0:provided for exports[INFO]     scanning org.apache.felix:org.apache.felix.gogo.runtime:jar:0.12.1:provided for exports[INFO]     scanning org.apache.sshd:sshd-core:jar:0.12.0:provided for exports[INFO]     scanning org.apache.mina:mina-core:jar:1.1.7:provided for exports[INFO]     scanning org.slf4j:slf4j-api:jar:1.6.6:provided for exports[INFO]     scanning com.sun.xml.bind:jaxb-impl:jar:2.2.7:compile for exports[INFO]     scanning com.sun.xml.bind:jaxb-core:jar:2.2.7:compile for exports[INFO]     scanning javax.xml.bind:jaxb-api:jar:2.2.7:compile for exports[INFO]     scanning com.sun.istack:istack-commons-runtime:jar:2.16:compile for exports[INFO]     scanning com.sun.xml.fastinfoset:FastInfoset:jar:1.2.12:compile for exports[INFO]     scanning javax.xml.bind:jsr173_api:jar:1.0:compile for exports[INFO]  - populating repositories with Karaf core features descriptors[INFO]  - validation of file:/Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml[INFO] == Analyzing feature descriptor ==[INFO]  - read /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/standard/2.4.0/xml/features[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/standard/2.4.0/xml/features[INFO]     scanning feature service-security for exports[INFO]     OK: imports resolved for aries-proxy[INFO]     scanning feature karaf-framework for exports[INFO]     scanning feature aries-proxy for exports[INFO]     scanning feature aries-blueprint for exports[INFO]     scanning feature features for exports[INFO]     scanning feature admin for exports[INFO]     OK: imports resolved for shell[INFO]     scanning feature diagnostic for exports[INFO]     scanning feature shell for exports[INFO]     OK: imports resolved for jaas[INFO]     scanning feature deployer for exports[INFO]     scanning feature wrapper for exports[INFO]     scanning feature service-wrapper for exports[INFO]     scanning feature obr for exports[INFO]     scanning feature config for exports[INFO]     scanning feature jetty for exports[INFO]     OK: imports resolved for pax-jetty[INFO]     scanning feature http for exports[INFO]     OK: imports resolved for pax-http[INFO]     scanning feature http-whiteboard for exports[INFO]     OK: imports resolved for pax-http-whiteboard[INFO]     scanning feature war for exports[INFO]     OK: imports resolved for pax-war[INFO]     scanning feature kar for exports[INFO]     scanning feature webconsole for exports[INFO]     scanning feature jaas for exports[INFO]     scanning feature ssh for exports[INFO]     scanning feature management for exports[INFO]     scanning feature eventadmin for exports[INFO]     scanning feature jasypt-encryption for exports[INFO]     scanning feature blueprint-web for exports[INFO]     scanning feature scr for exports[INFO]     scanning feature wrap for exports[INFO]  - adding repository from mvn:org.apache.karaf.assemblies.features/enterprise/2.4.0/xml/features[INFO]  - validation of mvn:org.apache.karaf.assemblies.features/enterprise/2.4.0/xml/features[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 5.365s[INFO] Finished at: Sun Oct 05 17:35:17 CEST 2014[INFO] Final Memory: 16M/244M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate (validate) on project apache-camel: Execution validate of goal org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate failed: An API incompatibility was encountered while executing org.apache.karaf.tooling:features-maven-plugin:2.4.0:validate: java.lang.NoSuchMethodError: aQute.lib.io.IO.drain(Ljava/io/InputStream;)J[ERROR] -----------------------------------------------------[ERROR] realm =    plugin>org.apache.karaf.tooling:features-maven-plugin:2.4.0[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy[ERROR] urls[0] = file:/Users/cmueller/.m2/repository/org/apache/karaf/tooling/features-maven-plugin/2.4.0/features-maven-plugin-2.4.0.jar[ERROR] urls[1] = file:/Users/cmueller/.m2/repository/biz/aQute/bndlib/1.50.0/bndlib-1.50.0.jar[ERROR] urls[2] = file:/Users/cmueller/.m2/repository/org/slf4j/slf4j-jdk14/1.7.7/slf4j-jdk14-1.7.7.jar[ERROR] urls[3] = file:/Users/cmueller/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar[ERROR] urls[4] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar[ERROR] urls[5] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-inject-bean/2.3.0/sisu-inject-bean-2.3.0.jar[ERROR] urls[6] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-guice/3.1.0/sisu-guice-3.1.0-no_aop.jar[ERROR] urls[7] = file:/Users/cmueller/.m2/repository/org/sonatype/sisu/sisu-guava/0.9.9/sisu-guava-0.9.9.jar[ERROR] urls[8] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.1/plexus-interpolation-1.1.jar[ERROR] urls[9] = file:/Users/cmueller/.m2/repository/org/apache/xbean/xbean-reflect/3.4/xbean-reflect-3.4.jar[ERROR] urls[10] = file:/Users/cmueller/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar[ERROR] urls[11] = file:/Users/cmueller/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar[ERROR] urls[12] = file:/Users/cmueller/.m2/repository/com/google/code/google-collections/google-collect/snapshot-20080530/google-collect-snapshot-20080530.jar[ERROR] urls[13] = file:/Users/cmueller/.m2/repository/junit/junit/3.8.2/junit-3.8.2.jar[ERROR] urls[14] = file:/Users/cmueller/.m2/repository/org/codehaus/woodstox/wstx-asl/3.2.6/wstx-asl-3.2.6.jar[ERROR] urls[15] = file:/Users/cmueller/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar[ERROR] urls[16] = file:/Users/cmueller/.m2/repository/org/sonatype/spice/model-builder/1.3/model-builder-1.3.jar[ERROR] urls[17] = file:/Users/cmueller/.m2/repository/org/apache/maven/maven-project-builder/3.0-alpha-2/maven-project-builder-3.0-alpha-2.jar[ERROR] urls[18] = file:/Users/cmueller/.m2/repository/org/apache/felix/maven-bundle-plugin/2.5.0/maven-bundle-plugin-2.5.0.jar[ERROR] urls[19] = file:/Users/cmueller/.m2/repository/biz/aQute/bnd/bndlib/2.3.0/bndlib-2.3.0.jar[ERROR] urls[20] = file:/Users/cmueller/.m2/repository/org/osgi/org.osgi.core/5.0.0/org.osgi.core-5.0.0.jar[ERROR] urls[21] = file:/Users/cmueller/.m2/repository/org/apache/felix/org.apache.felix.bundlerepository/2.0.2/org.apache.felix.bundlerepository-2.0.2.jar[ERROR] urls[22] = file:/Users/cmueller/.m2/repository/org/easymock/easymock/3.2/easymock-3.2.jar[ERROR] urls[23] = file:/Users/cmueller/.m2/repository/cglib/cglib-nodep/2.2.2/cglib-nodep-2.2.2.jar[ERROR] urls[24] = file:/Users/cmueller/.m2/repository/org/objenesis/objenesis/1.3/objenesis-1.3.jar[ERROR] urls[25] = file:/Users/cmueller/.m2/repository/org/apache/felix/org.apache.felix.utils/1.6.0/org.apache.felix.utils-1.6.0.jar[ERROR] urls[26] = file:/Users/cmueller/.m2/repository/org/osgi/org.osgi.compendium/5.0.0/org.osgi.compendium-5.0.0.jar[ERROR] urls[27] = file:/Users/cmueller/.m2/repository/org/apache/maven/reporting/maven-reporting-api/2.0.7/maven-reporting-api-2.0.7.jar[ERROR] urls[28] = file:/Users/cmueller/.m2/repository/commons-cli/commons-cli/1.0/commons-cli-1.0.jar[ERROR] urls[29] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-interactivity-api/1.0-alpha-4/plexus-interactivity-api-1.0-alpha-4.jar[ERROR] urls[30] = file:/Users/cmueller/.m2/repository/org/apache/maven/maven-archiver/2.5/maven-archiver-2.5.jar[ERROR] urls[31] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-archiver/2.1/plexus-archiver-2.1.jar[ERROR] urls[32] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-io/2.0.2/plexus-io-2.0.2.jar[ERROR] urls[33] = file:/Users/cmueller/.m2/repository/org/apache/maven/shared/maven-dependency-tree/2.1/maven-dependency-tree-2.1.jar[ERROR] urls[34] = file:/Users/cmueller/.m2/repository/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar[ERROR] urls[35] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-sink-api/1.0/doxia-sink-api-1.0.jar[ERROR] urls[36] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-site-renderer/1.0/doxia-site-renderer-1.0.jar[ERROR] urls[37] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-core/1.0/doxia-core-1.0.jar[ERROR] urls[38] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-i18n/1.0-beta-7/plexus-i18n-1.0-beta-7.jar[ERROR] urls[39] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-velocity/1.1.7/plexus-velocity-1.1.7.jar[ERROR] urls[40] = file:/Users/cmueller/.m2/repository/org/apache/velocity/velocity/1.5/velocity-1.5.jar[ERROR] urls[41] = file:/Users/cmueller/.m2/repository/oro/oro/2.0.8/oro-2.0.8.jar[ERROR] urls[42] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-decoration-model/1.0/doxia-decoration-model-1.0.jar[ERROR] urls[43] = file:/Users/cmueller/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar[ERROR] urls[44] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-apt/1.0/doxia-module-apt-1.0.jar[ERROR] urls[45] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-fml/1.0/doxia-module-fml-1.0.jar[ERROR] urls[46] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-xdoc/1.0/doxia-module-xdoc-1.0.jar[ERROR] urls[47] = file:/Users/cmueller/.m2/repository/org/apache/maven/doxia/doxia-module-xhtml/1.0/doxia-module-xhtml-1.0.jar[ERROR] urls[48] = file:/Users/cmueller/.m2/repository/org/apache/karaf/features/org.apache.karaf.features.core/2.4.0/org.apache.karaf.features.core-2.4.0.jar[ERROR] urls[49] = file:/Users/cmueller/.m2/repository/org/apache/karaf/shell/org.apache.karaf.shell.obr/2.4.0/org.apache.karaf.shell.obr-2.4.0.jar[ERROR] urls[50] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-wrap/2.1.0/pax-url-wrap-2.1.0.jar[ERROR] urls[51] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-net/1.4.0/ops4j-base-net-1.4.0.jar[ERROR] urls[52] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-lang/1.4.0/ops4j-base-lang-1.4.0.jar[ERROR] urls[53] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-monitors/1.4.0/ops4j-base-monitors-1.4.0.jar[ERROR] urls[54] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-bnd/1.7.1/pax-swissbox-bnd-1.7.1.jar[ERROR] urls[55] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-commons/2.1.0/pax-url-commons-2.1.0.jar[ERROR] urls[56] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/swissbox/pax-swissbox-property/1.7.1/pax-swissbox-property-1.7.1.jar[ERROR] urls[57] = file:/Users/cmueller/.m2/repository/org/ops4j/base/ops4j-base-util-property/1.4.0/ops4j-base-util-property-1.4.0.jar[ERROR] urls[58] = file:/Users/cmueller/.m2/repository/org/ops4j/pax/url/pax-url-aether/2.1.0/pax-url-aether-2.1.0.jar[ERROR] urls[59] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.spring/2.4.0/org.apache.karaf.deployer.spring-2.4.0.jar[ERROR] urls[60] = file:/Users/cmueller/.m2/repository/org/apache/karaf/org.apache.karaf.util/2.4.0/org.apache.karaf.util-2.4.0.jar[ERROR] urls[61] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.blueprint/2.4.0/org.apache.karaf.deployer.blueprint-2.4.0.jar[ERROR] urls[62] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.features/2.4.0/org.apache.karaf.deployer.features-2.4.0.jar[ERROR] urls[63] = file:/Users/cmueller/.m2/repository/org/apache/karaf/deployer/org.apache.karaf.deployer.kar/2.4.0/org.apache.karaf.deployer.kar-2.4.0.jar[ERROR] urls[64] = file:/Users/cmueller/.m2/repository/org/apache/servicemix/bundles/org.apache.servicemix.bundles.ant/1.8.4_1/org.apache.servicemix.bundles.ant-1.8.4_1.jar[ERROR] urls[65] = file:/Users/cmueller/.m2/repository/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar[ERROR] urls[66] = file:/Users/cmueller/.m2/repository/org/apache/maven/wagon/wagon-http-lightweight/2.6/wagon-http-lightweight-2.6.jar[ERROR] urls[67] = file:/Users/cmueller/.m2/repository/org/apache/maven/wagon/wagon-http-shared/2.6/wagon-http-shared-2.6.jar[ERROR] urls[68] = file:/Users/cmueller/.m2/repository/org/jsoup/jsoup/1.7.2/jsoup-1.7.2.jar[ERROR] urls[69] = file:/Users/cmueller/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar[ERROR] urls[70] = file:/Users/cmueller/.m2/repository/commons-io/commons-io/2.4/commons-io-2.4.jar[ERROR] Number of foreign imports: 1[ERROR] import: Entry[import  from realm ClassRealm[project>org.apache.camel.karaf:apache-camel:2.15-SNAPSHOT, parent: ClassRealm[maven.api, parent: null]]][ERROR][ERROR] -----------------------------------------------------[ERROR] -> [Help 1][ERROR][ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.[ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR][ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException{noformat}
CAMEL-7878 Swagger's base.path should be calculated rather than hardcoded The "base.path" has to be configured or calling the methods by clicking on buttons in Swagger UI doesn't work. With Spring Boot, I'm able to configure Swagger with the following: {code}@Configuration @EnableSwagger public class SwaggerConfig implements EnvironmentAware {         public static final String DEFAULT_INCLUDE_PATTERN = "/api/.*";         private RelaxedPropertyResolver propertyResolver;         @Override         public void setEnvironment(Environment environment) {                 this.propertyResolver = new RelaxedPropertyResolver(environment, "swagger.");         }         /**          * Swagger Spring MVC configuration          */         @Bean         public SwaggerSpringMvcPlugin swaggerSpringMvcPlugin(SpringSwaggerConfig springSwaggerConfig) {                 return new SwaggerSpringMvcPlugin(springSwaggerConfig)                                 .apiInfo(apiInfo())                                 .genericModelSubstitutes(ResponseEntity.class)                                 .includePatterns(DEFAULT_INCLUDE_PATTERN);         }         /**          * API Info as it appears on the swagger-ui page          */         private ApiInfo apiInfo() {                 return new ApiInfo(                                 propertyResolver.getProperty("title"),                                 propertyResolver.getProperty("description"),                                 propertyResolver.getProperty("termsOfServiceUrl"),                                 propertyResolver.getProperty("contact"),                                 propertyResolver.getProperty("license"),                                 propertyResolver.getProperty("licenseUrl"));         } } {code}With Camel, it's a bit less code, but if I don't override the "base.path", it defaults to localhost:8080. The Spring MVC Swagger implementation figures out the correct base path on its own. {code}        /**          * Swagger Camel Configuration          */         @Bean         public ServletRegistrationBean swaggerServlet() {                 ServletRegistrationBean swagger = new ServletRegistrationBean(new SpringRestSwaggerApiDeclarationServlet(), "/swagger/*");                 Map<String, String> params = new HashMap<>();                 params.put("base.path", "https://localhost:8443/rest");                 params.put("api.title", propertyResolver.getProperty("title"));                 params.put("api.description", propertyResolver.getProperty("description"));                 params.put("api.termsOfServiceUrl", propertyResolver.getProperty("termsOfServiceUrl"));                 params.put("api.version", propertyResolver.getProperty("version"));                 params.put("api.license", propertyResolver.getProperty("license"));                 params.put("api.licenseUrl", propertyResolver.getProperty("licenseUrl"));                 swagger.setInitParameters(params);                 return swagger;         } {code}Is it possible to improve the SpringRestSwaggerApiDeclarationServlet so it gets the path from CamelServlet and it doesn't have to be hardcoded? Mailing list thread: http://camel.465427.n5.nabble.com/Camel-s-Swagger-vs-Spring-MVC-Swagger-td5757023.html Improvement Swagger's base.path should be calculated rather than hardcoded The "base.path" has to be configured or calling the methods by clicking on buttons in Swagger UI doesn't work. With Spring Boot, I'm able to configure Swagger with the following: {code}@Configuration @EnableSwagger public class SwaggerConfig implements EnvironmentAware {         public static final String DEFAULT_INCLUDE_PATTERN = "/api/.*";         private RelaxedPropertyResolver propertyResolver;         @Override         public void setEnvironment(Environment environment) {                 this.propertyResolver = new RelaxedPropertyResolver(environment, "swagger.");         }         /**          * Swagger Spring MVC configuration          */         @Bean         public SwaggerSpringMvcPlugin swaggerSpringMvcPlugin(SpringSwaggerConfig springSwaggerConfig) {                 return new SwaggerSpringMvcPlugin(springSwaggerConfig)                                 .apiInfo(apiInfo())                                 .genericModelSubstitutes(ResponseEntity.class)                                 .includePatterns(DEFAULT_INCLUDE_PATTERN);         }         /**          * API Info as it appears on the swagger-ui page          */         private ApiInfo apiInfo() {                 return new ApiInfo(                                 propertyResolver.getProperty("title"),                                 propertyResolver.getProperty("description"),                                 propertyResolver.getProperty("termsOfServiceUrl"),                                 propertyResolver.getProperty("contact"),                                 propertyResolver.getProperty("license"),                                 propertyResolver.getProperty("licenseUrl"));         } } {code}With Camel, it's a bit less code, but if I don't override the "base.path", it defaults to localhost:8080. The Spring MVC Swagger implementation figures out the correct base path on its own. {code}        /**          * Swagger Camel Configuration          */         @Bean         public ServletRegistrationBean swaggerServlet() {                 ServletRegistrationBean swagger = new ServletRegistrationBean(new SpringRestSwaggerApiDeclarationServlet(), "/swagger/*");                 Map<String, String> params = new HashMap<>();                 params.put("base.path", "https://localhost:8443/rest");                 params.put("api.title", propertyResolver.getProperty("title"));                 params.put("api.description", propertyResolver.getProperty("description"));                 params.put("api.termsOfServiceUrl", propertyResolver.getProperty("termsOfServiceUrl"));                 params.put("api.version", propertyResolver.getProperty("version"));                 params.put("api.license", propertyResolver.getProperty("license"));                 params.put("api.licenseUrl", propertyResolver.getProperty("licenseUrl"));                 swagger.setInitParameters(params);                 return swagger;         } {code}Is it possible to improve the SpringRestSwaggerApiDeclarationServlet so it gets the path from CamelServlet and it doesn't have to be hardcoded? Mailing list thread: http://camel.465427.n5.nabble.com/Camel-s-Swagger-vs-Spring-MVC-Swagger-td5757023.html
CAMEL-7875 Easier write access to Camel context registry I haven't found a nice way to add beans to Camel context registry through Camel context reference in plain Java. Some beans are only needed by a certain endpoint and it would make sense to set the bean up with the endpoint in routebuilder configure method.If we added a reference to self in SimpleRegistry we could setup the Camel context by DefaultCamelContext(new SimpleRegistry()) or OsgiDefaultCamelContext(bundleContext, new SimpleRegistry()) and easily access the registry from the routebuilder with SimpleRegistry registry = (SimpleRegistry) getContext().lookupByName(SimpleRegistry.NAME);.Then we can set up beans in routebuilder configure and simply add them with registry.put. And the same routebuilder could be used in plain Java, in OSGi or elsewhere.All that is needed is this change in SimpleRegistry:{code}public static final String NAME;static {   NAME = java.util.UUID.randomUUID().tostring();}public SimpleRegistry() {   put.(NAME, this);}{code} Improvement Easier write access to Camel context registry I haven't found a nice way to add beans to Camel context registry through Camel context reference in plain Java. Some beans are only needed by a certain endpoint and it would make sense to set the bean up with the endpoint in routebuilder configure method.If we added a reference to self in SimpleRegistry we could setup the Camel context by DefaultCamelContext(new SimpleRegistry()) or OsgiDefaultCamelContext(bundleContext, new SimpleRegistry()) and easily access the registry from the routebuilder with SimpleRegistry registry = (SimpleRegistry) getContext().lookupByName(SimpleRegistry.NAME);.Then we can set up beans in routebuilder configure and simply add them with registry.put. And the same routebuilder could be used in plain Java, in OSGi or elsewhere.All that is needed is this change in SimpleRegistry:{code}public static final String NAME;static {   NAME = java.util.UUID.randomUUID().tostring();}public SimpleRegistry() {   put.(NAME, this);}{code}
CAMEL-7873 Add capability to sort incoming mail messages Please see the pull request at https://github.com/apache/camel/pull/277Patch plus unit test are available New Feature Add capability to sort incoming mail messages Please see the pull request at https://github.com/apache/camel/pull/277Patch plus unit test are available
CAMEL-7872 Post processing action for input mail box Please see the pull request at https://github.com/apache/camel/pull/278Patch plus unit test are available New Feature Post processing action for input mail box Please see the pull request at https://github.com/apache/camel/pull/278Patch plus unit test are available
CAMEL-7864 The kafka component does not properly support zookeeper chroot configuration The following code in the KafkaConsumer.java file prevents the use of a chroot connection to zookeeper:{noformat}        props.put("zookeeper.connect", endpoint.getZookeeperHost() + ":" + endpoint.getZookeeperPort());{noformat}I propose simply combining the host and port endpoint properties to a simple "zookeeper.connect" property to give the most flexibility to the end user. Improvement The kafka component does not properly support zookeeper chroot configuration The following code in the KafkaConsumer.java file prevents the use of a chroot connection to zookeeper:{noformat}        props.put("zookeeper.connect", endpoint.getZookeeperHost() + ":" + endpoint.getZookeeperPort());{noformat}I propose simply combining the host and port endpoint properties to a simple "zookeeper.connect" property to give the most flexibility to the end user.
CAMEL-7863 Tone down info logging pr. message See http://camel.465427.n5.nabble.com/Confusing-cxf-log-messages-after-upgrading-to-2-14-0-td5757014.html Improvement Tone down info logging pr. message See http://camel.465427.n5.nabble.com/Confusing-cxf-log-messages-after-upgrading-to-2-14-0-td5757014.html
CAMEL-7860 Add sendReply functionality in RabbitMQConsumer To provide the RPC functionality with RabbitMQ as described [here|http://www.rabbitmq.com/tutorials/tutorial-six-java.html] the {{ExchangePattern}} should be changed to {{InOut}} when the {{replyTo}} is present in the AMQP properties for the {{RabbitMQConsumer}}.After processing the {{Exchange}} the reply message can than be retrieved and published to the reply queue.For JMS is a similar construction already implemented. Improvement Add sendReply functionality in RabbitMQConsumer To provide the RPC functionality with RabbitMQ as described [here|http://www.rabbitmq.com/tutorials/tutorial-six-java.html] the {{ExchangePattern}} should be changed to {{InOut}} when the {{replyTo}} is present in the AMQP properties for the {{RabbitMQConsumer}}.After processing the {{Exchange}} the reply message can than be retrieved and published to the reply queue.For JMS is a similar construction already implemented.
CAMEL-7859 Language component - Add support for binary content See nabblehttp://camel.465427.n5.nabble.com/Corrupt-pdf-from-classpath-tp5756921.htmlSo you can read binary content from classpath using the constant language. Improvement Language component - Add support for binary content See nabblehttp://camel.465427.n5.nabble.com/Corrupt-pdf-from-classpath-tp5756921.htmlSo you can read binary content from classpath using the constant language.
CAMEL-7858 Allow to disable Jaxb annotations in JacksonDataFormat The existing code of camel jackson dataformat does not support that we disable the JaxbAnnotationModule() {code}public JacksonDataFormat(Class<?> unmarshalType, Class<?> jsonView) {         this.objectMapper = new ObjectMapper();         this.unmarshalType = unmarshalType;         this.jsonView = jsonView;         // Enables JAXB processing         JaxbAnnotationModule module = new JaxbAnnotationModule();         this.objectMapper.registerModule(module);     } {code}If we have an attribute like this: {code}@XmlAttribute(name = "has-children", required = true) private Boolean hasChildren; {code}In previous version (2.9.7 for instance): {code}XML: "has-children" Json: "hasChildren" {code}In the current one (2.14.0): {code}XML: "has-children" Json: "has-children" {code} Improvement Allow to disable Jaxb annotations in JacksonDataFormat The existing code of camel jackson dataformat does not support that we disable the JaxbAnnotationModule() {code}public JacksonDataFormat(Class<?> unmarshalType, Class<?> jsonView) {         this.objectMapper = new ObjectMapper();         this.unmarshalType = unmarshalType;         this.jsonView = jsonView;         // Enables JAXB processing         JaxbAnnotationModule module = new JaxbAnnotationModule();         this.objectMapper.registerModule(module);     } {code}If we have an attribute like this: {code}@XmlAttribute(name = "has-children", required = true) private Boolean hasChildren; {code}In previous version (2.9.7 for instance): {code}XML: "has-children" Json: "hasChildren" {code}In the current one (2.14.0): {code}XML: "has-children" Json: "has-children" {code}
CAMEL-7857 Camel Karaf commands - Returns values for more scriptable See SOhttp://stackoverflow.com/questions/25965344/karaf-script-to-suspend-all-started-camel-routesWonder if we can improve some of the Camel Karaf commands to support those kind of scripts. That seems very handy. Improvement Camel Karaf commands - Returns values for more scriptable See SOhttp://stackoverflow.com/questions/25965344/karaf-script-to-suspend-all-started-camel-routesWonder if we can improve some of the Camel Karaf commands to support those kind of scripts. That seems very handy.
CAMEL-7850 Allow to set the id of the indexed document via a header Hi,It would be nice to be able to set the id of the document to index instead of always generating it.I'll attach a PR as soon as possible. New Feature Allow to set the id of the indexed document via a header Hi,It would be nice to be able to set the id of the document to index instead of always generating it.I'll attach a PR as soon as possible.
CAMEL-7848 Netty-Http component: add support for registry's encoders and decoders Currently the camel-netty component supports setting encoders & decoders that enlisted in the registry.It will be very helpful to have this functionality similarly supported in the camel-netty-http component too.From what I saw, camel-netty's ClientPipelineFactory implementation (DefaultClientPipelineFactory) supports it in the getPipeline method but a similar implementation does not exist in camel-netty-http's ClientPipelineFactory implementation (HttpClientPipelineFactory). New Feature Netty-Http component: add support for registry's encoders and decoders Currently the camel-netty component supports setting encoders & decoders that enlisted in the registry.It will be very helpful to have this functionality similarly supported in the camel-netty-http component too.From what I saw, camel-netty's ClientPipelineFactory implementation (DefaultClientPipelineFactory) supports it in the getPipeline method but a similar implementation does not exist in camel-netty-http's ClientPipelineFactory implementation (HttpClientPipelineFactory).
CAMEL-7846 Added a DelegateEndpoint interface into Camel API Sometime we could wrap a camel endpoint to provide additional functions, it's hard for camel component to know if the endpoint is wrapped. The DelegateEndpoint Interface can help us to do that. New Feature Added a DelegateEndpoint interface into Camel API Sometime we could wrap a camel endpoint to provide additional functions, it's hard for camel component to know if the endpoint is wrapped. The DelegateEndpoint Interface can help us to do that.
CAMEL-7845 Provide Configurer for user to configure the CXF conduit and CXF destination from Java code There is an user want to configure the CXF endpoint in a programmatic way[1]. We could provide a configurer in camel-cxf to let the user apply their custom configuration code of conduit or destination. [1]http://camel.465427.n5.nabble.com/Programmatic-CXF-Endpoint-td5756368.html New Feature Provide Configurer for user to configure the CXF conduit and CXF destination from Java code There is an user want to configure the CXF endpoint in a programmatic way[1]. We could provide a configurer in camel-cxf to let the user apply their custom configuration code of conduit or destination. [1]http://camel.465427.n5.nabble.com/Programmatic-CXF-Endpoint-td5756368.html
CAMEL-7840 Upgrade to metrics 3.1 There is a new release and they changed the mvn group id to dropwizard. Task Upgrade to metrics 3.1 There is a new release and they changed the mvn group id to dropwizard.
CAMEL-7838 Aggregator - Using groupExchanges should store them on body mid-processing CAMEL-6744 encompassed setting the List<V> into the body {{onCompletion}} only when using anything based on {{AbstractListAggregationStrategy}}However any strategies based on this class cannot be used with a persistent repository because the GROUPED_EXCHANGE property appears not to be serialised so keeps being reset to the latest message only.(I spotted this by checking properties in the completion predicate and AGGREGATED_SIZE != GROUPED_EXCHANGE.size())Given this limitation, it doesn't seem sensible to only promote to the body on completion. The only reason I can think of is to limit regression to existing completionPredicates that expect the first message in {{body}} instead of {{body.get(0)}}. That said, CAMEL-6744 already introduced this change to the subsequent route. Improvement Aggregator - Using groupExchanges should store them on body mid-processing CAMEL-6744 encompassed setting the List<V> into the body {{onCompletion}} only when using anything based on {{AbstractListAggregationStrategy}}However any strategies based on this class cannot be used with a persistent repository because the GROUPED_EXCHANGE property appears not to be serialised so keeps being reset to the latest message only.(I spotted this by checking properties in the completion predicate and AGGREGATED_SIZE != GROUPED_EXCHANGE.size())Given this limitation, it doesn't seem sensible to only promote to the body on completion. The only reason I can think of is to limit regression to existing completionPredicates that expect the first message in {{body}} instead of {{body.get(0)}}. That said, CAMEL-6744 already introduced this change to the subsequent route.
CAMEL-7835 camel-test-spring doesn't support Spring 4.1.0.RELEASE CamelSpringJUnit4ClassRunner calls the TestContextManager(Class, String) constructor, and the TestContextManager.getDefaultTestExecutionListenerClasses() method.  Both of these are deprecated in spring-test-4.0.x, and are gone in 4.1.x.  Task camel-test-spring doesn't support Spring 4.1.0.RELEASE CamelSpringJUnit4ClassRunner calls the TestContextManager(Class, String) constructor, and the TestContextManager.getDefaultTestExecutionListenerClasses() method.  Both of these are deprecated in spring-test-4.0.x, and are gone in 4.1.x. 
CAMEL-7834 create a docker events endpoint Docker provides a REST API to query events (for containers starting and stopping etc):https://docs.docker.com/reference/api/docker_remote_api_v1.14/#monitor-dockers-eventsit'd be nice to support a simple camel component to make it easier to consume docker events; with the events available as a JSON String or as a POJO New Feature create a docker events endpoint Docker provides a REST API to query events (for containers starting and stopping etc):https://docs.docker.com/reference/api/docker_remote_api_v1.14/#monitor-dockers-eventsit'd be nice to support a simple camel component to make it easier to consume docker events; with the events available as a JSON String or as a POJO
CAMEL-7833 create an extension of the RX Observable<T> to add more of the Camel DSL in there (e.g. to() or to go back to the general camel DSL) with Camel RX and java 8 we can do some nice lambdas and typesafe filtering and transformation:{code}ReactiveCamel rx = new ReactiveCamel(camelContext);Observable<Order> observable = rx.toObservable("seda:orders", Order.class); // now lets filter and map using Java 8Observable<String> largeOrderIds = observable.  filter(order -> order.getAmount() > 100.0).  map(order -> order.getId()); rx.sendTo(observable, "activemq:MyQueue");{code}however the DSL isn't quite as nice as Camel's due to the lack of the camel verbs like "to()". It'd be nice to provide an extended Observable<T> interface which adds more of Camel's DSL in there too; so you can still use things the RX way; but can also reuse the camel DSL too (in a typesafe way). e.g. something like this{code}// Observable comes from RX; it'd be nice to have a camel extended version so we can add camel DSL stuff in there like to() etc....CamelStream<Order> orders = rx.stream("seda:orders", Order.class); // now lets filter and map using Java 8orders.  filter(order -> order.getAmount() > 100.0).  map(order -> order.getId()).  to("activemq:MyQueue");{code} New Feature create an extension of the RX Observable<T> to add more of the Camel DSL in there (e.g. to() or to go back to the general camel DSL) with Camel RX and java 8 we can do some nice lambdas and typesafe filtering and transformation:{code}ReactiveCamel rx = new ReactiveCamel(camelContext);Observable<Order> observable = rx.toObservable("seda:orders", Order.class); // now lets filter and map using Java 8Observable<String> largeOrderIds = observable.  filter(order -> order.getAmount() > 100.0).  map(order -> order.getId()); rx.sendTo(observable, "activemq:MyQueue");{code}however the DSL isn't quite as nice as Camel's due to the lack of the camel verbs like "to()". It'd be nice to provide an extended Observable<T> interface which adds more of Camel's DSL in there too; so you can still use things the RX way; but can also reuse the camel DSL too (in a typesafe way). e.g. something like this{code}// Observable comes from RX; it'd be nice to have a camel extended version so we can add camel DSL stuff in there like to() etc....CamelStream<Order> orders = rx.stream("seda:orders", Order.class); // now lets filter and map using Java 8orders.  filter(order -> order.getAmount() > 100.0).  map(order -> order.getId()).  to("activemq:MyQueue");{code}
CAMEL-7828 Support the pass the exchange as the parameter to @PreConsumed and @Consumed method User may need to use the exchange to update the entity bean's property.http://camel.465427.n5.nabble.com/Consumed-td5756556.html New Feature Support the pass the exchange as the parameter to @PreConsumed and @Consumed method User may need to use the exchange to update the entity bean's property.http://camel.465427.n5.nabble.com/Consumed-td5756556.html
CAMEL-7827 When using CXFRS with simple HTTP api, variable replacement should be available I am calling an endpoint using cxfrs client with the http api. So I have something like that in the DSL : .... .setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(true)) .setHeader(Exchange.HTTP_PATH, simple("/endpoint/${header.myHeader}")) .setHeader(Exchange.HTTP_METHOD, constant(POST)) .to("cxfrs:bean:myClient") .... This usually works fine. I had a somewhat nasty error when someone did a copy paste of my server, with the variable substitution style (something like /endpoint/{myVariable}) at that point, ${header.myHeader} resolved to {myVariable}, thus the url the client will try to resolve is  /endpoint/{myVariable}. When trying to parse this URL, CXF will not be happy, since there is no value to replace what it thinks to be a variable, and will throw an IllegalArgumentException with message Unresolved variables; only 0 value(s) given for 1 unique variable(s). After looking a bit in the code, I understood better what happens. In order to avoid that, it would be nice to use the mechanism of CXF to replace variables in URI. In the DSL, we would have something like : .... .setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(true)) .setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, simple("[${header.myHeader}]")) .setHeader(Exchange.HTTP_PATH, constant("/endpoint/{myVariable}")) .setHeader(Exchange.HTTP_METHOD, constant("POST")) .to("cxfrs:bean:myClient") ....  Improvement When using CXFRS with simple HTTP api, variable replacement should be available I am calling an endpoint using cxfrs client with the http api. So I have something like that in the DSL : .... .setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(true)) .setHeader(Exchange.HTTP_PATH, simple("/endpoint/${header.myHeader}")) .setHeader(Exchange.HTTP_METHOD, constant(POST)) .to("cxfrs:bean:myClient") .... This usually works fine. I had a somewhat nasty error when someone did a copy paste of my server, with the variable substitution style (something like /endpoint/{myVariable}) at that point, ${header.myHeader} resolved to {myVariable}, thus the url the client will try to resolve is  /endpoint/{myVariable}. When trying to parse this URL, CXF will not be happy, since there is no value to replace what it thinks to be a variable, and will throw an IllegalArgumentException with message Unresolved variables; only 0 value(s) given for 1 unique variable(s). After looking a bit in the code, I understood better what happens. In order to avoid that, it would be nice to use the mechanism of CXF to replace variables in URI. In the DSL, we would have something like : .... .setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(true)) .setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, simple("[${header.myHeader}]")) .setHeader(Exchange.HTTP_PATH, constant("/endpoint/{myVariable}")) .setHeader(Exchange.HTTP_METHOD, constant("POST")) .to("cxfrs:bean:myClient") .... 
CAMEL-7813 Make camel-jms more robust for replyTo When a JMS queue is used as a camel consumer for a route it may well be one of possibly many intermediate stops in a chain of processing.  If the previous processing step itself used Camel to route the message, then both the JMS replyTo and the camel-header JMSReplyTo will both be populated with the same value.  This will cause an infinite loop.Of course, this is in some sense a developer error, but it is a pain to constantly add code to clear the camel JMSReplyTo header if it equals the destination.  This should probably be internal to the camel-jms component itself. Improvement Make camel-jms more robust for replyTo When a JMS queue is used as a camel consumer for a route it may well be one of possibly many intermediate stops in a chain of processing.  If the previous processing step itself used Camel to route the message, then both the JMS replyTo and the camel-header JMSReplyTo will both be populated with the same value.  This will cause an infinite loop.Of course, this is in some sense a developer error, but it is a pain to constantly add code to clear the camel JMSReplyTo header if it equals the destination.  This should probably be internal to the camel-jms component itself.
CAMEL-7809 Quartz PollConsumerScheduler in a cluster tries to create duplicate triggers, fails I tested the patch developed in CAMEL-7663 and ran into another issue that prevents the CamelContext from starting up. The setup is the same as described in CAMEL-7663.Upon startup I get following exception from Quartz on at least one cluster node:{code}13:23:36|INFO |component.quartz2.QuartzComponent|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Shutting down scheduler. (will wait for all jobs to complete first.)13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 shutting down.13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 paused.13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler unregistered from name 'quartz:type=QuartzScheduler,name=IPP_Integration_Scheduler-emerald-integration-web,instance=fra...1410348212901' in the local MBeanServer.2014-09-10-13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 shutdown complete.13:23:36|ERROR|component.servletlistener.CamelServletContextListener|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Error starting CamelContext.org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'scheduler.fax.in' and group: 'QuartzScheduledPollConsumerScheduler', because one already exists with this identification.	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1179)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$2.executeVoid(JobStoreSupport.java:1063)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3703)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3701)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3787)	at org.quartz.impl.jdbcjobstore.JobStoreTX.executeInLock(JobStoreTX.java:93)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:1058)	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886)	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249)	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler.doStart(QuartzScheduledPollConsumerScheduler.java:187)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)	at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:499)	at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:640)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2042)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2336)	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2272)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2202)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)	at org.apache.camel.component.servletlistener.CamelServletContextListener.contextInitialized(CamelServletContextListener.java:179)	at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run(EventsManager.java:661)	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)	at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:120)	at weblogic.servlet.provider.WlsSubjectHandle.run(WlsSubjectHandle.java:57)	at weblogic.servlet.internal.EventsManager.executeContextListener(EventsManager.java:241)	at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:198)	at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:183)	at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1783)	at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:2807)	at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1661)	at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:822)	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:360)	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:356)	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)	at weblogic.application.internal.ExtensibleModuleWrapper.start(ExtensibleModuleWrapper.java:138)	at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:124)	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:213)	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:208)	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)	at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:70)	at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:24)	at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:729)	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)	at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:258)	at weblogic.application.internal.EarDeployment.activate(EarDeployment.java:61)	at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:165)	at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:80)	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:586)	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:148)	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:114)	at weblogic.deploy.internal.targetserver.operations.StartOperation.doCommit(StartOperation.java:151)	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:339)	at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:846)	at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1275)	at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:442)	at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:176)	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195)	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13)	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68)	at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:550)	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:295)	at weblogic.work.ExecuteThread.run(ExecuteThread.java:254){code}I have started working on a fix that adopt the approach for clustering found in {{QuartzEndpoint}} to {{QuartzSchedulerPollConsumerScheduler}}.The patch is attached and I am asking for feedback. Improvement Quartz PollConsumerScheduler in a cluster tries to create duplicate triggers, fails I tested the patch developed in CAMEL-7663 and ran into another issue that prevents the CamelContext from starting up. The setup is the same as described in CAMEL-7663.Upon startup I get following exception from Quartz on at least one cluster node:{code}13:23:36|INFO |component.quartz2.QuartzComponent|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Shutting down scheduler. (will wait for all jobs to complete first.)13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 shutting down.13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 paused.13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler unregistered from name 'quartz:type=QuartzScheduler,name=IPP_Integration_Scheduler-emerald-integration-web,instance=fra...1410348212901' in the local MBeanServer.2014-09-10-13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 shutdown complete.13:23:36|ERROR|component.servletlistener.CamelServletContextListener|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Error starting CamelContext.org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'scheduler.fax.in' and group: 'QuartzScheduledPollConsumerScheduler', because one already exists with this identification.	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1179)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$2.executeVoid(JobStoreSupport.java:1063)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3703)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3701)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3787)	at org.quartz.impl.jdbcjobstore.JobStoreTX.executeInLock(JobStoreTX.java:93)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:1058)	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886)	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249)	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler.doStart(QuartzScheduledPollConsumerScheduler.java:187)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)	at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:499)	at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:640)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2042)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2336)	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2272)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2202)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)	at org.apache.camel.component.servletlistener.CamelServletContextListener.contextInitialized(CamelServletContextListener.java:179)	at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run(EventsManager.java:661)	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)	at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:120)	at weblogic.servlet.provider.WlsSubjectHandle.run(WlsSubjectHandle.java:57)	at weblogic.servlet.internal.EventsManager.executeContextListener(EventsManager.java:241)	at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:198)	at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:183)	at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1783)	at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:2807)	at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1661)	at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:822)	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:360)	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:356)	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)	at weblogic.application.internal.ExtensibleModuleWrapper.start(ExtensibleModuleWrapper.java:138)	at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:124)	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:213)	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:208)	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)	at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:70)	at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:24)	at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:729)	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)	at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:258)	at weblogic.application.internal.EarDeployment.activate(EarDeployment.java:61)	at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:165)	at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:80)	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:586)	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:148)	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:114)	at weblogic.deploy.internal.targetserver.operations.StartOperation.doCommit(StartOperation.java:151)	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:339)	at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:846)	at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1275)	at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:442)	at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:176)	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195)	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13)	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68)	at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:550)	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:295)	at weblogic.work.ExecuteThread.run(ExecuteThread.java:254){code}I have started working on a fix that adopt the approach for clustering found in {{QuartzEndpoint}} to {{QuartzSchedulerPollConsumerScheduler}}.The patch is attached and I am asking for feedback.
CAMEL-7808 camel-boon json parser I have been playing around the Boon (http://richardhightower.github.io/site/Boon/Welcome.html) and decided to write a data formatter for the JSON side.Repo: https://github.com/garethahealy/camel-boonThis is my first contribution, so be interesting to see if this is needed/wanted/etc New Feature camel-boon json parser I have been playing around the Boon (http://richardhightower.github.io/site/Boon/Welcome.html) and decided to write a data formatter for the JSON side.Repo: https://github.com/garethahealy/camel-boonThis is my first contribution, so be interesting to see if this is needed/wanted/etc
CAMEL-7807 Updated default Spring version to 4.0.x Camel 2.14-SNAPSHOT already supports Spring 4.0.x, and camel-spring-test only support Spring 4.0.x. It's time to change the default spring version to 4.0.x. Task Updated default Spring version to 4.0.x Camel 2.14-SNAPSHOT already supports Spring 4.0.x, and camel-spring-test only support Spring 4.0.x. It's time to change the default spring version to 4.0.x.
CAMEL-7804 MessageHelper - dump message for logging should catch throwable For example if creating some exception to be logged and the message payload causes some problem, like OOME etc, then we should be resilient to this so the caused exception can be created and logged.{code}Caused by: java.lang.OutOfMemoryError: Java heap space    at java.util.Arrays.copyOf(Arrays.java:2367)    at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:130)    at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:114)    at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:415)    at java.lang.StringBuilder.append(StringBuilder.java:132)    at java.lang.StringBuilder.append(StringBuilder.java:128)    at java.util.AbstractMap.toString(AbstractMap.java:523)    at java.lang.String.valueOf(String.java:2854)    at java.lang.StringBuilder.append(StringBuilder.java:128)    at java.util.AbstractMap.toString(AbstractMap.java:523)    at java.lang.String.valueOf(String.java:2854)    at java.lang.StringBuilder.append(StringBuilder.java:128)    at org.apache.camel.processor.DefaultExchangeFormatter.format(DefaultExchangeFormatter.java:99)    at org.apache.camel.util.MessageHelper.doDumpMessageHistoryStacktrace(MessageHelper.java:475)    at org.apache.camel.util.MessageHelper.dumpMessageHistoryStacktrace(MessageHelper.java:425)    at org.apache.camel.processor.RedeliveryErrorHandler.logFailedDelivery(RedeliveryErrorHandler.java:990){code} Improvement MessageHelper - dump message for logging should catch throwable For example if creating some exception to be logged and the message payload causes some problem, like OOME etc, then we should be resilient to this so the caused exception can be created and logged.{code}Caused by: java.lang.OutOfMemoryError: Java heap space    at java.util.Arrays.copyOf(Arrays.java:2367)    at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:130)    at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:114)    at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:415)    at java.lang.StringBuilder.append(StringBuilder.java:132)    at java.lang.StringBuilder.append(StringBuilder.java:128)    at java.util.AbstractMap.toString(AbstractMap.java:523)    at java.lang.String.valueOf(String.java:2854)    at java.lang.StringBuilder.append(StringBuilder.java:128)    at java.util.AbstractMap.toString(AbstractMap.java:523)    at java.lang.String.valueOf(String.java:2854)    at java.lang.StringBuilder.append(StringBuilder.java:128)    at org.apache.camel.processor.DefaultExchangeFormatter.format(DefaultExchangeFormatter.java:99)    at org.apache.camel.util.MessageHelper.doDumpMessageHistoryStacktrace(MessageHelper.java:475)    at org.apache.camel.util.MessageHelper.dumpMessageHistoryStacktrace(MessageHelper.java:425)    at org.apache.camel.processor.RedeliveryErrorHandler.logFailedDelivery(RedeliveryErrorHandler.java:990){code}
CAMEL-7802 XML Signature: parameter for output character encoding and parent node via XPath Two  improvements for the xmlsec component concerning the XML Signature signer and verifier:- The output character encoding for the signer and verifier (if no character encoding is specified UTF-8 will be used as before) can be specified via the configuration parameter 'outputXmlEncoding'.- In the Enveloped XML Signature case, the parent node can be now specified via an XPATH expression (new parameter 'parentXpath'). This allows selecting the parent node in a more flexible way as before where the parent node was specified via local name and namespace. Improvement XML Signature: parameter for output character encoding and parent node via XPath Two  improvements for the xmlsec component concerning the XML Signature signer and verifier:- The output character encoding for the signer and verifier (if no character encoding is specified UTF-8 will be used as before) can be specified via the configuration parameter 'outputXmlEncoding'.- In the Enveloped XML Signature case, the parent node can be now specified via an XPATH expression (new parameter 'parentXpath'). This allows selecting the parent node in a more flexible way as before where the parent node was specified via local name and namespace.
CAMEL-7800 camel-swagger - Upgrade to swagger that is pure Java based We should upgrade swagger to their release that is pure java based, that is named 1.5 or something, but is not ready yet Improvement camel-swagger - Upgrade to swagger that is pure Java based We should upgrade swagger to their release that is pure java based, that is named 1.5 or something, but is not ready yet
CAMEL-7799 Clean up options of camel-netty4 and camel-netty4-http component We need to update some options to reflect the API change. Task Clean up options of camel-netty4 and camel-netty4-http component We need to update some options to reflect the API change.
CAMEL-7794 Topics support in camel-hazelcast As discussed in developer mailing list [1], we needed to add support for Hazelcast distributed topics in Camel. We provide a PR that addresses this [2].[1] http://camel.465427.n5.nabble.com/Topics-support-in-camel-hazelcast-td5756233.html[2] https://github.com/apache/camel/pull/263 Improvement Topics support in camel-hazelcast As discussed in developer mailing list [1], we needed to add support for Hazelcast distributed topics in Camel. We provide a PR that addresses this [2].[1] http://camel.465427.n5.nabble.com/Topics-support-in-camel-hazelcast-td5756233.html[2] https://github.com/apache/camel/pull/263
CAMEL-7792 JIRA component For Overlord (http://projectoverlord.io), we need to consume "events" from JIRA, as well as produce "actions". We're moving towards using Camel as a backbone for various capabilities, and as such are writing the endpoint functionality as new Camel components. I'd love to see this incorporated as another mainline Camel component.Work in progress:https://github.com/brmeyer/camel-jiraConsumer ideas:jira://newIssue (new tickets)jira://newComment (new comments on tickets)Producer ideas:jira://newComment (add comment to a ticket)Obviously, that's only a small portion of the capabilities. The JIRA API is extensive and opens a large variety of possibilities.It uses the Atlassian's jira-rest-java-client SDK (https://marketplace.atlassian.com/plugins/com.atlassian.jira.jira-rest-java-client), released under an Apache V2 license.Similar to what I did for camel-twitter, the Exchange payloads would be the SDK-provided objects themselves (Issue, Comment, etc.) New Feature JIRA component For Overlord (http://projectoverlord.io), we need to consume "events" from JIRA, as well as produce "actions". We're moving towards using Camel as a backbone for various capabilities, and as such are writing the endpoint functionality as new Camel components. I'd love to see this incorporated as another mainline Camel component.Work in progress:https://github.com/brmeyer/camel-jiraConsumer ideas:jira://newIssue (new tickets)jira://newComment (new comments on tickets)Producer ideas:jira://newComment (add comment to a ticket)Obviously, that's only a small portion of the capabilities. The JIRA API is extensive and opens a large variety of possibilities.It uses the Atlassian's jira-rest-java-client SDK (https://marketplace.atlassian.com/plugins/com.atlassian.jira.jira-rest-java-client), released under an Apache V2 license.Similar to what I did for camel-twitter, the Exchange payloads would be the SDK-provided objects themselves (Issue, Comment, etc.)
CAMEL-7791 Karaf command completers does not work When using the karaf commands with Camel, and use the tab completors for camel context names or routes then they dont work. Seeing in the logs we get this error{code}2014-09-07 16:33:50,138 | WARN  | l Console Thread | CamelControllerImpl              | nds.internal.CamelControllerImpl   64 | 61 - org.apache.camel.karaf.camel-karaf-commands - 2.14.0.SNAPSHOT | Cannot retrieve the list of Camel contexts.java.lang.IllegalStateException: Invalid BundleContext.	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:425)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.camel.karaf.commands.internal.CamelControllerImpl.getCamelContexts(CamelControllerImpl.java:52)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.camel.karaf.commands.completers.CamelContextCompleter.complete(CamelContextCompleter.java:33)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.karaf.shell.console.completer.ArgumentCompleter.complete(ArgumentCompleter.java:310)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter$Completion.complete(AggregateCompleter.java:86)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter.complete(AggregateCompleter.java:51)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.CommandsCompleter.complete(CommandsCompleter.java:67)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.CompleterAsCompletor.complete(CompleterAsCompletor.java:32)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.complete(ConsoleReader.java:3261)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2621)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2269)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.readAndParseCommand(Console.java:249)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.run(Console.java:180)[14:org.apache.karaf.shell.console:2.3.7]	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]2014-09-07 16:33:51,139 | WARN  | l Console Thread | CamelControllerImpl              | nds.internal.CamelControllerImpl   64 | 61 - org.apache.camel.karaf.camel-karaf-commands - 2.14.0.SNAPSHOT | Cannot retrieve the list of Camel contexts.java.lang.IllegalStateException: Invalid BundleContext.	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:425)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.camel.karaf.commands.internal.CamelControllerImpl.getCamelContexts(CamelControllerImpl.java:52)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.camel.karaf.commands.completers.CamelContextCompleter.complete(CamelContextCompleter.java:33)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.karaf.shell.console.completer.ArgumentCompleter.complete(ArgumentCompleter.java:310)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter$Completion.complete(AggregateCompleter.java:86)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter.complete(AggregateCompleter.java:51)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.CommandsCompleter.complete(CommandsCompleter.java:67)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.CompleterAsCompletor.complete(CompleterAsCompletor.java:32)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.complete(ConsoleReader.java:3261)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2621)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2269)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.readAndParseCommand(Console.java:249)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.run(Console.java:180)[14:org.apache.karaf.shell.console:2.3.7]	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]{code} New Feature Karaf command completers does not work When using the karaf commands with Camel, and use the tab completors for camel context names or routes then they dont work. Seeing in the logs we get this error{code}2014-09-07 16:33:50,138 | WARN  | l Console Thread | CamelControllerImpl              | nds.internal.CamelControllerImpl   64 | 61 - org.apache.camel.karaf.camel-karaf-commands - 2.14.0.SNAPSHOT | Cannot retrieve the list of Camel contexts.java.lang.IllegalStateException: Invalid BundleContext.	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:425)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.camel.karaf.commands.internal.CamelControllerImpl.getCamelContexts(CamelControllerImpl.java:52)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.camel.karaf.commands.completers.CamelContextCompleter.complete(CamelContextCompleter.java:33)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.karaf.shell.console.completer.ArgumentCompleter.complete(ArgumentCompleter.java:310)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter$Completion.complete(AggregateCompleter.java:86)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter.complete(AggregateCompleter.java:51)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.CommandsCompleter.complete(CommandsCompleter.java:67)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.CompleterAsCompletor.complete(CompleterAsCompletor.java:32)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.complete(ConsoleReader.java:3261)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2621)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2269)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.readAndParseCommand(Console.java:249)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.run(Console.java:180)[14:org.apache.karaf.shell.console:2.3.7]	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]2014-09-07 16:33:51,139 | WARN  | l Console Thread | CamelControllerImpl              | nds.internal.CamelControllerImpl   64 | 61 - org.apache.camel.karaf.camel-karaf-commands - 2.14.0.SNAPSHOT | Cannot retrieve the list of Camel contexts.java.lang.IllegalStateException: Invalid BundleContext.	at org.apache.felix.framework.BundleContextImpl.checkValidity(BundleContextImpl.java:514)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.felix.framework.BundleContextImpl.getServiceReferences(BundleContextImpl.java:425)[org.apache.felix.framework-4.0.3.jar:]	at org.apache.camel.karaf.commands.internal.CamelControllerImpl.getCamelContexts(CamelControllerImpl.java:52)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.camel.karaf.commands.completers.CamelContextCompleter.complete(CamelContextCompleter.java:33)[61:org.apache.camel.karaf.camel-karaf-commands:2.14.0.SNAPSHOT]	at org.apache.karaf.shell.console.completer.ArgumentCompleter.complete(ArgumentCompleter.java:310)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter$Completion.complete(AggregateCompleter.java:86)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.AggregateCompleter.complete(AggregateCompleter.java:51)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.completer.CommandsCompleter.complete(CommandsCompleter.java:67)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.CompleterAsCompletor.complete(CompleterAsCompletor.java:32)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.complete(ConsoleReader.java:3261)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2621)[14:org.apache.karaf.shell.console:2.3.7]	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2269)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.readAndParseCommand(Console.java:249)[14:org.apache.karaf.shell.console:2.3.7]	at org.apache.karaf.shell.console.jline.Console.run(Console.java:180)[14:org.apache.karaf.shell.console:2.3.7]	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]{code}
CAMEL-7790 Rest DSL - Add karaf commands to list the rest services We can have a karaf command to list the rest services from the rest registry, such as when you use the rest DSL. New Feature Rest DSL - Add karaf commands to list the rest services We can have a karaf command to list the rest services from the rest registry, such as when you use the rest DSL.
CAMEL-7788 Support for rfc 5424/5425/6587 in syslog component We got a PR for thishttps://github.com/apache/camel/pull/166 New Feature Support for rfc 5424/5425/6587 in syslog component We got a PR for thishttps://github.com/apache/camel/pull/166
CAMEL-7787 Multicast - Should defer UoW done until after the aggregate has been done See nabblehttp://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-before-aggregation-in-Multicast-involving-huge-data-tp5756092.htmlIn the multicast/splitter we should defer the UoW done to *after* the aggregate has been called, as in the nabble example, the stream cache overflow to disk would have deleted the file etc. Improvement Multicast - Should defer UoW done until after the aggregate has been done See nabblehttp://camel.465427.n5.nabble.com/Stream-Cache-spool-file-deletion-before-aggregation-in-Multicast-involving-huge-data-tp5756092.htmlIn the multicast/splitter we should defer the UoW done to *after* the aggregate has been called, as in the nabble example, the stream cache overflow to disk would have deleted the file etc.
CAMEL-7783 Camel ConsumerWSAEndpointMappingRouteTest fails with JDK8 This test fails with the error shown below.  It looks like the expected message is getting routed to the mock:testActionMoreSpecificSkipped endpoint rather than mock:testActionMoreSpecific endpoint.Running org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 12.543 sec <<< FAILURE! - in org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTesttestWSAddressingResolveActionMoreSpecif(org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTest)  Time elapsed: 12.407 sec  <<< FAILURE!java.lang.AssertionError: mock://testActionMoreSpecific Received message count 0, expected at least 1	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertTrue(MockEndpoint.java:1321)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:390)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif(ConsumerWSAEndpointMappingRouteTest.java:142)Results :Failed tests:   ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif:142 mock://testActionMoreSpecific Received message count 0, expected at least 1Tests run: 1, Failures: 1, Errors: 0, Skipped: 0 Test Camel ConsumerWSAEndpointMappingRouteTest fails with JDK8 This test fails with the error shown below.  It looks like the expected message is getting routed to the mock:testActionMoreSpecificSkipped endpoint rather than mock:testActionMoreSpecific endpoint.Running org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 12.543 sec <<< FAILURE! - in org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTesttestWSAddressingResolveActionMoreSpecif(org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTest)  Time elapsed: 12.407 sec  <<< FAILURE!java.lang.AssertionError: mock://testActionMoreSpecific Received message count 0, expected at least 1	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertTrue(MockEndpoint.java:1321)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:390)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif(ConsumerWSAEndpointMappingRouteTest.java:142)Results :Failed tests:   ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif:142 mock://testActionMoreSpecific Received message count 0, expected at least 1Tests run: 1, Failures: 1, Errors: 0, Skipped: 0
CAMEL-7781 Create new PostgreSQL async notifications component Create a new component which allows for sending and receiving PostgreSQL's async notifications using the pgjdbc-ng driver.  New Feature Create new PostgreSQL async notifications component Create a new component which allows for sending and receiving PostgreSQL's async notifications using the pgjdbc-ng driver. 
CAMEL-7780 ManagedCamelContext - Add operation to check if you can send to an endpoint Some endpoints do not support a producer such as a timer.We need a JMX operation on managed camelcontext so you can check for that, instead of getting a nasty stacktrace about cannot create producer if you try to send to the endpoint. Improvement ManagedCamelContext - Add operation to check if you can send to an endpoint Some endpoints do not support a producer such as a timer.We need a JMX operation on managed camelcontext so you can check for that, instead of getting a nasty stacktrace about cannot create producer if you try to send to the endpoint.
CAMEL-7777 GitHub component For Overlord (http://projectoverlord.io), we need to consume "events" from GitHub, as well as produce "actions".  We're moving towards using Camel as a backbone for various capabilities, and as such are writing the endpoint functionality as new Camel components.  I'd love to see this incorporated as another mainline Camel component.Work in progress:https://github.com/brmeyer/camel-githubConsumer ideas:github://pullRequest (new pull requests)github://pullRequestComment (new pull request comments)github://commit/[branch] (new commits)github://tag (new tags)Producer ideas:github://pullRequestComment/[pr #]Obviously, that's only a small portion of the capabilities.  The GitHub API is extensive and opens a large variety of possibilities.It uses the org.eclipse.egit.github.core SDK (https://github.com/eclipse/egit-github/tree/master/org.eclipse.egit.github.core), which is a part of Mylyn and licensed under the EPL.  So, there shouldn't be any reason why this would need to be restricted to Camel Extras.Similar to what I did for camel-twitter, the Exchange payloads would be the SDK-provided objects themselves (PullRequest, CommitComment, RepositoryTag, RepositoryCommit, etc.) New Feature GitHub component For Overlord (http://projectoverlord.io), we need to consume "events" from GitHub, as well as produce "actions".  We're moving towards using Camel as a backbone for various capabilities, and as such are writing the endpoint functionality as new Camel components.  I'd love to see this incorporated as another mainline Camel component.Work in progress:https://github.com/brmeyer/camel-githubConsumer ideas:github://pullRequest (new pull requests)github://pullRequestComment (new pull request comments)github://commit/[branch] (new commits)github://tag (new tags)Producer ideas:github://pullRequestComment/[pr #]Obviously, that's only a small portion of the capabilities.  The GitHub API is extensive and opens a large variety of possibilities.It uses the org.eclipse.egit.github.core SDK (https://github.com/eclipse/egit-github/tree/master/org.eclipse.egit.github.core), which is a part of Mylyn and licensed under the EPL.  So, there shouldn't be any reason why this would need to be restricted to Camel Extras.Similar to what I did for camel-twitter, the Exchange payloads would be the SDK-provided objects themselves (PullRequest, CommitComment, RepositoryTag, RepositoryCommit, etc.)
CAMEL-7776 updated dependency for camel-flatpack Flatpack itself is a bundle since version 3.4.X so there is no need to depend on servicemix bundle wrapping. Further flatpack is now available on mvn central.Dependency has to be updated in camel-flatpacks pom.xml:<!-- remove this dependency    <dependency>      <groupId>org.apache.servicemix.bundles</groupId>      <artifactId>org.apache.servicemix.bundles.flatpack</artifactId>      <version>${flatpack-bundle-version}</version>    </dependency>-->to:    <dependency>      <groupId>net.sf.flatpack</groupId>      <artifactId>flatpack</artifactId>      <version>3.4.2</version>    </dependency>Of course property for flatpack version should be moved into parent pom. Improvement updated dependency for camel-flatpack Flatpack itself is a bundle since version 3.4.X so there is no need to depend on servicemix bundle wrapping. Further flatpack is now available on mvn central.Dependency has to be updated in camel-flatpacks pom.xml:<!-- remove this dependency    <dependency>      <groupId>org.apache.servicemix.bundles</groupId>      <artifactId>org.apache.servicemix.bundles.flatpack</artifactId>      <version>${flatpack-bundle-version}</version>    </dependency>-->to:    <dependency>      <groupId>net.sf.flatpack</groupId>      <artifactId>flatpack</artifactId>      <version>3.4.2</version>    </dependency>Of course property for flatpack version should be moved into parent pom.
CAMEL-7774 Removed mistyped method - resloveStringParameter in EndpointHelper This method has a typo, and it was only used in camel-quartz components. Which was a mistake to add the method but that happens when people contribute PRs.We should remove the method, and use the existing API in the quartz components.{code}davsclaus:~/workspace/camel (master)/$ git grep "resloveStringParameter"camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java:    public static <T> T resloveStringParameter(CamelContext context, Stricomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:                    long interval = EndpointHelcomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:            String timeZone = EndpointHelper.recomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:            Long interval = EndpointHelper.reslcomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:            Integer counter = EndpointHelper.recomponents/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzEndpoint.java:                repeat = EndpointHelper.reslovcomponents/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzEndpoint.java:                interval = EndpointHelper.resl{code} Task Removed mistyped method - resloveStringParameter in EndpointHelper This method has a typo, and it was only used in camel-quartz components. Which was a mistake to add the method but that happens when people contribute PRs.We should remove the method, and use the existing API in the quartz components.{code}davsclaus:~/workspace/camel (master)/$ git grep "resloveStringParameter"camel-core/src/main/java/org/apache/camel/util/EndpointHelper.java:    public static <T> T resloveStringParameter(CamelContext context, Stricomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:                    long interval = EndpointHelcomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:            String timeZone = EndpointHelper.recomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:            Long interval = EndpointHelper.reslcomponents/camel-quartz/src/main/java/org/apache/camel/component/quartz/QuartzComponent.java:            Integer counter = EndpointHelper.recomponents/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzEndpoint.java:                repeat = EndpointHelper.reslovcomponents/camel-quartz2/src/main/java/org/apache/camel/component/quartz2/QuartzEndpoint.java:                interval = EndpointHelper.resl{code}
CAMEL-7770 maven warning: It is highly recommended to fix these problems because they threaten the stability of your build. [WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-reportincident:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 158, column 21[WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-restlet-jdbc:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 84, column 21[WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-spring-ws:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 85, column 12[WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-spring-security:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 76, column 21[WARNING] [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.[WARNING] [WARNING] For this reason, future Maven versions might no longer support building such malformed projects.[WARNING]  Task maven warning: It is highly recommended to fix these problems because they threaten the stability of your build. [WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-reportincident:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 158, column 21[WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-restlet-jdbc:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 84, column 21[WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-spring-ws:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 85, column 12[WARNING] [WARNING] Some problems were encountered while building the effective model for org.apache.camel:camel-example-spring-security:war:2.14-SNAPSHOT[WARNING] 'build.plugins.plugin.version' for org.mortbay.jetty:jetty-maven-plugin is missing. @ line 76, column 21[WARNING] [WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.[WARNING] [WARNING] For this reason, future Maven versions might no longer support building such malformed projects.[WARNING] 
CAMEL-7769 Mock - Allow to invoke a method while specifying an assertion Sometimes you want to setup an expression to invoke a method on a message body / exchange property or something, and then use the builder to assert that the result of the method call is equals to something. Improvement Mock - Allow to invoke a method while specifying an assertion Sometimes you want to setup an expression to invoke a method on a message body / exchange property or something, and then use the builder to assert that the result of the method call is equals to something.
CAMEL-7765 ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif fails with JDK8 This test fails with the following error:java.lang.AssertionError: mock://testActionMoreSpecific Received message count 0, expected at least 1	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertTrue(MockEndpoint.java:1321)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:390)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif(ConsumerWSAEndpointMappingRouteTest.java:138) Test ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif fails with JDK8 This test fails with the following error:java.lang.AssertionError: mock://testActionMoreSpecific Received message count 0, expected at least 1	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertTrue(MockEndpoint.java:1321)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:390)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.spring.ws.addressing.ConsumerWSAEndpointMappingRouteTest.testWSAddressingResolveActionMoreSpecif(ConsumerWSAEndpointMappingRouteTest.java:138)
CAMEL-7764 camel-cxf-transport has multiple test failures with JDK8 The following tests in camel-dxf-transport fail with JDK8:Tests in error:   CamelConduitTest.testCamelConduitConfiguration:70 » Runtime org.springframewor...  CamelDestinationTest.testCAMEL4073:279 » NoSuchField REFLECTION  CamelDestinationTest.testCamelDestinationConfiguration:75 » Runtime org.spring...  JaxWSCamelConduitTest.testAsyncInvocation:79->JaxWSCamelTestSupport.getSampleWSAsyncWithCXFAPI:127 » NoSuchField  JaxWSCamelConduitTest.testStart1:58->JaxWSCamelTestSupport.getSampleWS:111 » NoSuchField  JaxWSCamelConduitTest.testStart2:67->JaxWSCamelTestSupport.getSampleWSWithCXFAPI:119 » NoSuchField  JaxWSCamelConduitTest.testStart3:73->JaxWSCamelTestSupport.getSampleWS:111 » NoSuchField  JaxWSCamelDestinationTest.testDestinationContentType:53->JaxWSCamelTestSupport.publishSampleWS:136 » NoSuchFieldThey all have the same error, as shown below.   This requires updating the jaxb version.Running org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.254 sec <<< FAILURE! - in org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTesttestDestinationContentType(org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTest)  Time elapsed: 1.048 sec  <<< ERROR!java.lang.NoSuchFieldError: REFLECTION	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.<init>(RuntimeModelBuilder.java:93)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:455)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:303)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:142)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl$JAXBContextBuilder.build(JAXBContextImpl.java:1174)	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:162)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:247)	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:234)	at javax.xml.bind.ContextFinder.find(ContextFinder.java:441)	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:641)	at org.apache.cxf.common.jaxb.JAXBContextCache$2.run(JAXBContextCache.java:347)	at org.apache.cxf.common.jaxb.JAXBContextCache$2.run(JAXBContextCache.java:345)	at java.security.AccessController.doPrivileged(Native Method)	at org.apache.cxf.common.jaxb.JAXBContextCache.createContext(JAXBContextCache.java:345)	at org.apache.cxf.common.jaxb.JAXBContextCache.getCachedContextAndSchemas(JAXBContextCache.java:246)	at org.apache.cxf.jaxb.JAXBDataBinding.createJAXBContextAndSchemas(JAXBDataBinding.java:470)	at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:325)	at org.apache.cxf.service.factory.AbstractServiceFactoryBean.initializeDataBindings(AbstractServiceFactoryBean.java:86)	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:467)	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:704)	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:527)	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:261)	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:215)	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:102)	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:159)	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211)	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:456)	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:334)	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:251)	at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderImpl.java:152)	at javax.xml.ws.Endpoint.publish(Endpoint.java:240)	at org.apache.camel.component.cxf.transport.JaxWSCamelTestSupport.publishSampleWS(JaxWSCamelTestSupport.java:136)	at org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTest.testDestinationContentType(JaxWSCamelDestinationTest.java:53) Test camel-cxf-transport has multiple test failures with JDK8 The following tests in camel-dxf-transport fail with JDK8:Tests in error:   CamelConduitTest.testCamelConduitConfiguration:70 >> Runtime org.springframewor...  CamelDestinationTest.testCAMEL4073:279 >> NoSuchField REFLECTION  CamelDestinationTest.testCamelDestinationConfiguration:75 >> Runtime org.spring...  JaxWSCamelConduitTest.testAsyncInvocation:79->JaxWSCamelTestSupport.getSampleWSAsyncWithCXFAPI:127 >> NoSuchField  JaxWSCamelConduitTest.testStart1:58->JaxWSCamelTestSupport.getSampleWS:111 >> NoSuchField  JaxWSCamelConduitTest.testStart2:67->JaxWSCamelTestSupport.getSampleWSWithCXFAPI:119 >> NoSuchField  JaxWSCamelConduitTest.testStart3:73->JaxWSCamelTestSupport.getSampleWS:111 >> NoSuchField  JaxWSCamelDestinationTest.testDestinationContentType:53->JaxWSCamelTestSupport.publishSampleWS:136 >> NoSuchFieldThey all have the same error, as shown below.   This requires updating the jaxb version.Running org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.254 sec <<< FAILURE! - in org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTesttestDestinationContentType(org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTest)  Time elapsed: 1.048 sec  <<< ERROR!java.lang.NoSuchFieldError: REFLECTION	at com.sun.xml.bind.v2.model.impl.RuntimeModelBuilder.<init>(RuntimeModelBuilder.java:93)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:455)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:303)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:142)	at com.sun.xml.bind.v2.runtime.JAXBContextImpl$JAXBContextBuilder.build(JAXBContextImpl.java:1174)	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:162)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:483)	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:247)	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:234)	at javax.xml.bind.ContextFinder.find(ContextFinder.java:441)	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:641)	at org.apache.cxf.common.jaxb.JAXBContextCache$2.run(JAXBContextCache.java:347)	at org.apache.cxf.common.jaxb.JAXBContextCache$2.run(JAXBContextCache.java:345)	at java.security.AccessController.doPrivileged(Native Method)	at org.apache.cxf.common.jaxb.JAXBContextCache.createContext(JAXBContextCache.java:345)	at org.apache.cxf.common.jaxb.JAXBContextCache.getCachedContextAndSchemas(JAXBContextCache.java:246)	at org.apache.cxf.jaxb.JAXBDataBinding.createJAXBContextAndSchemas(JAXBDataBinding.java:470)	at org.apache.cxf.jaxb.JAXBDataBinding.initialize(JAXBDataBinding.java:325)	at org.apache.cxf.service.factory.AbstractServiceFactoryBean.initializeDataBindings(AbstractServiceFactoryBean.java:86)	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.buildServiceFromClass(ReflectionServiceFactoryBean.java:467)	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.buildServiceFromClass(JaxWsServiceFactoryBean.java:704)	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:527)	at org.apache.cxf.wsdl.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:261)	at org.apache.cxf.jaxws.support.JaxWsServiceFactoryBean.create(JaxWsServiceFactoryBean.java:215)	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:102)	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:159)	at org.apache.cxf.jaxws.JaxWsServerFactoryBean.create(JaxWsServerFactoryBean.java:211)	at org.apache.cxf.jaxws.EndpointImpl.getServer(EndpointImpl.java:456)	at org.apache.cxf.jaxws.EndpointImpl.doPublish(EndpointImpl.java:334)	at org.apache.cxf.jaxws.EndpointImpl.publish(EndpointImpl.java:251)	at org.apache.cxf.jaxws.spi.ProviderImpl.createAndPublishEndpoint(ProviderImpl.java:152)	at javax.xml.ws.Endpoint.publish(Endpoint.java:240)	at org.apache.camel.component.cxf.transport.JaxWSCamelTestSupport.publishSampleWS(JaxWSCamelTestSupport.java:136)	at org.apache.camel.component.cxf.transport.JaxWSCamelDestinationTest.testDestinationContentType(JaxWSCamelDestinationTest.java:53)
CAMEL-7761 Setup the application context classloader of OSGiDefaultCamelContext We need to set the application context classloader with the bundle classloader when creating the OSGiDefaultCamelContext. Improvement Setup the application context classloader of OSGiDefaultCamelContext We need to set the application context classloader with the bundle classloader when creating the OSGiDefaultCamelContext.
CAMEL-7759 Using the TCCL as the default value of ApplicationContextClassLoader in DefaultCamelContext Normally, we just the set the TCCL with the classloader which we want to use to load the application, as camel always try to setup the right ApplicationContextClassLoader with Spring or Blueprint, it should be OK if we use the TCCL as the default value of camel ApplicationContextClassLoader. Improvement Using the TCCL as the default value of ApplicationContextClassLoader in DefaultCamelContext Normally, we just the set the TCCL with the classloader which we want to use to load the application, as camel always try to setup the right ApplicationContextClassLoader with Spring or Blueprint, it should be OK if we use the TCCL as the default value of camel ApplicationContextClassLoader.
CAMEL-7756 org.apache.camel.issues.OnCompletionIssueTest fails because of order dependency This test fails intermittently with the error below as it is using MockEndpoint.expectedBodiesReceived() even though it uses parallelProcessing() in the route.  The test should use MockEndpoint.expectedBodiesReceivedInAnyOrder() insteadjava.lang.AssertionError: mock://complete Body of message: 0. Expected: <finish> but was: <stop>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)	at org.apache.camel.component.mock.MockEndpoint$5.run(MockEndpoint.java:628)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:394)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:343)	at org.apache.camel.issues.OnCompletionIssueTest.testOnCompletionIssue(OnCompletionIssueTest.java:39) Test org.apache.camel.issues.OnCompletionIssueTest fails because of order dependency This test fails intermittently with the error below as it is using MockEndpoint.expectedBodiesReceived() even though it uses parallelProcessing() in the route.  The test should use MockEndpoint.expectedBodiesReceivedInAnyOrder() insteadjava.lang.AssertionError: mock://complete Body of message: 0. Expected: <finish> but was: <stop>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)	at org.apache.camel.component.mock.MockEndpoint$5.run(MockEndpoint.java:628)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:394)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:343)	at org.apache.camel.issues.OnCompletionIssueTest.testOnCompletionIssue(OnCompletionIssueTest.java:39)
CAMEL-7753 xslt component - Store warning/errors etc as exchange properties so end users can get hold of those If you use xslt:message to output an error and terminate the xslt processing, then you cannot get hold of the message, just some generic exception about xslt terminated.We should capture those warnings/error/fatal error messages the listener emits and store on exchange so end users can get hold of those details.An examplehttp://www.w3schools.com/xsl/el_message.aspWe should be able to get that artist is empty text message. Improvement xslt component - Store warning/errors etc as exchange properties so end users can get hold of those If you use xslt:message to output an error and terminate the xslt processing, then you cannot get hold of the message, just some generic exception about xslt terminated.We should capture those warnings/error/fatal error messages the listener emits and store on exchange so end users can get hold of those details.An examplehttp://www.w3schools.com/xsl/el_message.aspWe should be able to get that artist is empty text message.
CAMEL-7749 JmsTXForceShutdownIssueTest#testTXForceShutdown should be ignored This test was previously ignored.  It looks like the @Ignore was commented out by accident as part of another change. Test JmsTXForceShutdownIssueTest#testTXForceShutdown should be ignored This test was previously ignored.  It looks like the @Ignore was commented out by accident as part of another change.
CAMEL-7748 org.apache.camel.component.twitter.UriConfigurationTest is failing This test fails with the error below.  I think Clause missed this on the fix for CAMEL-7495.java.lang.AssertionError: null	at org.junit.Assert.fail(Assert.java:86)	at org.junit.Assert.assertTrue(Assert.java:41)	at org.junit.Assert.assertTrue(Assert.java:52)	at org.apache.camel.component.twitter.UriConfigurationTest.testComponentConfiguration(UriConfigurationTest.java:77) Test org.apache.camel.component.twitter.UriConfigurationTest is failing This test fails with the error below.  I think Clause missed this on the fix for CAMEL-7495.java.lang.AssertionError: null	at org.junit.Assert.fail(Assert.java:86)	at org.junit.Assert.assertTrue(Assert.java:41)	at org.junit.Assert.assertTrue(Assert.java:52)	at org.apache.camel.component.twitter.UriConfigurationTest.testComponentConfiguration(UriConfigurationTest.java:77)
CAMEL-7747 Support Karaf 3.0.1 which uses an older jline version We should use a broader jline import version so we can support jline 2.11 also. As that version is used by Karaf 3.0.x and newer Karaf releases may be using jline 2.12.  Task Support Karaf 3.0.1 which uses an older jline version We should use a broader jline import version so we can support jline 2.11 also. As that version is used by Karaf 3.0.x and newer Karaf releases may be using jline 2.12. 
CAMEL-7746 Use Spring 4.x as default We should switch to use spring 4.x as the default in Camel 2.15 onwards.Spring 3.x is still supported by not the default version.For OSGi users on Karaf they can still use spring 3.x with Camel 2.15 etc. Task Use Spring 4.x as default We should switch to use spring 4.x as the default in Camel 2.15 onwards.Spring 3.x is still supported by not the default version.For OSGi users on Karaf they can still use spring 3.x with Camel 2.15 etc.
CAMEL-7744 xslt component - Allow to configure custom error listener Allow to configure using a custom error listener. Improvement xslt component - Allow to configure custom error listener Allow to configure using a custom error listener.
CAMEL-7743 component docs - wrong hdfs2 link In Camel component documentation (http://camel.apache.org/components.html), both hdfs and hdfs2 links points to http://camel.apache.org/hdfs.html.hdfs2 should probably lead to http://camel.apache.org/hdfs2.html. Task component docs - wrong hdfs2 link In Camel component documentation (http://camel.apache.org/components.html), both hdfs and hdfs2 links points to http://camel.apache.org/hdfs.html.hdfs2 should probably lead to http://camel.apache.org/hdfs2.html.
CAMEL-7741 itest for sanitiycheck Camel running on Karaf 2.x and 3.x We should have a sanity check in itests that check that Camel can deploy and run on karaf 2.x / 3.0.x. Test itest for sanitiycheck Camel running on Karaf 2.x and 3.x We should have a sanity check in itests that check that Camel can deploy and run on karaf 2.x / 3.0.x.
CAMEL-7740 Allow pool prefill configuration for SjmsProducer Provide new option that allows configuring if producer pool should be prefilled or created on demand as exchanges are processed. Improvement Allow pool prefill configuration for SjmsProducer Provide new option that allows configuring if producer pool should be prefilled or created on demand as exchanges are processed.
CAMEL-7737 camel-fop - Fails unit test There is an unit test that fails in camel-fop on master Test camel-fop - Fails unit test There is an unit test that fails in camel-fop on master
CAMEL-7734 Replace custom pool implementation by commons-pool Apache commons-pool library provides solid implementation of object pooling. Furthermore, extra features can be used to validate connections, producers and consumers. Switching to this library also removes the necessity of maintaining custom code to handle different pool implementations.   Improvement Replace custom pool implementation by commons-pool Apache commons-pool library provides solid implementation of object pooling. Furthermore, extra features can be used to validate connections, producers and consumers. Switching to this library also removes the necessity of maintaining custom code to handle different pool implementations.  
CAMEL-7728 Setup the TCCL before create the instance from the BaseResolver It could be useful for creating the instance if we can set up the TCCL with the camel application context class loader in the OSGi world. Improvement Setup the TCCL before create the instance from the BaseResolver It could be useful for creating the instance if we can set up the TCCL with the camel application context class loader in the OSGi world.
CAMEL-7727 Unify MessageProducerResources handling into SjmsProducer InOnlyProducer and InOutProducer have similar code for borrowing MessageProducerResources from pool but different behavior for handling errors associated to it. Also InOnlyProducer does not apply the responsetimeout parameter as timeout for borrowing producer from pool. Moving this logic and error handling to SjmsProducer can remove duplicate code and provide same behavior for both classes. Improvement Unify MessageProducerResources handling into SjmsProducer InOnlyProducer and InOutProducer have similar code for borrowing MessageProducerResources from pool but different behavior for handling errors associated to it. Also InOnlyProducer does not apply the responsetimeout parameter as timeout for borrowing producer from pool. Moving this logic and error handling to SjmsProducer can remove duplicate code and provide same behavior for both classes.
CAMEL-7726 Fix the test failures of spring4 profile There are lots of unit test failed due to the camel-test-spring3 doesn't support the Spring4. When using Spring4 profile, these components doesn't pick up the camel-test-spring which support the spring4 test out of box. Task Fix the test failures of spring4 profile There are lots of unit test failed due to the camel-test-spring3 doesn't support the Spring4. When using Spring4 profile, these components doesn't pick up the camel-test-spring which support the spring4 test out of box.
CAMEL-7725 camel-scala - Startup order not available in Scala DSL The [{{startupOrder}}|http://camel.apache.org/configuring-route-startup-ordering-and-autostartup.html] method is missing from the Scala DSL.{code:title=MyRoute.scala}import org.apache.camel.scala.dsl.builder.RouteBuilderclass MyRoute extends RouteBuilder {  "direct:start" ==> {    startupOrder(1) // this is not available    to("mock:end")  }}{code}This is an important piece of functionality to have for any non-trivial route integration. Improvement camel-scala - Startup order not available in Scala DSL The [{{startupOrder}}|http://camel.apache.org/configuring-route-startup-ordering-and-autostartup.html] method is missing from the Scala DSL.{code:title=MyRoute.scala}import org.apache.camel.scala.dsl.builder.RouteBuilderclass MyRoute extends RouteBuilder {  "direct:start" ==> {    startupOrder(1) // this is not available    to("mock:end")  }}{code}This is an important piece of functionality to have for any non-trivial route integration.
CAMEL-7724 camel-bindy - Add support for boolean data type formatter See SOhttp://stackoverflow.com/questions/25366673/camel-bindy-set-default-value-for-boolean-fieldAnd this code should support boolean/Boolean typeshttp://camel.apache.org/maven/camel-2.11.0/camel-bindy/apidocs/src-html/org/apache/camel/dataformat/bindy/FormatFactory.html Improvement camel-bindy - Add support for boolean data type formatter See SOhttp://stackoverflow.com/questions/25366673/camel-bindy-set-default-value-for-boolean-fieldAnd this code should support boolean/Boolean typeshttp://camel.apache.org/maven/camel-2.11.0/camel-bindy/apidocs/src-html/org/apache/camel/dataformat/bindy/FormatFactory.html
CAMEL-7723 Support starting and stopping consumers and producers asynchronously Similar to jms component behavior, been able to start and stop consumers and producers asynchronously ensures that starting a route or stopping won't get blocked by trying to establish a connection to remote broker or running some sort of failover logic.  Improvement Support starting and stopping consumers and producers asynchronously Similar to jms component behavior, been able to start and stop consumers and producers asynchronously ensures that starting a route or stopping won't get blocked by trying to establish a connection to remote broker or running some sort of failover logic. 
CAMEL-7721 Support to setup the SaxParserFactory from the exchange property It could be handy if we can setup the SAXParserFactory from the exchange property. Improvement Support to setup the SaxParserFactory from the exchange property It could be handy if we can setup the SAXParserFactory from the exchange property.
CAMEL-7720 Support to set the DocumentBuilderFactory from exchange property It could be handy if we can let the end user setup the DocumentBuilderFactory from the exchange property. Improvement Support to set the DocumentBuilderFactory from exchange property It could be handy if we can let the end user setup the DocumentBuilderFactory from the exchange property.
CAMEL-7719 Set the XMLReader for the SAXSource in XmlConverter In this way can get the control of setting up the SAXParser to enable the security feature by default. Improvement Set the XMLReader for the SAXSource in XmlConverter In this way can get the control of setting up the SAXParser to enable the security feature by default.
CAMEL-7717 camel-jsch - Should throw UnsupportedOperationException when creating a consumer instead of causing a NPE This component does not support consumer so we should tell the user that. Improvement camel-jsch - Should throw UnsupportedOperationException when creating a consumer instead of causing a NPE This component does not support consumer so we should tell the user that.
CAMEL-7713 Set the Xerces SecurityManager for the DocumentBuilderFactory by default When use the xerces, we need to setup org.apache.xerces.util.SecurityManager by default. Improvement Set the Xerces SecurityManager for the DocumentBuilderFactory by default When use the xerces, we need to setup org.apache.xerces.util.SecurityManager by default.
CAMEL-7711 camel-servletlistener - Store created CamelContext on ServletContext attribute Seehttp://stackoverflow.com/questions/25345788/initializing-and-using-camel-without-springSo users can access the CamelContext from the servlet context. Improvement camel-servletlistener - Store created CamelContext on ServletContext attribute Seehttp://stackoverflow.com/questions/25345788/initializing-and-using-camel-without-springSo users can access the CamelContext from the servlet context.
CAMEL-7710 simple: Use standard {{ }} syntax to reference values in properties files (Spring DSL) I'm using Spring DSL. This is not very simple:{noformat}${body} == ${properties:version}{noformat}This is simpler:{noformat}${body} == {{maxDepth}}{noformat} Improvement simple: Use standard {{ }} syntax to reference values in properties files (Spring DSL) I'm using Spring DSL. This is not very simple:{noformat}${body} == ${properties:version}{noformat}This is simpler:{noformat}${body} == {{maxDepth}}{noformat}
CAMEL-7709 Camel-mustache - upgrade to a newer version Currently we use mustache-java version 0.8.15, but it's available version 0.8.16. Task Camel-mustache - upgrade to a newer version Currently we use mustache-java version 0.8.15, but it's available version 0.8.16.
CAMEL-7702 RoutePolicyFactory - To create and setup route policy easier If you want to setup a route policy for each route, then today, you need to setup this per route. Also its a shared instance, so you need to deal with the instance being used by different routes.By having a RoutePolicyFactory it creates a new instance per route, and also does this for all the routes. Then you only need to configure this once. Mind that this is useable for use-cases where you want to use the same set of route policies for all your routes.Though if the factory returns null, then no route policy is assigned to the route. New Feature RoutePolicyFactory - To create and setup route policy easier If you want to setup a route policy for each route, then today, you need to setup this per route. Also its a shared instance, so you need to deal with the instance being used by different routes.By having a RoutePolicyFactory it creates a new instance per route, and also does this for all the routes. Then you only need to configure this once. Mind that this is useable for use-cases where you want to use the same set of route policies for all your routes.Though if the factory returns null, then no route policy is assigned to the route.
CAMEL-7698 camel-spring - Remove the old osgi namespace handler We have a very old osgi namespace that we used at first for spring on osgi. But found a better way to reuse spring as the namespace.But the old osgi is still there in the codehttps://github.com/apache/camel/blob/master/components/camel-spring/src/main/resources/META-INF/spring.handlers#L20We could likely safely remove it today as nobody uses it. But f not we could keep it and remove it for 3.0.  Task camel-spring - Remove the old osgi namespace handler We have a very old osgi namespace that we used at first for spring on osgi. But found a better way to reuse spring as the namespace.But the old osgi is still there in the codehttps://github.com/apache/camel/blob/master/components/camel-spring/src/main/resources/META-INF/spring.handlers#L20We could likely safely remove it today as nobody uses it. But f not we could keep it and remove it for 3.0. 
CAMEL-7696 camel-metrics - Add a route policy to expose route stats as codehale metrics This allows end users to plugin and use codehale metrics for route statistics. These stats has some more details than what we have out of the box by Camel itself. And also allow users to reuse codehale tooling that can read these metrics. New Feature camel-metrics - Add a route policy to expose route stats as codehale metrics This allows end users to plugin and use codehale metrics for route statistics. These stats has some more details than what we have out of the box by Camel itself. And also allow users to reuse codehale tooling that can read these metrics.
CAMEL-7695 CamelContext - Allow to check if a service by its type has been added Sometimes you just need to know if a service by its time has been added as a service to CamelContext. This allows to store a shared service on the CamelContext and look it up by its type to get hold of the instance. Improvement CamelContext - Allow to check if a service by its type has been added Sometimes you just need to know if a service by its time has been added as a service to CamelContext. This allows to store a shared service on the CamelContext and look it up by its type to get hold of the instance.
CAMEL-7694 RestletGroovyIssueTest fails intermittently The RestletGroovyIssueTest.testRestletGroovy() fails intermittently with the error shown below.  It looks like it's just a race condition where sometimes assertMockEndpoinsSatisfied fires before everything else finishes.I'll submit a pull request with a fix.Error Messagemock://input Received message count. Expected: <10> but was: <9>Stacktracejava.lang.AssertionError: mock://input Received message count. Expected: <10> but was: <9>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)	at org.apache.camel.itest.restlet.example.RestletGroovyIssueTest.testRestletGroovy(RestletGroovyIssueTest.java:52) Test RestletGroovyIssueTest fails intermittently The RestletGroovyIssueTest.testRestletGroovy() fails intermittently with the error shown below.  It looks like it's just a race condition where sometimes assertMockEndpoinsSatisfied fires before everything else finishes.I'll submit a pull request with a fix.Error Messagemock://input Received message count. Expected: <10> but was: <9>Stacktracejava.lang.AssertionError: mock://input Received message count. Expected: <10> but was: <9>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)	at org.apache.camel.itest.restlet.example.RestletGroovyIssueTest.testRestletGroovy(RestletGroovyIssueTest.java:52)
CAMEL-7691 camel-serlvet - Potential NPE if no servlet name configured for osgi Lets make this a bit easier and avoid a NPE if people mis configure it. And also lets use CamelServlet as the default servlet name as we do in non osgi world. Improvement camel-serlvet - Potential NPE if no servlet name configured for osgi Lets make this a bit easier and avoid a NPE if people mis configure it. And also lets use CamelServlet as the default servlet name as we do in non osgi world.
CAMEL-7690 Rest DSL - Create blueprint based example We have a WAR example for Apache Tomcat etc.We should have a osgi example as well. Sub-task Rest DSL - Create blueprint based example We have a WAR example for Apache Tomcat etc.We should have a osgi example as well.
CAMEL-7689 Rest DSL - Swagger module should have SPI plugin to integrate with blueprint or other ways to discover Camel in the app / JVM Currently the module uses spring. But we should allow to blueprint / cdi / servlet etc to discover the Camel in the WAR / JVM.We could try using JMX discovery. But a bit of trick is that swagger has a model processor that scan POJOs and generate a swagger model of those. And if those POJOs are in another classloader, we need to allow swagger to see these classes to scan 'en. Or offer a scanner in camel-core we can use and return the data over JMX. Then we can support any Camel in the JVM and have the swagger module separated from the Camel app. Sub-task Rest DSL - Swagger module should have SPI plugin to integrate with blueprint or other ways to discover Camel in the app / JVM Currently the module uses spring. But we should allow to blueprint / cdi / servlet etc to discover the Camel in the WAR / JVM.We could try using JMX discovery. But a bit of trick is that swagger has a model processor that scan POJOs and generate a swagger model of those. And if those POJOs are in another classloader, we need to allow swagger to see these classes to scan 'en. Or offer a scanner in camel-core we can use and return the data over JMX. Then we can support any Camel in the JVM and have the swagger module separated from the Camel app.
CAMEL-7688 XPathBuilder initDefaultXPathFactory implementation incorrect The implementation of initDefaultXPathFactory uses instance and static variables to initialize a static XPathFactory then overrides it anyway.Looks like so old code that was never removed plus a bug where it's not using the implementation specified on the command line.I've also added a function to allow the default to be passed in, this allows the jvm deafult to be different from the XPathBuilder (saves having to set it on every xpath factory created). Improvement XPathBuilder initDefaultXPathFactory implementation incorrect The implementation of initDefaultXPathFactory uses instance and static variables to initialize a static XPathFactory then overrides it anyway.Looks like so old code that was never removed plus a bug where it's not using the implementation specified on the command line.I've also added a function to allow the default to be passed in, this allows the jvm deafult to be different from the XPathBuilder (saves having to set it on every xpath factory created).
CAMEL-7686 camel-jdbc - Fix this issue report about retriving generated keys See nabblehttp://camel.465427.n5.nabble.com/Camel-jdbc-snapshots-gt-SQLException-td5755058.html Improvement camel-jdbc - Fix this issue report about retriving generated keys See nabblehttp://camel.465427.n5.nabble.com/Camel-jdbc-snapshots-gt-SQLException-td5755058.html
CAMEL-7685 Migrate camel-netty-http to Netty 4.x We should migrate this to use Netty 4.x as we also have indicated we willhttp://camel.apache.org/netty-httpAlso there is some performance and best practices we should do as Norman talks about herehttps://twitter.com/normanmaurer/status/498922171658682369 Improvement Migrate camel-netty-http to Netty 4.x We should migrate this to use Netty 4.x as we also have indicated we willhttp://camel.apache.org/netty-httpAlso there is some performance and best practices we should do as Norman talks about herehttps://twitter.com/normanmaurer/status/498922171658682369
CAMEL-7683 Upgrade camel-hbase component to hbase 0.98.0-hadoop2 Hicamel-hbase uses a very old version of base (094.0). The latest version of base is 0.98 and so much has gone through and besides it uses hadoop version 2.4 as opposed to 1.2. I am currently working on an upgrade of this component, once happy I will submit a patch upgrade for you to review.Regards,Ayache Improvement Upgrade camel-hbase component to hbase 0.98.0-hadoop2 Hicamel-hbase uses a very old version of base (094.0). The latest version of base is 0.98 and so much has gone through and besides it uses hadoop version 2.4 as opposed to 1.2. I am currently working on an upgrade of this component, once happy I will submit a patch upgrade for you to review.Regards,Ayache
CAMEL-7682 bean DSL should support to set multiParameterArray option Camel [bean|http://camel.apache.org/bean.html] component has the  multiParameterArray option, but we cannot set this option with the bean DSL. Improvement bean DSL should support to set multiParameterArray option Camel [bean|http://camel.apache.org/bean.html] component has the  multiParameterArray option, but we cannot set this option with the bean DSL.
CAMEL-7681 Add Bulk Index mode to Elasticsearch component Hi,It would be nice if the ES component could support the bulk mode to index several documents in one row in a faster and more performant way.I propose a new operation named *BULK_INDEX*.The incoming body would be a *List* of any type that is already accepted (XContentBuilder, Map, byte[], String). Or simply a Collection may be, if a List is too narrow-minded.The result could be a *List of the id* of the successfully indexed documents.Have you any tips on the way you usely treat this kind of operation  New Feature Add Bulk Index mode to Elasticsearch component Hi,It would be nice if the ES component could support the bulk mode to index several documents in one row in a faster and more performant way.I propose a new operation named *BULK_INDEX*.The incoming body would be a *List* of any type that is already accepted (XContentBuilder, Map, byte[], String). Or simply a Collection may be, if a List is too narrow-minded.The result could be a *List of the id* of the successfully indexed documents.Have you any tips on the way you usely treat this kind of operation 
CAMEL-7680 Throw NPE when stopping if transport client is used Hi,When I stop my route, the component throws a NPE in the log. Considering the source code (ElasticsearchEndpoint class), it seems that the *node* field (Line 96) is not assigned when the *ip* parameter is set.StackTrace is attached. Improvement Throw NPE when stopping if transport client is used Hi,When I stop my route, the component throws a NPE in the log. Considering the source code (ElasticsearchEndpoint class), it seems that the *node* field (Line 96) is not assigned when the *ip* parameter is set.StackTrace is attached.
CAMEL-7677 advice with - Allow to influence interceptor/onException See nabblehttp://camel.465427.n5.nabble.com/How-to-remove-intercept-or-process-from-superclass-with-adviceWith-tp5753834p5753951.htmlTake a look at what it would take to try to support interceptors/onException etc with the advice with, so people can remove / add / modify those as well on their adviced routes. Improvement advice with - Allow to influence interceptor/onException See nabblehttp://camel.465427.n5.nabble.com/How-to-remove-intercept-or-process-from-superclass-with-adviceWith-tp5753834p5753951.htmlTake a look at what it would take to try to support interceptors/onException etc with the advice with, so people can remove / add / modify those as well on their adviced routes.
CAMEL-7675 Rest DSL - Add swagger module Add a new camel-swagger module that supports the new Rest DSL, so we can output the rest apis using swagger. Sub-task Rest DSL - Add swagger module Add a new camel-swagger module that supports the new Rest DSL, so we can output the rest apis using swagger.
CAMEL-7669 camel-jms - Unit tests should start|stop the connection pool Those tests do not start|stop the connection pool, which leads to resources not being stopped nicely. Test camel-jms - Unit tests should start|stop the connection pool Those tests do not start|stop the connection pool, which leads to resources not being stopped nicely.
CAMEL-7668 @Consume may restart during a shutdown event When using POJO consuming and we shutdown CamelContext and if by chance something hangs, such as the JMS shutdown (see other tickets) then the file endpoint may be stopped but the POJO consumer is still running (not shutdown) and this causes the idempotent repo to reset its state, and the POJO consumer will then pickup the same files again.eg as demonstrated by the pojo example{code}2014-08-07 14:17:49,909 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:49,945 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:49,950 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:49,955 [sonnel.records]] INFO  XPathBuilder                   - Created default XPathFactory com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl@3e9037f92014-08-07 14:17:49,996 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from EMEA region2014-08-07 14:17:50,008 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from AMER region2014-08-07 14:17:50,014 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from AMER region^C2014-08-07 14:17:52,237 [Thread-5       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.2014-08-07 14:17:52,237 [Thread-5       ] INFO  MainSupport                    - Apache Camel 2.14-SNAPSHOT stopping2014-08-07 14:17:52,237 [Thread-5       ] INFO  ClassPathXmlApplicationContext - Closing org.springframework.context.support.ClassPathXmlApplicationContext@1f361707: startup date [Thu Aug 07 14:17:46 CEST 2014]; root of context hierarchy2014-08-07 14:17:52,238 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutting down2014-08-07 14:17:52,242 [sonnel.records]] WARN  ultJmsMessageListenerContainer - Setup of JMS message listener invoker failed for destination 'personnel.records' - trying to recover. Cause: The Session is closed2014-08-07 14:17:52,247 [sonnel.records]] ERROR ultJmsMessageListenerContainer - Could not refresh JMS Connection for destination 'personnel.records' - retrying in 5000 ms. Cause: null2014-08-07 14:17:52,466 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:52,467 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:52,469 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:52,469 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:52,470 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:52,470 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:52,976 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:52,977 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:52,978 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:52,979 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:52,980 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:52,980 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:53,484 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:53,485 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:53,487 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:53,487 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:53,489 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:53,489 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:53,993 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:53,994 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:53,995 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:53,996 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:53,997 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:53,997 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:54,500 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:54,500 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:54,502 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:54,502 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:54,503 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:54,504 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:55,007 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:55,008 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:55,009 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:55,009 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:55,011 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:55,011 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:55,515 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:55,515 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:55,517 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:55,517 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:55,518 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:55,518 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:56,021 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:56,022 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:56,023 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:56,024 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:56,025 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:56,026 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:56,529 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:56,530 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:56,531 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:56,532 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:56,533 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:56,533 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:57,035 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:57,036 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:57,037 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:57,037 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:57,038 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:57,038 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:57,251 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) uptime 8.256 seconds2014-08-07 14:17:57,252 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutdown in 5.013 seconds2014-08-07 14:17:57,252 [Thread-5       ] INFO  DefaultListableBeanFactory     - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@4e358ab7: defining beans [broker,activemq,org.apache.camel.example.pojo_messaging.SendFileRecordsToQueueBean#0,org.apache.camel.example.pojo_messaging.DistributeRecordsBean#0,template,consumerTemplate,camel-1:beanPostProcessor,camel-1]; root of factory hierarchy2014-08-07 14:17:57,253 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) is shutting down2014-08-07 14:17:57,254 [Thread-5       ] INFO  TransportConnector             - Connector vm://myBroker stopped2014-08-07 14:17:57,264 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) uptime 9.268 seconds2014-08-07 14:17:57,264 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) is shutdown{code} Improvement @Consume may restart during a shutdown event When using POJO consuming and we shutdown CamelContext and if by chance something hangs, such as the JMS shutdown (see other tickets) then the file endpoint may be stopped but the POJO consumer is still running (not shutdown) and this causes the idempotent repo to reset its state, and the POJO consumer will then pickup the same files again.eg as demonstrated by the pojo example{code}2014-08-07 14:17:49,909 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:49,945 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:49,950 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:49,955 [sonnel.records]] INFO  XPathBuilder                   - Created default XPathFactory com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl@3e9037f92014-08-07 14:17:49,996 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from EMEA region2014-08-07 14:17:50,008 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from AMER region2014-08-07 14:17:50,014 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from AMER region^C2014-08-07 14:17:52,237 [Thread-5       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.2014-08-07 14:17:52,237 [Thread-5       ] INFO  MainSupport                    - Apache Camel 2.14-SNAPSHOT stopping2014-08-07 14:17:52,237 [Thread-5       ] INFO  ClassPathXmlApplicationContext - Closing org.springframework.context.support.ClassPathXmlApplicationContext@1f361707: startup date [Thu Aug 07 14:17:46 CEST 2014]; root of context hierarchy2014-08-07 14:17:52,238 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutting down2014-08-07 14:17:52,242 [sonnel.records]] WARN  ultJmsMessageListenerContainer - Setup of JMS message listener invoker failed for destination 'personnel.records' - trying to recover. Cause: The Session is closed2014-08-07 14:17:52,247 [sonnel.records]] ERROR ultJmsMessageListenerContainer - Could not refresh JMS Connection for destination 'personnel.records' - retrying in 5000 ms. Cause: null2014-08-07 14:17:52,466 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:52,467 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:52,469 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:52,469 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:52,470 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:52,470 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:52,976 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:52,977 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:52,978 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:52,979 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:52,980 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:52,980 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:53,484 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:53,485 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:53,487 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:53,487 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:53,489 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:53,489 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:53,993 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:53,994 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:53,995 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:53,996 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:53,997 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:53,997 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:54,500 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:54,500 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:54,502 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:54,502 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:54,503 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:54,504 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:55,007 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:55,008 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:55,009 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:55,009 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:55,011 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:55,011 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:55,515 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:55,515 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:55,517 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:55,517 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:55,518 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:55,518 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:56,021 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:56,022 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:56,023 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:56,024 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:56,025 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:56,026 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:56,529 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:56,530 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:56,531 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:56,532 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:56,533 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:56,533 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:57,035 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml2014-08-07 14:17:57,036 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]2014-08-07 14:17:57,037 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml2014-08-07 14:17:57,037 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]2014-08-07 14:17:57,038 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml2014-08-07 14:17:57,038 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]2014-08-07 14:17:57,251 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) uptime 8.256 seconds2014-08-07 14:17:57,252 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutdown in 5.013 seconds2014-08-07 14:17:57,252 [Thread-5       ] INFO  DefaultListableBeanFactory     - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@4e358ab7: defining beans [broker,activemq,org.apache.camel.example.pojo_messaging.SendFileRecordsToQueueBean#0,org.apache.camel.example.pojo_messaging.DistributeRecordsBean#0,template,consumerTemplate,camel-1:beanPostProcessor,camel-1]; root of factory hierarchy2014-08-07 14:17:57,253 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) is shutting down2014-08-07 14:17:57,254 [Thread-5       ] INFO  TransportConnector             - Connector vm://myBroker stopped2014-08-07 14:17:57,264 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) uptime 9.268 seconds2014-08-07 14:17:57,264 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) is shutdown{code}
CAMEL-7667 camel-jms - MessageListenerContainer should stop quicker when CamelContext is stopping Seehttps://issues.apache.org/jira/browse/AMQ-5310When shutting down a Camel app etc that connects to a AMQ broker either embedded or remotely, then during that shutdown phase, the message listener container may try to accept new messages, as it has not yet been shutdown, but Camel is being stopped. And during that work the connection to the broker may not be valid and a failover is being done by spring jms. And if that work fails such as thrown some non JMSException then we can get stuck.To help this we can stop listening quicker in camel-jms, by detecting that we are stopping CamelContext and not allow running. This can be done as  the acceptMessagesWhileStopping is default false also. Improvement camel-jms - MessageListenerContainer should stop quicker when CamelContext is stopping Seehttps://issues.apache.org/jira/browse/AMQ-5310When shutting down a Camel app etc that connects to a AMQ broker either embedded or remotely, then during that shutdown phase, the message listener container may try to accept new messages, as it has not yet been shutdown, but Camel is being stopped. And during that work the connection to the broker may not be valid and a failover is being done by spring jms. And if that work fails such as thrown some non JMSException then we can get stuck.To help this we can stop listening quicker in camel-jms, by detecting that we are stopping CamelContext and not allow running. This can be done as  the acceptMessagesWhileStopping is default false also.
CAMEL-7663 SFTP consumers cannot be triggered by Quartz2 scheduler with JDBC trigger persistence: NotSerializableException I configured a setup with an SFTP consumer like this in Spring DSL:{code}<from uri="sftp:user@host/some.directory?privateKeyUri=classpath:FOO.key&amp;delete=true&amp;scheduler=#q2scheduler" />{code}Note: q2scheduler refers to an instance of QuartzScheduledPollConsumerScheduler that I set have up with my Cron pattern.Starting up the Camel context fails with a NotSerializableException as soon as I switch Quartz from a RAMJobStore to a JDBCJobStore.The following exception gets thrown:{code}org.quartz.JobPersistenceException: Couldn't store job: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer [See nested exception: java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer]	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJob(JobStoreSupport.java:1115)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$2.executeVoid(JobStoreSupport.java:1062)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3703)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3701)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3787)	at org.quartz.impl.jdbcjobstore.JobStoreTX.executeInLock(JobStoreTX.java:93)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:1058)	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886)	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249)	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler.doStart(QuartzScheduledPollConsumerScheduler.java:174)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)	at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:499)	at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:640)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2042)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2336)	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2272)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2202)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)	at org.apache.camel.component.servletlistener.CamelServletContextListener.contextInitialized(CamelServletContextListener.java:179)               Truncated WebLogic classes....Caused by: java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.serializeJobData(StdJDBCDelegate.java:3083)	at org.quartz.impl.jdbcjobstore.oracle.OracleDelegate.insertJobDetail(OracleDelegate.java:154)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJob(JobStoreSupport.java:1112)	... 65 more{code}That implies, that a File consumer will fail in such a scenario as well, not only an SFTP consumer.Given that the documentation http://camel.apache.org/file2.html advertises Quartz2 support for polling scheduling, we were expecting that this really works.For us, this is kind of tragic, as we wanted to use Quartz2's clustering capabilities to make the SFTP consumer fit for use in a (Weblogic) cluster.Looking at GenericFileConsumer, it seems at least non-trivial to make all the fields in SftpConsumer's class hierarchy serializable. Improvement SFTP consumers cannot be triggered by Quartz2 scheduler with JDBC trigger persistence: NotSerializableException I configured a setup with an SFTP consumer like this in Spring DSL:{code}<from uri="sftp:user@host/some.directory?privateKeyUri=classpath:FOO.key&amp;delete=true&amp;scheduler=#q2scheduler" />{code}Note: q2scheduler refers to an instance of QuartzScheduledPollConsumerScheduler that I set have up with my Cron pattern.Starting up the Camel context fails with a NotSerializableException as soon as I switch Quartz from a RAMJobStore to a JDBCJobStore.The following exception gets thrown:{code}org.quartz.JobPersistenceException: Couldn't store job: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer [See nested exception: java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer]	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJob(JobStoreSupport.java:1115)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$2.executeVoid(JobStoreSupport.java:1062)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3703)	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3701)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3787)	at org.quartz.impl.jdbcjobstore.JobStoreTX.executeInLock(JobStoreTX.java:93)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:1058)	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886)	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249)	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler.doStart(QuartzScheduledPollConsumerScheduler.java:174)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)	at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:499)	at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:640)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2042)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2336)	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2272)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2202)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)	at org.apache.camel.component.servletlistener.CamelServletContextListener.contextInitialized(CamelServletContextListener.java:179)               Truncated WebLogic classes....Caused by: java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.serializeJobData(StdJDBCDelegate.java:3083)	at org.quartz.impl.jdbcjobstore.oracle.OracleDelegate.insertJobDetail(OracleDelegate.java:154)	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJob(JobStoreSupport.java:1112)	... 65 more{code}That implies, that a File consumer will fail in such a scenario as well, not only an SFTP consumer.Given that the documentation http://camel.apache.org/file2.html advertises Quartz2 support for polling scheduling, we were expecting that this really works.For us, this is kind of tragic, as we wanted to use Quartz2's clustering capabilities to make the SFTP consumer fit for use in a (Weblogic) cluster.Looking at GenericFileConsumer, it seems at least non-trivial to make all the fields in SftpConsumer's class hierarchy serializable.
CAMEL-7661 Upgrade to elasticsearch 1.2.0 We need to upgrade as there is also some security issues fixed in that newer release. Task Upgrade to elasticsearch 1.2.0 We need to upgrade as there is also some security issues fixed in that newer release.
CAMEL-7660 Add support for expression on tokenizeXml In order to be able to use tokenization elements based on the type of the to be processed message I would like to request for support for expressions inside the tokenizeXML DSL element (http://camel.apache.org/splitter.html).One use-case would be to determine the splitting element by identifying the type of the document in a processor and then provide this information via an exchange property which then can be used inside the attribute of tokenizeXml that supports expressions.The xpath DSL is not really an alternative as it comes with memory and processing time costs and doesn't work in streaming mode.A proposal would be to add the following methods to{code}org.apache.camel.builder.ExpressionClause:public T tokenizeXML(Expression tagName, int group)public T tokenizeXML(Expression tagName){code}Though as we need changes to the XML DSL also, we would need to make sure the model fits that too.eg in other words. Allow to use camel expressions to define which tag name to use. Improvement Add support for expression on tokenizeXml In order to be able to use tokenization elements based on the type of the to be processed message I would like to request for support for expressions inside the tokenizeXML DSL element (http://camel.apache.org/splitter.html).One use-case would be to determine the splitting element by identifying the type of the document in a processor and then provide this information via an exchange property which then can be used inside the attribute of tokenizeXml that supports expressions.The xpath DSL is not really an alternative as it comes with memory and processing time costs and doesn't work in streaming mode.A proposal would be to add the following methods to{code}org.apache.camel.builder.ExpressionClause:public T tokenizeXML(Expression tagName, int group)public T tokenizeXML(Expression tagName){code}Though as we need changes to the XML DSL also, we would need to make sure the model fits that too.eg in other words. Allow to use camel expressions to define which tag name to use.
CAMEL-7657 different results of lookup methods in SpringRouteBuilder There are two lookup methods in SpringRouteBuilder:- lookup(java.lang.String beanName, java.lang.Class<T> type) calls getBean(beanName, type) from ApplicationContext  - lookup(java.lang.Class<T> type) calls internally getBeanNamesForType (http://docs.spring.io/spring/docs/3.2.9.RELEASE/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class) ) and this method does not consider any hierarchy this factory may participate in.Two same methods can return different results when using Spring context hierarchy. Improvement different results of lookup methods in SpringRouteBuilder There are two lookup methods in SpringRouteBuilder:- lookup(java.lang.String beanName, java.lang.Class<T> type) calls getBean(beanName, type) from ApplicationContext  - lookup(java.lang.Class<T> type) calls internally getBeanNamesForType (http://docs.spring.io/spring/docs/3.2.9.RELEASE/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class) ) and this method does not consider any hierarchy this factory may participate in.Two same methods can return different results when using Spring context hierarchy.
CAMEL-7655 Upgrade to Avro bundle 1.7.6_2 The Avro {{1.7.6_1}} bundle from ServiceMix imports the {{sun.misc}} package which is mandatory and it makes problems, because no bundle exports this package (see SM-2346). This has been changed by SMX4-1709 and this package is now optional, but the fix is available in Avro bundle {{1.7.6_2}}. Could you please upgrade the Avro bundle in Camel to fix the problems with the {{sun.misc}} package? Task Upgrade to Avro bundle 1.7.6_2 The Avro {{1.7.6_1}} bundle from ServiceMix imports the {{sun.misc}} package which is mandatory and it makes problems, because no bundle exports this package (see SM-2346). This has been changed by SMX4-1709 and this package is now optional, but the fix is available in Avro bundle {{1.7.6_2}}. Could you please upgrade the Avro bundle in Camel to fix the problems with the {{sun.misc}} package?
CAMEL-7654 AWS SQS Component Does Not Support Message Attribuets In The Producer The work is based on jira CAMEL-7602 AWS SQS component does not support Message Attributes. Two changes are introduced in the attached patch:1.Support for sending attributes in the SqsProducer is introduced.2 On receiving a message with attributes in the SqsConsumer, application specific attributes contained as value of type Map<String, MessageAttributeValue> to an attribute called CamelAwsSqsMessageAttributes, are extracted and added as headers to the camel message. The reason is to avoid the MessageAttributeValue class, which is an SQS class, to leak to the client application so that the application will not depend on SQS classes.  Improvement AWS SQS Component Does Not Support Message Attribuets In The Producer The work is based on jira CAMEL-7602 AWS SQS component does not support Message Attributes. Two changes are introduced in the attached patch:1.Support for sending attributes in the SqsProducer is introduced.2 On receiving a message with attributes in the SqsConsumer, application specific attributes contained as value of type Map<String, MessageAttributeValue> to an attribute called CamelAwsSqsMessageAttributes, are extracted and added as headers to the camel message. The reason is to avoid the MessageAttributeValue class, which is an SQS class, to leak to the client application so that the application will not depend on SQS classes. 
CAMEL-7649 camel-jms - The QueueBrowseStrategy need support for JMS Selector As the current logic will browse the entire queue and not use any JMS selector which may have been configured. Improvement camel-jms - The QueueBrowseStrategy need support for JMS Selector As the current logic will browse the entire queue and not use any JMS selector which may have been configured.
CAMEL-7648 Using scheduler=blueprint does not work in OSGi See CAMEL-7647Loading does not work in OSGi as the classloader is the end user bundle context, and not from camel-core which is the one we need to load that class. Improvement Using scheduler=blueprint does not work in OSGi See CAMEL-7647Loading does not work in OSGi as the classloader is the end user bundle context, and not from camel-core which is the one we need to load that class.
CAMEL-7647 camel-blueprint - Add logic to detect consumer scheduler for quartz2/spring We have logic in camel-blueprint to detect which components/data formats etc are in use.But if people define a route that uses a quartz2 schedulerhttp://camel.apache.org/polling-consumer.htmlThen we should detect this, so we can add a reference to the quartz2 component etc. Improvement camel-blueprint - Add logic to detect consumer scheduler for quartz2/spring We have logic in camel-blueprint to detect which components/data formats etc are in use.But if people define a route that uses a quartz2 schedulerhttp://camel.apache.org/polling-consumer.htmlThen we should detect this, so we can add a reference to the quartz2 component etc.
CAMEL-7645 camel-jdbc - outputClass should also be supported for List Seehttps://community.jboss.org/thread/243249The outputClass option is currently limited to when there is only 1 row returned. But we should also support this for a list. Improvement camel-jdbc - outputClass should also be supported for List Seehttps://community.jboss.org/thread/243249The outputClass option is currently limited to when there is only 1 row returned. But we should also support this for a list.
CAMEL-7643 Add interceptAfterFrom to do interception to execute after routing but before consumer sends back response After CAMEL-7641 is implemented, we can add a new interceptor that runs after the route is complete, but before the consumer sends back any reply message (if InOut). This allows end users to do logging / add special headers / or whatnot they may need. New Feature Add interceptAfterFrom to do interception to execute after routing but before consumer sends back response After CAMEL-7641 is implemented, we can add a new interceptor that runs after the route is complete, but before the consumer sends back any reply message (if InOut). This allows end users to do logging / add special headers / or whatnot they may need.
CAMEL-7641 Allow UoW to have callbacks for before/after routing As this makes it easier to add custom logic to be executed before any routing happens. And when the routing is done. But before any consumer will write any response back to clients.As today the UoW done callback happens after the consumer has written the response. But there are situations where you want more fine grained callbacks.This also allows us to add into the DSL a way for end users to do a reverse of interceptFrom, (maybe interceptAfterRoute, interceptAfterFrom or some good name) so people can easily add any custom logic to be executed after the routing is done, but before any response is being written. For example to add special headers or something. New Feature Allow UoW to have callbacks for before/after routing As this makes it easier to add custom logic to be executed before any routing happens. And when the routing is done. But before any consumer will write any response back to clients.As today the UoW done callback happens after the consumer has written the response. But there are situations where you want more fine grained callbacks.This also allows us to add into the DSL a way for end users to do a reverse of interceptFrom, (maybe interceptAfterRoute, interceptAfterFrom or some good name) so people can easily add any custom logic to be executed after the routing is done, but before any response is being written. For example to add special headers or something.
CAMEL-7639 camel-jackson - Add support for prettyPrint option We have the option defined in the json dataformat for xstream etc. We just need to support that also for camel-jackson Improvement camel-jackson - Add support for prettyPrint option We have the option defined in the json dataformat for xstream etc. We just need to support that also for camel-jackson
CAMEL-7638 Use response input stream directly in http producer It could save us lots of the memory and time if the response is a big and chunked message.Here are some discussion in the mailing list about it.http://camel.465427.n5.nabble.com/Stream-only-reverse-proxy-with-minimal-memory-footprint-tp5754424.html http://camel.465427.n5.nabble.com/Chunking-issue-with-http-producer-td5735075.html  Improvement Use response input stream directly in http producer It could save us lots of the memory and time if the response is a big and chunked message.Here are some discussion in the mailing list about it.http://camel.465427.n5.nabble.com/Stream-only-reverse-proxy-with-minimal-memory-footprint-tp5754424.html http://camel.465427.n5.nabble.com/Chunking-issue-with-http-producer-td5735075.html 
CAMEL-7637 Avoid null throwable message in FailedToCreateRouteException " If detailed message is not provided by the exception, name of the exception should be printed in logs " . You can find more information [here|http://camel.465427.n5.nabble.com/Problem-encrypting-the-password-using-Camel-Jasypt-component-td5753644.html#a5754414] Improvement Avoid null throwable message in FailedToCreateRouteException " If detailed message is not provided by the exception, name of the exception should be printed in logs " . You can find more information [here|http://camel.465427.n5.nabble.com/Problem-encrypting-the-password-using-Camel-Jasypt-component-td5753644.html#a5754414]
CAMEL-7634 camel-facebook - Upgrade facebook4j to 2.x Currently we are on 1.x. But there is a 2.x release of facebook4j Task camel-facebook - Upgrade facebook4j to 2.x Currently we are on 1.x. But there is a 2.x release of facebook4j
CAMEL-7633 camel-restlet - Add back support for async See CAMEL-7310The issue is fixed in restlet, so we should upgrade to 2.2.1 which has the fix Improvement camel-restlet - Add back support for async See CAMEL-7310The issue is fixed in restlet, so we should upgrade to 2.2.1 which has the fix
CAMEL-7632 Add streaming mode to camel-splunk consumer camel-splunk consumer runs out of memory when splunk resultset is large.This is because it accumulates all results in an array list before returningthem.One possible way to address this is to add streaming support to the component.Here is the patch for streaming mode:https://github.com/dmitrimedvedev/camel/commit/7e4b5e9b206c7a969e6012d9afa40ac7024ee515https://github.com/dmitrimedvedev/camel/commit/f7063f760f5abf867fa2a6bbbd187220c941fa00 New Feature Add streaming mode to camel-splunk consumer camel-splunk consumer runs out of memory when splunk resultset is large.This is because it accumulates all results in an array list before returningthem.One possible way to address this is to add streaming support to the component.Here is the patch for streaming mode:https://github.com/dmitrimedvedev/camel/commit/7e4b5e9b206c7a969e6012d9afa40ac7024ee515https://github.com/dmitrimedvedev/camel/commit/f7063f760f5abf867fa2a6bbbd187220c941fa00
CAMEL-7631 Enhancement for xmlsecurity component (XML Signature): Configurable Signature Id The current xmlsecurity component for XML Signature creates a unique identifier for the Id attribute of the signature element. The XML Signature specification defines  this attribute as optional. However, some verifier processors in third party infrastructures do not allow that the Signature element has the Id attribute. Therefore we make the Id attribute configurable (see the attached patch).The patch also contains a minor typo correction (getXpathToIdAttributes ->getXpathsToIdAttributes) which was introduced with https://issues.apache.org/jira/i#browse/CAMEL-7618and the parameter schemaResourceUri can now contain an empty string (code robustness increased) Improvement Enhancement for xmlsecurity component (XML Signature): Configurable Signature Id The current xmlsecurity component for XML Signature creates a unique identifier for the Id attribute of the signature element. The XML Signature specification defines  this attribute as optional. However, some verifier processors in third party infrastructures do not allow that the Signature element has the Id attribute. Therefore we make the Id attribute configurable (see the attached patch).The patch also contains a minor typo correction (getXpathToIdAttributes ->getXpathsToIdAttributes) which was introduced with https://issues.apache.org/jira/i#browse/CAMEL-7618and the parameter schemaResourceUri can now contain an empty string (code robustness increased)
CAMEL-7629 camel-jackson - Add support for header to define the unmarshalType dynamic Today you can define a fixed unmarshalType on the data format. But that becomes fixed. There may be cases where you want to provide that as a header to be more dynamic.For example the JMSType is a JMS spec header to tell the java class type. So we could support that. And also a "CamelJsonType" header so people can set that also. Improvement camel-jackson - Add support for header to define the unmarshalType dynamic Today you can define a fixed unmarshalType on the data format. But that becomes fixed. There may be cases where you want to provide that as a header to be more dynamic.For example the JMSType is a JMS spec header to tell the java class type. So we could support that. And also a "CamelJsonType" header so people can set that also.
CAMEL-7628 Incorrect tests of quartz2 component There are errors in tests of quartz2 component with persistent store such as org.apache.camel.component.quartz2.SpringQuartzPersistentStoreTest.It's application context configuration resides in file org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.xml.Which has a suspicious issue in it: scheduler bean, which is configured to use DB, further passed to bean with id "quartz", but in the endpoint's uri in the route the bean with id "quartz2" used. I'm afraid, this test ignores configured quartz bean, scheduler bean, datasource and database.I provided patches to fix incorrect tests. Test Incorrect tests of quartz2 component There are errors in tests of quartz2 component with persistent store such as org.apache.camel.component.quartz2.SpringQuartzPersistentStoreTest.It's application context configuration resides in file org/apache/camel/component/quartz2/SpringQuartzPersistentStoreTest.xml.Which has a suspicious issue in it: scheduler bean, which is configured to use DB, further passed to bean with id "quartz", but in the endpoint's uri in the route the bean with id "quartz2" used. I'm afraid, this test ignores configured quartz bean, scheduler bean, datasource and database.I provided patches to fix incorrect tests.
CAMEL-7626 camel-restlet - Should set content-type header So we know the content-type if it was provided in the HTTP request Improvement camel-restlet - Should set content-type header So we know the content-type if it was provided in the HTTP request
CAMEL-7624 camel-jackson - Add option to set inclusion to skip null fields from pojos It takes a bit to configure jackson to skip null fields from pojos. You can annote your pojos but then they have jackson annotations on their classpath.But we need an option on json dataformat in camel, so you can configure that option.Some details athttp://stackoverflow.com/questions/11449211/how-to-prevent-null-values-inside-a-map-and-null-fields-inside-a-bean-from-getti Improvement camel-jackson - Add option to set inclusion to skip null fields from pojos It takes a bit to configure jackson to skip null fields from pojos. You can annote your pojos but then they have jackson annotations on their classpath.But we need an option on json dataformat in camel, so you can configure that option.Some details athttp://stackoverflow.com/questions/11449211/how-to-prevent-null-values-inside-a-map-and-null-fields-inside-a-bean-from-getti
CAMEL-7620 Rest DSL - Add JMX API to expose REST service details See parent ticketSo we can list all the REST services from a JMX operation. And get details about them such as their url, and whatnot. Sub-task Rest DSL - Add JMX API to expose REST service details See parent ticketSo we can list all the REST services from a JMX operation. And get details about them such as their url, and whatnot.
CAMEL-7619 Rest DSL - Add support for json/xml bindings see parent ticketSo we can plugin json bindings such as jackson etc.And for xml, we can plugin jaxb etc. Sub-task Rest DSL - Add support for json/xml bindings see parent ticketSo we can plugin json bindings such as jackson etc.And for xml, we can plugin jaxb etc.
CAMEL-7618 Enhancement for xmlsecurity Component: Detached XML Signatures The current xmlsecurity component supports enveloping and enveloped XML signatures. The attached patch enhances this component so that also detached XML signatures (see specification http://www.w3.org/TR/xmldsig-core/#def-SignatureDetached) can be used. The patch supports the case where the signature is a sibling of the signed element and the signed element is referred by a ID attribute value. Also several signatures within the  same XML document (even nested signatures) are supported.For this new functionality, the signer configuration has got two new parameters:# xpathsToIdAttributes xpathes to attributes which are of type ID which define the elements to be signed (for each element to be signed a separate signature is created as a sibling of the element)# schemaResourceUri defines a classpath to the XML schema, the XML schema is needed during the parsing to specify the ID attributesand the verifier configuration has got one new parameter:# schemaResourceUri defines a classpath to the XML schema, the XML schema is needed during the parsing to find the ID attributesBecause we allow several signatures within one XML document, the signatures can be nested. In order to produce the correct nested signatures, the signatures are created in a certain order; elements with deeper hierarchy level are signed first. New Feature Enhancement for xmlsecurity Component: Detached XML Signatures The current xmlsecurity component supports enveloping and enveloped XML signatures. The attached patch enhances this component so that also detached XML signatures (see specification http://www.w3.org/TR/xmldsig-core/#def-SignatureDetached) can be used. The patch supports the case where the signature is a sibling of the signed element and the signed element is referred by a ID attribute value. Also several signatures within the  same XML document (even nested signatures) are supported.For this new functionality, the signer configuration has got two new parameters:# xpathsToIdAttributes xpathes to attributes which are of type ID which define the elements to be signed (for each element to be signed a separate signature is created as a sibling of the element)# schemaResourceUri defines a classpath to the XML schema, the XML schema is needed during the parsing to specify the ID attributesand the verifier configuration has got one new parameter:# schemaResourceUri defines a classpath to the XML schema, the XML schema is needed during the parsing to find the ID attributesBecause we allow several signatures within one XML document, the signatures can be nested. In order to produce the correct nested signatures, the signatures are created in a certain order; elements with deeper hierarchy level are signed first.
CAMEL-7615 camel-itest-osgi - CxfProxyExampleTest fails This tests fails on master branch{code}cd testscd camel-itest-osgimvn test -Dtest=CxfProxyExampleTest{code}Fails with{code}2014-07-19 17:40:21,744 | WARN  | qtp2088404347-91 | PhaseInterceptorChain            | ache.cxf.common.logging.LogUtils  452 | 97 - org.apache.cxf.cxf-core - 3.0.0 | Application {http://reportincident.example.camel.apache.org}ReportIncidentEndpointService has thrown exception, unwinding noworg.apache.cxf.interceptor.Fault: Invalid uri: /camel-itest-osgi/webservices/incident. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: Endpoint[http://localhost:9081/real-webservice?throwExceptionOnFailure=false]	at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:231)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:209)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:143)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:78)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)[97:org.apache.cxf.cxf-core:3.0.0]	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_45]	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_45]	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:243)[122:org.apache.cxf.cxf-rt-transports-http:3.0.0]	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:259)[136:org.apache.cxf.cxf-rt-transports-http-jetty:3.0.0]	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:65)[136:org.apache.cxf.cxf-rt-transports-http-jetty:3.0.0]	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1046)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:982)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.Server.handle(Server.java:367)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:937)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:998)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[104:org.eclipse.jetty.http:7.6.9.v20130131]	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[104:org.eclipse.jetty.http:7.6.9.v20130131]	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[103:org.eclipse.jetty.io:7.6.9.v20130131]	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[103:org.eclipse.jetty.io:7.6.9.v20130131]	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[102:org.eclipse.jetty.util:7.6.9.v20130131]	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[102:org.eclipse.jetty.util:7.6.9.v20130131]	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]Caused by: java.lang.IllegalArgumentException: Invalid uri: /camel-itest-osgi/webservices/incident. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: Endpoint[http://localhost:9081/real-webservice?throwExceptionOnFailure=false]	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:378)[93:org.apache.camel.camel-http:2.14.0.SNAPSHOT]	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)[93:org.apache.camel.camel-http:2.14.0.SNAPSHOT]	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.componen...Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 14.577 sec <<< FAILURE! - in org.apache.camel.itest.osgi.cxf.CxfProxyExampleTesttestCxfProxy:org.apache.camel.itest.osgi.cxf.CxfProxyExampleTest.testCxfProxy:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.5/tar.gz}(org.apache.camel.itest.osgi.cxf.CxfProxyExampleTest)  Time elapsed: 13.938 sec  <<< ERROR!org.apache.cxf.binding.soap.SoapFault: Invalid uri: /camel-itest-osgi/webservices/incident. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: Endpoint[http://localhost:9081/real-webservice?throwExceptionOnFailure=false]	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.unmarshalFault(Soap11FaultInInterceptor.java:84)	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:51)	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:40)	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:113)	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:798)	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1636)	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1525)	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1330)	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:56)	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:638)	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:514)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:423)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:326)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:279)	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:96)	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:137)	at com.sun.proxy.$Proxy83.reportIncident(Unknown Source)	at org.apache.camel.itest.osgi.cxf.CxfProxyExampleTest.testCxfProxy(CxfProxyExampleTest.java:62)Results :Tests in error:  CxfProxyExampleTest.testCxfProxy:62 » SoapFault Invalid uri: /camel-itest-osgi...{code} Test camel-itest-osgi - CxfProxyExampleTest fails This tests fails on master branch{code}cd testscd camel-itest-osgimvn test -Dtest=CxfProxyExampleTest{code}Fails with{code}2014-07-19 17:40:21,744 | WARN  | qtp2088404347-91 | PhaseInterceptorChain            | ache.cxf.common.logging.LogUtils  452 | 97 - org.apache.cxf.cxf-core - 3.0.0 | Application {http://reportincident.example.camel.apache.org}ReportIncidentEndpointService has thrown exception, unwinding noworg.apache.cxf.interceptor.Fault: Invalid uri: /camel-itest-osgi/webservices/incident. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: Endpoint[http://localhost:9081/real-webservice?throwExceptionOnFailure=false]	at org.apache.camel.component.cxf.CxfConsumer$1.checkFailure(CxfConsumer.java:231)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.camel.component.cxf.CxfConsumer$1.setResponseBack(CxfConsumer.java:209)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.camel.component.cxf.CxfConsumer$1.syncInvoke(CxfConsumer.java:143)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:78)[138:org.apache.camel.camel-cxf:2.14.0.SNAPSHOT]	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:59)[97:org.apache.cxf.cxf-core:3.0.0]	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_45]	at java.util.concurrent.FutureTask.run(FutureTask.java:262)[:1.7.0_45]	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$2.run(ServiceInvokerInterceptor.java:126)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:131)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)[97:org.apache.cxf.cxf-core:3.0.0]	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:243)[122:org.apache.cxf.cxf-rt-transports-http:3.0.0]	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:259)[136:org.apache.cxf.cxf-rt-transports-http-jetty:3.0.0]	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:65)[136:org.apache.cxf.cxf-rt-transports-http-jetty:3.0.0]	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1046)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:982)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.Server.handle(Server.java:367)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:937)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:998)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:861)[104:org.eclipse.jetty.http:7.6.9.v20130131]	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)[104:org.eclipse.jetty.http:7.6.9.v20130131]	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)[108:org.eclipse.jetty.server:7.6.9.v20130131]	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)[103:org.eclipse.jetty.io:7.6.9.v20130131]	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)[103:org.eclipse.jetty.io:7.6.9.v20130131]	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[102:org.eclipse.jetty.util:7.6.9.v20130131]	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[102:org.eclipse.jetty.util:7.6.9.v20130131]	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]Caused by: java.lang.IllegalArgumentException: Invalid uri: /camel-itest-osgi/webservices/incident. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: Endpoint[http://localhost:9081/real-webservice?throwExceptionOnFailure=false]	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:378)[93:org.apache.camel.camel-http:2.14.0.SNAPSHOT]	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)[93:org.apache.camel.camel-http:2.14.0.SNAPSHOT]	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)[71:org.apache.camel.camel-core:2.14.0.SNAPSHOT]	at org.apache.camel.componen...Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 14.577 sec <<< FAILURE! - in org.apache.camel.itest.osgi.cxf.CxfProxyExampleTesttestCxfProxy:org.apache.camel.itest.osgi.cxf.CxfProxyExampleTest.testCxfProxy:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.5/tar.gz}(org.apache.camel.itest.osgi.cxf.CxfProxyExampleTest)  Time elapsed: 13.938 sec  <<< ERROR!org.apache.cxf.binding.soap.SoapFault: Invalid uri: /camel-itest-osgi/webservices/incident. If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: Endpoint[http://localhost:9081/real-webservice?throwExceptionOnFailure=false]	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.unmarshalFault(Soap11FaultInInterceptor.java:84)	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:51)	at org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor.handleMessage(Soap11FaultInInterceptor.java:40)	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)	at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:113)	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:69)	at org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor.handleMessage(CheckFaultInterceptor.java:34)	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:798)	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1636)	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1525)	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1330)	at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:56)	at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:638)	at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:307)	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:514)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:423)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:326)	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:279)	at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:96)	at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:137)	at com.sun.proxy.$Proxy83.reportIncident(Unknown Source)	at org.apache.camel.itest.osgi.cxf.CxfProxyExampleTest.testCxfProxy(CxfProxyExampleTest.java:62)Results :Tests in error:  CxfProxyExampleTest.testCxfProxy:62 >> SoapFault Invalid uri: /camel-itest-osgi...{code}
CAMEL-7614 camel-hbase - Unit test fails On master branch. Not sure what is the problem, but this fails consistently for me{code}Tests run: 10, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 198.199 sec <<< FAILURE! - in org.apache.camel.component.hbase.HBaseProducerTesttestPutAndGetWithModel(org.apache.camel.component.hbase.HBaseProducerTest)  Time elapsed: 20.223 sec  <<< FAILURE!org.junit.ComparisonFailure: expected:<[1]> but was:<[Ioannis]>	at org.junit.Assert.assertEquals(Assert.java:115)	at org.junit.Assert.assertEquals(Assert.java:144)	at org.apache.camel.component.hbase.HBaseProducerTest.testPutAndGetWithModel(HBaseProducerTest.java:103){code} Test camel-hbase - Unit test fails On master branch. Not sure what is the problem, but this fails consistently for me{code}Tests run: 10, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 198.199 sec <<< FAILURE! - in org.apache.camel.component.hbase.HBaseProducerTesttestPutAndGetWithModel(org.apache.camel.component.hbase.HBaseProducerTest)  Time elapsed: 20.223 sec  <<< FAILURE!org.junit.ComparisonFailure: expected:<[1]> but was:<[Ioannis]>	at org.junit.Assert.assertEquals(Assert.java:115)	at org.junit.Assert.assertEquals(Assert.java:144)	at org.apache.camel.component.hbase.HBaseProducerTest.testPutAndGetWithModel(HBaseProducerTest.java:103){code}
CAMEL-7610 add expression validation method to BacklogDebugger It would be a good addition to allow expression validation via the BacklogDebugger. The method should take the language and the expression as String parameters and return null if all is fine or an error messages as string. New Feature add expression validation method to BacklogDebugger It would be a good addition to allow expression validation via the BacklogDebugger. The method should take the language and the expression as String parameters and return null if all is fine or an error messages as string.
CAMEL-7609 Add option "shareUnitOfWork" to pattern "enrich" Since CAMEL-5981 in Camel 2.10.4, when an "enrich" is called, its UnitOfWork is "null".  This causes our custom producer component to be unable to access the UnitOfWork of the Exchange.Here is a patch that adds the option "shareUnitOfWork" to the "enrich" pattern classes (Enricher and EnrichDefinition).  This implementation was strongly inspired by the implementation of the option in MulticastDefinition and MulticastProcessor.Patch is against Camel 2.10.7. New Feature Add option "shareUnitOfWork" to pattern "enrich" Since CAMEL-5981 in Camel 2.10.4, when an "enrich" is called, its UnitOfWork is "null".  This causes our custom producer component to be unable to access the UnitOfWork of the Exchange.Here is a patch that adds the option "shareUnitOfWork" to the "enrich" pattern classes (Enricher and EnrichDefinition).  This implementation was strongly inspired by the implementation of the option in MulticastDefinition and MulticastProcessor.Patch is against Camel 2.10.7.
CAMEL-7608 XMLTokenizer tests fails in camel-core with JDK8 I suspect its the xml attributes that may be outputted in different order on JDK8 than 7 etc.{code}Results :Failed tests:  XMLTokenizeLanguageTest>TestSupport.runBare:58->testSendMoreParentsMessageToTokenize:117->ContextTestSupport.assertMockEndpointsSatisfied:343 mock://result Body of message: 0. Expected: <<c:child some_attr='a' anotherAttr='a' xmlns:g="urn:g" xmlns:d="urn:d" xmlns:c="urn:c"></c:child>> but was: <<c:child some_attr='a' anotherAttr='a' xmlns:c="urn:c" xmlns:d="urn:d" xmlns:g="urn:g"></c:child>>  XMLTokenExpressionIteratorTest.testExtractChildInjected:214->invokeAndVerify:315 mismatch [0] expected:<...otherAttr='a' xmlns:[g="urn:g" xmlns:d="urn:d" xmlns:c="urn:c]"></c:child>> but was:<...otherAttr='a' xmlns:[c="urn:c" xmlns:d="urn:d" xmlns:g="urn:g]"></c:child>>  XMLTokenExpressionIteratorTest.testExtractChildNSMixedInjected:222->invokeAndVerify:315 mismatch [0] expected:<...xmlns="urn:c" xmlns:[g="urn:g" xmlns:c="urn:c]"></child>> but was:<...xmlns="urn:c" xmlns:[c="urn:c" xmlns:g="urn:g]"></child>>  XMLTokenExpressionIteratorTest.testExtractCxxxd:230->invokeAndVerify:315 mismatch [0] expected:<...otherAttr='a' xmlns:[g="urn:g" xmlns:d="urn:d" xmlns:c="urn:c]"></c:child>> but was:<...otherAttr='a' xmlns:[c="urn:c" xmlns:d="urn:d" xmlns:g="urn:g]"></c:child>>Tests run: 4986, Failures: 4, Errors: 0, Skipped: 3{code} Test XMLTokenizer tests fails in camel-core with JDK8 I suspect its the xml attributes that may be outputted in different order on JDK8 than 7 etc.{code}Results :Failed tests:  XMLTokenizeLanguageTest>TestSupport.runBare:58->testSendMoreParentsMessageToTokenize:117->ContextTestSupport.assertMockEndpointsSatisfied:343 mock://result Body of message: 0. Expected: <<c:child some_attr='a' anotherAttr='a' xmlns:g="urn:g" xmlns:d="urn:d" xmlns:c="urn:c"></c:child>> but was: <<c:child some_attr='a' anotherAttr='a' xmlns:c="urn:c" xmlns:d="urn:d" xmlns:g="urn:g"></c:child>>  XMLTokenExpressionIteratorTest.testExtractChildInjected:214->invokeAndVerify:315 mismatch [0] expected:<...otherAttr='a' xmlns:[g="urn:g" xmlns:d="urn:d" xmlns:c="urn:c]"></c:child>> but was:<...otherAttr='a' xmlns:[c="urn:c" xmlns:d="urn:d" xmlns:g="urn:g]"></c:child>>  XMLTokenExpressionIteratorTest.testExtractChildNSMixedInjected:222->invokeAndVerify:315 mismatch [0] expected:<...xmlns="urn:c" xmlns:[g="urn:g" xmlns:c="urn:c]"></child>> but was:<...xmlns="urn:c" xmlns:[c="urn:c" xmlns:g="urn:g]"></child>>  XMLTokenExpressionIteratorTest.testExtractCxxxd:230->invokeAndVerify:315 mismatch [0] expected:<...otherAttr='a' xmlns:[g="urn:g" xmlns:d="urn:d" xmlns:c="urn:c]"></c:child>> but was:<...otherAttr='a' xmlns:[c="urn:c" xmlns:d="urn:d" xmlns:g="urn:g]"></c:child>>Tests run: 4986, Failures: 4, Errors: 0, Skipped: 3{code}
CAMEL-7606 Expose the component options for Camel Zookeeper Expose the component options for the Camel Zookeeper component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Zookeeper Expose the component options for the Camel Zookeeper component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7605 Expose the component options for Camel Elasticsearch Expose the component options for the Camel ElasticSearch component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. New Feature Expose the component options for Camel Elasticsearch Expose the component options for the Camel ElasticSearch component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7604 camel-core - Enlist Camel producers in JMX on startup See nabblehttp://camel.465427.n5.nabble.com/How-to-expose-camel-producer-with-jmx-tp5753833p5753902.htmlWe should do this for producers now as we can enlist only the producers created during startup as we do for consumers. And if people want to enlist dynamic producers too, they can set that jmx option to enlist all. Improvement camel-core - Enlist Camel producers in JMX on startup See nabblehttp://camel.465427.n5.nabble.com/How-to-expose-camel-producer-with-jmx-tp5753833p5753902.htmlWe should do this for producers now as we can enlist only the producers created during startup as we do for consumers. And if people want to enlist dynamic producers too, they can set that jmx option to enlist all.
CAMEL-7599 LogEndpoint ignores setter (setGroupSize) - set via uri working I just tried to setup a throughput logger with java dsl (not using uri strings) and it seems that setGroupSize and other setters are ignored.To reproduce i wrote a test:{code:title=EndpointsUtilTest|borderStyle=solid}import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.log.LogEndpoint;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class EndpointsUtilTest extends CamelTestSupport {                    private static final String MOCK_OUT = "mock:out";    private static final String DIRECT_IN = "direct:in";    @Test    public void test() throws InterruptedException {        MockEndpoint out = context.getEndpoint(MOCK_OUT, MockEndpoint.class);        int expectedCount = 1000;        out.expectedMessageCount(expectedCount);        for (int i = 0; i < expectedCount; i++) {            template.sendBody(DIRECT_IN, "blub");        }        out.assertIsSatisfied();    }    @Override    protected RouteBuilder createRouteBuilder() throws Exception {        return new RouteBuilder() {                        @Override            public void configure() throws Exception {                from(DIRECT_IN).to(getTPLogger()).to(getTPLoggerSetter()).to(MOCK_OUT);            }        };    }        private LogEndpoint getTPLogger(){        LogEndpoint endpoint = context.getEndpoint("log:tplogger?groupSize=10", LogEndpoint.class);                return endpoint;    }        private LogEndpoint getTPLoggerSetter(){        LogEndpoint endpoint = context.getEndpoint("log:tploggerSetter", LogEndpoint.class);        endpoint.setGroupSize(10);                return endpoint;    }    }{code}Both loggers should produce same output but only the one produced with getTPLogger() is a correct throughput logger.  Improvement LogEndpoint ignores setter (setGroupSize) - set via uri working I just tried to setup a throughput logger with java dsl (not using uri strings) and it seems that setGroupSize and other setters are ignored.To reproduce i wrote a test:{code:title=EndpointsUtilTest|borderStyle=solid}import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.log.LogEndpoint;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.junit4.CamelTestSupport;import org.junit.Test;public class EndpointsUtilTest extends CamelTestSupport {                    private static final String MOCK_OUT = "mock:out";    private static final String DIRECT_IN = "direct:in";    @Test    public void test() throws InterruptedException {        MockEndpoint out = context.getEndpoint(MOCK_OUT, MockEndpoint.class);        int expectedCount = 1000;        out.expectedMessageCount(expectedCount);        for (int i = 0; i < expectedCount; i++) {            template.sendBody(DIRECT_IN, "blub");        }        out.assertIsSatisfied();    }    @Override    protected RouteBuilder createRouteBuilder() throws Exception {        return new RouteBuilder() {                        @Override            public void configure() throws Exception {                from(DIRECT_IN).to(getTPLogger()).to(getTPLoggerSetter()).to(MOCK_OUT);            }        };    }        private LogEndpoint getTPLogger(){        LogEndpoint endpoint = context.getEndpoint("log:tplogger?groupSize=10", LogEndpoint.class);                return endpoint;    }        private LogEndpoint getTPLoggerSetter(){        LogEndpoint endpoint = context.getEndpoint("log:tploggerSetter", LogEndpoint.class);        endpoint.setGroupSize(10);                return endpoint;    }    }{code}Both loggers should produce same output but only the one produced with getTPLogger() is a correct throughput logger. 
CAMEL-7597 Throw an more meaningful exception for camel-rabbitmq There is [a question|http://stackoverflow.com/questions/24675730/rabbitmq-with-camel/] for the rabbmitmq endpoint in stackoverflow. We could throw a more meaningful exception to inform the user to change the URI path for the exchangeName. Improvement Throw an more meaningful exception for camel-rabbitmq There is [a question|http://stackoverflow.com/questions/24675730/rabbitmq-with-camel/] for the rabbmitmq endpoint in stackoverflow. We could throw a more meaningful exception to inform the user to change the URI path for the exchangeName.
CAMEL-7596 Syntax error in javadoc of ExpressionClause.method() The six different overloaded versions of the method {{org.apache.camel.builder.ExpressionClause.method()}} all have incorrect javadoc, where the href attribute of an {{<a>}} tag has no end quote. This means the javadoc in an IDE (Eclipse in my case) doesn't display anything after and including this tag.Example:{code:java}    /**     * Evaluates an expression using the <a     * href="http://camel.apache.org/bean-language.html>bean language</a>     * which basically means the bean is invoked to determine the expression     * value.     *      * @param bean the name of the bean looked up the registry     * @return the builder to continue processing the DSL     */    public T method(String bean) {        return delegate.method(bean);    }{code} Improvement Syntax error in javadoc of ExpressionClause.method() The six different overloaded versions of the method {{org.apache.camel.builder.ExpressionClause.method()}} all have incorrect javadoc, where the href attribute of an {{<a>}} tag has no end quote. This means the javadoc in an IDE (Eclipse in my case) doesn't display anything after and including this tag.Example:{code:java}    /**     * Evaluates an expression using the <a     * href="http://camel.apache.org/bean-language.html>bean language</a>     * which basically means the bean is invoked to determine the expression     * value.     *      * @param bean the name of the bean looked up the registry     * @return the builder to continue processing the DSL     */    public T method(String bean) {        return delegate.method(bean);    }{code}
CAMEL-7594 TypeConverter - Should support CamelLogDebugBodyMaxChars to limit logging message body For example people may want to limit logging any message body if possible, by setting that option to -1.Though if for some reason the type converter cannot do, it creates an exception with the message body value.We should support using the CamelLogDebugBodyMaxChars as we do when logging Exchange Message etc. Improvement TypeConverter - Should support CamelLogDebugBodyMaxChars to limit logging message body For example people may want to limit logging any message body if possible, by setting that option to -1.Though if for some reason the type converter cannot do, it creates an exception with the message body value.We should support using the CamelLogDebugBodyMaxChars as we do when logging Exchange Message etc.
CAMEL-7592 Support setMode in XStreamDataFormat User may need to set the mode when create the xstream instance, current we don't provide this setting in XstreamDataFormat. Improvement Support setMode in XStreamDataFormat User may need to set the mode when create the xstream instance, current we don't provide this setting in XstreamDataFormat.
CAMEL-7589 Missing 'null' check in methods sendBodyAndHeaders() of class DefaultProducerTemplate In class DefaultProducerTemplate, in methods :- public void sendBodyAndHeaders(Endpoint endpoint, final Object body, final Map<String, Object> headers)- public Object sendBodyAndHeaders(Endpoint endpoint, ExchangePattern pattern, final Object body, final Map<String, Object> headers)Passing 'null' as last parameter (headers) should be allowed and handled correctly. A simple check is to be added before entering the 'for' loop:if(headers != null) {       for (Map.Entry<String, Object> header : headers.entrySet()) {                    in.setHeader(header.getKey(), header.getValue());       }}With current implementation an exception is raised:Caused by: java.lang.NullPointerException	at org.apache.camel.impl.DefaultProducerTemplate$2.process(DefaultProducerTemplate.java:241)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:192)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeaders(DefaultProducerTemplate.java:238) Improvement Missing 'null' check in methods sendBodyAndHeaders() of class DefaultProducerTemplate In class DefaultProducerTemplate, in methods :- public void sendBodyAndHeaders(Endpoint endpoint, final Object body, final Map<String, Object> headers)- public Object sendBodyAndHeaders(Endpoint endpoint, ExchangePattern pattern, final Object body, final Map<String, Object> headers)Passing 'null' as last parameter (headers) should be allowed and handled correctly. A simple check is to be added before entering the 'for' loop:if(headers != null) {       for (Map.Entry<String, Object> header : headers.entrySet()) {                    in.setHeader(header.getKey(), header.getValue());       }}With current implementation an exception is raised:Caused by: java.lang.NullPointerException	at org.apache.camel.impl.DefaultProducerTemplate$2.process(DefaultProducerTemplate.java:241)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:192)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeaders(DefaultProducerTemplate.java:238)
CAMEL-7581 Enrich and pollEnrich should call aggregate even if exception occurred This is the behavior that multicast/splitter/recipient list does. So we should do that same for enricher/pollEnrich.See nabblehttp://camel.465427.n5.nabble.com/Enricher-EIP-skips-AggregationStrategy-if-Exchange-contains-exception-td5746533.html Improvement Enrich and pollEnrich should call aggregate even if exception occurred This is the behavior that multicast/splitter/recipient list does. So we should do that same for enricher/pollEnrich.See nabblehttp://camel.465427.n5.nabble.com/Enricher-EIP-skips-AggregationStrategy-if-Exchange-contains-exception-td5746533.html
CAMEL-7579 broken links at components page At http://camel.apache.org/components.html, there are broken links# at Krati component. It refers to http://data.linkedin.com/opensource/krati and this URL show 404.# camel-msv Task broken links at components page At http://camel.apache.org/components.html, there are broken links# at Krati component. It refers to http://data.linkedin.com/opensource/krati and this URL show 404.# camel-msv
CAMEL-7576 camel-cache - Turn off ET phone home See nabblehttp://camel.465427.n5.nabble.com/camel-cache-2-13-1-fails-on-UpdateChecker-tp5753294.htmlAnd some linkshttps://issues.apache.org/jira/browse/SHINDIG-1617?jql=text%20~%20%22updatechecker%22https://jira.terracotta.org/jira/browse/QTZ-29 Improvement camel-cache - Turn off ET phone home See nabblehttp://camel.465427.n5.nabble.com/camel-cache-2-13-1-fails-on-UpdateChecker-tp5753294.htmlAnd some linkshttps://issues.apache.org/jira/browse/SHINDIG-1617?jql=text%20~%20%22updatechecker%22https://jira.terracotta.org/jira/browse/QTZ-29
CAMEL-7575 BeanInvokeProcess should copy the attchment from the resultExchange  As the user may add the attachments in the bean method call, we should support to copy the attachments back to the exchange when call the bean method.http://camel.465427.n5.nabble.com/Attachments-are-Lost-using-Bean-Language-tp5753283.html  Improvement BeanInvokeProcess should copy the attchment from the resultExchange  As the user may add the attachments in the bean method call, we should support to copy the attachments back to the exchange when call the bean method.http://camel.465427.n5.nabble.com/Attachments-are-Lost-using-Bean-Language-tp5753283.html 
CAMEL-7574 Expose the component options for Camel Atmosphere Websocket Expose the component options for the Camel Atmosphere Websocket component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Atmosphere Websocket Expose the component options for the Camel Atmosphere Websocket component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7573 No description of multipleConsumers option on disruptor http://camel.apache.org/disruptor.html is missing a description of the multipleConsumers option (if there is any). One of the last paragraphs, "Using multipleConsumers", implies that there is such an option. Task No description of multipleConsumers option on disruptor http://camel.apache.org/disruptor.html is missing a description of the multipleConsumers option (if there is any). One of the last paragraphs, "Using multipleConsumers", implies that there is such an option.
CAMEL-7569 Expose the component options for Camel GAE Expose the component options for the Camel Google App Engine component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel GAE Expose the component options for the Camel Google App Engine component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7567 Add camelId and managementName attributes to JMX tracer mbeans We have these attributes on almost all other mbeans, we should have it on the mbeans in the tracer tree, as it allows ppl to easier figure out which camel context they are from. Improvement Add camelId and managementName attributes to JMX tracer mbeans We have these attributes on almost all other mbeans, we should have it on the mbeans in the tracer tree, as it allows ppl to easier figure out which camel context they are from.
CAMEL-7566 Expose the component options for Camel Servlet Expose the component options for Camel Servlet as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Servlet Expose the component options for Camel Servlet as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7563 Allow passing HazelcastInstance as a query parameter of a Hazelcast component endpoint. It is impossible now to pass an existing HazelcastInstance to a HazelcastEndpoint as a bean from Registry. It complicates Hazelcast Endpoint usage in any DI environment. Improvement Allow passing HazelcastInstance as a query parameter of a Hazelcast component endpoint. It is impossible now to pass an existing HazelcastInstance to a HazelcastEndpoint as a bean from Registry. It complicates Hazelcast Endpoint usage in any DI environment.
CAMEL-7556 camel-rabbitmq: Multiple concurrent consumer threads Allow multiple concurrent threads listening to a single queue (like the JMS endpoint) New Feature camel-rabbitmq: Multiple concurrent consumer threads Allow multiple concurrent threads listening to a single queue (like the JMS endpoint)
CAMEL-7554 New component: camel-metrics I created {{camel-metrics}} component to report various metrics like counters, meters, histograms and timers directly from Camel routes using [Metrics | http://metrics.codahale.com] library.Source code can be found https://github.com/laurikimmel/camel-metrics New Feature New component: camel-metrics I created {{camel-metrics}} component to report various metrics like counters, meters, histograms and timers directly from Camel routes using [Metrics | http://metrics.codahale.com] library.Source code can be found https://github.com/laurikimmel/camel-metrics
CAMEL-7552 RabbitMQ Component: property to allow declare or not queue and exchange. Sometimes to consume a message from RabbitMQ the consumer doesn't konw its  exchange.And to send message to exchange, it isn't necessary set queue name, because  the destination queue is defined from a routingkey, but in camel-rabbitmq when queue is blank, is generated a random uuid, and this uuid is used to declare and bind with the exchange. I suggest that the "getEndpoint().declareExchangeAndQueue(chanel)" in Consumer and Producer can be optional. Like:boolean declare = true; Improvement RabbitMQ Component: property to allow declare or not queue and exchange. Sometimes to consume a message from RabbitMQ the consumer doesn't konw its  exchange.And to send message to exchange, it isn't necessary set queue name, because  the destination queue is defined from a routingkey, but in camel-rabbitmq when queue is blank, is generated a random uuid, and this uuid is used to declare and bind with the exchange. I suggest that the "getEndpoint().declareExchangeAndQueue(chanel)" in Consumer and Producer can be optional. Like:boolean declare = true;
CAMEL-7550 Adding ability to look up objects using EntityManager.find in JPA component. Currently Camel-JPA offers 3 different ways of looking up objects# Using Query# Using NativeQuery# Using NamedQueryI would like a fourth: Using EntityManager.findEntityManager.find is simple to use and in many situations far more efficient out of the box than the other options, at least when using Hibernate. This is due to the fact that it uses the caches by default.The find method requires two arguments, one of them the key is natural to provide as incoming body, the second, the class of the object wanted is natural to have as a route parameter and/or header. Improvement Adding ability to look up objects using EntityManager.find in JPA component. Currently Camel-JPA offers 3 different ways of looking up objects# Using Query# Using NativeQuery# Using NamedQueryI would like a fourth: Using EntityManager.findEntityManager.find is simple to use and in many situations far more efficient out of the box than the other options, at least when using Hibernate. This is due to the fact that it uses the caches by default.The find method requires two arguments, one of them the key is natural to provide as incoming body, the second, the class of the object wanted is natural to have as a route parameter and/or header.
CAMEL-7548 Spring XML: Support {{ }} placeholder syntax inside pgp data format I would like to do this:{noformat}<dataFormats>  <pgp id="decrypt" keyFileName="crypt-sec.asc"       keyUserid="{{user}}" password="{{password}}"/></dataFormats>{noformat}Property placeholders are apparently not resolved inside <pgp>. Naturally, I want to use Jasypt to encrypt the password in the properties file. Improvement Spring XML: Support {{ }} placeholder syntax inside pgp data format I would like to do this:{noformat}<dataFormats>  <pgp id="decrypt" keyFileName="crypt-sec.asc"       keyUserid="{{user}}" password="{{password}}"/></dataFormats>{noformat}Property placeholders are apparently not resolved inside <pgp>. Naturally, I want to use Jasypt to encrypt the password in the properties file.
CAMEL-7540 Quartz Endpoint with a SimpleTrigger does not support referencing a bean in URI When configuring a Quartz endpoint with Spring, if you are using a SimpleTrigger then it doesn't work to use a bean reference as a parameter on the URI.  For example,{code:xml}<bean id="taskCount" class="java.lang.Integer">   <constructor-arg>5</constructor-arg></bean><endpoint id="taskLauncher" uri="quartz://taskThread?trigger.repeatCount=#taskCount"/>{code}Since there is no cron specified, it will use a SimpleTrigger.  In QuartzComponent.createEndpoint(String, String, Map) it will get the repeatCount as the string "#taskCount" instead of the actual bean, and therefore when it goes to convert it to an Integer, it will fail with an exception like this:{noformat}Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Integer with value #taskCount due java.lang.NumberFormatException: For input string: "#taskCount"	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:130) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:174) ~[camel-quartz-2.12.3.jar:2.12.3]	at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:56) ~[camel-quartz-2.12.3.jar:2.12.3]	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:123) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:511) ~[camel-core-2.12.3.jar:2.12.3]	... 43 common frames omittedCaused by: org.apache.camel.RuntimeCamelException: java.lang.NumberFormatException: For input string: "#taskCount"	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1005) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:275) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:113) ~[camel-core-2.12.3.jar:2.12.3]	... 48 common frames omittedCaused by: java.lang.NumberFormatException: For input string: "#taskCount"	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.7.0_40]	at java.lang.Integer.parseInt(Integer.java:481) ~[na:1.7.0_40]	at java.lang.Integer.valueOf(Integer.java:582) ~[na:1.7.0_40]	at org.apache.camel.converter.ObjectConverter.toInteger(ObjectConverter.java:250) ~[camel-core-2.12.3.jar:2.12.3]	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_40]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_40]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_40]	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_40]	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1001) ~[camel-core-2.12.3.jar:2.12.3]	... 51 common frames omitted{noformat}A workaround is to explicitly set the value of repeatCount or use a system or environment variable, but there are situations where we want to use a value defined elsewhere in the application context.  Looking at the code, it appears a similar problem will occur with repeatInterval. Improvement Quartz Endpoint with a SimpleTrigger does not support referencing a bean in URI When configuring a Quartz endpoint with Spring, if you are using a SimpleTrigger then it doesn't work to use a bean reference as a parameter on the URI.  For example,{code:xml}<bean id="taskCount" class="java.lang.Integer">   <constructor-arg>5</constructor-arg></bean><endpoint id="taskLauncher" uri="quartz://taskThread?trigger.repeatCount=#taskCount"/>{code}Since there is no cron specified, it will use a SimpleTrigger.  In QuartzComponent.createEndpoint(String, String, Map) it will get the repeatCount as the string "#taskCount" instead of the actual bean, and therefore when it goes to convert it to an Integer, it will fail with an exception like this:{noformat}Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.Integer with value #taskCount due java.lang.NumberFormatException: For input string: "#taskCount"	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:130) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:174) ~[camel-quartz-2.12.3.jar:2.12.3]	at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:56) ~[camel-quartz-2.12.3.jar:2.12.3]	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:123) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:511) ~[camel-core-2.12.3.jar:2.12.3]	... 43 common frames omittedCaused by: org.apache.camel.RuntimeCamelException: java.lang.NumberFormatException: For input string: "#taskCount"	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1005) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:275) ~[camel-core-2.12.3.jar:2.12.3]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:113) ~[camel-core-2.12.3.jar:2.12.3]	... 48 common frames omittedCaused by: java.lang.NumberFormatException: For input string: "#taskCount"	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) ~[na:1.7.0_40]	at java.lang.Integer.parseInt(Integer.java:481) ~[na:1.7.0_40]	at java.lang.Integer.valueOf(Integer.java:582) ~[na:1.7.0_40]	at org.apache.camel.converter.ObjectConverter.toInteger(ObjectConverter.java:250) ~[camel-core-2.12.3.jar:2.12.3]	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_40]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_40]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_40]	at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_40]	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1001) ~[camel-core-2.12.3.jar:2.12.3]	... 51 common frames omitted{noformat}A workaround is to explicitly set the value of repeatCount or use a system or environment variable, but there are situations where we want to use a value defined elsewhere in the application context.  Looking at the code, it appears a similar problem will occur with repeatInterval.
CAMEL-7537 Expose the component options for Camel OptaPlanner Expose the component options for Camel OptaPlanner as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel OptaPlanner Expose the component options for Camel OptaPlanner as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7536 camel mail: content-transfer-encoding configurable It should be possible to set the content-transfer-encoding for attachments, normally it will be automatically determined based on the content of the attachment.see http://camel.465427.n5.nabble.com/camel-mail-content-transfer-encoding-configurable-td5752504.html New Feature camel mail: content-transfer-encoding configurable It should be possible to set the content-transfer-encoding for attachments, normally it will be automatically determined based on the content of the attachment.see http://camel.465427.n5.nabble.com/camel-mail-content-transfer-encoding-configurable-td5752504.html
CAMEL-7534 Expose the component options for Camel HTTP4 Expose the component options for Camel HTTP4 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel HTTP4 Expose the component options for Camel HTTP4 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7533 Expose the component options for Camel HTTP Expose the component options for Camel HTTP as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel HTTP Expose the component options for Camel HTTP as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7532 VelocityEndpoint should support take the VelocityContext from message header There is a question in [stackoverflow|http://stackoverflow.com/questions/24364979/camel-velocity-how-to-put-things-in-velocity-context]. The issue could be resolved, If camel can give the user choice of setting up his own velocity context and putting it into message header. Improvement VelocityEndpoint should support take the VelocityContext from message header There is a question in [stackoverflow|http://stackoverflow.com/questions/24364979/camel-velocity-how-to-put-things-in-velocity-context]. The issue could be resolved, If camel can give the user choice of setting up his own velocity context and putting it into message header.
CAMEL-7530 Expose the component options for Camel CXFRS Expose the component options for Camel CXFRS as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel CXFRS Expose the component options for Camel CXFRS as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7529 Update HeaderFilterStrategyComponent to extend UriEndpointComponent As part of exposing component options, we need to update HeaderFilterStrategyComponent to extend UriEndpointComponent instead of DefaultComponent, as certain components  including CXF, CXFRS, and HTTP extend it. Improvement Update HeaderFilterStrategyComponent to extend UriEndpointComponent As part of exposing component options, we need to update HeaderFilterStrategyComponent to extend UriEndpointComponent instead of DefaultComponent, as certain components  including CXF, CXFRS, and HTTP extend it.
CAMEL-7528 Aggregate - Allow aggregation repository to report back in-flight exchanges for in-memory repos See nabblehttp://camel.465427.n5.nabble.com/Calculation-of-in-flight-messages-in-DefaultShutdownStrategy-td5747034.htmlWhen you use aggregation repository that is in-memory only, and you shutdown Camel you may want these in-memory messages to be regarded as in-flight so Camel allows time to process these messages.For example when using the aggregete eip.  Improvement Aggregate - Allow aggregation repository to report back in-flight exchanges for in-memory repos See nabblehttp://camel.465427.n5.nabble.com/Calculation-of-in-flight-messages-in-DefaultShutdownStrategy-td5747034.htmlWhen you use aggregation repository that is in-memory only, and you shutdown Camel you may want these in-memory messages to be regarded as in-flight so Camel allows time to process these messages.For example when using the aggregete eip. 
CAMEL-7527 Zip component does not unpack files from directories into zip archive I've tried to unpack zip archive with files into directories, but it wasn't possible. See more at: http://camel.465427.n5.nabble.com/zip-file-best-practices-tp5713437p5748254.htmlUnfortunately I could'nt found camel-zipfile component for this issue.I also created a patch for this issue. It is available at github as a pull request: https://github.com/apache/camel/pull/191 Improvement Zip component does not unpack files from directories into zip archive I've tried to unpack zip archive with files into directories, but it wasn't possible. See more at: http://camel.465427.n5.nabble.com/zip-file-best-practices-tp5713437p5748254.htmlUnfortunately I could'nt found camel-zipfile component for this issue.I also created a patch for this issue. It is available at github as a pull request: https://github.com/apache/camel/pull/191
CAMEL-7525 Behavior change for file component in 2.10 causes problems with no workaround available  We do use the file component to read files from a particular area. We pick up new files from there using their content as basis for a database import. There are a couple of important points: # We must not add or delete files to the area we read from, not even temporarily. # We need to pick up files once.To achive this we use noop=true as well as a file based idempotentRepository where the repository is placed in a different location. We also use readLock=changed which is the big problem.  To cite the component documentation:Notice from Camel 2.10 onwards the read locks changed, fileLock and rename will also use a markerFile as well, to ensure not picking up files that may be in process by another Camel consumer running on another node (eg cluster).This is a huge problem as I can't find any documented way of storing the marker files in a different location.  What is really needed is something similar to inProgressRepository as an option to keep track of the readLock related information. Alternatively an option to disable the marker files could be created, this option could however lead to failure if applications are clustered.This problem is for us serious breakage, as there are other applications not under our control reading the same areas, some of these crashes due to the marker files. Improvement Behavior change for file component in 2.10 causes problems with no workaround available  We do use the file component to read files from a particular area. We pick up new files from there using their content as basis for a database import. There are a couple of important points: # We must not add or delete files to the area we read from, not even temporarily. # We need to pick up files once.To achive this we use noop=true as well as a file based idempotentRepository where the repository is placed in a different location. We also use readLock=changed which is the big problem.  To cite the component documentation:Notice from Camel 2.10 onwards the read locks changed, fileLock and rename will also use a markerFile as well, to ensure not picking up files that may be in process by another Camel consumer running on another node (eg cluster).This is a huge problem as I can't find any documented way of storing the marker files in a different location.  What is really needed is something similar to inProgressRepository as an option to keep track of the readLock related information. Alternatively an option to disable the marker files could be created, this option could however lead to failure if applications are clustered.This problem is for us serious breakage, as there are other applications not under our control reading the same areas, some of these crashes due to the marker files.
CAMEL-7523 Expose the component options for Camel CXF Expose the component options for Camel CXFas has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel CXF Expose the component options for Camel CXFas has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7521 Provide an option for unsynchronized aggregation when splitter is streaming and not parallel We use a splitter route that splits very large files.The splits need to be aggregated in order.The splitter is therefore configured with streaming=true and parallelProcessing=false.When there are multiple in-flight exchanges on the route (i.e. different files are being processed) the end-to-end processing time for each file is significantly impacted because each aggregation call is synchronized in MulticastProcessor.doAggregate method..It is not uncommon, in our environment, to have thousands of splits per file and the synchronization is significantly impacting the throughput of the route.I propose that an option be added (to splitter at least) to allow for an unsynchronized aggregation. The option would default to false for backward compatibility and would possibly be ignored if parallelProcessing = true.The body of the MulticastProcess.doAggregate method could be moved to a new, unsynchronized method (say doAggregateInternal). The MulticastProcessor.doAggregate method could remain synchronized (again for backward compatibility) but the body of that method would then call the new unsynchronized doAggregateInternal method. In this way, existing code would remain synchronized.The splitter, then, could call the unsynchronized doAggregateInternal method when the unsynchronizedAggregation option was true. Improvement Provide an option for unsynchronized aggregation when splitter is streaming and not parallel We use a splitter route that splits very large files.The splits need to be aggregated in order.The splitter is therefore configured with streaming=true and parallelProcessing=false.When there are multiple in-flight exchanges on the route (i.e. different files are being processed) the end-to-end processing time for each file is significantly impacted because each aggregation call is synchronized in MulticastProcessor.doAggregate method..It is not uncommon, in our environment, to have thousands of splits per file and the synchronization is significantly impacting the throughput of the route.I propose that an option be added (to splitter at least) to allow for an unsynchronized aggregation. The option would default to false for backward compatibility and would possibly be ignored if parallelProcessing = true.The body of the MulticastProcess.doAggregate method could be moved to a new, unsynchronized method (say doAggregateInternal). The MulticastProcessor.doAggregate method could remain synchronized (again for backward compatibility) but the body of that method would then call the new unsynchronized doAggregateInternal method. In this way, existing code would remain synchronized.The splitter, then, could call the unsynchronized doAggregateInternal method when the unsynchronizedAggregation option was true.
CAMEL-7520 Support to setup the handler even the Jetty server is created If there are two camel-jetty endpoint are using the same port, they are sharing the same jetty sever. But if one endpoint has a custom handler need to be set and another endpoint has not, the endpoints start order could affect the handler setting of jetty server.So we need to make sure the handler is set even the jetty server is started. Improvement Support to setup the handler even the Jetty server is created If there are two camel-jetty endpoint are using the same port, they are sharing the same jetty sever. But if one endpoint has a custom handler need to be set and another endpoint has not, the endpoints start order could affect the handler setting of jetty server.So we need to make sure the handler is set even the jetty server is started.
CAMEL-7517 Expose the component options for Camel HDFS2 Expose the component options for Camel HDFS2 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel HDFS2 Expose the component options for Camel HDFS2 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7516 Expose the component options for Camel HDFS Expose the component options for Camel HDFS as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel HDFS Expose the component options for Camel HDFS as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7515 Expose the component options for Camel Netty HTTP Expose the component options for Camel Netty HTTP as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Netty HTTP Expose the component options for Camel Netty HTTP as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7514 Dozer should not initialize the same DozerBeanMapperConfiguration twice It may be initialized twice Improvement Dozer should not initialize the same DozerBeanMapperConfiguration twice It may be initialized twice
CAMEL-7512 Expose the component options for Camel Netty Expose the component options for Camel Netty as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Netty Expose the component options for Camel Netty as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7511 Expose the component options for Camel Quartz2 Expose the component options for Camel Quartz2 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Quartz2 Expose the component options for Camel Quartz2 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7510 Expose the component options for Camel Quartz Expose the component options for Camel Quartz as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Quartz Expose the component options for Camel Quartz as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7509 Expose the component options for Camel JGroups Expose the component options for Camel JGroupsas has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel JGroups Expose the component options for Camel JGroupsas has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7508 Expose the component options for Camel Infinispan Expose the component options for Camel Infinispan as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Infinispan Expose the component options for Camel Infinispan as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7507 Expose the component options for Camel JPA Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel JPA Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7505 Explain the use of the UUID generator http://camel.apache.org/uuidgenerator.html mentions the different UUID generators which can be set on a context - but does not mention what it´s used for. Does an ID always be generated for an exchange? Will it be set as a header? Can I as an user interact with it and get id´s generated? etc Improvement Explain the use of the UUID generator http://camel.apache.org/uuidgenerator.html mentions the different UUID generators which can be set on a context - but does not mention what it's used for. Does an ID always be generated for an exchange? Will it be set as a header? Can I as an user interact with it and get id's generated? etc
CAMEL-7504 Improve the throttler to have discarding/filtering capabilities It would be nice if the throttler, http://camel.apache.org/throttler.html, could discard/filter the messages exceeding the limit.My usecase is to send alerts to a alering route, and stick the trottler in front of an smtp endpoint to limit the number of emails sent during a period. Improvement Improve the throttler to have discarding/filtering capabilities It would be nice if the throttler, http://camel.apache.org/throttler.html, could discard/filter the messages exceeding the limit.My usecase is to send alerts to a alering route, and stick the trottler in front of an smtp endpoint to limit the number of emails sent during a period.
CAMEL-7499 Expose the component options for Camel Mail Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel Mail Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7498 Expose the component options for Camel SQL Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel SQL Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7495 parameter json schema should support object types For example this DataSource optionhttps://github.com/apache/camel/blob/master/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java#L42We need to expose that in the json schema as an object type.And for configuring endpoint using uris, you would use a # registry lookup.eg dataSource=#myDataSource.But the schema needs to support this option Improvement parameter json schema should support object types For example this DataSource optionhttps://github.com/apache/camel/blob/master/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java#L42We need to expose that in the json schema as an object type.And for configuring endpoint using uris, you would use a # registry lookup.eg dataSource=#myDataSource.But the schema needs to support this option
CAMEL-7494 parameter json schema should support enum types enum fields is not supported, which we should. Improvement parameter json schema should support enum types enum fields is not supported, which we should.
CAMEL-7493 Expose the component options for Camel JDBC Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel JDBC Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7492 xpath/xquery - Allow to suppress exceptions when used as predicate Seehttp://stackoverflow.com/questions/24124015/apache-camel-xpath-routingIf you use a content based router, and have different kind of xml coming in, you may want to ignore any exceptions, if a < xpath > expression fails to evaluate as the xml does not fit that format.So if we have{code}   <xpath ignoreException="true">/foo/bar</xpath>{code}eg a new attribute to set a flag to ignore exceptions. Though naming is hard, so maybe there is a better name for the attribute.Related is also the validate eip, but I dont think we can use that as an expression/predicate: http://camel.apache.org/validateOtherwise we could do something like this; which may be even better as then it works with any Camel expression/predicate. {code:xml}<choice>   <when><validate><xpath>/foo/bar</xpath></validate>     <to uri="jms:fooOrBar"/>  </when>  ...{code} Improvement xpath/xquery - Allow to suppress exceptions when used as predicate Seehttp://stackoverflow.com/questions/24124015/apache-camel-xpath-routingIf you use a content based router, and have different kind of xml coming in, you may want to ignore any exceptions, if a < xpath > expression fails to evaluate as the xml does not fit that format.So if we have{code}   <xpath ignoreException="true">/foo/bar</xpath>{code}eg a new attribute to set a flag to ignore exceptions. Though naming is hard, so maybe there is a better name for the attribute.Related is also the validate eip, but I dont think we can use that as an expression/predicate: http://camel.apache.org/validateOtherwise we could do something like this; which may be even better as then it works with any Camel expression/predicate. {code:xml}<choice>   <when><validate><xpath>/foo/bar</xpath></validate>     <to uri="jms:fooOrBar"/>  </when>  ...{code}
CAMEL-7491 Added an option in throttler to throw RejectExecutionException instead of delaying the exchange Current throttler just delay the processing of the exchange, we need to add an option for throwing the RejectExcecutionException to stop the processing of exchange. With the help of ErrorHandler, camel route can return a meaningful response to the client immediately.  Improvement Added an option in throttler to throw RejectExecutionException instead of delaying the exchange Current throttler just delay the processing of the exchange, we need to add an option for throwing the RejectExcecutionException to stop the processing of exchange. With the help of ErrorHandler, camel route can return a meaningful response to the client immediately. 
CAMEL-7490 Redelivery delay cannot be modified in asynchronous mode for multiple retries with different redelivery intervals for each retry specified in Exchange.REDELIVERY_DELAY header parameter. My application needs to modify the redelivery delay at runtime, thereby overriding the values set by the application during configuration /loading time.The Redelivery delay for subsequent retries will have varied retry intervals and it needs to be done asynchronously. As of the current implementation, this is possible only in synchronous mode where by the thread handling the message on a route sleeps for specified amount time and uses the Exchange.REDELIVERY_DELAY header to populate the delay values for each reattempt.Issue 1:In asynchronous mode, the Exchange.REDELIVERY_DELAY is used only in the first attempt and the same value is used in subsequent attempts. Issue 2:There is no mechanism to set the delayPattern value if set for Redelivery Policy at runtime. Need to have some mechanism where the DELAY_PATTERN can be passed via Exchange at runtime such that it gets used for retries asynchronously.Possible Fix::-----------------Issue-1: org.apache.camel.processor:: RedeliveryErrorHandler---------------------------------------------------------------------In the method (processAsyncErrorHandler) below, the code calls calculateRedeliveryDelay() API for calculating the redelivery delay which is wrong.  It should be calling the wrapper API - determineRedeliveryDelay() in its place which will allow the usage of Exchange.REDELIVERY_DELAY being passed in the headers. That way, it will allow the user to have the complete asynchronous behavior based on the values being passed to the CAMEL at runtime.The following code points to the bug exists::public abstract class RedeliveryErrorHandler extends ErrorHandlerSupport implements AsyncProcessor, ShutdownPrepared {...........    private class AsyncRedeliveryTask implements Callable<Boolean> {..............    protected void processAsyncErrorHandler(final Exchange exchange, final AsyncCallback callback, final RedeliveryData data) {..............        if (data.redeliveryCounter > 0) {            // we are doing a redelivery then a thread pool must be configured (see the doStart method)            ObjectHelper.notNull(executorService, "Redelivery is enabled but ExecutorService has not been configured.", this);            // let the RedeliverTask be the logic which tries to redeliver the Exchange which we can used a scheduler to            // have it being executed in the future, or immediately            // Note: the data.redeliverFromSync should be kept as is, in case it was enabled previously            // to ensure the callback will continue routing from where we left            AsyncRedeliveryTask task = new AsyncRedeliveryTask(exchange, callback, data);            // calculate the redelivery delay            data.redeliveryDelay = data.currentRedeliveryPolicy.calculateRedeliveryDelay(data.redeliveryDelay, data.redeliveryCounter);            if (data.redeliveryDelay > 0) {                // schedule the redelivery task                if (log.isTraceEnabled()) {                    log.trace("Scheduling redelivery task to run in {} millis for exchangeId: {}", data.redeliveryDelay, exchange.getExchangeId());                }                executorService.schedule(task, data.redeliveryDelay, TimeUnit.MILLISECONDS);            } else {                // execute the task immediately                executorService.submit(task);            }        }    }}} Improvement Redelivery delay cannot be modified in asynchronous mode for multiple retries with different redelivery intervals for each retry specified in Exchange.REDELIVERY_DELAY header parameter. My application needs to modify the redelivery delay at runtime, thereby overriding the values set by the application during configuration /loading time.The Redelivery delay for subsequent retries will have varied retry intervals and it needs to be done asynchronously. As of the current implementation, this is possible only in synchronous mode where by the thread handling the message on a route sleeps for specified amount time and uses the Exchange.REDELIVERY_DELAY header to populate the delay values for each reattempt.Issue 1:In asynchronous mode, the Exchange.REDELIVERY_DELAY is used only in the first attempt and the same value is used in subsequent attempts. Issue 2:There is no mechanism to set the delayPattern value if set for Redelivery Policy at runtime. Need to have some mechanism where the DELAY_PATTERN can be passed via Exchange at runtime such that it gets used for retries asynchronously.Possible Fix::-----------------Issue-1: org.apache.camel.processor:: RedeliveryErrorHandler---------------------------------------------------------------------In the method (processAsyncErrorHandler) below, the code calls calculateRedeliveryDelay() API for calculating the redelivery delay which is wrong.  It should be calling the wrapper API - determineRedeliveryDelay() in its place which will allow the usage of Exchange.REDELIVERY_DELAY being passed in the headers. That way, it will allow the user to have the complete asynchronous behavior based on the values being passed to the CAMEL at runtime.The following code points to the bug exists::public abstract class RedeliveryErrorHandler extends ErrorHandlerSupport implements AsyncProcessor, ShutdownPrepared {...........    private class AsyncRedeliveryTask implements Callable<Boolean> {..............    protected void processAsyncErrorHandler(final Exchange exchange, final AsyncCallback callback, final RedeliveryData data) {..............        if (data.redeliveryCounter > 0) {            // we are doing a redelivery then a thread pool must be configured (see the doStart method)            ObjectHelper.notNull(executorService, "Redelivery is enabled but ExecutorService has not been configured.", this);            // let the RedeliverTask be the logic which tries to redeliver the Exchange which we can used a scheduler to            // have it being executed in the future, or immediately            // Note: the data.redeliverFromSync should be kept as is, in case it was enabled previously            // to ensure the callback will continue routing from where we left            AsyncRedeliveryTask task = new AsyncRedeliveryTask(exchange, callback, data);            // calculate the redelivery delay            data.redeliveryDelay = data.currentRedeliveryPolicy.calculateRedeliveryDelay(data.redeliveryDelay, data.redeliveryCounter);            if (data.redeliveryDelay > 0) {                // schedule the redelivery task                if (log.isTraceEnabled()) {                    log.trace("Scheduling redelivery task to run in {} millis for exchangeId: {}", data.redeliveryDelay, exchange.getExchangeId());                }                executorService.schedule(task, data.redeliveryDelay, TimeUnit.MILLISECONDS);            } else {                // execute the task immediately                executorService.submit(task);            }        }    }}}
CAMEL-7486 Expose the component options for Camel MyBatis Expose the component options for Camel MyBatis as has already been done for camel-core components and selected others such as jms / ftp / twitter etc. Improvement Expose the component options for Camel MyBatis Expose the component options for Camel MyBatis as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.
CAMEL-7484 Add an option to JaxbDataFormat to include schema location in xml Add this setting to marshaller configuration will output schema location in the generated xml:{code}marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,"schemaLocation.xsd");{code} New Feature Add an option to JaxbDataFormat to include schema location in xml Add this setting to marshaller configuration will output schema location in the generated xml:{code}marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,"schemaLocation.xsd");{code}
CAMEL-7481 Add karaf feature for camel-gora We need to provide a camel-gora feature for using camel-gora in karaf. Task Add karaf feature for camel-gora We need to provide a camel-gora feature for using camel-gora in karaf.
CAMEL-7480 camel:run plugin - Add jolokia agent This allows to introspect the running camel app easier using jolokia. Improvement camel:run plugin - Add jolokia agent This allows to introspect the running camel app easier using jolokia.
CAMEL-7477 camel-jclouds - operation is wrong in docs Seehttp://camel.465427.n5.nabble.com/camel-jclouds-parameter-operation-ignored-tp5750789p5750791.htmlThough the value of the operation would be better if it was just get or put etc. But the key should be CamelJcloudsOperation still. Task camel-jclouds - operation is wrong in docs Seehttp://camel.465427.n5.nabble.com/camel-jclouds-parameter-operation-ignored-tp5750789p5750791.htmlThough the value of the operation would be better if it was just get or put etc. But the key should be CamelJcloudsOperation still.
CAMEL-7474 Error blocks mail-consumer If there is an error in the mail-consumer while consuming the mail, you cannot skip this mail and move to the next:For example:      from("imaps://{{email.server}}?username={{email.username}}&password=RAW({{email.password}})"         + "&delete=true&copyTo={{email.folder}}/done&unseen=true& folderName={{email.folder}}"         + "&fetchSize=1&contentType=text/html")moves the processed mail in the "done"-subfolder of the email-folder, if everything is ok, eg, the route finishes. It is possible, to handle an error, _after_ the consumer starts the route, but if the mail-consumer hits an error _before_ the route starts, the error will be logged and nothing more happens. This means, the processed mail remains unchanged in in the email-folder and will be the next polled email, that leads to the same error, where the error will be logged and...This endless circle cannot be broken, because the email cannot be marked as (unsuccessfully) processed. Improvement Error blocks mail-consumer If there is an error in the mail-consumer while consuming the mail, you cannot skip this mail and move to the next:For example:      from("imaps://{{email.server}}?username={{email.username}}&password=RAW({{email.password}})"         + "&delete=true&copyTo={{email.folder}}/done&unseen=true& folderName={{email.folder}}"         + "&fetchSize=1&contentType=text/html")moves the processed mail in the "done"-subfolder of the email-folder, if everything is ok, eg, the route finishes. It is possible, to handle an error, _after_ the consumer starts the route, but if the mail-consumer hits an error _before_ the route starts, the error will be logged and nothing more happens. This means, the processed mail remains unchanged in in the email-folder and will be the next polled email, that leads to the same error, where the error will be logged and...This endless circle cannot be broken, because the email cannot be marked as (unsuccessfully) processed.
CAMEL-7473 MQTT consumer - Add topic destination name as header So users can know which topic the message came from.See nabblehttp://camel.465427.n5.nabble.com/MQTT-component-topic-header-missing-tp5751347.html Improvement MQTT consumer - Add topic destination name as header So users can know which topic the message came from.See nabblehttp://camel.465427.n5.nabble.com/MQTT-component-topic-header-missing-tp5751347.html
CAMEL-7467 Spring-orm 4.x removed the support of ibatis  Spring-orm 4.x removed the support of iBatis and suggest user to use iBatis spring support directly. But ibatis spring support only support iBatis 3, and current camel is using ibatis2. We need to update the camel-ibatis to use iBatis3 to address the upgrade issue. Sub-task Spring-orm 4.x removed the support of ibatis  Spring-orm 4.x removed the support of iBatis and suggest user to use iBatis spring support directly. But ibatis spring support only support iBatis 3, and current camel is using ibatis2. We need to update the camel-ibatis to use iBatis3 to address the upgrade issue.
CAMEL-7466 Allow to configure flatpack from its unmarshall tag Allow to configure flatpack using its XML unmashall {{<flatpack />}} tag.Example:{code:xml}<unmarshal>    <flatpack definition="PEOPLE-FixedLength.pzmap.xml" fixed="true" ignoreExtraColumns="true" allowShortLines="true"/></unmarshal>{code} Improvement Allow to configure flatpack from its unmarshall tag Allow to configure flatpack using its XML unmashall {{<flatpack />}} tag.Example:{code:xml}<unmarshal>    <flatpack definition="PEOPLE-FixedLength.pzmap.xml" fixed="true" ignoreExtraColumns="true" allowShortLines="true"/></unmarshal>{code}
CAMEL-7465 DefaultHeaderFIlterStrategy should be case insensitive. I created my headerFilterStrategy to filter HTTP header "Content-Type" as follows.{code}public class MyCxfRsHeaderFilterStrategy extends DefaultHeaderFilterStrategy {    public CxfRsHeaderFilterStrategy() {        initialize();      }    protected void initialize() {        :       (snip)        :        getOutFilter().add("Content-Type");        // filter headers begin with "Camel" or "org.apache.camel"        setOutFilterPattern("(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*");    }}{code}But I can not filter header if header name is "content-type".(all character is lower case).HTTP header name is case insensitive. so It will be useful if DefaultFilter can filter case insensitive. Improvement DefaultHeaderFIlterStrategy should be case insensitive. I created my headerFilterStrategy to filter HTTP header "Content-Type" as follows.{code}public class MyCxfRsHeaderFilterStrategy extends DefaultHeaderFilterStrategy {    public CxfRsHeaderFilterStrategy() {        initialize();      }    protected void initialize() {        :       (snip)        :        getOutFilter().add("Content-Type");        // filter headers begin with "Camel" or "org.apache.camel"        setOutFilterPattern("(Camel|org\\.apache\\.camel)[\\.|a-z|A-z|0-9]*");    }}{code}But I can not filter header if header name is "content-type".(all character is lower case).HTTP header name is case insensitive. so It will be useful if DefaultFilter can filter case insensitive.
CAMEL-7463 Why tokenize (and some others) does not support properties substitution? Hi, I'm trying to use the properties substitution in my tokenizer with no success.I've also just seen that the camel-spring.xsd definition does not declare: <xs:anyAttribute namespace="##other" processContents="skip"/>In many complex types, so spring is not able to use the defined 'prop' namespace as prefix for the tokenizer and csv parser.This is my route and I'd like the substitute the 'csv.row.delimiter', 'csv.row.group' (in the tokenizer) and csv.row.delimiter (in the csv)<route>  <!-- ACTUALLY READ THE CSV stream -->  <from uri="seda:splitting" />   <split parallelProcessing="false" stopOnException="false" streaming="true">   <tokenize prop:token="csv.row.delimiter" prop:group="csv.row.group" />    <unmarshal>	<csv autogenColumns="true" prop:delimiter="csv.row.delimiter"              skipFirstLine="false" useMaps="true" configRef="csvConfig"              lazyLoad="false" />    </unmarshal>   <to uri="seda:processing" />  </split></route> Is there a concrete need for this situation? If ther's not, you'll consider to merge a contribution patch on this?I'm using the master branch so I'm on 2.14-SNAPSHOTIf you kindly want to check here:https://github.com/ccancellieri/camel_poc/blob/master/src/main/resources/META-INF/spring/camel-context.xml#L79(at line 79) is commented out what I was trying to use (with no success).As you could see I'm using it in the file endpoint url and it works so there's no problem with file recognition.In the properties file I've:csv.row.group=2csv.row.delimiter=\nThe error is:Exception in thread "main" org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 79 in XML document from file [/home/carlo/work/code/java/camel_poc/target/classes/META-INF/spring/camel-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'prop:token' is not allowed to appear in element 'tokenize'.	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131)	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:522)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:204)	at org.apache.camel.spring.Main.doStart(Main.java:156)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.main.MainSupport.run(MainSupport.java:147)	at org.apache.camel.main.MainSupport.run(MainSupport.java:351)	at org.apache.camel.spring.Main.main(Main.java:89)Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'prop:token' is not allowed to appear in element 'tokenize'.	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:423)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3188)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2665)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2072)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:731)	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:377)	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2756)	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647)	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:232)	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:284)	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388)	... 19 more Improvement Why tokenize (and some others) does not support properties substitution? Hi, I'm trying to use the properties substitution in my tokenizer with no success.I've also just seen that the camel-spring.xsd definition does not declare: <xs:anyAttribute namespace="##other" processContents="skip"/>In many complex types, so spring is not able to use the defined 'prop' namespace as prefix for the tokenizer and csv parser.This is my route and I'd like the substitute the 'csv.row.delimiter', 'csv.row.group' (in the tokenizer) and csv.row.delimiter (in the csv)<route>  <!-- ACTUALLY READ THE CSV stream -->  <from uri="seda:splitting" />   <split parallelProcessing="false" stopOnException="false" streaming="true">   <tokenize prop:token="csv.row.delimiter" prop:group="csv.row.group" />    <unmarshal>	<csv autogenColumns="true" prop:delimiter="csv.row.delimiter"              skipFirstLine="false" useMaps="true" configRef="csvConfig"              lazyLoad="false" />    </unmarshal>   <to uri="seda:processing" />  </split></route> Is there a concrete need for this situation? If ther's not, you'll consider to merge a contribution patch on this?I'm using the master branch so I'm on 2.14-SNAPSHOTIf you kindly want to check here:https://github.com/ccancellieri/camel_poc/blob/master/src/main/resources/META-INF/spring/camel-context.xml#L79(at line 79) is commented out what I was trying to use (with no success).As you could see I'm using it in the file endpoint url and it works so there's no problem with file recognition.In the properties file I've:csv.row.group=2csv.row.delimiter=\nThe error is:Exception in thread "main" org.springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 79 in XML document from file [/home/carlo/work/code/java/camel_poc/target/classes/META-INF/spring/camel-context.xml] is invalid; nested exception is org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'prop:token' is not allowed to appear in element 'tokenize'.	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:396)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131)	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:522)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:436)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:204)	at org.apache.camel.spring.Main.doStart(Main.java:156)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.main.MainSupport.run(MainSupport.java:147)	at org.apache.camel.main.MainSupport.run(MainSupport.java:351)	at org.apache.camel.spring.Main.main(Main.java:89)Caused by: org.xml.sax.SAXParseException: cvc-complex-type.3.2.2: Attribute 'prop:token' is not allowed to appear in element 'tokenize'.	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:195)	at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.error(ErrorHandlerWrapper.java:131)	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:384)	at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:318)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator$XSIErrorReporter.reportError(XMLSchemaValidator.java:423)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.reportSchemaError(XMLSchemaValidator.java:3188)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.processAttributes(XMLSchemaValidator.java:2665)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.handleStartElement(XMLSchemaValidator.java:2072)	at com.sun.org.apache.xerces.internal.impl.xs.XMLSchemaValidator.emptyElement(XMLSchemaValidator.java:731)	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:377)	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2756)	at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:647)	at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:140)	at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:511)	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:808)	at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:737)	at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:119)	at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:232)	at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:284)	at org.springframework.beans.factory.xml.DefaultDocumentLoader.loadDocument(DefaultDocumentLoader.java:75)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:388)	... 19 more
CAMEL-7461 Idempotent inconsistensies / idempotent consumer should allow for messageId of any type See http://camel.465427.n5.nabble.com/Idempotent-inconsistencies-td5751484.html for a background.Basically there is inconsistency between a idempotent consumer and the repository. The repository is capable of holding any type, while the consumer is non-parameterized and uses String as it's message type.It would be very handy to have the messageid as a domain type for any application, and thus the consumer should allow for a parameterized type T.This will also probably mean that JpaMessageIdRepository should allow for any persistent type.If doing this camel would be generic on the type, and allow for supporting application domain types w/o customizations. Improvement Idempotent inconsistensies / idempotent consumer should allow for messageId of any type See http://camel.465427.n5.nabble.com/Idempotent-inconsistencies-td5751484.html for a background.Basically there is inconsistency between a idempotent consumer and the repository. The repository is capable of holding any type, while the consumer is non-parameterized and uses String as it's message type.It would be very handy to have the messageid as a domain type for any application, and thus the consumer should allow for a parameterized type T.This will also probably mean that JpaMessageIdRepository should allow for any persistent type.If doing this camel would be generic on the type, and allow for supporting application domain types w/o customizations.
CAMEL-7458 Add noggit to be installed with camel-solr feature Using camel-solr and interacting with a solr server will throw various errors now that it's been updated to use the 4.x line of libraries due to missing the org.noggit classes.  The solrj bundle has an optional import for noggit which needs to be satisfied. Right now noggit isn't a bundle but SMX4-1755 will be resolving that. Task Add noggit to be installed with camel-solr feature Using camel-solr and interacting with a solr server will throw various errors now that it's been updated to use the 4.x line of libraries due to missing the org.noggit classes.  The solrj bundle has an optional import for noggit which needs to be satisfied. Right now noggit isn't a bundle but SMX4-1755 will be resolving that.
CAMEL-7455 supporting body in sql component Adding support for sending the body as one sql parameter:Answer from Claus in mailing list:Yeah for a single parameter, or just to refer to the body as is, or toallow using simple expressions, we could maybe look at adding supportfor that to the sql component,so eg :#body just refers to the body itselfOr allow doing :#${body} and have a simple expression available, thatgives you a bit more power.Though support for :#body is likely the easiest at first. New Feature supporting body in sql component Adding support for sending the body as one sql parameter:Answer from Claus in mailing list:Yeah for a single parameter, or just to refer to the body as is, or toallow using simple expressions, we could maybe look at adding supportfor that to the sql component,so eg :#body just refers to the body itselfOr allow doing :#${body} and have a simple expression available, thatgives you a bit more power.Though support for :#body is likely the easiest at first.
CAMEL-7454 Camel-Quartz2 Scheduler Name Difference We have a situation where we have multiple quartz routes in different camel contexts. We want to have the same scheduler name for these schedulers. In camel-quartz2 version 2.12.2, it works as expected.In camel-quartz2 version 2.13.0, each scheduler is appended with the context's name.*Files*{code:title = quartz.LOCAL.properties|borderStyle=solid}#============================================================================# Configure Main Scheduler Properties  #============================================================================org.quartz.scheduler.instanceName = Test2org.quartz.scheduler.instanceId = AUTO#============================================================================# Configure ThreadPool  #============================================================================org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPoolorg.quartz.threadPool.threadCount = 25org.quartz.threadPool.threadPriority = 5#============================================================================# Configure JobStore  #============================================================================org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTXorg.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.OracleDelegateorg.quartz.jobStore.useProperties = trueorg.quartz.jobStore.dataSource = myDSorg.quartz.jobStore.tablePrefix = QRTZ_org.quartz.jobStore.isClustered = trueorg.quartz.jobStore.clusterCheckinInterval = 20000org.quartz.dataSource.myDS.driver = oracle.jdbc.driver.OracleDriverorg.quartz.dataSource.myDS.URL = jdbc:oracle:thin:@XXXXXXXorg.quartz.dataSource.myDS.user = XXXXXorg.quartz.dataSource.myDS.password = XXXXXXXXorg.quartz.dataSource.myDS.maxConnections = 5org.quartz.dataSource.myDS.validationQuery=select 0 from dual#============================================================================# Configure Trigger Logging  #============================================================================org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingTriggerHistoryPluginorg.quartz.plugin.triggHistory.triggerFiredMessage = Trigger \{1\}.\{0\} fired job \{6\}.\{5\} at: \{4, date, HH:mm:ss MM/dd/yyyy}org.quartz.plugin.triggHistory.triggerCompleteMessage = Trigger \{1\}.\{0\} completed firing job \{6\}.\{5\} at \{4, date, HH:mm:ss MM/dd/yyyy\}.{code}{code:title = TestContext1.xml|borderStyle=solid}<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"	xmlns:context="http://www.springframework.org/schema/context"	xmlns:util="http://www.springframework.org/schema/util"	xsi:schemaLocation="       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd       http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd">	 <bean id="quartz1" class="org.apache.camel.component.quartz2.QuartzComponent">		<property name="propertiesFile" value="config/quartz/quartz.LOCAL.properties" />  	</bean>	<camelContext id="TestContext1" xmlns="http://camel.apache.org/schema/spring"		xmlns:oas="http://www.verizonwireless.com/oas">		<route id="route1">			<from uri="quartz1://RSSX/test1?pauseJob=false&amp;deleteJob=false&amp;stateful=true&amp;cron=30+*+*+*+*+?" />			<log message="${header.scheduler} fired route 1"/>				</route>			</camelContext>	</beans>{code}*Results*Running camel-quartz2 version 2.12.2:{code:xml}Quartz scheduler 'Test2' initialized from an externally provided properties instance.{code}Running camel-quartz2 version 2.13.0:{code:xml}Quartz scheduler 'Test2-TestContext1' initialized from an externally provided properties instance.{code} Improvement Camel-Quartz2 Scheduler Name Difference We have a situation where we have multiple quartz routes in different camel contexts. We want to have the same scheduler name for these schedulers. In camel-quartz2 version 2.12.2, it works as expected.In camel-quartz2 version 2.13.0, each scheduler is appended with the context's name.*Files*{code:title = quartz.LOCAL.properties|borderStyle=solid}#============================================================================# Configure Main Scheduler Properties  #============================================================================org.quartz.scheduler.instanceName = Test2org.quartz.scheduler.instanceId = AUTO#============================================================================# Configure ThreadPool  #============================================================================org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPoolorg.quartz.threadPool.threadCount = 25org.quartz.threadPool.threadPriority = 5#============================================================================# Configure JobStore  #============================================================================org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTXorg.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.OracleDelegateorg.quartz.jobStore.useProperties = trueorg.quartz.jobStore.dataSource = myDSorg.quartz.jobStore.tablePrefix = QRTZ_org.quartz.jobStore.isClustered = trueorg.quartz.jobStore.clusterCheckinInterval = 20000org.quartz.dataSource.myDS.driver = oracle.jdbc.driver.OracleDriverorg.quartz.dataSource.myDS.URL = jdbc:oracle:thin:@XXXXXXXorg.quartz.dataSource.myDS.user = XXXXXorg.quartz.dataSource.myDS.password = XXXXXXXXorg.quartz.dataSource.myDS.maxConnections = 5org.quartz.dataSource.myDS.validationQuery=select 0 from dual#============================================================================# Configure Trigger Logging  #============================================================================org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingTriggerHistoryPluginorg.quartz.plugin.triggHistory.triggerFiredMessage = Trigger \{1\}.\{0\} fired job \{6\}.\{5\} at: \{4, date, HH:mm:ss MM/dd/yyyy}org.quartz.plugin.triggHistory.triggerCompleteMessage = Trigger \{1\}.\{0\} completed firing job \{6\}.\{5\} at \{4, date, HH:mm:ss MM/dd/yyyy\}.{code}{code:title = TestContext1.xml|borderStyle=solid}<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"	xmlns:context="http://www.springframework.org/schema/context"	xmlns:util="http://www.springframework.org/schema/util"	xsi:schemaLocation="       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd       http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util.xsd">	 <bean id="quartz1" class="org.apache.camel.component.quartz2.QuartzComponent">		<property name="propertiesFile" value="config/quartz/quartz.LOCAL.properties" />  	</bean>	<camelContext id="TestContext1" xmlns="http://camel.apache.org/schema/spring"		xmlns:oas="http://www.verizonwireless.com/oas">		<route id="route1">			<from uri="quartz1://RSSX/test1?pauseJob=false&amp;deleteJob=false&amp;stateful=true&amp;cron=30+*+*+*+*+?" />			<log message="${header.scheduler} fired route 1"/>				</route>			</camelContext>	</beans>{code}*Results*Running camel-quartz2 version 2.12.2:{code:xml}Quartz scheduler 'Test2' initialized from an externally provided properties instance.{code}Running camel-quartz2 version 2.13.0:{code:xml}Quartz scheduler 'Test2-TestContext1' initialized from an externally provided properties instance.{code}
CAMEL-7453 Add schema attribut to the SoapJaxbDataFormat schema attribute can be used for schema validating of xml. Improvement Add schema attribut to the SoapJaxbDataFormat schema attribute can be used for schema validating of xml.
CAMEL-7447 Allow to stream the result of a database query Allow to stream the result of a database queryExample:{code}from("direct:streamDB")    .setBody(constant("select * from customer"))    .to("jdbc:db?outputType=StreamList")    .split(body())        .to("direct:processSingleActor"){code} New Feature Allow to stream the result of a database query Allow to stream the result of a database queryExample:{code}from("direct:streamDB")    .setBody(constant("select * from customer"))    .to("jdbc:db?outputType=StreamList")    .split(body())        .to("direct:processSingleActor"){code}
CAMEL-7444 Camel MDC - Should propagate all keys When using MDC in Camel, then we only propagate a fixed known number of keys that are Camel specific.We should open this so we propagate any custom mdc keys too.Seehttp://camel.465427.n5.nabble.com/Camel-MDC-Logging-td5751180.html Improvement Camel MDC - Should propagate all keys When using MDC in Camel, then we only propagate a fixed known number of keys that are Camel specific.We should open this so we propagate any custom mdc keys too.Seehttp://camel.465427.n5.nabble.com/Camel-MDC-Logging-td5751180.html
CAMEL-7441 The Camel Bindy documentation does not provide information on the quoting property The documentation at http://camel.apache.org/bindy.html does not provide information on the quoting property.  Can the doc be updated to provide details on this option? Task The Camel Bindy documentation does not provide information on the quoting property The documentation at http://camel.apache.org/bindy.html does not provide information on the quoting property.  Can the doc be updated to provide details on this option?
CAMEL-7436 Copy CXF Http header into Camel message header It could useful for the user to use the http related header after camel-cxf endpoint just as camel-jetty or camel-netty-http. Improvement Copy CXF Http header into Camel message header It could useful for the user to use the http related header after camel-cxf endpoint just as camel-jetty or camel-netty-http.
CAMEL-7434 Provide a way to force the completion of a aggregate exchange from an external event There is a way to do this by creating a "trigger" exchange that is handled in a special way by the aggregation strategy and a completion predicate. But this solution is quite intrusive and painful to write.It would actually be much easier if the AggregateProcessor would implement and expose the following methods:public void forceCompletionOfGroup(String key)public Expression getCorrelationExpression()This way, it becomes possible to control "externally" an aggregator without having to implement some intrusive logic. New Feature Provide a way to force the completion of a aggregate exchange from an external event There is a way to do this by creating a "trigger" exchange that is handled in a special way by the aggregation strategy and a completion predicate. But this solution is quite intrusive and painful to write.It would actually be much easier if the AggregateProcessor would implement and expose the following methods:public void forceCompletionOfGroup(String key)public Expression getCorrelationExpression()This way, it becomes possible to control "externally" an aggregator without having to implement some intrusive logic.
CAMEL-7433 Please create a preCompletionPredicate for camel aggregator We often face the same issue when it comes to aggregating multiple records into a single file.A very common requirement that we have is that the aggregated files that we produce must not be bigger than a certain size (for example, 10MB). Relying on a predefined maximum of records or doing the size check after the aggregation is not option.So ideally, before an exchange (holding a single file record) gets aggregated by a Camel aggregator, we should have a way to verify that the new exchange will fit into the current aggregate. If not, the current aggregate should be completed. And only after that, the new exchange could be aggregated.This could be easily achieved if Camel's aggregator would have a new optional attribute 'preCompletionPredicate'. This predicate could be have an interface/signature as follows:boolean preComplete(Exchange aggregate, Exchange newExchange);The predicate implementation would then be able to use information from both exchanges to know if the aggregate should be completed before aggregating the new exchange or not. New Feature Please create a preCompletionPredicate for camel aggregator We often face the same issue when it comes to aggregating multiple records into a single file.A very common requirement that we have is that the aggregated files that we produce must not be bigger than a certain size (for example, 10MB). Relying on a predefined maximum of records or doing the size check after the aggregation is not option.So ideally, before an exchange (holding a single file record) gets aggregated by a Camel aggregator, we should have a way to verify that the new exchange will fit into the current aggregate. If not, the current aggregate should be completed. And only after that, the new exchange could be aggregated.This could be easily achieved if Camel's aggregator would have a new optional attribute 'preCompletionPredicate'. This predicate could be have an interface/signature as follows:boolean preComplete(Exchange aggregate, Exchange newExchange);The predicate implementation would then be able to use information from both exchanges to know if the aggregate should be completed before aggregating the new exchange or not.
CAMEL-7430 Support property setting in BeanIODataFormat  Here is [the user request| http://camel.465427.n5.nabble.com/BeanIODataFormat-should-support-properties-tp5750966.html ] for adding properties support in BeanIODataFormat. Improvement Support property setting in BeanIODataFormat  Here is [the user request| http://camel.465427.n5.nabble.com/BeanIODataFormat-should-support-properties-tp5750966.html ] for adding properties support in BeanIODataFormat.
CAMEL-7425 Add EventDrivenPollingConsumer option to specify timeout This is a follow-up feature request for CAMEL-7411.Since the {{EventDrivenPollingConsumer}} is blocking on the internal queue by default now, another option (e.g. {{pollingConsumerBlockTimeout}}) would be helpful to specify the maximum wait time on the internal {{queue.offer(…)}} call. New Feature Add EventDrivenPollingConsumer option to specify timeout This is a follow-up feature request for CAMEL-7411.Since the {{EventDrivenPollingConsumer}} is blocking on the internal queue by default now, another option (e.g. {{pollingConsumerBlockTimeout}}) would be helpful to specify the maximum wait time on the internal {{queue.offer(...)}} call.
CAMEL-7421 camel-rabbitmq - Channel is not fully thread safe Channels are not fully thread-safe (see below), as a result the RabbitMQProducer shouldn't use a single Channel. In short, Channels should be pooled, and each thread given a Channel from the pool.http://www.rabbitmq.com/api-guide.html#channel-threads {quote}applications should prefer using a Channel per thread instead of sharing the same Channel across multiple threads.{quote}http://www.rabbitmq.com/javadoc/com/rabbitmq/client/Channel.html {quote}An important caveat to this is that confirms are not handled properly when a Channel is shared between multiple threads. In that scenario, it is therefore important to ensure that the Channel instance is not accessed concurrently by multiple threads.{quote} Improvement camel-rabbitmq - Channel is not fully thread safe Channels are not fully thread-safe (see below), as a result the RabbitMQProducer shouldn't use a single Channel. In short, Channels should be pooled, and each thread given a Channel from the pool.http://www.rabbitmq.com/api-guide.html#channel-threads {quote}applications should prefer using a Channel per thread instead of sharing the same Channel across multiple threads.{quote}http://www.rabbitmq.com/javadoc/com/rabbitmq/client/Channel.html {quote}An important caveat to this is that confirms are not handled properly when a Channel is shared between multiple threads. In that scenario, it is therefore important to ensure that the Channel instance is not accessed concurrently by multiple threads.{quote}
CAMEL-7404 Zip Aggregation Strategy preserves folder structure When using the ZipAggregationStrategy with the file as the source and recursion on, all of the files would be added to the zip file in the root level. Improvement Zip Aggregation Strategy preserves folder structure When using the ZipAggregationStrategy with the file as the source and recursion on, all of the files would be added to the zip file in the root level.
CAMEL-7403 Update camel-hl7 to support HAPI v2.2 Update camel-hl7 to the current HAPI version, introducing the concept of a HapiContext to bundle all configurations related to HL7 message handling (cf. http://hl7api.sourceforge.net/base/apidocs/ca/uhn/hl7v2/HapiContext.html). Improvement Update camel-hl7 to support HAPI v2.2 Update camel-hl7 to the current HAPI version, introducing the concept of a HapiContext to bundle all configurations related to HL7 message handling (cf. http://hl7api.sourceforge.net/base/apidocs/ca/uhn/hl7v2/HapiContext.html).
CAMEL-7402 karaf osig tests - Some failures due dependency problems seems like the camel-aws has some problems in osgi land. Running the tests/camel-itest-osgi and it fails due some no class found exception.There is likely other failures we need to address. Task karaf osig tests - Some failures due dependency problems seems like the camel-aws has some problems in osgi land. Running the tests/camel-itest-osgi and it fails due some no class found exception.There is likely other failures we need to address.
CAMEL-7401 Added continuationTimeout option to camel-cxf component camel-cxf component use CXF continuation async API by default, we need to  let user set the continuationTimeout option to avoid the suspend option wait forever. Improvement Added continuationTimeout option to camel-cxf component camel-cxf component use CXF continuation async API by default, we need to  let user set the continuationTimeout option to avoid the suspend option wait forever.
CAMEL-7397 support to deploy the camel-example-spring-javaconfig into Karaf camel-example-spring-javaconfig should be deployed into OSGi container out of box. Improvement support to deploy the camel-example-spring-javaconfig into Karaf camel-example-spring-javaconfig should be deployed into OSGi container out of box.
CAMEL-7396 Add defaultMethodName option to camel-xmlrpc We should provide the defaultMethodName option to help user to reduce the message header setting of xmlrpc. Improvement Add defaultMethodName option to camel-xmlrpc We should provide the defaultMethodName option to help user to reduce the message header setting of xmlrpc.
CAMEL-7395 Simplify the way CxfRsProducer JAXRSClientFactoryBean can be tested I was working on fixing the regression where CxfRsProducer  was losing the in/out interceptors set from Blueprint/Spring caused by my own patch to support setting interceptors directly on CxfRsEndpoint and my test passed without me fixing CxfRsEndpoint, I checked, CxfRsEndpoint was already fixed :-)That said, I'd still  like to provide a test patch with minor modifications to CxfRsProducer to make it simpler to test the underlying JAXRSClientFactoryBean was properly set up. The attached test file can be extended with many more tests making sure no regression can be introduced Test Simplify the way CxfRsProducer JAXRSClientFactoryBean can be tested I was working on fixing the regression where CxfRsProducer  was losing the in/out interceptors set from Blueprint/Spring caused by my own patch to support setting interceptors directly on CxfRsEndpoint and my test passed without me fixing CxfRsEndpoint, I checked, CxfRsEndpoint was already fixed :-)That said, I'd still  like to provide a test patch with minor modifications to CxfRsProducer to make it simpler to test the underlying JAXRSClientFactoryBean was properly set up. The attached test file can be extended with many more tests making sure no regression can be introduced
CAMEL-7394 camel-netty-http - Add support for HTTP_PATH for dynamic-to This allows to reuse same netty producer for dynamic-to on the same host:port, but using dynamic context-path and query parameters. Improvement camel-netty-http - Add support for HTTP_PATH for dynamic-to This allows to reuse same netty producer for dynamic-to on the same host:port, but using dynamic context-path and query parameters.
CAMEL-7393 Recipient List - Allow to define cache size, so you can tweak that or turn it off When using recipient list we use a default producer cache with a default size. We should allow end user to configure the size, so they can control that, or even turn it off, in case they use one-time only uris in the recipinent list (so they are not reuse later). Then it does not make sense to cache them anyway. Improvement Recipient List - Allow to define cache size, so you can tweak that or turn it off When using recipient list we use a default producer cache with a default size. We should allow end user to configure the size, so they can control that, or even turn it off, in case they use one-time only uris in the recipinent list (so they are not reuse later). Then it does not make sense to cache them anyway.
CAMEL-7387 MainSupport - Should not barf if no CamelContext found For example if you have multiple spring xml files, and one of them do not contain a <camelContext> then we may have MainSupport in camel-core barf. We should make that optional.{code}Exception in thread "main" org.apache.camel.CamelException: Cannot find any Camel Context from the Application Context. Please check your Application Context setting	at org.apache.camel.main.MainSupport.postProcessContext(MainSupport.java:397)	at org.apache.camel.spring.Main.doStart(Main.java:146)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)	at org.apache.camel.main.MainSupport.run(MainSupport.java:352)	at org.apache.camel.spring.Main.main(Main.java:74)[                      Thread-4] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.{code} Improvement MainSupport - Should not barf if no CamelContext found For example if you have multiple spring xml files, and one of them do not contain a <camelContext> then we may have MainSupport in camel-core barf. We should make that optional.{code}Exception in thread "main" org.apache.camel.CamelException: Cannot find any Camel Context from the Application Context. Please check your Application Context setting	at org.apache.camel.main.MainSupport.postProcessContext(MainSupport.java:397)	at org.apache.camel.spring.Main.doStart(Main.java:146)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)	at org.apache.camel.main.MainSupport.run(MainSupport.java:352)	at org.apache.camel.spring.Main.main(Main.java:74)[                      Thread-4] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.{code}
CAMEL-7386 Openshift component A new Camel component to manage your openshift applications New Feature Openshift component A new Camel component to manage your openshift applications
CAMEL-7384 camel-rabbitmq: Allow connection factory tuning Several settings of the {{com.rabbitmq.client.ConnectionFactory}} are not exposed in RabbitMQEndpoint, namely:- automaticRecoveryEnabled- networkRecoveryInterval- topologyRecoveryEnabled- connectionTimeout- requestedHeartbeat- clientProperties- requestedChannelMax- requestedFrameMax- sslProtocolIt would be great if we could plug any ConnectionFactory implementation in the endpoint (caching connection factory for instance) New Feature camel-rabbitmq: Allow connection factory tuning Several settings of the {{com.rabbitmq.client.ConnectionFactory}} are not exposed in RabbitMQEndpoint, namely:- automaticRecoveryEnabled- networkRecoveryInterval- topologyRecoveryEnabled- connectionTimeout- requestedHeartbeat- clientProperties- requestedChannelMax- requestedFrameMax- sslProtocolIt would be great if we could plug any ConnectionFactory implementation in the endpoint (caching connection factory for instance)
CAMEL-7380 Add test support for ContextHierarchy In Spring 3.2 they've added ContextHierarchy, which allows loading nested of spring contexts. Seehttp://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.htmlThis would improve the loading time of tests where DirtiesContext is required to cause the camel context to be reloaded by having everything except the camel context defined in the parent context and the child context would have the camel definition. By only dirtying the child context, the larger parent context can remain.CamelSpringTestContextLoader would need to be modified to call (via reflection) MergedContextConfiguration.getParentApplicationContext() New Feature Add test support for ContextHierarchy In Spring 3.2 they've added ContextHierarchy, which allows loading nested of spring contexts. Seehttp://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.htmlThis would improve the loading time of tests where DirtiesContext is required to cause the camel context to be reloaded by having everything except the camel context defined in the parent context and the child context would have the camel definition. By only dirtying the child context, the larger parent context can remain.CamelSpringTestContextLoader would need to be modified to call (via reflection) MergedContextConfiguration.getParentApplicationContext()
CAMEL-7375 barcode data format component for camel I want to contribute a new data format component to create and read barcodes based on xzing (https://github.com/zxing/zxing). On marshal the body will be converted into a barcode image (you can configure which type of barcode you want to use). On unmarshal a given barcode image can be converted into the barcode value. I've forked the camel github repository and can provide a pull request for review. (https://github.com/xdoo/camel/tree/barcode) New Feature barcode data format component for camel I want to contribute a new data format component to create and read barcodes based on xzing (https://github.com/zxing/zxing). On marshal the body will be converted into a barcode image (you can configure which type of barcode you want to use). On unmarshal a given barcode image can be converted into the barcode value. I've forked the camel github repository and can provide a pull request for review. (https://github.com/xdoo/camel/tree/barcode)
CAMEL-7373 Reduce the logging noise from the log definition Recent new improvement in the log eip, now causes a bit of log noise on startup{code}[pache.camel.spring.Main.main()] LogDefinition                  INFO  The LogName is null. Falling back to create logger by using the route id route1.[pache.camel.spring.Main.main()] LogDefinition                  INFO  The LogName is null. Falling back to create logger by using the route id route1.{code}We should log that at info level as it does not add value to the end user. Improvement Reduce the logging noise from the log definition Recent new improvement in the log eip, now causes a bit of log noise on startup{code}[pache.camel.spring.Main.main()] LogDefinition                  INFO  The LogName is null. Falling back to create logger by using the route id route1.[pache.camel.spring.Main.main()] LogDefinition                  INFO  The LogName is null. Falling back to create logger by using the route id route1.{code}We should log that at info level as it does not add value to the end user.
CAMEL-7372 Allow users to pass in their own EntityManager through the exchange Currently JpaProducer always creates its own EntityManager instance, but then if user application also creates EntityManager or receives container-managed one, each EntityManager instance has its own 1st level cache. It's nice to have JpaProducer to accept EntityManager instance from outside via message header so user application can pass it in. Improvement Allow users to pass in their own EntityManager through the exchange Currently JpaProducer always creates its own EntityManager instance, but then if user application also creates EntityManager or receives container-managed one, each EntityManager instance has its own 1st level cache. It's nice to have JpaProducer to accept EntityManager instance from outside via message header so user application can pass it in.
CAMEL-7368 The feature descriptor should use a namespace Support for no namespace in the features descriptor is deprecated and should be removed in future Karaf versions. Task The feature descriptor should use a namespace Support for no namespace in the features descriptor is deprecated and should be removed in future Karaf versions.
CAMEL-7365 Camel versus Karaf versions Can page http://camel.apache.org/karaf.html be brought up to date?For example, I'd like to upgrade to Karaf 3.0.1 and it's not clear which version (or version range) would be suitable. Improvement Camel versus Karaf versions Can page http://camel.apache.org/karaf.html be brought up to date?For example, I'd like to upgrade to Karaf 3.0.1 and it's not clear which version (or version range) would be suitable.
CAMEL-7362 Add URI option support of maxTotalConnections and connectionsPerRoute We could support to set these parameters through the http4 endpoint uri if we don't specify the connection manager in the http component. New Feature Add URI option support of maxTotalConnections and connectionsPerRoute We could support to set these parameters through the http4 endpoint uri if we don't specify the connection manager in the http component.
CAMEL-7361 would be nice if org.apache.camel.spring.Main could take a system property or CLI option to package scan classes too Imagine you've some other beans you wanna initialise too in addition to a camel XML. I tried adding a few spring XML files in META-INF/spring/* but then I got an error if one of the spring XML files didn't have camel inside.So it'd be nice to either allow lots of spring XMLs to be used (and not all of them need camel); or allow some packages to be scanned for @Component / @Service annotations so that we can configure other beans in jars which are not necessarily camel related (e.g. to create some mbeans for monitoring/logging). Improvement would be nice if org.apache.camel.spring.Main could take a system property or CLI option to package scan classes too Imagine you've some other beans you wanna initialise too in addition to a camel XML. I tried adding a few spring XML files in META-INF/spring/* but then I got an error if one of the spring XML files didn't have camel inside.So it'd be nice to either allow lots of spring XMLs to be used (and not all of them need camel); or allow some packages to be scanned for @Component / @Service annotations so that we can configure other beans in jars which are not necessarily camel related (e.g. to create some mbeans for monitoring/logging).
CAMEL-7360 Add HTTP Date header http://camel.465427.n5.nabble.com/Patch-camel-jetty-tc5750112.htmlhttp://servicemix.396122.n5.nabble.com/HTTP-Date-headers-for-Jetty-endpoints-td5718803.html Improvement Add HTTP Date header http://camel.465427.n5.nabble.com/Patch-camel-jetty-tc5750112.htmlhttp://servicemix.396122.n5.nabble.com/HTTP-Date-headers-for-Jetty-endpoints-td5718803.html
CAMEL-7358 Tracer - Should have options to allow streams or files So people can configure if the tracer should load the message body from streams or files, or not.Currently it will load the content into memory as a String.But we need options to turn this off by default for file / streams. And then people can turn these option on if they really want thatSee alsohttp://camel.465427.n5.nabble.com/Java-heap-space-with-FILE-producer-and-larges-files-tp5749845.html Improvement Tracer - Should have options to allow streams or files So people can configure if the tracer should load the message body from streams or files, or not.Currently it will load the content into memory as a String.But we need options to turn this off by default for file / streams. And then people can turn these option on if they really want thatSee alsohttp://camel.465427.n5.nabble.com/Java-heap-space-with-FILE-producer-and-larges-files-tp5749845.html
CAMEL-7355 HttpPollingConsumer in camel-http4 need to use HttpClient 4.3.x API There is a missing pice of CAMEL-7010 Task HttpPollingConsumer in camel-http4 need to use HttpClient 4.3.x API There is a missing pice of CAMEL-7010
CAMEL-7354 make it easier to define and expose clean RESTful APIs to back end services / endpoints via a new "rest" endpoint All the current HTTP-like endpoints tend to have host/port in the URI and are not that DRY; plus there's no easy way to view the API if the consumer of the REST API is a REST developer (rather than Java/Camel developer).It'd be nice to make things more DRY to have an easy way to define mappings from restful operations and URI templates to camel routes. Exposing camel routes and endpoints as nice clean RESTful APIs is going to get more common (as an alternative to doing things by hand in pure Java with JAX-RS for example). Particularly in the age of BaaS and API Management; its going to be really handy to use Camel as a facade to wrap back end services as clean RESTful APIs.So it'd be nice to be able to do things like...{code}from("rest:get://customers").to(...);from("rest:put://customer/{id}").to(...);{code}i.e. define a rest component which can be configured with a HTTP plugin to use (e.g. use netty by default, or be able to reuse the servlet/http engine in tomcat/karaf) along with configuring the host/port if not using the current containers web connector.Then the remaining URI format is HTTP method (GET/PUT/POST/DELETE/OPTION etc) followed by a URI template. Optional parameters could be to set content type and the like. The Camel DSL can be used to do content based routing and so forth.It might be even cooler to add a little RestRouteBuilder class which extends RouteBuilder to add extra Java DSL operations....{code}public class MyRouteBuilder extends RestRouteBuilder {  protected void configure() {    get("/customers").to(...);    put("/customers/{id}").to(...);        // the above is just a facade over from("get:/" + uriTemplate) etc  }}{code}When using URI templates the values (such as 'id' in the examples above) should be exposed as properties so they can be referred to in any expressions and so forth in the camel DSL.Extra brownie points if by default the REST component also exposed a WADL / Swagger file listing all the RESTful operations defined on the endpoint; so the API can be easily introspected.Since JSON / XML are going to be the most common stuff; it might be good if the REST endpoint defaulted to using those out of the box if nothing's specified. Or at least if something like this were used in the Java DSL...{code}public class MyRouteBuilder extends RestRouteBuilder {  protected void configure() {    put("/customers/{id}", MyDTO.class).to(...);  }}{code}it'd default to unmarshalling/marshalling using jackson / JSON by default (the Binding could be configured on the REST component - or via the DSL on a per endpoint basis; but doing JSON / jackson by default seems the most useful out of the box) New Feature make it easier to define and expose clean RESTful APIs to back end services / endpoints via a new "rest" endpoint All the current HTTP-like endpoints tend to have host/port in the URI and are not that DRY; plus there's no easy way to view the API if the consumer of the REST API is a REST developer (rather than Java/Camel developer).It'd be nice to make things more DRY to have an easy way to define mappings from restful operations and URI templates to camel routes. Exposing camel routes and endpoints as nice clean RESTful APIs is going to get more common (as an alternative to doing things by hand in pure Java with JAX-RS for example). Particularly in the age of BaaS and API Management; its going to be really handy to use Camel as a facade to wrap back end services as clean RESTful APIs.So it'd be nice to be able to do things like...{code}from("rest:get://customers").to(...);from("rest:put://customer/{id}").to(...);{code}i.e. define a rest component which can be configured with a HTTP plugin to use (e.g. use netty by default, or be able to reuse the servlet/http engine in tomcat/karaf) along with configuring the host/port if not using the current containers web connector.Then the remaining URI format is HTTP method (GET/PUT/POST/DELETE/OPTION etc) followed by a URI template. Optional parameters could be to set content type and the like. The Camel DSL can be used to do content based routing and so forth.It might be even cooler to add a little RestRouteBuilder class which extends RouteBuilder to add extra Java DSL operations....{code}public class MyRouteBuilder extends RestRouteBuilder {  protected void configure() {    get("/customers").to(...);    put("/customers/{id}").to(...);        // the above is just a facade over from("get:/" + uriTemplate) etc  }}{code}When using URI templates the values (such as 'id' in the examples above) should be exposed as properties so they can be referred to in any expressions and so forth in the camel DSL.Extra brownie points if by default the REST component also exposed a WADL / Swagger file listing all the RESTful operations defined on the endpoint; so the API can be easily introspected.Since JSON / XML are going to be the most common stuff; it might be good if the REST endpoint defaulted to using those out of the box if nothing's specified. Or at least if something like this were used in the Java DSL...{code}public class MyRouteBuilder extends RestRouteBuilder {  protected void configure() {    put("/customers/{id}", MyDTO.class).to(...);  }}{code}it'd default to unmarshalling/marshalling using jackson / JSON by default (the Binding could be configured on the REST component - or via the DSL on a per endpoint basis; but doing JSON / jackson by default seems the most useful out of the box)
CAMEL-7350 JaxbDataFormat should not parse the Schema over and over again Currently the createMarshaller and createUnmarshaller methods parse the javax.xml.validation.Schema from scratch, which is a severe overhead considering that a Schema instance is threadsafe and it is  encuraged to re-use it as much as possible (see http://xerces.apache.org/xerces2-j/javadocs/api/javax/xml/validation/Schema.html) I extended the DataFormat and cached the parsed Schema and did a small benchmark that parsed an input document 64000 times:JaxbDataFormat: 3:18AltJaxbDataFormat: 0:35 Improvement JaxbDataFormat should not parse the Schema over and over again Currently the createMarshaller and createUnmarshaller methods parse the javax.xml.validation.Schema from scratch, which is a severe overhead considering that a Schema instance is threadsafe and it is  encuraged to re-use it as much as possible (see http://xerces.apache.org/xerces2-j/javadocs/api/javax/xml/validation/Schema.html) I extended the DataFormat and cached the parsed Schema and did a small benchmark that parsed an input document 64000 times:JaxbDataFormat: 3:18AltJaxbDataFormat: 0:35
CAMEL-7349 JaxbDataFormat should not parse the Schema over and over again Currently the createMarshaller and createUnmarshaller methods parse the javax.xml.validation.Schema from scratch, which is a severe overhead considering that a Schema instance is threadsafe and it is  encuraged to re-use it as much as possible (see http://xerces.apache.org/xerces2-j/javadocs/api/javax/xml/validation/Schema.html) I extended the DataFormat and cached the parsed Schema and did a small benchmark:JaxbDataFormat: 3:18AltJaxbDataFormat: 0:35 Improvement JaxbDataFormat should not parse the Schema over and over again Currently the createMarshaller and createUnmarshaller methods parse the javax.xml.validation.Schema from scratch, which is a severe overhead considering that a Schema instance is threadsafe and it is  encuraged to re-use it as much as possible (see http://xerces.apache.org/xerces2-j/javadocs/api/javax/xml/validation/Schema.html) I extended the DataFormat and cached the parsed Schema and did a small benchmark:JaxbDataFormat: 3:18AltJaxbDataFormat: 0:35
CAMEL-7345 File/ftp consumer - Implement specific PollingConsumer This improves using file/ftp with pollEnrich and consumer template if we do implement PollingConsumer and do not need to use the scheduled consumer to do a poll and grab the returned exchange. Then we can avoid the scheduler, and also fail if the consumer cannot connect etc.See nabblehttp://camel.465427.n5.nabble.com/Exception-not-thrown-while-doing-sftp-inside-consumer-receive-tp5749793.html Improvement File/ftp consumer - Implement specific PollingConsumer This improves using file/ftp with pollEnrich and consumer template if we do implement PollingConsumer and do not need to use the scheduled consumer to do a poll and grab the returned exchange. Then we can avoid the scheduler, and also fail if the consumer cannot connect etc.See nabblehttp://camel.465427.n5.nabble.com/Exception-not-thrown-while-doing-sftp-inside-consumer-receive-tp5749793.html
CAMEL-7342 Implement "lazySessionCreation" flag for the SMPP consumer as it works for the producer. If a SMPP consumer route is configured but the the initial connection attempt fails (eg if the SMSC is not accessible), then the route fails (java.io.IOException: Connection refused) and the camel context shuts everything down.For SMPP producers there is a "lazySessionCreation" flag which allows the route to be created and go into a reconnection attempt cycle until the SMSC is available.Please implement this flag for the consumer.See discussion from last year here: http://camel.465427.n5.nabble.com/Route-failure-on-startup-for-SMPP-consumer-if-SMSC-down-td5730666.html Improvement Implement "lazySessionCreation" flag for the SMPP consumer as it works for the producer. If a SMPP consumer route is configured but the the initial connection attempt fails (eg if the SMSC is not accessible), then the route fails (java.io.IOException: Connection refused) and the camel context shuts everything down.For SMPP producers there is a "lazySessionCreation" flag which allows the route to be created and go into a reconnection attempt cycle until the SMSC is available.Please implement this flag for the consumer.See discussion from last year here: http://camel.465427.n5.nabble.com/Route-failure-on-startup-for-SMPP-consumer-if-SMSC-down-td5730666.html
CAMEL-7335 Kafka : Expose kafka configuration properties to the camel component Hello,Kafka provides a lot of property configurable for both consumer and producer (See http://kafka.apache.org/documentation.html#consumerconfigs and http://kafka.apache.org/documentation.html#producerconfigs).With this change, all this properties are exposed to the camel component.To do that, i splitted the configuration in its own class so that it is possible to create a separated configuration that can be reused.See the pull request on github : https://github.com/apache/camel/pull/126 Improvement Kafka : Expose kafka configuration properties to the camel component Hello,Kafka provides a lot of property configurable for both consumer and producer (See http://kafka.apache.org/documentation.html#consumerconfigs and http://kafka.apache.org/documentation.html#producerconfigs).With this change, all this properties are exposed to the camel component.To do that, i splitted the configuration in its own class so that it is possible to create a separated configuration that can be reused.See the pull request on github : https://github.com/apache/camel/pull/126
CAMEL-7334 Event notification for routes added/removed We have notifications for route started|stopped, but we do not have for added|removed.We should add that as it allows users to react to these events as well. Improvement Event notification for routes added/removed We have notifications for route started|stopped, but we do not have for added|removed.We should add that as it allows users to react to these events as well.
CAMEL-7333 RuntimeEndpointRegistry - To capture which endpoints are in use by which routes To allow more insight of runtime behavior of routes in Camel. We have statics information about the routes from their model. But the runtime charactistica of routing messages throught dynamic EIPs such as recipient list is not captured.We should introduce a runtime registry to capture such details. We can start with mapping which routes are using which endpoints. And expose that over JMX, which allows better insight. New Feature RuntimeEndpointRegistry - To capture which endpoints are in use by which routes To allow more insight of runtime behavior of routes in Camel. We have statics information about the routes from their model. But the runtime charactistica of routing messages throught dynamic EIPs such as recipient list is not captured.We should introduce a runtime registry to capture such details. We can start with mapping which routes are using which endpoints. And expose that over JMX, which allows better insight.
CAMEL-7332 camel-sql - Should have dynamic import so jdbc driver can be loaded If you use OSGi blueprint and use camel-sql, to setup a jdbc driver then it cannot load it from a blueprint xml file.But if you use spring-dm it works. Improvement camel-sql - Should have dynamic import so jdbc driver can be loaded If you use OSGi blueprint and use camel-sql, to setup a jdbc driver then it cannot load it from a blueprint xml file.But if you use spring-dm it works.
CAMEL-7331 Kafka: producer lookup the destination topic in the message header Hello,By default, a kafka producer is not tied to a specific topic.The topic is related to each message.Instead of having to specify the topic in the endpoint definition, we can define the topic as a message header.If no topic is defined in the message then we fall back to the topic defined in the endpoint if any.I created a pull request in github for this improvement, here is the link : https://github.com/apache/camel/pull/121 Improvement Kafka: producer lookup the destination topic in the message header Hello,By default, a kafka producer is not tied to a specific topic.The topic is related to each message.Instead of having to specify the topic in the endpoint definition, we can define the topic as a message header.If no topic is defined in the message then we fall back to the topic defined in the endpoint if any.I created a pull request in github for this improvement, here is the link : https://github.com/apache/camel/pull/121
CAMEL-7329 Upgrade camel-kafka for kafka 0.8.1 release Hello,My company is interested in using the camel-kafka component.Since the latest release of kafka is 0.8.1, I updated the camel-kafka component for this latest version.Even if this patch doesnt go in right now, we will still be abled to use the component but i figured it would be a good idea to do that anyway.I did a pull request on github : https://github.com/apache/camel/pull/119Thank youFabienPS : FYI Jira is missing the camel-kafka as a component. It might be a good idea to add it to be able to track issues related to it ! Improvement Upgrade camel-kafka for kafka 0.8.1 release Hello,My company is interested in using the camel-kafka component.Since the latest release of kafka is 0.8.1, I updated the camel-kafka component for this latest version.Even if this patch doesnt go in right now, we will still be abled to use the component but i figured it would be a good idea to do that anyway.I did a pull request on github : https://github.com/apache/camel/pull/119Thank youFabienPS : FYI Jira is missing the camel-kafka as a component. It might be a good idea to add it to be able to track issues related to it !
CAMEL-7327 Improve Container.Instance API to deal with setting a Container after CamelContexts have been created. There is a big risk CamelContext's won't get managed right now In environments like OSGi startup ordering is kinda random. Right now CamelContexts's can startup and call {code}Container.Instance.manage(CamelContext){code}https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L64before any Container has called Container.Instance.set(). These CamelContexts's will then not be managed.A neater solution would be, if there is no container currently set:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L66then keep a track of the CamelContext objects in a Set<CamelContext> - until Container.Instance.unmanage() is called when they are stopped; then when Container.Instance.set(Container) is called; all the previously registered CamelContext's can be passed into the Container (and removed from the Set). Improvement Improve Container.Instance API to deal with setting a Container after CamelContexts have been created. There is a big risk CamelContext's won't get managed right now In environments like OSGi startup ordering is kinda random. Right now CamelContexts's can startup and call {code}Container.Instance.manage(CamelContext){code}https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L64before any Container has called Container.Instance.set(). These CamelContexts's will then not be managed.A neater solution would be, if there is no container currently set:https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L66then keep a track of the CamelContext objects in a Set<CamelContext> - until Container.Instance.unmanage() is called when they are stopped; then when Container.Instance.set(Container) is called; all the previously registered CamelContext's can be passed into the Container (and removed from the Set).
CAMEL-7319 Dead not working JUnittest testUsingJavaExtensions The test testUsingJavaExtensions in camel-core/src/test/java/org/apache/camel/builder/xml/XPathTest.java is "dead" since checkin git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@824639 13f79535-47bb-0310-9956-ffa450edef68 if you enable xalan on testing classpath. Task Dead not working JUnittest testUsingJavaExtensions The test testUsingJavaExtensions in camel-core/src/test/java/org/apache/camel/builder/xml/XPathTest.java is "dead" since checkin git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@824639 13f79535-47bb-0310-9956-ffa450edef68 if you enable xalan on testing classpath.
CAMEL-7314 Support to build the source with JDK8 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.6:run (generate-sources) on project camel-spring: An Ant BuildException has occured: taskdef A class needed by class com.sun.tools.jxc.SchemaGenTask cannot be found: com/sun/mirror/apt/AnnotationProcessorFactory  Task Support to build the source with JDK8 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.6:run (generate-sources) on project camel-spring: An Ant BuildException has occured: taskdef A class needed by class com.sun.tools.jxc.SchemaGenTask cannot be found: com/sun/mirror/apt/AnnotationProcessorFactory 
CAMEL-7312 File -> Properties type converter Seehttp://stackoverflow.com/questions/22523637/read-contents-of-a-file-containing-key-value-pairs-without-normal-parsingThis allows people to pickup files and convert to properties more easily. Improvement File -> Properties type converter Seehttp://stackoverflow.com/questions/22523637/read-contents-of-a-file-containing-key-value-pairs-without-normal-parsingThis allows people to pickup files and convert to properties more easily.
CAMEL-7309 Tone down the excessive INFO logging about Woodstox xml parser not in use See nabblehttp://camel.465427.n5.nabble.com/Seeing-Info-message-all-over-log-file-related-to-Woodstox-tp5749044.htmlWe should log this when the parser is created, and do an INFO logging if not woodstox, and otherwise just DEBUG for regular. Improvement Tone down the excessive INFO logging about Woodstox xml parser not in use See nabblehttp://camel.465427.n5.nabble.com/Seeing-Info-message-all-over-log-file-related-to-Woodstox-tp5749044.htmlWe should log this when the parser is created, and do an INFO logging if not woodstox, and otherwise just DEBUG for regular.
CAMEL-7301 Move to new HAPI API, since the current one is being deprecated We're currently using the HAPi 2.0 API. In 2.1 HAPI introduced a new API centered around the new HapiContext object. The current API is fully functional but being deprecated. We should eventually move to the new API see http://hl7api.sourceforge.net/upgrade_to_hapi_2_1.html Improvement Move to new HAPI API, since the current one is being deprecated We're currently using the HAPi 2.0 API. In 2.1 HAPI introduced a new API centered around the new HapiContext object. The current API is fully functional but being deprecated. We should eventually move to the new API see http://hl7api.sourceforge.net/upgrade_to_hapi_2_1.html
CAMEL-7290 Added a sendServerVersion option to camel-jetty component It could be helpful if we can provide a sendServerVersion option in camel-jetty component which can stop jetty server send back the server version  to the client for some reason. New Feature Added a sendServerVersion option to camel-jetty component It could be helpful if we can provide a sendServerVersion option in camel-jetty component which can stop jetty server send back the server version  to the client for some reason.
CAMEL-7289 Update MQTT client library dependency to latest version 1.10 There have been some recent critical fixes in the mqtt-client library. The latest version as of the time of creating this issue is 1.9, but another fix is pending for the next mqtt-client release, which should be 1.10 and be released soon. The mqtt-client dependency version should be updated to reflect this when the next version of the client library is available this week.  Task Update MQTT client library dependency to latest version 1.10 There have been some recent critical fixes in the mqtt-client library. The latest version as of the time of creating this issue is 1.9, but another fix is pending for the next mqtt-client release, which should be 1.10 and be released soon. The mqtt-client dependency version should be updated to reflect this when the next version of the client library is available this week. 
CAMEL-7288 camel-kafka documentation We need documentation for the new camel-kafka component. New Feature camel-kafka documentation We need documentation for the new camel-kafka component.
CAMEL-7284 Missing setter for ApnsDelegate Hello,there's a slight problem in the ApnsServiceFactory in that there's a missing setter for ApnsDelegate. The ability to wire one in is important, as java-apns uses it as a destination of send acks/errors, and without it there's no way to diagnose or react to them.thanks,Marcin Improvement Missing setter for ApnsDelegate Hello,there's a slight problem in the ApnsServiceFactory in that there's a missing setter for ApnsDelegate. The ability to wire one in is important, as java-apns uses it as a destination of send acks/errors, and without it there's no way to diagnose or react to them.thanks,Marcin
CAMEL-7283 PGP Data Format: Signature Verification Options The current PGP Data Format does verify a signature if the PGP message does contain one and it does execute no verification if the PGP message does not contain a signature. There is a use case where a signature verification is always required because the receiver wants to check that the message came from a specific sender. In this case PGP messages not containing a signature should be rejected.I added the new parameter "signatureVerificationOption" so that you now can specify if a signature is requried, optional, or no signature is allowed during the decryption process. Improvement PGP Data Format: Signature Verification Options The current PGP Data Format does verify a signature if the PGP message does contain one and it does execute no verification if the PGP message does not contain a signature. There is a use case where a signature verification is always required because the receiver wants to check that the message came from a specific sender. In this case PGP messages not containing a signature should be rejected.I added the new parameter "signatureVerificationOption" so that you now can specify if a signature is requried, optional, or no signature is allowed during the decryption process.
CAMEL-7281 Add support for "certAlias" in SSLContextParameters There is no support for a "certAlias" type parameters in SSLContextParameters, as in CXF. This means that it's not possible to use Keystores with more than one entry for TLS. Improvement Add support for "certAlias" in SSLContextParameters There is no support for a "certAlias" type parameters in SSLContextParameters, as in CXF. This means that it's not possible to use Keystores with more than one entry for TLS.
CAMEL-7280 camel-quartz2 - Add options to configure job as durable See nabblehttp://camel.465427.n5.nabble.com/Camel-Quartz2-Clustering-fails-due-to-durable-jobs-has-anyone-got-td5741030.html#a5748096We need a way to configure the job builder to use durable jobs. As you cannot do as in quartz 1.x with job.durable=true - due the new builder api in quartz 2.0. Improvement camel-quartz2 - Add options to configure job as durable See nabblehttp://camel.465427.n5.nabble.com/Camel-Quartz2-Clustering-fails-due-to-durable-jobs-has-anyone-got-td5741030.html#a5748096We need a way to configure the job builder to use durable jobs. As you cannot do as in quartz 1.x with job.durable=true - due the new builder api in quartz 2.0.
CAMEL-7278 Adding owner option for HDFS Consumer 1. HdfsConsumer:129 if(this.config.getOwner() != null){      	if(!(status.getOwner().equals(this.config.getOwner())))       		continue;}2. HdfsConfiguration:private String owner = HdfsConstants.DEFAULT_OWNER;public String getOwner() {	return owner;}public void setOwner(String owner) {	this.owner = owner;}3. HdfsConstants: public static final String DEFAULT_OWNER = null; Wish Adding owner option for HDFS Consumer 1. HdfsConsumer:129 if(this.config.getOwner() != null){      	if(!(status.getOwner().equals(this.config.getOwner())))       		continue;}2. HdfsConfiguration:private String owner = HdfsConstants.DEFAULT_OWNER;public String getOwner() {	return owner;}public void setOwner(String owner) {	this.owner = owner;}3. HdfsConstants: public static final String DEFAULT_OWNER = null;
CAMEL-7268 "defaultEncoding" option does not exist anymore Since the commit of 26/11/11 named "CAMEL-4161: camel-mail no longer dep on Spring JARs.", there is no more "defaultEncoding" option in the camel-mail component unlike it is said by the documentation.PS : For my knowledge, is there a way to contribute directly to the documentation (pull-request, patch, etc) ? I did'nt find any.Thx, Improvement "defaultEncoding" option does not exist anymore Since the commit of 26/11/11 named "CAMEL-4161: camel-mail no longer dep on Spring JARs.", there is no more "defaultEncoding" option in the camel-mail component unlike it is said by the documentation.PS : For my knowledge, is there a way to contribute directly to the documentation (pull-request, patch, etc) ? I did'nt find any.Thx,
CAMEL-7267 camel-salesforce - Problem deploying to karaf containers There is a problem if joda-time 1.6 is installed as part of other features etc. And then you install camel-salesforce you can have this error{code}karaf@root> features:install camel-salesforceRefreshing bundles org.apache.camel.camel-core (61)Error executing command: Could not start bundle mvn:org.apache.camel/camel-salesforce/2.12.3 in feature(s) camel-salesforce-2.12.3: Uses constraint violation. Unable to resolve bundle revision org.apache.camel.camel-salesforce [105.0] because it is exposed to package 'org.joda.time' from bundle revisions joda-time [104.0] and joda-time [54.0] via two dependency chains.Chain 1:  org.apache.camel.camel-salesforce [105.0]    import: (&(osgi.wiring.package=org.joda.time)(version>=2.1.0)(!(version>=3.0.0)))     |    export: osgi.wiring.package=org.joda.time  joda-time [104.0]Chain 2:  org.apache.camel.camel-salesforce [105.0]    import: (&(osgi.wiring.package=com.thoughtworks.xstream.annotations)(version>=1.3.0)(!(version>=2.0.0)))     |    export: osgi.wiring.package=com.thoughtworks.xstream.annotations; uses:=org.joda.time  org.apache.servicemix.bundles.xstream [99.0]    import: (&(osgi.wiring.package=org.joda.time)(version>=1.6.0)(!(version>=3.0.0)))     |    export: osgi.wiring.package=org.joda.time  joda-time [54.0]{code} Improvement camel-salesforce - Problem deploying to karaf containers There is a problem if joda-time 1.6 is installed as part of other features etc. And then you install camel-salesforce you can have this error{code}karaf@root> features:install camel-salesforceRefreshing bundles org.apache.camel.camel-core (61)Error executing command: Could not start bundle mvn:org.apache.camel/camel-salesforce/2.12.3 in feature(s) camel-salesforce-2.12.3: Uses constraint violation. Unable to resolve bundle revision org.apache.camel.camel-salesforce [105.0] because it is exposed to package 'org.joda.time' from bundle revisions joda-time [104.0] and joda-time [54.0] via two dependency chains.Chain 1:  org.apache.camel.camel-salesforce [105.0]    import: (&(osgi.wiring.package=org.joda.time)(version>=2.1.0)(!(version>=3.0.0)))     |    export: osgi.wiring.package=org.joda.time  joda-time [104.0]Chain 2:  org.apache.camel.camel-salesforce [105.0]    import: (&(osgi.wiring.package=com.thoughtworks.xstream.annotations)(version>=1.3.0)(!(version>=2.0.0)))     |    export: osgi.wiring.package=com.thoughtworks.xstream.annotations; uses:=org.joda.time  org.apache.servicemix.bundles.xstream [99.0]    import: (&(osgi.wiring.package=org.joda.time)(version>=1.6.0)(!(version>=3.0.0)))     |    export: osgi.wiring.package=org.joda.time  joda-time [54.0]{code}
CAMEL-7265 Add API to get JSON representation of route input and output endpoints Introduce an API on CamelContext to get a json of all the routes input and outputs. This allows tooling and end users to get a better understanding what can come in and out of their routes.The api will parse the route model and grab the endpoint uris from static configured eips, such as to, wireTap, enrich etc. For dynamic eips we cannot know this.We can then make a karaf command that can show this details as well, for example in a nice table structure, so people can quickly get an overview of what can come in and out of their routes (in terms of endpoint uris) Improvement Add API to get JSON representation of route input and output endpoints Introduce an API on CamelContext to get a json of all the routes input and outputs. This allows tooling and end users to get a better understanding what can come in and out of their routes.The api will parse the route model and grab the endpoint uris from static configured eips, such as to, wireTap, enrich etc. For dynamic eips we cannot know this.We can then make a karaf command that can show this details as well, for example in a nice table structure, so people can quickly get an overview of what can come in and out of their routes (in terms of endpoint uris)
CAMEL-7264 Full file path from HDFS Consumer It would be very helpful if we could get the file path of the file and not just the file name, so please if somebody has the time please set on the message the path also. It would be very useful. HdfsConsumer.java  on line 144 message.setHeader(Exchange.FILE_PATH, status.getPath().toString());Thank you! Wish Full file path from HDFS Consumer It would be very helpful if we could get the file path of the file and not just the file name, so please if somebody has the time please set on the message the path also. It would be very useful. HdfsConsumer.java  on line 144 message.setHeader(Exchange.FILE_PATH, status.getPath().toString());Thank you!
CAMEL-7263 Remove camel:dot It has been deprecated a for a long time, and we discussed this on the dev mailing list to remove it from future Camel releases.http://camel.465427.n5.nabble.com/DISCUSS-Remove-the-camel-dot-goal-td5744057.html#a5745865 Task Remove camel:dot It has been deprecated a for a long time, and we discussed this on the dev mailing list to remove it from future Camel releases.http://camel.465427.n5.nabble.com/DISCUSS-Remove-the-camel-dot-goal-td5744057.html#a5745865
CAMEL-7260 Documentation Bug - HTTP4 Component Configuration There is a bug in the HTTP4 component documentation at http://camel.apache.org/http4.Under "Setting up SSL for HTTP Client", the "Programmatic configuration of the component" example shows setting the SSLContextParameters of the http4 component instead of the correct https4 component.It might also be helpful to give an example of using the SSLContextParameters to force https4 to use a specific protocol, such as SSLv3. Notably, the underlying Apache HttpClient 4.x does not respect the Java environment variable "https.protocols", the only way I was able to successfully force SSLv3 in my case was by configuring the SSLContextParameters of the https4 component.My groovy spring DSL looks like this:    sslContextParams(SSLContextParameters) {        secureSocketProtocols = new SecureSocketProtocolsParameters().with { secureSocketProtocol.add('SSLv3'); it }        secureSocketProtocol = "SSLv3"    }    https4(org.apache.camel.component.http4.HttpComponent) {        connectionsPerRoute = 50        sslContextParameters = ref('sslContextParams')    }Note that setting SSLContextParameters.secureSocketProtocol alone is not sufficient, secureSocketProtocols also needs to be set (and I had hand-instantiate it as the list is not easily constructable via Spring - for me at least). Task Documentation Bug - HTTP4 Component Configuration There is a bug in the HTTP4 component documentation at http://camel.apache.org/http4.Under "Setting up SSL for HTTP Client", the "Programmatic configuration of the component" example shows setting the SSLContextParameters of the http4 component instead of the correct https4 component.It might also be helpful to give an example of using the SSLContextParameters to force https4 to use a specific protocol, such as SSLv3. Notably, the underlying Apache HttpClient 4.x does not respect the Java environment variable "https.protocols", the only way I was able to successfully force SSLv3 in my case was by configuring the SSLContextParameters of the https4 component.My groovy spring DSL looks like this:    sslContextParams(SSLContextParameters) {        secureSocketProtocols = new SecureSocketProtocolsParameters().with { secureSocketProtocol.add('SSLv3'); it }        secureSocketProtocol = "SSLv3"    }    https4(org.apache.camel.component.http4.HttpComponent) {        connectionsPerRoute = 50        sslContextParameters = ref('sslContextParams')    }Note that setting SSLContextParameters.secureSocketProtocol alone is not sufficient, secureSocketProtocols also needs to be set (and I had hand-instantiate it as the list is not easily constructable via Spring - for me at least).
CAMEL-7259 ProducerTemplate is not aligned with the lifecycle of CamelContext and therefore it's possible to have a Producer that's never shutdown correctly. ProducerTemplate is not aligned with the lifecycle of CamelContext and therefore it's possible to have a Producer that's never shutdown correctly.{code}        context.start();        ProducerTemplate template = context.createProducerTemplate();        template.sendBody("test://test", "Hello");        context.stop();{code}If I never call template.stop() the Producer for the test component (or indeed any other component in it's place) will never receive a call to doStop. But the Endpoint that the Producer is associated with will be stopped.. which is a weird situation/state to be in..?context.stop() should cleanup any and all Producers, even those created by a ProducerTemplate.. after such time a ProducerTemplate should become invalid and perhaps throw an exception that the camel context has been shutdown? Improvement ProducerTemplate is not aligned with the lifecycle of CamelContext and therefore it's possible to have a Producer that's never shutdown correctly. ProducerTemplate is not aligned with the lifecycle of CamelContext and therefore it's possible to have a Producer that's never shutdown correctly.{code}        context.start();        ProducerTemplate template = context.createProducerTemplate();        template.sendBody("test://test", "Hello");        context.stop();{code}If I never call template.stop() the Producer for the test component (or indeed any other component in it's place) will never receive a call to doStop. But the Endpoint that the Producer is associated with will be stopped.. which is a weird situation/state to be in..?context.stop() should cleanup any and all Producers, even those created by a ProducerTemplate.. after such time a ProducerTemplate should become invalid and perhaps throw an exception that the camel context has been shutdown?
CAMEL-7257 Add getRegistry(T) - To get the registry as type T So people can more easily get JndiRegistry / SimpleRegistry / SpringAppCtxRegistry and what else is there.Currently we wrap that in a property placeholder registry at runtime. So if people call getRegistry they get that back.So havingJndiRegistry jndi = context.getRegistry(JndiRegistry.class);allows us to know what type they want, and return the actual registry.See nabblehttp://camel.465427.n5.nabble.com/update-JNDI-camel-registery-at-runtime-tp5748047.html Improvement Add getRegistry(T) - To get the registry as type T So people can more easily get JndiRegistry / SimpleRegistry / SpringAppCtxRegistry and what else is there.Currently we wrap that in a property placeholder registry at runtime. So if people call getRegistry they get that back.So havingJndiRegistry jndi = context.getRegistry(JndiRegistry.class);allows us to know what type they want, and return the actual registry.See nabblehttp://camel.465427.n5.nabble.com/update-JNDI-camel-registery-at-runtime-tp5748047.html
CAMEL-7252 Documentation - Archived should be achieved; have should be has On http://camel.apache.org/tutorial-jmsremoting.html, the sentence describing the Message Endpoint says "It should be easy to send messages to the Server from the the clients. This is ***archived*** with Camels powerful Endpoint pattern that even can be more powerful combined with Spring remoting. The tutorial ***have*** clients using each kind of technique for this." It probably should say "It should be easy to send messages to the Server from the the clients. This is achieved with Camels powerful Endpoint pattern that even can be more powerful combined with Spring remoting. The tutorial has clients using each kind of technique for this."  Task Documentation - Archived should be achieved; have should be has On http://camel.apache.org/tutorial-jmsremoting.html, the sentence describing the Message Endpoint says "It should be easy to send messages to the Server from the the clients. This is ***archived*** with Camels powerful Endpoint pattern that even can be more powerful combined with Spring remoting. The tutorial ***have*** clients using each kind of technique for this." It probably should say "It should be easy to send messages to the Server from the the clients. This is achieved with Camels powerful Endpoint pattern that even can be more powerful combined with Spring remoting. The tutorial has clients using each kind of technique for this." 
CAMEL-7247 No way to 'abort' the onCompletion action of the MailConsumer I have a route that reads from an email inbox, passes the message through a distributed IdempotentConsumer and then processes the mail if it's not been seen before.The reason I have this setup is because we are running multiple instances of camel all pointing to the same inbox and don't want mails to be processed more than once across the cluster.Now leaving aside the fact that this may not be the best way to achieve what we want to do, the issue I have is that when the route completes, either by 'aborting' as part of the IdempotentConsumer filtering or by processing the mail successfully, the completion listener added by the MailComponent always gets called.This is not ideal because it effectively disables any rollback or reprocessing logic that may exist, and was even more problematic for us as we had delete=true set on the MailConsumer, which meant mails were removed under the feet of the node that was actually processing the mail.What I'd like is a way for the route to complete successfully but for the MailComponent to not do anything to the mail. A state which is currently impossible without overriding the mail component (it either marks as deleted or marks as read, there is no 'don't do anything' option) Improvement No way to 'abort' the onCompletion action of the MailConsumer I have a route that reads from an email inbox, passes the message through a distributed IdempotentConsumer and then processes the mail if it's not been seen before.The reason I have this setup is because we are running multiple instances of camel all pointing to the same inbox and don't want mails to be processed more than once across the cluster.Now leaving aside the fact that this may not be the best way to achieve what we want to do, the issue I have is that when the route completes, either by 'aborting' as part of the IdempotentConsumer filtering or by processing the mail successfully, the completion listener added by the MailComponent always gets called.This is not ideal because it effectively disables any rollback or reprocessing logic that may exist, and was even more problematic for us as we had delete=true set on the MailConsumer, which meant mails were removed under the feet of the node that was actually processing the mail.What I'd like is a way for the route to complete successfully but for the MailComponent to not do anything to the mail. A state which is currently impossible without overriding the mail component (it either marks as deleted or marks as read, there is no 'don't do anything' option)
CAMEL-7245 Camel Couchbase component We have a PR for thishttps://github.com/apache/camel/pull/87 New Feature Camel Couchbase component We have a PR for thishttps://github.com/apache/camel/pull/87
CAMEL-7228 Avoid setting port number 80 in http/http4 host header As port 80 is default not explicit specified, and some servers apparently dislike that. In older Camel releases we did not do that.See nabblehttp://camel.465427.n5.nabble.com/Camel-2-12-HTTP4-Now-seeing-port-number-added-to-Host-header-tp5747601.html Improvement Avoid setting port number 80 in http/http4 host header As port 80 is default not explicit specified, and some servers apparently dislike that. In older Camel releases we did not do that.See nabblehttp://camel.465427.n5.nabble.com/Camel-2-12-HTTP4-Now-seeing-port-number-added-to-Host-header-tp5747601.html
CAMEL-7227 Create camel-kafka feature We need to wrap a kafka OSGi bundle first, then create a feature for it. Task Create camel-kafka feature We need to wrap a kafka OSGi bundle first, then create a feature for it.
CAMEL-7226 Fix File2 component documentation for CamelFileLastModified From looking at this bug (CAMEL-6025) it looks like the decision was made to change the CamelFileLastModified header from a Date to a Long. The documentation for the File2 component only states that the CamelFileLastModified is a Date. This should be updated to show that it is a Long as of versions 2.10.4 and 2.11.0. Task Fix File2 component documentation for CamelFileLastModified From looking at this bug (CAMEL-6025) it looks like the decision was made to change the CamelFileLastModified header from a Date to a Long. The documentation for the File2 component only states that the CamelFileLastModified is a Date. This should be updated to show that it is a Long as of versions 2.10.4 and 2.11.0.
CAMEL-7225 camel-smpp - should check Exchange.CHARSET_NAME header The camel-smpp component should check the Exchange.CHARSET_NAME header of each message to determine the actual encoding of byte[] messagesIt appears that it currently expects all byte[] messages to be encoded in the character set specified by the "encoding" property on the endpoint Improvement camel-smpp - should check Exchange.CHARSET_NAME header The camel-smpp component should check the Exchange.CHARSET_NAME header of each message to determine the actual encoding of byte[] messagesIt appears that it currently expects all byte[] messages to be encoded in the character set specified by the "encoding" property on the endpoint
CAMEL-7220 Camel Schematron component HiI would like to contribute apache camel components by introducing the schematron engine. Here is a link to it in Github: https://github.com/akhettar/camel/tree/master/components/camel-schematronComments and suggestions are welcome.Regards,Ayache New Feature Camel Schematron component HiI would like to contribute apache camel components by introducing the schematron engine. Here is a link to it in Github: https://github.com/akhettar/camel/tree/master/components/camel-schematronComments and suggestions are welcome.Regards,Ayache
CAMEL-7217 Http component need to setup the message encoding header based on the content-type header Here is the user story from the stackoverflow http://stackoverflow.com/questions/21572806/camel-how-to-predict-http-charchester-encoding-when-doing-conversion New Feature Http component need to setup the message encoding header based on the content-type header Here is the user story from the stackoverflow http://stackoverflow.com/questions/21572806/camel-how-to-predict-http-charchester-encoding-when-doing-conversion
CAMEL-7215 Stop and un-schedule jobs on removal of route When using SimpleScheduledRoutePolicy, jobs are not deleted when a route is removed.I got the following exception when removing a route and re-adding it to a running context.{code}Stacktrace---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.FailedToCreateRouteException: Failed to create route foo: Route(foo)[[From[quartz... because of org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-foo.job-STOP-foo', because one already exists with this identification.        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:182) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:770) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1914) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:707) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:669) ~[camel-core-2.12.2.jar:2.12.2]...Caused by: org.apache.camel.RuntimeCamelException: org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-foo.job-STOP-foo', because one already exists with this identification.        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1352) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.routepolicy.quartz2.SimpleScheduledRoutePolicy.onInit(SimpleScheduledRoutePolicy.java:48) ~[camel-quartz2-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:202) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:916) ~[camel-core-2.12.2.jar:2.12.2]...Caused by: org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-foo.job-STOP-foo', because one already exists with this identification.        at org.quartz.simpl.RAMJobStore.storeJob(RAMJobStore.java:279) ~[quartz-2.2.1.jar:na]        at org.quartz.simpl.RAMJobStore.storeJobAndTrigger(RAMJobStore.java:251) ~[quartz-2.2.1.jar:na]        at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886) ~[quartz-2.2.1.jar:na]        at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249) ~[quartz-2.2.1.jar:na]        at org.apache.camel.routepolicy.quartz2.ScheduledRoutePolicy.scheduleRoute(ScheduledRoutePolicy.java:116) ~[camel-quartz2-2.12.2.jar:2.12.2]{code}The SimpleScheduledRoutePolicy should remove the scheduled jobs on route removal. This is what CronScheduledRoutePolicy does. Improvement Stop and un-schedule jobs on removal of route When using SimpleScheduledRoutePolicy, jobs are not deleted when a route is removed.I got the following exception when removing a route and re-adding it to a running context.{code}Stacktrace---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.FailedToCreateRouteException: Failed to create route foo: Route(foo)[[From[quartz... because of org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-foo.job-STOP-foo', because one already exists with this identification.        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:182) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:770) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1914) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:707) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:669) ~[camel-core-2.12.2.jar:2.12.2]...Caused by: org.apache.camel.RuntimeCamelException: org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-foo.job-STOP-foo', because one already exists with this identification.        at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1352) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.routepolicy.quartz2.SimpleScheduledRoutePolicy.onInit(SimpleScheduledRoutePolicy.java:48) ~[camel-quartz2-2.12.2.jar:2.12.2]        at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:202) ~[camel-core-2.12.2.jar:2.12.2]        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:916) ~[camel-core-2.12.2.jar:2.12.2]...Caused by: org.quartz.ObjectAlreadyExistsException: Unable to store Job : 'jobGroup-foo.job-STOP-foo', because one already exists with this identification.        at org.quartz.simpl.RAMJobStore.storeJob(RAMJobStore.java:279) ~[quartz-2.2.1.jar:na]        at org.quartz.simpl.RAMJobStore.storeJobAndTrigger(RAMJobStore.java:251) ~[quartz-2.2.1.jar:na]        at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886) ~[quartz-2.2.1.jar:na]        at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249) ~[quartz-2.2.1.jar:na]        at org.apache.camel.routepolicy.quartz2.ScheduledRoutePolicy.scheduleRoute(ScheduledRoutePolicy.java:116) ~[camel-quartz2-2.12.2.jar:2.12.2]{code}The SimpleScheduledRoutePolicy should remove the scheduled jobs on route removal. This is what CronScheduledRoutePolicy does.
CAMEL-7214 Upgrade to elasticsearch 1.0 Its 1.0 now and we should upgrade.Not sure if we need an OSGi bundle from the SMX team? Task Upgrade to elasticsearch 1.0 Its 1.0 now and we should upgrade.Not sure if we need an OSGi bundle from the SMX team?
CAMEL-7208 ManagedCamelContext - addOrUpdateRoutesFromXml should support decoding xml The updated route(s) in xml format may have been encoded, which means we should support decoding the xml prior to loading it as a model.For example {{ }} placeholders may be encoded into %7B%7B and %7D%7D which would cause the routes not being able to be updated correctly.Adding a boolean parameter to the operation so you can control if you want to decode or not. Improvement ManagedCamelContext - addOrUpdateRoutesFromXml should support decoding xml The updated route(s) in xml format may have been encoded, which means we should support decoding the xml prior to loading it as a model.For example {{ }} placeholders may be encoded into %7B%7B and %7D%7D which would cause the routes not being able to be updated correctly.Adding a boolean parameter to the operation so you can control if you want to decode or not.
CAMEL-7206 Enable an option to pickup named parameters from headers with mybatis component For example the select query:	<select id="sss" parameterType="java.util.Map"		resultType="map">		select fila,o.IDENTIFICACION		from detalle d 		join orden o on d.orden_id=o.id		where informe_id=#{informeId}        </select>The component picks the named parameters only from the body. Some cases it is useful pick the named parameters from the header. It is better if the component has an option like "useHeaderParameters" or something like that and I can let the message body intact.Related forum: http://camel.465427.n5.nabble.com/Is-it-possible-to-configure-mybatis-component-to-pick-parameters-from-header-td5747318.html New Feature Enable an option to pickup named parameters from headers with mybatis component For example the select query:	<select id="sss" parameterType="java.util.Map"		resultType="map">		select fila,o.IDENTIFICACION		from detalle d 		join orden o on d.orden_id=o.id		where informe_id=#{informeId}        </select>The component picks the named parameters only from the body. Some cases it is useful pick the named parameters from the header. It is better if the component has an option like "useHeaderParameters" or something like that and I can let the message body intact.Related forum: http://camel.465427.n5.nabble.com/Is-it-possible-to-configure-mybatis-component-to-pick-parameters-from-header-td5747318.html
CAMEL-7205 camel-twitter - Add JMX operations so users can see/change configuration at runtime For example the twitter search you may want to be able to adjust keywords at runtime.And also see the configuration using JMX attributes. Improvement camel-twitter - Add JMX operations so users can see/change configuration at runtime For example the twitter search you may want to be able to adjust keywords at runtime.And also see the configuration using JMX attributes.
CAMEL-7203 DefaultUnitOfWork - Optimize to only do defensive copy if useOriginalMessage is enabled This optimizes use-cases where this option is not in use, and can lead to better performance.See CAMEL-6541 and nabblehttp://camel.465427.n5.nabble.com/Performance-degradation-on-consumer-side-when-switching-Camel-from-2-11-0-to-2-12-1v-tp5742125.html Improvement DefaultUnitOfWork - Optimize to only do defensive copy if useOriginalMessage is enabled This optimizes use-cases where this option is not in use, and can lead to better performance.See CAMEL-6541 and nabblehttp://camel.465427.n5.nabble.com/Performance-degradation-on-consumer-side-when-switching-Camel-from-2-11-0-to-2-12-1v-tp5742125.html
CAMEL-7201 PGPDataFormat: allow caching of PGP keys via key access interface In the current PGPDataFormat implementation, you provide the public and secret keyring as file or byte array and the keyrings are parsed into object representation during each call. This is fine if you want dynamically exchange the keyrings. However, this has a performance impact. In the provided patch I added the possibility that the PGP keys can be cached so that the performance can be improved. I did this by adding the two interfaces PGPPublicKeyAccess and PGPSecretKeyAccess. So user can now implement his own key access or use the provided default implementations PGPPublicKeyAccessDefault and PGPSecretKeyAccessDefault. Improvement PGPDataFormat: allow caching of PGP keys via key access interface In the current PGPDataFormat implementation, you provide the public and secret keyring as file or byte array and the keyrings are parsed into object representation during each call. This is fine if you want dynamically exchange the keyrings. However, this has a performance impact. In the provided patch I added the possibility that the PGP keys can be cached so that the performance can be improved. I did this by adding the two interfaces PGPPublicKeyAccess and PGPSecretKeyAccess. So user can now implement his own key access or use the provided default implementations PGPPublicKeyAccessDefault and PGPSecretKeyAccessDefault.
CAMEL-7193 Assertions are applied an extra, unnecessary time after an assertion period {{org.apache.camel.component.mock.MockEndpoint.expectedMessagesMatches(Predicate...)}} is implemented in such a way that, if the test at hand is run with an assert period, then an assertion will be run once before the assert period, but will then be run twice more (when it only needs to run once more) after the assertion period is up. This is because the {{run()}} method of the {{org.apache.camel.component.mock.AssertionClause}} created in {{expectedMessagesMatches(Predicate...)}} calls {{AssertionClause.addPredicate(Predicate)}}, which has not been implemented as an [idempotent|http://en.wiktionary.org/wiki/idempotence] function.Therefore, when the assertion is run before the assert period, the {{Predicate}} is added to the {{AssertionClause}} once, and when the assertion is run again _after_ the assert period, the same {{Predicate}} is added again to the same {{AssertionClause}}, and so it is executed one more time than necessary.This can be fixed by making the method {{AssertionClause.addPredicate(Predicate)}} idempotent. Suggestions for doing so are:*  to change the type of {{org.apache.camel.component.mock.AssertionClause.predicates}} from {{List<Predicate>}} to {{Set<Predicate>}} ({{java.util.LinkedHashSet}} will preserve insertion order), or* to add a containment check in {{AssertionClause.addPredicate(Predicate)}}, before adding the {{Predicate}} to the list.I am not sure whether this will work with equality checking of anonymous Predicate classes with themselves. Improvement Assertions are applied an extra, unnecessary time after an assertion period {{org.apache.camel.component.mock.MockEndpoint.expectedMessagesMatches(Predicate...)}} is implemented in such a way that, if the test at hand is run with an assert period, then an assertion will be run once before the assert period, but will then be run twice more (when it only needs to run once more) after the assertion period is up. This is because the {{run()}} method of the {{org.apache.camel.component.mock.AssertionClause}} created in {{expectedMessagesMatches(Predicate...)}} calls {{AssertionClause.addPredicate(Predicate)}}, which has not been implemented as an [idempotent|http://en.wiktionary.org/wiki/idempotence] function.Therefore, when the assertion is run before the assert period, the {{Predicate}} is added to the {{AssertionClause}} once, and when the assertion is run again _after_ the assert period, the same {{Predicate}} is added again to the same {{AssertionClause}}, and so it is executed one more time than necessary.This can be fixed by making the method {{AssertionClause.addPredicate(Predicate)}} idempotent. Suggestions for doing so are:*  to change the type of {{org.apache.camel.component.mock.AssertionClause.predicates}} from {{List<Predicate>}} to {{Set<Predicate>}} ({{java.util.LinkedHashSet}} will preserve insertion order), or* to add a containment check in {{AssertionClause.addPredicate(Predicate)}}, before adding the {{Predicate}} to the list.I am not sure whether this will work with equality checking of anonymous Predicate classes with themselves.
CAMEL-7191 Disable JMX load performance statistics - Avoids background thread See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Turn-off-JMX-load-statistics-by-default-tp5747018.html Improvement Disable JMX load performance statistics - Avoids background thread See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Turn-off-JMX-load-statistics-by-default-tp5747018.html
CAMEL-7190 camel.apache.org not showing properly when using https The site camel.apache.org does not display properly on recent Firefox versions due to mixed http and https content.See https://blog.mozilla.org/tanvi/2013/04/10/mixed-content-blocking-enabled-in-firefox-23/Resolution would be to link all relevant content without protocol;//camel.apache.org/styles/site.cssinstead ofhttp://camel.apache.org/styles/site.cssI would be glad to do it but don't have the rights to do so. Improvement camel.apache.org not showing properly when using https The site camel.apache.org does not display properly on recent Firefox versions due to mixed http and https content.See https://blog.mozilla.org/tanvi/2013/04/10/mixed-content-blocking-enabled-in-firefox-23/Resolution would be to link all relevant content without protocol;//camel.apache.org/styles/site.cssinstead ofhttp://camel.apache.org/styles/site.cssI would be glad to do it but don't have the rights to do so.
CAMEL-7188 ManagedCamelContext - Find component names doesnt work Running the twitter example we have 3 components in use, as you can see. But the findComponentNames returns an empty list in JMX.It should find these 3 names.See screenshot Improvement ManagedCamelContext - Find component names doesnt work Running the twitter example we have 3 components in use, as you can see. But the findComponentNames returns an empty list in JMX.It should find these 3 names.See screenshot
CAMEL-7187 apt document generator - OSGi split package issue when writing to same package The apt processor should generate the html docs in component package and not in org.apache.camel.component. As the latter causes osgi split packages, and also each component bundle plugin does not include that package, and therefore the documentation is missing in the JARs.Having the docs in the component package where the .class code is resolves this problem.Another alternative is to write to META-INF/services/org/apache/camel/component like component.properties does.Though then resource loading from runtime is a little more tricky. Improvement apt document generator - OSGi split package issue when writing to same package The apt processor should generate the html docs in component package and not in org.apache.camel.component. As the latter causes osgi split packages, and also each component bundle plugin does not include that package, and therefore the documentation is missing in the JARs.Having the docs in the component package where the .class code is resolves this problem.Another alternative is to write to META-INF/services/org/apache/camel/component like component.properties does.Though then resource loading from runtime is a little more tricky.
CAMEL-7186 Add @UriParam to components in camel-core Some components is missing havinghttp://camel.apache.org/endpoint-annotations.html Improvement Add @UriParam to components in camel-core Some components is missing havinghttp://camel.apache.org/endpoint-annotations.html
CAMEL-7181 Propagate the attachments information when the CXF endpoint is POJO and disable the MTOM The DefaultCxfBinding doesn't propagate the attachments information when the CXF endpoint is POJO, but if the MTOM is not enabled, it could be harder for user to access the attachment. Improvement Propagate the attachments information when the CXF endpoint is POJO and disable the MTOM The DefaultCxfBinding doesn't propagate the attachments information when the CXF endpoint is POJO, but if the MTOM is not enabled, it could be harder for user to access the attachment.
CAMEL-7178 Create JAX-RS MessageBodyWriter and Reader which will work with Camel data format The provider will be initialized with a reference to Camel Data Format component; will let people avoid duplicating the provider declarations when the data format has already been declared Improvement Create JAX-RS MessageBodyWriter and Reader which will work with Camel data format The provider will be initialized with a reference to Camel Data Format component; will let people avoid duplicating the provider declarations when the data format has already been declared
CAMEL-7177 camel-vertx - Should allow to use clustered and non clustered vertx We should default vertx in non clustered embedded mode.And then only if end user configure the component with a host port, then its clustered using that. Improvement camel-vertx - Should allow to use clustered and non clustered vertx We should default vertx in non clustered embedded mode.And then only if end user configure the component with a host port, then its clustered using that.
CAMEL-7176 camel-vertx - Should support async request/reply See nabblehttp://camel.465427.n5.nabble.com/Camel-Vert-x-problems-tp5746917.html Improvement camel-vertx - Should support async request/reply See nabblehttp://camel.465427.n5.nabble.com/Camel-Vert-x-problems-tp5746917.html
CAMEL-7171 Upgrade to JClouds 1.7.1 At present, camel-jclouds cannot be used with Java 1.7.0_51.See [JCLOUDS-427|https://issues.apache.org/jira/browse/JCLOUDS-427] for details. Task Upgrade to JClouds 1.7.1 At present, camel-jclouds cannot be used with Java 1.7.0_51.See [JCLOUDS-427|https://issues.apache.org/jira/browse/JCLOUDS-427] for details.
CAMEL-7169 Generic File Process Strategy : Camel tries to rename already renamed (moved) local file.  Generic File Process Strategy: Camel tries to rename already renamed (moved) local file.  Improvement Generic File Process Strategy : Camel tries to rename already renamed (moved) local file.  Generic File Process Strategy: Camel tries to rename already renamed (moved) local file. 
CAMEL-7166 Upgrade Camel Karaf Spring to 3.2.7 when we have OSGi bundles for them 3.2.7 bundles is in the works by the SMX team. When they are released we should use those in Karaf/Camel so people can use latest 3.2.x releases of Spring. Currently we would be stuck on 3.2.4 which is the last Spring OSGi bundle release from the spring team. Task Upgrade Camel Karaf Spring to 3.2.7 when we have OSGi bundles for them 3.2.7 bundles is in the works by the SMX team. When they are released we should use those in Karaf/Camel so people can use latest 3.2.x releases of Spring. Currently we would be stuck on 3.2.4 which is the last Spring OSGi bundle release from the spring team.
CAMEL-7165 Drop spring 3.1 support in Camel 2.13 onwards We should drop spring 3.1 support in Camel 2.13 onwards.See also talk on devhttp://camel.465427.n5.nabble.com/DISCUSS-Drop-Spring-3-1-support-in-Camel-2-13-onwards-tp5746724.html Task Drop spring 3.1 support in Camel 2.13 onwards We should drop spring 3.1 support in Camel 2.13 onwards.See also talk on devhttp://camel.465427.n5.nabble.com/DISCUSS-Drop-Spring-3-1-support-in-Camel-2-13-onwards-tp5746724.html
CAMEL-7164 TypeConverterRegistry - More JMX details The type converter registry mbean has a little details today. But we should also include information on number of type converters in the registry, and allow end users to query if a converter exists, and as well browse the converters etc. Improvement TypeConverterRegistry - More JMX details The type converter registry mbean has a little details today. But we should also include information on number of type converters in the registry, and allow end users to query if a converter exists, and as well browse the converters etc.
CAMEL-7156 SpringCamelContext should shut down cleanly The CamelContext does not shutdown properly when running inside a Spring ApplicationContext.  Upon shutdown I get a lot of the following errors:{noformat}org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'someBean': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1196)	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:51)	at org.apache.camel.component.bean.RegistryBean.lookupBean(RegistryBean.java:136)	at org.apache.camel.component.bean.RegistryBean.getBean(RegistryBean.java:62)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:83)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:85)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:105)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:114)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)	at java.lang.Thread.run(Thread.java:636)Caused by: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'someBean': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:209)	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192)	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075)	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:66)	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)	... 78 more{noformat}I can use depends-on for every bean that my context uses, but I shouldn't have to do that.  It can also be hard to manage that type of pattern.I think SpringCamelContext should implement the SmartLifecycle interface from Spring (see http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).{{int getPhase();}} should return a high value (probably Integer.MAX_VALUE) and {{void stop(Runnable callback);}} should only call {{callback.run()}} once the camel context has completed shutting down.  I think this would enable camel to shutdown cleanly in spring without users having to specify that every bean that is used depends-on the camel context.  The only issue I can see is the disconnect between camel's default shutdown time and spring's default shutdown timeout.  The camel context has a default shutdown timeout of 300 seconds (http://camel.apache.org/graceful-shutdown.html) while spring's per-phase timeout is 30 seconds (http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).  It would be nice if those two were in sync. Improvement SpringCamelContext should shut down cleanly The CamelContext does not shutdown properly when running inside a Spring ApplicationContext.  Upon shutdown I get a lot of the following errors:{noformat}org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'someBean': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1196)	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:51)	at org.apache.camel.component.bean.RegistryBean.lookupBean(RegistryBean.java:136)	at org.apache.camel.component.bean.RegistryBean.getBean(RegistryBean.java:62)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:83)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:85)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:105)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:114)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)	at java.lang.Thread.run(Thread.java:636)Caused by: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'someBean': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:209)	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192)	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075)	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:66)	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)	... 78 more{noformat}I can use depends-on for every bean that my context uses, but I shouldn't have to do that.  It can also be hard to manage that type of pattern.I think SpringCamelContext should implement the SmartLifecycle interface from Spring (see http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).{{int getPhase();}} should return a high value (probably Integer.MAX_VALUE) and {{void stop(Runnable callback);}} should only call {{callback.run()}} once the camel context has completed shutting down.  I think this would enable camel to shutdown cleanly in spring without users having to specify that every bean that is used depends-on the camel context.  The only issue I can see is the disconnect between camel's default shutdown time and spring's default shutdown timeout.  The camel context has a default shutdown timeout of 300 seconds (http://camel.apache.org/graceful-shutdown.html) while spring's per-phase timeout is 30 seconds (http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).  It would be nice if those two were in sync.
CAMEL-7154 InterceptSendToMockEndpointStrategy - easier to add custom logic When end users of Camel may need to do a bit of custom logic and instead of having to duplicate the source code of InterceptSendToMockEndpointStrategy, we should have a onXXX method where they can add their custom logic. Improvement InterceptSendToMockEndpointStrategy - easier to add custom logic When end users of Camel may need to do a bit of custom logic and instead of having to duplicate the source code of InterceptSendToMockEndpointStrategy, we should have a onXXX method where they can add their custom logic.
CAMEL-7152 HttpProducer loses response data (specifically which headers where returned) HTTPProducer is currently copying all the older headers from IN onto the OUT.This means that after doing an HTTP call, there is *no way* to know which headers where returned by destination server, and which were there originally.In my case this is disastrous because I need to do an HMAC which include all headers :(Please add an HttpEndpoint Options which allows to disable that behaviour and not copy any old headers from IN. (and yes in that case the original headers would get lost, but then the developer can just preserve whatever he needs by storing the data in the exchange properties) New Feature HttpProducer loses response data (specifically which headers where returned) HTTPProducer is currently copying all the older headers from IN onto the OUT.This means that after doing an HTTP call, there is *no way* to know which headers where returned by destination server, and which were there originally.In my case this is disastrous because I need to do an HMAC which include all headers :(Please add an HttpEndpoint Options which allows to disable that behaviour and not copy any old headers from IN. (and yes in that case the original headers would get lost, but then the developer can just preserve whatever he needs by storing the data in the exchange properties)
CAMEL-7150 Provides options to setup the parameter on the WebSocketServlet  We should provides the setting of WebSocketServlet in the camel-websocket uri. Improvement Provides options to setup the parameter on the WebSocketServlet  We should provides the setting of WebSocketServlet in the camel-websocket uri.
CAMEL-7148 Added the ability to send messages to several participants. Use header with name "CamelXmppTo" to send jabber messages to several participants.Example:{code}<to uri="sql:select Message, Participant from SomeTable"/><split>    <simple>${body}</simple>    <setHeader headerName="CamelXmppTo">        <simple>${body[Participant]}</simple>    </setHeader>    <setBody>        <simple>${body[Message]}</simple>    </setBody>    <to uri="xmpp://user@jabber.org/not_used?password=pass"/></split>{code} Improvement Added the ability to send messages to several participants. Use header with name "CamelXmppTo" to send jabber messages to several participants.Example:{code}<to uri="sql:select Message, Participant from SomeTable"/><split>    <simple>${body}</simple>    <setHeader headerName="CamelXmppTo">        <simple>${body[Participant]}</simple>    </setHeader>    <setBody>        <simple>${body[Message]}</simple>    </setBody>    <to uri="xmpp://user@jabber.org/not_used?password=pass"/></split>{code}
CAMEL-7140 camel-quartz - loading properties file should support file path If you want to configure quartz component to load a .properties file from the file system, then its not as easy.Its loaded by default from classpath, so you get errors like thisCaused by: org.quartz.SchedulerException: Quartz properties file not found in classpath: file:./etc/myquartz.properties	at org.apache.camel.component.quartz2.QuartzComponent.loadProperties(QuartzComponent.java:187)[ Improvement camel-quartz - loading properties file should support file path If you want to configure quartz component to load a .properties file from the file system, then its not as easy.Its loaded by default from classpath, so you get errors like thisCaused by: org.quartz.SchedulerException: Quartz properties file not found in classpath: file:./etc/myquartz.properties	at org.apache.camel.component.quartz2.QuartzComponent.loadProperties(QuartzComponent.java:187)[
CAMEL-7137 camel-salesforce - Make it easier to configure in blueprint Darn that blueprint cannot figure out to convert a text value to String[] as spring / spring-dm can do.So we gotta help that poor chap. This is the error you get today{code}    <bean id="salesforce" class="org.apache.camel.component.salesforce.SalesforceComponent">        <property name="loginConfig" ref="salesforceConfig" />        <property name="packages" value="com.foo.bar"/>    </bean>{code}{code}Caused by: java.lang.Exception: Unable to convert value xxx.xxxx to type class [Ljava.lang.String;. Type class [Ljava.lang.String; is an interface or an abstract class{code}The same code works fine in spring. And as we have people migrating between the two we should make it easy for them. Improvement camel-salesforce - Make it easier to configure in blueprint Darn that blueprint cannot figure out to convert a text value to String[] as spring / spring-dm can do.So we gotta help that poor chap. This is the error you get today{code}    <bean id="salesforce" class="org.apache.camel.component.salesforce.SalesforceComponent">        <property name="loginConfig" ref="salesforceConfig" />        <property name="packages" value="com.foo.bar"/>    </bean>{code}{code}Caused by: java.lang.Exception: Unable to convert value xxx.xxxx to type class [Ljava.lang.String;. Type class [Ljava.lang.String; is an interface or an abstract class{code}The same code works fine in spring. And as we have people migrating between the two we should make it easy for them.
CAMEL-7135 Add page orientation property to camel-printer component The printer component currently does not support specifying a pageorientation. The Java Print Service supports portrait, landscape,reverse-portrait and reverse-landscape (seejavax.print.attribute.standard.OrientationRequested attribute). The camel-printer component shall be extended to support anadditional configuration parameter "orientation" with the above mentionedvalues "portrait", "landscape","reverse-portrait" and "reverse-landscape". The default page orientation shall be "portrait".See also http://camel.465427.n5.nabble.com/camel-printer-with-page-orientation-td5745991.html Improvement Add page orientation property to camel-printer component The printer component currently does not support specifying a pageorientation. The Java Print Service supports portrait, landscape,reverse-portrait and reverse-landscape (seejavax.print.attribute.standard.OrientationRequested attribute). The camel-printer component shall be extended to support anadditional configuration parameter "orientation" with the above mentionedvalues "portrait", "landscape","reverse-portrait" and "reverse-landscape". The default page orientation shall be "portrait".See also http://camel.465427.n5.nabble.com/camel-printer-with-page-orientation-td5745991.html
CAMEL-7134 camel-twitter supports to configure if using SSL or not  [twitter is forcing to use SSL connection|https://dev.twitter.com/discussions/24239] we need to provide the setting of using SSL and turn the default using SSL setting of twitter configure to true. Improvement camel-twitter supports to configure if using SSL or not  [twitter is forcing to use SSL connection|https://dev.twitter.com/discussions/24239] we need to provide the setting of using SSL and turn the default using SSL setting of twitter configure to true.
CAMEL-7131 Set some default feature of DocumentFactoryBuilder We should disable the external-general-entities feature of DocumentBuilderFactory by default. Improvement Set some default feature of DocumentFactoryBuilder We should disable the external-general-entities feature of DocumentBuilderFactory by default.
CAMEL-7127 CXF component doesn't work with Spring 4 CXF 2.x uses deprecated {{org.springframework.jms.connection.SingleConnectionFactory102}} class removed in Spring 4. Because of that camel-cxf doesn't work with Spring 4. This issue has been discussed on this (2) forum thread already. (1) https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.spring4/lastBuild/org.apache.camel$camel-cxf/testReport/org.apache.camel.component.cxf.jms/CxfEndpointJMSConsumerTest/testInvocation(2) http://camel.465427.n5.nabble.com/Spring-4-update-td5745746.html Sub-task CXF component doesn't work with Spring 4 CXF 2.x uses deprecated {{org.springframework.jms.connection.SingleConnectionFactory102}} class removed in Spring 4. Because of that camel-cxf doesn't work with Spring 4. This issue has been discussed on this (2) forum thread already. (1) https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.spring4/lastBuild/org.apache.camel$camel-cxf/testReport/org.apache.camel.component.cxf.jms/CxfEndpointJMSConsumerTest/testInvocation(2) http://camel.465427.n5.nabble.com/Spring-4-update-td5745746.html
CAMEL-7122 javascript language not resolving .when().javascript("3 > 1 + 1") causes bundle not to be loaded, with the following error:ERROR | BluePrinntContainerImpl | Bundle my-service is waiting for dependencies[(&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver))]It seems that the javascript language is not registered correctly.Adding a custom Activator to register languages found by all ScriptEngineFactory's, and registering Rhino engine as "js" instead of "ECMAScript" seems to solve the problem.This problem is in 2.10.0. I have no idea if it has been fixed in other versions.Can someone please check .javascript() functionality in 2.11? Since if it has indeed been fixed in future versions, then this bug can be closed :)Workaround posted here:http://stackoverflow.com/questions/20997276/jboss-fuse-apache-camel-wont-resolve-language-js-javascript-for-bundle Improvement javascript language not resolving .when().javascript("3 > 1 + 1") causes bundle not to be loaded, with the following error:ERROR | BluePrinntContainerImpl | Bundle my-service is waiting for dependencies[(&(language=js)(objectClass=org.apache.camel.spi.LanguageResolver))]It seems that the javascript language is not registered correctly.Adding a custom Activator to register languages found by all ScriptEngineFactory's, and registering Rhino engine as "js" instead of "ECMAScript" seems to solve the problem.This problem is in 2.10.0. I have no idea if it has been fixed in other versions.Can someone please check .javascript() functionality in 2.11? Since if it has indeed been fixed in future versions, then this bug can be closed :)Workaround posted here:http://stackoverflow.com/questions/20997276/jboss-fuse-apache-camel-wont-resolve-language-js-javascript-for-bundle
CAMEL-7121 Relative dot segment paths not resolved in org.apache.camel.core.osgi.OsgiClassResolver org.apache.camel.core.osgi.OsgiClassResolver.loadResourceAsURL(String uri) does normalize a/b/c/../../file path when passed to Bundle.getResource()per RFC 3986As a result, path a/file is resolved but not path a/b/c/../../file.Apache Felix claims it should not normalize this path as stated inhttps://issues.apache.org/jira/browse/FELIX-369This happens in context of relative ../../file path for schema import that is used in validator. Improvement Relative dot segment paths not resolved in org.apache.camel.core.osgi.OsgiClassResolver org.apache.camel.core.osgi.OsgiClassResolver.loadResourceAsURL(String uri) does normalize a/b/c/../../file path when passed to Bundle.getResource()per RFC 3986As a result, path a/file is resolved but not path a/b/c/../../file.Apache Felix claims it should not normalize this path as stated inhttps://issues.apache.org/jira/browse/FELIX-369This happens in context of relative ../../file path for schema import that is used in validator.
CAMEL-7119 AggregationStrategies - Add useOriginal If you want to use the original after a multicast, then just you can use{code}org.apache.camel.util.toolbox.AggregationStrategies#useOriginal{code}Instead of writing your own. Improvement AggregationStrategies - Add useOriginal If you want to use the original after a multicast, then just you can use{code}org.apache.camel.util.toolbox.AggregationStrategies#useOriginal{code}Instead of writing your own.
CAMEL-7118 Hazelcast-based Recoverable Aggregation Repository This patch introduces HazelcastAggregationRepository class that implements RecoverableAggregationRepository and OptimisticLockingAggregationRepository. This class uses a Hazelcast distributed maps as a backing store for operational and persisted exchanges.This repository is aimed to support aggregation in an environment where multiple hosts run identical Camel routes which participate an aggregation process. New Feature Hazelcast-based Recoverable Aggregation Repository This patch introduces HazelcastAggregationRepository class that implements RecoverableAggregationRepository and OptimisticLockingAggregationRepository. This class uses a Hazelcast distributed maps as a backing store for operational and persisted exchanges.This repository is aimed to support aggregation in an environment where multiple hosts run identical Camel routes which participate an aggregation process.
CAMEL-7117 JettyHttpProducer.client._threadPool contains non-daemon threads only When custom JettyClient is created for JettyHttpProducer (line 79 invoking JettyClientComponent:708)only min/max threads can be provided, and all threads are created with non-daemon flag.Personally I would make jetty client thread pool daemon only, but if it cannot be done, there should be additional flag on JettyEndpoint level to make it configurable. Improvement JettyHttpProducer.client._threadPool contains non-daemon threads only When custom JettyClient is created for JettyHttpProducer (line 79 invoking JettyClientComponent:708)only min/max threads can be provided, and all threads are created with non-daemon flag.Personally I would make jetty client thread pool daemon only, but if it cannot be done, there should be additional flag on JettyEndpoint level to make it configurable.
CAMEL-7114 Make Spring 4 Maven profile to pass the build Build invoked with the command `mvn install -Pspring4` should pass successfully. Sub-task Make Spring 4 Maven profile to pass the build Build invoked with the command `mvn install -Pspring4` should pass successfully.
CAMEL-7113 Ignored InterruptedException in IdGenerator See AMQ-4958We should do similar in our uuid generator based on amq code Improvement Ignored InterruptedException in IdGenerator See AMQ-4958We should do similar in our uuid generator based on amq code
CAMEL-7109 Attachments are not correctly ordered Hi all, for a project I'm working on where mail attachments are retrieved from a gmail account, the order of the attachments is very important.  In Camel, I use a SplitAttachmentsExpression to split all the attachments and process them sequentially.  However, I saw that the method createAttachments in DefaultMessage is using a plain old HashMap, thus resulting in a random order of the attachments. If this would be a LinkedHashMap, the order of the messages would be assured when processing in Camel.  Improvement Attachments are not correctly ordered Hi all, for a project I'm working on where mail attachments are retrieved from a gmail account, the order of the attachments is very important.  In Camel, I use a SplitAttachmentsExpression to split all the attachments and process them sequentially.  However, I saw that the method createAttachments in DefaultMessage is using a plain old HashMap, thus resulting in a random order of the attachments. If this would be a LinkedHashMap, the order of the messages would be assured when processing in Camel. 
CAMEL-7105 Add ability to send html emails and auto reconnect for sqs queues Hello,I am putting a ticket in for 2 features we found missing in the aws component. I have these in a pull request already, located here https://github.com/apache/camel/pull/60. Thanks. New Feature Add ability to send html emails and auto reconnect for sqs queues Hello,I am putting a ticket in for 2 features we found missing in the aws component. I have these in a pull request already, located here https://github.com/apache/camel/pull/60. Thanks.
CAMEL-7104 Add support for "all" permissions for authorization in camel-shiro Currently, the ShiroSecurityPolicy takes a List of Shiro Permission objects for authorization. Authorization succeeds if "any" of the permissions match that of the current user. However, it's not possible to support requiring "all" of the permissions, expect via the permission wildcard syntax, which may not be convenient for every circumstance. Improvement Add support for "all" permissions for authorization in camel-shiro Currently, the ShiroSecurityPolicy takes a List of Shiro Permission objects for authorization. Authorization succeeds if "any" of the permissions match that of the current user. However, it's not possible to support requiring "all" of the permissions, expect via the permission wildcard syntax, which may not be convenient for every circumstance.
CAMEL-7103 camel-quartz - Store trigger information in job map At runtime quartz scheduler does not have any information about the triggers which is easily available to know if its a simple or cron trigger, and how they are configured.Having those details in the job map allows end users to access this information in the Camel routes. Improvement camel-quartz - Store trigger information in job map At runtime quartz scheduler does not have any information about the triggers which is easily available to know if its a simple or cron trigger, and how they are configured.Having those details in the job map allows end users to access this information in the Camel routes.
CAMEL-7101 Add aggregation strategy to aggregate multiple messages into a zip file An aggregation strategy that aggregate multiple message into a zip file.Component is set to camel-core since I could not find camel-zipfile in the component list. New Feature Add aggregation strategy to aggregate multiple messages into a zip file An aggregation strategy that aggregate multiple message into a zip file.Component is set to camel-core since I could not find camel-zipfile in the component list.
CAMEL-7095 Veracode compliance. Insufficient Entropy (CWE ID 331) https://github.com/apache/camel/pull/80During Veracode scan of our application we discover several warnings in Camel. Please review our fix and apply it if it make sense.Quote from Veracode report below:Insufficient Entropy (CWE ID 331)(7 flaws)DescriptionStandard random number generators do not provide a sufficient amount of entropy when used for security purposes.Attackers can brute force the output of pseudorandom number generators such as rand().Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in theCryptoAPI or in an open source library such as OpenSSL. Wish Veracode compliance. Insufficient Entropy (CWE ID 331) https://github.com/apache/camel/pull/80During Veracode scan of our application we discover several warnings in Camel. Please review our fix and apply it if it make sense.Quote from Veracode report below:Insufficient Entropy (CWE ID 331)(7 flaws)DescriptionStandard random number generators do not provide a sufficient amount of entropy when used for security purposes.Attackers can brute force the output of pseudorandom number generators such as rand().Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in theCryptoAPI or in an open source library such as OpenSSL.
CAMEL-7093 Veracode compliance. Improper Resource Shutdown or Release (CWE ID 404) in QuartzComponent Pull request https://github.com/apache/camel/pull/77During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.Quote from Veracode report below:Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)DescriptionThe application fails to release (or incorrectly releases) a system resource before it is made available for re-use. Thiscondition often occurs with resources such as database connections or file handles. Most unreleased resource issuesresult in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may bepossible to launch a denial of service attack by depleting the resource pool.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsWhen a resource is created or allocated, the developer is responsible for properly releasing the resource as well asaccounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.Instances found via Static Scan.../QuartzComponent.java line 436 Task Veracode compliance. Improper Resource Shutdown or Release (CWE ID 404) in QuartzComponent Pull request https://github.com/apache/camel/pull/77During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.Quote from Veracode report below:Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)DescriptionThe application fails to release (or incorrectly releases) a system resource before it is made available for re-use. Thiscondition often occurs with resources such as database connections or file handles. Most unreleased resource issuesresult in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may bepossible to launch a denial of service attack by depleting the resource pool.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsWhen a resource is created or allocated, the developer is responsible for properly releasing the resource as well asaccounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.Instances found via Static Scan.../QuartzComponent.java line 436
CAMEL-7091 EventNotifiers don't work under Blueprint as a referenced service I'm facing a similar issue to what is describer at CAMEL-5299, this time the same behaviour happen when using the EventNotifier from another bundle's exported service.Bundle 1 (exposes an EventNotifier):Export-Service =        com.event.logger.CommonLogEventNotifierblueprint.xml:	<service id="commonLogEventNotifier" interface="com.event.logger.CommonLogEventNotifier">		<bean class="com.event.logger.CommonLogEventNotifierImpl">		</bean>	</service>Bundle 2 (uses the EventNotifier)Import-Service =        com.event.logger.CommonLogEventNotifier;multiple:=falseblueprint.xml:	<reference id="commonLogEventNotifier" interface="com.event.logger.CommonLogEventNotifier" />The EventNotifier class definition is:public class CommonLogEventNotifierImpl extends EventNotifierSupport implements EventNotifier, com.event.logger.CommonLogEventNotifier Improvement EventNotifiers don't work under Blueprint as a referenced service I'm facing a similar issue to what is describer at CAMEL-5299, this time the same behaviour happen when using the EventNotifier from another bundle's exported service.Bundle 1 (exposes an EventNotifier):Export-Service =        com.event.logger.CommonLogEventNotifierblueprint.xml:	<service id="commonLogEventNotifier" interface="com.event.logger.CommonLogEventNotifier">		<bean class="com.event.logger.CommonLogEventNotifierImpl">		</bean>	</service>Bundle 2 (uses the EventNotifier)Import-Service =        com.event.logger.CommonLogEventNotifier;multiple:=falseblueprint.xml:	<reference id="commonLogEventNotifier" interface="com.event.logger.CommonLogEventNotifier" />The EventNotifier class definition is:public class CommonLogEventNotifierImpl extends EventNotifierSupport implements EventNotifier, com.event.logger.CommonLogEventNotifier
CAMEL-7088 Veracode compliance. Improper Resource Shutdown or Release (CWE ID 404) in FileLockExclusiveReadLockStrategy Pull request https://github.com/apache/camel/pull/74During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.Pull request https://github.com/apache/camel/pull/74During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.Quote from Veracode report below:Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)DescriptionThe application fails to release (or incorrectly releases) a system resource before it is made available for re-use. Thiscondition often occurs with resources such as database connections or file handles. Most unreleased resource issuesresult in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may bepossible to launch a denial of service attack by depleting the resource pool.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsWhen a resource is created or allocated, the developer is responsible for properly releasing the resource as well asaccounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.Instances found via Static Scan.../FileLockExclusiveReadLockStrategy.java line 68 Improvement Veracode compliance. Improper Resource Shutdown or Release (CWE ID 404) in FileLockExclusiveReadLockStrategy Pull request https://github.com/apache/camel/pull/74During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.Pull request https://github.com/apache/camel/pull/74During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.Quote from Veracode report below:Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)DescriptionThe application fails to release (or incorrectly releases) a system resource before it is made available for re-use. Thiscondition often occurs with resources such as database connections or file handles. Most unreleased resource issuesresult in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may bepossible to launch a denial of service attack by depleting the resource pool.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsWhen a resource is created or allocated, the developer is responsible for properly releasing the resource as well asaccounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.Instances found via Static Scan.../FileLockExclusiveReadLockStrategy.java line 68
CAMEL-7086 Allow multiple Zookeeper servers in endpoint Klaus sent us a pull request in the github for it.https://github.com/apache.camel/pull/72 Improvement Allow multiple Zookeeper servers in endpoint Klaus sent us a pull request in the github for it.https://github.com/apache.camel/pull/72
CAMEL-7083 Log a warning when default encryption keys used Two Camel components use default keys for encryption: camel-xmlsecurity and camel-shiro. This task is to log a warning when this happens, as using a default secret key is more or less meaningless. Improvement Log a warning when default encryption keys used Two Camel components use default keys for encryption: camel-xmlsecurity and camel-shiro. This task is to log a warning when this happens, as using a default secret key is more or less meaningless.
CAMEL-7082 Supporting to set more work thread in camel-restlet component We need to provide the setting of maxQueued parameter in camel-restlet component to help resolve the restlet connector overload issue.http://stackoverflow.com/questions/20632706/apache-restlet-connector-overload Improvement Supporting to set more work thread in camel-restlet component We need to provide the setting of maxQueued parameter in camel-restlet component to help resolve the restlet connector overload issue.http://stackoverflow.com/questions/20632706/apache-restlet-connector-overload
CAMEL-7081 Some html-pages do not display code content e.g. http://camel.apache.org/wire-tap.htmlwhere the code content is not displayed Improvement Some html-pages do not display code content e.g. http://camel.apache.org/wire-tap.htmlwhere the code content is not displayed
CAMEL-7080 Add support of lazy load to csv data format  CsvDataFormat uses greedy loading from a stream. This is not applicable for huge files i.e. all rows cannot fit into available memory.I added an option to create a row iterator instead list.Csv format is not line oriented so split("\n") workaround doesn't work always. This patch adds ability to Camel to process infinite csv files with multiline rows. Pull request: https://github.com/yaitskov/camel/commits/csv-iteratorP.S. 1) I found that Bindy does similar work related with parsing csv file into list of why. And I don't see any clue why it doesn't delegate this job to csv file format. Roughly speaking there is code duplication.2) I didn't find camel-csv component on the ticket form. Improvement Add support of lazy load to csv data format  CsvDataFormat uses greedy loading from a stream. This is not applicable for huge files i.e. all rows cannot fit into available memory.I added an option to create a row iterator instead list.Csv format is not line oriented so split("\n") workaround doesn't work always. This patch adds ability to Camel to process infinite csv files with multiline rows. Pull request: https://github.com/yaitskov/camel/commits/csv-iteratorP.S. 1) I found that Bindy does similar work related with parsing csv file into list of why. And I don't see any clue why it doesn't delegate this job to csv file format. Roughly speaking there is code duplication.2) I didn't find camel-csv component on the ticket form.
CAMEL-7079 Improvements to camel-shiro's ShiroSecurityProcessor I am attaching two different patches for some improvements to the ShiroSecurityProcessor in Camel's camel-shiro component. I'd like some feedback on which patch should apply.The scenario is that a ShiroSecurityToken object is retrieved in the ShiroSecurityProcessor. Currently, this object is first encrypted, and then decrypted, before authentication/authorization checking applies. a) Patch "1" makes no change to the current functionality of the processor, but provides a performance improvement to avoid encrypting + decrypting a ShiroSecurityToken object. We only need to decrypt a "String" or "ByteSource" header, not a ShiroSecurityToken object.b) Patch "2" follows the old pattern of encrypting + decrypting the ShiroSecurityToken object, but replaces the unencrypted token in the exchange, with the subsequent encrypted token. This may help avoid unintentional propagation of plaintext values in subsequent communications.The tests all pass with both approaches.  Improvement Improvements to camel-shiro's ShiroSecurityProcessor I am attaching two different patches for some improvements to the ShiroSecurityProcessor in Camel's camel-shiro component. I'd like some feedback on which patch should apply.The scenario is that a ShiroSecurityToken object is retrieved in the ShiroSecurityProcessor. Currently, this object is first encrypted, and then decrypted, before authentication/authorization checking applies. a) Patch "1" makes no change to the current functionality of the processor, but provides a performance improvement to avoid encrypting + decrypting a ShiroSecurityToken object. We only need to decrypt a "String" or "ByteSource" header, not a ShiroSecurityToken object.b) Patch "2" follows the old pattern of encrypting + decrypting the ShiroSecurityToken object, but replaces the unencrypted token in the exchange, with the subsequent encrypted token. This may help avoid unintentional propagation of plaintext values in subsequent communications.The tests all pass with both approaches. 
CAMEL-7078 camel-cxf-transport component should propagate SecurityContext Camel CXF Transport does not propagate a security context available from the current HTTP Servlet Request - which may be wrapped by Spring security, etc. Camel users may still work directly with Camel Exchange properties, but CXF endpoints won't be able to avoid losing the transport-independent approach for checking the security contexts.  Improvement camel-cxf-transport component should propagate SecurityContext Camel CXF Transport does not propagate a security context available from the current HTTP Servlet Request - which may be wrapped by Spring security, etc. Camel users may still work directly with Camel Exchange properties, but CXF endpoints won't be able to avoid losing the transport-independent approach for checking the security contexts. 
CAMEL-7076 spring-event should not be auto enlisted Its annoying that spring-event:default is enlisted always when you use camel-spring. We should only enlist endpoints that are active used by the end user. Improvement spring-event should not be auto enlisted Its annoying that spring-event:default is enlisted always when you use camel-spring. We should only enlist endpoints that are active used by the end user.
CAMEL-7075 Veracode compliance. Improper Resource Shutdown or Release (CWE ID 404) in FileInputStreamCache Pull request https://github.com/apache/camel/pull/71During Veracode scan of our application we discover issue in Camel. Please review our fix and apply it in future versions.Quote from Veracode report below:Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)DescriptionThe application fails to release (or incorrectly releases) a system resource before it is made available for re-use. Thiscondition often occurs with resources such as database connections or file handles. Most unreleased resource issuesresult in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may bepossible to launch a denial of service attack by depleting the resource pool.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsWhen a resource is created or allocated, the developer is responsible for properly releasing the resource as well asaccounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources..../FileInputStreamCache.java line 86 Improvement Veracode compliance. Improper Resource Shutdown or Release (CWE ID 404) in FileInputStreamCache Pull request https://github.com/apache/camel/pull/71During Veracode scan of our application we discover issue in Camel. Please review our fix and apply it in future versions.Quote from Veracode report below:Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)DescriptionThe application fails to release (or incorrectly releases) a system resource before it is made available for re-use. Thiscondition often occurs with resources such as database connections or file handles. Most unreleased resource issuesresult in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may bepossible to launch a denial of service attack by depleting the resource pool.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsWhen a resource is created or allocated, the developer is responsible for properly releasing the resource as well asaccounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources..../FileInputStreamCache.java line 86
CAMEL-7074 Support spring 4.x Upgrade to spring4.There is a non-backwards compatible change in spring 4.x which will cause:{noformat}java.lang.IncompatibleClassChangeError: Found interface org.springframework.test.context.TestContext, but class was expected        at org.apache.camel.test.spring.CamelSpringTestContextLoaderTestExecutionListener.prepareTestInstance(CamelSpringTestContextLoaderTestExecutionListener.java:35)        at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:326)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:212)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:232)        at org.apache.camel.test.junit4.CamelSpringJUnit4ClassRunner.runChild(CamelSpringJUnit4ClassRunner.java:37)        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)        at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)        at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:175)        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:{noformat}due to https://jira.springsource.org/browse/SPR-7692 Task Support spring 4.x Upgrade to spring4.There is a non-backwards compatible change in spring 4.x which will cause:{noformat}java.lang.IncompatibleClassChangeError: Found interface org.springframework.test.context.TestContext, but class was expected        at org.apache.camel.test.spring.CamelSpringTestContextLoaderTestExecutionListener.prepareTestInstance(CamelSpringTestContextLoaderTestExecutionListener.java:35)        at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:326)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:212)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:232)        at org.apache.camel.test.junit4.CamelSpringJUnit4ClassRunner.runChild(CamelSpringJUnit4ClassRunner.java:37)        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)        at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)        at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:175)        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:{noformat}due to https://jira.springsource.org/browse/SPR-7692
CAMEL-7072 Veracode compliance. Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') (CWE ID 470) in AnnotationTypeConverterLoader Pull request https://github.com/apache/camel/pull/68During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions. Quote from Veracode report below:Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') (CWE ID470)(1 flaw)DescriptionA call uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which maycreate unexpected control flow paths through the application. Depending on how reflection is being used, the attackvector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpectedmanner. Even if the object does not implement the specified interface and a ClassCastException is thrown, theconstructor of the user-supplied class name will have already executed.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsValidate the class name against a combination of white and black lists to ensure that only expected behavior isproduced.Instances found via Static ScanModule # Class # Module Location Fix By Flaw Id.../AnnotationTypeConverterLoader.java - line 168 Improvement Veracode compliance. Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') (CWE ID 470) in AnnotationTypeConverterLoader Pull request https://github.com/apache/camel/pull/68During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions. Quote from Veracode report below:Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') (CWE ID470)(1 flaw)DescriptionA call uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which maycreate unexpected control flow paths through the application. Depending on how reflection is being used, the attackvector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpectedmanner. Even if the object does not implement the specified interface and a ClassCastException is thrown, theconstructor of the user-supplied class name will have already executed.Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.RecommendationsValidate the class name against a combination of white and black lists to ensure that only expected behavior isproduced.Instances found via Static ScanModule # Class # Module Location Fix By Flaw Id.../AnnotationTypeConverterLoader.java - line 168
CAMEL-7066 Unable to use Twitter Camel Component with proxy settings Currently camel-twitter endpoint URI doesn't support specifying http proxy host & proxy port. The only alternative is during launch of OSGi console pass system properties -Dtwitter4j.http.proxyPort & -Dtwitter4j.http.proxyHost Improvement Unable to use Twitter Camel Component with proxy settings Currently camel-twitter endpoint URI doesn't support specifying http proxy host & proxy port. The only alternative is during launch of OSGi console pass system properties -Dtwitter4j.http.proxyPort & -Dtwitter4j.http.proxyHost
CAMEL-7065 Disable generate manul build by using profile fastinstall It could save us some time to run the build with fastinstall profile. Task Disable generate manul build by using profile fastinstall It could save us some time to run the build with fastinstall profile.
CAMEL-7060 camel-netty-http - Do not url decode headers by default Change the option urlDecodeHeaders from true to false, as it was a mistake. We should pass on the header values as is. Improvement camel-netty-http - Do not url decode headers by default Change the option urlDecodeHeaders from true to false, as it was a mistake. We should pass on the header values as is.
CAMEL-7056 Support streaming in camel-base64 data type The current implementation of the base64 datatype does not support streaming, even though the underlying commons-codec implementation would support this.The attached patch will add streaming support to the component while keeping compatibility with previous versions for most cases Improvement Support streaming in camel-base64 data type The current implementation of the base64 datatype does not support streaming, even though the underlying commons-codec implementation would support this.The attached patch will add streaming support to the component while keeping compatibility with previous versions for most cases
CAMEL-7053 JPA Skip locked entities The current implementation of the JPA endpoint is created more for using it as a queue for one JVM.This change performs the lock with timeout=0, causing a NOWAIT to be used where implementations support it.Ideally the lock should be performed using refresh() instead of lock() to prevent dirty read exceptions but Hibernate's implementation throws the wrong exception.https://hibernate.atlassian.net/browse/HHH-8786Currently OpenJPA throws the wrong exception for both lock and refresh so the test uses hibernate. See this jira:https://issues.apache.org/jira/browse/OPENJPA-2461The default lock of WRITE=OPTIMISTIC_FORCE_INCREMENT performs the lock too late and their are various jpa implementation problems  (OpenJPA doesn't lock it in memory, hibernate performs the delete before the increment). In nearly every use case PESSIMISTIC_WRITE is more correct. New Feature JPA Skip locked entities The current implementation of the JPA endpoint is created more for using it as a queue for one JVM.This change performs the lock with timeout=0, causing a NOWAIT to be used where implementations support it.Ideally the lock should be performed using refresh() instead of lock() to prevent dirty read exceptions but Hibernate's implementation throws the wrong exception.https://hibernate.atlassian.net/browse/HHH-8786Currently OpenJPA throws the wrong exception for both lock and refresh so the test uses hibernate. See this jira:https://issues.apache.org/jira/browse/OPENJPA-2461The default lock of WRITE=OPTIMISTIC_FORCE_INCREMENT performs the lock too late and their are various jpa implementation problems  (OpenJPA doesn't lock it in memory, hibernate performs the delete before the increment). In nearly every use case PESSIMISTIC_WRITE is more correct.
CAMEL-7051 camel-bindy - Add timezone support to the date pattern pull request https://github.com/yaitskov/camel.gitbranch bindy-timezoneadd timezone attribute to DataField and KeyValuePairField. Improvement camel-bindy - Add timezone support to the date pattern pull request https://github.com/yaitskov/camel.gitbranch bindy-timezoneadd timezone attribute to DataField and KeyValuePairField.
CAMEL-7050 camel-jms drops messages when errorHandler throws an exception When using camel-jms, messages are dropped when an exception is thrown in the deadLetterChannel error handler.See the attached failing unit test.Verified against 2.11 and HEAD Improvement camel-jms drops messages when errorHandler throws an exception When using camel-jms, messages are dropped when an exception is thrown in the deadLetterChannel error handler.See the attached failing unit test.Verified against 2.11 and HEAD
CAMEL-7048 Contribution page is outdated - source code only in git repo Seehttp://camel.apache.org/contributing.htmlThe git repo we have is only the git repo listed herehttp://camel.apache.org/source.htmlWe should cleanup the contribution page and remove the outdated stuff about svn and the apache git mirror repo. And only have that official git repo. And keep mentioning about github, but its no longer delayed, so we should just remove that word also. Task Contribution page is outdated - source code only in git repo Seehttp://camel.apache.org/contributing.htmlThe git repo we have is only the git repo listed herehttp://camel.apache.org/source.htmlWe should cleanup the contribution page and remove the outdated stuff about svn and the apache git mirror repo. And only have that official git repo. And keep mentioning about github, but its no longer delayed, so we should just remove that word also.
CAMEL-7047 FTP Hi,I am trying to ftp a particular file from a directory to a ftp location, so I followed the examples provided in camel 2.12.1, which polls for any file in the target directory specified, and whenever it finds the file it uploads in the ftp location mentioned in the properties file.How ever my requirement is i am writing a method which accepts the file name as an argument and sends that file name in the route builder, so that it uploads the only specified file name from the polling target directory.this is not working!public  void toftp(String node_name,final String file_name) throws Exception {				PropertiesComponent pc = getContext().getComponent("properties", PropertiesComponent.class);		System.out.println("properties:"+getContext().getComponent("properties", PropertiesComponent.class));	    pc.setLocation("classpath:ftp.properties");	    System.out.println("properties location:"+pc.getLocations());	    context_sdp=new DefaultCamelContext();	    context_sdp.addComponent("properties", pc);						if (node_name.equals("NODE_SDP")) {		    			context_sdp.addRoutes(new RouteBuilder() {									@Override					public void configure() throws Exception{						try{					System.out.println("File name received is :"+file_name);					fromF("file:target/upload?fileName=%s?moveFailed=../error",file_name)					.log("Uploading file ${file:name}")					.to("{{ftp.client.sdp}}")					.log("Uploaded file ${file:name} complete.");									}  catch (Exception e ){System.out.println("error:"+e);}					} 			});			context_sdp.start();			Thread.sleep(50000);			context_sdp.stop();		}	This however  works fine if i give fromF("file:target/upload?moveFailed=../error")this polls for any file in the target directory and tries to ftp when ever any file is put in the target directory. Improvement FTP Hi,I am trying to ftp a particular file from a directory to a ftp location, so I followed the examples provided in camel 2.12.1, which polls for any file in the target directory specified, and whenever it finds the file it uploads in the ftp location mentioned in the properties file.How ever my requirement is i am writing a method which accepts the file name as an argument and sends that file name in the route builder, so that it uploads the only specified file name from the polling target directory.this is not working!public  void toftp(String node_name,final String file_name) throws Exception {				PropertiesComponent pc = getContext().getComponent("properties", PropertiesComponent.class);		System.out.println("properties:"+getContext().getComponent("properties", PropertiesComponent.class));	    pc.setLocation("classpath:ftp.properties");	    System.out.println("properties location:"+pc.getLocations());	    context_sdp=new DefaultCamelContext();	    context_sdp.addComponent("properties", pc);						if (node_name.equals("NODE_SDP")) {		    			context_sdp.addRoutes(new RouteBuilder() {									@Override					public void configure() throws Exception{						try{					System.out.println("File name received is :"+file_name);					fromF("file:target/upload?fileName=%s?moveFailed=../error",file_name)					.log("Uploading file ${file:name}")					.to("{{ftp.client.sdp}}")					.log("Uploaded file ${file:name} complete.");									}  catch (Exception e ){System.out.println("error:"+e);}					} 			});			context_sdp.start();			Thread.sleep(50000);			context_sdp.stop();		}	This however  works fine if i give fromF("file:target/upload?moveFailed=../error")this polls for any file in the target directory and tries to ftp when ever any file is put in the target directory.
CAMEL-7046 Base64DataFormat: enable streaming if streamCache=true I added streaming to base64 DataFormat. Streaming will be use if streamCache is switched on.  Improvement Base64DataFormat: enable streaming if streamCache=true I added streaming to base64 DataFormat. Streaming will be use if streamCache is switched on. 
CAMEL-7043 Processing big CSV files by row one by one I have 13G csv file. As far as I know Bindy loads entire file.I know about workaround with .body().token("\n")  to split file in linesand process them independently but it won't with multiline rows. Csv support text fields than can contain new line symbols. New Feature Processing big CSV files by row one by one I have 13G csv file. As far as I know Bindy loads entire file.I know about workaround with .body().token("\n")  to split file in linesand process them independently but it won't with multiline rows. Csv support text fields than can contain new line symbols.
CAMEL-7040 Support calling OGNL expressions on headers accessed using in.headers[header.name] expression? After spending a while trying to figure out how to get Camel to call an OGNL expression on a bean in the Exchange headers with the Simple Language, I discovered that I had gone about it completely the wrong way.What I have is a header, "soap.headers.blah", which is an object. I wanted to access a property, prop, on that header.Initially I tried ${in.headers.soap.headers.blah.prop}, which didn't work.I then spent quite a bit of time trying variations on ${in.headers[soap.headers.blah].prop}, none of which worked. Now, the documentation never said that what I was trying to do would work, so I only have myself to blame for that, but I think it would be quite nice if the second form *did* work, so that in addition to having the following:{{code}}header.foo.OGNLin.header.foo.OGNLin.headers.foo.OGNL{{code}}I could also do{{code}}header[foo.bar].OGNLin.header[foo.bar].OGNLin.headers[foo.bar].OGNL{{code}}I don't know what this involves - I suspect it's not terribly straightforward - but it would be nice to have an option for accessing properties on headers whose names include periods. Improvement Support calling OGNL expressions on headers accessed using in.headers[header.name] expression? After spending a while trying to figure out how to get Camel to call an OGNL expression on a bean in the Exchange headers with the Simple Language, I discovered that I had gone about it completely the wrong way.What I have is a header, "soap.headers.blah", which is an object. I wanted to access a property, prop, on that header.Initially I tried ${in.headers.soap.headers.blah.prop}, which didn't work.I then spent quite a bit of time trying variations on ${in.headers[soap.headers.blah].prop}, none of which worked. Now, the documentation never said that what I was trying to do would work, so I only have myself to blame for that, but I think it would be quite nice if the second form *did* work, so that in addition to having the following:{{code}}header.foo.OGNLin.header.foo.OGNLin.headers.foo.OGNL{{code}}I could also do{{code}}header[foo.bar].OGNLin.header[foo.bar].OGNLin.headers[foo.bar].OGNL{{code}}I don't know what this involves - I suspect it's not terribly straightforward - but it would be nice to have an option for accessing properties on headers whose names include periods.
CAMEL-7034 camel-quartz - Should auto assign scheduler instance name with camel management name To ensure scheduler instance names in unique in the JVM. As the default name is just QuartzScheduler.We already do this in one case when setting up quartz component but not in another case. Improvement camel-quartz - Should auto assign scheduler instance name with camel management name To ensure scheduler instance names in unique in the JVM. As the default name is just QuartzScheduler.We already do this in one case when setting up quartz component but not in another case.
CAMEL-7032 Align the netty version of camel components camel-zookeeper has the old version dependency of netty which could cause some issue if the user is using camel-zookeeper and camel-netty together. Task Align the netty version of camel components camel-zookeeper has the old version dependency of netty which could cause some issue if the user is using camel-zookeeper and camel-netty together.
CAMEL-7030 camel-quartz - Register quartz scheduler in JMX by default If using camel quartz component, you may just configure it without the big .properties file of quartz.Though its harder to enable the scheduler to be enlist in JMX, so you at runtime can see the state of the scheduler and manage it etc.We should enlist the scheduler in JMX out of the box, unless explicit disabled. Improvement camel-quartz - Register quartz scheduler in JMX by default If using camel quartz component, you may just configure it without the big .properties file of quartz.Though its harder to enable the scheduler to be enlist in JMX, so you at runtime can see the state of the scheduler and manage it etc.We should enlist the scheduler in JMX out of the box, unless explicit disabled.
CAMEL-7027 Support to set the expression on the split DSL of  Spring and Blueprint We should support to set the expression instance on the Splitter just like this.{code}<bean id="zipSplitter" class="org.apache.camel.dataformat.zipfile.ZipSplitter" />...<split streaming="true" parallelProcessing="true" expressionRef="zipSplitter">        <convertBodyTo type="java.lang.String" />    <to uri="file:foo" /></split>{code} Improvement Support to set the expression on the split DSL of  Spring and Blueprint We should support to set the expression instance on the Splitter just like this.{code}<bean id="zipSplitter" class="org.apache.camel.dataformat.zipfile.ZipSplitter" />...<split streaming="true" parallelProcessing="true" expressionRef="zipSplitter">        <convertBodyTo type="java.lang.String" />    <to uri="file:foo" /></split>{code}
CAMEL-7026 camel-jms - Allow a message to control the request timeout using a header If you do request/reply over JMS then all messages uses the endpoint configured requestTimeout (default 20 sec).Though sometimes you want individual timeouts per message. So we should have a header to define what timeout to use.We have other headers today for destination, time to live etc. So its not something new. Improvement camel-jms - Allow a message to control the request timeout using a header If you do request/reply over JMS then all messages uses the endpoint configured requestTimeout (default 20 sec).Though sometimes you want individual timeouts per message. So we should have a header to define what timeout to use.We have other headers today for destination, time to live etc. So its not something new.
CAMEL-7023 Add hawtio goal to camel plugin This allows end users to start Camel applications and examples as they would do with mvn camel:run, but using mvn camel:hawtio instead, it also bootup the hawtio web console.This allows end users to use the console to see what happens, visualize the Camel routes, debug the routes, profile the routes, and whatnot. New Feature Add hawtio goal to camel plugin This allows end users to start Camel applications and examples as they would do with mvn camel:run, but using mvn camel:hawtio instead, it also bootup the hawtio web console.This allows end users to use the console to see what happens, visualize the Camel routes, debug the routes, profile the routes, and whatnot.
CAMEL-7022 UnitOfWorkFactory - for spi to allow users to plugin custom uow classes In case you need to do special handling in UoW we would need to allow end users to easily plugin custom implementation. Today we have hardcoded that.So introduce a UnitOfWorkFactory they can implement and plugin in Camel to use. New Feature UnitOfWorkFactory - for spi to allow users to plugin custom uow classes In case you need to do special handling in UoW we would need to allow end users to easily plugin custom implementation. Today we have hardcoded that.So introduce a UnitOfWorkFactory they can implement and plugin in Camel to use.
CAMEL-7017 Camel component for optaplanner Seehttps://github.com/apache/camel/pull/62 New Feature Camel component for optaplanner Seehttps://github.com/apache/camel/pull/62
CAMEL-7015 Allow timeout on the first Exchange for aggregator It would be nice to have a possibility of a timeout starting from the first Exchange for messages having the same correlationExpression when using Aggregation.This scenario is currently not supported because "Its a bit tougher to implement as it would require an improvement to TimeoutMap to support that as well."The full scenario is described in this thread: http://camel.465427.n5.nabble.com/A-simple-Aggregator-use-case-td5743633.html#a5743634 New Feature Allow timeout on the first Exchange for aggregator It would be nice to have a possibility of a timeout starting from the first Exchange for messages having the same correlationExpression when using Aggregation.This scenario is currently not supported because "Its a bit tougher to implement as it would require an improvement to TimeoutMap to support that as well."The full scenario is described in this thread: http://camel.465427.n5.nabble.com/A-simple-Aggregator-use-case-td5743633.html#a5743634
CAMEL-7014 Potential problem with camel-restlet if unavailable I recognized an issue with restlet client if service is terminating while beeing called. Since timeout is set to default default (0 => waits infinite) no response is send and route is blocked (not stoppable at all) Improvement Potential problem with camel-restlet if unavailable I recognized an issue with restlet client if service is terminating while beeing called. Since timeout is set to default default (0 => waits infinite) no response is send and route is blocked (not stoppable at all)
CAMEL-7010 Use non-deprecated to configure the HttpClient HttpClient 4.3 deprecates the old HttpClient configuration API, we need to move to the New API for it. Task Use non-deprecated to configure the HttpClient HttpClient 4.3 deprecates the old HttpClient configuration API, we need to move to the New API for it.
CAMEL-7007 Improved auto assigned mbean names in WAR apps / non-OSGi containers Like we did for OSGi, we should improve the auto assigned mbean naming to avoid creating camel-1, camel-1-1, camel-1-2, camel-1-3 names for <camelContext> which has not been explicit named by the end user.See screenshot for jconsole with 2 WARs in Tomcat. Improvement Improved auto assigned mbean names in WAR apps / non-OSGi containers Like we did for OSGi, we should improve the auto assigned mbean naming to avoid creating camel-1, camel-1-1, camel-1-2, camel-1-3 names for <camelContext> which has not been explicit named by the end user.See screenshot for jconsole with 2 WARs in Tomcat.
CAMEL-7006 Make method asService protected in class CamelBlueprintTestSupport  In *camel-test-blueprint*, Camel version 2.11.2 and 2.12.0 added the possibilty to add OSGi services at startup using the protected method {{addServicesOnStartup}} of {{CamelBlueprintTestSupport}} class.In the Javadoc and in the wiki it says that we can use the method {{asService}} to register a service with a single property.However, this method has no modifier. It is not _protected_, so we can not use it in our test classes (unless they belongs to the same package of {{CamelBlueprintTestSupport}}. Wish Make method asService protected in class CamelBlueprintTestSupport  In *camel-test-blueprint*, Camel version 2.11.2 and 2.12.0 added the possibilty to add OSGi services at startup using the protected method {{addServicesOnStartup}} of {{CamelBlueprintTestSupport}} class.In the Javadoc and in the wiki it says that we can use the method {{asService}} to register a service with a single property.However, this method has no modifier. It is not _protected_, so we can not use it in our test classes (unless they belongs to the same package of {{CamelBlueprintTestSupport}}.
CAMEL-7004 CamelContextMBean - Add attributes for total/started routes This allows from JMX to see information about how many route a camel context has, of which X is started. Just like we log at INFO level when starting Camel. Improvement CamelContextMBean - Add attributes for total/started routes This allows from JMX to see information about how many route a camel context has, of which X is started. Just like we log at INFO level when starting Camel.
CAMEL-7001 Avro DataFormat - Classloading issue with loading schema See nabblehttp://camel.465427.n5.nabble.com/OSGI-camel-avro-2-12-1-AvroDataFormat-loadDefaultSchema-tp5743694.html Improvement Avro DataFormat - Classloading issue with loading schema See nabblehttp://camel.465427.n5.nabble.com/OSGI-camel-avro-2-12-1-AvroDataFormat-loadDefaultSchema-tp5743694.html
CAMEL-7000 Avro DataFormat - Should initialize using start|stop logic instead of at runtime Its better to initialize in doStart|doStop as opposed to at runtime where there can be concurrent messaging etc. Improvement Avro DataFormat - Should initialize using start|stop logic instead of at runtime Its better to initialize in doStart|doStop as opposed to at runtime where there can be concurrent messaging etc.
CAMEL-6997 examples - The online documentation of CDI example is missing. See:https://github.com/apache/camel/blob/master/examples/camel-example-cdi/README.txtAccording that README.txt we need a documentation for this example @http://camel.apache.org/cdi-example.html Task examples - The online documentation of CDI example is missing. See:https://github.com/apache/camel/blob/master/examples/camel-example-cdi/README.txtAccording that README.txt we need a documentation for this example @http://camel.apache.org/cdi-example.html
CAMEL-6995 Language component - Add option to reuse compiled script or not See nabblehttp://camel.465427.n5.nabble.com/Transform-Camel-and-null-message-bodies-tp5743617.htmlWe should not reuse the script out of the box, as it can leave data from previous message to the next etc. Instead we should add option where people can turn it off if they really need it, such as scripts that are idempotent etc. Improvement Language component - Add option to reuse compiled script or not See nabblehttp://camel.465427.n5.nabble.com/Transform-Camel-and-null-message-bodies-tp5743617.htmlWe should not reuse the script out of the box, as it can leave data from previous message to the next etc. Instead we should add option where people can turn it off if they really need it, such as scripts that are idempotent etc.
CAMEL-6990 Add language to ValueBuilder so you can more easily use custom languages in Java DSL You can already do this withfilter().language("foo", "bla bla")But you cannot do it asfilter(language("foo", "bla bla"))We need to be able to do that 2nd variant as well. Improvement Add language to ValueBuilder so you can more easily use custom languages in Java DSL You can already do this withfilter().language("foo", "bla bla")But you cannot do it asfilter(language("foo", "bla bla"))We need to be able to do that 2nd variant as well.
CAMEL-6989 camel-servletlistener - Add callbacks to CamelContextLifecycle for before/after routes is added See nabblehttp://camel.465427.n5.nabble.com/CamelContextLifecycle-Has-a-Glaring-Deficiency-tp5742904.html Improvement camel-servletlistener - Add callbacks to CamelContextLifecycle for before/after routes is added See nabblehttp://camel.465427.n5.nabble.com/CamelContextLifecycle-Has-a-Glaring-Deficiency-tp5742904.html
CAMEL-6982 Karaf Camel commands - Polish table output Currently it looks a bit to cluttered with all these [ ] brackets around the values in the table.We should cleanup this, so its easier to read for humans. Improvement Karaf Camel commands - Polish table output Currently it looks a bit to cluttered with all these [ ] brackets around the values in the table.We should cleanup this, so its easier to read for humans.
CAMEL-6981 Route model should include attribute if id is custom assigned or auto generated When a route is dumped as XML you may not know if the id is explicit assigned or was auto generated. That information would be handy to know. The information is already available but just not included in the XML dump. Improvement Route model should include attribute if id is custom assigned or auto generated When a route is dumped as XML you may not know if the id is explicit assigned or was auto generated. That information would be handy to know. The information is already available but just not included in the XML dump.
CAMEL-6980 Camel Karaf commands - Should sort output and also use wider tables So we have nicely sorted output, and also wider tables so longer camel and route names can be listed. Improvement Camel Karaf commands - Should sort output and also use wider tables So we have nicely sorted output, and also wider tables so longer camel and route names can be listed.
CAMEL-6978 War examples should not include lib/servlet JARs Related to the servlet 2.5 to 3.0 upgrade on master.Now the servlet JAR is included in the generated WARs - we should not include them.INFO: validateJarFile(/opt/apache-tomcat-7.0.42/webapps/tomcat/WEB-INF/lib/geronimo-servlet_3.0_spec-1.0.jar) - jar not loaded. See Servlet Spec 2.3, section 9.7.2. Offending class: javax/servlet/Servlet.class Task War examples should not include lib/servlet JARs Related to the servlet 2.5 to 3.0 upgrade on master.Now the servlet JAR is included in the generated WARs - we should not include them.INFO: validateJarFile(/opt/apache-tomcat-7.0.42/webapps/tomcat/WEB-INF/lib/geronimo-servlet_3.0_spec-1.0.jar) - jar not loaded. See Servlet Spec 2.3, section 9.7.2. Offending class: javax/servlet/Servlet.class
CAMEL-6976 camel-itest-cdi - Fails due recent changes in camel-cdi etc I noticed this error on my master branch todayRunning org.apache.camel.itest.cdi.IntegrationTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.821 sec <<< FAILURE! - in org.apache.camel.itest.cdi.IntegrationTestorg.apache.camel.itest.cdi.IntegrationTest  Time elapsed: 2.82 sec  <<< ERROR!I suspect its due some of the recent changes in camel-cdi. Task camel-itest-cdi - Fails due recent changes in camel-cdi etc I noticed this error on my master branch todayRunning org.apache.camel.itest.cdi.IntegrationTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.821 sec <<< FAILURE! - in org.apache.camel.itest.cdi.IntegrationTestorg.apache.camel.itest.cdi.IntegrationTest  Time elapsed: 2.82 sec  <<< ERROR!I suspect its due some of the recent changes in camel-cdi.
CAMEL-6975 Upgrade to Groovy 2.2.x Groovy 2.2.0 is out. We should upgrade to use that in the camel-groovy component. Task Upgrade to Groovy 2.2.x Groovy 2.2.0 is out. We should upgrade to use that in the camel-groovy component.
CAMEL-6972 JMX MBean naming - Use symbolicName instead of bundleId as default for OSGi naming Now that we have removed the hostname from the JMX naming, lets improve another one, to use the symbolicName instead of bundleId as prefix for the mbean names in Karaf/SMX. Improvement JMX MBean naming - Use symbolicName instead of bundleId as default for OSGi naming Now that we have removed the hostname from the JMX naming, lets improve another one, to use the symbolicName instead of bundleId as prefix for the mbean names in Karaf/SMX.
CAMEL-6971 Supprts to set the Providers and SchemaLocation in CXFRsEndpoint It could more be straightforward by providing setProviders method in CXFRsEndpoint to let the user override the default setting of JAXRSServerFactory. New Feature Supprts to set the Providers and SchemaLocation in CXFRsEndpoint It could more be straightforward by providing setProviders method in CXFRsEndpoint to let the user override the default setting of JAXRSServerFactory.
CAMEL-6969 Add an option on the CSV unmarshalling in order to generate Maps with headers as keys It's annoying to know the column index when processing CSV unmarshalled data. It would be nice to be able to use a Map with the headers as keys instead of a List for each line.You'll find attached a patchPS: the JIRA component camel-csv does not exist New Feature Add an option on the CSV unmarshalling in order to generate Maps with headers as keys It's annoying to know the column index when processing CSV unmarshalled data. It would be nice to be able to use a Map with the headers as keys instead of a List for each line.You'll find attached a patchPS: the JIRA component camel-csv does not exist
CAMEL-6966 Update the Fuse related maven repo As FuseSource maven repo was moved to JBoss maven repo, we need to updated camel pom for it. Task Update the Fuse related maven repo As FuseSource maven repo was moved to JBoss maven repo, we need to updated camel pom for it.
CAMEL-6965 Add @BeanInject for injecting a bean into a pojo Like we have @EndpointInject, @PropertyInject, and whatnot. This allows end users to use these Camel annotations in their eg RouteBuilder classes to inject what they need.See nabblehttp://camel.465427.n5.nabble.com/Propose-add-annotation-BeanInject-tp5742782.html New Feature Add @BeanInject for injecting a bean into a pojo Like we have @EndpointInject, @PropertyInject, and whatnot. This allows end users to use these Camel annotations in their eg RouteBuilder classes to inject what they need.See nabblehttp://camel.465427.n5.nabble.com/Propose-add-annotation-BeanInject-tp5742782.html
CAMEL-6962 Allow binding name to be specified in JibxDataFormat The camel-jibx data format class does not allow the user to specify the JiBX binding name. This feature is necessary when dealing with input bindings that are different than output bindings for the same Java class. Improvement Allow binding name to be specified in JibxDataFormat The camel-jibx data format class does not allow the user to specify the JiBX binding name. This feature is necessary when dealing with input bindings that are different than output bindings for the same Java class.
CAMEL-6961 Make Camel core bundle configurable to generate less or smaller log messages itself Currently the Camel core generates easily lots of warning/error messages within the local log file. This makes it almost impossible to search for errors caused by other bundles, because the Camel bundle fills up about 99% of the log file content. Because the runtime will only store up to 11 log files log events are hard to find and also lost rather quickly (because older log files get deleted).Looking through Camel code we can find something like this:{code}if (endpoint.getConsumer() == null) {            LOG.warn("No consumers available on endpoint: " + endpoint + " to process: " + exchange);            throw new DirectConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange);        } else { {code}The 	entire exchange put to the log before exception was thrown. It makes a huge log entries, which can not be turn off, unless we lost all the logs from Camel bundle. It will be very useful to have camel bundle logs configurable, to get more or less details by demand.   Improvement Make Camel core bundle configurable to generate less or smaller log messages itself Currently the Camel core generates easily lots of warning/error messages within the local log file. This makes it almost impossible to search for errors caused by other bundles, because the Camel bundle fills up about 99% of the log file content. Because the runtime will only store up to 11 log files log events are hard to find and also lost rather quickly (because older log files get deleted).Looking through Camel code we can find something like this:{code}if (endpoint.getConsumer() == null) {            LOG.warn("No consumers available on endpoint: " + endpoint + " to process: " + exchange);            throw new DirectConsumerNotAvailableException("No consumers available on endpoint: " + endpoint, exchange);        } else { {code}The 	entire exchange put to the log before exception was thrown. It makes a huge log entries, which can not be turn off, unless we lost all the logs from Camel bundle. It will be very useful to have camel bundle logs configurable, to get more or less details by demand.  
CAMEL-6960 ActiveMQ uuid generator - should sanitize hostname See AMQ-2505 Improvement ActiveMQ uuid generator - should sanitize hostname See AMQ-2505
CAMEL-6959 Update to XML Security 1.5.6 Please apply the trivial attached patch to update to XML Security 1.5.6. Improvement Update to XML Security 1.5.6 Please apply the trivial attached patch to update to XML Security 1.5.6.
CAMEL-6958 Add shutdown timeout to context-info karaf command So you can see that information from the karaf camel commands.{code}Miscellaneous	Auto Startup: true	Starting Routes: false	Suspended: false	Shutdown timeout: 5 sec.	Message History: true	Tracing: false{code} Improvement Add shutdown timeout to context-info karaf command So you can see that information from the karaf camel commands.{code}Miscellaneous	Auto Startup: true	Starting Routes: false	Suspended: false	Shutdown timeout: 5 sec.	Message History: true	Tracing: false{code}
CAMEL-6957 CxfEndpoint setServiceClass should check the empty String Here is the mail thread which shows CxfEndpoint should throw more meaningful exception to help user to find out the key of issue. http://camel.465427.n5.nabble.com/Camel-to-Webservice-call-SOAP-FailedToCreateRouteException-tp5743144.html Improvement CxfEndpoint setServiceClass should check the empty String Here is the mail thread which shows CxfEndpoint should throw more meaningful exception to help user to find out the key of issue. http://camel.465427.n5.nabble.com/Camel-to-Webservice-call-SOAP-FailedToCreateRouteException-tp5743144.html
CAMEL-6955 Migrate camel-hl7 and camel-syslog from mina to netty We should migrate these to use Netty  Improvement Migrate camel-hl7 and camel-syslog from mina to netty We should migrate these to use Netty 
CAMEL-6954 camel-mina2 - UDP protocol should use worker pool as well We need to enable the worker pool for UDP as well, otherwise we have only one thread process the message out of the box. Improvement camel-mina2 - UDP protocol should use worker pool as well We need to enable the worker pool for UDP as well, otherwise we have only one thread process the message out of the box.
CAMEL-6953 Simple expression "${headers.CamelHttpUrl} contains 'foo'" never becomes true The exchange header CamelHttpUrl is of type StringBuffer and not String. This causes the simple expression "${headers.CamelHttpUrl} contains 'foo'" to always evaluate to false, because org.apache.camel.util.ObjectHelper::contains(Object,Object) does not handle StringBuffer.Either the header should be of type String or org.apache.camel.util.ObjectHelper::contains(Object,Object) should deal with StringBuffer arguments. Improvement Simple expression "${headers.CamelHttpUrl} contains 'foo'" never becomes true The exchange header CamelHttpUrl is of type StringBuffer and not String. This causes the simple expression "${headers.CamelHttpUrl} contains 'foo'" to always evaluate to false, because org.apache.camel.util.ObjectHelper::contains(Object,Object) does not handle StringBuffer.Either the header should be of type String or org.apache.camel.util.ObjectHelper::contains(Object,Object) should deal with StringBuffer arguments.
CAMEL-6952 RabbitMQProducer should support RoutingKey option We should let user set the routingKey option for the RabbitMQ producer, this option could be a default value of routingKey, and it could be override by change the message header. Improvement RabbitMQProducer should support RoutingKey option We should let user set the routingKey option for the RabbitMQ producer, this option could be a default value of routingKey, and it could be override by change the message header.
CAMEL-6949 camel-jcr - Should use rome 1.0 as 0.9 is not a valid Maven artifact Apache Jackrabbit pulls in rome 0.9 which is not a valid Maven artifact[WARNING] The POM for rome:rome:jar:0.9 is invalid, transitivedependencies (if any) will not be available, enable debug logging formore detailsWe should use 1.0 which should work better. Task camel-jcr - Should use rome 1.0 as 0.9 is not a valid Maven artifact Apache Jackrabbit pulls in rome 0.9 which is not a valid Maven artifact[WARNING] The POM for rome:rome:jar:0.9 is invalid, transitivedependencies (if any) will not be available, enable debug logging formore detailsWe should use 1.0 which should work better.
CAMEL-6947 camel-rabbit - RabbitMQ producer should start|stop more cleanly When the producer is stopped it should close cleanly. Also the thread pool should be shutdown which does not happen currently. Improvement camel-rabbit - RabbitMQ producer should start|stop more cleanly When the producer is stopped it should close cleanly. Also the thread pool should be shutdown which does not happen currently.
CAMEL-6946 camel-netty - Use ConnectionException instead of CamelException if cannot connect to remote server See nabblehttp://camel.465427.n5.nabble.com/camel-exception-netty-tp5742647p5742823.html Improvement camel-netty - Use ConnectionException instead of CamelException if cannot connect to remote server See nabblehttp://camel.465427.n5.nabble.com/camel-exception-netty-tp5742647p5742823.html
CAMEL-6944 Add exchangeId in the toString() method of the DefaultExchange In order for the users to easily trace the exchange, it would be great that the toString() method of the DefaultExchange displays the exchangeId. Improvement Add exchangeId in the toString() method of the DefaultExchange In order for the users to easily trace the exchange, it would be great that the toString() method of the DefaultExchange displays the exchangeId.
CAMEL-6938 JMX names - Should not include hostname by default We have hostname in the mbean names by default which causes much more pain than gain.We have this on roadmap for 3.0 to take out. But for users on 2.x we should have them the choice to turn that off or on. So from 2.13 onwards the hostname is not included by default. But there is an option to turn on the old "slightly silly" behavior, either from a option on the jmxAgent or using a JVM system property. Improvement JMX names - Should not include hostname by default We have hostname in the mbean names by default which causes much more pain than gain.We have this on roadmap for 3.0 to take out. But for users on 2.x we should have them the choice to turn that off or on. So from 2.13 onwards the hostname is not included by default. But there is an option to turn on the old "slightly silly" behavior, either from a option on the jmxAgent or using a JVM system property.
CAMEL-6934 Create new Address for every openConnection call We've had a case where the component to which the Mina2Producer is communicating changes IP address.  This change isn't picked up by our camel route, which uses Mina2.  Therefore the communication fails. If the address was looked up each time openConnection is called (for protocols other than VM) this would overcome this problem. This 'non-caching' of the IP address  is configurable.  Default is not to have it (ie current behavour). Configuration can be updated with a cachedAddress flag to turn this feature on. I've made changes to a fork of https://github.com/apache/camel so I'll issue a pull request.   Improvement Create new Address for every openConnection call We've had a case where the component to which the Mina2Producer is communicating changes IP address.  This change isn't picked up by our camel route, which uses Mina2.  Therefore the communication fails. If the address was looked up each time openConnection is called (for protocols other than VM) this would overcome this problem. This 'non-caching' of the IP address  is configurable.  Default is not to have it (ie current behavour). Configuration can be updated with a cachedAddress flag to turn this feature on. I've made changes to a fork of https://github.com/apache/camel so I'll issue a pull request.  
CAMEL-6933 Support Xerces global features configuration We need to support to configure the feature of Xerces from out side of camel route such as system property to disable some feature. New Feature Support Xerces global features configuration We need to support to configure the feature of Xerces from out side of camel route such as system property to disable some feature.
CAMEL-6930 Failover LB - Add last known good algorithm The failover LB is useful, but today it operates only by selecting- always from top, and then down- round robinWe need an algorith that sticks to last known good, and just use that until it fails, and then move on to the next (round robin).- last goodSee nabblehttp://camel.465427.n5.nabble.com/Migrate-Apache-Camel-Endpoints-tp5741899.html Improvement Failover LB - Add last known good algorithm The failover LB is useful, but today it operates only by selecting- always from top, and then down- round robinWe need an algorith that sticks to last known good, and just use that until it fails, and then move on to the next (round robin).- last goodSee nabblehttp://camel.465427.n5.nabble.com/Migrate-Apache-Camel-Endpoints-tp5741899.html
CAMEL-6928 onException is not considered for programatically added routes  The onException is not working for the route added to the CamelContext as RouteDefinition, programatically as described in http://camel.apache.org/loading-routes-from-xml-files.htmlThe exception is being propagated to the error handler.  The same applies for doTry on the route level and onException on the CamelContext level.*Update:* doTry does not work if there is an "onException" defined in the route.See test project attached. Improvement onException is not considered for programatically added routes  The onException is not working for the route added to the CamelContext as RouteDefinition, programatically as described in http://camel.apache.org/loading-routes-from-xml-files.htmlThe exception is being propagated to the error handler.  The same applies for doTry on the route level and onException on the CamelContext level.*Update:* doTry does not work if there is an "onException" defined in the route.See test project attached.
CAMEL-6925 Provide an option on camel-jaxrs endpoint to allow injection of JAXRSServerFactory There is an use case where we might want to inject a jaxrs provider and override provider properties in Java code just like what below Spring bean does:{code}<jaxrs:providers>            <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider">                <property name="dropRootElement" value="true" />                <property name="supportUnwrapped" value="true" />            </bean></jaxrs:providers>{code}However, it requires to build a JAXRSServerFactory to inject the CXFRSEndpoint. But it is no way to inject JAXRSServerFactory myself. So we might need to provide an option on camel-jaxrs endpoint to allow injection of a JAXRSServerFactory instance. New Feature Provide an option on camel-jaxrs endpoint to allow injection of JAXRSServerFactory There is an use case where we might want to inject a jaxrs provider and override provider properties in Java code just like what below Spring bean does:{code}<jaxrs:providers>            <bean class="org.apache.cxf.jaxrs.provider.json.JSONProvider">                <property name="dropRootElement" value="true" />                <property name="supportUnwrapped" value="true" />            </bean></jaxrs:providers>{code}However, it requires to build a JAXRSServerFactory to inject the CXFRSEndpoint. But it is no way to inject JAXRSServerFactory myself. So we might need to provide an option on camel-jaxrs endpoint to allow injection of a JAXRSServerFactory instance.
CAMEL-6923 camel-zookeeper - Documentation has missing options and some misleading as well The documentation should be updated, and some options on the config is wrong/not possible to use. We should cleanup this. Task camel-zookeeper - Documentation has missing options and some misleading as well The documentation should be updated, and some options on the config is wrong/not possible to use. We should cleanup this.
CAMEL-6916 PropertyPlaceHolder : IgnoreMissingLocation should protect from unresolvable system variable location When you add a location based on system variable in a propertyPlaceholder, the ignoreMissingLocation protect you from a missing file but not from a missing system variable (or env as well).Ex : {code:xml}<propertyPlaceholder ignoreMissingLocation="true" location="classpath:camel-property.properties, file:///${camel-property.config}" />{code}This configuration failed to load context during unit tests, because _camel-property.config_ system variable is not set. Spring handle this with the _ignore-resource-not-found_ attribute, which is according to me the equivalent of ignoreMissingLocation. Improvement PropertyPlaceHolder : IgnoreMissingLocation should protect from unresolvable system variable location When you add a location based on system variable in a propertyPlaceholder, the ignoreMissingLocation protect you from a missing file but not from a missing system variable (or env as well).Ex : {code:xml}<propertyPlaceholder ignoreMissingLocation="true" location="classpath:camel-property.properties, file:///${camel-property.config}" />{code}This configuration failed to load context during unit tests, because _camel-property.config_ system variable is not set. Spring handle this with the _ignore-resource-not-found_ attribute, which is according to me the equivalent of ignoreMissingLocation.
CAMEL-6909 RabbitMQ Support for Exchange Type camel-rabbitmq had hardcoded exchange type set as "direct".There are other exchange types such as "topic".This patch makes it configurable. Improvement RabbitMQ Support for Exchange Type camel-rabbitmq had hardcoded exchange type set as "direct".There are other exchange types such as "topic".This patch makes it configurable.
CAMEL-6908 camel-ftp - Using ftpClient.xxx options should support reference lookup in registry Then you can do like:   ftpClient.socketFactory=#soketFactorySee  nabblehttp://camel.465427.n5.nabble.com/FTP-over-Proxy-tp3314841p5741973.html Improvement camel-ftp - Using ftpClient.xxx options should support reference lookup in registry Then you can do like:   ftpClient.socketFactory=#soketFactorySee  nabblehttp://camel.465427.n5.nabble.com/FTP-over-Proxy-tp3314841p5741973.html
CAMEL-6907 DefaultEndpoint - Add setProperties method like we have in DefaultComponent This allows component developers to use the same setProperties they use in the component, in their endpoints.There is no API breakings as we add a protected method to a impl class. Improvement DefaultEndpoint - Add setProperties method like we have in DefaultComponent This allows component developers to use the same setProperties they use in the component, in their endpoints.There is no API breakings as we add a protected method to a impl class.
CAMEL-6906 PGPDataFormat: Enable Streaming during Unmarshaling  I enabled streaming during the unmarshaling of PGPDataFormat.If  StreamCacheing is enabled a StreamCache is returned instead of a byte array. Improvement PGPDataFormat: Enable Streaming during Unmarshaling  I enabled streaming during the unmarshaling of PGPDataFormat.If  StreamCacheing is enabled a StreamCache is returned instead of a byte array.
CAMEL-6904 Reduce logging noise when starting a Camel app in OSGi When you start a Camel context in OSGi we see 10 log lines about some @Converter class found. This log information has no value for end users, so lets reduce it to DEBUG level{code}2013-10-25 15:30:20,414 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,417 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,425 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 2 @Converter classes to load2013-10-25 15:30:20,428 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,429 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 0 @Converter classes to load2013-10-25 15:30:20,435 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,437 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 2 @Converter classes to load2013-10-25 15:30:20,440 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,441 | INFO  | hat-130-thread-1 | Activator{code} Improvement Reduce logging noise when starting a Camel app in OSGi When you start a Camel context in OSGi we see 10 log lines about some @Converter class found. This log information has no value for end users, so lets reduce it to DEBUG level{code}2013-10-25 15:30:20,414 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,417 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,425 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 2 @Converter classes to load2013-10-25 15:30:20,428 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,429 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 0 @Converter classes to load2013-10-25 15:30:20,435 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,437 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 2 @Converter classes to load2013-10-25 15:30:20,440 | INFO  | hat-130-thread-1 | Activator                        | ?                                   ? | 135 - org.apache.camel.camel-core - 2.12.0 | Found 1 @Converter classes to load2013-10-25 15:30:20,441 | INFO  | hat-130-thread-1 | Activator{code}
CAMEL-6901 Intercept send to endpoint - Make it easier to do AOP before|after|around Seehttp://camel.465427.n5.nabble.com/testing-intercept-route-and-process-after-its-completion-tp5714460.htmlWe should consider some DSL improvements to this interceptor so you can more easy do what you want with- before- call | skip- afterIn a easier to use DSL syntax. Just need to avoid it becoming to verbose.Something a like:{code}interceptSendToEndpoint("jms:*)   .before().to("bean:audit")   .sendToEndpoint();   .after().to("bean:done").to("bean:moreStuff").end(){code}And in XML{code:xml}<interceptSendToEndpoint uri="jms:*">   <before>   </before>   <sendToEndpoint/>   <after>     ...   </after></interceptSendToEndpoint>{code} Improvement Intercept send to endpoint - Make it easier to do AOP before|after|around Seehttp://camel.465427.n5.nabble.com/testing-intercept-route-and-process-after-its-completion-tp5714460.htmlWe should consider some DSL improvements to this interceptor so you can more easy do what you want with- before- call | skip- afterIn a easier to use DSL syntax. Just need to avoid it becoming to verbose.Something a like:{code}interceptSendToEndpoint("jms:*)   .before().to("bean:audit")   .sendToEndpoint();   .after().to("bean:done").to("bean:moreStuff").end(){code}And in XML{code:xml}<interceptSendToEndpoint uri="jms:*">   <before>   </before>   <sendToEndpoint/>   <after>     ...   </after></interceptSendToEndpoint>{code}
CAMEL-6900 camel-test - Make it easy to hook into the registry lookup and return different bean Seehttp://camel.465427.n5.nabble.com/CamelSpringTestSupport-registry-bean-modification-tp5732127.htmlWe should have a way in camel-test to allow end users to lookup / provide beans.For example with annotations or in a method you can override and influence the lookup process. Or some other way. Improvement camel-test - Make it easy to hook into the registry lookup and return different bean Seehttp://camel.465427.n5.nabble.com/CamelSpringTestSupport-registry-bean-modification-tp5732127.htmlWe should have a way in camel-test to allow end users to lookup / provide beans.For example with annotations or in a method you can override and influence the lookup process. Or some other way.
CAMEL-6899 Stream component has various problems.  Camel stream component has several issues (when using it to transfer big, finite, files):- If using groupLines, this component can transfer only a number of lines that's a multiple of this parameter (ie. if groupLines=7 and a file consists of 20 lines you'll send two Exchanges containing rows 1-7 and 8-14, losing rows 15-20)- there's no way to know when a stream finished, that renders the onCompletion() hook quite useless- Stream producer can produce only from String or byte[], but stream consumer produces either String or List<String>, this makes impossible to use grouping to transfer files between two stream endpointsFastest workaround I found out is to add the chance to specify additional URL parameters in Endpoint configuration (i.e.  stream:url?binary=true... ) thus allowing the Consumer to read chunks of files into byte[] and packing them into an Exchange.My feeling is that the entire component could be enlisted to go under a deeper review and major refactoring.I'm attaching a Patch for your evaluation that should temporarily fix this mis-behaviors, at leas in my working scenario (but I think they're pretty generic). Improvement Stream component has various problems.  Camel stream component has several issues (when using it to transfer big, finite, files):- If using groupLines, this component can transfer only a number of lines that's a multiple of this parameter (ie. if groupLines=7 and a file consists of 20 lines you'll send two Exchanges containing rows 1-7 and 8-14, losing rows 15-20)- there's no way to know when a stream finished, that renders the onCompletion() hook quite useless- Stream producer can produce only from String or byte[], but stream consumer produces either String or List<String>, this makes impossible to use grouping to transfer files between two stream endpointsFastest workaround I found out is to add the chance to specify additional URL parameters in Endpoint configuration (i.e.  stream:url?binary=true... ) thus allowing the Consumer to read chunks of files into byte[] and packing them into an Exchange.My feeling is that the entire component could be enlisted to go under a deeper review and major refactoring.I'm attaching a Patch for your evaluation that should temporarily fix this mis-behaviors, at leas in my working scenario (but I think they're pretty generic).
CAMEL-6896 Add descriptions in ComponentConfiguration I've been writing a URI Builder for NetBeans using the Property Sheet api.  Everything works great with the ComponentConfiguration API that was added in 2.12, but it would be really nice to be able to grab parameter documentation through this api as well.For instance, with the property sheet, I can set a Short Description of what each endpoint does, and the user would be able to go from there.   New Feature Add descriptions in ComponentConfiguration I've been writing a URI Builder for NetBeans using the Property Sheet api.  Everything works great with the ComponentConfiguration API that was added in 2.12, but it would be really nice to be able to grab parameter documentation through this api as well.For instance, with the property sheet, I can set a Short Description of what each endpoint does, and the user would be able to go from there.  
CAMEL-6894 camel-netty-http - Should use orderedThreadPoolExecutor Just as regular camel-netty uses this option by default, we should do the same for camel-netty-http.This allows netty worker threads to not process the message in the Camel routes but offload that to the OrderedMemoryAwareThreadPoolExecutor thread pool, which also ensures events from the same channel is executed in order. Improvement camel-netty-http - Should use orderedThreadPoolExecutor Just as regular camel-netty uses this option by default, we should do the same for camel-netty-http.This allows netty worker threads to not process the message in the Camel routes but offload that to the OrderedMemoryAwareThreadPoolExecutor thread pool, which also ensures events from the same channel is executed in order.
CAMEL-6890  org.apache.camel.component.aws.sqs - SqsFilterMessagesWithNoDeleteTest  This test fails 3-4 out of 10 times.{code}camel #155 		1 sec	Regressioncamel #154 		5 sec	Passedcamel #153 		5 sec	Passedcamel #152 		5 sec	Passedcamel #149 		5 sec	Fixedcamel #148 		1 sec	Failedcamel #147 		1 sec	Regressioncamel #146 		5 sec	Passed{code} Test  org.apache.camel.component.aws.sqs - SqsFilterMessagesWithNoDeleteTest  This test fails 3-4 out of 10 times.{code}camel #155 		1 sec	Regressioncamel #154 		5 sec	Passedcamel #153 		5 sec	Passedcamel #152 		5 sec	Passedcamel #149 		5 sec	Fixedcamel #148 		1 sec	Failedcamel #147 		1 sec	Regressioncamel #146 		5 sec	Passed{code}
CAMEL-6883 CAMEL-SOAP uses wrong namespace As described here:http://camel.465427.n5.nabble.com/CAMEL-SOAP-uses-wrong-namespace-td5740225.html#noneCamel-SOAP sometimes chooses the wrong namespace when assembling SOAP messages.Suggested fix: Use attached ElementNameStrategy for XJC generated classes when multiple schemas are used. Improvement CAMEL-SOAP uses wrong namespace As described here:http://camel.465427.n5.nabble.com/CAMEL-SOAP-uses-wrong-namespace-td5740225.html#noneCamel-SOAP sometimes chooses the wrong namespace when assembling SOAP messages.Suggested fix: Use attached ElementNameStrategy for XJC generated classes when multiple schemas are used.
CAMEL-6879 camel-restlet - restlet consumer should send back HTTP headers The restlet consumer does not send back custom headers, such as Location, Foo, Bar or what end user may have added as headers.For example Location would be needed if you set the status code to 302 for a redirect etc.See nabblehttp://camel.465427.n5.nabble.com/Camel-Restlet-and-HTTP-302-tp5741853.html Improvement camel-restlet - restlet consumer should send back HTTP headers The restlet consumer does not send back custom headers, such as Location, Foo, Bar or what end user may have added as headers.For example Location would be needed if you set the status code to 302 for a redirect etc.See nabblehttp://camel.465427.n5.nabble.com/Camel-Restlet-and-HTTP-302-tp5741853.html
CAMEL-6875 PGP Data Format: Allow keyring with several secrete keys, keys with several UserIds, select keys in unmarschalling by keyId I made several improvements.* marschal** signature private key is looked up by user ID --> secrete keyring can now contain several secret keys** improvment in lookup of encryption public key: take into account that a key can have several user IDs* unmarshal** take into account that symmetric key can be encrypte by several public receiver keys --> search for the relevant encryption package for which a public key in the keyring exists (part of the code did already exist but not consistently)** take into account that you do not know in advance which of the private keys  in the keyring you must use to verify the signature --> determine the private key from the key Id given in the signature package*** a consequence of this is that you do not know which passphrase you must provide for the private key. Therefore a passphrase accessor was introduced.I also updated the test resources pubring.gpg and secring.gpg;I attached them also in case they cannot be imported via the patch.I can do the update of the wiki page.  Improvement PGP Data Format: Allow keyring with several secrete keys, keys with several UserIds, select keys in unmarschalling by keyId I made several improvements.* marschal** signature private key is looked up by user ID --> secrete keyring can now contain several secret keys** improvment in lookup of encryption public key: take into account that a key can have several user IDs* unmarshal** take into account that symmetric key can be encrypte by several public receiver keys --> search for the relevant encryption package for which a public key in the keyring exists (part of the code did already exist but not consistently)** take into account that you do not know in advance which of the private keys  in the keyring you must use to verify the signature --> determine the private key from the key Id given in the signature package*** a consequence of this is that you do not know which passphrase you must provide for the private key. Therefore a passphrase accessor was introduced.I also updated the test resources pubring.gpg and secring.gpg;I attached them also in case they cannot be imported via the patch.I can do the update of the wiki page. 
CAMEL-6869 camel-rabbitmq - Support reconnection when broker goes down Currently, the if you stop the RabbitMQ broker, no reconnects happen.  New Feature camel-rabbitmq - Support reconnection when broker goes down Currently, the if you stop the RabbitMQ broker, no reconnects happen. 
CAMEL-6868 camel-rabbitmq- Support clustered brokers using multiple addresses when calling ConnectionFactory Currently, only one MQ host is supported, since factory.newConnection(executor) is called from RabbitMQEndpoint. Multiple brokers could be easily supported by using:public Connection newConnection(ExecutorService executor, Address[] addrs) New Feature camel-rabbitmq- Support clustered brokers using multiple addresses when calling ConnectionFactory Currently, only one MQ host is supported, since factory.newConnection(executor) is called from RabbitMQEndpoint. Multiple brokers could be easily supported by using:public Connection newConnection(ExecutorService executor, Address[] addrs)
CAMEL-6862 DefaultTimeoutMap - Should use start/stop to schedule the task, and cancel the task DefaultTimeoutMap schedules the task in constructor, we should do that in start instead. And in stop we should cancel the task.Otherwise it can lead to situations where stopping the timeout cannot happen cleanly{code}2013-10-14 13:53:25,287 | INFO  | sample.response] | DefaultExecutorServiceManager    | ?                                   ? | 134 - org.apache.camel.camel-core - 2.12.0.redhat-610054 | Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@b370e4f[JmsReplyManagerTimeoutChecker[queue.sample.response]] to terminate...2013-10-14 13:53:27,289 | INFO  | sample.response] | DefaultExecutorServiceManager    | ?                                   ? | 134 - org.apache.camel.camel-core - 2.12.0.redhat-610054 | Waited 4.003 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@b370e4f[JmsReplyManagerTimeoutChecker[queue.sample.response]] to terminate...{code} Improvement DefaultTimeoutMap - Should use start/stop to schedule the task, and cancel the task DefaultTimeoutMap schedules the task in constructor, we should do that in start instead. And in stop we should cancel the task.Otherwise it can lead to situations where stopping the timeout cannot happen cleanly{code}2013-10-14 13:53:25,287 | INFO  | sample.response] | DefaultExecutorServiceManager    | ?                                   ? | 134 - org.apache.camel.camel-core - 2.12.0.redhat-610054 | Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@b370e4f[JmsReplyManagerTimeoutChecker[queue.sample.response]] to terminate...2013-10-14 13:53:27,289 | INFO  | sample.response] | DefaultExecutorServiceManager    | ?                                   ? | 134 - org.apache.camel.camel-core - 2.12.0.redhat-610054 | Waited 4.003 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@b370e4f[JmsReplyManagerTimeoutChecker[queue.sample.response]] to terminate...{code}
CAMEL-6860 PGP Data Format: parameterize encryption and hash algorithm The PGP Data Formater currently restricts the encryption algorithm to CAST5 and the signature hash algorithm to SHA1 in the marshaller.The attached imrpvement introduces parameters for the encryption algorithm and the signature hash algorithm so that you can use encryption algorithms like AES, DES, TripleDES, and signature hash algorithms like SHA256, SHA512. I can update the docu-wiki after the improvment has been accepted. Improvement PGP Data Format: parameterize encryption and hash algorithm The PGP Data Formater currently restricts the encryption algorithm to CAST5 and the signature hash algorithm to SHA1 in the marshaller.The attached imrpvement introduces parameters for the encryption algorithm and the signature hash algorithm so that you can use encryption algorithms like AES, DES, TripleDES, and signature hash algorithms like SHA256, SHA512. I can update the docu-wiki after the improvment has been accepted.
CAMEL-6859 camel-test - Should allow max port at IPv4 limit If people are using ports 61615 they should be able to use that with avail port finder. Improvement camel-test - Should allow max port at IPv4 limit If people are using ports 61615 they should be able to use that with avail port finder.
CAMEL-6858 Delayer EIP - Add JMX attribute to know if any messages are delayed continuation of work done here:https://issues.apache.org/jira/browse/CAMEL-6670 Improvement Delayer EIP - Add JMX attribute to know if any messages are delayed continuation of work done here:https://issues.apache.org/jira/browse/CAMEL-6670
CAMEL-6852 camel-apns - Upgrade to 0.2.x The current shipped version of java-apns does not support sending apple push notifications via a http proxy. We should upgrade to 0.2.x which does that. Task camel-apns - Upgrade to 0.2.x The current shipped version of java-apns does not support sending apple push notifications via a http proxy. We should upgrade to 0.2.x which does that.
CAMEL-6848 Enable vararg support for beaninvocation with Simple  Having a simple bean method that accepts multiple String parameters declared as varargs, I'm having issues sending values from .bean(MyBean.class, "${ foo('a','b') }") or .bean(MyBean.class, "${ foo(new String[] {'a', 'b'}) }") to my bean directly. The error states that it can't convert from String to String[] - but even with declaring a String[] (like the second bean invocation) it is not able to execute the bean.The bean class simply looks like this:public MyBean{    public void foo(String ... param)    {        // do some stuff ...    }}I'd need to specify multiple parameters and to avoid creating multiple classes or methods which are simply copy&paste classes with small adaptions (inheritance is in place) I'd love to have a more generic approach in place. If resource intensive calculations are done in the back running the method multiple times with changed parameters may not be the best solution imho. Improvement Enable vararg support for beaninvocation with Simple  Having a simple bean method that accepts multiple String parameters declared as varargs, I'm having issues sending values from .bean(MyBean.class, "${ foo('a','b') }") or .bean(MyBean.class, "${ foo(new String[] {'a', 'b'}) }") to my bean directly. The error states that it can't convert from String to String[] - but even with declaring a String[] (like the second bean invocation) it is not able to execute the bean.The bean class simply looks like this:public MyBean{    public void foo(String ... param)    {        // do some stuff ...    }}I'd need to specify multiple parameters and to avoid creating multiple classes or methods which are simply copy&paste classes with small adaptions (inheritance is in place) I'd love to have a more generic approach in place. If resource intensive calculations are done in the back running the method multiple times with changed parameters may not be the best solution imho.
CAMEL-6846 rabbitmq autoDelete option description is wrong In the documentation for camel-rabbitmq it says for option autoDelete: "If it is true, the message will be deleted when it is consumed".I don't think this is correct. I believe this sets the autoDelete property on the (rabbitmq) exchange which according to the Channel javadoc: "if the server should delete the exchange when it is no longer in use" Improvement rabbitmq autoDelete option description is wrong In the documentation for camel-rabbitmq it says for option autoDelete: "If it is true, the message will be deleted when it is consumed".I don't think this is correct. I believe this sets the autoDelete property on the (rabbitmq) exchange which according to the Channel javadoc: "if the server should delete the exchange when it is no longer in use"
CAMEL-6842 XmlRpcDataFormat should support to access XmlRpcStreamRequestConfig and TypeFactory It could be handy for the user who wants to change the configuration or type factory of the XmlRpcDataFormat. Improvement XmlRpcDataFormat should support to access XmlRpcStreamRequestConfig and TypeFactory It could be handy for the user who wants to change the configuration or type factory of the XmlRpcDataFormat.
CAMEL-6841 xpath() method in the RouteBuilder should support to specify the return type We should support this DSL in the RouteBuilder{code}.setHeader("FOO", xpath("/foo/bar/@value", String.class)){code} Improvement xpath() method in the RouteBuilder should support to specify the return type We should support this DSL in the RouteBuilder{code}.setHeader("FOO", xpath("/foo/bar/@value", String.class)){code}
CAMEL-6838 JMX Notification Trace Event Handler has no implementation for traceExchangeIn and traceExchangeOut This leads to absolutely no JMX Notifications being recorded when the Tracer's traceOutExchanges option is enabled. Improvement JMX Notification Trace Event Handler has no implementation for traceExchangeIn and traceExchangeOut This leads to absolutely no JMX Notifications being recorded when the Tracer's traceOutExchanges option is enabled.
CAMEL-6837 PGP Data Format:allow other JCE providers than BC PGP Data Format is currently using the Bouncy Castle JCE provider. The attached patch opens the PGP Data Format for other JCE providers. I made tests with the IAIK JCE Provider and it was working fine. Unfortunately, the SunJCE provider cannot be used because it does not contain the message digest algorithms (the message digest algorithm are contained in the other provider with name 'SUN') and the PGP bouncy caslte API only allows specifying one provider. Improvement PGP Data Format:allow other JCE providers than BC PGP Data Format is currently using the Bouncy Castle JCE provider. The attached patch opens the PGP Data Format for other JCE providers. I made tests with the IAIK JCE Provider and it was working fine. Unfortunately, the SunJCE provider cannot be used because it does not contain the message digest algorithms (the message digest algorithm are contained in the other provider with name 'SUN') and the PGP bouncy caslte API only allows specifying one provider.
CAMEL-6836 Dead link to kotlin dsl page The link to kotlin on the DSL page is dead. Should probably be: https://github.com/koolio/kool/tree/master/kool-camel Task Dead link to kotlin dsl page The link to kotlin on the DSL page is dead. Should probably be: https://github.com/koolio/kool/tree/master/kool-camel
CAMEL-6835 CamelBlueprintTestSupport should provide option of not generating test bundle If the user already has the test bundle, CamelBlueprintTestSupport should support not to create a test bundle which has the same blueprint configuration files. Improvement CamelBlueprintTestSupport should provide option of not generating test bundle If the user already has the test bundle, CamelBlueprintTestSupport should support not to create a test bundle which has the same blueprint configuration files.
CAMEL-6834 support to send the Representation object back It could be handy if the user want to send Representation object back through the camel-restlet consumer.Here is [a mail thread|http://camel.465427.n5.nabble.com/return-binary-image-data-in-camel-restlet-environment-tp5741062.html] about it. Improvement support to send the Representation object back It could be handy if the user want to send Representation object back through the camel-restlet consumer.Here is [a mail thread|http://camel.465427.n5.nabble.com/return-binary-image-data-in-camel-restlet-environment-tp5741062.html] about it.
CAMEL-6827 camel-solr support for solrj CloudSolrServer (solrcloud) Would be great to be able to send camel messages to a solrcloud which uses zookeeper. To do this we need to be able to create a cloud solr server, which then finds out which server is the lead, then sends the solr queries, etc.http://wiki.apache.org/solr/Solrjimport org.apache.solr.client.solrj.impl.CloudSolrServer;import org.apache.solr.common.SolrInputDocument;CloudSolrServer server = new CloudSolrServer("localhost:9983");server.setDefaultCollection("collection1");SolrInputDocument doc = new SolrInputDocument();doc.addField( "id", "1234");doc.addField( "name", "A lovely summer holiday");server.add(doc);server.commit(); New Feature camel-solr support for solrj CloudSolrServer (solrcloud) Would be great to be able to send camel messages to a solrcloud which uses zookeeper. To do this we need to be able to create a cloud solr server, which then finds out which server is the lead, then sends the solr queries, etc.http://wiki.apache.org/solr/Solrjimport org.apache.solr.client.solrj.impl.CloudSolrServer;import org.apache.solr.common.SolrInputDocument;CloudSolrServer server = new CloudSolrServer("localhost:9983");server.setDefaultCollection("collection1");SolrInputDocument doc = new SolrInputDocument();doc.addField( "id", "1234");doc.addField( "name", "A lovely summer holiday");server.add(doc);server.commit();
CAMEL-6819 Use exceptionHandler on Xmpp Consumer Hi!What do you think about adding a call to the exceptionHandler in the doStart() method of XmppConsumer class ?It would looks like : try {            connection = endpoint.createConnection();        } catch (XMPPException e) {            if (endpoint.isTestConnectionOnStartup()) {                throw new RuntimeException("Could not connect to XMPP server.", e);            }  else {            	final String xmppExceptionLogMessage = XmppEndpoint.getXmppExceptionLogMessage(e);                LOG.warn(xmppExceptionLogMessage);                getExceptionHandler().handleException(xmppExceptionLogMessage,e);                scheduleDelayedStart();                return;            }        }This allowed an exceptionHandler to be notified of failure connection.The testConnectionOnStartup doesn't call exceptionHandler because the exception is thrown while starting the consumer. Improvement Use exceptionHandler on Xmpp Consumer Hi!What do you think about adding a call to the exceptionHandler in the doStart() method of XmppConsumer class ?It would looks like : try {            connection = endpoint.createConnection();        } catch (XMPPException e) {            if (endpoint.isTestConnectionOnStartup()) {                throw new RuntimeException("Could not connect to XMPP server.", e);            }  else {            	final String xmppExceptionLogMessage = XmppEndpoint.getXmppExceptionLogMessage(e);                LOG.warn(xmppExceptionLogMessage);                getExceptionHandler().handleException(xmppExceptionLogMessage,e);                scheduleDelayedStart();                return;            }        }This allowed an exceptionHandler to be notified of failure connection.The testConnectionOnStartup doesn't call exceptionHandler because the exception is thrown while starting the consumer.
CAMEL-6809 rabbitmq.EXCHANGE_NAME header used in preference to uri exchange name RabbitMQProducer.process method uses the existing rabbitmq.EXCHANGE_NAME header in preference to the exchange name that is part of the endpoint uri. This means that when consuming off one exchange and producing onto another, the rabbitmq.EXCHANGE_NAME needs to be explicitally removed, otherwise the messages will not be sent to the exchange name defined in the destinition uri.The exchange name is a required part of the endpoint uri. http://camel.apache.org/rabbitmq.html, so would it be better to ignore the header completely in the RabbitMQProducer? At least then the messages would go where you were expecting them to. Happy to submit a pull request on Github if that helps. Improvement rabbitmq.EXCHANGE_NAME header used in preference to uri exchange name RabbitMQProducer.process method uses the existing rabbitmq.EXCHANGE_NAME header in preference to the exchange name that is part of the endpoint uri. This means that when consuming off one exchange and producing onto another, the rabbitmq.EXCHANGE_NAME needs to be explicitally removed, otherwise the messages will not be sent to the exchange name defined in the destinition uri.The exchange name is a required part of the endpoint uri. http://camel.apache.org/rabbitmq.html, so would it be better to ignore the header completely in the RabbitMQProducer? At least then the messages would go where you were expecting them to. Happy to submit a pull request on Github if that helps.
CAMEL-6803 Upgrade camel-cdi to delta spike 0.5 Apache Deltaspike 0.5 has been released.The examples/camel-example-cdi has problem with this upgrade. Task Upgrade camel-cdi to delta spike 0.5 Apache Deltaspike 0.5 has been released.The examples/camel-example-cdi has problem with this upgrade.
CAMEL-6801 Documentation documents wrong option name for string-template The documentation specifies the option: delimiterEndThe source code uses: delimiterStop Task Documentation documents wrong option name for string-template The documentation specifies the option: delimiterEndThe source code uses: delimiterStop
CAMEL-6795 default spool directory in DefaultStreamCachingStrategy should be in a camel sub dir The default spool directory in DefaultStreamCachingStrategy should be in a camel sub directory.This can avoid issues if the user does not have permission to write in the tmp directory, but only in sub dirs. Improvement default spool directory in DefaultStreamCachingStrategy should be in a camel sub dir The default spool directory in DefaultStreamCachingStrategy should be in a camel sub directory.This can avoid issues if the user does not have permission to write in the tmp directory, but only in sub dirs.
CAMEL-6792 Camel Test Support needs a new Method There is a problem with the CamelTestSupport class in that if you call getMockEndpoint on an endpoint that doesnt exist, it blithely returns you an endpoint connected to nothing. The problem is you end up chasing endless test failures when the fact is your endpoint is not even there. So I suggest a method I added to my subclass of CamelTestSupport which is: protected MockEndpoint assertAndGetMockEndpoint(final String uri) {    assertNotNull(context.hasEndpoint(uri));    return getMockEndpoint(uri);}This method will make sure that the endpoint is there before returning it and it will make tests easier to write.  Wish Camel Test Support needs a new Method There is a problem with the CamelTestSupport class in that if you call getMockEndpoint on an endpoint that doesnt exist, it blithely returns you an endpoint connected to nothing. The problem is you end up chasing endless test failures when the fact is your endpoint is not even there. So I suggest a method I added to my subclass of CamelTestSupport which is: protected MockEndpoint assertAndGetMockEndpoint(final String uri) {    assertNotNull(context.hasEndpoint(uri));    return getMockEndpoint(uri);}This method will make sure that the endpoint is there before returning it and it will make tests easier to write. 
CAMEL-6786 Preemptive authentication for http4 component Preemptive auth is available already for camel-http component.The changes in my pull request brings this feature also for camel-http4.I have tested it already in production, where we are using http4 component for integrating with Jenkins JSON/RPC API where is the preemptive auth needed.The preemptive auth on http4 component could be enabled with {{preemptiveAuth=true}} option.There is no unit tests attached yet, I'm working on it right now.https://github.com/apache/camel/pull/46 Improvement Preemptive authentication for http4 component Preemptive auth is available already for camel-http component.The changes in my pull request brings this feature also for camel-http4.I have tested it already in production, where we are using http4 component for integrating with Jenkins JSON/RPC API where is the preemptive auth needed.The preemptive auth on http4 component could be enabled with {{preemptiveAuth=true}} option.There is no unit tests attached yet, I'm working on it right now.https://github.com/apache/camel/pull/46
CAMEL-6780 Binding component - Avoid duplicate prepare See nabblehttp://camel.465427.n5.nabble.com/Must-Processor-check-if-Exchange-has-out-message-already-tp5739977.html Improvement Binding component - Avoid duplicate prepare See nabblehttp://camel.465427.n5.nabble.com/Must-Processor-check-if-Exchange-has-out-message-already-tp5739977.html
CAMEL-6777 We are building two different source distributions which should not be the case Because of the 'apache-release' profile in our root [pom.xml|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob;f=pom.xml;h=9e99be5684cfe5a3e48693ed62a1a5ba03d4bfc2;hb=HEAD], we are building two different source distributions:- http://search.maven.org/#artifactdetails|org.apache.camel|camel|2.12.0|pom- http://search.maven.org/#artifactdetails|org.apache.camel|apache-camel|2.12.0|pomI propose to remove this profile. Improvement We are building two different source distributions which should not be the case Because of the 'apache-release' profile in our root [pom.xml|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob;f=pom.xml;h=9e99be5684cfe5a3e48693ed62a1a5ba03d4bfc2;hb=HEAD], we are building two different source distributions:- http://search.maven.org/#artifactdetails|org.apache.camel|camel|2.12.0|pom- http://search.maven.org/#artifactdetails|org.apache.camel|apache-camel|2.12.0|pomI propose to remove this profile.
CAMEL-6776 Added setProperty DSL into camel-scala current camel-scala doesn't provide DSL support of setProperty. Improvement Added setProperty DSL into camel-scala current camel-scala doesn't provide DSL support of setProperty.
CAMEL-6775 Aggregate - Potential little optimization to send aggregated exchange to completion outside the lock The aggregate eip needs to aggregate logic to operation in a lock. But if there is a completed aggregated exchange we can send that exchange to the downstream thread pool outside the lock.See nabblehttp://camel.465427.n5.nabble.com/Aggregator-lock-tp5739692.html Improvement Aggregate - Potential little optimization to send aggregated exchange to completion outside the lock The aggregate eip needs to aggregate logic to operation in a lock. But if there is a completed aggregated exchange we can send that exchange to the downstream thread pool outside the lock.See nabblehttp://camel.465427.n5.nabble.com/Aggregator-lock-tp5739692.html
CAMEL-6772 servletlistener component - Add messageHistory option We should add messageHistory option tohttps://cwiki.apache.org/confluence/display/CAMEL/ServletListener+Component Improvement servletlistener component - Add messageHistory option We should add messageHistory option tohttps://cwiki.apache.org/confluence/display/CAMEL/ServletListener+Component
CAMEL-6769 JndiRegistry - Implement the methods that return empty set See nabblehttp://camel.465427.n5.nabble.com/Proper-way-to-initialize-Transaction-management-for-Camel-in-an-Application-Server-tp5739760.htmlWe should implement the methods that return empty set. So it would work in the situation from the link Improvement JndiRegistry - Implement the methods that return empty set See nabblehttp://camel.465427.n5.nabble.com/Proper-way-to-initialize-Transaction-management-for-Camel-in-an-Application-Server-tp5739760.htmlWe should implement the methods that return empty set. So it would work in the situation from the link
CAMEL-6766 InterceptFrom - Add support for using property placeholders InterceptFrom does not support property placeholders. We should add support for that.Seehttp://camel.465427.n5.nabble.com/Usage-of-property-placeholders-in-the-interceptFrom-String-method-calls-tp5739273.html Improvement InterceptFrom - Add support for using property placeholders InterceptFrom does not support property placeholders. We should add support for that.Seehttp://camel.465427.n5.nabble.com/Usage-of-property-placeholders-in-the-interceptFrom-String-method-calls-tp5739273.html
CAMEL-6765 RouteAware API to allow injecting the Route into Consumer or other services which may need it Needed for CAMEL-6403 to allow the consumer to setup the UoW with all details. The route id was the last missing detail, and we need that from the Route. Improvement RouteAware API to allow injecting the Route into Consumer or other services which may need it Needed for CAMEL-6403 to allow the consumer to setup the UoW with all details. The route id was the last missing detail, and we need that from the Route.
CAMEL-6764 camel-jms - Add workaround for AMQ to get JMSXUserID Getting the JMSXUserID does not work with ActiveMQ. As the option can only be retrieved using getStringProperty as we already do for JMSXGroupID.We should add similar workaround for JMSXUserID Improvement camel-jms - Add workaround for AMQ to get JMSXUserID Getting the JMSXUserID does not work with ActiveMQ. As the option can only be retrieved using getStringProperty as we already do for JMSXGroupID.We should add similar workaround for JMSXUserID
CAMEL-6763 Add configurePollingConsumer method to DefaultEndpoint Related to CAMEL-6729We should introduce a configurePollingConsumer method they should use instead of configureConsumer. Then we can filter out unsupported options for polling consumer vs regular consumer. Improvement Add configurePollingConsumer method to DefaultEndpoint Related to CAMEL-6729We should introduce a configurePollingConsumer method they should use instead of configureConsumer. Then we can filter out unsupported options for polling consumer vs regular consumer.
CAMEL-6760 camel-test-blueprint - Possibility to configure Camel Context creation timeout Currently, during startup CamelBlueprintTestSupport waits 30 sec for Camel Context to be ready. Sometimes (quite often for us) this time is not enough even when everything goes well. The value of 30 seconds cannot be easily changed now. The patch that Ive prepared introduces possibility to customize this value, in two ways:* Globally, by setting {{org.apache.camel.test.blueprint.camelContextCreationTimeout}} system property.* Locally for each test, by overriding _getCamelContextCreationTimeout_ method.In both cases timeout is set in milliseconds. Improvement camel-test-blueprint - Possibility to configure Camel Context creation timeout Currently, during startup CamelBlueprintTestSupport waits 30 sec for Camel Context to be ready. Sometimes (quite often for us) this time is not enough even when everything goes well. The value of 30 seconds cannot be easily changed now. The patch that Ive prepared introduces possibility to customize this value, in two ways:* Globally, by setting {{org.apache.camel.test.blueprint.camelContextCreationTimeout}} system property.* Locally for each test, by overriding _getCamelContextCreationTimeout_ method.In both cases timeout is set in milliseconds.
CAMEL-6759 camel-hazelcast component just allows Hazelcast maps and multimaps with key type String Check the user forum post here:http://camel.465427.n5.nabble.com/camel-hazelcast-CamelEntryListener-limits-usage-of-Hazelcast-maps-td5739340.htmlThe component camel-hazelcast works just with Hazelcast maps and multimaps which have the key type String.Cause: The class {{org.apache.camel.component.hazelcast.listener.CamelEntryListener}} within the module camel-hazelcast implements {{com.hazelcast.core.EntryListener<String,Object>}}. This Listener can just be registered to {{com.hazelcast.core.IMap<K,V>}} with key type {{String}}.Fix: change {{CamelEntryListener}} to extend {{EntryListener<Object,Object>}} Improvement camel-hazelcast component just allows Hazelcast maps and multimaps with key type String Check the user forum post here:http://camel.465427.n5.nabble.com/camel-hazelcast-CamelEntryListener-limits-usage-of-Hazelcast-maps-td5739340.htmlThe component camel-hazelcast works just with Hazelcast maps and multimaps which have the key type String.Cause: The class {{org.apache.camel.component.hazelcast.listener.CamelEntryListener}} within the module camel-hazelcast implements {{com.hazelcast.core.EntryListener<String,Object>}}. This Listener can just be registered to {{com.hazelcast.core.IMap<K,V>}} with key type {{String}}.Fix: change {{CamelEntryListener}} to extend {{EntryListener<Object,Object>}}
CAMEL-6755 camel-example-spring-javaconfig - Remove OSGi pieces This example has some OSGi pieces in it, but it confuses more than it helps.We should make the example plain non-OSGi. Task camel-example-spring-javaconfig - Remove OSGi pieces This example has some OSGi pieces in it, but it confuses more than it helps.We should make the example plain non-OSGi.
CAMEL-6754 UnitUtilsTest cant manage a locale different from US When locale is set to a language different from english (for example italian), the unit test in org.apache.camel.util.UnitUtilsTest fail, because in the italian locale the decimal separator is the comma, not the dot.The test compare the results of printUnitFromBytes to static strings formatted with the dot, and in an italian locale fails because it espects "1.0" and get instead "1,0".I have patched the test code to make it works in every locale (building the expected results with the current locale decimal separator), and i have attached the patch to this issue. Improvement UnitUtilsTest cant manage a locale different from US When locale is set to a language different from english (for example italian), the unit test in org.apache.camel.util.UnitUtilsTest fail, because in the italian locale the decimal separator is the comma, not the dot.The test compare the results of printUnitFromBytes to static strings formatted with the dot, and in an italian locale fails because it espects "1.0" and get instead "1,0".I have patched the test code to make it works in every locale (building the expected results with the current locale decimal separator), and i have attached the patch to this issue.
CAMEL-6751 Upgrade to Jetty 8.1.x Apache CXF 2.7.7 is using Jetty 8.1.12.v20130726Apache Karaf 3.0.0-TRUNK is using Jetty 8.1.9.x Task Upgrade to Jetty 8.1.x Apache CXF 2.7.7 is using Jetty 8.1.12.v20130726Apache Karaf 3.0.0-TRUNK is using Jetty 8.1.9.x
CAMEL-6749 mustache component - Should use app class loader to load templates It uses the TCCL to load the templates. We should use the App CL which then would allow to better load templates from OSGi. Improvement mustache component - Should use app class loader to load templates It uses the TCCL to load the templates. We should use the App CL which then would allow to better load templates from OSGi.
CAMEL-6748 CVE-2013-4330: Skipping Header Evaluation The current file producer code will evaluate CamelFileName headers as simple expressions if they start with "$simple".  There are other ways to achieve this same thing and this functionality is unnecessary. Improvement CVE-2013-4330: Skipping Header Evaluation The current file producer code will evaluate CamelFileName headers as simple expressions if they start with "$simple".  There are other ways to achieve this same thing and this functionality is unnecessary.
CAMEL-6746 vm component - Should keep track of active consumers on static level See nabblehttp://camel.465427.n5.nabble.com/MultipleConsumer-on-a-vm-endpoint-tp5738664.htmlWe need to keep track of the consumer per static level instead, so using concurrent consumers will work accross deployment units. Improvement vm component - Should keep track of active consumers on static level See nabblehttp://camel.465427.n5.nabble.com/MultipleConsumer-on-a-vm-endpoint-tp5738664.htmlWe need to keep track of the consumer per static level instead, so using concurrent consumers will work accross deployment units.
CAMEL-6745 sftp consumer - Option ignoreFileNotFound should be used for ignoring file permission errors as well See nabblehttp://camel.465427.n5.nabble.com/Ignoring-permissions-errors-on-File-FTP-SFTP-consumers-tp5739270.html Improvement sftp consumer - Option ignoreFileNotFound should be used for ignoring file permission errors as well See nabblehttp://camel.465427.n5.nabble.com/Ignoring-permissions-errors-on-File-FTP-SFTP-consumers-tp5739270.html
CAMEL-6744 Aggregator - Using groupExchanges should store them on body by default Its a bit un-intuitive that its stored as a property on the outgoing exchange, so you have to{code}        List<Exchange> grouped = out.getProperty(Exchange.GROUPED_EXCHANGE, List.class);{code}Instead it should be stored as List<Exchange> on the body. Improvement Aggregator - Using groupExchanges should store them on body by default Its a bit un-intuitive that its stored as a property on the outgoing exchange, so you have to{code}        List<Exchange> grouped = out.getProperty(Exchange.GROUPED_EXCHANGE, List.class);{code}Instead it should be stored as List<Exchange> on the body.
CAMEL-6742 PGP Data Format: enable configuration of public and secure key ring via byte array parameter Currently the PGP Data Format allows configuring the public and secret keyring via a file name, which means that the public and secret keyring must be located in the classpath or in the file system. In some environments, it is regarded as unsecure to store key material in the filesystem; storage of key material in the data base is preferred. In order to support such kind of use cases, we should directly hand over the key ring as byte array to the PGP Data Format instance.Please have a look at the attached patch.     Improvement PGP Data Format: enable configuration of public and secure key ring via byte array parameter Currently the PGP Data Format allows configuring the public and secret keyring via a file name, which means that the public and secret keyring must be located in the classpath or in the file system. In some environments, it is regarded as unsecure to store key material in the filesystem; storage of key material in the data base is preferred. In order to support such kind of use cases, we should directly hand over the key ring as byte array to the PGP Data Format instance.Please have a look at the attached patch.    
CAMEL-6739 Maven archetype for creating new Camel with CXF project We have a number of archetypes athttp://camel.apache.org/camel-maven-archetypes.htmlWould be nice with archetypes for camel-cxf WebService projects. New Feature Maven archetype for creating new Camel with CXF project We have a number of archetypes athttp://camel.apache.org/camel-maven-archetypes.htmlWould be nice with archetypes for camel-cxf WebService projects.
CAMEL-6738 Documentation error for option acknowledgementMode In the description of the option "acknowledgementMode", the value TRANSACTED should be changed to SESSION_TRANSACTED. Improvement Documentation error for option acknowledgementMode In the description of the option "acknowledgementMode", the value TRANSACTED should be changed to SESSION_TRANSACTED.
CAMEL-6737 camel-archetype-web - Add goal to deploy to JBoss AS Add the plugin so people easier can deploy to running JBoss AS by using mvn jboss-as:deploy Improvement camel-archetype-web - Add goal to deploy to JBoss AS Add the plugin so people easier can deploy to running JBoss AS by using mvn jboss-as:deploy
CAMEL-6734 Introduce CamelFileNameConsumed Header On the producing side, we have CamelFileNameProduced.  It would be nice if we had access to the original consumed file name in a similar fashion.   Improvement Introduce CamelFileNameConsumed Header On the producing side, we have CamelFileNameProduced.  It would be nice if we had access to the original consumed file name in a similar fashion.  
CAMEL-6733 Add documentation for new activemq-camel broker component in AMQ 5.9 We have activemq-camel documentation athttp://camel.apache.org/componentsAt the bottom at the external component list.We should add a page about the new broker component in activemq-camel in AMQ 5.9 onwards.What we have so far is Robs blog posthttp://rajdavies.blogspot.se/2013/09/apache-camel-broker-component-for.html?spref=tw Task Add documentation for new activemq-camel broker component in AMQ 5.9 We have activemq-camel documentation athttp://camel.apache.org/componentsAt the bottom at the external component list.We should add a page about the new broker component in activemq-camel in AMQ 5.9 onwards.What we have so far is Robs blog posthttp://rajdavies.blogspot.se/2013/09/apache-camel-broker-component-for.html?spref=tw
CAMEL-6729 camel-jt400 - no longer able to configure a pollStrategy on Jt400DataQueueEndpoint With camel 2.11.0 we were able to configure a pollStrategy in the URL of an endpoint consuming information from a data queue.After upgrading to 2.12.0 we get an exception during camel startup stating 'Unknown consumer parameters=[{pollStrategy=#jt400PollStrategy}]'. The application no longer starts.Downgrading to 2.11.0 allows the application to be started normally.The problem seems to originate from the fact that Camel (in DefaultPollingEndpoint.createConsumer()) creates a new DefaultScheduledPollConsumer, which gets the poll strategy (no problem). Then afterwards in Jt400DataQueueEndpoint.createPollingConsumer() a Jt400DataQueueConsumer is created and inside configureConsumer() normal flow is stopped because there is no pollStrategy property in a Jt400DataQueueConsumer, and there is an entry for this property in the endpoint's consumerProperties map.I suspect that the consumerProperty pollStrategy should be removed from the endpoint's consumerProperties after it has been set on the DefaultScheduledPollConsumer... Improvement camel-jt400 - no longer able to configure a pollStrategy on Jt400DataQueueEndpoint With camel 2.11.0 we were able to configure a pollStrategy in the URL of an endpoint consuming information from a data queue.After upgrading to 2.12.0 we get an exception during camel startup stating 'Unknown consumer parameters=[{pollStrategy=#jt400PollStrategy}]'. The application no longer starts.Downgrading to 2.11.0 allows the application to be started normally.The problem seems to originate from the fact that Camel (in DefaultPollingEndpoint.createConsumer()) creates a new DefaultScheduledPollConsumer, which gets the poll strategy (no problem). Then afterwards in Jt400DataQueueEndpoint.createPollingConsumer() a Jt400DataQueueConsumer is created and inside configureConsumer() normal flow is stopped because there is no pollStrategy property in a Jt400DataQueueConsumer, and there is an entry for this property in the endpoint's consumerProperties map.I suspect that the consumerProperty pollStrategy should be removed from the endpoint's consumerProperties after it has been set on the DefaultScheduledPollConsumer...
CAMEL-6728 Configuring data format should have easier access to CamelContext See CAMEL-6677We could improve this so CamelContext is provided as a parameter to the configure methods, so we can use it for setting properties, such as doing reference lookups and whatnot. Improvement Configuring data format should have easier access to CamelContext See CAMEL-6677We could improve this so CamelContext is provided as a parameter to the configure methods, so we can use it for setting properties, such as doing reference lookups and whatnot.
CAMEL-6725 Add cache option to beanRef and <bean> in the DSL Added cache option to beanRef and <bean> in the DSL. This avoids looking up the Bean from the Registry on each usage; this can safely be done for singleton beans. Improvement Add cache option to beanRef and <bean> in the DSL Added cache option to beanRef and <bean> in the DSL. This avoids looking up the Bean from the Registry on each usage; this can safely be done for singleton beans.
CAMEL-6724 RegistryBean - Should avoid synchronized to getBean faster CAMEL-5468 fixed a thread safety issue.Though we should avoid the synchronized on subsequent getBean calls as that is not needed, only the first time to resolve the bean. This will allow faster routing in Camel with the bean component, when using beans from the registry. Improvement RegistryBean - Should avoid synchronized to getBean faster CAMEL-5468 fixed a thread safety issue.Though we should avoid the synchronized on subsequent getBean calls as that is not needed, only the first time to resolve the bean. This will allow faster routing in Camel with the bean component, when using beans from the registry.
CAMEL-6722 binding component - Should start/stop its child services We should ensure all the child services the binding component create is also started/stopped so they can do initialization logic. Improvement binding component - Should start/stop its child services We should ensure all the child services the binding component create is also started/stopped so they can do initialization logic.
CAMEL-6718 Enable Streaming in MarschalProcessor Use CachedOutputStream in MarschalProcessor to enable streaming instead of ByteArrayOutputStream. This will help to process large data without producing out-of-memory problems.It is possible to return to the old behavior from Camel 2.12 onwards with help of a StreamCachingStrategy. You have only to switch off the file caching.  Improvement Enable Streaming in MarschalProcessor Use CachedOutputStream in MarschalProcessor to enable streaming instead of ByteArrayOutputStream. This will help to process large data without producing out-of-memory problems.It is possible to return to the old behavior from Camel 2.12 onwards with help of a StreamCachingStrategy. You have only to switch off the file caching. 
CAMEL-6715 camel-test-blueprint - Only one Camel context gets started on test startup In a test made with camel-test-blueprint, and where there is more than one Camel context per Bundle, only one of them gets started. Actually this problem was introduced with the fix for CAMEL-6524. Before the fix every Camel Context would be started after it was created. Now only a context which is "associated" with the test is getting started.For camel-test-spring there is a similar problem. Though it looks to me that in spring multiple contexts didnt work even before CAMEL-6524.I've attached a patch that introduces a simple junit test for this problem (for both blueprint and spring). Improvement camel-test-blueprint - Only one Camel context gets started on test startup In a test made with camel-test-blueprint, and where there is more than one Camel context per Bundle, only one of them gets started. Actually this problem was introduced with the fix for CAMEL-6524. Before the fix every Camel Context would be started after it was created. Now only a context which is "associated" with the test is getting started.For camel-test-spring there is a similar problem. Though it looks to me that in spring multiple contexts didnt work even before CAMEL-6524.I've attached a patch that introduces a simple junit test for this problem (for both blueprint and spring).
CAMEL-6711 Add ECDSA test to new XML Signature component This task is to add a test for the ECDSA algorithm to the XML Signature tests introduced in Camel 2.12.0. Test Add ECDSA test to new XML Signature component This task is to add a test for the ECDSA algorithm to the XML Signature tests introduced in Camel 2.12.0.
CAMEL-6708 camel-rabbitmq component RabbitMQConsumer.RabbitConsumer#handleDelivery does not handle AMQP.BasicProperties RabbitMQConsumer.RabbitConsumer#handleDelivery currently does not handle AMQP.BasicProperties as sent from the RabbitMQ client library and passed onto the consumer.  This poses a problem for downstream functionality.e.g.post a message to a queueAconfigure camel as from(queueA).to(queueB).end();pull a message from queueBdeserializeIf the message was pushed with header information such as Type it will be stripped off as the RabbitMQConsumer.RabbitConsume#handleDelivery is invoked cause the RabbitMQProducer to transmit to queueB without the header information. Improvement camel-rabbitmq component RabbitMQConsumer.RabbitConsumer#handleDelivery does not handle AMQP.BasicProperties RabbitMQConsumer.RabbitConsumer#handleDelivery currently does not handle AMQP.BasicProperties as sent from the RabbitMQ client library and passed onto the consumer.  This poses a problem for downstream functionality.e.g.post a message to a queueAconfigure camel as from(queueA).to(queueB).end();pull a message from queueBdeserializeIf the message was pushed with header information such as Type it will be stripped off as the RabbitMQConsumer.RabbitConsume#handleDelivery is invoked cause the RabbitMQProducer to transmit to queueB without the header information.
CAMEL-6707 Asynchronous Mode In camel-servlet, Servlet 3.0 AsyncContext My Goal is routing larger amounts of HTTP-Traffic CamelServlet is blocking the HTTP-thread while message is being processed.I'm currently preparing a patch which uses AsyncContext and starts processor in async mode. Hope that will improve throughput.The async feature is switchable by parameter. I will attach a patch as soon as it works. There is one point: To avoid conflicts geronimo-servlet_2.5_spec must be replaced by geronimo-servlet_3.0_spec in parent pom. Improvement Asynchronous Mode In camel-servlet, Servlet 3.0 AsyncContext My Goal is routing larger amounts of HTTP-Traffic CamelServlet is blocking the HTTP-thread while message is being processed.I'm currently preparing a patch which uses AsyncContext and starts processor in async mode. Hope that will improve throughput.The async feature is switchable by parameter. I will attach a patch as soon as it works. There is one point: To avoid conflicts geronimo-servlet_2.5_spec must be replaced by geronimo-servlet_3.0_spec in parent pom.
CAMEL-6706 camel-blueprint - When having 2+ blueprint property placeholders then favor non default property value for overrides If you use 2+ blueprint property placeholders then you can set default values in one of the placeholder, and then optionally override these values in the other.camel-blueprint property parser should be able to understand that, and favor the non-default value as the answer. Today it picks the first != null value. Improvement camel-blueprint - When having 2+ blueprint property placeholders then favor non default property value for overrides If you use 2+ blueprint property placeholders then you can set default values in one of the placeholder, and then optionally override these values in the other.camel-blueprint property parser should be able to understand that, and favor the non-default value as the answer. Today it picks the first != null value.
CAMEL-6705 DefaultStreamCachingStrategy - Check for enabled in shouldSpoolCache method If stream caching is disabled then we should not spool to disk. This allows components and whatnot to safely use CachedOutputStream and not cause spool to disk, even if stream caching is disabled. Improvement DefaultStreamCachingStrategy - Check for enabled in shouldSpoolCache method If stream caching is disabled then we should not spool to disk. This allows components and whatnot to safely use CachedOutputStream and not cause spool to disk, even if stream caching is disabled.
CAMEL-6704 saxon 9.4.0.4 no longer in central - use 9.4.0.7 Seehttp://camel.465427.n5.nabble.com/How-to-get-camel-saxon-working-in-camel-2-11-x-My-Solution-tp5738578.htmlFor some strange reasons 9.4.0.4 is no longer in central. We can use 9.4.07 which is both in central and as OSGi bundle. Task saxon 9.4.0.4 no longer in central - use 9.4.0.7 Seehttp://camel.465427.n5.nabble.com/How-to-get-camel-saxon-working-in-camel-2-11-x-My-Solution-tp5738578.htmlFor some strange reasons 9.4.0.4 is no longer in central. We can use 9.4.07 which is both in central and as OSGi bundle.
CAMEL-6701 org.apache.camel.util.IOHelper.loadText(InputStream) doesnt not return text as written This method does not return the text as written. If there is a text file WITHOUT a last \n this differs.The implementation in Camel reads line by line using a BufferedReader, so it cant know if there is a \n at the last line.The implementation of commons-io uses a StringWriter where it copies all bytes into.https://svn.apache.org/repos/asf/commons/proper/io/trunk/src/main/java/org/apache/commons/io/IOUtils.java  Improvement org.apache.camel.util.IOHelper.loadText(InputStream) doesnt not return text as written This method does not return the text as written. If there is a text file WITHOUT a last \n this differs.The implementation in Camel reads line by line using a BufferedReader, so it cant know if there is a \n at the last line.The implementation of commons-io uses a StringWriter where it copies all bytes into.https://svn.apache.org/repos/asf/commons/proper/io/trunk/src/main/java/org/apache/commons/io/IOUtils.java 
CAMEL-6698 Component camel-cache to support non-serializable objects EhCache supports non-serializable objects for local heap storage, though the camel-cache does not allow such objects to be put to cache.Should have mechanism/flow to handle such objects  Improvement Component camel-cache to support non-serializable objects EhCache supports non-serializable objects for local heap storage, though the camel-cache does not allow such objects to be put to cache.Should have mechanism/flow to handle such objects 
CAMEL-6697 camel-test-blueprint - Allow to register custom services in OSGi registry before Camel starts If you have some services your Camel apps uses during testing, then its not easy to enlist them before CamelContext starts.We should allow people to enlist services from the unit test class, so they can enlist mock services / shared services that are mocked or what, so they can do their unit tests. Improvement camel-test-blueprint - Allow to register custom services in OSGi registry before Camel starts If you have some services your Camel apps uses during testing, then its not easy to enlist them before CamelContext starts.We should allow people to enlist services from the unit test class, so they can enlist mock services / shared services that are mocked or what, so they can do their unit tests.
CAMEL-6692 camel-jms - Topics should also be managed in JMX Based on CAMEL-6093 we can now also enlist topics as endpoints in JMX so they can be shown and managed. Improvement camel-jms - Topics should also be managed in JMX Based on CAMEL-6093 we can now also enlist topics as endpoints in JMX so they can be shown and managed.
CAMEL-6689 ResourceHelper do not work with encoded file pathes ResourceHelper in both resolveMandatoryResourceAsInputStream and resolveMandatoryResourceAsUrl do not decode file path. This produces problem with file URIs like file:aaa%20bbb.txt Improvement ResourceHelper do not work with encoded file pathes ResourceHelper in both resolveMandatoryResourceAsInputStream and resolveMandatoryResourceAsUrl do not decode file path. This produces problem with file URIs like file:aaa%20bbb.txt
CAMEL-6688 ShutdownStrategy - Add option to suppress logging after context has been stopped in case of aggressive shutdown See CAMEL-6685	And alsohttp://camel.465427.n5.nabble.com/Discussion-around-the-bug-CAMEL-6685-tp5738305.htmlIf shutting down camel context and a timeout is hit, and there is still inflight message, then we could add a new option so end users can turn off any logging after camel context state = stopped. Then any inflight messages that may gets rejected or whatnot will not be logged.This requires that we pass on camel context to various exceptionhandler and error handler, camel logger etc so they can check the state of camel context before logging.  Improvement ShutdownStrategy - Add option to suppress logging after context has been stopped in case of aggressive shutdown See CAMEL-6685	And alsohttp://camel.465427.n5.nabble.com/Discussion-around-the-bug-CAMEL-6685-tp5738305.htmlIf shutting down camel context and a timeout is hit, and there is still inflight message, then we could add a new option so end users can turn off any logging after camel context state = stopped. Then any inflight messages that may gets rejected or whatnot will not be logged.This requires that we pass on camel context to various exceptionhandler and error handler, camel logger etc so they can check the state of camel context before logging. 
CAMEL-6682 mvel language - Compiling script in OSGi may have issue with TCCL class loader See http://jira.codehaus.org/browse/MVEL-250We should set/restore the TCCL when MVel compiles so chances are it works in OSGi. Improvement mvel language - Compiling script in OSGi may have issue with TCCL class loader See http://jira.codehaus.org/browse/MVEL-250We should set/restore the TCCL when MVel compiles so chances are it works in OSGi.
CAMEL-6681 Configurable LockType for JpaConsumer Allow the user to specify the LockModeType for the JpaConsumer. This is handy when using a DB as a poor man's queue with multiple competing instances. If those instances call a non IDEM POTENT service, the service can be called multiple times. This can be prevented by using pessimistic locking.  New Feature Configurable LockType for JpaConsumer Allow the user to specify the LockModeType for the JpaConsumer. This is handy when using a DB as a poor man's queue with multiple competing instances. If those instances call a non IDEM POTENT service, the service can be called multiple times. This can be prevented by using pessimistic locking. 
CAMEL-6680 Simple language - Have singleton language for better performance We can optimize the simple language using in eg bean ognl expressions and the likes. Improvement Simple language - Have singleton language for better performance We can optimize the simple language using in eg bean ognl expressions and the likes.
CAMEL-6678 Throttler does not honor time slots after period expires Camel's Throttler eip uses time slots to calc what tasks need to be delayed and which don't. The time slots don't take into account period elapse. See from this mailing list question:http://camel.465427.n5.nabble.com/Camel-Throttler-not-throttling-as-expected-td5738158.htmlI can recreate, and working on a patch. Improvement Throttler does not honor time slots after period expires Camel's Throttler eip uses time slots to calc what tasks need to be delayed and which don't. The time slots don't take into account period elapse. See from this mailing list question:http://camel.465427.n5.nabble.com/Camel-Throttler-not-throttling-as-expected-td5738158.htmlI can recreate, and working on a patch.
CAMEL-6677 Allow customization of the JAXB underlying XMLStreamWriter Right now the jaxb component allows you to filter out non-xml characters. But there might be use cases where you'd want to do something other than just filter (maybe escape? http://blog.lesc.se/2009/03/escape-illegal-characters-with-jaxb-xml.html or replace with something else?) the non-xml characters. JAXB has a mechanism to allow pre-processing of the output of its marshaling and we should expose a way to customize that. Improvement Allow customization of the JAXB underlying XMLStreamWriter Right now the jaxb component allows you to filter out non-xml characters. But there might be use cases where you'd want to do something other than just filter (maybe escape? http://blog.lesc.se/2009/03/escape-illegal-characters-with-jaxb-xml.html or replace with something else?) the non-xml characters. JAXB has a mechanism to allow pre-processing of the output of its marshaling and we should expose a way to customize that.
CAMEL-6676 Add support for Facebook Add a component that uses Facebook4J API to expose all its functionality through easy to configure Camel URIs.  New Feature Add support for Facebook Add a component that uses Facebook4J API to expose all its functionality through easy to configure Camel URIs. 
CAMEL-6674 Add allowNull option to @Converter to allow type converters to return null as valid response for special use-cases See nabblehttp://camel.465427.n5.nabble.com/Xpath-parameter-binding-NodeList-vs-Node-tp5738067.htmlThis avoids the situation with the NodeList -> Node converter that may return null the 1st time, and then its regarded as a misses for conversion in future attempts.Just be annotation the method from@Converterto:@Converter(allowNull = true)Should allow to fix this. As then the type converter registry knows that a null response is valid. Improvement Add allowNull option to @Converter to allow type converters to return null as valid response for special use-cases See nabblehttp://camel.465427.n5.nabble.com/Xpath-parameter-binding-NodeList-vs-Node-tp5738067.htmlThis avoids the situation with the NodeList -> Node converter that may return null the 1st time, and then its regarded as a misses for conversion in future attempts.Just be annotation the method from@Converterto:@Converter(allowNull = true)Should allow to fix this. As then the type converter registry knows that a null response is valid.
CAMEL-6673 spi-annotations should be shaded into camel-core As they are runtime required we should shade that directly into camel-core so its included out of the box for everybody. Task spi-annotations should be shaded into camel-core As they are runtime required we should shade that directly into camel-core so its included out of the box for everybody.
CAMEL-6671 FTP consumer - Add option to not use LIST command If you want to download a single file, and you know the absolute name of the file, then you should be able to download the file, without using any LIST commands. As some use-cases have permissions disabled for this, so you can only download that file only.The ftp/sftp consumers should have an option to ?useList=false, so they do not use the list command. Improvement FTP consumer - Add option to not use LIST command If you want to download a single file, and you know the absolute name of the file, then you should be able to download the file, without using any LIST commands. As some use-cases have permissions disabled for this, so you can only download that file only.The ftp/sftp consumers should have an option to ?useList=false, so they do not use the list command.
CAMEL-6666 camel-fop - Allow to use classpath for userConfigUrl parameter See SOhttp://stackoverflow.com/questions/18383129/camel-fop-and-userconfigurl-directoryYou cannot load the configuration from classpath. Improvement camel-fop - Allow to use classpath for userConfigUrl parameter See SOhttp://stackoverflow.com/questions/18383129/camel-fop-and-userconfigurl-directoryYou cannot load the configuration from classpath.
CAMEL-6664 Java DSL - Predicates built using ValueBuilder - Map to simple language so we can dump route as text and preserve the predicate See CAMEL-6593Lets see if we can turn these ValueBuilder header isNotNull isGreatThan etc into a simple language predicate/expression. That would allow us to preserve it when dumping the route as xml model. This also allows people to reverse engineer java route and adjust them, as well for tooling to understand the predicates/expressions used in the route.   Improvement Java DSL - Predicates built using ValueBuilder - Map to simple language so we can dump route as text and preserve the predicate See CAMEL-6593Lets see if we can turn these ValueBuilder header isNotNull isGreatThan etc into a simple language predicate/expression. That would allow us to preserve it when dumping the route as xml model. This also allows people to reverse engineer java route and adjust them, as well for tooling to understand the predicates/expressions used in the route.  
CAMEL-6661 xslt: TransformerException: include href is empty  The use of the xlst function, document(''), gives an exception like:  "javax.xml.transform.TransformerException: include href is empty"when transforming, using the component camel-xslt.It seems that camels XsltUriResolver only is capable to handle files either from the classpath or the file system. With the xlst function, document(''), the xslt processor should be able to handle that the result "is the source XML of the XSLT document itself".Below is an example.A XML document:<?xml version="1.0" encoding="ISO-8859-1"?> <root>1</root>A XSL document:<?xml version="1.0" encoding="UTF-8"?> <xsl:stylesheet  xmlns:date="http://exslt.org/dates-and-times" version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">        <date:months>                <date:month length="31" abbr="Jan">January</date:month>                <date:month length="28" abbr="Feb">February</date:month>        </date:months>        <xsl:template match="root">                        <xsl:variable name="month-node" select="document('')/*/date:months/date:month[number(2)]"/>                        <xsl:element name="MyDate">                                <xsl:value-of select="$month-node"/>                        </xsl:element>        </xsl:template></xsl:stylesheet>  After transformation the following should be produced:<?xml version="1.0" encoding="UTF-8"?><MyDate>February</MyDate> Improvement xslt: TransformerException: include href is empty  The use of the xlst function, document(''), gives an exception like:  "javax.xml.transform.TransformerException: include href is empty"when transforming, using the component camel-xslt.It seems that camels XsltUriResolver only is capable to handle files either from the classpath or the file system. With the xlst function, document(''), the xslt processor should be able to handle that the result "is the source XML of the XSLT document itself".Below is an example.A XML document:<?xml version="1.0" encoding="ISO-8859-1"?> <root>1</root>A XSL document:<?xml version="1.0" encoding="UTF-8"?> <xsl:stylesheet  xmlns:date="http://exslt.org/dates-and-times" version="1.1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">        <date:months>                <date:month length="31" abbr="Jan">January</date:month>                <date:month length="28" abbr="Feb">February</date:month>        </date:months>        <xsl:template match="root">                        <xsl:variable name="month-node" select="document('')/*/date:months/date:month[number(2)]"/>                        <xsl:element name="MyDate">                                <xsl:value-of select="$month-node"/>                        </xsl:element>        </xsl:template></xsl:stylesheet>  After transformation the following should be produced:<?xml version="1.0" encoding="UTF-8"?><MyDate>February</MyDate>
CAMEL-6660 JMX - Using custom @ManagedResource and extending default components can cause some attributes to be unavailable Related to CAMEL-6586Its when you use a custom @ManagedResource such as in a custom component, then some of the out of the box attributes such as camelId, state, etc may be shown as Unavailable in JMX consoles.Its the MBean assembler and JMX in general that needs to find some way of being able to mixin the custom attributes/operations with the out of the box ones. So you dont have to copy the out of the box attributes to your custom classes. Improvement JMX - Using custom @ManagedResource and extending default components can cause some attributes to be unavailable Related to CAMEL-6586Its when you use a custom @ManagedResource such as in a custom component, then some of the out of the box attributes such as camelId, state, etc may be shown as Unavailable in JMX consoles.Its the MBean assembler and JMX in general that needs to find some way of being able to mixin the custom attributes/operations with the out of the box ones. So you dont have to copy the out of the box attributes to your custom classes.
CAMEL-6659 Validate that onException,onCompletion etc must be configured at top-level in the rotues Some EIPs must be configured at top-level like onException, transacted, interceptors, on completion, etc.Though in the XML DSL and Java DSL there is "holes" so you may configure them in nested EIPs eg inside a splitter etc.We should validate that this is not allowed.In Camel 3.0 the DSL API can be changed to ensure the configuration can only happen at top-level. But in 2.x we would need to keep the DSL API stable and instead validate if mis-configured. Improvement Validate that onException,onCompletion etc must be configured at top-level in the rotues Some EIPs must be configured at top-level like onException, transacted, interceptors, on completion, etc.Though in the XML DSL and Java DSL there is "holes" so you may configure them in nested EIPs eg inside a splitter etc.We should validate that this is not allowed.In Camel 3.0 the DSL API can be changed to ensure the configuration can only happen at top-level. But in 2.x we would need to keep the DSL API stable and instead validate if mis-configured.
CAMEL-6657 Improve testing of camel-crypto component Please apply the attached patch which improves testing for the camel-crypto component. Existing testing only tests relatively weak algorithms. New tests for the encryption dataformat include: * HMAC SHA256 * 3DES (ECB + CBC) * AES 128 (ECB)New tests for the signature component include: * RSA SHA-1 * RSA SHA-256 * ECDSA SHA-1The only source change is to explicitly change the default algorithm from "DSA" to "SHA1WithDSA". Use of the former is discouraged as it's unclear whether a hashing algorithm is included or not. Test Improve testing of camel-crypto component Please apply the attached patch which improves testing for the camel-crypto component. Existing testing only tests relatively weak algorithms. New tests for the encryption dataformat include: * HMAC SHA256 * 3DES (ECB + CBC) * AES 128 (ECB)New tests for the signature component include: * RSA SHA-1 * RSA SHA-256 * ECDSA SHA-1The only source change is to explicitly change the default algorithm from "DSA" to "SHA1WithDSA". Use of the former is discouraged as it's unclear whether a hashing algorithm is included or not.
CAMEL-6653 Support to set preferredAuthentications on SFTP It could useful for the user to be able to set JSCH preferedAuthentifications. Improvement Support to set preferredAuthentications on SFTP It could useful for the user to be able to set JSCH preferedAuthentifications.
CAMEL-6651 Calling processAnnotations when using the XStreamDataFormat's aliases are set As the annotation auto-detection feature technically does not possible to detect all class aliases at deserialization, it is useful to XStreamDataFormate to call the processAnnotations when the aliases are set. Improvement Calling processAnnotations when using the XStreamDataFormat's aliases are set As the annotation auto-detection feature technically does not possible to detect all class aliases at deserialization, it is useful to XStreamDataFormate to call the processAnnotations when the aliases are set.
CAMEL-6650 AggregationStrategy - Allow to use a pojo with no Camel API dependencies See also CAMEL-3671When using the AggregationStrategy with the various EIPs, then its tied to the Camel API. We should allow people to use plain pojos, and have Camel call a method on the pojo. This would require a convention of the parameters of the method; so Camel knows what to pass as values. New Feature AggregationStrategy - Allow to use a pojo with no Camel API dependencies See also CAMEL-3671When using the AggregationStrategy with the various EIPs, then its tied to the Camel API. We should allow people to use plain pojos, and have Camel call a method on the pojo. This would require a convention of the parameters of the method; so Camel knows what to pass as values.
CAMEL-6646 Support static method calls on OGNL expressions In OgnlInvokeProcessor, we currently don't support static method calls as we always require a bean instance.See this block of code in 2.10.3, starting on OgnlInvokeProcessor:247:{code}// loop and invoke each methodObject beanToCall = beanHolder.getBean();// there must be a bean to call with, we currently does not support OGNL expressions on using purely static methodsif (beanToCall == null) {    throw new IllegalArgumentException("Bean instance is null. OGNL bean expressions requires bean instances.");}{code}Add support for these cases, especially handy if you use the method() expression frequently. Improvement Support static method calls on OGNL expressions In OgnlInvokeProcessor, we currently don't support static method calls as we always require a bean instance.See this block of code in 2.10.3, starting on OgnlInvokeProcessor:247:{code}// loop and invoke each methodObject beanToCall = beanHolder.getBean();// there must be a bean to call with, we currently does not support OGNL expressions on using purely static methodsif (beanToCall == null) {    throw new IllegalArgumentException("Bean instance is null. OGNL bean expressions requires bean instances.");}{code}Add support for these cases, especially handy if you use the method() expression frequently.
CAMEL-6644 camel-netty - Add support for suspend/resume on netty TCP consumer See nabblehttp://camel.465427.n5.nabble.com/camel-routes-suspend-resume-tp5737382.htmlAlso camel-netty-http should be configurable if we want to send back http error 503 or unbind the acceptor if suspended. Improvement camel-netty - Add support for suspend/resume on netty TCP consumer See nabblehttp://camel.465427.n5.nabble.com/camel-routes-suspend-resume-tp5737382.htmlAlso camel-netty-http should be configurable if we want to send back http error 503 or unbind the acceptor if suspended.
CAMEL-6642 Allow to configure a custom ExpressionResultComparator for resequencer eip in xml See nabblehttp://camel.465427.n5.nabble.com/Where-can-I-find-an-example-of-specifying-a-custom-resequence-comparator-in-Spring-tp5737262.html Improvement Allow to configure a custom ExpressionResultComparator for resequencer eip in xml See nabblehttp://camel.465427.n5.nabble.com/Where-can-I-find-an-example-of-specifying-a-custom-resequence-comparator-in-Spring-tp5737262.html
CAMEL-6640 Migrate XML Security key cipher algorithm away from RSA v1.5 Currently, the XML Security component uses RSA v1.5 as the default Key Transport algorithm. As there are a number of attacks on this algorithm, it is better to use the RSA OAEP algorithm instead. Improvement Migrate XML Security key cipher algorithm away from RSA v1.5 Currently, the XML Security component uses RSA v1.5 as the default Key Transport algorithm. As there are a number of attacks on this algorithm, it is better to use the RSA OAEP algorithm instead.
CAMEL-6639 SimpleLanguage.simple should detect if its a predicate and use that instead When using predicates with the simple language static methods, then ppl should use the correct method. We should improve the javadoc, and as well add methods for easy to create predicates.See nabblehttp://camel.465427.n5.nabble.com/How-to-check-that-a-file-is-empty-tp5737256.html Improvement SimpleLanguage.simple should detect if its a predicate and use that instead When using predicates with the simple language static methods, then ppl should use the correct method. We should improve the javadoc, and as well add methods for easy to create predicates.See nabblehttp://camel.465427.n5.nabble.com/How-to-check-that-a-file-is-empty-tp5737256.html
CAMEL-6637 BeanIO Data Format logs at WARN level for conditions ignored in configuration The BeanIODataFormat has the properties:- ignoreUnidentifiedRecords- ignoreUnexpectedRecords- ignoreInvalidRecordsIn the error handler, these issues are always logged at WARN level regardless of the above settings.I would say that if the developer is happy to ignore these issues by explicitly configuring them to ignored, when these issues are encountered they should be logged at DEBUG level. Improvement BeanIO Data Format logs at WARN level for conditions ignored in configuration The BeanIODataFormat has the properties:- ignoreUnidentifiedRecords- ignoreUnexpectedRecords- ignoreInvalidRecordsIn the error handler, these issues are always logged at WARN level regardless of the above settings.I would say that if the developer is happy to ignore these issues by explicitly configuring them to ignored, when these issues are encountered they should be logged at DEBUG level.
CAMEL-6635 PollingConsumer from a scheduled consumer such as file/ftp can use a regular thread pool instead of being scheduled Due the recent SPI which allows to plugin a different scheduler we can improved this and use a non scheduled thread pool, which avoids the suspend/resume and run for at least one poll "hack" we have today in the codebase.Instead we can use a regular thread pool as the scheduler, and then submit the task on demand when receive() is called on the PollingConsumer API. Improvement PollingConsumer from a scheduled consumer such as file/ftp can use a regular thread pool instead of being scheduled Due the recent SPI which allows to plugin a different scheduler we can improved this and use a non scheduled thread pool, which avoids the suspend/resume and run for at least one poll "hack" we have today in the codebase.Instead we can use a regular thread pool as the scheduler, and then submit the task on demand when receive() is called on the PollingConsumer API.
CAMEL-6634 JMX Agent - Allow to use property placeholders for statisticsLevel option This is the only option which doesnt today support property placeholders. We should add support for that on this option too. Improvement JMX Agent - Allow to use property placeholders for statisticsLevel option This is the only option which doesnt today support property placeholders. We should add support for that on this option too.
CAMEL-6631 SchedulerPollConsumer - Allow to configure scheduler to use eg camel-quartz for scheduling the task The org.apache.camel.impl.ScheduledPollConsumer which file/ftp and other scheduled consumer is based upon is using the scheduled thread pool to run the task at X given interval. It would be great to allow to plugin a different scheduler to be used, for example camel-quartz with a cron expression. This allows more advanced configuration of the scheduler when it should run.  New Feature SchedulerPollConsumer - Allow to configure scheduler to use eg camel-quartz for scheduling the task The org.apache.camel.impl.ScheduledPollConsumer which file/ftp and other scheduled consumer is based upon is using the scheduled thread pool to run the task at X given interval. It would be great to allow to plugin a different scheduler to be used, for example camel-quartz with a cron expression. This allows more advanced configuration of the scheduler when it should run. 
CAMEL-6629 Add requestBufferSize and requestHeaderSize options for jetty Add requestBufferSize and requestHeaderSize options for jetty server to allow configuration of allowable request header limitThis option is exposed by standalone jetty server but not exposed by camel-jetty. Improvement Add requestBufferSize and requestHeaderSize options for jetty Add requestBufferSize and requestHeaderSize options for jetty server to allow configuration of allowable request header limitThis option is exposed by standalone jetty server but not exposed by camel-jetty.
CAMEL-6628 ProducerTemplate - Allow to turn off event notifier There can be situations where you do not want the producer template to emit events for exchange sending + sent.See nabblehttp://camel.465427.n5.nabble.com/Bug-with-addEventNotifier-fires-two-exchange-sent-events-for-each-Exchange-sent-tp5737086.html Improvement ProducerTemplate - Allow to turn off event notifier There can be situations where you do not want the producer template to emit events for exchange sending + sent.See nabblehttp://camel.465427.n5.nabble.com/Bug-with-addEventNotifier-fires-two-exchange-sent-events-for-each-Exchange-sent-tp5737086.html
CAMEL-6623 Support attaching to SQS queues where the user doesn't have permission to list the queues (manually build URL) Currently the code assume that the user either has permission to list all the queues on their account or run a query request to get the queue url. In situations where security is more controlled you might have permission to read/write to/from a queue but not have permission to query SQS for the URL. In these cases there needs to be a way to manually build the URL from the pieces in the configuration. Improvement Support attaching to SQS queues where the user doesn't have permission to list the queues (manually build URL) Currently the code assume that the user either has permission to list all the queues on their account or run a query request to get the queue url. In situations where security is more controlled you might have permission to read/write to/from a queue but not have permission to query SQS for the URL. In these cases there needs to be a way to manually build the URL from the pieces in the configuration.
CAMEL-6622 Support XML Encryption 1.1 features in the camel-xmlsecurity component This task is to support XML Encryption 1.1 functionality in the camel-xmlsecurity component. This includes:a) Support for the "GCM" versions of AESb) Support for SHA > 1 with the RSA OAEP algorithmc) Support for MGF algorithms with SHA > 1 Improvement Support XML Encryption 1.1 features in the camel-xmlsecurity component This task is to support XML Encryption 1.1 functionality in the camel-xmlsecurity component. This includes:a) Support for the "GCM" versions of AESb) Support for SHA > 1 with the RSA OAEP algorithmc) Support for MGF algorithms with SHA > 1
CAMEL-6621 Add ability to connect to SQS queue of different owner Unable to connect to Amazon SQS queue owned by a different account.  In B2B scenario, would like to have different accounts for owner, writer, and reader of a queue. Improvement Add ability to connect to SQS queue of different owner Unable to connect to Amazon SQS queue owned by a different account.  In B2B scenario, would like to have different accounts for owner, writer, and reader of a queue.
CAMEL-6620 No mention of authMethod in http4 documentation I got an exception saying that an authMethod value is required.  So, I went to the docs and there is no mention of authMethod or the acceptable values.  I had to search the code find the AuthMethod enum to know what value is acceptable and to find the authMethod parameter name. Improvement No mention of authMethod in http4 documentation I got an exception saying that an authMethod value is required.  So, I went to the docs and there is no mention of authMethod or the acceptable values.  I had to search the code find the AuthMethod enum to know what value is acceptable and to find the authMethod parameter name.
CAMEL-6619 Ignore line breaks in camel-xmlsecurity component This is a patch to ignore line breaks in Apache Santuario in the camel-xmlsecurity component. It's a duplicate of some code in Apache WSS4J. Essentially it tells Apache Santuario not to insert needless line breaks in the generated XML, unless it has already been explicitly set (via a System property). Improvement Ignore line breaks in camel-xmlsecurity component This is a patch to ignore line breaks in Apache Santuario in the camel-xmlsecurity component. It's a duplicate of some code in Apache WSS4J. Essentially it tells Apache Santuario not to insert needless line breaks in the generated XML, unless it has already been explicitly set (via a System property).
CAMEL-6616 On SMPP producer start if SMSC returns a negative bind response producer will get stuck in an infinite reconnect loop On SMPP producer start if the SMSC returns a negative response on initial bind the Producer.start() method will get stuck in an infinite reconnect loop (assuming the SMSC is returning a negative response due to incorrect parameters) Improvement On SMPP producer start if SMSC returns a negative bind response producer will get stuck in an infinite reconnect loop On SMPP producer start if the SMSC returns a negative response on initial bind the Producer.start() method will get stuck in an infinite reconnect loop (assuming the SMSC is returning a negative response due to incorrect parameters)
CAMEL-6611 camel-netty-http - If sending a plain request to SSL then we should send back nice error response If SSL is enabled then you should use https, but if you send a http request we should detect that its not SSL and send back a nice error page. Improvement camel-netty-http - If sending a plain request to SSL then we should send back nice error response If SSL is enabled then you should use https, but if you send a http request we should detect that its not SSL and send back a nice error page.
CAMEL-6600 Documentation on CdiCamelContext The documentation on http://camel.apache.org/cdi.html give no clue as to how to create the field camelCtx. Is this instantiated locally? Is it injected? Task Documentation on CdiCamelContext The documentation on http://camel.apache.org/cdi.html give no clue as to how to create the field camelCtx. Is this instantiated locally? Is it injected?
CAMEL-6598 camel-dozer - Only add 2nd type converter if bi-directionaly We add src -> dest.And only add dest -> src if bi directional. Improvement camel-dozer - Only add 2nd type converter if bi-directionaly We add src -> dest.And only add dest -> src if bi directional.
CAMEL-6597 Camel conduit should support the JAXWS Async API out of box CamelOutputStream should support the JAXWS Async API out of box.We need to start another thread to handle the response is the Exchange is Async. Improvement Camel conduit should support the JAXWS Async API out of box CamelOutputStream should support the JAXWS Async API out of box.We need to start another thread to handle the response is the Exchange is Async.
CAMEL-6594 TypeConverterRegistry - Add api to remove converters The API allows to add, but you can't remove. We should add support for this. Improvement TypeConverterRegistry - Add api to remove converters The API allows to add, but you can't remove. We should add support for this.
CAMEL-6591 SFTP endpoint fails if the server disconnected the socket If the ssh server disconnects the socket held by an SFTP endpoint (and the disconnect option is not set to true) the next call to this endpoint will fail. A call after the failed call will reconnect (and succeed if the server is available again).The error message is as follows:SftpSimpleProduceDisconnectTestorg.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTesttestSftpSimpleProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest)org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Hello World]	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1360)	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:619)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146)	at org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest.testSftpSimpleProduce(SftpSimpleProduceDisconnectTest.java:50)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)	at java.lang.reflect.Method.invoke(Unknown Source)	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)	at org.junit.rules.RunRules.evaluate(RunRules.java:20)	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: target	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:536)	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:524)	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:771)	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)	... 31 moreCaused by: 4: 	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:332)	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:534)	... 46 moreCaused by: java.io.IOException: Pipe closed	at java.io.PipedInputStream.read(Unknown Source)	at java.io.PipedInputStream.read(Unknown Source)	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2665)	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2691)	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2148)	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:315)	... 47 more Improvement SFTP endpoint fails if the server disconnected the socket If the ssh server disconnects the socket held by an SFTP endpoint (and the disconnect option is not set to true) the next call to this endpoint will fail. A call after the failed call will reconnect (and succeed if the server is available again).The error message is as follows:SftpSimpleProduceDisconnectTestorg.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTesttestSftpSimpleProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest)org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Hello World]	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1360)	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:619)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454)	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146)	at org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest.testSftpSimpleProduce(SftpSimpleProduceDisconnectTest.java:50)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)	at java.lang.reflect.Method.invoke(Unknown Source)	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)	at org.junit.rules.RunRules.evaluate(RunRules.java:20)	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: target	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:536)	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:524)	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:771)	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)	... 31 moreCaused by: 4: 	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:332)	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:534)	... 46 moreCaused by: java.io.IOException: Pipe closed	at java.io.PipedInputStream.read(Unknown Source)	at java.io.PipedInputStream.read(Unknown Source)	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2665)	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2691)	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2148)	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:315)	... 47 more
CAMEL-6590 Restlet header warnings Warnings are produced about addition of standard headers when using restlet component. Eg, when running https://github.com/bibryam/camel-example-restlet-jdbc:{code}Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "User-Agent" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Host" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Accept" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Content-Length" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Content-Type" is not allowed. Please use the equivalent property in the Restlet API.{code}This clutters up the logs. Improvement Restlet header warnings Warnings are produced about addition of standard headers when using restlet component. Eg, when running https://github.com/bibryam/camel-example-restlet-jdbc:{code}Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "User-Agent" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Host" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Accept" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Content-Length" is not allowed. Please use the equivalent property in the Restlet API.Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeadersWARNING: Addition of the standard header "Content-Type" is not allowed. Please use the equivalent property in the Restlet API.{code}This clutters up the logs.
CAMEL-6589 Route should have exactly 1 input (eg 1 consumer) This is the norm today. And having 2+ inputs per routes does introduce some issues which isn't fully baked into the codebase, such as JMX mbeans, shutdown logic, route policy and whatnot.We should limit the DSL / API to accept exactly 1 input per route. Improvement Route should have exactly 1 input (eg 1 consumer) This is the norm today. And having 2+ inputs per routes does introduce some issues which isn't fully baked into the codebase, such as JMX mbeans, shutdown logic, route policy and whatnot.We should limit the DSL / API to accept exactly 1 input per route.
CAMEL-6588 Choose BlockingQueue implementation in Seda component In Seda component, BlockingQueue is by default a LinkedBlockingQueue. Make this configurable, in order to plug in a PriorityBlockingQueue or any other BlockingQueue type.See http://camel.465427.n5.nabble.com/SEDA-with-PriorityBlockingQueue-td5736411.html New Feature Choose BlockingQueue implementation in Seda component In Seda component, BlockingQueue is by default a LinkedBlockingQueue. Make this configurable, in order to plug in a PriorityBlockingQueue or any other BlockingQueue type.See http://camel.465427.n5.nabble.com/SEDA-with-PriorityBlockingQueue-td5736411.html
CAMEL-6584 camel splunk component I would like to donate a new component that integrates with Splunk, a platform for collecting, analyzing and visualizing machine data in real time. http://splunk.comThe component is hosted at github https://github.com/pax95/camel-splunk, and a example of use can be found at https://github.com/pax95/camel-splunk-exampleThere has been some discussions here http://camel.465427.n5.nabble.com/Camel-Splunk-component-td5730476.htmlThe component has external dependencies on Splunk java library which is hosted at http://splunk.artifactoryonline.com/splunk/ext-releases-local/ The library is ASL licensed, but is not osgi compliant. New Feature camel splunk component I would like to donate a new component that integrates with Splunk, a platform for collecting, analyzing and visualizing machine data in real time. http://splunk.comThe component is hosted at github https://github.com/pax95/camel-splunk, and a example of use can be found at https://github.com/pax95/camel-splunk-exampleThere has been some discussions here http://camel.465427.n5.nabble.com/Camel-Splunk-component-td5730476.htmlThe component has external dependencies on Splunk java library which is hosted at http://splunk.artifactoryonline.com/splunk/ext-releases-local/ The library is ASL licensed, but is not osgi compliant.
CAMEL-6583 camel-jms - Add option to include optional JMSX properties in binding to Camel message See nabblehttp://camel.465427.n5.nabble.com/How-to-get-User-ID-from-ActiveMQ-to-Camel-tp5736115.htmlSome JMSX properties is filtered out accordingly to the jms 1.1 spec page 39 which states these are optional.The default JMS header filter will filter them out. We should add option to include these if the user want that. Improvement camel-jms - Add option to include optional JMSX properties in binding to Camel message See nabblehttp://camel.465427.n5.nabble.com/How-to-get-User-ID-from-ActiveMQ-to-Camel-tp5736115.htmlSome JMSX properties is filtered out accordingly to the jms 1.1 spec page 39 which states these are optional.The default JMS header filter will filter them out. We should add option to include these if the user want that.
CAMEL-6581 SendProcessor - Use fixed destination allow routing engine optimizations See CAMEL-6377As SendProcessor is used a lot, we should optimize it to use fixed destination, this allows us to optimize the code under the hood. Improvement SendProcessor - Use fixed destination allow routing engine optimizations See CAMEL-6377As SendProcessor is used a lot, we should optimize it to use fixed destination, this allows us to optimize the code under the hood.
CAMEL-6580 camel-jms - Dont allow CACHE_NONE for replyToCacheLevelName for temporary queues See nabblehttp://camel.465427.n5.nabble.com/Bug-in-JMS-Request-Reply-with-CACHE-NONE-and-Temporary-Queues-tp5736301.html Improvement camel-jms - Dont allow CACHE_NONE for replyToCacheLevelName for temporary queues See nabblehttp://camel.465427.n5.nabble.com/Bug-in-JMS-Request-Reply-with-CACHE-NONE-and-Temporary-Queues-tp5736301.html
CAMEL-6575 Enhancements for camel-avro Hello.We've created certain enhancements to camel-avro RPC support we'd like to contribute to community.I will create a pull request against apache/master on github shortly and add comment here.The enhancements are:1) Support for avro reflection mode. It's plug-and-play now, so if you specify protocol class that is not generated, reflection mode will be automatically enabled2) Support for message names in URIs itself, e.g. you can specify avro:netty:host:port/message uri for both consumer and producer. Consumer dispatching will be done automatically by camel-avro. All mechanisms can be used at the same time. For producer header has the preference over URI, for consumer header will be set, consumers mapped to message names has precedence, consumer without message name (if any) is used as default one.3) Special support for messages with single parameter - one can specify singleParameter=true in consumer URI for messages with single parameter. This will make consumer not to wrap parameter in array, so no unwrapping in the route itself is needed.All this things together makes camel-avro very easy to use and efficient RPC mechanism for camel. To make an RPC one needs to:a) Define protocol interface with required messages, e.g.{code}public interface MyRPC { POJOOp1Response op1(POJOOp1Request request); POJOOp2Response op2(POJOOp2Request request);}{code}b) Use uris, like avro:netty:host:port/op1&singleParameter=true&protocolClassName=package.MyRPCP.S. The people who did the enhancement are me (Vitalii Tymchyshyn github.com/tivv and Oleksii Kondratyuk github.com/alexrwd) New Feature Enhancements for camel-avro Hello.We've created certain enhancements to camel-avro RPC support we'd like to contribute to community.I will create a pull request against apache/master on github shortly and add comment here.The enhancements are:1) Support for avro reflection mode. It's plug-and-play now, so if you specify protocol class that is not generated, reflection mode will be automatically enabled2) Support for message names in URIs itself, e.g. you can specify avro:netty:host:port/message uri for both consumer and producer. Consumer dispatching will be done automatically by camel-avro. All mechanisms can be used at the same time. For producer header has the preference over URI, for consumer header will be set, consumers mapped to message names has precedence, consumer without message name (if any) is used as default one.3) Special support for messages with single parameter - one can specify singleParameter=true in consumer URI for messages with single parameter. This will make consumer not to wrap parameter in array, so no unwrapping in the route itself is needed.All this things together makes camel-avro very easy to use and efficient RPC mechanism for camel. To make an RPC one needs to:a) Define protocol interface with required messages, e.g.{code}public interface MyRPC { POJOOp1Response op1(POJOOp1Request request); POJOOp2Response op2(POJOOp2Request request);}{code}b) Use uris, like avro:netty:host:port/op1&singleParameter=true&protocolClassName=package.MyRPCP.S. The people who did the enhancement are me (Vitalii Tymchyshyn github.com/tivv and Oleksii Kondratyuk github.com/alexrwd)
CAMEL-6570 CLIENT_CREATED event can't be sent in the CXFEndpoint.createClientFactoryBean() the method of createClient(Endpoint ep) has been overrided:            protected Client createClient(Endpoint ep) {                return new CamelCxfClientImpl(getBus(), ep);            }but the code for sentEvent is missing:     this.getServiceFactory().sendEvent(FactoryBeanListener.Event.CLIENT_CREATED, client, ep);this will result the custom FactoryBeanListener class can't capture CLIENT_CREATED event anymore. Improvement CLIENT_CREATED event can't be sent in the CXFEndpoint.createClientFactoryBean() the method of createClient(Endpoint ep) has been overrided:            protected Client createClient(Endpoint ep) {                return new CamelCxfClientImpl(getBus(), ep);            }but the code for sentEvent is missing:     this.getServiceFactory().sendEvent(FactoryBeanListener.Event.CLIENT_CREATED, client, ep);this will result the custom FactoryBeanListener class can't capture CLIENT_CREATED event anymore.
CAMEL-6567 Upgrade to Spring Batch 2.2.1 Upgrade to spring batch 2.2.0RELEASE Task Upgrade to Spring Batch 2.2.1 Upgrade to spring batch 2.2.0RELEASE
CAMEL-6565 Component for Apache Kafka I have written a component for Apache Kafka. If someone makes a blank wiki page I will edit it for documentation.Kafka uses Apache license obviously. The other dependencies are https://github.com/sgroschupf/zkclient and https://github.com/codahale/metrics which are both Apache also. New Feature Component for Apache Kafka I have written a component for Apache Kafka. If someone makes a blank wiki page I will edit it for documentation.Kafka uses Apache license obviously. The other dependencies are https://github.com/sgroschupf/zkclient and https://github.com/codahale/metrics which are both Apache also.
CAMEL-6564 JMX - Services which can only be enlisted once should use fixed name There is a number of services enlisted in JMX under services which can only be enlisted once.For example DefaultTypeConverterRegistry, DefaultErrorHandler and others. Today the have a hash value in the MBean name. For these services where there can only be one, then the hash value is not needed.By removing the hash value we have fixed MBean names which makes it easier to integrate for tooling and whatnot as the name is always the same. Improvement JMX - Services which can only be enlisted once should use fixed name There is a number of services enlisted in JMX under services which can only be enlisted once.For example DefaultTypeConverterRegistry, DefaultErrorHandler and others. Today the have a hash value in the MBean name. For these services where there can only be one, then the hash value is not needed.By removing the hash value we have fixed MBean names which makes it easier to integrate for tooling and whatnot as the name is always the same.
CAMEL-6559 script builder synchronized the operation of evaluateScript As we share the same ScriptEngine in the ScriptBuilder, so we need to synchronize the option of evaluateScript. It introduce some performance issue [here|http://camel.465427.n5.nabble.com/Groovy-script-synchronized-issue-with-2-10-x-and-2-11-x-prevents-camel-groovy-script-for-High-Concurc-tp5735815.html] Improvement script builder synchronized the operation of evaluateScript As we share the same ScriptEngine in the ScriptBuilder, so we need to synchronize the option of evaluateScript. It introduce some performance issue [here|http://camel.465427.n5.nabble.com/Groovy-script-synchronized-issue-with-2-10-x-and-2-11-x-prevents-camel-groovy-script-for-High-Concurc-tp5735815.html]
CAMEL-6556 classpath problem with camel:run and provided dependencies  running camel:run with provided dependencies failed as the dependencies is missing. I think this is the same issue as with the camel:dot goal that as been already corrected in this issue [CAMEL-3533] Improvement classpath problem with camel:run and provided dependencies  running camel:run with provided dependencies failed as the dependencies is missing. I think this is the same issue as with the camel:dot goal that as been already corrected in this issue [CAMEL-3533]
CAMEL-6555 camel-netty - Upgrade to Netty 4 or 5 Netty 4.0 has been released. We should upgrade, though it has new package names. So end users with custom codec need to migrate as well.So we could indicate that after Camel 2.12 we upgrade to give ppl amble time to adjust. Task camel-netty - Upgrade to Netty 4 or 5 Netty 4.0 has been released. We should upgrade, though it has new package names. So end users with custom codec need to migrate as well.So we could indicate that after Camel 2.12 we upgrade to give ppl amble time to adjust.
CAMEL-6553 bean component - Avoid WARN logging for not finding class when invoking a bean with constant values See nabblehttp://camel.465427.n5.nabble.com/Turning-off-warning-message-in-ObjectHelper-tp5735616.html Improvement bean component - Avoid WARN logging for not finding class when invoking a bean with constant values See nabblehttp://camel.465427.n5.nabble.com/Turning-off-warning-message-in-ObjectHelper-tp5735616.html
CAMEL-6551 FtpConsumer fills up log file with "Cannot connect/login" WARN level messages If the FTP server becomes unavailable, the container log gets flooded with WARN-level messages and gets filled with lines like:16:32:34,511 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.16:32:49,048 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.16:33:03,576 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.i.e. a WARN message gets added to the log every five seconds.  We only need to be notified once per incidence.The issue is in org.apache.camel.component.file.remote.RemoteFileConsumer.prePollCheck().I recommend a table of latches, keyed by endpoint key. The latch is set when the initial warning is logged, then cleared upon any subsequent successful connection.   Improvement FtpConsumer fills up log file with "Cannot connect/login" WARN level messages If the FTP server becomes unavailable, the container log gets flooded with WARN-level messages and gets filled with lines like:16:32:34,511 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.16:32:49,048 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.16:33:03,576 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.i.e. a WARN message gets added to the log every five seconds.  We only need to be notified once per incidence.The issue is in org.apache.camel.component.file.remote.RemoteFileConsumer.prePollCheck().I recommend a table of latches, keyed by endpoint key. The latch is set when the initial warning is logged, then cleared upon any subsequent successful connection.  
CAMEL-6545 seda producer - Add option to fail for non existing queue Seehttp://stackoverflow.com/questions/17457231/in-apache-camel-how-can-i-receive-an-error-if-an-endpoint-doesnt-existIt would be nice if we can configure a seda producer endpoint to fail if sending to a queue with no consumers at runtime, when the producer tries to send to the queue..to("seda:foo?failIfNoConsumers=true")Maybe the name should be {{failIfNoConsumers}} ?For example the direct component has an exception DirectConsumerNotAvailableException. So we would need a SedaConsumerNotAvailableException for this component. Improvement seda producer - Add option to fail for non existing queue Seehttp://stackoverflow.com/questions/17457231/in-apache-camel-how-can-i-receive-an-error-if-an-endpoint-doesnt-existIt would be nice if we can configure a seda producer endpoint to fail if sending to a queue with no consumers at runtime, when the producer tries to send to the queue..to("seda:foo?failIfNoConsumers=true")Maybe the name should be {{failIfNoConsumers}} ?For example the direct component has an exception DirectConsumerNotAvailableException. So we would need a SedaConsumerNotAvailableException for this component.
CAMEL-6539 Typeconverter for Spring Resource abstraction I have code and test in https://github.com/davidkarlsen/camel/tree/springResourceConverterforked off master.Pull request: https://github.com/apache/camel/pull/29as patch: https://github.com/apache/camel/pull/29.patch New Feature Typeconverter for Spring Resource abstraction I have code and test in https://github.com/davidkarlsen/camel/tree/springResourceConverterforked off master.Pull request: https://github.com/apache/camel/pull/29as patch: https://github.com/apache/camel/pull/29.patch
CAMEL-6536 camel-test-osgi - JClouds upgrade causes unit test to not compile In tests/camel-itest-osgi{code}[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:testCompile (default-testCompile) on project camel-itest-osgi: Compilation failure: Compilation failure:[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[27,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[29,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[27,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[29,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[50,8] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: class BlobStoreBlueprintRouteTest[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[50,53] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: class BlobStoreBlueprintRouteTest[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[54,8] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: class BlobStoreRouteTest[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[54,53] error: cannot find symbol[ERROR] -> [Help 1]{code}I asked on SO about the upgrade issue about the missing class: http://stackoverflow.com/questions/17567419/jclouds-1-5-to-1-6-upgrade-org-jclouds-blobstore-blobstorecontextfactory-class Task camel-test-osgi - JClouds upgrade causes unit test to not compile In tests/camel-itest-osgi{code}[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:testCompile (default-testCompile) on project camel-itest-osgi: Compilation failure: Compilation failure:[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[27,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[29,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[27,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[29,28] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: package org.jclouds.blobstore[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[50,8] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: class BlobStoreBlueprintRouteTest[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[50,53] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: class BlobStoreBlueprintRouteTest[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[54,8] error: cannot find symbol[ERROR] symbol:   class BlobStoreContextFactory[ERROR] location: class BlobStoreRouteTest[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[54,53] error: cannot find symbol[ERROR] -> [Help 1]{code}I asked on SO about the upgrade issue about the missing class: http://stackoverflow.com/questions/17567419/jclouds-1-5-to-1-6-upgrade-org-jclouds-blobstore-blobstorecontextfactory-class
CAMEL-6534 Component for RabbitMQ I have open sourced our component for RabbitMQ. I have been using this for a while in my open source projects.There is already an AMQP component but it does not expose all the properties of the RabbitMQ client.This component is related to the AMQP component like the activeMQ component relates to the JMS component (a superset of functionality).I will create a wiki page if you can remind me how to do so; it has been a year since my last contribution. New Feature Component for RabbitMQ I have open sourced our component for RabbitMQ. I have been using this for a while in my open source projects.There is already an AMQP component but it does not expose all the properties of the RabbitMQ client.This component is related to the AMQP component like the activeMQ component relates to the JMS component (a superset of functionality).I will create a wiki page if you can remind me how to do so; it has been a year since my last contribution.
CAMEL-6522 camel-netty - Allow sharing boss and worker thread pools If you have many netty routes you may want to reuse netty boss / worker pools which allows to control the active number of threads in use.For example if you have 200 routes with netty then by default they have all their own thread pools. By sharing thread pools we can control the number of threads and for example set that to lower values. New Feature camel-netty - Allow sharing boss and worker thread pools If you have many netty routes you may want to reuse netty boss / worker pools which allows to control the active number of threads in use.For example if you have 200 routes with netty then by default they have all their own thread pools. By sharing thread pools we can control the number of threads and for example set that to lower values.
CAMEL-6521 ActiveMQUuidGenerator should allow configuring server socket port number See AMQ-4588We would need a similar improvement in camel-core Improvement ActiveMQUuidGenerator should allow configuring server socket port number See AMQ-4588We would need a similar improvement in camel-core
CAMEL-6513 IncompatibleClassChangeError with weld-se 2.0.2 After upgrading from weld 1.1.10 (CDI 1.0) to weld 2.0.2 (CDI 1.1), an Arquillian based test throws an error:Caused by: java.lang.IncompatibleClassChangeError: Class org.apache.camel.cdi.internal.CamelContextBean does not implement the requested interface javax.enterprise.inject.spi.BeanAttributes	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:76)	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:69)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:83)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:77)	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:601)	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)	... 112 more Task IncompatibleClassChangeError with weld-se 2.0.2 After upgrading from weld 1.1.10 (CDI 1.0) to weld 2.0.2 (CDI 1.1), an Arquillian based test throws an error:Caused by: java.lang.IncompatibleClassChangeError: Class org.apache.camel.cdi.internal.CamelContextBean does not implement the requested interface javax.enterprise.inject.spi.BeanAttributes	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:76)	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:69)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:83)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:77)	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:601)	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)	... 112 more
CAMEL-6510 AggregationStrategy - Allow it to be a service to make it easier to have logic in start/stop if needed When using EIPs with the aggregation strategy, it would be nice if we could support if its a service, so we can have start|stop callbacks invoked. Improvement AggregationStrategy - Allow it to be a service to make it easier to have logic in start/stop if needed When using EIPs with the aggregation strategy, it would be nice if we could support if its a service, so we can have start|stop callbacks invoked.
CAMEL-6508 Recipient list EIP - Add property which endpoint an Exchange is from the recipient list When using recipient list and with aggregation strategy, it would be nicer if we could easily see from the Exchange which endpoint from the recipient list expression its from.This makes logic in the aggregation strategy easier to implement when merging data from many different endpoints and if they come out of order due parallel work. Improvement Recipient list EIP - Add property which endpoint an Exchange is from the recipient list When using recipient list and with aggregation strategy, it would be nicer if we could easily see from the Exchange which endpoint from the recipient list expression its from.This makes logic in the aggregation strategy easier to implement when merging data from many different endpoints and if they come out of order due parallel work.
CAMEL-6506 CometdComponent does not allow addition of serverlisteners to the bayeux server The CometdComponent does not allow addition of serverlisteners to the bayeux server. It exposes an addExtension method, there should be a similar one called addServerListener New Feature CometdComponent does not allow addition of serverlisteners to the bayeux server The CometdComponent does not allow addition of serverlisteners to the bayeux server. It exposes an addExtension method, there should be a similar one called addServerListener
CAMEL-6505 GenericFileMessage should override copy() method Copy of GenericFileMessage should override copy() method and copy file attribute from the copied message. CAMEL-3060 has solved problem for toStringCAMEL-6499 which I have reported recently fixed minor issue of the previous fixI was however hoping that the fix would correct add missing copy() override.I do not understand the exact use of the file property since it is also put in the body of the message. Is it all right to share same instance of GenericFile between two GenericFileMessage instances? Since they share it in the body I would expect sharing it in the file attribute is fine as well.Ales Improvement GenericFileMessage should override copy() method Copy of GenericFileMessage should override copy() method and copy file attribute from the copied message. CAMEL-3060 has solved problem for toStringCAMEL-6499 which I have reported recently fixed minor issue of the previous fixI was however hoping that the fix would correct add missing copy() override.I do not understand the exact use of the file property since it is also put in the body of the message. Is it all right to share same instance of GenericFile between two GenericFileMessage instances? Since they share it in the body I would expect sharing it in the file attribute is fine as well.Ales
CAMEL-6502 Allow usage of Java KeyPair for SSH public key authentication in SFTP Currently the camel-ftp component only allows using SSH key material in OpenSSH file format.With this extension it is also possible to use a java.security.KeyPair for public key authentication provided the underlying keys are DSA or RSA keys. Improvement Allow usage of Java KeyPair for SSH public key authentication in SFTP Currently the camel-ftp component only allows using SSH key material in OpenSSH file format.With this extension it is also possible to use a java.security.KeyPair for public key authentication provided the underlying keys are DSA or RSA keys.
CAMEL-6500 camel-cdi - Deployment failure on Glassfish 4.0 SEVERE:   Exception during lifecycle processingorg.glassfish.deployment.common.DeploymentException: CDI definition failure:Exception List with 1 exceptions:Exception 0 :org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@5e08b58a	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.checkNull(ExternalBeanAttributesFactory.java:106)	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:73)	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:66)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:78)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:72)	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:606)	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:274)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:121)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:261)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:240)	at org.jboss.weld.event.ObserverNotifier.notifyObserver(ObserverNotifier.java:170)	at org.jboss.weld.event.ObserverNotifier.notifyObservers(ObserverNotifier.java:129)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:103)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:63)	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:53)	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:515)	at org.glassfish.weld.WeldDeployer.event(WeldDeployer.java:213)	at org.glassfish.kernel.event.EventsImpl.send(EventsImpl.java:131)	at org.glassfish.internal.data.ApplicationInfo.load(ApplicationInfo.java:328)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:493)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:527)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:523)	at java.security.AccessController.doPrivileged(Native Method)	at javax.security.auth.Subject.doAs(Subject.java:356)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:522)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:546)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1423)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1500(CommandRunnerImpl.java:108)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1762)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1674)	at com.sun.enterprise.v3.admin.AdminAdapter.doCommand(AdminAdapter.java:534)	at com.sun.enterprise.v3.admin.AdminAdapter.onMissingResource(AdminAdapter.java:224)	at org.glassfish.grizzly.http.server.StaticHttpHandler.service(StaticHttpHandler.java:297)	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:246)	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191)	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168)	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189)	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114)	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838)	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544)	at java.lang.Thread.run(Thread.java:724)	at org.glassfish.weld.WeldDeployer.event(WeldDeployer.java:225)	at org.glassfish.kernel.event.EventsImpl.send(EventsImpl.java:131)	at org.glassfish.internal.data.ApplicationInfo.load(ApplicationInfo.java:328)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:493)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:527)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:523)	at java.security.AccessController.doPrivileged(Native Method)	at javax.security.auth.Subject.doAs(Subject.java:356)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:522)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:546)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1423)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1500(CommandRunnerImpl.java:108)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1762)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1674)	at com.sun.enterprise.v3.admin.AdminAdapter.doCommand(AdminAdapter.java:534)	at com.sun.enterprise.v3.admin.AdminAdapter.onMissingResource(AdminAdapter.java:224)	at org.glassfish.grizzly.http.server.StaticHttpHandler.service(StaticHttpHandler.java:297)	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:246)	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191)	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168)	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189)	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114)	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838)	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544)	at java.lang.Thread.run(Thread.java:724) Task camel-cdi - Deployment failure on Glassfish 4.0 SEVERE:   Exception during lifecycle processingorg.glassfish.deployment.common.DeploymentException: CDI definition failure:Exception List with 1 exceptions:Exception 0 :org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@5e08b58a	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.checkNull(ExternalBeanAttributesFactory.java:106)	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:73)	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:66)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:78)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:72)	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)	at java.lang.reflect.Method.invoke(Method.java:606)	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:274)	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:121)	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:261)	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:240)	at org.jboss.weld.event.ObserverNotifier.notifyObserver(ObserverNotifier.java:170)	at org.jboss.weld.event.ObserverNotifier.notifyObservers(ObserverNotifier.java:129)	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:103)	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:63)	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:35)	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:53)	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:515)	at org.glassfish.weld.WeldDeployer.event(WeldDeployer.java:213)	at org.glassfish.kernel.event.EventsImpl.send(EventsImpl.java:131)	at org.glassfish.internal.data.ApplicationInfo.load(ApplicationInfo.java:328)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:493)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:527)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:523)	at java.security.AccessController.doPrivileged(Native Method)	at javax.security.auth.Subject.doAs(Subject.java:356)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:522)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:546)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1423)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1500(CommandRunnerImpl.java:108)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1762)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1674)	at com.sun.enterprise.v3.admin.AdminAdapter.doCommand(AdminAdapter.java:534)	at com.sun.enterprise.v3.admin.AdminAdapter.onMissingResource(AdminAdapter.java:224)	at org.glassfish.grizzly.http.server.StaticHttpHandler.service(StaticHttpHandler.java:297)	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:246)	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191)	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168)	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189)	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114)	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838)	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544)	at java.lang.Thread.run(Thread.java:724)	at org.glassfish.weld.WeldDeployer.event(WeldDeployer.java:225)	at org.glassfish.kernel.event.EventsImpl.send(EventsImpl.java:131)	at org.glassfish.internal.data.ApplicationInfo.load(ApplicationInfo.java:328)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:493)	at com.sun.enterprise.v3.server.ApplicationLifecycle.deploy(ApplicationLifecycle.java:219)	at org.glassfish.deployment.admin.DeployCommand.execute(DeployCommand.java:491)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:527)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2$1.run(CommandRunnerImpl.java:523)	at java.security.AccessController.doPrivileged(Native Method)	at javax.security.auth.Subject.doAs(Subject.java:356)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$2.execute(CommandRunnerImpl.java:522)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:546)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.doCommand(CommandRunnerImpl.java:1423)	at com.sun.enterprise.v3.admin.CommandRunnerImpl.access$1500(CommandRunnerImpl.java:108)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1762)	at com.sun.enterprise.v3.admin.CommandRunnerImpl$ExecutionContext.execute(CommandRunnerImpl.java:1674)	at com.sun.enterprise.v3.admin.AdminAdapter.doCommand(AdminAdapter.java:534)	at com.sun.enterprise.v3.admin.AdminAdapter.onMissingResource(AdminAdapter.java:224)	at org.glassfish.grizzly.http.server.StaticHttpHandler.service(StaticHttpHandler.java:297)	at com.sun.enterprise.v3.services.impl.ContainerMapper.service(ContainerMapper.java:246)	at org.glassfish.grizzly.http.server.HttpHandler.runService(HttpHandler.java:191)	at org.glassfish.grizzly.http.server.HttpHandler.doHandle(HttpHandler.java:168)	at org.glassfish.grizzly.http.server.HttpServerFilter.handleRead(HttpServerFilter.java:189)	at org.glassfish.grizzly.filterchain.ExecutorResolver$9.execute(ExecutorResolver.java:119)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeFilter(DefaultFilterChain.java:288)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.executeChainPart(DefaultFilterChain.java:206)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.execute(DefaultFilterChain.java:136)	at org.glassfish.grizzly.filterchain.DefaultFilterChain.process(DefaultFilterChain.java:114)	at org.glassfish.grizzly.ProcessorExecutor.execute(ProcessorExecutor.java:77)	at org.glassfish.grizzly.nio.transport.TCPNIOTransport.fireIOEvent(TCPNIOTransport.java:838)	at org.glassfish.grizzly.strategies.AbstractIOStrategy.fireIOEvent(AbstractIOStrategy.java:113)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.run0(WorkerThreadIOStrategy.java:115)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy.access$100(WorkerThreadIOStrategy.java:55)	at org.glassfish.grizzly.strategies.WorkerThreadIOStrategy$WorkerThreadRunnable.run(WorkerThreadIOStrategy.java:135)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.doWork(AbstractThreadPool.java:564)	at org.glassfish.grizzly.threadpool.AbstractThreadPool$Worker.run(AbstractThreadPool.java:544)	at java.lang.Thread.run(Thread.java:724)
CAMEL-6498 Improvement to allow passing in a parameter to a NamedQuery via Camel JPA I have an Entity definition as below:{code}@Entity@Table(name="TIMESHEET")@NamedQuery(name = "getTimesheetById", query = "select t from TimesheetEntity t where t.id = :timesheetId ")public class TimesheetEntity extends BaseObject {@Id@GeneratedValue(strategy= GenerationType.AUTO)private Long id;Long userId;...{code}And my camel route camel-jpa uri looks like:{code}<to uri="jpa://com.mycompany.persistence.TimesheetEntity?consumeDelete=false&amp;consumer.namedQuery=getTimesheetById"/>{code}Now, I would like to pass in the ":timesheetId" parameter to the NamedQuery, for instance "timesheetId=12345". Unfortunately, it is not possible to dynamically pass the parameter to the NamedQuery in a camel route at the moment. It does look like that there were some other users tried to find a solution to the same problem so at least it is a common use case.We should allow passing in a parameter to a NamedQuery via Camel JPA. Improvement Improvement to allow passing in a parameter to a NamedQuery via Camel JPA I have an Entity definition as below:{code}@Entity@Table(name="TIMESHEET")@NamedQuery(name = "getTimesheetById", query = "select t from TimesheetEntity t where t.id = :timesheetId ")public class TimesheetEntity extends BaseObject {@Id@GeneratedValue(strategy= GenerationType.AUTO)private Long id;Long userId;...{code}And my camel route camel-jpa uri looks like:{code}<to uri="jpa://com.mycompany.persistence.TimesheetEntity?consumeDelete=false&amp;consumer.namedQuery=getTimesheetById"/>{code}Now, I would like to pass in the ":timesheetId" parameter to the NamedQuery, for instance "timesheetId=12345". Unfortunately, it is not possible to dynamically pass the parameter to the NamedQuery in a camel route at the moment. It does look like that there were some other users tried to find a solution to the same problem so at least it is a common use case.We should allow passing in a parameter to a NamedQuery via Camel JPA.
CAMEL-6488 camel-netty-http - Add support for sharing port in Karaf between Camel bundles We should add a way of deploying a blueprint bundle which configures a shared HttpServerBootstrapFactory, and exposed in the OSGi service registry. And then for other Camel bundles to reference, and use in the Camel routes.This allows to reuse the same netty boostrap server across bundles.This requires also that we refactor out the HttpServerMultiplexChannelHandler to be shared as well. New Feature camel-netty-http - Add support for sharing port in Karaf between Camel bundles We should add a way of deploying a blueprint bundle which configures a shared HttpServerBootstrapFactory, and exposed in the OSGi service registry. And then for other Camel bundles to reference, and use in the Camel routes.This allows to reuse the same netty boostrap server across bundles.This requires also that we refactor out the HttpServerMultiplexChannelHandler to be shared as well.
CAMEL-6487 camel-ftp - Upgrade to commons net 3.3 There was a bug in 3.2. And we backported to working 3.1. Though people in the community is testing with 3.3, and that release seems good as well.http://camel.465427.n5.nabble.com/Problem-with-Camel-FTP-component-because-of-bug-in-commons-net-tp5734313.html Task camel-ftp - Upgrade to commons net 3.3 There was a bug in 3.2. And we backported to working 3.1. Though people in the community is testing with 3.3, and that release seems good as well.http://camel.465427.n5.nabble.com/Problem-with-Camel-FTP-component-because-of-bug-in-commons-net-tp5734313.html
CAMEL-6485 Performance improvement in DefaultCamelContext by delaying synchronized block When using Camel in a hi-throughput/multithreaded environment, I see a lot of contention in the DefaultCamelContext.getManagementStrategy() method.  Camel is synchronizing on an AtomicBoolean no matter what is the value of the boolean.  It is only required if the managementStrategy has not been initialized yet.  I have attached a patch that delays the synchronization to when the managementStrategy is not initialized.  This dramatically improved the performance of my system. Improvement Performance improvement in DefaultCamelContext by delaying synchronized block When using Camel in a hi-throughput/multithreaded environment, I see a lot of contention in the DefaultCamelContext.getManagementStrategy() method.  Camel is synchronizing on an AtomicBoolean no matter what is the value of the boolean.  It is only required if the managementStrategy has not been initialized yet.  I have attached a patch that delays the synchronization to when the managementStrategy is not initialized.  This dramatically improved the performance of my system.
CAMEL-6483 Optimize writing response in camel-jetty If using chunked mode, we should flush on each write, as Jetty handles this better.Also we should if do direct streaming from CachedOutputStream if that is in used, if chunked was forced disabled. This avoids an intermediate buffer copy. Improvement Optimize writing response in camel-jetty If using chunked mode, we should flush on each write, as Jetty handles this better.Also we should if do direct streaming from CachedOutputStream if that is in used, if chunked was forced disabled. This avoids an intermediate buffer copy.
CAMEL-6482 Add responseBufferSize option to camel-jetty To allow configuring a buffer size to use on the HttpServletResponse when writing the response. Improvement Add responseBufferSize option to camel-jetty To allow configuring a buffer size to use on the HttpServletResponse when writing the response.
CAMEL-6481 Can't access to length of Array (java) from simple language Cannot evaluate length on java.lang.String[] in simpleI suspect this is because this is part of the language itself. But still, why not?h3. repro steprun this: {noformat}?xml version="1.0" encoding="UTF-8"?><routes xmlns="http://camel.apache.org/schema/spring" >    <route>        <from uri="timer:test?repeatCount=1"/>        <setBody>            <groovy>[[2, "Chaine_avec_des_underscores", 12, "c"], ["d4", "e5", "f6"]]</groovy>        </setBody>        <split>            <simple>${body}</simple>            <setHeader headerName="splittedColumn1">                <simple>${body[1].split("_")}</simple>            </setHeader>            <log message="${header.splittedColumn1.length}"/>        </split>    </route></routes>{noformat}errors with:{noformat}org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .length on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: length on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: length not found on bean: [Ljava.lang.String;@33318365 of type: [Ljava.lang.String;. Exchange[Message: [d4, e5, f6]]{noformat} Improvement Can't access to length of Array (java) from simple language Cannot evaluate length on java.lang.String[] in simpleI suspect this is because this is part of the language itself. But still, why not?h3. repro steprun this: {noformat}?xml version="1.0" encoding="UTF-8"?><routes xmlns="http://camel.apache.org/schema/spring" >    <route>        <from uri="timer:test?repeatCount=1"/>        <setBody>            <groovy>[[2, "Chaine_avec_des_underscores", 12, "c"], ["d4", "e5", "f6"]]</groovy>        </setBody>        <split>            <simple>${body}</simple>            <setHeader headerName="splittedColumn1">                <simple>${body[1].split("_")}</simple>            </setHeader>            <log message="${header.splittedColumn1.length}"/>        </split>    </route></routes>{noformat}errors with:{noformat}org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .length on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: length on null due to: org.apache.camel.component.bean.MethodNotFoundException: Method with name: length not found on bean: [Ljava.lang.String;@33318365 of type: [Ljava.lang.String;. Exchange[Message: [d4, e5, f6]]{noformat}
CAMEL-6480 Allow to turn off logging message body more easily See FAQhttp://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.htmlIf we use -1 then we should change that to turn off any logging of the message body. Then people can use 0 for unlimited length. And people can use -1 to turn logging off, as today you have to use 1, so we just log 1 char. Improvement Allow to turn off logging message body more easily See FAQhttp://camel.apache.org/how-do-i-set-the-max-chars-when-debug-logging-messages-in-camel.htmlIf we use -1 then we should change that to turn off any logging of the message body. Then people can use 0 for unlimited length. And people can use -1 to turn logging off, as today you have to use 1, so we just log 1 char.
CAMEL-6479 New FileExist option for File component: TryRename This patch introduces a new FileExist option for File component which works great when using on an FTP producer:the producer won't check if the file exists (sometime this is taking a long time) on the destination endpoint and simply rename it after the temporary file has been deployed. Most of FTP server implementation will overwrite the final file in case this already exists.Pull request created on GitHub:https://github.com/apache/camel/pull/24 New Feature New FileExist option for File component: TryRename This patch introduces a new FileExist option for File component which works great when using on an FTP producer:the producer won't check if the file exists (sometime this is taking a long time) on the destination endpoint and simply rename it after the temporary file has been deployed. Most of FTP server implementation will overwrite the final file in case this already exists.Pull request created on GitHub:https://github.com/apache/camel/pull/24
CAMEL-6477 allow loading of keyfile from classpath Currently the SFTP component only allows key files to be loaded from the OS path. It would be much better of the key file were loaded in from the classpath intead. Please the forum conversation for more information:http://camel.465427.n5.nabble.com/camel-sftp-privateKeyFile-load-from-classpath-tt5734394.html#a5734526 Improvement allow loading of keyfile from classpath Currently the SFTP component only allows key files to be loaded from the OS path. It would be much better of the key file were loaded in from the classpath intead. Please the forum conversation for more information:http://camel.465427.n5.nabble.com/camel-sftp-privateKeyFile-load-from-classpath-tt5734394.html#a5734526
CAMEL-6476 StreamCachingStrategy - A better strategy The old stream caching has some flaws such as- copying the existing stream into an internal buffer/type- spool to disk by default- a bit confusing to configure- wrap based- not exposed in JMX- not easy to implement custom strategiesWorking on a new strategy that supports- reusing existing stream if it supports marks *done* (added special for byte array input streams)- memory based only by default *wontfix* (we leave it backwards compatible as is, ppl can easily turn off overflow to disk now)- threshold for spooling to disk based on memory usage, and payload sizes *done*- use the internal camel processor to avoid wrapping *done*- exposed in JMX with runtime stats *done*- only enabled if explicit turned on *done*- log at INFO level on startup if enabled and what settings is in use *done*- configuring in the DSL with a xxxDefinition to make it stand out in the XML DSLs *done*- configuring of spool directory supporting ENV and JVM system properties *done*- avoid the leak from CAMEL-6452 *done* New Feature StreamCachingStrategy - A better strategy The old stream caching has some flaws such as- copying the existing stream into an internal buffer/type- spool to disk by default- a bit confusing to configure- wrap based- not exposed in JMX- not easy to implement custom strategiesWorking on a new strategy that supports- reusing existing stream if it supports marks *done* (added special for byte array input streams)- memory based only by default *wontfix* (we leave it backwards compatible as is, ppl can easily turn off overflow to disk now)- threshold for spooling to disk based on memory usage, and payload sizes *done*- use the internal camel processor to avoid wrapping *done*- exposed in JMX with runtime stats *done*- only enabled if explicit turned on *done*- log at INFO level on startup if enabled and what settings is in use *done*- configuring in the DSL with a xxxDefinition to make it stand out in the XML DSLs *done*- configuring of spool directory supporting ENV and JVM system properties *done*- avoid the leak from CAMEL-6452 *done*
CAMEL-6475 camel-cxf - Do not force using CachedOutputStream in converters This causes problems as then people cant turn off stream caching, as camel-cxf forces this down on them anyway.org.apache.camel.component.cxf.converter.CxfConverter#soapMessageToInputStream Improvement camel-cxf - Do not force using CachedOutputStream in converters This causes problems as then people cant turn off stream caching, as camel-cxf forces this down on them anyway.org.apache.camel.component.cxf.converter.CxfConverter#soapMessageToInputStream
CAMEL-6474 DOM2SAX doesn't provide the full support of SAX XmlConverter will convert the DomSource into SAXSource when it can find the org.apache.xalan.xsltc.trax.DOM2SAX. But the DOM2SAX doesn't provide the full support of SAX, which causes the NPE issue when we route the SAXSource into xslt transformer like saxon transformer. Here are some discussion on saxon support https://saxonica.plan.io/issues/1814.BTW, when I changed the transformer to the xalan one, I still the java.util.EmptyStackException. So my suggest we need to disable this convertor until we find other good solution.  Improvement DOM2SAX doesn't provide the full support of SAX XmlConverter will convert the DomSource into SAXSource when it can find the org.apache.xalan.xsltc.trax.DOM2SAX. But the DOM2SAX doesn't provide the full support of SAX, which causes the NPE issue when we route the SAXSource into xslt transformer like saxon transformer. Here are some discussion on saxon support https://saxonica.plan.io/issues/1814.BTW, when I changed the transformer to the xalan one, I still the java.util.EmptyStackException. So my suggest we need to disable this convertor until we find other good solution. 
CAMEL-6471 CxfPayload - Dont output the body in toString if streaming mode org.apache.camel.component.cxf.CxfPayload#toStringThis forces outputting the body even if its streaming mode. This is bad. We should not load the stream into memory.There is already good logging support by the log component where you can turn on|off logging streams etc. Improvement CxfPayload - Dont output the body in toString if streaming mode org.apache.camel.component.cxf.CxfPayload#toStringThis forces outputting the body even if its streaming mode. This is bad. We should not load the stream into memory.There is already good logging support by the log component where you can turn on|off logging streams etc.
CAMEL-6469 Add StatusLine object to exchange in populateResponse If throwing exceptions are turned off, there is no way to get the same information that is used construct the exception when throwing them.  There should be an exchange property for the StatusLine object in camel-http4 just like there is for the response code.  In fact, if the StatusLine object is available, there is no need for the response code property.   Improvement Add StatusLine object to exchange in populateResponse If throwing exceptions are turned off, there is no way to get the same information that is used construct the exception when throwing them.  There should be an exchange property for the StatusLine object in camel-http4 just like there is for the response code.  In fact, if the StatusLine object is available, there is no need for the response code property.  
CAMEL-6467 Add Mustache Component Introduce a Camel component to produce messages based on Mustache templates (http://mustache.github.io/) New Feature Add Mustache Component Introduce a Camel component to produce messages based on Mustache templates (http://mustache.github.io/)
CAMEL-6466 Log component URI parameters should be able to override custom formatter properties Our project uses a custom log formatter of type org.apache.camel.component.log.LogFormatter, the only difference is we have changed the defaults from camel's standard defaults.  Unfortunately, by registering a custom formatter we can no longer have a route specifically diverge from the system wide formatter for special cases.For example, the following works when we don't have a custom formatter but fails when do have a custom formatter:<touri="log:pluginName?level=ERROR&amp;showBody=false&amp;showCaughtException=true&amp;showStackTrace=true"/>It fails with a FailedToCreateRouteException with the message "There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{showBody=false, showCaughtException=true, showStackTrace=true}]".The root of the problem is that the logic in LogComponent.createEndpoint() only sets the URI parameters on the localFormatter if there is no custom formatter already registered, otherwise it tries to set the parameters on the endpoint itself and not the formatter.It would be nice if the log route URIs were able to override parameters on the custom formatter for routes that need special cases. Improvement Log component URI parameters should be able to override custom formatter properties Our project uses a custom log formatter of type org.apache.camel.component.log.LogFormatter, the only difference is we have changed the defaults from camel's standard defaults.  Unfortunately, by registering a custom formatter we can no longer have a route specifically diverge from the system wide formatter for special cases.For example, the following works when we don't have a custom formatter but fails when do have a custom formatter:<touri="log:pluginName?level=ERROR&amp;showBody=false&amp;showCaughtException=true&amp;showStackTrace=true"/>It fails with a FailedToCreateRouteException with the message "There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{showBody=false, showCaughtException=true, showStackTrace=true}]".The root of the problem is that the logic in LogComponent.createEndpoint() only sets the URI parameters on the localFormatter if there is no custom formatter already registered, otherwise it tries to set the parameters on the endpoint itself and not the formatter.It would be nice if the log route URIs were able to override parameters on the custom formatter for routes that need special cases.
CAMEL-6463 Camel routes added to context at wrong point of Spring lifecycle We use camel with Java DSL and a lot of spring dependency injection, we context scan to find the Route Builders.We have an intermittent problem where camel cannot start due to a null reference being thrown by a route.  Example code (for illustrative purposes) is:public class MyRouteBuilder extends RouteBuilder {@Autowiredprivate MyService myService;@Overridepublic void configure() throws Exception {    from(ENDPOINT)    .process(myService)}}In the example above occassionally there is a .process(NULL) reference error thrown at runtime; usually only on quick machines.  I stress this is not a problem with our Spring Dependency injection config.After looking at the camel code, including on master, the problem arrises because the AbstractCamelContextFactoryBean (which the Spring CamelContextFactoryBean extends) installs the routes (calling the route builder's configure() method) into the context in the afterPropertiesSet() method.  There is no guarantee that spring will have initialised the service as the Spring Camel Context does not depend on the bean.  The routes should be installed when spring indicates everything has been initialised, a ContextRefreshed event.The workaround is not to autowire services used in routes but 'new' them.   Improvement Camel routes added to context at wrong point of Spring lifecycle We use camel with Java DSL and a lot of spring dependency injection, we context scan to find the Route Builders.We have an intermittent problem where camel cannot start due to a null reference being thrown by a route.  Example code (for illustrative purposes) is:public class MyRouteBuilder extends RouteBuilder {@Autowiredprivate MyService myService;@Overridepublic void configure() throws Exception {    from(ENDPOINT)    .process(myService)}}In the example above occassionally there is a .process(NULL) reference error thrown at runtime; usually only on quick machines.  I stress this is not a problem with our Spring Dependency injection config.After looking at the camel code, including on master, the problem arrises because the AbstractCamelContextFactoryBean (which the Spring CamelContextFactoryBean extends) installs the routes (calling the route builder's configure() method) into the context in the afterPropertiesSet() method.  There is no guarantee that spring will have initialised the service as the Spring Camel Context does not depend on the bean.  The routes should be installed when spring indicates everything has been initialised, a ContextRefreshed event.The workaround is not to autowire services used in routes but 'new' them.  
CAMEL-6462 Question: Clustered environment for Camel with quartz and servlet We need to run camel inside a clustered environment (JBoss 7.x or Wildfly EAP 6.x) with some major challenges:* there are many cron triggered routes using quartz, which should work load balanced (means: a route should work on one note this time and on the other node next time. A job inside a route should not be clustered)* some servlet endpoints, which need be be called load balanced* route manipulation through user interaction during runtime* 2 nodes for failover and work balancingMy approach:Quartz can be clustered, this should be no problem, isnt' it?For distributed work on both nodes camel context should be active an both nodes with working routes. In this way servlet endpints should be active and accessible on both nodes, aren't they? For modifying camel context through GUI (web) I would write a singleton bean which has access to HA-JNDI and iterate over all (in this case two) camel contexts. Would this approach work? Do I miss some point? Exists other approaches betting fitting to this problem?Thank you for your help.  Wish Question: Clustered environment for Camel with quartz and servlet We need to run camel inside a clustered environment (JBoss 7.x or Wildfly EAP 6.x) with some major challenges:* there are many cron triggered routes using quartz, which should work load balanced (means: a route should work on one note this time and on the other node next time. A job inside a route should not be clustered)* some servlet endpoints, which need be be called load balanced* route manipulation through user interaction during runtime* 2 nodes for failover and work balancingMy approach:Quartz can be clustered, this should be no problem, isnt' it?For distributed work on both nodes camel context should be active an both nodes with working routes. In this way servlet endpints should be active and accessible on both nodes, aren't they? For modifying camel context through GUI (web) I would write a singleton bean which has access to HA-JNDI and iterate over all (in this case two) camel contexts. Would this approach work? Do I miss some point? Exists other approaches betting fitting to this problem?Thank you for your help. 
CAMEL-6460 camel-core-http - As a core component for http client and jetty Today camel-jetty and camel-servlet requires camel-http, which has dependency on http client 3.x. We should create a camel-http-core which the shared code, and then let camel-http be the http client component only. And then allow camel-servlet and camel-jetty to dep on camel-http-core and thus not bring in http client 3.1 anymore.See alsohttp://camel.465427.n5.nabble.com/camel-jetty-dependency-on-httpclient-3-tp5734180.html Improvement camel-core-http - As a core component for http client and jetty Today camel-jetty and camel-servlet requires camel-http, which has dependency on http client 3.x. We should create a camel-http-core which the shared code, and then let camel-http be the http client component only. And then allow camel-servlet and camel-jetty to dep on camel-http-core and thus not bring in http client 3.1 anymore.See alsohttp://camel.465427.n5.nabble.com/camel-jetty-dependency-on-httpclient-3-tp5734180.html
CAMEL-6456 camel-csv - Delimiter option should be useable in unmarshal as well See nabblehttp://camel.465427.n5.nabble.com/Question-about-setDelimiter-and-CSVDataFormat-tp5734185.htmlTo make it consistent and easier to set delimiter to be used for both marshal and unmarshal. Improvement camel-csv - Delimiter option should be useable in unmarshal as well See nabblehttp://camel.465427.n5.nabble.com/Question-about-setDelimiter-and-CSVDataFormat-tp5734185.htmlTo make it consistent and easier to set delimiter to be used for both marshal and unmarshal.
CAMEL-6453 Put the SSLSession instance into message header It could be useful for the customer to access the SSL Authentication information in the camel route by looking up the SSLSession instance from the message header. Improvement Put the SSLSession instance into message header It could be useful for the customer to access the SSL Authentication information in the camel route by looking up the SSLSession instance from the message header.
CAMEL-6451 Seda endpoints with same queue with mixed multipleConsumers should validate that only one setting is allowed From Scotts talk at CamelOne a question from the audience. About using seda:foo?multipleConsumers=trueseda:fooeg we can only support on option per queue name. We do this validation today for queue size etc. We should expand that to multipleConsumers option as well. Improvement Seda endpoints with same queue with mixed multipleConsumers should validate that only one setting is allowed From Scotts talk at CamelOne a question from the audience. About using seda:foo?multipleConsumers=trueseda:fooeg we can only support on option per queue name. We do this validation today for queue size etc. We should expand that to multipleConsumers option as well.
CAMEL-6446 Support JAXB annotations in Jackson Data Format Provide the capability to marshall/unmarshall JAXB annotated objects as JSON Improvement Support JAXB annotations in Jackson Data Format Provide the capability to marshall/unmarshall JAXB annotated objects as JSON
CAMEL-6439 camel-jms - Add thread pool for handling timeout when doing request/reply and allow to configure this thread pool This allows people to define how many threads they want for handling timeouts, such as they can better handle burst of timeouts. Improvement camel-jms - Add thread pool for handling timeout when doing request/reply and allow to configure this thread pool This allows people to define how many threads they want for handling timeouts, such as they can better handle burst of timeouts.
CAMEL-6435 Remove the obsolete 'transient' modifier from both the static/non-static SLF4J Logger fields. In many places within the Camel code base we can find static fields with transient modifier. Static fields are automatically transient, so the latter declaration is obsolete.We should clean the code base from the obsolete transient keywords. Improvement Remove the obsolete 'transient' modifier from both the static/non-static SLF4J Logger fields. In many places within the Camel code base we can find static fields with transient modifier. Static fields are automatically transient, so the latter declaration is obsolete.We should clean the code base from the obsolete transient keywords.
CAMEL-6431 camel-geocoder component A component to lookup geocodes and addresses. For example you can lookup lat/lng or reverse lookup. New Feature camel-geocoder component A component to lookup geocodes and addresses. For example you can lookup lat/lng or reverse lookup.
CAMEL-6428 Salesforce Component Submitting a new component for Salesforce supportSupports Salesforce REST (including blob field retrieval), Batch, and Streaming APIs New Feature Salesforce Component Submitting a new component for Salesforce supportSupports Salesforce REST (including blob field retrieval), Batch, and Streaming APIs
CAMEL-6426 When StartupListener is called, camel is still in starting, not started state ServiceSupport sets starting flag before calling doStart and clears it only after doStart exits. This means camelContext.getStatus in StartupListener is Starting, not Started. Improvement When StartupListener is called, camel is still in starting, not started state ServiceSupport sets starting flag before calling doStart and clears it only after doStart exits. This means camelContext.getStatus in StartupListener is Starting, not Started.
CAMEL-6425 Add pause operation to BacklogDebugger To kinda be like the pause button in IDEA / Eclipse debugger.So it acts like pausing all routing. But what we may do is to have all breakpoints activated as "internal" and when 1st hit, we have a "pause" and then release all those internal breakpoints.This makes it very easy to start debugging as you dont need to add a breakpoint and then wait for a message to arrive at it etc.When 1st hit it should go into single step mode, so you can step that hitted message. New Feature Add pause operation to BacklogDebugger To kinda be like the pause button in IDEA / Eclipse debugger.So it acts like pausing all routing. But what we may do is to have all breakpoints activated as "internal" and when 1st hit, we have a "pause" and then release all those internal breakpoints.This makes it very easy to start debugging as you dont need to add a breakpoint and then wait for a message to arrive at it etc.When 1st hit it should go into single step mode, so you can step that hitted message.
CAMEL-6424 camel-netty-http - Add support for basic auth It would be good if we have support for basic auth. Netty http codec does not offer this out of the box, so we may need to build our own and/or contribute to netty etc. New Feature camel-netty-http - Add support for basic auth It would be good if we have support for basic auth. Netty http codec does not offer this out of the box, so we may need to build our own and/or contribute to netty etc.
CAMEL-6422 Add tokenizeXML to ValueBuilder See SOhttp://stackoverflow.com/questions/16912959/camel-aggregationstrategy-after-tokenizexml/16913942?noredirect=1#comment24414010_16913942So we have body().tokenizeXML in the DSL. Improvement Add tokenizeXML to ValueBuilder See SOhttp://stackoverflow.com/questions/16912959/camel-aggregationstrategy-after-tokenizexml/16913942?noredirect=1#comment24414010_16913942So we have body().tokenizeXML in the DSL.
CAMEL-6419 Controlbus - Add stats action to get performance statics in XML So end users can get these stats easily by sending a message to the controlbus component, and get the stats back in XML format. New Feature Controlbus - Add stats action to get performance statics in XML So end users can get these stats easily by sending a message to the controlbus component, and get the stats back in XML format.
CAMEL-6418 camel-sql - Allow to configure separator when using # placeholder and values is taken from message body See nabblehttp://camel.465427.n5.nabble.com/Passing-a-list-of-parameters-in-SQL-endpoint-tp5732583.html Improvement camel-sql - Allow to configure separator when using # placeholder and values is taken from message body See nabblehttp://camel.465427.n5.nabble.com/Passing-a-list-of-parameters-in-SQL-endpoint-tp5732583.html
CAMEL-6417 camel-http4 - Only one instance of SSLContextParameters can be supported per component If people use 2 or more different instances of SSLContextParameters then this is not supported by HTTP4 component in its scheme registry.We need to validate that only one instance is used at most.If people really need 2+ different instances, then need to configure a new http4 component per different SSLContextParameters needed. Improvement camel-http4 - Only one instance of SSLContextParameters can be supported per component If people use 2 or more different instances of SSLContextParameters then this is not supported by HTTP4 component in its scheme registry.We need to validate that only one instance is used at most.If people really need 2+ different instances, then need to configure a new http4 component per different SSLContextParameters needed.
CAMEL-6415 camel-twitter - Support for the User Stream Endpoint Tweets from protected accounts can only be received on the user and site stream endpoints. It would be good to see this functionality added to the camel-twitter component so that protected tweets can be received by camel.The Hosebird Client could be used:https://github.com/twitter/hbc"If connecting to a userstream, use Twitter4jUserstreamClient. If making a sitestream connection, use Twitter4jSitestreamClient" New Feature camel-twitter - Support for the User Stream Endpoint Tweets from protected accounts can only be received on the user and site stream endpoints. It would be good to see this functionality added to the camel-twitter component so that protected tweets can be received by camel.The Hosebird Client could be used:https://github.com/twitter/hbc"If connecting to a userstream, use Twitter4jUserstreamClient. If making a sitestream connection, use Twitter4jSitestreamClient"
CAMEL-6407 Include message history in stacktraces from error handler, making it easier to know where the problem was See post on dev mailing listhttp://camel.465427.n5.nabble.com/HEADS-UP-Camel-routing-engine-dumps-message-history-when-exhausted-exception-is-logged-tp5733516.htmlThis allows us to dump stacktraces with details about how the message has been routed, (aka using the message history eip).An example could be{code}2013-05-30 17:27:56,342 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 0.447 seconds2013-05-30 17:27:56,357 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied2013-05-30 17:27:56,362 [ - seda://start] INFO  foo                            - Exchange[ExchangePattern:InOnly, BodyType:String, Body:Hello World]2013-05-30 17:27:56,363 [ - seda://start] INFO  bar                            - Exchange[ExchangePattern:InOnly, BodyType:String, Body:Hello World]2013-05-30 17:27:56,363 [ - seda://start] INFO  baz                            - Exchange[ExchangePattern:InOnly, BodyType:String, Body:Hello World]2013-05-30 17:27:56,366 [ - seda://start] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-davsclaus-air-lan-59318-1369927675648-0-1 on ExchangeId: ID-davsclaus-air-lan-59318-1369927675648-0-3). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: Forced to dump stacktraceMessage History--------------------------------------------------------------------------------------------------------------------------RouteId              ProcessorId          Processor                                                                       [route1            ] [to1               ] [log:foo                                                                       ][route1            ] [to2               ] [log:bar                                                                       ][route1            ] [to3               ] [log:baz                                                                       ][route1            ] [process1          ] [org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1@4591c994   ]Stacktrace--------------------------------------------------------------------------------------------------------------------------java.lang.IllegalArgumentException: Forced to dump stacktrace  at org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1.process(ReduceStacksNeededDuringRoutingTest.java:59)	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:389)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:185)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:185)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:293)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:202)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:149)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)	at java.lang.Thread.run(Thread.java:722){code} New Feature Include message history in stacktraces from error handler, making it easier to know where the problem was See post on dev mailing listhttp://camel.465427.n5.nabble.com/HEADS-UP-Camel-routing-engine-dumps-message-history-when-exhausted-exception-is-logged-tp5733516.htmlThis allows us to dump stacktraces with details about how the message has been routed, (aka using the message history eip).An example could be{code}2013-05-30 17:27:56,342 [main           ] INFO  DefaultCamelContext            - Apache Camel  (CamelContext: camel-1) started in 0.447 seconds2013-05-30 17:27:56,357 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://result] is satisfied2013-05-30 17:27:56,362 [ - seda://start] INFO  foo                            - Exchange[ExchangePattern:InOnly, BodyType:String, Body:Hello World]2013-05-30 17:27:56,363 [ - seda://start] INFO  bar                            - Exchange[ExchangePattern:InOnly, BodyType:String, Body:Hello World]2013-05-30 17:27:56,363 [ - seda://start] INFO  baz                            - Exchange[ExchangePattern:InOnly, BodyType:String, Body:Hello World]2013-05-30 17:27:56,366 [ - seda://start] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-davsclaus-air-lan-59318-1369927675648-0-1 on ExchangeId: ID-davsclaus-air-lan-59318-1369927675648-0-3). Exhausted after delivery attempt: 1 caught: java.lang.IllegalArgumentException: Forced to dump stacktraceMessage History--------------------------------------------------------------------------------------------------------------------------RouteId              ProcessorId          Processor                                                                       [route1            ] [to1               ] [log:foo                                                                       ][route1            ] [to2               ] [log:bar                                                                       ][route1            ] [to3               ] [log:baz                                                                       ][route1            ] [process1          ] [org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1@4591c994   ]Stacktrace--------------------------------------------------------------------------------------------------------------------------java.lang.IllegalArgumentException: Forced to dump stacktrace  at org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1.process(ReduceStacksNeededDuringRoutingTest.java:59)	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:389)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:185)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:185)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:293)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:202)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:149)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)	at java.lang.Thread.run(Thread.java:722){code}
CAMEL-6406 Add support to ObjectHelper.getException() for Java 1.7 Throwable.getSuppressed() Add support to ObjectHelper.getException() for Java 1.7 Throwable.getSuppressed()Now that exceptions can be suppressed in Java 1.7 Camel should be able to detect when running in a 1.7 JVM and use the additional suppressed Throwables when searching for specific exception types.  Improvement Add support to ObjectHelper.getException() for Java 1.7 Throwable.getSuppressed() Add support to ObjectHelper.getException() for Java 1.7 Throwable.getSuppressed()Now that exceptions can be suppressed in Java 1.7 Camel should be able to detect when running in a 1.7 JVM and use the additional suppressed Throwables when searching for specific exception types. 
CAMEL-6405 seda/vm - Discard messages if shutting down route Seehttp://stackoverflow.com/questions/16775863/how-to-quickly-stop-seda-in-camelIf you are stopping a seda route you may want to just discard the messages in the queue, eg purge the queue.Then the shutdown is faster, as its only the current in-flight messages. Improvement seda/vm - Discard messages if shutting down route Seehttp://stackoverflow.com/questions/16775863/how-to-quickly-stop-seda-in-camelIf you are stopping a seda route you may want to just discard the messages in the queue, eg purge the queue.Then the shutdown is faster, as its only the current in-flight messages.
CAMEL-6403 Add support for UnitOfWork per request When using a {{camel-jetty}} endpoint, the {{UnitOfWork}} is not being managed by the servlet handling the request but by the Camel route that's being invoked.  This means that some resources have already been removed/cleaned up when the servlet is writing the response, e.g. files for cached streams have already removed before the servlet gets a chance to read from them.It would be nice to have an option available to configure the servlet itself to handle the unit of work and mark it {{done}} after the HTTP response has been written.  That way, the unit of work can be matched up with the actual HTTP request. Improvement Add support for UnitOfWork per request When using a {{camel-jetty}} endpoint, the {{UnitOfWork}} is not being managed by the servlet handling the request but by the Camel route that's being invoked.  This means that some resources have already been removed/cleaned up when the servlet is writing the response, e.g. files for cached streams have already removed before the servlet gets a chance to read from them.It would be nice to have an option available to configure the servlet itself to handle the unit of work and mark it {{done}} after the HTTP response has been written.  That way, the unit of work can be matched up with the actual HTTP request.
CAMEL-6401 Can't configure request timeout in Jetty-HTTP-Component I found no way to configure JettyContextExchange.setTimeout(long value) in HttpExchange. I would like to do asynchronous HTTP requests with huge response timeouts. Improvement Can't configure request timeout in Jetty-HTTP-Component I found no way to configure JettyContextExchange.setTimeout(long value) in HttpExchange. I would like to do asynchronous HTTP requests with huge response timeouts.
CAMEL-6397 camel-restlet - Allow to configure reuseAddress option See nabblehttp://camel.465427.n5.nabble.com/jetty-http-dynamic-uri-in-consumer-from-tp5732691.htmlAndhttp://restlet.org/learn/javadocs/2.1/jse/engine/org/restlet/engine/connector/ServerConnectionHelper.html Improvement camel-restlet - Allow to configure reuseAddress option See nabblehttp://camel.465427.n5.nabble.com/jetty-http-dynamic-uri-in-consumer-from-tp5732691.htmlAndhttp://restlet.org/learn/javadocs/2.1/jse/engine/org/restlet/engine/connector/ServerConnectionHelper.html
CAMEL-6392 ResourceEndpoint duplicated between camel-core and camel-spring. Should be removed from camel-spring Causes the maven enforcer plugin to fail building a project; citing that ResourceEndpoint is duplicated between camel-core and camel-spring. Task ResourceEndpoint duplicated between camel-core and camel-spring. Should be removed from camel-spring Causes the maven enforcer plugin to fail building a project; citing that ResourceEndpoint is duplicated between camel-core and camel-spring.
CAMEL-6387 Implement JndiRegistry.findByTypeWithName() and findByType() using javax.naming.Context.list("") Implement JndiRegistry.findByTypeWithName() and findByType() using javax.naming.Context.list(""). Improvement Implement JndiRegistry.findByTypeWithName() and findByType() using javax.naming.Context.list("") Implement JndiRegistry.findByTypeWithName() and findByType() using javax.naming.Context.list("").
CAMEL-6384 Add debugger mbean for tooling This allows tooling such as karaf commands / others to do Camel EIP debugging.We have org.apache.camel.spi.Debugger for SPI. What we need is a JMX layer to make it friendly for tooling. New Feature Add debugger mbean for tooling This allows tooling such as karaf commands / others to do Camel EIP debugging.We have org.apache.camel.spi.Debugger for SPI. What we need is a JMX layer to make it friendly for tooling.
CAMEL-6383 Disable tracer mbean/wrapped processor if not explicit enabled on camel context We should not include tracer mbean/wrapped processor out of the box. As that just adds longer stacktraces and unnessasary processor wrappings.If people want to use the tracer they should explicit enable it on CamelContext by setting tracing=true. Improvement Disable tracer mbean/wrapped processor if not explicit enabled on camel context We should not include tracer mbean/wrapped processor out of the box. As that just adds longer stacktraces and unnessasary processor wrappings.If people want to use the tracer they should explicit enable it on CamelContext by setting tracing=true.
CAMEL-6382 Current implementation of Camel-AWS-SQS does not allow to make use of other implementations of AmazonSQS  Current implementation of Camel-AWS-SQS does not allow to make use of other implementations of AmazonSQS. For example AmazonSQSBufferedAsyncClient can't be used in current for of implementation. New Feature Current implementation of Camel-AWS-SQS does not allow to make use of other implementations of AmazonSQS  Current implementation of Camel-AWS-SQS does not allow to make use of other implementations of AmazonSQS. For example AmazonSQSBufferedAsyncClient can't be used in current for of implementation.
CAMEL-6381 camel-bindy - Add option to tell bindy that the last field is till end of line Seehttp://stackoverflow.com/questions/16615826/camel-bindy-csv-with-field-concatinationSometimes the CSV file has data at the end which can be arbitrary length and may even contain comma or other value, eg a log message or something like that.We would need an option you can set on the @DataField to tell bindy to just grab the data till end of line as is. Improvement camel-bindy - Add option to tell bindy that the last field is till end of line Seehttp://stackoverflow.com/questions/16615826/camel-bindy-csv-with-field-concatinationSometimes the CSV file has data at the end which can be arbitrary length and may even contain comma or other value, eg a log message or something like that.We would need an option you can set on the @DataField to tell bindy to just grab the data till end of line as is.
CAMEL-6378 Java DSL - Using transacted and onException in same route - Validate that onException is first When you use Java DSL then the order how you specify transacted / policy / onException matter. In XML DSL (we have a chance to fix this internally in Camel, so the order there doesnt not matter as much).We should add validation to the Java DSL so people can configure this correctly. Otherwise we just have too much on our plate to support any kind of order of all these cross cutting functionality being used in the DSL.Here is an unit test that required a chance to work correctly (eg onException should be first){code}--- a/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionT+++ b/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionT@@ -28,22 +28,22 @@ public class TransactionalClientDataSourceTransactedWithLocalOnExceptionTest ext         return new SpringRouteBuilder() {             public void configure() throws Exception {                 from("direct:okay")-                    .transacted()                     // use local on exception                     .onException(IllegalArgumentException.class)                         .handled(false)                         .to("mock:error")                     .end()+                    .transacted()                     .setBody(constant("Tiger in Action")).beanRef("bookService")                     .setBody(constant("Elephant in Action")).beanRef("bookService");                 from("direct:fail")-                    .transacted()                     // use local on exception                     .onException(IllegalArgumentException.class)                         .handled(false)                         .to("mock:error")                     .end()+                    .transacted()                     .setBody(constant("Tiger in Action")).beanRef("bookService")                     .setBody(constant("Donkey in Action")).beanRef("bookService");{code} Improvement Java DSL - Using transacted and onException in same route - Validate that onException is first When you use Java DSL then the order how you specify transacted / policy / onException matter. In XML DSL (we have a chance to fix this internally in Camel, so the order there doesnt not matter as much).We should add validation to the Java DSL so people can configure this correctly. Otherwise we just have too much on our plate to support any kind of order of all these cross cutting functionality being used in the DSL.Here is an unit test that required a chance to work correctly (eg onException should be first){code}--- a/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionT+++ b/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionT@@ -28,22 +28,22 @@ public class TransactionalClientDataSourceTransactedWithLocalOnExceptionTest ext         return new SpringRouteBuilder() {             public void configure() throws Exception {                 from("direct:okay")-                    .transacted()                     // use local on exception                     .onException(IllegalArgumentException.class)                         .handled(false)                         .to("mock:error")                     .end()+                    .transacted()                     .setBody(constant("Tiger in Action")).beanRef("bookService")                     .setBody(constant("Elephant in Action")).beanRef("bookService");                 from("direct:fail")-                    .transacted()                     // use local on exception                     .onException(IllegalArgumentException.class)                         .handled(false)                         .to("mock:error")                     .end()+                    .transacted()                     .setBody(constant("Tiger in Action")).beanRef("bookService")                     .setBody(constant("Donkey in Action")).beanRef("bookService");{code}
CAMEL-6377 Optimize routing engine to reduce stack frames in use during routing and reduce callbacks We can optimize the Camel routing engine internally, and redue the need for wrapping processors (those internally used for cross cutting functionality) where they would wrap each other one by one; which then results in larger call stacks during routing.This also shows to end users when stacktraces is being logged etc, as they tend to be a bit longer with many internal calls.Though the JVM optimizes this at runtime as it can inline the calls and whatnot. But the stacktraces is still shown expanded. Improvement Optimize routing engine to reduce stack frames in use during routing and reduce callbacks We can optimize the Camel routing engine internally, and redue the need for wrapping processors (those internally used for cross cutting functionality) where they would wrap each other one by one; which then results in larger call stacks during routing.This also shows to end users when stacktraces is being logged etc, as they tend to be a bit longer with many internal calls.Though the JVM optimizes this at runtime as it can inline the calls and whatnot. But the stacktraces is still shown expanded.
CAMEL-6372 camel-krati - KratiConsumer should support maxMessagesPerPoll Seehttp://camel.465427.n5.nabble.com/Camel-KratiConsumer-throw-OutOfMemory-tp5732669.htmlThis can be used for people to limit the poll so we wont read too much data in one poll. Improvement camel-krati - KratiConsumer should support maxMessagesPerPoll Seehttp://camel.465427.n5.nabble.com/Camel-KratiConsumer-throw-OutOfMemory-tp5732669.htmlThis can be used for people to limit the poll so we wont read too much data in one poll.
CAMEL-6368 JDBC component - Add option to dictate if output is object, map, list See CAMEL-6366We need a similar option for the camel-jdbc component as well. Improvement JDBC component - Add option to dictate if output is object, map, list See CAMEL-6366We need a similar option for the camel-jdbc component as well.
CAMEL-6366 SQL component - Add option to dictate if output is list, object or map When using the sql component, the output is always a List<Map>.It would be nice if you could configure an option to say its a - selectForObject- selectForList- selectForMapLike MyBatis can do.Also we can consider having a way to store the output on a header instead of altering the body.  Improvement SQL component - Add option to dictate if output is list, object or map When using the sql component, the output is always a List<Map>.It would be nice if you could configure an option to say its a - selectForObject- selectForList- selectForMapLike MyBatis can do.Also we can consider having a way to store the output on a header instead of altering the body. 
CAMEL-6363 Allow to specify the string-template delimiters In the process of upgrading to Camel 2.11.0 we discovered a breaking change that wasn't documented in the change log: StringTemplate now uses {{<variable>}} instead of {{$variable$}}. This is due to the upgrade to a StringTemplate 4.x release.Fortunately it's possible to configure in StringTemplate the delimiters to use. Unfortunately the {{camel-stringtemplate}} endpoint doesn't allow to specify them.You'll find attached a patch that fill this gap.Aside note: the [camel-stringtemplate documentation page|http://camel.apache.org/stringtemplate.html] is out of date and still uses the {{$variable$}} format Improvement Allow to specify the string-template delimiters In the process of upgrading to Camel 2.11.0 we discovered a breaking change that wasn't documented in the change log: StringTemplate now uses {{<variable>}} instead of {{$variable$}}. This is due to the upgrade to a StringTemplate 4.x release.Fortunately it's possible to configure in StringTemplate the delimiters to use. Unfortunately the {{camel-stringtemplate}} endpoint doesn't allow to specify them.You'll find attached a patch that fill this gap.Aside note: the [camel-stringtemplate documentation page|http://camel.apache.org/stringtemplate.html] is out of date and still uses the {{$variable$}} format
CAMEL-6359 camel-bindy - new EnumFormat The patch adds a new format for the camel-bindy component, making it possible to annotate enumeration types with @DataField, i.e.:{code:java}@CsvRecord(separator=";")public class Test {...    @DataField(pos = 12)    private Colour colour;...}{code}where Colour is an arbitrary enum type.The marshalling/unmarshalling is based on the name() and valueOf() methods.I have extended already existing unit test BindyCarQuoteAndCommaDelimiterTest to test the behavior. New Feature camel-bindy - new EnumFormat The patch adds a new format for the camel-bindy component, making it possible to annotate enumeration types with @DataField, i.e.:{code:java}@CsvRecord(separator=";")public class Test {...    @DataField(pos = 12)    private Colour colour;...}{code}where Colour is an arbitrary enum type.The marshalling/unmarshalling is based on the name() and valueOf() methods.I have extended already existing unit test BindyCarQuoteAndCommaDelimiterTest to test the behavior.
CAMEL-6357 Routing engine - Preparing exchange should cater for end user by mistake copy headers the wrong way See nabblehttp://camel.465427.n5.nabble.com/Route-with-doTry-calling-service-does-not-have-exchange-in-exchange-out-does-not-work-tp5732293.htmlWe should let Camel detect that the headers may be the same instance and avoid clearing the old headers when preparing exchanges during routing.Also added a note on javadoc api of Message to instruct the best practice for copying headers. Improvement Routing engine - Preparing exchange should cater for end user by mistake copy headers the wrong way See nabblehttp://camel.465427.n5.nabble.com/Route-with-doTry-calling-service-does-not-have-exchange-in-exchange-out-does-not-work-tp5732293.htmlWe should let Camel detect that the headers may be the same instance and avoid clearing the old headers when preparing exchanges during routing.Also added a note on javadoc api of Message to instruct the best practice for copying headers.
CAMEL-6355 File consumer - Check in progress eager as well to avoid any very slight chance for duplicate pickup See nabblehttp://camel.465427.n5.nabble.com/GenericFileConsumer-Idempotent-and-InProgress-repositories-tp5732237.html Improvement File consumer - Check in progress eager as well to avoid any very slight chance for duplicate pickup See nabblehttp://camel.465427.n5.nabble.com/GenericFileConsumer-Idempotent-and-InProgress-repositories-tp5732237.html
CAMEL-6354 camel-shiro - Make it easier to configure username and password for subject Currently you have to use the org.apache.camel.component.shiro.security.ShiroSecurityTokenInjector which is cumbersome to use.Just look at the unit tests in org.apache.camel.itest.shiro.ShiroOverJmsTest in tests/camel-itest.We should allow people to set a header with the username and password, and then let Shrio detect these and use them for creating the security token. Improvement camel-shiro - Make it easier to configure username and password for subject Currently you have to use the org.apache.camel.component.shiro.security.ShiroSecurityTokenInjector which is cumbersome to use.Just look at the unit tests in org.apache.camel.itest.shiro.ShiroOverJmsTest in tests/camel-itest.We should allow people to set a header with the username and password, and then let Shrio detect these and use them for creating the security token.
CAMEL-6353 camel-shiro - Add base64 option to allow transferring token over JMS etc See nabblehttp://camel.465427.n5.nabble.com/How-can-Shiro-be-used-with-camel-to-limit-access-to-a-route-tp5521623p5732069.html New Feature camel-shiro - Add base64 option to allow transferring token over JMS etc See nabblehttp://camel.465427.n5.nabble.com/How-can-Shiro-be-used-with-camel-to-limit-access-to-a-route-tp5521623p5732069.html
CAMEL-6351 camel-blueprint - Should support using placeholder namespace for using property placeholders on any type in the DSL We had supported this for a while with Spring, see section _Using property placeholders for any kind of attribute in the XML DSL_ at:http://camel.apache.org/using-propertyplaceholder.htmlWe should add support for this with blueprint as well. Though it requires that we enlist the placeholder as a namespace so blueprint knows about it. Improvement camel-blueprint - Should support using placeholder namespace for using property placeholders on any type in the DSL We had supported this for a while with Spring, see section _Using property placeholders for any kind of attribute in the XML DSL_ at:http://camel.apache.org/using-propertyplaceholder.htmlWe should add support for this with blueprint as well. Though it requires that we enlist the placeholder as a namespace so blueprint knows about it.
CAMEL-6346 Camel blueprint main should support to set the ConfigAdmin persistent information Camel blueprint main can be used to load the camel context from blueprint within the camel run maven plugin. And it is useful if we support set the configAdmin persistent information from the maven plugin.  Improvement Camel blueprint main should support to set the ConfigAdmin persistent information Camel blueprint main can be used to load the camel context from blueprint within the camel run maven plugin. And it is useful if we support set the configAdmin persistent information from the maven plugin. 
CAMEL-6345 CamelContext - Languages should be added as servies and stopped when stopping Camel Like we do for components / endpoints etc. We should do that for languages as well, this allows people to uses Service for their language impls to do custom logic for start|stop.Likewise we should clear the map of languages when stopping camel like we do for components. Improvement CamelContext - Languages should be added as servies and stopped when stopping Camel Like we do for components / endpoints etc. We should do that for languages as well, this allows people to uses Service for their language impls to do custom logic for start|stop.Likewise we should clear the map of languages when stopping camel like we do for components.
CAMEL-6344 camel-bean-validator - Upgrade to latest hibernate validator We can use the hibernate validator JARs as is, as its an OSGi bundle now. Task camel-bean-validator - Upgrade to latest hibernate validator We can use the hibernate validator JARs as is, as its an OSGi bundle now.
CAMEL-6343 Stax support for toggling namespace awareness There is an issue with the default stax XMLEventReader that makes unmarshalling xml's result in null values when the xml has a top-level namespace that defines a xmltype that does not match the tag name of the object to be unmarshalled. With how camel-stax is written, the only way around it is to change the source xml file, which seems like an unnecessary harsh penalty for all the quirky xml files out there. Therefore, I propose a solution to have the xml reader ignore namespaces and thereby making the reader a lot more flexible.With this feature, someone can just add a boolean to the stax method:.split(stax(Product.class, false)) New Feature Stax support for toggling namespace awareness There is an issue with the default stax XMLEventReader that makes unmarshalling xml's result in null values when the xml has a top-level namespace that defines a xmltype that does not match the tag name of the object to be unmarshalled. With how camel-stax is written, the only way around it is to change the source xml file, which seems like an unnecessary harsh penalty for all the quirky xml files out there. Therefore, I propose a solution to have the xml reader ignore namespaces and thereby making the reader a lot more flexible.With this feature, someone can just add a boolean to the stax method:.split(stax(Product.class, false))
CAMEL-6340 Improve Groovy performance We noticed some performance issues with the execution of Groovy expression. In the {{GroovyExpression}} the script is parsed 2 times at each evaluation. You'll find attached a patch that caches the parsed-version of the scripts.We did some performance tests with the following definition:{noformat}from("direct:start")    .loop(10000)    .setBody(new GroovyExpression("request.body + request.getHeader('CamelLoopIndex')"))    .to("mock:ignore");{noformat}We took the average of 5 executions (without the first one):|| use case || duration ||| default, no cache | 52690ms || patched, with cache | 1017ms |It's more than 50 times faster which is always nice to have Improvement Improve Groovy performance We noticed some performance issues with the execution of Groovy expression. In the {{GroovyExpression}} the script is parsed 2 times at each evaluation. You'll find attached a patch that caches the parsed-version of the scripts.We did some performance tests with the following definition:{noformat}from("direct:start")    .loop(10000)    .setBody(new GroovyExpression("request.body + request.getHeader('CamelLoopIndex')"))    .to("mock:ignore");{noformat}We took the average of 5 executions (without the first one):|| use case || duration ||| default, no cache | 52690ms || patched, with cache | 1017ms |It's more than 50 times faster which is always nice to have
CAMEL-6339 XML Signature Component in camel/components/xmlsecurity Hello, I have created a component for XML signature. I put it into the component xmlsecurity. The component has the name xmlsecurity. In the attachments you will find path_file.txt and CamelComponentxmlsecurity.html. The html file contains a description of the endpoint uris.Regards Franz---------------------Franz ForsthoferSAP AGe-mail: franz.forsthofer@sap.com New Feature XML Signature Component in camel/components/xmlsecurity Hello, I have created a component for XML signature. I put it into the component xmlsecurity. The component has the name xmlsecurity. In the attachments you will find path_file.txt and CamelComponentxmlsecurity.html. The html file contains a description of the endpoint uris.Regards Franz---------------------Franz ForsthoferSAP AGe-mail: franz.forsthofer@sap.com
CAMEL-6338 camel-cdi shouldn't use deltapsike bean manager provider in the CamelExtension In an cdi extension the bean manager is injected so camel cdi shouldn't use deltaspike for it.A nice side effect of it will be it will remove WARNINGThe only trick it will need will be to give org.apache.camel.cdi.CdiBeanRegistry the bean manager to use. A thread local or delegate (registry.getDelegate()) falling back to DS if null should be fine. It just needs to be resetted after extension startup. Improvement camel-cdi shouldn't use deltapsike bean manager provider in the CamelExtension In an cdi extension the bean manager is injected so camel cdi shouldn't use deltaspike for it.A nice side effect of it will be it will remove WARNINGThe only trick it will need will be to give org.apache.camel.cdi.CdiBeanRegistry the bean manager to use. A thread local or delegate (registry.getDelegate()) falling back to DS if null should be fine. It just needs to be resetted after extension startup.
CAMEL-6337 camel-cdi dependencies are wrong for most cases Hi,because of its main camel-cdi import:<exclusions> <!-- provided by the container -->        <exclusion>          <groupId>org.apache.geronimo.specs</groupId>          <artifactId>geronimo-atinject_1.0_spec</artifactId>        </exclusion>        <exclusion>          <groupId>org.apache.geronimo.specs</groupId>          <artifactId>geronimo-jcdi_1.0_spec</artifactId>        </exclusion>        <exclusion>          <groupId>org.apache.geronimo.specs</groupId>          <artifactId>geronimo-interceptor_1.1_spec</artifactId>        </exclusion>        <exclusion>          <groupId>com.sun.xml.bind</groupId>          <artifactId>jaxb-impl</artifactId>        </exclusion>      </exclusionsIt is wrong since all containers (embedded or not) will provide it. The only case where it is relevant is the main and IMO it is better to use scope provided and ask for inclusion when needed (main). The main case shouldn't drive any dependency. Improvement camel-cdi dependencies are wrong for most cases Hi,because of its main camel-cdi import:<exclusions> <!-- provided by the container -->        <exclusion>          <groupId>org.apache.geronimo.specs</groupId>          <artifactId>geronimo-atinject_1.0_spec</artifactId>        </exclusion>        <exclusion>          <groupId>org.apache.geronimo.specs</groupId>          <artifactId>geronimo-jcdi_1.0_spec</artifactId>        </exclusion>        <exclusion>          <groupId>org.apache.geronimo.specs</groupId>          <artifactId>geronimo-interceptor_1.1_spec</artifactId>        </exclusion>        <exclusion>          <groupId>com.sun.xml.bind</groupId>          <artifactId>jaxb-impl</artifactId>        </exclusion>      </exclusionsIt is wrong since all containers (embedded or not) will provide it. The only case where it is relevant is the main and IMO it is better to use scope provided and ask for inclusion when needed (main). The main case shouldn't drive any dependency.
CAMEL-6334 camel-quartz - Add JMX MBean for CronScheduledRoutePolicy so people can change it at runtime Seehttp://stackoverflow.com/questions/16388798/camel-change-route-policy-at-runtime-via-jmxWe should enlist the route policies as JMX MBeans so people can adjust it at runtime. Though there may be a bit tricker to adjust as we would need to tell quartz about the change so it can re-trigger accordingly.Also we should look into if quartz has any JMX stats it can expose so we can make this out of the box / easier to enable. It would be nice to see some quartz stats of its scheduler etc. New Feature camel-quartz - Add JMX MBean for CronScheduledRoutePolicy so people can change it at runtime Seehttp://stackoverflow.com/questions/16388798/camel-change-route-policy-at-runtime-via-jmxWe should enlist the route policies as JMX MBeans so people can adjust it at runtime. Though there may be a bit tricker to adjust as we would need to tell quartz about the change so it can re-trigger accordingly.Also we should look into if quartz has any JMX stats it can expose so we can make this out of the box / easier to enable. It would be nice to see some quartz stats of its scheduler etc.
CAMEL-6332 and/or operator support in twitter keywords search Extend the twitter component to support and/or operator in keywords search.See http://camel.465427.n5.nabble.com/using-or-operator-in-twitter-keywords-search-td5731873.html Improvement and/or operator support in twitter keywords search Extend the twitter component to support and/or operator in keywords search.See http://camel.465427.n5.nabble.com/using-or-operator-in-twitter-keywords-search-td5731873.html
CAMEL-6331 camel-netty - Loading key store and trust stores should support classpath as well The options keyStoreFile and trustStoreFile is currently java.io.File based.We should use the resource loader API in Camel so we can load from classpath as well. Improvement camel-netty - Loading key store and trust stores should support classpath as well The options keyStoreFile and trustStoreFile is currently java.io.File based.We should use the resource loader API in Camel so we can load from classpath as well.
CAMEL-6330 Control Bus - Add suspend and resume actions We have start and stop actions. But we need suspend and resume as well. Improvement Control Bus - Add suspend and resume actions We have start and stop actions. But we need suspend and resume as well.
CAMEL-6329 File consumer - Allow to change directory using JMX People may want to change a Camel route to pickup files from another directory. We should allow to re-configure this at runtime more easily with a JMX operation on the FileConsumer.The trick is possible that we should only allow to change it if the consumer has been suspended/stopped, so we don't change it during running. Though an alternative it to remember the change, and then only apply it at next poll. Then we can possible change it without the needed for suspend/stop first.See nabblehttp://camel.465427.n5.nabble.com/How-to-dynamically-configure-directory-on-file-consumer-tp5731811.html Improvement File consumer - Allow to change directory using JMX People may want to change a Camel route to pickup files from another directory. We should allow to re-configure this at runtime more easily with a JMX operation on the FileConsumer.The trick is possible that we should only allow to change it if the consumer has been suspended/stopped, so we don't change it during running. Though an alternative it to remember the change, and then only apply it at next poll. Then we can possible change it without the needed for suspend/stop first.See nabblehttp://camel.465427.n5.nabble.com/How-to-dynamically-configure-directory-on-file-consumer-tp5731811.html
CAMEL-6327 camel-netty-http - Netty based HTTP component There is people wanting to use Netty instead of Jetty / Http Client as their HTTP server/client.We should do a camel-netty-http component that extends camel-netty, and setup for http codec and transport. New Feature camel-netty-http - Netty based HTTP component There is people wanting to use Netty instead of Jetty / Http Client as their HTTP server/client.We should do a camel-netty-http component that extends camel-netty, and setup for http codec and transport.
CAMEL-6325 Enhance aggregator pattern by discardOnFailure() route directive see camel users mailinglist, thread "AggregationStrategy and wrong sequence order"When an error occurs in the AggregationStrategy and an exception is thrown, the old aggregates stay in the aggregator for the correlation key. But sometimes the old aggregates shall be discarded, when one part is incorrect.So I recommend to enable a flag 'discardOnFailure()' in the route like discardOnCompletionTimeout(). Wish Enhance aggregator pattern by discardOnFailure() route directive see camel users mailinglist, thread "AggregationStrategy and wrong sequence order"When an error occurs in the AggregationStrategy and an exception is thrown, the old aggregates stay in the aggregator for the correlation key. But sometimes the old aggregates shall be discarded, when one part is incorrect.So I recommend to enable a flag 'discardOnFailure()' in the route like discardOnCompletionTimeout().
CAMEL-6324 Camel karaf command to show type converter utilization stats If type converter util stats is enabled, we could make a karaf command that can show the statshttp://camel.apache.org/type-converter.htmlThis can aid during development / testing to see if you are using the type converters optimally. As too many misses indicate something to be improved. New Feature Camel karaf command to show type converter utilization stats If type converter util stats is enabled, we could make a karaf command that can show the statshttp://camel.apache.org/type-converter.htmlThis can aid during development / testing to see if you are using the type converters optimally. As too many misses indicate something to be improved.
CAMEL-6321 Moving logic out of getTypeConverter TypeConverter is never added as a service if we use the method setTypeConverter(). Used through camel-guice you had expect this service to be active without additional instruction.See : http://camel.465427.n5.nabble.com/Ambiguity-in-DefaultCamelContext-with-TypeConverter-td5731480.html Improvement Moving logic out of getTypeConverter TypeConverter is never added as a service if we use the method setTypeConverter(). Used through camel-guice you had expect this service to be active without additional instruction.See : http://camel.465427.n5.nabble.com/Ambiguity-in-DefaultCamelContext-with-TypeConverter-td5731480.html
CAMEL-6318 File consumer - Do not call contains on idempotent repository if its a directory See nabblehttp://camel.465427.n5.nabble.com/GenericFileConsumer-and-IdempotentRepository-tp5731468.htmlWe should not call the contains method as that is only for files. So if its a directory then we should just skip that check. Improvement File consumer - Do not call contains on idempotent repository if its a directory See nabblehttp://camel.465427.n5.nabble.com/GenericFileConsumer-and-IdempotentRepository-tp5731468.htmlWe should not call the contains method as that is only for files. So if its a directory then we should just skip that check.
CAMEL-6316 jaxb data format - Should marshal to String instead of byte[] When marshalling to XML then it would be best if we use a String type instead of byte[].See nabblehttp://camel.465427.n5.nabble.com/JAXB-marshal-generates-byte-array-instead-of-String-tp5715174.html Improvement jaxb data format - Should marshal to String instead of byte[] When marshalling to XML then it would be best if we use a String type instead of byte[].See nabblehttp://camel.465427.n5.nabble.com/JAXB-marshal-generates-byte-array-instead-of-String-tp5715174.html
CAMEL-6315 Remove camel-scala29 from next release We should remove the old camel-scala29 module. And then we can upgrade the source code in camel-scala to use the Scala 2.10 apis, which are currently marked as deprecated Task Remove camel-scala29 from next release We should remove the old camel-scala29 module. And then we can upgrade the source code in camel-scala to use the Scala 2.10 apis, which are currently marked as deprecated
CAMEL-6314 cannot use camel-cxf and camel-jetty at the same time due to dependency problem camel-cxf-2.11 depends on cxf-2.7.4.cxf-rt-transports-http-jetty-2.7.4 depends on jetty-server-8.1.7camel-jetty depends on jetty-server-7.6.8.So using both a cxf:bean route and a jetty route results in a java.lang.NoSuchMethodError: org.eclipse.jetty.server.Request.getDispatcherType()Lorg/eclipse/jetty/server/DispatcherType; Task cannot use camel-cxf and camel-jetty at the same time due to dependency problem camel-cxf-2.11 depends on cxf-2.7.4.cxf-rt-transports-http-jetty-2.7.4 depends on jetty-server-8.1.7camel-jetty depends on jetty-server-7.6.8.So using both a cxf:bean route and a jetty route results in a java.lang.NoSuchMethodError: org.eclipse.jetty.server.Request.getDispatcherType()Lorg/eclipse/jetty/server/DispatcherType;
CAMEL-6310 BlueprintCamelContext start() method should setup the TCCL In most time BlueprintCamelContext is started by calling the maybeStart(), but if we want to start the BlueprintCamelContext from outside we need to start() method to be able to setup the right TCCL. Improvement BlueprintCamelContext start() method should setup the TCCL In most time BlueprintCamelContext is started by calling the maybeStart(), but if we want to start the BlueprintCamelContext from outside we need to start() method to be able to setup the right TCCL.
CAMEL-6308 ScheduledPollConsumer.startScheduler() access type should be "public", not "protected" There are frequent requirements (as I read from the mail list) to be able to alter the polling behavior of Consumers based on ScheduledPollConsumer, for example when polling should start and stop. To customize when polling should start, the Endpoint can be configured with "startScheduler=false", but then how can we programatically start it without using reflection to override the "protected" access of startScheduler()?  It seems to me that if the option, "startScheduler=false" is implemented, then the complimentary API, ScheduledPollConsumer.startScheduler() should be "public".  Improvement ScheduledPollConsumer.startScheduler() access type should be "public", not "protected" There are frequent requirements (as I read from the mail list) to be able to alter the polling behavior of Consumers based on ScheduledPollConsumer, for example when polling should start and stop. To customize when polling should start, the Endpoint can be configured with "startScheduler=false", but then how can we programatically start it without using reflection to override the "protected" access of startScheduler()?  It seems to me that if the option, "startScheduler=false" is implemented, then the complimentary API, ScheduledPollConsumer.startScheduler() should be "public". 
CAMEL-6303 "Broken" links from http://camel.apache.org/ If you click at [1] from [2], the displayed page is empty. It's the same for all other blog links.We had the same issue in the past and Dan fixed it manually. I think there is an issue in the Confluence WIKI exporter classes at [3].[1] http://camel.apache.org/2013/04/22/apache-camel-2110-released.html[2] http://camel.apache.org/[3] http://svn.apache.org/repos/asf/cxf/web/src/main/java/org/apache/cxf/cwikiBest,Christian Task "Broken" links from http://camel.apache.org/ If you click at [1] from [2], the displayed page is empty. It's the same for all other blog links.We had the same issue in the past and Dan fixed it manually. I think there is an issue in the Confluence WIKI exporter classes at [3].[1] http://camel.apache.org/2013/04/22/apache-camel-2110-released.html[2] http://camel.apache.org/[3] http://svn.apache.org/repos/asf/cxf/web/src/main/java/org/apache/cxf/cwikiBest,Christian
CAMEL-6301 Route and CamelContext MBean - Add reset method that also reset all its processors If you want to reset all the jmx performance stats for a route(s) then you would need to do this manually on each route and processor. We should have a single method for people to use that does this easily. Improvement Route and CamelContext MBean - Add reset method that also reset all its processors If you want to reset all the jmx performance stats for a route(s) then you would need to do this manually on each route and processor. We should have a single method for people to use that does this easily.
CAMEL-6299 ServiceMBean - Should have an id so its easy to spot what the service is Services in Camel such as default inflight registry and others should have an id attribute, with their last part of mbean name. That makes it easier to see what the mbean is, when you list its attributes.Also helps differentiate the services from each other. Improvement ServiceMBean - Should have an id so its easy to spot what the service is Services in Camel such as default inflight registry and others should have an id attribute, with their last part of mbean name. That makes it easier to see what the mbean is, when you list its attributes.Also helps differentiate the services from each other.
CAMEL-6296 Support httpConnectionManager.* parameters on Camel-Http (HttpClient3) httpConnectionManager.* parameters are not supported for HttpClient3 on Camel-Http component at least for version of camel 2.9.4.Here is a patch that provides support for httpConnectionManager.* parameters support.There is no test case provided, but a patch. Improvement Support httpConnectionManager.* parameters on Camel-Http (HttpClient3) httpConnectionManager.* parameters are not supported for HttpClient3 on Camel-Http component at least for version of camel 2.9.4.Here is a patch that provides support for httpConnectionManager.* parameters support.There is no test case provided, but a patch.
CAMEL-6294 StreamCache doesn't work as expected The following Unittests fail:{code}package com.sap.camel.util;import java.io.InputStream;import junit.framework.Assert;import org.apache.camel.CamelContext;import org.apache.camel.Exchange;import org.apache.camel.Message;import org.apache.camel.converter.stream.CachedOutputStream;import org.apache.camel.impl.DefaultCamelContext;import org.apache.camel.impl.DefaultExchange;import org.testng.annotations.Test;public class StreamCacheBugs {		private CamelContext context;	public void setUp() {				context = new DefaultCamelContext();	}	@Test	public void multipleConvertionsYielsToEmptyBody() throws Exception {		Exchange exchange = new DefaultExchange(context);		Message msg = exchange.getIn();		CachedOutputStream out = new CachedOutputStream(exchange);		out.write("Hello World".getBytes());		msg.setBody(out.getStreamCache());		Assert.assertEquals(msg.getBody(String.class), "Hello World");		Assert.assertEquals(msg.getBody(String.class), "Hello World");	}	@Test	public void closingInputStreamYieldsToException() throws Exception {		Exchange exchange = new DefaultExchange(context);		Message msg = exchange.getIn();		CachedOutputStream out = new CachedOutputStream(exchange);		for ( int i = 0 ; i < 10000; i++) out.write("0123456789".getBytes());		msg.setBody(out.getStreamCache());		InputStream in = msg.getBody(InputStream.class);		in.read();		in.close();		msg.getBody(String.class);	}		@Test	public void cachedOutputStreamsShouldBeClosable() throws Exception {		Exchange exchange = new DefaultExchange(context);		Message msg = exchange.getIn();		CachedOutputStream out = new CachedOutputStream(exchange);		for ( int i = 0 ; i < 10000; i++) out.write("0123456789".getBytes());		msg.setBody(out.getStreamCache());		out.close();		msg.getBody(String.class);	}}{code} Improvement StreamCache doesn't work as expected The following Unittests fail:{code}package com.sap.camel.util;import java.io.InputStream;import junit.framework.Assert;import org.apache.camel.CamelContext;import org.apache.camel.Exchange;import org.apache.camel.Message;import org.apache.camel.converter.stream.CachedOutputStream;import org.apache.camel.impl.DefaultCamelContext;import org.apache.camel.impl.DefaultExchange;import org.testng.annotations.Test;public class StreamCacheBugs {		private CamelContext context;	public void setUp() {				context = new DefaultCamelContext();	}	@Test	public void multipleConvertionsYielsToEmptyBody() throws Exception {		Exchange exchange = new DefaultExchange(context);		Message msg = exchange.getIn();		CachedOutputStream out = new CachedOutputStream(exchange);		out.write("Hello World".getBytes());		msg.setBody(out.getStreamCache());		Assert.assertEquals(msg.getBody(String.class), "Hello World");		Assert.assertEquals(msg.getBody(String.class), "Hello World");	}	@Test	public void closingInputStreamYieldsToException() throws Exception {		Exchange exchange = new DefaultExchange(context);		Message msg = exchange.getIn();		CachedOutputStream out = new CachedOutputStream(exchange);		for ( int i = 0 ; i < 10000; i++) out.write("0123456789".getBytes());		msg.setBody(out.getStreamCache());		InputStream in = msg.getBody(InputStream.class);		in.read();		in.close();		msg.getBody(String.class);	}		@Test	public void cachedOutputStreamsShouldBeClosable() throws Exception {		Exchange exchange = new DefaultExchange(context);		Message msg = exchange.getIn();		CachedOutputStream out = new CachedOutputStream(exchange);		for ( int i = 0 ; i < 10000; i++) out.write("0123456789".getBytes());		msg.setBody(out.getStreamCache());		out.close();		msg.getBody(String.class);	}}{code}
CAMEL-6293 ftp(s) producers should add the ftpReplyString to the header To improve the ftp communication, the ftpReplyString should be added to the message header when uploading files using ftp or ftps Improvement ftp(s) producers should add the ftpReplyString to the header To improve the ftp communication, the ftpReplyString should be added to the message header when uploading files using ftp or ftps
CAMEL-6292 Camel archetype component - Use bundle packaging so component is ready to install in OSGi The component archetypes should have the pom.xml changed so they generate a project that use bundle packaging with the felix bundle plugin.Then the component is ready to install in OSGi.See nabblehttp://camel.465427.n5.nabble.com/Creating-new-processor-components-td5730919.html Improvement Camel archetype component - Use bundle packaging so component is ready to install in OSGi The component archetypes should have the pom.xml changed so they generate a project that use bundle packaging with the felix bundle plugin.Then the component is ready to install in OSGi.See nabblehttp://camel.465427.n5.nabble.com/Creating-new-processor-components-td5730919.html
CAMEL-6290 camel-example-osgi - Should not output to system out, but use log instead The camel-example-osgi will print to system out. This is annoying in karaf shell. As its hard to use the shell when the example runs.We should log to the log. And tell the user to use log:tail to see the output{code}[  78] [Active     ] [            ] [       ] [   80] camel-example-osgi (2.12.0.SNAPSHOT)karaf@root> >>>> SpringDSL set body:  Tue Apr 16 16:35:51 CEST 2013lo           >>>> SpringDSL set body:  Tue Apr 16 16:35:53 CEST 2013^Ckaraf@root> >>>> SpringDSL set body:  Tue Apr 16 16:35:55 CEST 2013stop 78>>>> SpringDSL set body:  Tue Apr 16 16:35:57 CEST 2013{code} Improvement camel-example-osgi - Should not output to system out, but use log instead The camel-example-osgi will print to system out. This is annoying in karaf shell. As its hard to use the shell when the example runs.We should log to the log. And tell the user to use log:tail to see the output{code}[  78] [Active     ] [            ] [       ] [   80] camel-example-osgi (2.12.0.SNAPSHOT)karaf@root> >>>> SpringDSL set body:  Tue Apr 16 16:35:51 CEST 2013lo           >>>> SpringDSL set body:  Tue Apr 16 16:35:53 CEST 2013^Ckaraf@root> >>>> SpringDSL set body:  Tue Apr 16 16:35:55 CEST 2013stop 78>>>> SpringDSL set body:  Tue Apr 16 16:35:57 CEST 2013{code}
CAMEL-6289 camel-example-loan-broker - The broker example should use broker.xml file to setup broker We should use the broker.xml file to setup the AMQ broker like we do with the management example.Then we can have a better stopping order of AMQ + Camel. So we may not get the noise logs. Improvement camel-example-loan-broker - The broker example should use broker.xml file to setup broker We should use the broker.xml file to setup the AMQ broker like we do with the management example.Then we can have a better stopping order of AMQ + Camel. So we may not get the noise logs.
CAMEL-6286 Make SqsConsumer support async processors Switch SqsConsumer from using getProcessor().process() to getAsyncProcessor().process() with a callback to allow use of async processors.As I understand it is ok to always use the async processor call as its to show that 'the caller supports having the exchange asynchronously processed' rather than specifically always process it asynchronously. Improvement Make SqsConsumer support async processors Switch SqsConsumer from using getProcessor().process() to getAsyncProcessor().process() with a callback to allow use of async processors.As I understand it is ok to always use the async processor call as its to show that 'the caller supports having the exchange asynchronously processed' rather than specifically always process it asynchronously.
CAMEL-6285 Apache Camel uptime reported in logs - Add to the log message that its Apache Camel etc {code}[                      Thread-1] SpringCamelContext             INFO  Uptime 47.576 seconds[                      Thread-1] SpringCamelContext             INFO  Apache Camel 2.12-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.617 seconds[         ActiveMQ ShutdownHook] TransportConnector             INFO  Connector tcp://localhost:61616 Stopped[         ActiveMQ ShutdownHook] BrokerService                  INFO  Apache ActiveMQ 5.8.0 (localhost, ID:davsclaus-air.lan-51404-1366091507878-0:1) uptime 49.248 seconds[         ActiveMQ ShutdownHook] BrokerService                  INFO  Apache ActiveMQ 5.8.0 (localhost, ID:davsclaus-air.lan-51404-1366091507878-0:1) is shutdown{code}I think we should do like AMQ, have the uptime reported with leading Apache Camel VERSION NAME so its easier to spot that the uptime belongs to Apache Camel. Improvement Apache Camel uptime reported in logs - Add to the log message that its Apache Camel etc {code}[                      Thread-1] SpringCamelContext             INFO  Uptime 47.576 seconds[                      Thread-1] SpringCamelContext             INFO  Apache Camel 2.12-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.617 seconds[         ActiveMQ ShutdownHook] TransportConnector             INFO  Connector tcp://localhost:61616 Stopped[         ActiveMQ ShutdownHook] BrokerService                  INFO  Apache ActiveMQ 5.8.0 (localhost, ID:davsclaus-air.lan-51404-1366091507878-0:1) uptime 49.248 seconds[         ActiveMQ ShutdownHook] BrokerService                  INFO  Apache ActiveMQ 5.8.0 (localhost, ID:davsclaus-air.lan-51404-1366091507878-0:1) is shutdown{code}I think we should do like AMQ, have the uptime reported with leading Apache Camel VERSION NAME so its easier to spot that the uptime belongs to Apache Camel.
CAMEL-6282 TypeConverterRegistry - Allow to enable or disable utilization statistics We should disable it by default. And then allow people to turn it on, such as during development if they need to see easily if they are having to many misses etc. As that indicate a potential optimization, to avoid the many misses.We should disable by default as under high load the stats may cause a little performance degrade. Improvement TypeConverterRegistry - Allow to enable or disable utilization statistics We should disable it by default. And then allow people to turn it on, such as during development if they need to see easily if they are having to many misses etc. As that indicate a potential optimization, to avoid the many misses.We should disable by default as under high load the stats may cause a little performance degrade.
CAMEL-6272 Bean - Improve choose method logic for no parameter methods We should optimize the logic and if a method name with no parameters has been defined, eg{code}.to("bean:myBean?method=foo()"){code}Or in ognl's such as{code}.when().simple("${body.foo()} != null").to("direct:foo"){code}Then we should optimize the logic to filter out methods with methods, as foo has been declare with no methods explicit by (). Improvement Bean - Improve choose method logic for no parameter methods We should optimize the logic and if a method name with no parameters has been defined, eg{code}.to("bean:myBean?method=foo()"){code}Or in ognl's such as{code}.when().simple("${body.foo()} != null").to("direct:foo"){code}Then we should optimize the logic to filter out methods with methods, as foo has been declare with no methods explicit by ().
CAMEL-6269 MainSupport in camel-core should make it easier to have callbacks when starting / stopping etc See nabblehttp://camel.465427.n5.nabble.com/Callback-after-startup-from-org-apache-camel-main-Main-afterStart-tp5730284.htmlWe should have an interface / or some methods people can override for start | stop events. Or consider just using the event notifier api from Camel. Though it has many events. And people may just an easier way of getting a callback for Camel has started. Camel has stopped etc. Improvement MainSupport in camel-core should make it easier to have callbacks when starting / stopping etc See nabblehttp://camel.465427.n5.nabble.com/Callback-after-startup-from-org-apache-camel-main-Main-afterStart-tp5730284.htmlWe should have an interface / or some methods people can override for start | stop events. Or consider just using the event notifier api from Camel. Though it has many events. And people may just an easier way of getting a callback for Camel has started. Camel has stopped etc.
CAMEL-6268 camel-stream - Shutdown thread pool on consumer should happen faster Should be faster to shutdown this pool as you may see WARN logs on stopping Camel[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)[el-1) thread #2 - ShutdownTask] DefaultExecutorServiceManager  INFO  Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0][stream://in?promptMessage=Enter+something%3A+] to terminate...[el-1) thread #2 - ShutdownTask] DefaultExecutorServiceManager  INFO  Waited 4.002 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0][stream://in?promptMessage=Enter+something%3A+] to terminate... Improvement camel-stream - Shutdown thread pool on consumer should happen faster Should be faster to shutdown this pool as you may see WARN logs on stopping Camel[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)[el-1) thread #2 - ShutdownTask] DefaultExecutorServiceManager  INFO  Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0][stream://in?promptMessage=Enter+something%3A+] to terminate...[el-1) thread #2 - ShutdownTask] DefaultExecutorServiceManager  INFO  Waited 4.002 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0][stream://in?promptMessage=Enter+something%3A+] to terminate...
CAMEL-6265 direct-vm component - The processor should support async routing engine The org.apache.camel.component.directvm.DirectVmProcessor should extend DelegateAsyncProcessor so we can leverage that with the async routing engine. Improvement direct-vm component - The processor should support async routing engine The org.apache.camel.component.directvm.DirectVmProcessor should extend DelegateAsyncProcessor so we can leverage that with the async routing engine.
CAMEL-6264 Camel 2.10 performance regression with added statistics in BaseTypeConverterRegistry We updated one of our applications from camel 2.7.3 to camel 2.10.3.We have a camel route that takes its input from a servlet and we saw a 10% performance drop after the update.With more tests using yourkit, it appears that we are spending a lot more time in BaseTypeConverterRegistry#convertTo method than we used to (from 10ms to 3200ms in a test case).The only difference between the two version is the added statistics and the AtomicLong that must cause contention on our route that uses multiple threads behind a seda.To improve the issue on our side, we worked-around to avoid having a type converter in our hotspots (Which was mainly the DefaultHttpBinding#writeResponse from camel-http), but i think a solution should be find (maybe make these statistics optionnal).Regards,Fabien Improvement Camel 2.10 performance regression with added statistics in BaseTypeConverterRegistry We updated one of our applications from camel 2.7.3 to camel 2.10.3.We have a camel route that takes its input from a servlet and we saw a 10% performance drop after the update.With more tests using yourkit, it appears that we are spending a lot more time in BaseTypeConverterRegistry#convertTo method than we used to (from 10ms to 3200ms in a test case).The only difference between the two version is the added statistics and the AtomicLong that must cause contention on our route that uses multiple threads behind a seda.To improve the issue on our side, we worked-around to avoid having a type converter in our hotspots (Which was mainly the DefaultHttpBinding#writeResponse from camel-http), but i think a solution should be find (maybe make these statistics optionnal).Regards,Fabien
CAMEL-6260 IllegalAccessException when setup statement in the camel-jdbc component When use camel-jdbc and try to setup statement parameter:to("jdbc:tradeDataSource?statement.fetchSize=100").jdbc: ojdbc6.jar (Oracle)Exception happens:Class org.apache.camel.util.IntrospectionSupport can not access a member of class oracle.jdbc.driver.OracleStatementWrapper with modifiers "public"java.lang.IllegalAccessException: Class org.apache.camel.util.IntrospectionSupport can not access a member of class oracle.jdbc.driver.OracleStatementWrapper with modifiers "public"	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:95)	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:261)	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:253)	at java.lang.reflect.Method.invoke(Method.java:594)	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:331)	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:367)	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:297)	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:307)	at org.apache.camel.component.jdbc.JdbcProducer.createAndExecuteSqlStatement(JdbcProducer.java:118)	at org.apache.camel.component.jdbc.JdbcProducer.processingSqlBySettingAutoCommit(JdbcProducer.java:82)	at org.apache.camel.component.jdbc.JdbcProducer.process(JdbcProducer.java:63)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:98)	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:94)	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)	at java.util.concurrent.FutureTask.run(FutureTask.java:166)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)	at java.lang.Thread.run(Thread.java:722)This is because the Oracle class oracle.jdbc.driver.OracleStatementWrapper  has package-view access. Improvement IllegalAccessException when setup statement in the camel-jdbc component When use camel-jdbc and try to setup statement parameter:to("jdbc:tradeDataSource?statement.fetchSize=100").jdbc: ojdbc6.jar (Oracle)Exception happens:Class org.apache.camel.util.IntrospectionSupport can not access a member of class oracle.jdbc.driver.OracleStatementWrapper with modifiers "public"java.lang.IllegalAccessException: Class org.apache.camel.util.IntrospectionSupport can not access a member of class oracle.jdbc.driver.OracleStatementWrapper with modifiers "public"	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:95)	at java.lang.reflect.AccessibleObject.slowCheckMemberAccess(AccessibleObject.java:261)	at java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:253)	at java.lang.reflect.Method.invoke(Method.java:594)	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:331)	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:367)	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:297)	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:307)	at org.apache.camel.component.jdbc.JdbcProducer.createAndExecuteSqlStatement(JdbcProducer.java:118)	at org.apache.camel.component.jdbc.JdbcProducer.processingSqlBySettingAutoCommit(JdbcProducer.java:82)	at org.apache.camel.component.jdbc.JdbcProducer.process(JdbcProducer.java:63)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:98)	at org.apache.camel.processor.WireTapProcessor$1.call(WireTapProcessor.java:94)	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)	at java.util.concurrent.FutureTask.run(FutureTask.java:166)	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)	at java.lang.Thread.run(Thread.java:722)This is because the Oracle class oracle.jdbc.driver.OracleStatementWrapper  has package-view access.
CAMEL-6258 Sql component - Add noop option to execute the query but dont change the message body afterwards Seehttp://blog.mgm-tp.com/2013/04/camel-router-part1/comment-page-1/#comment-4161Even if the query returns a result set, you may not want to grab that or change the message body.For that we can have a noop=true|false option. If there is a better name for the option then we can go for that, though noop was the first name that came to my mind. Improvement Sql component - Add noop option to execute the query but dont change the message body afterwards Seehttp://blog.mgm-tp.com/2013/04/camel-router-part1/comment-page-1/#comment-4161Even if the query returns a result set, you may not want to grab that or change the message body.For that we can have a noop=true|false option. If there is a better name for the option then we can go for that, though noop was the first name that came to my mind.
CAMEL-6251 Not possible to use propertyplaceholders for camel dataformat pretty-print attribute It's not possible to use propertyplaceholders for the prettyPrint attribute for the jaxb configuration when using spring DSL.{noformat}			<marshal>				<jaxb prettyPrint="${jaxb.prettyPrint}" contextPath="my.contextpath"					partClass="my.Document" 					partNamespace="{my}Document" />			</marshal> {noformat}It will print:Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${jaxb.prettyPrint}' is not a valid value for 'boolean'. Improvement Not possible to use propertyplaceholders for camel dataformat pretty-print attribute It's not possible to use propertyplaceholders for the prettyPrint attribute for the jaxb configuration when using spring DSL.{noformat}			<marshal>				<jaxb prettyPrint="${jaxb.prettyPrint}" contextPath="my.contextpath"					partClass="my.Document" 					partNamespace="{my}Document" />			</marshal> {noformat}It will print:Caused by: org.xml.sax.SAXParseException: cvc-datatype-valid.1.2.1: '${jaxb.prettyPrint}' is not a valid value for 'boolean'.
CAMEL-6248 Route definitions should have better human nicely readable display labels for tooling and tracing This would make the Karaf Camel tooling and the Camel tracer log a bit more nicer.As well if people look in JMX consoles and see the route definition being logged with toString.Currently its a bit to ugly with to many [ ] { } etc. Improvement Route definitions should have better human nicely readable display labels for tooling and tracing This would make the Karaf Camel tooling and the Camel tracer log a bit more nicer.As well if people look in JMX consoles and see the route definition being logged with toString.Currently its a bit to ugly with to many [ ] { } etc.
CAMEL-6247 Avoid verbose stacktrace when stopping camel:run for illegal state during pojosr shutdown We should avoid ugly stacktraces for osgi blueprint shutdown which we dont care about{code}[                      Thread-1] CamelBlueprintHelper           WARN  Error during disposing BundleContext. This exception will be ignored.org.osgi.framework.BundleException: Error while stopping bundle	at de.kalpatec.pojosr.framework.PojoSRBundle.stop(PojoSRBundle.java:176)	at org.apache.camel.test.blueprint.CamelBlueprintHelper.disposeBundleContext(CamelBlueprintHelper.java:146)	at org.apache.camel.test.blueprint.Main.doStop(Main.java:101)	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:91)	at org.apache.camel.main.MainSupport$HangupInterceptor.run(MainSupport.java:81)Caused by: java.lang.IllegalStateException: Service already unregistered.	at de.kalpatec.pojosr.framework.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:118)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker.close(BundleHookBundleTracker.java:88)	at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:106)	at org.apache.aries.blueprint.container.BlueprintExtender.stop(BlueprintExtender.java:166)	at de.kalpatec.pojosr.framework.PojoSRBundle.stop(PojoSRBundle.java:171)	... 4 more{code} Improvement Avoid verbose stacktrace when stopping camel:run for illegal state during pojosr shutdown We should avoid ugly stacktraces for osgi blueprint shutdown which we dont care about{code}[                      Thread-1] CamelBlueprintHelper           WARN  Error during disposing BundleContext. This exception will be ignored.org.osgi.framework.BundleException: Error while stopping bundle	at de.kalpatec.pojosr.framework.PojoSRBundle.stop(PojoSRBundle.java:176)	at org.apache.camel.test.blueprint.CamelBlueprintHelper.disposeBundleContext(CamelBlueprintHelper.java:146)	at org.apache.camel.test.blueprint.Main.doStop(Main.java:101)	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:91)	at org.apache.camel.main.MainSupport$HangupInterceptor.run(MainSupport.java:81)Caused by: java.lang.IllegalStateException: Service already unregistered.	at de.kalpatec.pojosr.framework.felix.framework.ServiceRegistrationImpl.unregister(ServiceRegistrationImpl.java:118)	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker.close(BundleHookBundleTracker.java:88)	at org.apache.aries.util.tracker.RecursiveBundleTracker.close(RecursiveBundleTracker.java:106)	at org.apache.aries.blueprint.container.BlueprintExtender.stop(BlueprintExtender.java:166)	at de.kalpatec.pojosr.framework.PojoSRBundle.stop(PojoSRBundle.java:171)	... 4 more{code}
CAMEL-6246 Improve unit tests for the optimistic aggregate repo The unit tests should probably be improved, and use a aggregation repository where you force throwing those optimistic locking exception. Instead of relying on some cpu thread timing. This allows you also to record if there was a optimistic locking etc. And makes unit test easier. Sub-task Improve unit tests for the optimistic aggregate repo The unit tests should probably be improved, and use a aggregation repository where you force throwing those optimistic locking exception. Instead of relying on some cpu thread timing. This allows you also to record if there was a optimistic locking etc. And makes unit test easier.
CAMEL-6245 Add the camel-scala-extraz documentation to ASF docs The docs fromhttps://github.com/osinka/camel-scala-extraWe should have that contribured to ASF so we can add some of that to our scala docs. Sub-task Add the camel-scala-extraz documentation to ASF docs The docs fromhttps://github.com/osinka/camel-scala-extraWe should have that contribured to ASF so we can add some of that to our scala docs.
CAMEL-6239 Add incrementing counter to processor / route mbeans so we know the exact order they were created / positioned in routes This makes it easier from tooling etc to know the position of the processors in the routes. As well sort the routes in the order they were created.This is needed for the new karaf camel commands etc. Improvement Add incrementing counter to processor / route mbeans so we know the exact order they were created / positioned in routes This makes it easier from tooling etc to know the position of the processors in the routes. As well sort the routes in the order they were created.This is needed for the new karaf camel commands etc.
CAMEL-6238 support JSONPath as a Camel Language for easy JSON filtering and expression evaluation JSON is a very popular message format; yet its kinda painful performing expressions on it as typically you have to marshal it first into some specific domain model (or Maps / Lists) and then use some general purpose Java expression language on it.JSONPath looks pretty cool though; kinda like XPath but designed for arbitrary JSON payloadshttps://code.google.com/p/json-path/the library is small & Apache licensed so it should be pretty easy to wrap up as a Camel Language New Feature support JSONPath as a Camel Language for easy JSON filtering and expression evaluation JSON is a very popular message format; yet its kinda painful performing expressions on it as typically you have to marshal it first into some specific domain model (or Maps / Lists) and then use some general purpose Java expression language on it.JSONPath looks pretty cool though; kinda like XPath but designed for arbitrary JSON payloadshttps://code.google.com/p/json-path/the library is small & Apache licensed so it should be pretty easy to wrap up as a Camel Language
CAMEL-6237 Karaf command for profile routes A karaf command to see the route profile stats. This allows end users at runtime to help them diagnose where in the route time is spent. New Feature Karaf command for profile routes A karaf command to see the route profile stats. This allows end users at runtime to help them diagnose where in the route time is spent.
CAMEL-6236 dataformat component - To make it easier to use data formats as if it was another component A new dataformat component that allows you to use any existing data format as a component. For example by sending a message to an endpoint.eg{code:xml}...<to uri="dataformat:jaxb:unmarshal?contextPath=com.foo.acme&amp;prettyPrint=true"/>...{code}This allows people to configure the data formats from endpoint uris as well. New Feature dataformat component - To make it easier to use data formats as if it was another component A new dataformat component that allows you to use any existing data format as a component. For example by sending a message to an endpoint.eg{code:xml}...<to uri="dataformat:jaxb:unmarshal?contextPath=com.foo.acme&amp;prettyPrint=true"/>...{code}This allows people to configure the data formats from endpoint uris as well.
CAMEL-6235 File consumer - preMove should happen after the file lock has been acquired See nabblehttp://camel.465427.n5.nabble.com/Camel-file-component-preMove-creates-directory-before-read-lock-acquired-tp5728193.htmlWe should acquire the lock first, and then do the pre move afterwards.  Improvement File consumer - preMove should happen after the file lock has been acquired See nabblehttp://camel.465427.n5.nabble.com/Camel-file-component-preMove-creates-directory-before-read-lock-acquired-tp5728193.htmlWe should acquire the lock first, and then do the pre move afterwards. 
CAMEL-6233 BridgePropertyPlaceholderConfigurer does not support nested Spring properties BridgePropertyPlaceholderConfigurer does not support recursive properties (as Spring property placeholder does).Given the following Spring properties file :{noformat}project.path=/projectintegration.in=${project.path}/in{noformat}If I use the expression {{{{integration.in}}}} in the from clause of my RouteBuilder, I get an exception :{noformat}Invalid directory: ${project.path}/in. Dynamic expressions with ${ } placeholders is not allowed. Use the fileName option to set the dynamic expression.{noformat} Improvement BridgePropertyPlaceholderConfigurer does not support nested Spring properties BridgePropertyPlaceholderConfigurer does not support recursive properties (as Spring property placeholder does).Given the following Spring properties file :{noformat}project.path=/projectintegration.in=${project.path}/in{noformat}If I use the expression {{{{integration.in}}}} in the from clause of my RouteBuilder, I get an exception :{noformat}Invalid directory: ${project.path}/in. Dynamic expressions with ${ } placeholders is not allowed. Use the fileName option to set the dynamic expression.{noformat}
CAMEL-6230 Allow endpoints to configure useRawUri to force using raw uris 1)This allows end users to control this, in some situations where they need this.2)Also the parameters Map when using raw uri should contain the raw values. Currently AFAIR its only the uri string that is raw.We need to make this consistent as well. Improvement Allow endpoints to configure useRawUri to force using raw uris 1)This allows end users to control this, in some situations where they need this.2)Also the parameters Map when using raw uri should contain the raw values. Currently AFAIR its only the uri string that is raw.We need to make this consistent as well.
CAMEL-6227 json data format - Add support for configuring gson options Seehttp://stackoverflow.com/questions/15686032/apache-camel-gson-formatterWe should make it possible to configure those gson options in the DSL. Improvement json data format - Add support for configuring gson options Seehttp://stackoverflow.com/questions/15686032/apache-camel-gson-formatterWe should make it possible to configure those gson options in the DSL.
CAMEL-6224 Documentation Has Old References to HEADER_FILE_NAME Per Issue CAMEL-1733, exchange related constants have been moved. The File Component documentation hasn't been updated.I'm happy to take care of this the but "How To Help" docs suggest I need to be granted write access. Task Documentation Has Old References to HEADER_FILE_NAME Per Issue CAMEL-1733, exchange related constants have been moved. The File Component documentation hasn't been updated.I'm happy to take care of this the but "How To Help" docs suggest I need to be granted write access.
CAMEL-6222 camel-example-blueprintweb - An example like the tomcat example but using blueprint-web to be Spring free example When Apache Aries Blueprint has released a version of blueprint-web, we can build a Camel example using it.Like this example: http://camel.apache.org/servlet-tomcat-no-spring-example.htmlBut using blueprint-web. New Feature camel-example-blueprintweb - An example like the tomcat example but using blueprint-web to be Spring free example When Apache Aries Blueprint has released a version of blueprint-web, we can build a Camel example using it.Like this example: http://camel.apache.org/servlet-tomcat-no-spring-example.htmlBut using blueprint-web.
CAMEL-6217 Camel-test-blueprint supports to create bundle context per class As the CamelTestSupport supports to create the camel context per test class, it could be handy if the CamelBlueprintTestSupport supports to create the bundle context per test class. Improvement Camel-test-blueprint supports to create bundle context per class As the CamelTestSupport supports to create the camel context per test class, it could be handy if the CamelBlueprintTestSupport supports to create the bundle context per test class.
CAMEL-6216 Support user metadata on files stored in S3 S3 allows metadata to be associated with each object stored. This feature will allow that to be defined through the route.I am working on the patch. New Feature Support user metadata on files stored in S3 S3 allows metadata to be associated with each object stored. This feature will allow that to be defined through the route.I am working on the patch.
CAMEL-6215 CacheReplicationTest resolve FIX ME Resolve FIX ME on:@Ignore("Fix me")public class CacheReplicationTestCause:{code}net.sf.ehcache.CacheException: Another unnamed CacheManager already exists in the same VM. Please provide unique names for each CacheManager in the config or do one of following:1. Use one of the CacheManager.create() static factory methods to reuse same CacheManager with same name or create one if necessary2. Shutdown the earlier cacheManager before creating new one with same name.{code} Test CacheReplicationTest resolve FIX ME Resolve FIX ME on:@Ignore("Fix me")public class CacheReplicationTestCause:{code}net.sf.ehcache.CacheException: Another unnamed CacheManager already exists in the same VM. Please provide unique names for each CacheManager in the config or do one of following:1. Use one of the CacheManager.create() static factory methods to reuse same CacheManager with same name or create one if necessary2. Shutdown the earlier cacheManager before creating new one with same name.{code}
CAMEL-6212 Add support to allow json libraries to use jaxb annotations for marshal and unmarshal It would be nice to be able to marshal/unmarshal into json, but using jaxb annotations.  Both Jackson and Jettison support this.  Improvement Add support to allow json libraries to use jaxb annotations for marshal and unmarshal It would be nice to be able to marshal/unmarshal into json, but using jaxb annotations.  Both Jackson and Jettison support this. 
CAMEL-6208 RichTestUri should support the template requestBody and asynSend APIs It could be handy if the RichTestUri supports the ProducerTemplate requestBody, asyncSend APIs. Improvement RichTestUri should support the template requestBody and asynSend APIs It could be handy if the RichTestUri supports the ProducerTemplate requestBody, asyncSend APIs.
CAMEL-6207 JMX tests with create connector should cleanup after testing We have some JMX tests in camel-core, that enables create connector. But seems to not cleanup that flag after testing.eg ManagedRouteWithOnExceptionTest Test JMX tests with create connector should cleanup after testing We have some JMX tests in camel-core, that enables create connector. But seems to not cleanup that flag after testing.eg ManagedRouteWithOnExceptionTest
CAMEL-6206 Enable to use default scope beans With Spring we can use default scope beans, but with camel it is not possible. We have to make public the interface that it is used as a bean. This feature is useful to encapsulate in a package collaborators of a route for example. Improvement Enable to use default scope beans With Spring we can use default scope beans, but with camel it is not possible. We have to make public the interface that it is used as a bean. This feature is useful to encapsulate in a package collaborators of a route for example.
CAMEL-6205 Add option to disable file system sync on File Producer Currently the file producer will sync all file operations to disk. This is an expensive operation as it bypasses the OS's write cache.Some use cases don't require this level of data protection, and prefer to trade for better performance. (for example, for audit & logging purposes). Improvement Add option to disable file system sync on File Producer Currently the file producer will sync all file operations to disk. This is an expensive operation as it bypasses the OS's write cache.Some use cases don't require this level of data protection, and prefer to trade for better performance. (for example, for audit & logging purposes).
CAMEL-6194 Create @PreConsumed Annotation or Fix @Consumed Annotation For JPA Component @Consumed functions are not called until after an exchange has been routed out of the JPA component. Executing @Consumed functions is part of the stated functionality of the JPA component so it seems logical that the @Consumed function should be called as part of routing an exchange, not after the exchange has been routed.If possible, I think it'd be preferable to modify the @Consumed behavior though [~davsclaus] has suggested the possible creation of an @PreConsumed annotation.I'm happy to implement this ticket this weekend if I can get some consensus on which path is preferred by the community. This would be my first patch on the project so I figure I ought not to run off on my own. New Feature Create @PreConsumed Annotation or Fix @Consumed Annotation For JPA Component @Consumed functions are not called until after an exchange has been routed out of the JPA component. Executing @Consumed functions is part of the stated functionality of the JPA component so it seems logical that the @Consumed function should be called as part of routing an exchange, not after the exchange has been routed.If possible, I think it'd be preferable to modify the @Consumed behavior though [~davsclaus] has suggested the possible creation of an @PreConsumed annotation.I'm happy to implement this ticket this weekend if I can get some consensus on which path is preferred by the community. This would be my first patch on the project so I figure I ought not to run off on my own.
CAMEL-6193 mail component - When mapMailMessage=true we should eager map message See CAMEL-6154The issue is that even if mapMailMessage=true, then the mail message is read on demand, and not during the mail consumer.This causes problem as in CAMEL-6154, when using pollEnrich as the mail consumer will finish the poll, and close the mail folder. And then the message is aggregated afterwards, causing a folder closed exception.We dont see this in regular routes where we consume <from imap" because the consumer closes at the very end of the routing, and we have accessed the mail message during the routing.This is a little behavior change in the component, so lets do it on 2.11. Improvement mail component - When mapMailMessage=true we should eager map message See CAMEL-6154The issue is that even if mapMailMessage=true, then the mail message is read on demand, and not during the mail consumer.This causes problem as in CAMEL-6154, when using pollEnrich as the mail consumer will finish the poll, and close the mail folder. And then the message is aggregated afterwards, causing a folder closed exception.We dont see this in regular routes where we consume <from imap" because the consumer closes at the very end of the routing, and we have accessed the mail message during the routing.This is a little behavior change in the component, so lets do it on 2.11.
CAMEL-6192 Remove EnhancedThrowableRenderer from log4j.properties as it has a bug Remove this line from our log4j. properties files:log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRendererThis rendered does not log any caused exception(s) so you can not see the full strack trace and error messages when exceptions is being wrapped. Task Remove EnhancedThrowableRenderer from log4j.properties as it has a bug Remove this line from our log4j. properties files:log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRendererThis rendered does not log any caused exception(s) so you can not see the full strack trace and error messages when exceptions is being wrapped.
CAMEL-6190 stream cache - Spool to disk threshold is too slow and we should log on startup at INFO level what the setting is in use See stream cachinghttp://camel.apache.org/stream-caching.htmlIf you enable it then it spool to disk for sizes > 64KB. Today that limit is a bit low. We should bump that up to higher value.Also we should log when Camel startup at INFO level what stream cache settings is being in use, so people can easier notice this.Also the stream cache implementation ought to use java nio with memory mapped files, instead of that old java.io.File that is slow. Improvement stream cache - Spool to disk threshold is too slow and we should log on startup at INFO level what the setting is in use See stream cachinghttp://camel.apache.org/stream-caching.htmlIf you enable it then it spool to disk for sizes > 64KB. Today that limit is a bit low. We should bump that up to higher value.Also we should log when Camel startup at INFO level what stream cache settings is being in use, so people can easier notice this.Also the stream cache implementation ought to use java nio with memory mapped files, instead of that old java.io.File that is slow.
CAMEL-6186 Enable sql component to doesn't try read the body. Enable sql component some configuration indicating doesn't read message body. Related thread http://camel.465427.n5.nabble.com/Camel-SQL-component-How-configure-sql-component-to-doesn-t-try-read-the-body-td5729434.html. Improvement Enable sql component to doesn't try read the body. Enable sql component some configuration indicating doesn't read message body. Related thread http://camel.465427.n5.nabble.com/Camel-SQL-component-How-configure-sql-component-to-doesn-t-try-read-the-body-td5729434.html.
CAMEL-6184 CamelContext - removeComponent should stop component first to be similar to removeEndpoints We should align removeEndpoints and removeComponent to be similar. Stopping the service first before removing.Also add a note about this in the javadoc. Improvement CamelContext - removeComponent should stop component first to be similar to removeEndpoints We should align removeEndpoints and removeComponent to be similar. Stopping the service first before removing.Also add a note about this in the javadoc.
CAMEL-6183 xslt component - Add option to make it easy to use saxon as the transformer factory It would be nice if there was an easy option to enable Saxon on the xslt component by setting saxon=true. And it under the covers sets the transformer factory to be the one from saxon.Today you would have to do something like<to uri="xslt:etc/3.xsl?transformerFactory=tFactory"/> and adding the bean <bean id="tFactory" class="net.sf.saxon.TransformerFactoryImpl"/> Improvement xslt component - Add option to make it easy to use saxon as the transformer factory It would be nice if there was an easy option to enable Saxon on the xslt component by setting saxon=true. And it under the covers sets the transformer factory to be the one from saxon.Today you would have to do something like<to uri="xslt:etc/3.xsl?transformerFactory=tFactory"/> and adding the bean <bean id="tFactory" class="net.sf.saxon.TransformerFactoryImpl"/>
CAMEL-6182 Merge the camel-scala-extra into camel-scala Alexander Azarov did some work[1] to enhance the camel-scala. I just had some discussion with him about contribute the code into Apache. He is very glad to do that. So I will commit the merge shortly.[1]https://github.com/osinka/camel-scala-extra Task Merge the camel-scala-extra into camel-scala Alexander Azarov did some work[1] to enhance the camel-scala. I just had some discussion with him about contribute the code into Apache. He is very glad to do that. So I will commit the merge shortly.[1]https://github.com/osinka/camel-scala-extra
CAMEL-6176 Camel 2.10.1 incapable of working with + in endpoint URIs In the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.At first the java.net.Uri#getQuery will be called with according to the javadoc "Returns the decoded query component of this URI" returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc "Returns the decoded scheme-specific part of this URI." returns a decoded URI.So to summarize we get in any case a decoded URI.As workaround for CAMEL-4954 all % are encoded, i.e. replaced by %25.The URI will then be decoded again in the method org.apache.camel.util.URISupport#parseQuery(String) with java.net.URLDecoder#decode(String,String).This code leads to the following behaviour: If a + is properly encoded with foo%2Bbar the foo%2Bbar will be substituted by the first call with foo+bar and then decoded again which leads to foo bar. If the + is not encoded at all foo+bar will be decoded to foo bar in the first step and not be changed again in the second step. If the + is double encoded to foo%252Bbar the first call will transform it to foo%2Bbar, then the workaround for CAMEL-4954 will change it back to foo%252Bbar and the final decode will change it again to foo%2Bbar.Thus, currently there is no way to use a + in passwords or similar parameter values if the parameter has to be supplied via endpoint URIs. Improvement Camel 2.10.1 incapable of working with + in endpoint URIs In the class org.apache.camel.util.URISupport which will be used to resolve endpoints (DefaultCamelContext#normalizeEndpointUri) the method parseParameters will be called.At first the java.net.Uri#getQuery will be called with according to the javadoc "Returns the decoded query component of this URI" returns a decoded URI. If that fails the java.net.Uri#getSchemeSpecificPart method will be called which according to the javadoc "Returns the decoded scheme-specific part of this URI." returns a decoded URI.So to summarize we get in any case a decoded URI.As workaround for CAMEL-4954 all % are encoded, i.e. replaced by %25.The URI will then be decoded again in the method org.apache.camel.util.URISupport#parseQuery(String) with java.net.URLDecoder#decode(String,String).This code leads to the following behaviour: If a + is properly encoded with foo%2Bbar the foo%2Bbar will be substituted by the first call with foo+bar and then decoded again which leads to foo bar. If the + is not encoded at all foo+bar will be decoded to foo bar in the first step and not be changed again in the second step. If the + is double encoded to foo%252Bbar the first call will transform it to foo%2Bbar, then the workaround for CAMEL-4954 will change it back to foo%252Bbar and the final decode will change it again to foo%2Bbar.Thus, currently there is no way to use a + in passwords or similar parameter values if the parameter has to be supplied via endpoint URIs.
CAMEL-6174 camel-avro does not support Avro reflection schemas Currently SpecificDatumReader/SpecificDatumWriter are fixed in camel-avro. This prevents usage of reflection schema for POJOs that are supported by ReflectDatumReader / ReflectDatumWriter Improvement camel-avro does not support Avro reflection schemas Currently SpecificDatumReader/SpecificDatumWriter are fixed in camel-avro. This prevents usage of reflection schema for POJOs that are supported by ReflectDatumReader / ReflectDatumWriter
CAMEL-6170 ManagedCamelContextMBean - Add operation to find components This allows us to access information which Camel components is in use and available on the classpath. Improvement ManagedCamelContextMBean - Add operation to find components This allows us to access information which Camel components is in use and available on the classpath.
CAMEL-6166 camel-jms - Allow to configure jmsKeyFormatStrategy directly on component level We should make it easier to configure this option, to set it on globally on the jms component.Currently you would need to setup a JmsConfiguration bean and set it on that bean. But we have common options which can be set directly on the JmsComponent. So we should just make this option configurable there as well. Improvement camel-jms - Allow to configure jmsKeyFormatStrategy directly on component level We should make it easier to configure this option, to set it on globally on the jms component.Currently you would need to setup a JmsConfiguration bean and set it on that bean. But we have common options which can be set directly on the JmsComponent. So we should just make this option configurable there as well.
CAMEL-6165 camel-stomp - A java based stomp component using stompjms client We should consider a java based stomp component for Camel usinghttps://github.com/fusesource/stompjmsstompjms is OSGi already. And ASL licensed and released into maven central. New Feature camel-stomp - A java based stomp component using stompjms client We should consider a java based stomp component for Camel usinghttps://github.com/fusesource/stompjmsstompjms is OSGi already. And ASL licensed and released into maven central.
CAMEL-6164 camel-ftp - Add debug logging how long time it took to upload a file It may help end users to see if their ftp upload is slow, if we log how long time it actually took to upload the file. Improvement camel-ftp - Add debug logging how long time it took to upload a file It may help end users to see if their ftp upload is slow, if we log how long time it actually took to upload the file.
CAMEL-6163 camel-bindy - Enable add custom data type converter. It is useful add custom converter to camel-bindy, for example a new parameter on Datafield annotation "converter=<someclass>". The converter receive an string and return a the object. If we can add custom converter, we can map to any data type. New Feature camel-bindy - Enable add custom data type converter. It is useful add custom converter to camel-bindy, for example a new parameter on Datafield annotation "converter=<someclass>". The converter receive an string and return a the object. If we can add custom converter, we can map to any data type.
CAMEL-6162 camel-bindy - Support boolean data type mapper Enable support boolean data type mapper in a configurable way, perhaps reusing pattern parameter in @DataField annotation. New Feature camel-bindy - Support boolean data type mapper Enable support boolean data type mapper in a configurable way, perhaps reusing pattern parameter in @DataField annotation.
CAMEL-6161 blueprint-cxf-test - Should use dynamic port number The tests/blueprint-cxf-test uses hardcoded port numbers for its unit tests. This can cause "connection refused" errors during testing.We should use dynamic ports like we have done in almost all other places. Test blueprint-cxf-test - Should use dynamic port number The tests/blueprint-cxf-test uses hardcoded port numbers for its unit tests. This can cause "connection refused" errors during testing.We should use dynamic ports like we have done in almost all other places.
CAMEL-6159 Broken link inside  Inside http://camel.apache.org/spel.html has a broken link in the section Samples -> Expression templating where it says "since (expression templating <- BROKEN LINK) is enabled". Task Broken link inside  Inside http://camel.apache.org/spel.html has a broken link in the section Samples -> Expression templating where it says "since (expression templating <- BROKEN LINK) is enabled".
CAMEL-6157 Parametrized queries in JDBC component Juan pointed that currently it is difficult to create SQL-injection safe query with JDBC component. We could provide option to send query parameters via message header.{code}from("direct:sql").to("jdbc:testDB");...producerTemplate.sendBodyAndHeader("direct:sql", "JDBC_PARAMETERS", "fooValue", "insert into foo values (?)");{code}[1] http://camel.465427.n5.nabble.com/Dinamyc-SQL-with-arguments-tp5729003.html Improvement Parametrized queries in JDBC component Juan pointed that currently it is difficult to create SQL-injection safe query with JDBC component. We could provide option to send query parameters via message header.{code}from("direct:sql").to("jdbc:testDB");...producerTemplate.sendBodyAndHeader("direct:sql", "JDBC_PARAMETERS", "fooValue", "insert into foo values (?)");{code}[1] http://camel.465427.n5.nabble.com/Dinamyc-SQL-with-arguments-tp5729003.html
CAMEL-6156 blueprint-cxf-test - Fails on trunk with 1 test error ------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12TestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 15.935 sec <<< FAILURE!testInvokeGreeter(org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test)  Time elapsed: 14.627 sec  <<< FAILURE!java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <0>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1318)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1300)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:372)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:351)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:339)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:177)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:627)	at org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test.testInvokeGreeter(CxfConsumerSoap12Test.java:80)Running org.apache.camel.test.cxf.blueprint.CxfEndpointBeansTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.136 secRunning org.apache.camel.test.cxf.blueprint.CxfPayloadProviderRouterTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.595 secRunning org.apache.camel.test.cxf.blueprint.CxfTransportBlueprintTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.506 secResults :Failed tests:  CxfConsumerSoap12Test.testInvokeGreeter:80->CamelTestSupport.assertMockEndpointsSatisfied:627 mock://result Received message count. Expected: <1> but was: <0> Task blueprint-cxf-test - Fails on trunk with 1 test error ------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12TestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 15.935 sec <<< FAILURE!testInvokeGreeter(org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test)  Time elapsed: 14.627 sec  <<< FAILURE!java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <0>	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1318)	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1300)	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:372)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:351)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:339)	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:177)	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:627)	at org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test.testInvokeGreeter(CxfConsumerSoap12Test.java:80)Running org.apache.camel.test.cxf.blueprint.CxfEndpointBeansTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.136 secRunning org.apache.camel.test.cxf.blueprint.CxfPayloadProviderRouterTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.595 secRunning org.apache.camel.test.cxf.blueprint.CxfTransportBlueprintTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.506 secResults :Failed tests:  CxfConsumerSoap12Test.testInvokeGreeter:80->CamelTestSupport.assertMockEndpointsSatisfied:627 mock://result Received message count. Expected: <1> but was: <0>
CAMEL-6153 Rename camel-neo4j and camel-redis to include spring in their name See discussion athttp://camel.465427.n5.nabble.com/DISCUSS-Rename-camel-redis-and-camel-neo4j-to-include-spring-in-their-name-tp5728870.html Task Rename camel-neo4j and camel-redis to include spring in their name See discussion athttp://camel.465427.n5.nabble.com/DISCUSS-Rename-camel-redis-and-camel-neo4j-to-include-spring-in-their-name-tp5728870.html
CAMEL-6151 Add support to DirectEndpoint for blocking until a consumer is available My use case is that some routes will be dynamically redployed at runtime.Ideally instead of retrying when a direct endpoints consumer disappears temporarily it would be nice if the direct producer would block for a configurable duration waiting for a consumer to come, back, into existence.The default would obviously be not to block, to maintain backwards compatibility.Something along these lines:{code}direct:xxxx?block=true&timeout=5000{code} Improvement Add support to DirectEndpoint for blocking until a consumer is available My use case is that some routes will be dynamically redployed at runtime.Ideally instead of retrying when a direct endpoints consumer disappears temporarily it would be nice if the direct producer would block for a configurable duration waiting for a consumer to come, back, into existence.The default would obviously be not to block, to maintain backwards compatibility.Something along these lines:{code}direct:xxxx?block=true&timeout=5000{code}
CAMEL-6149 Karaf command for backlog tracer This allows people using karaf / SMX to have Camel message tracing from their shell command. Sub-task Karaf command for backlog tracer This allows people using karaf / SMX to have Camel message tracing from their shell command.
CAMEL-6148 BacklogTracer - Allow to capture message tracers and store in backlog for retrieval on demand (pull based) A new type of message tracer in Camel that stores the traced messages in an internal backlog queue, which can be access on demand by management API.This allows us to build a karaf command to show messages traces, and allow end users to integrate this easier with their JMX tooling etc.The name BacklogTracer was chosen as MessageTracer would be ambiguous with the existing Tracer. The existing Tracer is too fine grained and has some awkward issues as well. New Feature BacklogTracer - Allow to capture message tracers and store in backlog for retrieval on demand (pull based) A new type of message tracer in Camel that stores the traced messages in an internal backlog queue, which can be access on demand by management API.This allows us to build a karaf command to show messages traces, and allow end users to integrate this easier with their JMX tooling etc.The name BacklogTracer was chosen as MessageTracer would be ambiguous with the existing Tracer. The existing Tracer is too fine grained and has some awkward issues as well.
CAMEL-6147  improve the stream:file to be able to auto close when it detects the splitter is done We should improve the stream:file to be able to auto close when itdetects the splitter is done, as we have a completed property on theexchange to tell us.We can add an option on stream:file like  closeOnDone=trueLike in this example :        from("file://C:/Temp/camel/input_test/?noop=true")              .split()              .tokenize("\n")                     // Business lock with possible reject / enrich etc ...                     .streaming()                     .to("stream:file?fileName=C:/Temp/camel/output_test/out.csv&closeOnDone=true")                .end()       .end(); New Feature  improve the stream:file to be able to auto close when it detects the splitter is done We should improve the stream:file to be able to auto close when itdetects the splitter is done, as we have a completed property on theexchange to tell us.We can add an option on stream:file like  closeOnDone=trueLike in this example :        from("file://C:/Temp/camel/input_test/?noop=true")              .split()              .tokenize("\n")                     // Business lock with possible reject / enrich etc ...                     .streaming()                     .to("stream:file?fileName=C:/Temp/camel/output_test/out.csv&closeOnDone=true")                .end()       .end();
CAMEL-6146 Tracer mbean name in JMX has no need for hexcode The tracer MBean has identity hashcode appended, but that is not needed. We should loose that, so the mbean name is fixed name, which makes it easier for people and tooling to leverage.org.apache.camel:context=localhost/camel-1,type=tracer,name=Tracer(0x548bb8b2)Should beorg.apache.camel:context=localhost/camel-1,type=tracer,name=Tracer Improvement Tracer mbean name in JMX has no need for hexcode The tracer MBean has identity hashcode appended, but that is not needed. We should loose that, so the mbean name is fixed name, which makes it easier for people and tooling to leverage.org.apache.camel:context=localhost/camel-1,type=tracer,name=Tracer(0x548bb8b2)Should beorg.apache.camel:context=localhost/camel-1,type=tracer,name=Tracer
CAMEL-6145 JXPath language - Allow to configure lenient option If you use jxpath as a language in a filter or content based eip, you may want to configure it to be lenient, so it can filter on values that do not exists on the given message (in case some messages do not have that information etc).This can be done by configuring the lenient option on the JXPathContext. Improvement JXPath language - Allow to configure lenient option If you use jxpath as a language in a filter or content based eip, you may want to configure it to be lenient, so it can filter on values that do not exists on the given message (in case some messages do not have that information etc).This can be done by configuring the lenient option on the JXPathContext.
CAMEL-6144 Optimistic Locking Required for JdbcAggregationRepository in order for Camel Aggregation to work in a Clustered environment Listing two problems here. And a solution that is needed to fix these problems.1) A Race condition leading to below ConstraintViolationException when two Camel Aggregator's trying to insert into the AGGREGATION DB table for same correlationkey(ID). "org.hibernate.exception.ConstraintViolationException: ORA-00001: unique constraint (USLDB_UAT2.AGGREGATION_PK) violatedat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:74)at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110)at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129)at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81)at $Proxy171.executeUpdate(Unknown Source)at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:73)at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:1)at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587)at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:615)at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:137)at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:113)at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:113)at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:260)at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:197)at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(As..."2) A similar Race condition happens when more than one Camel Aggregator(s) tries to update a row in the AGGREGATION table. This problem does not lead into any exceptions. But it leads into missing exchanges. Because both the Aggregator's are trying to update the same row in the AGGREGATION table, But one update is overwritten by other update, thus losing an exchange.SOLUTION:==========Optimistic locking should be enabled / applied  for JdbcAggregationRepository to handle this race condition. Improvement Optimistic Locking Required for JdbcAggregationRepository in order for Camel Aggregation to work in a Clustered environment Listing two problems here. And a solution that is needed to fix these problems.1) A Race condition leading to below ConstraintViolationException when two Camel Aggregator's trying to insert into the AGGREGATION DB table for same correlationkey(ID). "org.hibernate.exception.ConstraintViolationException: ORA-00001: unique constraint (USLDB_UAT2.AGGREGATION_PK) violatedat org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:74)at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125)at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110)at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129)at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81)at $Proxy171.executeUpdate(Unknown Source)at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:73)at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:1)at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587)at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:615)at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:137)at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:113)at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:113)at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:260)at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:197)at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(As..."2) A similar Race condition happens when more than one Camel Aggregator(s) tries to update a row in the AGGREGATION table. This problem does not lead into any exceptions. But it leads into missing exchanges. Because both the Aggregator's are trying to update the same row in the AGGREGATION table, But one update is overwritten by other update, thus losing an exchange.SOLUTION:==========Optimistic locking should be enabled / applied  for JdbcAggregationRepository to handle this race condition.
CAMEL-6142 camel-hdfs - Preserve auth as Hadoop overrides that and cause sideeffects for auth afterwards Somewhere in the massive code of Hadoop it override and set the auth configuartion to{code}javax.security.auth.login.Configuration.setConfiguration(new HadoopConfiguration()){code}Which causes camel-hdfs to not work in environments with Auth, such as Karaf et all.We would have to keep and restore the current auth when using camel-hdfs to ensure the auth is restored after using hadoop, so Karaf still works. Improvement camel-hdfs - Preserve auth as Hadoop overrides that and cause sideeffects for auth afterwards Somewhere in the massive code of Hadoop it override and set the auth configuartion to{code}javax.security.auth.login.Configuration.setConfiguration(new HadoopConfiguration()){code}Which causes camel-hdfs to not work in environments with Auth, such as Karaf et all.We would have to keep and restore the current auth when using camel-hdfs to ensure the auth is restored after using hadoop, so Karaf still works.
CAMEL-6140 adding getTaskQueueRemainingCapacity() on org.apache.camel.api.management.mbean.ManagedThreadPoolMBean At the moment org.apache.camel.api.management.mbean.ManagedThreadPoolMBean does not seem to give visibility of how much space is left in the ThreadPoolExecutor's TaskQueue.  It is possible to get the remaining Capacity from the ThreadPoolExecutor associated blocking queue, so it would be nice to expose that on the ManagedThreadPoolMBean.  Improvement adding getTaskQueueRemainingCapacity() on org.apache.camel.api.management.mbean.ManagedThreadPoolMBean At the moment org.apache.camel.api.management.mbean.ManagedThreadPoolMBean does not seem to give visibility of how much space is left in the ThreadPoolExecutor's TaskQueue.  It is possible to get the remaining Capacity from the ThreadPoolExecutor associated blocking queue, so it would be nice to expose that on the ManagedThreadPoolMBean. 
CAMEL-6139 Split the content of a Zip File Allow split the content of a Zip in a stream way. Each item is an InputStream.Related thread: http://camel.465427.n5.nabble.com/zip-file-best-practices-td5713437.html New Feature Split the content of a Zip File Allow split the content of a Zip in a stream way. Each item is an InputStream.Related thread: http://camel.465427.n5.nabble.com/zip-file-best-practices-td5713437.html
CAMEL-6131 RouteDefinition.toString() should include the route Id RouteDefinition.toString() should include the route Id Improvement RouteDefinition.toString() should include the route Id RouteDefinition.toString() should include the route Id
CAMEL-6126 Have camel-cxf feature splitup so people can install smaller pieces they need In a vanilla Apache Karaf 2.3.1, installing first camel feature. Then you end up at bundle[  78] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)Then install camel-cxf feature we end up with a massive new bundles installed:[ 163] [Active     ] [            ] [       ] [   50] Apache CXF Compatibility Bundle Jar (2.7.3)[ 164] [Active     ] [Created     ] [       ] [   50] camel-cxf-transport (2.11.0.SNAPSHOT)[ 165] [Active     ] [Created     ] [       ] [   50] camel-cxf (2.11.0.SNAPSHOT)eg we jump from bundle 79 to 163 for stuff CXF need.It would be good some day in the future to allow people to slice and dice CXF to install only what they use/need. Wish Have camel-cxf feature splitup so people can install smaller pieces they need In a vanilla Apache Karaf 2.3.1, installing first camel feature. Then you end up at bundle[  78] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)Then install camel-cxf feature we end up with a massive new bundles installed:[ 163] [Active     ] [            ] [       ] [   50] Apache CXF Compatibility Bundle Jar (2.7.3)[ 164] [Active     ] [Created     ] [       ] [   50] camel-cxf-transport (2.11.0.SNAPSHOT)[ 165] [Active     ] [Created     ] [       ] [   50] camel-cxf (2.11.0.SNAPSHOT)eg we jump from bundle 79 to 163 for stuff CXF need.It would be good some day in the future to allow people to slice and dice CXF to install only what they use/need.
CAMEL-6125 OSGi test failures on Karaf 2.3.1 Upgraded to Karaf 2.3.1, and ran the osgi tests in camel-itest-osgi. And the following fails{code}davsclaus:~/workspace/camel/tests/camel-itest-osgi/target/surefire-reports$ find *.txt | xargs grep FAILorg.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.782 sec <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest)  Time elapsed: 10.19 sec  <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 9.39 sec <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest)  Time elapsed: 8.8 sec  <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.348 sec <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheTest)  Time elapsed: 9.579 sec  <<< FAILURE!org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 12.413 sec <<< FAILURE!org.apache.camel.itest.osgi.jclouds.BlobStoreRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 11.859 sec <<< FAILURE!org.apache.camel.itest.osgi.servlet.ServletComponentTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.594 sec <<< FAILURE!org.apache.camel.itest.osgi.servlet.ServletServicesTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.807 sec <<< FAILURE!{code} Task OSGi test failures on Karaf 2.3.1 Upgraded to Karaf 2.3.1, and ran the osgi tests in camel-itest-osgi. And the following fails{code}davsclaus:~/workspace/camel/tests/camel-itest-osgi/target/surefire-reports$ find *.txt | xargs grep FAILorg.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.782 sec <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest)  Time elapsed: 10.19 sec  <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 9.39 sec <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest)  Time elapsed: 8.8 sec  <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.348 sec <<< FAILURE!org.apache.camel.itest.osgi.cache.CacheTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheTest)  Time elapsed: 9.579 sec  <<< FAILURE!org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 12.413 sec <<< FAILURE!org.apache.camel.itest.osgi.jclouds.BlobStoreRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 11.859 sec <<< FAILURE!org.apache.camel.itest.osgi.servlet.ServletComponentTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.594 sec <<< FAILURE!org.apache.camel.itest.osgi.servlet.ServletServicesTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.807 sec <<< FAILURE!{code}
CAMEL-6122 Upgrade component to jackson2 Upgrade to jackson2.Note: Jackson2 has changed GAV.GroupId is now com.fasterxml.jackson Improvement Upgrade component to jackson2 Upgrade to jackson2.Note: Jackson2 has changed GAV.GroupId is now com.fasterxml.jackson
CAMEL-6120 camel-ssh - Use ResourceHelper to load keystore so its easy loadable from classpath/file etc Seehttps://github.com/scranton/example-security-camel-ssh/blob/master/src/main/resources/META-INF/spring/camel-context.xmlHaving to create a custom key factory to use a classloader is too complicated.We should use the code from util package in camel-core ResourceHelper which we use in other components to load resource files from classpath / file etc. Improvement camel-ssh - Use ResourceHelper to load keystore so its easy loadable from classpath/file etc Seehttps://github.com/scranton/example-security-camel-ssh/blob/master/src/main/resources/META-INF/spring/camel-context.xmlHaving to create a custom key factory to use a classloader is too complicated.We should use the code from util package in camel-core ResourceHelper which we use in other components to load resource files from classpath / file etc.
CAMEL-6113 Upgrade to Spring 3.2.1.RELEASE The Spring 3.1.x series won't get any more fixes, maybe it's time to move on to  latest 3.2.x?CAMEL-4778 is somewhat related. Improvement Upgrade to Spring 3.2.1.RELEASE The Spring 3.1.x series won't get any more fixes, maybe it's time to move on to  latest 3.2.x?CAMEL-4778 is somewhat related.
CAMEL-6112 camel-blueprint - Use same version of Aries Blueprint et all as Karaf 2.3.1 There is some new releases of Aries Blueprint et all.We should align and use the same versions as Apache Karaf 2.3.1 is being released and uses. Task camel-blueprint - Use same version of Aries Blueprint et all as Karaf 2.3.1 There is some new releases of Aries Blueprint et all.We should align and use the same versions as Apache Karaf 2.3.1 is being released and uses.
CAMEL-6105 Make DirectProducer throw a specific exception when it cannot find the corresponding consumer, instead of a generic CamelExchangeException. Make DirectProducer throw a specific exception when it cannot find the corresponding consumer, instead of a generic CamelExchangeException.Our use case is that some routes will be dynamically redeployed at run-time, this is not a problem for routes using jms:xxx and other such endpoints, but for  direct:xxx endpoints this poses a problem.I am asking if we could change DirectProducer to throw a new exception something like NoConsumerAvailableException which extends CamelExchangeException for backwards compatibility. As this would allow us to setup a default re-delivery policy for this specific exception.I also have a second request, let me know if you want this in a separate jira issue.Ideally instead of retrying when a direct endpoints consumer disappears temporarily it would be nice if the direct producer would blocked for a configurable duration waiting for a consumer to come, back, into existence.The default would obviously be not to block, to maintain backwards compatibility.Something along these lines:{code}direct:xxxx?block=true&timeout=5000{code} Improvement Make DirectProducer throw a specific exception when it cannot find the corresponding consumer, instead of a generic CamelExchangeException. Make DirectProducer throw a specific exception when it cannot find the corresponding consumer, instead of a generic CamelExchangeException.Our use case is that some routes will be dynamically redeployed at run-time, this is not a problem for routes using jms:xxx and other such endpoints, but for  direct:xxx endpoints this poses a problem.I am asking if we could change DirectProducer to throw a new exception something like NoConsumerAvailableException which extends CamelExchangeException for backwards compatibility. As this would allow us to setup a default re-delivery policy for this specific exception.I also have a second request, let me know if you want this in a separate jira issue.Ideally instead of retrying when a direct endpoints consumer disappears temporarily it would be nice if the direct producer would blocked for a configurable duration waiting for a consumer to come, back, into existence.The default would obviously be not to block, to maintain backwards compatibility.Something along these lines:{code}direct:xxxx?block=true&timeout=5000{code}
CAMEL-6103 camel-fop - Allow to load configuration file from classpath Seehttp://stackoverflow.com/questions/15085952/apache-camel-fop-component-config-file-locationThe option userConfigURL should be loaded using the ResourceHelper API from camel-core in the util package. It allows to load the resource from classpath, file, http, etc just as we do with camel-velocity, xslt, and other components as well. Improvement camel-fop - Allow to load configuration file from classpath Seehttp://stackoverflow.com/questions/15085952/apache-camel-fop-component-config-file-locationThe option userConfigURL should be loaded using the ResourceHelper API from camel-core in the util package. It allows to load the resource from classpath, file, http, etc just as we do with camel-velocity, xslt, and other components as well.
CAMEL-6102 direct-vm component - Should support the async routing engine There is a bit of code missing to support this, like the direct producer does. Improvement direct-vm component - Should support the async routing engine There is a bit of code missing to support this, like the direct producer does.
CAMEL-6100 ManagedAttribute annotated method in JmsEndpoint does not return a standard type Methods annotated with @ManagedAttribute should return a standard type.The method getErrorHandlerLoggingLevel() in org.apache.camel.component.jms.JmsEndpoint is annotated with ManagedAttribute and has a return type of org.apache.camel.LoggingLevelThis creates an Exception in JConsole: ClassNotFoundExceptionReturning a String instead should solve it. (or remove the annotation)I can of course add the class to the classpath of JConsole, but I guess that it shouldn't be a requirement? Improvement ManagedAttribute annotated method in JmsEndpoint does not return a standard type Methods annotated with @ManagedAttribute should return a standard type.The method getErrorHandlerLoggingLevel() in org.apache.camel.component.jms.JmsEndpoint is annotated with ManagedAttribute and has a return type of org.apache.camel.LoggingLevelThis creates an Exception in JConsole: ClassNotFoundExceptionReturning a String instead should solve it. (or remove the annotation)I can of course add the class to the classpath of JConsole, but I guess that it shouldn't be a requirement?
CAMEL-6099 File producer - See if we can support chmod option like ftp producer Seehttp://stackoverflow.com/questions/15006065/write-file-with-camel-and-set-chmodThere is some links on that to other SO about how to set chmod using the java file api.  Improvement File producer - See if we can support chmod option like ftp producer Seehttp://stackoverflow.com/questions/15006065/write-file-with-camel-and-set-chmodThere is some links on that to other SO about how to set chmod using the java file api. 
CAMEL-6098 Add script to the DSL to invoke a expression language and allow noop changes on the Exchange See nabblehttp://camel.465427.n5.nabble.com/Changing-POJO-attribute-from-the-body-using-the-Simple-Expression-Language-tp5727971.htmlWe should have a script in the DSL{code:xml}<route>  ...  <script>    <groovy>some groovy stuff here</groovy>  </script>  ...</script>{code}The script is then invoked and allows noop to avoid changing the message body.Currently you can only do{code:xml}<transform>  <groovy> ... </groovy></transform>{code}... and that may change the message body with the return value from groovy.With <script> you can avoid this. New Feature Add script to the DSL to invoke a expression language and allow noop changes on the Exchange See nabblehttp://camel.465427.n5.nabble.com/Changing-POJO-attribute-from-the-body-using-the-Simple-Expression-Language-tp5727971.htmlWe should have a script in the DSL{code:xml}<route>  ...  <script>    <groovy>some groovy stuff here</groovy>  </script>  ...</script>{code}The script is then invoked and allows noop to avoid changing the message body.Currently you can only do{code:xml}<transform>  <groovy> ... </groovy></transform>{code}... and that may change the message body with the return value from groovy.With <script> you can avoid this.
CAMEL-6096 Camel SQS has no reasonable way to add arbitrary delays to messages The only way to add a delay to a message is to use the Endpoint URI, this is unacceptable when you want to send an arbitrary delay as it would mean that you have to create a new Endpoint for every delay value. The SQS API allows setting a delay for every message, this can be controlled by a header value. New Feature Camel SQS has no reasonable way to add arbitrary delays to messages The only way to add a delay to a message is to use the Endpoint URI, this is unacceptable when you want to send an arbitrary delay as it would mean that you have to create a new Endpoint for every delay value. The SQS API allows setting a delay for every message, this can be controlled by a header value.
CAMEL-6094 Cannot specify which converter to use when several can do the same conversion I use both Camel-Jetty and Camel-http4 components in many routes. Each time a route is started the following messages appear in logs : 15:16:01,496 | WARN  | xtenderThread-32 | DefaultTypeConverter             | 68 - org.apache.camel.camel-core - 2.6.0.fuse-01-09 | Overriding type converter from: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http4.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException15:16:01,497 | WARN  | xtenderThread-32 | DefaultTypeConverter             | 68 - org.apache.camel.camel-core - 2.6.0.fuse-01-09 | Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http.HttpConverter.toServletRequest(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http4.HttpConverter.toServletRequest(org.apache.camel.Message)15:16:01,498 | WARN  | xtenderThread-32 | DefaultTypeConverter             | 68 - org.apache.camel.camel-core - 2.6.0.fuse-01-09 | Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http.HttpConverter.toServletResponse(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http4.HttpConverter.toServletResponse(org.apache.camel.Message)Even if these are warnings, even if the impact is clearly documented, my customers can not understand why there are so many messages with keywords like IOExceptions and can think this is linked to my product since they appear each time a route is started. This is why I have chosen Major as a priority.I cannot uninstall neither camel-http4 nor camel-http (which is the most quoted solution on forums). Improvement Cannot specify which converter to use when several can do the same conversion I use both Camel-Jetty and Camel-http4 components in many routes. Each time a route is started the following messages appear in logs : 15:16:01,496 | WARN  | xtenderThread-32 | DefaultTypeConverter             | 68 - org.apache.camel.camel-core - 2.6.0.fuse-01-09 | Overriding type converter from: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.http4.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException15:16:01,497 | WARN  | xtenderThread-32 | DefaultTypeConverter             | 68 - org.apache.camel.camel-core - 2.6.0.fuse-01-09 | Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http.HttpConverter.toServletRequest(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.component.http4.HttpConverter.toServletRequest(org.apache.camel.Message)15:16:01,498 | WARN  | xtenderThread-32 | DefaultTypeConverter             | 68 - org.apache.camel.camel-core - 2.6.0.fuse-01-09 | Overriding type converter from: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http.HttpConverter.toServletResponse(org.apache.camel.Message) to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.component.http4.HttpConverter.toServletResponse(org.apache.camel.Message)Even if these are warnings, even if the impact is clearly documented, my customers can not understand why there are so many messages with keywords like IOExceptions and can think this is linked to my product since they appear each time a route is started. This is why I have chosen Major as a priority.I cannot uninstall neither camel-http4 nor camel-http (which is the most quoted solution on forums).
CAMEL-6092 Camel CXF should set the MEP according to the BindingOperationInfo  As the CxfConsumer just create the camel exchange with MEP InOut by default, but if the SOAP request is OneWay, sometime we need to update the MEP to InOnly for further processing. It could be handy if the camel exchange MEP can be set according the binding operation information which we get from CXF. Improvement Camel CXF should set the MEP according to the BindingOperationInfo  As the CxfConsumer just create the camel exchange with MEP InOut by default, but if the SOAP request is OneWay, sometime we need to update the MEP to InOnly for further processing. It could be handy if the camel exchange MEP can be set according the binding operation information which we get from CXF.
CAMEL-6091 Improvement to SqlProducer class I have came across a bug with the Microsoft SQL Server driver (4.0) in where the folowing line is problematic:int expected = ps.getParameterMetaData().getParameterCount();If I run the following query through the component:INSERT INTO [NEW_TABLE] SELECT * FROM [OLD_TABLE] WHERE ID = #expected is set to 0 which results in my value not being set.Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: The value is not set for the parameter number 1.While this is a SQL Server issue, unfortunately the source is not available and an update is not likely any time soon to return the correct meta data. It would be handy if this Producer put the query preperation a little more into the hands of the user. I.e. let me say there are 5 parameters to be prepared along with the 5 values to use.If the user has manually put 5 items in a Map in the body, then can we not just use the map length to identify how many values and then iterate them. Improvement Improvement to SqlProducer class I have came across a bug with the Microsoft SQL Server driver (4.0) in where the folowing line is problematic:int expected = ps.getParameterMetaData().getParameterCount();If I run the following query through the component:INSERT INTO [NEW_TABLE] SELECT * FROM [OLD_TABLE] WHERE ID = #expected is set to 0 which results in my value not being set.Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: The value is not set for the parameter number 1.While this is a SQL Server issue, unfortunately the source is not available and an update is not likely any time soon to return the correct meta data. It would be handy if this Producer put the query preperation a little more into the hands of the user. I.e. let me say there are 5 parameters to be prepared along with the 5 values to use.If the user has manually put 5 items in a Map in the body, then can we not just use the map length to identify how many values and then iterate them.
CAMEL-6088 Add option to camel-crypto PGP to not always use CONSOLE for filename Add option to camel-crypto PGP to not always use CONSOLE for filename which forces For Your Eyes Only and appends _CONSOLE to embedded filename Improvement Add option to camel-crypto PGP to not always use CONSOLE for filename Add option to camel-crypto PGP to not always use CONSOLE for filename which forces For Your Eyes Only and appends _CONSOLE to embedded filename
CAMEL-6085 support the set the cache-control header in camel-restlet We should support to set the cache-control to restlet message form camel message header. Improvement support the set the cache-control header in camel-restlet We should support to set the cache-control to restlet message form camel message header.
CAMEL-6082 File2 Component Over-normalizing A Files Absolute Path We have a route using File2 to listen for a file to be dropped in a folder.  When the file lock attempts to occur, it throws an exception saying the file doesn't exist. Same goes for moving the file using preMove.The reason being is some files that we're receiving have windows paths in their file name, ex: "C:\logs\log.txt".  On our Linux box it is represented as: "/pickup/C:\logs\log.txt" (note the slashes)A standard Java File would handle that fine and properly identify the filename vs the path, however GenericFile seems to want to normalize that to: "/pickup/c:/logs/log.txt". That normalization causes camel to throw errors since that location/file doesn't exist.  Untested, but in the GenericFile class, it looks like this might be the culprit: // we must normalize path according to protocol if we build our own paths String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath());message.setHeader(Exchange.FILE_PATH, path);Let me know if you need more information, thanks! Improvement File2 Component Over-normalizing A Files Absolute Path We have a route using File2 to listen for a file to be dropped in a folder.  When the file lock attempts to occur, it throws an exception saying the file doesn't exist. Same goes for moving the file using preMove.The reason being is some files that we're receiving have windows paths in their file name, ex: "C:\logs\log.txt".  On our Linux box it is represented as: "/pickup/C:\logs\log.txt" (note the slashes)A standard Java File would handle that fine and properly identify the filename vs the path, however GenericFile seems to want to normalize that to: "/pickup/c:/logs/log.txt". That normalization causes camel to throw errors since that location/file doesn't exist.  Untested, but in the GenericFile class, it looks like this might be the culprit: // we must normalize path according to protocol if we build our own paths String path = normalizePathToProtocol(getEndpointPath() + File.separator + getRelativeFilePath());message.setHeader(Exchange.FILE_PATH, path);Let me know if you need more information, thanks!
CAMEL-6080 ability to change properties on CamelContext at  runtime using jmx When activating trace on a route the body is pr. default clipped to show the first 1000 chars. This can be controlled by setting CamelLogDebugBodyMaxChars property on CamelContext, but is not changeable at runtime using jmx.It would be nice to expose a new get/set operation on CamelContextMBean to be able to change context properties at runtime.see http://camel.465427.n5.nabble.com/how-to-set-body-clipped-length-on-traceer-using-jmx-td5727504.htmlI'll take a stab at this if I can find the time.  Improvement ability to change properties on CamelContext at  runtime using jmx When activating trace on a route the body is pr. default clipped to show the first 1000 chars. This can be controlled by setting CamelLogDebugBodyMaxChars property on CamelContext, but is not changeable at runtime using jmx.It would be nice to expose a new get/set operation on CamelContextMBean to be able to change context properties at runtime.see http://camel.465427.n5.nabble.com/how-to-set-body-clipped-length-on-traceer-using-jmx-td5727504.htmlI'll take a stab at this if I can find the time. 
CAMEL-6074 Upgrade to ActiveMQ 5.8.0 We use activemq for testing with JMS. Task Upgrade to ActiveMQ 5.8.0 We use activemq for testing with JMS.
CAMEL-6071 ScheduledPollConsumer - Allow to backoff if no messages being polled for a while The ScheduledPollConsumer is a poller that is scheduled. You configure it to poll every X interval.We should allow the scheduler to backoff if there has been no messages after a while. This avoids overloading the remote system being polled. For example a FTP server being constantly polled for new files. Maybe during the night there is no files being transffered. Yes you can use route policy to turn routes on|off.But maybe if we just allow to easily configure this scheduler poller to backoff if no messages. And we would need an upper limit as well to avoid the delay being too large.As its using the JDK scheduled thread pool. We can not use uneven backoff. But possible just allow it to skip the poll if no messages last time. And then only do every 2nd poll, evert 3rd pool, every 4h pool etc. Until a X max limit.And if there is a message, then the backoff will reset itself. Improvement ScheduledPollConsumer - Allow to backoff if no messages being polled for a while The ScheduledPollConsumer is a poller that is scheduled. You configure it to poll every X interval.We should allow the scheduler to backoff if there has been no messages after a while. This avoids overloading the remote system being polled. For example a FTP server being constantly polled for new files. Maybe during the night there is no files being transffered. Yes you can use route policy to turn routes on|off.But maybe if we just allow to easily configure this scheduler poller to backoff if no messages. And we would need an upper limit as well to avoid the delay being too large.As its using the JDK scheduled thread pool. We can not use uneven backoff. But possible just allow it to skip the poll if no messages last time. And then only do every 2nd poll, evert 3rd pool, every 4h pool etc. Until a X max limit.And if there is a message, then the backoff will reset itself.
CAMEL-6067 Provider deleteJob=true|false as an option for Quartz component Although there is an option for defining stateful jobs in the quartz component via stateful=true, the jobs created are eventually deleted when Camel shutsdown. Please see,http://camel.465427.n5.nabble.com/Quartz-triggers-being-deleted-when-shutting-down-Camel-tt5727257.htmlAn option is needed to instruct Camel to not remove stateful jobs when coming down. New Feature Provider deleteJob=true|false as an option for Quartz component Although there is an option for defining stateful jobs in the quartz component via stateful=true, the jobs created are eventually deleted when Camel shutsdown. Please see,http://camel.465427.n5.nabble.com/Quartz-triggers-being-deleted-when-shutting-down-Camel-tt5727257.htmlAn option is needed to instruct Camel to not remove stateful jobs when coming down.
CAMEL-6066 camel-atom and camel-rss - Issue in karaf Just to not forget[15:53:55] <dkulp> cibsen: ping[15:58:54] hadrian (~hadrian@cpe-107-015-170-016.nc.res.rr.com) joined the channel.[15:59:23] <cibsen> dkulp pong[15:59:43] <dkulp> I acidentally deleted the commit email where you reverted the axiom version.....[15:59:46] <dkulp> That shouldn't be needed.[16:00:09] <cibsen> you mean the downgrade?[16:00:20] <dkulp> The abdera bundles embed the axiom stuff internally, so the Axiom bundles shouldn't be loaded into OSGi at all.[16:00:23] <cibsen> you cannot install camel-atom / camel-rss in karaf 2.3.0[16:00:34] <cibsen> ah so we should remove it from the features.xml file?[16:00:40] <dkulp> Right. Task camel-atom and camel-rss - Issue in karaf Just to not forget[15:53:55] <dkulp> cibsen: ping[15:58:54] hadrian (~hadrian@cpe-107-015-170-016.nc.res.rr.com) joined the channel.[15:59:23] <cibsen> dkulp pong[15:59:43] <dkulp> I acidentally deleted the commit email where you reverted the axiom version.....[15:59:46] <dkulp> That shouldn't be needed.[16:00:09] <cibsen> you mean the downgrade?[16:00:20] <dkulp> The abdera bundles embed the axiom stuff internally, so the Axiom bundles shouldn't be loaded into OSGi at all.[16:00:23] <cibsen> you cannot install camel-atom / camel-rss in karaf 2.3.0[16:00:34] <cibsen> ah so we should remove it from the features.xml file?[16:00:40] <dkulp> Right.
CAMEL-6063 Check if body is a MimeMessage and send it directly without create a MimeMessage from body and headers In a route with a component which create a MimeMessage and set it in body, the mail producer ignores the type of body and create his own MimeMessage from body content and headers.The patch add the control of type and disable the override of MailProducer with his own message.The MimeMessage contained in body is sent directly.Patch contains test and fix Improvement Check if body is a MimeMessage and send it directly without create a MimeMessage from body and headers In a route with a component which create a MimeMessage and set it in body, the mail producer ignores the type of body and create his own MimeMessage from body content and headers.The patch add the control of type and disable the override of MailProducer with his own message.The MimeMessage contained in body is sent directly.Patch contains test and fix
CAMEL-6062 Placeholder cannot be determined in camel property definition Hello,I've got following camel context definition:{code:xml}<camelContext id="myContext" xmlns="http://camel.apache.org/schema/spring" trace="true">        <camel:properties>                <property key="http.proxyScheme" value="{{http.proxyScheme}}"/>                <property key="http.proxyHost" value="{{http.proxyHost}}"/>                <property key="http.proxyPort" value="8080"/>        </camel:properties>        <propertyPlaceholder id="properties" location="classpath:net.atos.acdwb.core.cfg"/>        <routeBuilder ref="wallboardRoute" /></camelContext>{code}Here the placeholders as defined in net.atos.acdwb.core.cfg:{code}# ...http.proxyScheme=httphttp.proxyHost=myHost# ...{code}This file is available in the classpath as other spring placeholders are detected within the context file. Even so, I get following exception when attempting to run my unittest:(...)Caused by: java.lang.IllegalStateException: Scheme '{{http.proxyscheme}}' not registered.        at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)        at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)(...)According to Claus, placeholders are not supported on these Camel properties. I thing it would be very helpful, though.Thanks and regards,Myriam Improvement Placeholder cannot be determined in camel property definition Hello,I've got following camel context definition:{code:xml}<camelContext id="myContext" xmlns="http://camel.apache.org/schema/spring" trace="true">        <camel:properties>                <property key="http.proxyScheme" value="{{http.proxyScheme}}"/>                <property key="http.proxyHost" value="{{http.proxyHost}}"/>                <property key="http.proxyPort" value="8080"/>        </camel:properties>        <propertyPlaceholder id="properties" location="classpath:net.atos.acdwb.core.cfg"/>        <routeBuilder ref="wallboardRoute" /></camelContext>{code}Here the placeholders as defined in net.atos.acdwb.core.cfg:{code}# ...http.proxyScheme=httphttp.proxyHost=myHost# ...{code}This file is available in the classpath as other spring placeholders are detected within the context file. Even so, I get following exception when attempting to run my unittest:(...)Caused by: java.lang.IllegalStateException: Scheme '{{http.proxyscheme}}' not registered.        at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)        at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)(...)According to Claus, placeholders are not supported on these Camel properties. I thing it would be very helpful, though.Thanks and regards,Myriam
CAMEL-6061 Add support for zip file format The existing ZipDataFormat and zip() DSL elements actually implement "deflate" (de)compression, and Camel currently has no real support for zip (de)compression.The attached patch leaves the existing ZipDataFormat and corresponding DSL elements as-is (so as not to affect backwards compatibility), but adds a new ZipDataFormat2 class, which supports the actual zip format.Once this patch is applied, the scope of CAMEL-6049 will only be the non-backwards-compatible changes: renaming the ZipDataFormat and ZipDataFormat2 classes, modifying the DSL, etc. New Feature Add support for zip file format The existing ZipDataFormat and zip() DSL elements actually implement "deflate" (de)compression, and Camel currently has no real support for zip (de)compression.The attached patch leaves the existing ZipDataFormat and corresponding DSL elements as-is (so as not to affect backwards compatibility), but adds a new ZipDataFormat2 class, which supports the actual zip format.Once this patch is applied, the scope of CAMEL-6049 will only be the non-backwards-compatible changes: renaming the ZipDataFormat and ZipDataFormat2 classes, modifying the DSL, etc.
CAMEL-6057 Camel Spring registry does not look into parent contexts trunk components/camel-spring/src/main/java/org/apache/camel/spring/spi/ApplicationContextRegistry.javahas next method:   @Override    public <T> Map<String, T> findByTypeWithName(Class<T> type) {        return applicationContext.getBeansOfType(type);    }but this method does not look into application context parent contexts.org.springframework.beans.factory.BeanFactoryUtils#beansOfTypeIncludingAncestors should be used instead. Improvement Camel Spring registry does not look into parent contexts trunk components/camel-spring/src/main/java/org/apache/camel/spring/spi/ApplicationContextRegistry.javahas next method:   @Override    public <T> Map<String, T> findByTypeWithName(Class<T> type) {        return applicationContext.getBeansOfType(type);    }but this method does not look into application context parent contexts.org.springframework.beans.factory.BeanFactoryUtils#beansOfTypeIncludingAncestors should be used instead.
CAMEL-6054 camel-hazelcast - Manage transactions with SEDA Consumer and improve the mapstore lifecycle The transactions are not started when the seda consumer is used.If the messages are stored in MapStore, seda consumer doesn't wait the end of transaction to remove data. It's a problem if the server crashes because data are lost.The patch allows to resolve this problem because the message in mapstore will be removed only when the transaction will be finished. New Feature camel-hazelcast - Manage transactions with SEDA Consumer and improve the mapstore lifecycle The transactions are not started when the seda consumer is used.If the messages are stored in MapStore, seda consumer doesn't wait the end of transaction to remove data. It's a problem if the server crashes because data are lost.The patch allows to resolve this problem because the message in mapstore will be removed only when the transaction will be finished.
CAMEL-6053 camel-test-blueprint - Allow to override config admin properties to be used outside CamelContext When using camel-test-blueprint, you may use the config admin to refer to properties to be used.We should allow end users from the unit test class to override these properties so they can use alternative values for unit testing. New Feature camel-test-blueprint - Allow to override config admin properties to be used outside CamelContext When using camel-test-blueprint, you may use the config admin to refer to properties to be used.We should allow end users from the unit test class to override these properties so they can use alternative values for unit testing.
CAMEL-6052 Remove dependency on com.sun.script-jython-engine New releases of jython contains necessary META-INF entries thus com.sun.script bridge is not needed. Improvement Remove dependency on com.sun.script-jython-engine New releases of jython contains necessary META-INF entries thus com.sun.script bridge is not needed.
CAMEL-6051 ClassResolver - Add support for Object[] arrays See nabblehttp://camel.465427.n5.nabble.com/convertBodyTo-object-array-tp5727124.htmlThis allows to convert body to in XML DSL to Object[] etc. Improvement ClassResolver - Add support for Object[] arrays See nabblehttp://camel.465427.n5.nabble.com/convertBodyTo-object-array-tp5727124.htmlThis allows to convert body to in XML DSL to Object[] etc.
CAMEL-6047 Validator component - Add option to validate against message header instead of body This componenthttp://camel.apache.org/validation.htmlWill validate the message body by default.It would be nice if you can refer to a message header to validate instead.{code}.to("validator:myschema.xsd?headerName=myData"){code}For example a new option named {{headerName}} to refer to a header. New Feature Validator component - Add option to validate against message header instead of body This componenthttp://camel.apache.org/validation.htmlWill validate the message body by default.It would be nice if you can refer to a message header to validate instead.{code}.to("validator:myschema.xsd?headerName=myData"){code}For example a new option named {{headerName}} to refer to a header.
CAMEL-6044 camel-test-blueprint - When using useOverridePropertiesWithPropertiesComponent may have issue lookup new components Seehttp://camel.465427.n5.nabble.com/Mocking-an-endpoint-in-a-blueprint-that-contains-a-property-placeholder-tp5726972.htmlThere may be an issue when using property placeholders and you refer to a new component, and then the component resolver cannot find that. Improvement camel-test-blueprint - When using useOverridePropertiesWithPropertiesComponent may have issue lookup new components Seehttp://camel.465427.n5.nabble.com/Mocking-an-endpoint-in-a-blueprint-that-contains-a-property-placeholder-tp5726972.htmlThere may be an issue when using property placeholders and you refer to a new component, and then the component resolver cannot find that.
CAMEL-6043 Improve the BeanInfo performance See http://camel.465427.n5.nabble.com/BeanInfo-performance-issues-td5726912.html for details. Improvement Improve the BeanInfo performance See http://camel.465427.n5.nabble.com/BeanInfo-performance-issues-td5726912.html for details.
CAMEL-6042 AggregateProcessor/AggregationRepository does not deal with optimistic locking - will not work correctly in a distributed environment AggregateProcessor/AggregationRepository does not deal with optimistic locking - and will not work correctly in a distributed environment.I started to write a Voldemort specific AggregationRepository I saw that the AggregateProcessor does not deal with optimistic locking. It uses a single AggregateProcessor instance specific lock.In a distributed environment where there are many Camel instances on many servers using a shared data store for the AggregationRepository this will not work.Consider the following scenario using a persistent/shared AggregationRepository:Camel instance A on server A, receives Exchange 1..# AggregateProcessor first acquires instance specific lock.# AggregateProcessor calls oldExchange = AggregationRepository.get()# oldExchange is nullCamel instance B on server B, receives Exchange 2..# AggregateProcessor first acquires instance specific lock.# AggregateProcessor calls oldExchange = AggregationRepository.get()# oldExchange is nullCamel instance A & B at the same time both call..# AggregateProcessor calls AggregationStrategy with the new exchange and old null exchange# aggregationRepository.add() with the result (the new exchange)# Camel instance A succeeds to store the new exchange.# Camel instance B fails with an exception stating that something is already stored using that exchange id.## at this point I could write my AggregationRepository implementation to ignore the existing entry and overwrite it. But this would mean the exiting exchange is lost and never aggregated.A possible solution would be:a) Remove the lock from AggregateProcessor  a1) Put the lock in the MemoryAggregationRepository or  a2) Use a ConcurrentHashMap.putIfAbsent method (and then continue on to do B below).b) Introduce an AggregationRepositoryOptimisticLockException (name it whatever you want) that is thrown when an AggregationRepository detects that someone is trying to add() the same exchange id at the same time.Upon receiving this exception the AggregateProcessor would re-get() the oldExchange (now not null) from the AggregationRepository and call the AggregationStrategy again to aggregate the old and the new exchanges.This would ensure that no exchanges fail to aggregate in a distributed environment. Given that the underlying AggregationRepository is able to detect concurrent add()'s. Which most should be able to (using conditional updates).For example:SQL could try and insert into a table with a unique constraint on the correlation id. When the constraint is violated JPA/JDBC/whatever will throw a unique constraint violation exception which can be converted into a AggregationRepositoryOptimisticLockException.And HawtDB supports optimistic locking out of the box, by throwing a OptimisticUpdateException when it detects concurrent updates. So updating this component to take advantage of this feature should be very simple. Improvement AggregateProcessor/AggregationRepository does not deal with optimistic locking - will not work correctly in a distributed environment AggregateProcessor/AggregationRepository does not deal with optimistic locking - and will not work correctly in a distributed environment.I started to write a Voldemort specific AggregationRepository I saw that the AggregateProcessor does not deal with optimistic locking. It uses a single AggregateProcessor instance specific lock.In a distributed environment where there are many Camel instances on many servers using a shared data store for the AggregationRepository this will not work.Consider the following scenario using a persistent/shared AggregationRepository:Camel instance A on server A, receives Exchange 1..# AggregateProcessor first acquires instance specific lock.# AggregateProcessor calls oldExchange = AggregationRepository.get()# oldExchange is nullCamel instance B on server B, receives Exchange 2..# AggregateProcessor first acquires instance specific lock.# AggregateProcessor calls oldExchange = AggregationRepository.get()# oldExchange is nullCamel instance A & B at the same time both call..# AggregateProcessor calls AggregationStrategy with the new exchange and old null exchange# aggregationRepository.add() with the result (the new exchange)# Camel instance A succeeds to store the new exchange.# Camel instance B fails with an exception stating that something is already stored using that exchange id.## at this point I could write my AggregationRepository implementation to ignore the existing entry and overwrite it. But this would mean the exiting exchange is lost and never aggregated.A possible solution would be:a) Remove the lock from AggregateProcessor  a1) Put the lock in the MemoryAggregationRepository or  a2) Use a ConcurrentHashMap.putIfAbsent method (and then continue on to do B below).b) Introduce an AggregationRepositoryOptimisticLockException (name it whatever you want) that is thrown when an AggregationRepository detects that someone is trying to add() the same exchange id at the same time.Upon receiving this exception the AggregateProcessor would re-get() the oldExchange (now not null) from the AggregationRepository and call the AggregationStrategy again to aggregate the old and the new exchanges.This would ensure that no exchanges fail to aggregate in a distributed environment. Given that the underlying AggregationRepository is able to detect concurrent add()'s. Which most should be able to (using conditional updates).For example:SQL could try and insert into a table with a unique constraint on the correlation id. When the constraint is violated JPA/JDBC/whatever will throw a unique constraint violation exception which can be converted into a AggregationRepositoryOptimisticLockException.And HawtDB supports optimistic locking out of the box, by throwing a OptimisticUpdateException when it detects concurrent updates. So updating this component to take advantage of this feature should be very simple.
CAMEL-6040 Add an option to encrypt tmp files generated by Camel's CachedOutputStream Under stream caching, data may be stored in a temporary file depending on the size of the data. For some scenarios, it is desirable to protect the content of the file from unauthorized access. I would like to propose for adding a simple encryption option in Camel's CachedOutputStream so that it can encrypt the cached content using an internally generated key and only the associated cache object can read the data from the file.This is analogue to CXF-4596.Please look at the attached code and I would appreciate your comments.Regards, Aki Improvement Add an option to encrypt tmp files generated by Camel's CachedOutputStream Under stream caching, data may be stored in a temporary file depending on the size of the data. For some scenarios, it is desirable to protect the content of the file from unauthorized access. I would like to propose for adding a simple encryption option in Camel's CachedOutputStream so that it can encrypt the cached content using an internally generated key and only the associated cache object can read the data from the file.This is analogue to CXF-4596.Please look at the attached code and I would appreciate your comments.Regards, Aki
CAMEL-6036 Comment doesnt fit to code in code snippet The comment does not fit to the code in camel/trunk/tests/camel-itest/src/test/java/org/apache/camel/itest/async/HttpAsyncDslTest.javaThe "e1" snippet is part of the documentation (http://camel.apache.org/async.html), so it should be fixed.Code:// do some CPU heavy processing of the message (we simulate and delay just 500 ms).unmarshal(mySecureDataFormat).delay(1000).to("bean:handleOrder").to("mock:order");// END SNIPPET: e1The delay is 1000, but the comment says 500ms. Task Comment doesnt fit to code in code snippet The comment does not fit to the code in camel/trunk/tests/camel-itest/src/test/java/org/apache/camel/itest/async/HttpAsyncDslTest.javaThe "e1" snippet is part of the documentation (http://camel.apache.org/async.html), so it should be fixed.Code:// do some CPU heavy processing of the message (we simulate and delay just 500 ms).unmarshal(mySecureDataFormat).delay(1000).to("bean:handleOrder").to("mock:order");// END SNIPPET: e1The delay is 1000, but the comment says 500ms.
CAMEL-6034 ClassResolver - Allow to add known package names to avoid typing FQN for known classes We should allow the {{ClassResolver}} API to add packages so end users can add their own package names. So looking up classes etc can use these known packages as prefixes. This avoids typing in long FQN.We would need some API in XML DSL to make that easier to configure.This can also benefit the simple language with the new type function etc. New Feature ClassResolver - Allow to add known package names to avoid typing FQN for known classes We should allow the {{ClassResolver}} API to add packages so end users can add their own package names. So looking up classes etc can use these known packages as prefixes. This avoids typing in long FQN.We would need some API in XML DSL to make that easier to configure.This can also benefit the simple language with the new type function etc.
CAMEL-6032 servletcontextlistener - Allow to configure which registry to use / plugin custom registry See CAMEL-6031We should also allow people with camel-servletlistener to plugin a registry of their choice.And we should not require JNDI. But let the end user easy turn that off. Improvement servletcontextlistener - Allow to configure which registry to use / plugin custom registry See CAMEL-6031We should also allow people with camel-servletlistener to plugin a registry of their choice.And we should not require JNDI. But let the end user easy turn that off.
CAMEL-6031 CamelContext - Should fallback and use SimpleRegistry if JndiRegistry cannot be used by default CamelContext uses Jndi registry by default if not running in spring/blueprint etc. And end user has not explicit configured a different registry.In some cases the jndi registry may not work suc as gae, and we can fallback and use simple registry instead.We can add an option on CamelContext so people can turn this behavior off, in case they must use JNDI.  Improvement CamelContext - Should fallback and use SimpleRegistry if JndiRegistry cannot be used by default CamelContext uses Jndi registry by default if not running in spring/blueprint etc. And end user has not explicit configured a different registry.In some cases the jndi registry may not work suc as gae, and we can fallback and use simple registry instead.We can add an option on CamelContext so people can turn this behavior off, in case they must use JNDI. 
CAMEL-6030 camel-gae - Should not have Spring dependency This component should not have spring dependency.See alsohttp://stackoverflow.com/questions/14661137/camel-and-google-app-engine-without-spring Improvement camel-gae - Should not have Spring dependency This component should not have spring dependency.See alsohttp://stackoverflow.com/questions/14661137/camel-and-google-app-engine-without-spring
CAMEL-6026 Add options to let user get control of http connection We should let user get control of http connection by provides the options for use.Here is the mailing thread about it.http://camel.465427.n5.nabble.com/Camel-http4-component-throws-Connection-refused-error-tp5726673.html Improvement Add options to let user get control of http connection We should let user get control of http connection by provides the options for use.Here is the mailing thread about it.http://camel.465427.n5.nabble.com/Camel-http4-component-throws-Connection-refused-error-tp5726673.html
CAMEL-6022 camel-twitter - limiting number of results per page Add the limitation for the number of result per page (parameter 'count' in the new api 1.1, 'rpp' in the 1.0). Max value is 100.Support in the endpoint configurationtwitter://search?type=direct&keywords=camel&lang=it&count=100or via header configuration: setHeader(TwitterConstants.TWITTER_COUNT, constant(100)) Improvement camel-twitter - limiting number of results per page Add the limitation for the number of result per page (parameter 'count' in the new api 1.1, 'rpp' in the 1.0). Max value is 100.Support in the endpoint configurationtwitter://search?type=direct&keywords=camel&lang=it&count=100or via header configuration: setHeader(TwitterConstants.TWITTER_COUNT, constant(100))
CAMEL-6021 camel-twitter - support for pagination Add the support for pagination in the component, it is already supported by twtter4j. The parameter will be called numberOfPages (to be check if is not too long) for example: twitter://search?type=direct&keywords=camel&numberOfPages=2for the header it will be used a new constant: .setHeader(TwitterConstants.TWITTER_NUMBER_OF_PAGES, constant(5)) Improvement camel-twitter - support for pagination Add the support for pagination in the component, it is already supported by twtter4j. The parameter will be called numberOfPages (to be check if is not too long) for example: twitter://search?type=direct&keywords=camel&numberOfPages=2for the header it will be used a new constant: .setHeader(TwitterConstants.TWITTER_NUMBER_OF_PAGES, constant(5))
CAMEL-6019 Add PGP signature and signature verification support to PGPDataFormat PGPDataFormat currently supports PGP encryption (equivalent to "gpg -e") and decryption (equivalent to "gpg -d"), but does not support simultaneously encrypting and signing (equivalent to "gpg -e -s") or simultaneously decrypting and verifying (equivalent to "gpg -v -d").This patch adds three new optional attributes to the PGPDataFormat class (signatureKeyUserid, signatureKeyFileName, signaturePassword), which can be used to sign while encrypting, or to verify a signature while decrypting. Improvement Add PGP signature and signature verification support to PGPDataFormat PGPDataFormat currently supports PGP encryption (equivalent to "gpg -e") and decryption (equivalent to "gpg -d"), but does not support simultaneously encrypting and signing (equivalent to "gpg -e -s") or simultaneously decrypting and verifying (equivalent to "gpg -v -d").This patch adds three new optional attributes to the PGPDataFormat class (signatureKeyUserid, signatureKeyFileName, signaturePassword), which can be used to sign while encrypting, or to verify a signature while decrypting.
CAMEL-6017 Jetty client should not leverage the system properties to setup the proxyHost and proxyPort As the camel route could be deployed into Karaf or other container, it is not safe to look up the proxy configuration for the system properties.We should leverage the URI options or CamelContext properties to do this like configuration. Improvement Jetty client should not leverage the system properties to setup the proxyHost and proxyPort As the camel route could be deployed into Karaf or other container, it is not safe to look up the proxy configuration for the system properties.We should leverage the URI options or CamelContext properties to do this like configuration.
CAMEL-6016 Simple language - Add type function which can refer to a constant or enum  It would be nice if we added support so people can refer to a constant on a class / interface, or to an enum, which we can referred to in the simple language.The syntax would need to be worked out a bit{code}<when>  <simple>${body} == ${T(com.foo.MyTypes.CUSTOMER)}</simple></when>{code}Not sure about the function name, here we use T to refer to a type. We could also use, "const", "type", or have "enum" as well{code}<when>  <simple>${body} == ${const(com.foo.MyTypes.CUSTOMER)}</simple></when>{code}And we can use colon instead of ( ) which is shorter{code}<when>  <simple>${body} == ${enum:com.foo.MyTypes.CUSTOMER}</simple></when>{code} New Feature Simple language - Add type function which can refer to a constant or enum  It would be nice if we added support so people can refer to a constant on a class / interface, or to an enum, which we can referred to in the simple language.The syntax would need to be worked out a bit{code}<when>  <simple>${body} == ${T(com.foo.MyTypes.CUSTOMER)}</simple></when>{code}Not sure about the function name, here we use T to refer to a type. We could also use, "const", "type", or have "enum" as well{code}<when>  <simple>${body} == ${const(com.foo.MyTypes.CUSTOMER)}</simple></when>{code}And we can use colon instead of ( ) which is shorter{code}<when>  <simple>${body} == ${enum:com.foo.MyTypes.CUSTOMER}</simple></when>{code}
CAMEL-6015 camel maven run plugin - Auto detect if spring or blueprint It would be nice if the mvn camel:run plugin could auto detect if your run a spring or blueprint project. Today it defaults to spring because it was the first. For blueprint you need to configure it to be blueprint.But we can detect the xml if its blueprint or spring in the namespace of the xml. Improvement camel maven run plugin - Auto detect if spring or blueprint It would be nice if the mvn camel:run plugin could auto detect if your run a spring or blueprint project. Today it defaults to spring because it was the first. For blueprint you need to configure it to be blueprint.But we can detect the xml if its blueprint or spring in the namespace of the xml.
CAMEL-6011 Upgrade to Scala 2.10 We should upgrade to Scala 2.10.Its in fact now an OSGi bundle out of the box, which is nice. Task Upgrade to Scala 2.10 We should upgrade to Scala 2.10.Its in fact now an OSGi bundle out of the box, which is nice.
CAMEL-6010 camel-ibatis - Should load sql map in start instead of lazy getter One of these lazy get init which is bad practice.We should use lifecycle of component to load sql map. Improvement camel-ibatis - Should load sql map in start instead of lazy getter One of these lazy get init which is bad practice.We should use lifecycle of component to load sql map.
CAMEL-6009 camel-ftp - Improved logic for traversing directories with stepwise enabled See CAMEL-5574 with some commentsThe logic how Camel does recursive directory scanning on FTP components could be improved. In some cases it does a fair bit of directory changes. And also the logic for going to parent dir, could be improved for SFTP to use cd .. instead.Thought its in the fist poll we can really improve as well. What we should do is to at first poll to CD into the starting directory, only once.And then the existing logic can traverse the dirs, and when its done, the current dir is at the starting dir.Then we dont need to remember the beginning dir, and then change back to that when the poll is complete. eg we just CD into the starting dir the 1st time, and dont do that for 2+ polls.For that we need to have a state to remember this. And also if we need to re-login etc, then that state must be cleared. So 2 optimizes1) How we do changeToParentDirectory2) CD to starting directory on 1st poll (need state to remember)PS: starting directory = then directory configured on the ftp endpoint. Sometimes it may not be configured if you should just start from the "home" directory. Improvement camel-ftp - Improved logic for traversing directories with stepwise enabled See CAMEL-5574 with some commentsThe logic how Camel does recursive directory scanning on FTP components could be improved. In some cases it does a fair bit of directory changes. And also the logic for going to parent dir, could be improved for SFTP to use cd .. instead.Thought its in the fist poll we can really improve as well. What we should do is to at first poll to CD into the starting directory, only once.And then the existing logic can traverse the dirs, and when its done, the current dir is at the starting dir.Then we dont need to remember the beginning dir, and then change back to that when the poll is complete. eg we just CD into the starting dir the 1st time, and dont do that for 2+ polls.For that we need to have a state to remember this. And also if we need to re-login etc, then that state must be cleared. So 2 optimizes1) How we do changeToParentDirectory2) CD to starting directory on 1st poll (need state to remember)PS: starting directory = then directory configured on the ftp endpoint. Sometimes it may not be configured if you should just start from the "home" directory.
CAMEL-6008 camel-netty - Initialize SSLContext once if using camel JSSE configuration We only need to initialize SSLContext once when using the Camel way of configuration.Currently we initialize it in each getPipeline call. Improvement camel-netty - Initialize SSLContext once if using camel JSSE configuration We only need to initialize SSLContext once when using the Camel way of configuration.Currently we initialize it in each getPipeline call.
CAMEL-6007 CamelProxy using @Produce on interface - Allow 2nd+ parameters to be bound as headers Seehttp://stackoverflow.com/questions/14488310/set-activemq-message-header-while-using-camels-produce-annotationThis allows people to use interfaces as contracts for sending messages. And have the convention that the 1st parameter is the message body, and 2+ parameters is headers. Improvement CamelProxy using @Produce on interface - Allow 2nd+ parameters to be bound as headers Seehttp://stackoverflow.com/questions/14488310/set-activemq-message-header-while-using-camels-produce-annotationThis allows people to use interfaces as contracts for sending messages. And have the convention that the 1st parameter is the message body, and 2+ parameters is headers.
CAMEL-6006 File and ftp built in idempotent consumer - Allow to customize key Seehttp://stackoverflow.com/questions/14462505/apache-camel-and-ftp-processingBy default the long file name is used. But sometimes people want to have file size / file timestamp as part of the key. In case a new file with the same is created but with new content, and thus wanted to be picked up. Improvement File and ftp built in idempotent consumer - Allow to customize key Seehttp://stackoverflow.com/questions/14462505/apache-camel-and-ftp-processingBy default the long file name is used. But sometimes people want to have file size / file timestamp as part of the key. In case a new file with the same is created but with new content, and thus wanted to be picked up.
CAMEL-6003 Aggregator EIP to support an AggregatorRepository, to store in flight Exchanges Aggregator EIP to support an AggregatorRepository, to store in flight ExchangesFor my use case the aggregation timeout can be quite high, and there is a chance that the camel instance may be restarted. If I could supply my own persisting AggregatorRepository implementation I could ensure that restarting camel will not affect the aggregation logic.The default could be an InMemoryAggregatorRepository. Wish Aggregator EIP to support an AggregatorRepository, to store in flight Exchanges Aggregator EIP to support an AggregatorRepository, to store in flight ExchangesFor my use case the aggregation timeout can be quite high, and there is a chance that the camel instance may be restarted. If I could supply my own persisting AggregatorRepository implementation I could ensure that restarting camel will not affect the aggregation logic.The default could be an InMemoryAggregatorRepository.
CAMEL-6000 camel-mongodb - Dynamically add indexes to collections You can create collection dynamically but the inability to specify the index can be an obstacle to the proper functioning of mongo.Adding a header key "CamelMongoDbCollectionIndex" to specify the columns to index. (add test method) New Feature camel-mongodb - Dynamically add indexes to collections You can create collection dynamically but the inability to specify the index can be an obstacle to the proper functioning of mongo.Adding a header key "CamelMongoDbCollectionIndex" to specify the columns to index. (add test method)
CAMEL-5997 Registry API changes to accomodate CDI See the talk on @devhttp://camel.465427.n5.nabble.com/DISCUSS-Refactoring-of-Registry-Injector-interface-tp5723022.htmlWe need to pickup this to move forward for better CDI support and OSGi as well, where lookup by type / using filter etc. is possible. The current API in camel-core does not cater for that. Improvement Registry API changes to accomodate CDI See the talk on @devhttp://camel.465427.n5.nabble.com/DISCUSS-Refactoring-of-Registry-Injector-interface-tp5723022.htmlWe need to pickup this to move forward for better CDI support and OSGi as well, where lookup by type / using filter etc. is possible. The current API in camel-core does not cater for that.
CAMEL-5995 Improvment of InstrumentationProcessor Hi, The software I'm working on rely on some logging from Instrumentation Processor. Since release of Camel 2.9 there were some changes that made logging less workable.Therefore I propose some improvments in that class.I hope it can help. Improvement Improvment of InstrumentationProcessor Hi, The software I'm working on rely on some logging from Instrumentation Processor. Since release of Camel 2.9 there were some changes that made logging less workable.Therefore I propose some improvments in that class.I hope it can help.
CAMEL-5991 Javadoc on our WIKI page points to Camel 2.9.0 See http://camel.apache.org/javadoc.html Task Javadoc on our WIKI page points to Camel 2.9.0 See http://camel.apache.org/javadoc.html
CAMEL-5984 Specification of the language for the search Consumer and Producer Would be nice to have a parameter, I choosen 'lang' to specify the language a search on twitter is done. Something like twitter://search?keywords=camel&lang=es would return all the twits containing camel in Spanish. There is also a constant that can be used in the headers to change at runtime the language ( TwitterConstants.TWITTER_SEARCH_LANGUAGE = CamelTwitterSearchLanguage)I have attached a patch for SearchProducer and SearchConsumer.  Improvement Specification of the language for the search Consumer and Producer Would be nice to have a parameter, I choosen 'lang' to specify the language a search on twitter is done. Something like twitter://search?keywords=camel&lang=es would return all the twits containing camel in Spanish. There is also a constant that can be used in the headers to change at runtime the language ( TwitterConstants.TWITTER_SEARCH_LANGUAGE = CamelTwitterSearchLanguage)I have attached a patch for SearchProducer and SearchConsumer. 
CAMEL-5982 Search on twitter without filtering old twits Despite filterOld parameter is presented as a generic functionality is not used in the Producer but only in the consumer.I have attached a patch to use the filterOld in the SearchProducer in order to not present only the new results Improvement Search on twitter without filtering old twits Despite filterOld parameter is presented as a generic functionality is not used in the Producer but only in the consumer.I have attached a patch to use the filterOld in the SearchProducer in order to not present only the new results
CAMEL-5978 Enhancement of BridgePropertyPlaceholderConfigurer Camel 2.10 introduced the BridgePropertyPlaceholderConfigurer bean as a replacement of the Spring <context:property-placeholder>.The latter- may ignore missing property files (ignore-resource-not-found="true")- falls back to system properties if a requested property could not befound in the (potentially non-existent) properties file.This functionality is not available in the BridgePropertyPlaceholderConfigurer. It would be great if it could be added. Improvement Enhancement of BridgePropertyPlaceholderConfigurer Camel 2.10 introduced the BridgePropertyPlaceholderConfigurer bean as a replacement of the Spring <context:property-placeholder>.The latter- may ignore missing property files (ignore-resource-not-found="true")- falls back to system properties if a requested property could not befound in the (potentially non-existent) properties file.This functionality is not available in the BridgePropertyPlaceholderConfigurer. It would be great if it could be added.
CAMEL-5977 camel-sql - Add support for map based parameters Currently when using sql producer it expects the parameters in a given order.Though if the message body is map based, we can support key'ed style instead of index based.This allows us to bind t{code}select * from foo where id = #id# and country = #code#{code} New Feature camel-sql - Add support for map based parameters Currently when using sql producer it expects the parameters in a given order.Though if the message body is map based, we can support key'ed style instead of index based.This allows us to bind t{code}select * from foo where id = #id# and country = #code#{code}
CAMEL-5976 camel-sql - Add support for batch consumer The camel-sql component can only produce. We should add support for batch consumer: http://camel.apache.org/batch-consumer.htmlThen people can use it for use-cases where they need to pickup new rows from table foo, and after processing the row(s) then delete/mark the rows as processed.This is a common use-case with JDBC. This is supported by camel-jpa. But would be nice with camel-sql, so people can do this with plain JDBC and SQL queries. New Feature camel-sql - Add support for batch consumer The camel-sql component can only produce. We should add support for batch consumer: http://camel.apache.org/batch-consumer.htmlThen people can use it for use-cases where they need to pickup new rows from table foo, and after processing the row(s) then delete/mark the rows as processed.This is a common use-case with JDBC. This is supported by camel-jpa. But would be nice with camel-sql, so people can do this with plain JDBC and SQL queries.
CAMEL-5972 OsgiServiceRegistry.lookupByType() should use BundleContext.getServiceReferences() OsgiServiceRegistry.lookupByType() should use BundleContext.getServiceReferences()The object name should be retrieved from the service property's. I suggest a property called "name".The filter "(name=*)" could be used to only return services with the property name. Improvement OsgiServiceRegistry.lookupByType() should use BundleContext.getServiceReferences() OsgiServiceRegistry.lookupByType() should use BundleContext.getServiceReferences()The object name should be retrieved from the service property's. I suggest a property called "name".The filter "(name=*)" could be used to only return services with the property name.
CAMEL-5969 OsgiServiceRegistry to lookup services with filter on name=blah OsgiServiceRegistry to lookup services with filter on name=blahWhen using the # bean resolver prefix in plain OSGi (not blueprint) the only way to lookup a service is by specifying the full registered class/interface name of that service.The OsgiServiceRegistry should also try and lookup a service like the OsgiComponentResolver does using a filter on a service property. I suggest that the filter be on a property called "name".This means the method public <T> T lookup(String name, Class<T> type) should try to lookup the service with the class from the type parameter and filter on "(name=" + name ")"... Improvement OsgiServiceRegistry to lookup services with filter on name=blah OsgiServiceRegistry to lookup services with filter on name=blahWhen using the # bean resolver prefix in plain OSGi (not blueprint) the only way to lookup a service is by specifying the full registered class/interface name of that service.The OsgiServiceRegistry should also try and lookup a service like the OsgiComponentResolver does using a filter on a service property. I suggest that the filter be on a property called "name".This means the method public <T> T lookup(String name, Class<T> type) should try to lookup the service with the class from the type parameter and filter on "(name=" + name ")"...
CAMEL-5967 support to specify the camelContext through the attribute of destination or conduite Current camel transport for CXF only support to specify the camel context reference as an element if we configure the transport from Spring. it could be more handy if we can specify the camel context from the attribute like blueprint support does. Improvement support to specify the camelContext through the attribute of destination or conduite Current camel transport for CXF only support to specify the camel context reference as an element if we configure the transport from Spring. it could be more handy if we can specify the camel context from the attribute like blueprint support does.
CAMEL-5962 xslt component - Should fallback and use same scheme prefix as endpoint configured for included resources  Loading resources from xslt using XsltResourceLoader should fallback and use same scheme prefix as configured on endpoint, if no prefix is given.eg if you configure the endpoint to be file based, then includes which has no prefix, should be file based as well.Currently we fallback always to classpath, which covers most use case. But if the end user are using file then it doesnt make sense to fallback to classpath. Improvement xslt component - Should fallback and use same scheme prefix as endpoint configured for included resources  Loading resources from xslt using XsltResourceLoader should fallback and use same scheme prefix as configured on endpoint, if no prefix is given.eg if you configure the endpoint to be file based, then includes which has no prefix, should be file based as well.Currently we fallback always to classpath, which covers most use case. But if the end user are using file then it doesnt make sense to fallback to classpath.
CAMEL-5960 Add routeId as function to simple language We have id, camelId etc. It would be nice with a routeId, so people easily can grab the route id, such as doing logging etc.{code}  from(...)     .log("Routing at ${routeId} with payload ${body}")     ...{code}Seehttp://camel.apache.org/simple Improvement Add routeId as function to simple language We have id, camelId etc. It would be nice with a routeId, so people easily can grab the route id, such as doing logging etc.{code}  from(...)     .log("Routing at ${routeId} with payload ${body}")     ...{code}Seehttp://camel.apache.org/simple
CAMEL-5959 Dead Letter Channel - Store failed route id on Exchange Seehttp://camel.465427.n5.nabble.com/Retrieve-failed-Route-from-deadLetterChannel-tp5725420.htmlWe should store the route id where we failed, this allows end users to get that as a detail if they route to another route as part of DLC. You can get the current route, but if you let DLC be a route, then its that route you get, and not the route that failed.So we need to store this as part of the RedeliveryErrorHandler logic inside camel-core.We do have failed endpoint store already. eg if it failed sending a message to an endpoint. But we lack the route id. Improvement Dead Letter Channel - Store failed route id on Exchange Seehttp://camel.465427.n5.nabble.com/Retrieve-failed-Route-from-deadLetterChannel-tp5725420.htmlWe should store the route id where we failed, this allows end users to get that as a detail if they route to another route as part of DLC. You can get the current route, but if you let DLC be a route, then its that route you get, and not the route that failed.So we need to store this as part of the RedeliveryErrorHandler logic inside camel-core.We do have failed endpoint store already. eg if it failed sending a message to an endpoint. But we lack the route id.
CAMEL-5958 Bindy ignores bean class type It looks like camel-bindy does not take into account the class specified in the method:    bindy(BindyType.Csv, MyCamelBeans.TEST.class)I have class MyCamelBeans which includes several "bindies" among which I have a really simple MyCamelBeans.TEST:    class MyCamelBeans {        @CsvRecord(separator=";",isOrdered=true)        public static final class TEST {            @DataField(trim=true,pos=  1) public String tradingDate;            @DataField(trim=true,pos=  2) public String isinCode;        }        ... some other @CsvRecord ....    }I also have some @FixedLengthRecord classes defined in the same package.If I run the following route:    from("file:data/test?noop=true&idempotent=true&fileName=test.csv&delay=60000")        .split(body(String.class).tokenize("\n")).streaming()        .unmarshal().bindy(BindyType.Csv, MyCamelBeans.TEST.class)        .to("log:DS?level=INFO&showHeaders=true");Camel (2.10.3) fails with an NPE:    java.lang.NullPointerException            at org.apache.camel.dataformat.bindy.BindyCsvFactory.setDefaultValuesForFields(BindyCsvFactory.java:583)            at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:230)if I remove the other bindies, camel-bindy works as expected. Looking at the code, I've found that in BindyAbstractFactory.java :    /**     * method uses to initialize the model representing the classes who will     * bind the data. This process will scan for classes according to the     * package name provided, check the annotated classes and fields.     *     * @throws Exception     */    public void initModel() throws Exception {        // Find classes defined as Model        if (packageNames != null)  {            initModelClasses(this.packageNames);        } else if (type != null) {            // use the package name from the type as it may refer to types in the same package            String pckName = type.getPackage().getName();            initModelClasses(pckName);        } else {            throw new IllegalArgumentException("Either packagenames or type should be configured");        }    }Looks like bindy scan the package even a class has been specified. Accordin to Claus, bindy needs to be refactored so it- requires the class type (no more packages)- uses the class type as root model- ... and initializes the model from the root, and follow andreferences to other classes (if the root has childs)This avoids picking up any other models.And we would know to marshal/unmarshal based on the root.  Improvement Bindy ignores bean class type It looks like camel-bindy does not take into account the class specified in the method:    bindy(BindyType.Csv, MyCamelBeans.TEST.class)I have class MyCamelBeans which includes several "bindies" among which I have a really simple MyCamelBeans.TEST:    class MyCamelBeans {        @CsvRecord(separator=";",isOrdered=true)        public static final class TEST {            @DataField(trim=true,pos=  1) public String tradingDate;            @DataField(trim=true,pos=  2) public String isinCode;        }        ... some other @CsvRecord ....    }I also have some @FixedLengthRecord classes defined in the same package.If I run the following route:    from("file:data/test?noop=true&idempotent=true&fileName=test.csv&delay=60000")        .split(body(String.class).tokenize("\n")).streaming()        .unmarshal().bindy(BindyType.Csv, MyCamelBeans.TEST.class)        .to("log:DS?level=INFO&showHeaders=true");Camel (2.10.3) fails with an NPE:    java.lang.NullPointerException            at org.apache.camel.dataformat.bindy.BindyCsvFactory.setDefaultValuesForFields(BindyCsvFactory.java:583)            at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:230)if I remove the other bindies, camel-bindy works as expected. Looking at the code, I've found that in BindyAbstractFactory.java :    /**     * method uses to initialize the model representing the classes who will     * bind the data. This process will scan for classes according to the     * package name provided, check the annotated classes and fields.     *     * @throws Exception     */    public void initModel() throws Exception {        // Find classes defined as Model        if (packageNames != null)  {            initModelClasses(this.packageNames);        } else if (type != null) {            // use the package name from the type as it may refer to types in the same package            String pckName = type.getPackage().getName();            initModelClasses(pckName);        } else {            throw new IllegalArgumentException("Either packagenames or type should be configured");        }    }Looks like bindy scan the package even a class has been specified. Accordin to Claus, bindy needs to be refactored so it- requires the class type (no more packages)- uses the class type as root model- ... and initializes the model from the root, and follow andreferences to other classes (if the root has childs)This avoids picking up any other models.And we would know to marshal/unmarshal based on the root. 
CAMEL-5955 Put the LocalAddress into the message header We need the LocalAddress just as the camel-mina provides.It is useful for resolving the issue of CAMEL-5951. Improvement Put the LocalAddress into the message header We need the LocalAddress just as the camel-mina provides.It is useful for resolving the issue of CAMEL-5951.
CAMEL-5954 Unify the variables which are exports to script The LanguageExpression and ScriptBuilder don't bind the same variables which could be used to access from Exchange. It could be better if they are using the same variables for script user. Improvement Unify the variables which are exports to script The LanguageExpression and ScriptBuilder don't bind the same variables which could be used to access from Exchange. It could be better if they are using the same variables for script user.
CAMEL-5945 Add delimiter to recipient list eip in Java DSL This allows to set the delimiter using the java dsl fluent builder style. Improvement Add delimiter to recipient list eip in Java DSL This allows to set the delimiter using the java dsl fluent builder style.
CAMEL-5940 camel-cache - Add option to cache component to easily configure ehcache XML file to load by default SeeBy default ehache.xml is loaded from classpath. We should make it possible to configure CacheComponent with a string option that refers to the resource to load.Then people can do something a like:{code}<bean id="cache" class="...CacheComponent">  <property name="configurationFile" value="classpath:com/foo/mycache.xml"/></bean>{code} Improvement camel-cache - Add option to cache component to easily configure ehcache XML file to load by default SeeBy default ehache.xml is loaded from classpath. We should make it possible to configure CacheComponent with a string option that refers to the resource to load.Then people can do something a like:{code}<bean id="cache" class="...CacheComponent">  <property name="configurationFile" value="classpath:com/foo/mycache.xml"/></bean>{code}
CAMEL-5939 camel-test-spring - Deprecate classes in junit4 package to avoid split package problem with OSGi We should deprecate the 2 classes in junit4, to avoid split package problem with OSGi. And then have these 2 classes in the spring package which only this bundle would have. Task camel-test-spring - Deprecate classes in junit4 package to avoid split package problem with OSGi We should deprecate the 2 classes in junit4, to avoid split package problem with OSGi. And then have these 2 classes in the spring package which only this bundle would have.
CAMEL-5938 MailConverters fails with uppercase content type TEXT/PLAIN Some email clients produce uppercase content types. Therefore converting the body to a String fails:TRACE [Camel - imaps://...] org.apache.camel.component.mail.MailBinding: Part #0: ContentType: TEXT/PLAIN; charset=utf-8INFO  [Camel - imaps://...] de.ordix: Exchange[ExchangePattern:InOnly, BodyType:javax.mail.internet.MimeMultipart, Body:javax.mail.internet.MimeMultipart@1d8c8b4]MailConverters.java (line 72)if (part.getContentType().startsWith("text")) {should also handle uppercase types. Best solution solution would be to ignore case e. g. by using (spring-core's) StringUtils.startsWithIgnoreCase.also pls see forum:http://camel.465427.n5.nabble.com/MailConverters-fails-with-uppercase-content-type-TEXT-PLAIN-td5724938.html Improvement MailConverters fails with uppercase content type TEXT/PLAIN Some email clients produce uppercase content types. Therefore converting the body to a String fails:TRACE [Camel - imaps://...] org.apache.camel.component.mail.MailBinding: Part #0: ContentType: TEXT/PLAIN; charset=utf-8INFO  [Camel - imaps://...] de.ordix: Exchange[ExchangePattern:InOnly, BodyType:javax.mail.internet.MimeMultipart, Body:javax.mail.internet.MimeMultipart@1d8c8b4]MailConverters.java (line 72)if (part.getContentType().startsWith("text")) {should also handle uppercase types. Best solution solution would be to ignore case e. g. by using (spring-core's) StringUtils.startsWithIgnoreCase.also pls see forum:http://camel.465427.n5.nabble.com/MailConverters-fails-with-uppercase-content-type-TEXT-PLAIN-td5724938.html
CAMEL-5937 Added sinceId option for camel-twitter pulling the status As current camel-twitter just store the sinceId in the memory, it will cause some trouble when the user restart the camel route after a while.It could be helpful if camel-twitter support the sinceId option across the endpoints.Here is the mail thread about it.http://camel.465427.n5.nabble.com/twitter-component-sinceid-parameter-tp5725013.html Improvement Added sinceId option for camel-twitter pulling the status As current camel-twitter just store the sinceId in the memory, it will cause some trouble when the user restart the camel route after a while.It could be helpful if camel-twitter support the sinceId option across the endpoints.Here is the mail thread about it.http://camel.465427.n5.nabble.com/twitter-component-sinceid-parameter-tp5725013.html
CAMEL-5935 clean up the camel schema We need to update the spring.schemas file with released version of camel.And we also need to check the schema web sit to see if all the released schemas are there. Task clean up the camel schema We need to update the spring.schemas file with released version of camel.And we also need to check the schema web sit to see if all the released schemas are there.
CAMEL-5934 Cleanup pom.xml to have maven plugins using properties for their versions so its easier to upgrade We have many maven plugins with hardcoded versions scattered in the pom.xml files. We should make this use properties so we have all the versions defined once, and easily to see and possible upgrade etc.And many of the plugins can be upgraded to newer releases. Task Cleanup pom.xml to have maven plugins using properties for their versions so its easier to upgrade We have many maven plugins with hardcoded versions scattered in the pom.xml files. We should make this use properties so we have all the versions defined once, and easily to see and possible upgrade etc.And many of the plugins can be upgraded to newer releases.
CAMEL-5933 Support Blueprint on Camel Transport of CXF  Camel Transport for CXF doesn't support blueprint out of box, we need to add support of it. Improvement Support Blueprint on Camel Transport of CXF  Camel Transport for CXF doesn't support blueprint out of box, we need to add support of it.
CAMEL-5932 Update camel-jpa for Spring 3.1 Spring 3.1 deprecated JpaTemplate and JpaCallback in favor of directly acting upon JPA's EntityManager.  Replace JpaTemplateTransactionStrategy and make other improvements. Improvement Update camel-jpa for Spring 3.1 Spring 3.1 deprecated JpaTemplate and JpaCallback in favor of directly acting upon JPA's EntityManager.  Replace JpaTemplateTransactionStrategy and make other improvements.
CAMEL-5931 Upgrade Camel features to Spring 3.1 as minimum version Spring 3.1 is now the default version out of the box. We should have that in Karaf features as well. Improvement Upgrade Camel features to Spring 3.1 as minimum version Spring 3.1 is now the default version out of the box. We should have that in Karaf features as well.
CAMEL-5930 Upgrade various camel-spring-xxx projects to latest Spring project releases There is a number of Spring projects we should upgrade. They now start requiring Spring 3.1+ as dependency. Though the older versions is not maintained anymore, as well Spring 3.0.x branch is dead as well. So we need to move on and upgrade in Camel project also. Improvement Upgrade various camel-spring-xxx projects to latest Spring project releases There is a number of Spring projects we should upgrade. They now start requiring Spring 3.1+ as dependency. Though the older versions is not maintained anymore, as well Spring 3.0.x branch is dead as well. So we need to move on and upgrade in Camel project also.
CAMEL-5929 camel-quartz - Add temporal window activation to route policies I have several routes that run at different times during the business day.  ACronScheduledRoutePolicy is used to control the polling schedule.  Forexample, the system polls for a file via FTP between 14:00 and 15:00 eachweek day - the file is not guaranteed to be there prior to that time per ourSLA with the vendor.The route policy is in place so that the system does not constantly badgerthe FTP server with useless requests.However, from time to time, we need to restart our server.  What I'veobserved is that if the server is restarted at 14:30, the route must bemanually enabled via JMX.  We actually have 20-30 routes and this is aburden for our support team; they often miss a route or two.What I'd like to have is a policy that says "run this route every n minutesfrom 14:00 - 15:00 each weekday" - and have it activated even we restart theserver at 14:30.  New Feature camel-quartz - Add temporal window activation to route policies I have several routes that run at different times during the business day.  ACronScheduledRoutePolicy is used to control the polling schedule.  Forexample, the system polls for a file via FTP between 14:00 and 15:00 eachweek day - the file is not guaranteed to be there prior to that time per ourSLA with the vendor.The route policy is in place so that the system does not constantly badgerthe FTP server with useless requests.However, from time to time, we need to restart our server.  What I'veobserved is that if the server is restarted at 14:30, the route must bemanually enabled via JMX.  We actually have 20-30 routes and this is aburden for our support team; they often miss a route or two.What I'd like to have is a policy that says "run this route every n minutesfrom 14:00 - 15:00 each weekday" - and have it activated even we restart theserver at 14:30. 
CAMEL-5924 Deprecated API is used in JClouds On these linesJCloudsComponent:79 JCloudsComponen:98method getProviderSpecificContext() is used. It is marked as deprecated and the new method is unwrap(), which should behave the same.The problem with this is using "transient" blobstore provider for testing purposes. Since it does not implement RestContext it fails with ClassCastException. Switching to unwrap() solves the problem.Consider updating to latest JClouds as well as there were some important bugfixes. Release 1.5.5 is promised quite soon. Improvement Deprecated API is used in JClouds On these linesJCloudsComponent:79 JCloudsComponen:98method getProviderSpecificContext() is used. It is marked as deprecated and the new method is unwrap(), which should behave the same.The problem with this is using "transient" blobstore provider for testing purposes. Since it does not implement RestContext it fails with ClassCastException. Switching to unwrap() solves the problem.Consider updating to latest JClouds as well as there were some important bugfixes. Release 1.5.5 is promised quite soon.
CAMEL-5923 Upgrade to string template 4.0 We should upgrade from 3.2 to 4.0.The syntax has changed so ppl need to adjust their templates.http://www.antlr.org/wiki/display/ST4/Templates#Templates-literals Task Upgrade to string template 4.0 We should upgrade from 3.2 to 4.0.The syntax has changed so ppl need to adjust their templates.http://www.antlr.org/wiki/display/ST4/Templates#Templates-literals
CAMEL-5921 Upgrade to twitter4j 3.0.x We should upgrade the twitter4j in camel-twitter from 2.2.5 to 3.0.x.There is some API changes, that means we need to change a bit of code, and as well remove the consumer timeline/public which is no longer in the API. Use the home or user timeline instead.Also the trends API has changed much more.We would need to remove the trends support, and re-add a new later. Task Upgrade to twitter4j 3.0.x We should upgrade the twitter4j in camel-twitter from 2.2.5 to 3.0.x.There is some API changes, that means we need to change a bit of code, and as well remove the consumer timeline/public which is no longer in the API. Use the home or user timeline instead.Also the trends API has changed much more.We would need to remove the trends support, and re-add a new later.
CAMEL-5919 Remove support for junit 3.x in Camel test components Related to CAMEL-5915 and http://camel.465427.n5.nabble.com/Re-svn-commit-r1426385-camel-trunk-components-camel-test-spring-pom-xml-tp5724658.htmlWe should remove the junit 3.x based classes from- camel-test- camel-test-springIts not in use anymore, and its just double work to maintain code base as we need to copy/paste the code. And since we had to move / delete some classes due CAMEL-5915 we can just as well do it now. Task Remove support for junit 3.x in Camel test components Related to CAMEL-5915 and http://camel.465427.n5.nabble.com/Re-svn-commit-r1426385-camel-trunk-components-camel-test-spring-pom-xml-tp5724658.htmlWe should remove the junit 3.x based classes from- camel-test- camel-test-springIts not in use anymore, and its just double work to maintain code base as we need to copy/paste the code. And since we had to move / delete some classes due CAMEL-5915 we can just as well do it now.
CAMEL-5915 camel-test-spring should not include the classes from camel-test camel-spring-test has the classes from the camel-test which is caused by it exports the wrong package. Task camel-test-spring should not include the classes from camel-test camel-spring-test has the classes from the camel-test which is caused by it exports the wrong package.
CAMEL-5914 Web console in distribution Hi, just wondering if web-console-standalone should be in the distro or not. According to the docs, it should, but I'm not so sure as it's a pretty big. Anyhow, I'll attach the patch if it's supposed to be in or change a docs to point people where they can find it if not. Task Web console in distribution Hi, just wondering if web-console-standalone should be in the distro or not. According to the docs, it should, but I'm not so sure as it's a pretty big. Anyhow, I'll attach the patch if it's supposed to be in or change a docs to point people where they can find it if not.
CAMEL-5912 Add url rewrite plugin to http components See CAMEL-5458A new urlRewrite option allows to plugin custom rewriters.This allow people to write their own, or use what we offers out of the box, such as a new camel-urlrewrite component that uses the http://www.tuckey.org/urlrewrite/ project. New Feature Add url rewrite plugin to http components See CAMEL-5458A new urlRewrite option allows to plugin custom rewriters.This allow people to write their own, or use what we offers out of the box, such as a new camel-urlrewrite component that uses the http://www.tuckey.org/urlrewrite/ project.
CAMEL-5911 seda/vm - Add option to discard message if no active consumers When using seda/vm queues, you may have 0..n active consumers. There may be use-cases where you want to discard a message if there is no current active consumers to process the message. New Feature seda/vm - Add option to discard message if no active consumers When using seda/vm queues, you may have 0..n active consumers. There may be use-cases where you want to discard a message if there is no current active consumers to process the message.
CAMEL-5910 Mail Producer should store the mail message id when it sends the message. Current MailProducer doesn't store the Mail message into the camel message header which cause some truble when the user want to access the message id[1].[1] http://camel.465427.n5.nabble.com/How-To-Get-The-SMTP-Message-ID-tp5724581.html Improvement Mail Producer should store the mail message id when it sends the message. Current MailProducer doesn't store the Mail message into the camel message header which cause some truble when the user want to access the message id[1].[1] http://camel.465427.n5.nabble.com/How-To-Get-The-SMTP-Message-ID-tp5724581.html
CAMEL-5906 camel-servlet - Create a camel filter for starting Camel without using Spring XML etc I have been toying with this idea for a while. And years ago I think we had a JIRA ticket similar to this.As Camel can run without Spring we ought to have a simple way of starting/stopping a CamelContext in a web-app without using Spring.For example using a servlet listener. And then have servlet-init parameters to configure the camel context, and refer to route builders and whatnot.Yes in the future CDI and other frameworks will also help with this. But that takes time to mature and for ppl to get familar to use. And web containers to support etc.Servlets is supported by any container and also old school containers. New Feature camel-servlet - Create a camel filter for starting Camel without using Spring XML etc I have been toying with this idea for a while. And years ago I think we had a JIRA ticket similar to this.As Camel can run without Spring we ought to have a simple way of starting/stopping a CamelContext in a web-app without using Spring.For example using a servlet listener. And then have servlet-init parameters to configure the camel context, and refer to route builders and whatnot.Yes in the future CDI and other frameworks will also help with this. But that takes time to mature and for ppl to get familar to use. And web containers to support etc.Servlets is supported by any container and also old school containers.
CAMEL-5904 Upgrade to Netty 3.6.1 Netty 3.6.0 changed a bit how it shutdown its resources. So its not an easy upgrade.Some of the tests is hanging etcTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.069 secRunning org.apache.camel.component.netty.NettyOptionTestProcess 1356085163560 is killed. Task Upgrade to Netty 3.6.1 Netty 3.6.0 changed a bit how it shutdown its resources. So its not an easy upgrade.Some of the tests is hanging etcTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.069 secRunning org.apache.camel.component.netty.NettyOptionTestProcess 1356085163560 is killed.
CAMEL-5903 Upgrade OSGi bundles with latest SMX bundle release The SMX team released a number of new bundles recently. We should upgrade our Karaf feature file to pickup these new releases. Task Upgrade OSGi bundles with latest SMX bundle release The SMX team released a number of new bundles recently. We should upgrade our Karaf feature file to pickup these new releases.
CAMEL-5902 HDFS Component page lists the incorrect Maven artifactId At the http://camel.apache.org/hdfs.html page the following is listed forthe HDFS Maven dependency<dependency>    <groupId>org.apache.camel</groupId>    <artifactId>camel-hadoop</artifactId>    <version>x.x.x</version>    <!-- use the same version as your Camel core version --></dependency>There is no artifactId camel-hadoop it should be camel-hdfs. Improvement HDFS Component page lists the incorrect Maven artifactId At the http://camel.apache.org/hdfs.html page the following is listed forthe HDFS Maven dependency<dependency>    <groupId>org.apache.camel</groupId>    <artifactId>camel-hadoop</artifactId>    <version>x.x.x</version>    <!-- use the same version as your Camel core version --></dependency>There is no artifactId camel-hadoop it should be camel-hdfs.
CAMEL-5901 camel-netty - Allow to turn netty producer pool on or off There may be situations where you do not want a producer Channel pool, but instead use a single shared Channel instead. New Feature camel-netty - Allow to turn netty producer pool on or off There may be situations where you do not want a producer Channel pool, but instead use a single shared Channel instead.
CAMEL-5898 Extend Java DSL for Groovy routes Extended Java DSL in camel-groovy for Groovy routes:* use Closures as argument for Processor, Expression, Predicate, or AggregationStrategy* add data formats for XmlSlurper and XmlParser * add TypeConverter for GStrings* depend on modularized groovy 2.0.x libs instead of groovy-allNot sure how the Groovy language relates to camel-script, or whether it has been superceded, so I left it as is. New Feature Extend Java DSL for Groovy routes Extended Java DSL in camel-groovy for Groovy routes:* use Closures as argument for Processor, Expression, Predicate, or AggregationStrategy* add data formats for XmlSlurper and XmlParser * add TypeConverter for GStrings* depend on modularized groovy 2.0.x libs instead of groovy-allNot sure how the Groovy language relates to camel-script, or whether it has been superceded, so I left it as is.
CAMEL-5896 camel-netty - Allow to configure netty options in uri using prefix This allows people to configure any of the many netty options, also the ones which we wont have a corresponding camel option for.We can use the uri prefix for that, so "option.xxx" becomes "xxx" option to netty. New Feature camel-netty - Allow to configure netty options in uri using prefix This allows people to configure any of the many netty options, also the ones which we wont have a corresponding camel option for.We can use the uri prefix for that, so "option.xxx" becomes "xxx" option to netty.
CAMEL-5891 Update camel-amqp to support 1.0 of the specification Update the AMQP Component to support AMQP 1.0 version of the specification Improvement Update camel-amqp to support 1.0 of the specification Update the AMQP Component to support AMQP 1.0 version of the specification
CAMEL-5889 Scala DSL: no tokenize("...") method This is related to issue https://issues.apache.org/jira/browse/CAMEL-5803It looks like the fix included tokenizeXML() method, but there is still not tokenize() :( I have a usecase where I have to split my in message body (text) by semi-colon character for downstream processing, so I need to be able to do something like the following in Scala DSL:split(_.in) tokenize(";")I fix would be very welcome, also, if there is a work around with TokenizeLanguage etc - please let me know, thank you! Improvement Scala DSL: no tokenize("...") method This is related to issue https://issues.apache.org/jira/browse/CAMEL-5803It looks like the fix included tokenizeXML() method, but there is still not tokenize() :( I have a usecase where I have to split my in message body (text) by semi-colon character for downstream processing, so I need to be able to do something like the following in Scala DSL:split(_.in) tokenize(";")I fix would be very welcome, also, if there is a work around with TokenizeLanguage etc - please let me know, thank you!
CAMEL-5886 camel-netty - Allow to configure the accept backlog for netty consumer Seehttp://stackoverflow.com/questions/8442166/how-to-allow-more-concurrent-client-connections-with-nettyWe should allow to configure the backlog New Feature camel-netty - Allow to configure the accept backlog for netty consumer Seehttp://stackoverflow.com/questions/8442166/how-to-allow-more-concurrent-client-connections-with-nettyWe should allow to configure the backlog
CAMEL-5884 camel-cxf - Allow to define which operationNames a given consumer services Currently when using a cxf consumer in a route, then all the operations is serviced by this route.This may confuse some people. As well some may want one route per operation.We should look into how we can support this.Today people would need to use the recipient list and direct endpoints to suport this. But many people dont know about this. See this example: http://camel.apache.org/cxf-tomcat-example.htmlI guess this is not so easy, as you would then have mutliple routes with the same CXF "webservice". But we would like to have this level of indirection.And then I guess if a operation name is not bound to any route, then a soap fault should be thrown. Or we should allow to let Camel fail on startup saying that operation XXX is not bound to any consumer/route. Or something like that. Or allow people to turn this on|off. New Feature camel-cxf - Allow to define which operationNames a given consumer services Currently when using a cxf consumer in a route, then all the operations is serviced by this route.This may confuse some people. As well some may want one route per operation.We should look into how we can support this.Today people would need to use the recipient list and direct endpoints to suport this. But many people dont know about this. See this example: http://camel.apache.org/cxf-tomcat-example.htmlI guess this is not so easy, as you would then have mutliple routes with the same CXF "webservice". But we would like to have this level of indirection.And then I guess if a operation name is not bound to any route, then a soap fault should be thrown. Or we should allow to let Camel fail on startup saying that operation XXX is not bound to any consumer/route. Or something like that. Or allow people to turn this on|off.
CAMEL-5881 FTP endpoints should support charset property like File endpoint does FTP endpoints should support charset property like the File endpoint does. Currently you have to remember to set the CamelCharsetName Exchange property if you want to have the message body transformed to another charset.See http://camel.465427.n5.nabble.com/Problem-w-FTP-producer-and-charset-td5723604.htmlI'll work on a patch and attach it later. Improvement FTP endpoints should support charset property like File endpoint does FTP endpoints should support charset property like the File endpoint does. Currently you have to remember to set the CamelCharsetName Exchange property if you want to have the message body transformed to another charset.See http://camel.465427.n5.nabble.com/Problem-w-FTP-producer-and-charset-td5723604.htmlI'll work on a patch and attach it later.
CAMEL-5874 Make sure the xmlrpc producer copy the header of in message to the out message As the in message header could be used when route the message from xmlrpc endpoint to other endpoint, we need to put the in message headers into the out message. Task Make sure the xmlrpc producer copy the header of in message to the out message As the in message header could be used when route the message from xmlrpc endpoint to other endpoint, we need to put the in message headers into the out message.
CAMEL-5873 Upgrade the CXF version to 2.7.1, 2.6.4, 2.5.7 As new release versions of CXF are out, we need to consider update the CXF version in camel. Task Upgrade the CXF version to 2.7.1, 2.6.4, 2.5.7 As new release versions of CXF are out, we need to consider update the CXF version in camel.
CAMEL-5872 camel-scala - Add convertBodyTo to its DSL Seehttp://stackoverflow.com/questions/13838921/how-to-do-type-conversion-with-the-scala-camel-dslTo make it easier for ppl to understand/migrate to Scala DSL, we should have the same eip names in scala as in java.  Improvement camel-scala - Add convertBodyTo to its DSL Seehttp://stackoverflow.com/questions/13838921/how-to-do-type-conversion-with-the-scala-camel-dslTo make it easier for ppl to understand/migrate to Scala DSL, we should have the same eip names in scala as in java. 
CAMEL-5868 simplifications pom blueprint camel archetype Like https://issues.apache.org/jira/browse/SMX4-759the same fix in IMHO need to be applied to Camel Maven Archetypes Task simplifications pom blueprint camel archetype Like https://issues.apache.org/jira/browse/SMX4-759the same fix in IMHO need to be applied to Camel Maven Archetypes
CAMEL-5863 camel-jms - Name of request reply classes for fixed queue names should be renamed These classes is named PersistentXXX, but you may not use persistent. So that is misleading. Instead the names should identify that we are using regular queues (eg not temporary queues). Maybe just use a DefaultXXX naming. As we have a TemporaryXXX for the temp queues.This is a bit misleading when you have logs that show thread names / class names. etc. Improvement camel-jms - Name of request reply classes for fixed queue names should be renamed These classes is named PersistentXXX, but you may not use persistent. So that is misleading. Instead the names should identify that we are using regular queues (eg not temporary queues). Maybe just use a DefaultXXX naming. As we have a TemporaryXXX for the temp queues.This is a bit misleading when you have logs that show thread names / class names. etc.
CAMEL-5862 camel-netty - Use attachments instead of StateLocal to store state on netty producer This is a little bit faster accordinly to Netty docs to use attachments instead of StateLocal. Improvement camel-netty - Use attachments instead of StateLocal to store state on netty producer This is a little bit faster accordinly to Netty docs to use attachments instead of StateLocal.
CAMEL-5859 Align commons JAR used by camel-hbase and camel-hdfs They use different versions of commons in maven pom.xml and what we use in karaf features. Also when using both you get mixed versions of same commons-xxx libraries. We should align this so they use the same defined from parent/pom.xml. Task Align commons JAR used by camel-hbase and camel-hdfs They use different versions of commons in maven pom.xml and what we use in karaf features. Also when using both you get mixed versions of same commons-xxx libraries. We should align this so they use the same defined from parent/pom.xml.
CAMEL-5857 Add server side encryption to header options when constructing an ObjectMetadata for a PUT in the S3Producer Amazon S3 offers server side encryption for objects placed in the buckets.This feature offers a great deal of robustness with a minimal amount of effort. This feature is enabled 'per object' by setting the encryption to use on the ObjectMetadata object during a PUT operation; all the heavily lifting is done by the S3 service.Minimal code changes are required for this improvement; an added constant to S3Constants, a check for header in the S3Producer and a write to header on the S3Endpoint. I have included a patch. As there is no current unit test for S3Producer and as mentioned in CAMEL-5781, no unit tests are added. Improvement Add server side encryption to header options when constructing an ObjectMetadata for a PUT in the S3Producer Amazon S3 offers server side encryption for objects placed in the buckets.This feature offers a great deal of robustness with a minimal amount of effort. This feature is enabled 'per object' by setting the encryption to use on the ObjectMetadata object during a PUT operation; all the heavily lifting is done by the S3 service.Minimal code changes are required for this improvement; an added constant to S3Constants, a check for header in the S3Producer and a write to header on the S3Endpoint. I have included a patch. As there is no current unit test for S3Producer and as mentioned in CAMEL-5781, no unit tests are added.
CAMEL-5853 Added CxfEndpointConfiguer to support configure the CXF endpoint programmatically  It could be useful if user wants to configure the CxfEndpoint directly without leverage the spring or blueprint configuration file. Improvement Added CxfEndpointConfiguer to support configure the CXF endpoint programmatically  It could be useful if user wants to configure the CxfEndpoint directly without leverage the spring or blueprint configuration file.
CAMEL-5849 Upgrade camel-hibernate to Hibernate 4.1.x Unless Hibernate 3.6.x is used for a specific reason, it'd be great to upgrade camel-hibernate to 4.1.x.  I already have this finished in my workspace (minor code changes w/ it) and would be willing to provide the patch.Is Spring compatibility the concern?  Technically they support Hibernate 4 as well.I'm also willing to maintain this component long term if there's interest.  I'm one of the Hibernate core developers (https://github.com/brmeyer) and use camel-hibernate in a few side projects.  I know most users typically use camel-jpa, but there are Hibernate-specific features that could certainly be rolled into camel-hibernate if it would be used. Improvement Upgrade camel-hibernate to Hibernate 4.1.x Unless Hibernate 3.6.x is used for a specific reason, it'd be great to upgrade camel-hibernate to 4.1.x.  I already have this finished in my workspace (minor code changes w/ it) and would be willing to provide the patch.Is Spring compatibility the concern?  Technically they support Hibernate 4 as well.I'm also willing to maintain this component long term if there's interest.  I'm one of the Hibernate core developers (https://github.com/brmeyer) and use camel-hibernate in a few side projects.  I know most users typically use camel-jpa, but there are Hibernate-specific features that could certainly be rolled into camel-hibernate if it would be used.
CAMEL-5847 camel-mongodb - Add converters for files or inputstreams Inserting files into MongoDB doesn't work like this:{code}from("file:///tmp/test/apachecon?runLoggingLevel=TRACE")    .to("mongodb:connectionBean?database=x&collection=y&operation=insert");{code}It requires an explicit {{.convertBodyTo(String.class)}}. The attached patch adds {{Converter}}s for File and InputStream object, detecting and supporting both {{JSON}} and {{BSON}} files/streams.The {{new String(input, "utf-8"))}} fragment seems a bit dodgy, but I don't really see a better way. Improvement camel-mongodb - Add converters for files or inputstreams Inserting files into MongoDB doesn't work like this:{code}from("file:///tmp/test/apachecon?runLoggingLevel=TRACE")    .to("mongodb:connectionBean?database=x&collection=y&operation=insert");{code}It requires an explicit {{.convertBodyTo(String.class)}}. The attached patch adds {{Converter}}s for File and InputStream object, detecting and supporting both {{JSON}} and {{BSON}} files/streams.The {{new String(input, "utf-8"))}} fragment seems a bit dodgy, but I don't really see a better way.
CAMEL-5845 camel-jms - Allow to configure disable messageID and messageTimestamp on JMS producer The JMS API has a few options on the JMS producer you can set to hint that you want to disable MessageID and/or MessageTimestamp. This hint may optimize on some vendors.See APIhttp://docs.oracle.com/javaee/6/api/javax/jms/MessageProducer.html New Feature camel-jms - Allow to configure disable messageID and messageTimestamp on JMS producer The JMS API has a few options on the JMS producer you can set to hint that you want to disable MessageID and/or MessageTimestamp. This hint may optimize on some vendors.See APIhttp://docs.oracle.com/javaee/6/api/javax/jms/MessageProducer.html
CAMEL-5843 camel-zookeeper - Add functionality to delete a node The zookeeper component can insert/update new nodes. We should also add support for deleting nodes.Seehttp://stackoverflow.com/questions/13660205/is-it-possible-and-if-so-how-to-delete-a-zookeeper-node-with-apache-camel New Feature camel-zookeeper - Add functionality to delete a node The zookeeper component can insert/update new nodes. We should also add support for deleting nodes.Seehttp://stackoverflow.com/questions/13660205/is-it-possible-and-if-so-how-to-delete-a-zookeeper-node-with-apache-camel
CAMEL-5842 camel-ldap - Allow to configure SSL using Camels SSL support Lets see if it would be possible for end users to use the great SSL support in Camel to configure the camel-ldap componentSee nabblehttp://camel.465427.n5.nabble.com/LDAP-connection-via-SSL-tp5723224.htmlAnd Camel SSL configurationhttp://camel.apache.org/camel-configuration-utilities.html New Feature camel-ldap - Allow to configure SSL using Camels SSL support Lets see if it would be possible for end users to use the great SSL support in Camel to configure the camel-ldap componentSee nabblehttp://camel.465427.n5.nabble.com/LDAP-connection-via-SSL-tp5723224.htmlAnd Camel SSL configurationhttp://camel.apache.org/camel-configuration-utilities.html
CAMEL-5840 Publish schema to www http://camel.apache.org/schema/spring/camel-spring-2.10.2.xsd gives a 404 Task Publish schema to www http://camel.apache.org/schema/spring/camel-spring-2.10.2.xsd gives a 404
CAMEL-5836 json data format - Let jackson be its implementaion Jackson is the better json library out there. We should let the json data format in Camel be implemented only by Jackson. As currently it defaults to xstream. And we could just add a new xstream-json data format to have the old logic there.Also we should allow to configure json jackson with custom serializers and whatnot people need.Other the time there has been various questions on json data format with jackson not supporting their uses-cases. Improvement json data format - Let jackson be its implementaion Jackson is the better json library out there. We should let the json data format in Camel be implemented only by Jackson. As currently it defaults to xstream. And we could just add a new xstream-json data format to have the old logic there.Also we should allow to configure json jackson with custom serializers and whatnot people need.Other the time there has been various questions on json data format with jackson not supporting their uses-cases.
CAMEL-5834 camel-cxf - Add missing information about new data formats to the documentation A number of new data formats is added to camel-cxf, but they are not documented. Task camel-cxf - Add missing information about new data formats to the documentation A number of new data formats is added to camel-cxf, but they are not documented.
CAMEL-5832 camel-jms - JMS consumer should detect JMSReplyTo being sending to itself to avoid circular looping If people do something stupid to send a message to a queue which has a JMSReplyTo that goes back to the same queue, then that message would go in looping (endless).We should maybe add some check for this, and add some option people can turn on|off this check. And if the check is enabled it would detect this and not send back a reply to itself.There may be some odd use-cases where people send back reply messages to the same queue. And maybe have some dynamic router logic that can break the chain when done. Improvement camel-jms - JMS consumer should detect JMSReplyTo being sending to itself to avoid circular looping If people do something stupid to send a message to a queue which has a JMSReplyTo that goes back to the same queue, then that message would go in looping (endless).We should maybe add some check for this, and add some option people can turn on|off this check. And if the check is enabled it would detect this and not send back a reply to itself.There may be some odd use-cases where people send back reply messages to the same queue. And maybe have some dynamic router logic that can break the chain when done.
CAMEL-5829 File consumer - Allow to configure logging level of read lock strategy The read lock strategy may log at WARN level if they cannot acquire a read lock on a file. Some ppl may want to lower this level to not have this in their logs.{code}  WARN  | org.apache.camel.component.file.strategy.FileChangedExclusiveReadLockStrategy | Cannot acquire read lock within 60000 millis. Will skip the file: GenericFile[\Projects\xxx\somefile.txt] -{code}We should add a new option which can be set on the read lock strategies. Just like you can set the timeout value.|| Option || Default || Description |||readLockLoggingLevel | WARN | *Camel 2.11:* Logging level used when a read lock could *not* be acquired. By default a WARN is logged. You can change this level, for example to OFF to not have any logging. This option is only applicable for readLock of types: changed, fileLock, rename |This option is only applicable for- FileChangedExclusiveReadLockStrategy- FileLockExclusiveReadLockStrategy- GenericFileRenameExclusiveReadLockStrategy Improvement File consumer - Allow to configure logging level of read lock strategy The read lock strategy may log at WARN level if they cannot acquire a read lock on a file. Some ppl may want to lower this level to not have this in their logs.{code}  WARN  | org.apache.camel.component.file.strategy.FileChangedExclusiveReadLockStrategy | Cannot acquire read lock within 60000 millis. Will skip the file: GenericFile[\Projects\xxx\somefile.txt] -{code}We should add a new option which can be set on the read lock strategies. Just like you can set the timeout value.|| Option || Default || Description |||readLockLoggingLevel | WARN | *Camel 2.11:* Logging level used when a read lock could *not* be acquired. By default a WARN is logged. You can change this level, for example to OFF to not have any logging. This option is only applicable for readLock of types: changed, fileLock, rename |This option is only applicable for- FileChangedExclusiveReadLockStrategy- FileLockExclusiveReadLockStrategy- GenericFileRenameExclusiveReadLockStrategy
CAMEL-5828 Offer LMAX Disruptor pattern as an endpoint in CAMEL My system is an hybrid of CAMEL and LMAX Disruptor, where threads consuming from LMAX ringbuffer are feeding a "pool" of SEDA queues in a round-robin fashion.  This system operates at very high-speed such as consumers from the SEDA queues and their producers are constantly blocking on the queues.  Having a non-blocking, high-performance endpoint like LMAX Disruptor would be a great addition to CAMEL.LMAX Disruptor website: http://lmax-exchange.github.com/disruptor/ New Feature Offer LMAX Disruptor pattern as an endpoint in CAMEL My system is an hybrid of CAMEL and LMAX Disruptor, where threads consuming from LMAX ringbuffer are feeding a "pool" of SEDA queues in a round-robin fashion.  This system operates at very high-speed such as consumers from the SEDA queues and their producers are constantly blocking on the queues.  Having a non-blocking, high-performance endpoint like LMAX Disruptor would be a great addition to CAMEL.LMAX Disruptor website: http://lmax-exchange.github.com/disruptor/
CAMEL-5827 camel-bindy - Handle implied-decimal values The communication with some legacy systems often relies on old protocols and formats not easy to change and among that you may have to deal with fixed lenght records on which decimal numbers are not represented with a decimal separator but the number of decimal places is defined by the protocol definition (e.g. COBOL copy-book).Example:@DataField(pos = 1, length = 5, precision = 2, implied-decimal-separator = true)private BigDecimal amount;The string "12345" maps to 123.45 in Java.  New Feature camel-bindy - Handle implied-decimal values The communication with some legacy systems often relies on old protocols and formats not easy to change and among that you may have to deal with fixed lenght records on which decimal numbers are not represented with a decimal separator but the number of decimal places is defined by the protocol definition (e.g. COBOL copy-book).Example:@DataField(pos = 1, length = 5, precision = 2, implied-decimal-separator = true)private BigDecimal amount;The string "12345" maps to 123.45 in Java. 
CAMEL-5824 camel-hbase - HBase data access performance improvement In testing hbase client using camel-hbase component,data put performance is low.( about 20 put operation / second, I use Core i7 2700K machine.)I confirmed performance bottleneck.And I find bottleneck below- Everytime camel-hbase component put data,  camel-hbase component creates and closes HTableInterface.- But HTableInterface create cost is high.   So camel-hbase component performance is low.Performance problem is fixed by using HTablePool at HBaseProducer,data put performance is improved 20 operetion/second to 200 operation/second.Modified source is below( and attach patchfile.txt)- HBaseProducer.java(orig)----------------------------104            table.close();----------------------------- HBaseProducer.java(improved)----------------------------104            tablePool.putTable(table);---------------------------- Improvement camel-hbase - HBase data access performance improvement In testing hbase client using camel-hbase component,data put performance is low.( about 20 put operation / second, I use Core i7 2700K machine.)I confirmed performance bottleneck.And I find bottleneck below- Everytime camel-hbase component put data,  camel-hbase component creates and closes HTableInterface.- But HTableInterface create cost is high.   So camel-hbase component performance is low.Performance problem is fixed by using HTablePool at HBaseProducer,data put performance is improved 20 operetion/second to 200 operation/second.Modified source is below( and attach patchfile.txt)- HBaseProducer.java(orig)----------------------------104            table.close();----------------------------- HBaseProducer.java(improved)----------------------------104            tablePool.putTable(table);----------------------------
CAMEL-5822 Add JMX operation to reset throughput logger When using the throughput logger (eg send to log endpoint with groupSize=100 etc) then we log throughputs to the log.What we need is a JMX operation to reset the stats, so the throughput can be reset and use current progress.For example after warming up the system for a while. Its nice to reset the stats to get it refreshed. New Feature Add JMX operation to reset throughput logger When using the throughput logger (eg send to log endpoint with groupSize=100 etc) then we log throughputs to the log.What we need is a JMX operation to reset the stats, so the throughput can be reset and use current progress.For example after warming up the system for a while. Its nice to reset the stats to get it refreshed.
CAMEL-5820 Allow to use property placeholders in <route> id attribute See nabblehttp://camel.465427.n5.nabble.com/Dynamic-route-ids-with-Spring-DSL-tp5722975.htmlThis would allow people to set ids of their routes using placeholders. New Feature Allow to use property placeholders in <route> id attribute See nabblehttp://camel.465427.n5.nabble.com/Dynamic-route-ids-with-Spring-DSL-tp5722975.htmlThis would allow people to set ids of their routes using placeholders.
CAMEL-5819 camel-netty - Add timeout option See nabblehttp://camel.465427.n5.nabble.com/camel-netty-timeout-handler-tp5723149.htmlWe should add the timeout option to netty producer.Netty has partial support for timeout. But would have to check how we can better tap into thishttp://static.netty.io/4.0/api/io/netty/handler/timeout/package-frame.html New Feature camel-netty - Add timeout option See nabblehttp://camel.465427.n5.nabble.com/camel-netty-timeout-handler-tp5723149.htmlWe should add the timeout option to netty producer.Netty has partial support for timeout. But would have to check how we can better tap into thishttp://static.netty.io/4.0/api/io/netty/handler/timeout/package-frame.html
CAMEL-5817 LDAP component that is able not only to read from LDAP, but also bind/unbind nodes There is a need for an LDAP component capable of more than just look-ups.I've already developed such a component, the issue is created just in order to contribute it to Camel. New Feature LDAP component that is able not only to read from LDAP, but also bind/unbind nodes There is a need for an LDAP component capable of more than just look-ups.I've already developed such a component, the issue is created just in order to contribute it to Camel.
CAMEL-5815 camel-spring-ws - Support for WS-Addressing Action The camel spring-ws consumer doesn't currently support the WS-Addressing Action and camel cannot dispatch such a message properly. There is only one workaround available using a xpath, which is not a very straight forward solution.Based on my previous experience with the patch for attachments and headers I would like to implement this functionality.Please let me know if you have any comments or ideas that are left.In the solution I would like to implement a new universal endpoint mapping key:action which will act as the same as the key soapaction but it will add also a possibility to retrieve action from soap wsa:action header instead of current http SOAPAction.BTW: Are there any ideas how should be supported wsa:replyTo inside the camel-spring-ws or how should be supported other attributes of WS-Addressing?Cheers,Andrej New Feature camel-spring-ws - Support for WS-Addressing Action The camel spring-ws consumer doesn't currently support the WS-Addressing Action and camel cannot dispatch such a message properly. There is only one workaround available using a xpath, which is not a very straight forward solution.Based on my previous experience with the patch for attachments and headers I would like to implement this functionality.Please let me know if you have any comments or ideas that are left.In the solution I would like to implement a new universal endpoint mapping key:action which will act as the same as the key soapaction but it will add also a possibility to retrieve action from soap wsa:action header instead of current http SOAPAction.BTW: Are there any ideas how should be supported wsa:replyTo inside the camel-spring-ws or how should be supported other attributes of WS-Addressing?Cheers,Andrej
CAMEL-5814 support to configure the XmlRpcClient XmlRpcClient should be able to configured with URI options or some pluggable interface. Sub-task support to configure the XmlRpcClient XmlRpcClient should be able to configured with URI options or some pluggable interface.
CAMEL-5813 Add support to convert from a Flatpack Dataset to an XML Document This will add a converter to the flatpack component to support conversion to an XML Document. The document will differ based on whether or not the "splitRows" option was selected. If it was selected there will be multiple documents, each on with either a <DatasetHeader>, <DatasetRecord> or <DatasetTrailer> element. If the splitRows option is false there will be a single document with <Dataset> element containing 1 -> * of <DatasetHeader>, <DatasetRecord> or <DatasetTrailer> elements.  Improvement Add support to convert from a Flatpack Dataset to an XML Document This will add a converter to the flatpack component to support conversion to an XML Document. The document will differ based on whether or not the "splitRows" option was selected. If it was selected there will be multiple documents, each on with either a <DatasetHeader>, <DatasetRecord> or <DatasetTrailer> element. If the splitRows option is false there will be a single document with <Dataset> element containing 1 -> * of <DatasetHeader>, <DatasetRecord> or <DatasetTrailer> elements. 
CAMEL-5812 Add getContext() method to ProducerTemplate interface Relative to issue SMX4-1281 and CAMEL-5299, CamelContextAware interface doesn't work correctly on blueprint+servicemix and so could be helpful permit to retrieve CamelContext from ProducerTemplate, in this way through @EndpointInjection i can inject ProducerTemplate object and then on my method do something like this:CamelContext context = producer.getContext();Currently, a workaround is this:CamelContext context = ((DefaultProducerTemplate)producer).getContext();but a clean solution is best.On DefaultProducerTemplate is already available getContext so add getContext() on ProducerTemplate interface is easy (I don't know what are others classes that implements ProducerTemplate).I hope for this in camel-2.10.3 (and on smx-4.5.x) :)Thanks New Feature Add getContext() method to ProducerTemplate interface Relative to issue SMX4-1281 and CAMEL-5299, CamelContextAware interface doesn't work correctly on blueprint+servicemix and so could be helpful permit to retrieve CamelContext from ProducerTemplate, in this way through @EndpointInjection i can inject ProducerTemplate object and then on my method do something like this:CamelContext context = producer.getContext();Currently, a workaround is this:CamelContext context = ((DefaultProducerTemplate)producer).getContext();but a clean solution is best.On DefaultProducerTemplate is already available getContext so add getContext() on ProducerTemplate interface is easy (I don't know what are others classes that implements ProducerTemplate).I hope for this in camel-2.10.3 (and on smx-4.5.x) :)Thanks
CAMEL-5811 Forced stax implementation = ClassNotFoundException when the application shuts down When a Stax implementation is forced for your project (ex: Woodstox), then an exception is thrown when the application shuts down.How to reproduce:In your application classpath, create the following files:META-INF\services\javax.xml.stream.XMLEventFactoryMETA-INF\services\javax.xml.stream.XMLInputFactoryMETA-INF\services\javax.xml.stream.XMLOuputFactoryThen edit each file and set its content:in javax.xml.stream.XMLEventFactory set com.ctc.wstx.stax.WstxEventFactoryin javax.xml.stream.XMLInputFactory set com.ctc.wstx.stax.WstxInputFactoryin javax.xml.stream.XMLOuputFactory set com.ctc.wstx.stax.WstxOutputFactoryException:java.lang.ClassNotFoundException: org.apache.xalan.xsltc.trax.DOM2SAX	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1680) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1526) [catalina.jar:6.0.33]	at org.apache.camel.util.ObjectHelper.doLoadClass(ObjectHelper.java:816) [camel-core-2.10.2.jar:2.10.2]	at org.apache.camel.util.ObjectHelper.loadClass(ObjectHelper.java:741) [camel-core-2.10.2.jar:2.10.2]	at org.apache.camel.converter.jaxp.XmlConverter.<clinit>(XmlConverter.java:95) [camel-core-2.10.2.jar:2.10.2]	at sun.misc.Unsafe.ensureClassInitialized(Native Method) [na:1.6.0_22]	at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:25) [na:1.6.0_22]	at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:122) [na:1.6.0_22]	at java.lang.reflect.Field.acquireFieldAccessor(Field.java:918) [na:1.6.0_22]	at java.lang.reflect.Field.getFieldAccessor(Field.java:899) [na:1.6.0_22]	at java.lang.reflect.Field.get(Field.java:358) [na:1.6.0_22]	at org.apache.catalina.loader.WebappClassLoader.clearReferencesStaticFinal(WebappClassLoader.java:2037) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1929) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1833) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappLoader.stop(WebappLoader.java:740) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4920) [catalina.jar:6.0.33]	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) [catalina.jar:6.0.33]	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:468) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardService.stop(StandardService.java:604) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardServer.stop(StandardServer.java:788) [catalina.jar:6.0.33]	at org.apache.catalina.startup.Catalina.stop(Catalina.java:662) [catalina.jar:6.0.33]	at org.apache.catalina.startup.Catalina.start(Catalina.java:629) [catalina.jar:6.0.33]	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_22]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_22]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_22]	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_22]	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) [bootstrap.jar:6.0.33]	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) [bootstrap.jar:6.0.33] Improvement Forced stax implementation = ClassNotFoundException when the application shuts down When a Stax implementation is forced for your project (ex: Woodstox), then an exception is thrown when the application shuts down.How to reproduce:In your application classpath, create the following files:META-INF\services\javax.xml.stream.XMLEventFactoryMETA-INF\services\javax.xml.stream.XMLInputFactoryMETA-INF\services\javax.xml.stream.XMLOuputFactoryThen edit each file and set its content:in javax.xml.stream.XMLEventFactory set com.ctc.wstx.stax.WstxEventFactoryin javax.xml.stream.XMLInputFactory set com.ctc.wstx.stax.WstxInputFactoryin javax.xml.stream.XMLOuputFactory set com.ctc.wstx.stax.WstxOutputFactoryException:java.lang.ClassNotFoundException: org.apache.xalan.xsltc.trax.DOM2SAX	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1680) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1526) [catalina.jar:6.0.33]	at org.apache.camel.util.ObjectHelper.doLoadClass(ObjectHelper.java:816) [camel-core-2.10.2.jar:2.10.2]	at org.apache.camel.util.ObjectHelper.loadClass(ObjectHelper.java:741) [camel-core-2.10.2.jar:2.10.2]	at org.apache.camel.converter.jaxp.XmlConverter.<clinit>(XmlConverter.java:95) [camel-core-2.10.2.jar:2.10.2]	at sun.misc.Unsafe.ensureClassInitialized(Native Method) [na:1.6.0_22]	at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:25) [na:1.6.0_22]	at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:122) [na:1.6.0_22]	at java.lang.reflect.Field.acquireFieldAccessor(Field.java:918) [na:1.6.0_22]	at java.lang.reflect.Field.getFieldAccessor(Field.java:899) [na:1.6.0_22]	at java.lang.reflect.Field.get(Field.java:358) [na:1.6.0_22]	at org.apache.catalina.loader.WebappClassLoader.clearReferencesStaticFinal(WebappClassLoader.java:2037) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1929) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1833) [catalina.jar:6.0.33]	at org.apache.catalina.loader.WebappLoader.stop(WebappLoader.java:740) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4920) [catalina.jar:6.0.33]	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) [catalina.jar:6.0.33]	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:468) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardService.stop(StandardService.java:604) [catalina.jar:6.0.33]	at org.apache.catalina.core.StandardServer.stop(StandardServer.java:788) [catalina.jar:6.0.33]	at org.apache.catalina.startup.Catalina.stop(Catalina.java:662) [catalina.jar:6.0.33]	at org.apache.catalina.startup.Catalina.start(Catalina.java:629) [catalina.jar:6.0.33]	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_22]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_22]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_22]	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_22]	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) [bootstrap.jar:6.0.33]	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) [bootstrap.jar:6.0.33]
CAMEL-5809 camel-jms - Allow concurrentConsumers on listener on request/reply over JMS When doing request/reply over JMS then by default a single threaded listener is used to orchestrate the reply as they come back. If you want to process the reply message concurrently, you would have to use threads EIP as well.However we should allow end users to configure the concurrentConsumer/maxConcurrentConsumers options.This can be supposed for Exclusive reply queues, but would be more troublesome for shared reply queues. We had issues with this in the past. Improvement camel-jms - Allow concurrentConsumers on listener on request/reply over JMS When doing request/reply over JMS then by default a single threaded listener is used to orchestrate the reply as they come back. If you want to process the reply message concurrently, you would have to use threads EIP as well.However we should allow end users to configure the concurrentConsumer/maxConcurrentConsumers options.This can be supposed for Exclusive reply queues, but would be more troublesome for shared reply queues. We had issues with this in the past.
CAMEL-5808 camel-ahc - Add option to set buffer size The camel-ahc component uses buffers to transfer data to/from AHC client. These buffers uses the default initial size from the JDK which is very low.We should add option to configure this size. And let it default be 4kb. Improvement camel-ahc - Add option to set buffer size The camel-ahc component uses buffers to transfer data to/from AHC client. These buffers uses the default initial size from the JDK which is very low.We should add option to configure this size. And let it default be 4kb.
CAMEL-5807 Data format for Base64 encode/decode It would be nice with an out of the box data format that can decode/encode to Base64.For example using Commons Codechttp://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Base64.htmlIt has a number of options to set line length etc. that should be configurable.Seehttp://stackoverflow.com/questions/13288461/fusesource-how-to-encode-decode-base64-within-a-route New Feature Data format for Base64 encode/decode It would be nice with an out of the box data format that can decode/encode to Base64.For example using Commons Codechttp://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Base64.htmlIt has a number of options to set line length etc. that should be configurable.Seehttp://stackoverflow.com/questions/13288461/fusesource-how-to-encode-decode-base64-within-a-route
CAMEL-5806 DefaultHttpBinding shouldn't assume null payload if HttpMethod == GET Jetty Consumer: DefaultHttpBinding#parseBody inserts a null body into the message if the incoming request is for HTTP Method GET.If I'm not mistaken, according to the HTTP spec the payload is only null if the Content-Length header is 0 or if it doesn't exist. Hence, we have a shortcoming in the Camel HTTP components.Even though it's unusual, there are reasons why a client could send payload with a GET request. Take a look at the [search operation|http://www.elasticsearch.org/guide/reference/api/search/] in the Elastic Search API, as an example. Improvement DefaultHttpBinding shouldn't assume null payload if HttpMethod == GET Jetty Consumer: DefaultHttpBinding#parseBody inserts a null body into the message if the incoming request is for HTTP Method GET.If I'm not mistaken, according to the HTTP spec the payload is only null if the Content-Length header is 0 or if it doesn't exist. Hence, we have a shortcoming in the Camel HTTP components.Even though it's unusual, there are reasons why a client could send payload with a GET request. Take a look at the [search operation|http://www.elasticsearch.org/guide/reference/api/search/] in the Elastic Search API, as an example.
CAMEL-5805 OSGi support of camel-xmlrpc We need provide camel-xmlrpc featureand xmlrpc-client bundle for user to use. Sub-task OSGi support of camel-xmlrpc We need provide camel-xmlrpc featureand xmlrpc-client bundle for user to use.
CAMEL-5803 Scala DSL splitter does not support tokenizeXML The Scala DSL does not properly support the splitter for tokenize and tokenizeXML.  The DSL should be modified to allow this:{code}from("direct:a").split().tokenizeXML("order").parallelProcessing().streaming().to("direct:test"){code}or this:{code}from("direct:a").split().tokenize("\n").parallelProcessing().streaming().to("direct:test"){code} Improvement Scala DSL splitter does not support tokenizeXML The Scala DSL does not properly support the splitter for tokenize and tokenizeXML.  The DSL should be modified to allow this:{code}from("direct:a").split().tokenizeXML("order").parallelProcessing().streaming().to("direct:test"){code}or this:{code}from("direct:a").split().tokenize("\n").parallelProcessing().streaming().to("direct:test"){code}
CAMEL-5801 Make it easy to configure thread name pattern in XML DSL If you want to change default thread naming pattern you would need to use a <bean> tag in XML DSL. We should make this easier with a new attribute on <camelContext> to set this.<camelContext threadNamePattern="xxxX" ...>We have an attribute already for setting JMX naming pattern. Seehttp://stackoverflow.com/questions/13372675/configure-camel-thread-names-with-spring-dsl Improvement Make it easy to configure thread name pattern in XML DSL If you want to change default thread naming pattern you would need to use a <bean> tag in XML DSL. We should make this easier with a new attribute on <camelContext> to set this.<camelContext threadNamePattern="xxxX" ...>We have an attribute already for setting JMX naming pattern. Seehttp://stackoverflow.com/questions/13372675/configure-camel-thread-names-with-spring-dsl
CAMEL-5793 Clients referring to seda: endpoint without options in URI, create implicit endpoints Create a "from()" endpoint with configuration:{code} from("seda:something?size=10000&blockWhenFull=true")...{code}Let clients push to the endpoint without options: {code} to("seda:something")... {code}Camel then creates two seda endpoints: one bounded (with options) and one unbounded.Both endpoints receive messages from the client, but the unbounded one doesn't seem to do much other than buffer things?Possible this leads to duplicates on the process following "from" (not tested).For our case, this lead to an OOM under an extreme (200-300% of expected peak) load test.Will attach screenshots from jVisualVM. Improvement Clients referring to seda: endpoint without options in URI, create implicit endpoints Create a "from()" endpoint with configuration:{code} from("seda:something?size=10000&blockWhenFull=true")...{code}Let clients push to the endpoint without options: {code} to("seda:something")... {code}Camel then creates two seda endpoints: one bounded (with options) and one unbounded.Both endpoints receive messages from the client, but the unbounded one doesn't seem to do much other than buffer things?Possible this leads to duplicates on the process following "from" (not tested).For our case, this lead to an OOM under an extreme (200-300% of expected peak) load test.Will attach screenshots from jVisualVM.
CAMEL-5792 Validator component - Error loading resource on windows Doing CI tests on Windows spotted this on multiple occasions. It may be an issue in the Camel validator component itself.Test Name   Duration   Age   >>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeParentSchemaImport 	0.647	1>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testDotSlashSchemaImport 	0.08	1>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeDoubleSlashSchemaImport 	0.067	1{code}org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> DoTry[[To[validator:org/apache/camel/component/validator/doubleslash/child.xsd], To[mock:valid], DoCatch[ [class org.apache.camel.ValidationException] -> [To[mock:invalid]]], DoFinally[[To[mock:finally]]]]] <<< in route: Route[[From[direct:start]] -> [DoTry[[To[validator:org/apach... because of Failed to resolve endpoint: validator://org/apache/camel/component/validator/doubleslash/child.xsd due to: java.io.FileNotFoundException: Cannot find resource in classpath for URI: org/apache/camel/component/validator/doubleslash/.//parent.xsd	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:873)	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:723)	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1795)	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:667)	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337)	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264)	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:629)	at org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeDoubleSlashSchemaImport(ValidatorSchemaImportTest.java:98){code} Test Validator component - Error loading resource on windows Doing CI tests on Windows spotted this on multiple occasions. It may be an issue in the Camel validator component itself.Test Name   Duration   Age   >>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeParentSchemaImport 	0.647	1>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testDotSlashSchemaImport 	0.08	1>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeDoubleSlashSchemaImport 	0.067	1{code}org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> DoTry[[To[validator:org/apache/camel/component/validator/doubleslash/child.xsd], To[mock:valid], DoCatch[ [class org.apache.camel.ValidationException] -> [To[mock:invalid]]], DoFinally[[To[mock:finally]]]]] <<< in route: Route[[From[direct:start]] -> [DoTry[[To[validator:org/apach... because of Failed to resolve endpoint: validator://org/apache/camel/component/validator/doubleslash/child.xsd due to: java.io.FileNotFoundException: Cannot find resource in classpath for URI: org/apache/camel/component/validator/doubleslash/.//parent.xsd	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:873)	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:723)	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1795)	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:667)	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337)	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264)	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:629)	at org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeDoubleSlashSchemaImport(ValidatorSchemaImportTest.java:98){code}
CAMEL-5791 Adding blueprint based camel-cxf tests using camel-test-blueprint Adding some blueprint scenario tests for camel-cxf using camel-test-blueprint.I put this in a separate test-only component under the tests folder. I can't put the test classes directly within camel-cxf because of the way how the bundle context is generated, namely the jars on the classpath are scanned and added to the context. Hence, the tests are in a separate component that refer to all the bundle jars that they need.I don't know if the tests folder is the the right location for this test component, though. Improvement Adding blueprint based camel-cxf tests using camel-test-blueprint Adding some blueprint scenario tests for camel-cxf using camel-test-blueprint.I put this in a separate test-only component under the tests folder. I can't put the test classes directly within camel-cxf because of the way how the bundle context is generated, namely the jars on the classpath are scanned and added to the context. Hence, the tests are in a separate component that refer to all the bundle jars that they need.I don't know if the tests folder is the the right location for this test component, though.
CAMEL-5790 aws-s3 should support retrieving a single object request Currently, it aws-s3 tries to list objects and if that fails it attempts to create a new bucket.  This logic shouldn't be done by default. Also, you may only want to download a single file and if the listing fails, you can't do so.For example, this code is currently causing a 404 in the aws-s3 endpoint.  This keeps the component from ever downloading anything, even the bucket already exists. I am not sure why this fails.{code}getS3Client().listObjects(new ListObjectsRequest(bucketName, null, null, null, 0));{code}However, if I change the code to download a single file using the same bucket name, it works.{code}getS3Client().getObject(new GetObjectRequest(bucketName, filename));{code} Improvement aws-s3 should support retrieving a single object request Currently, it aws-s3 tries to list objects and if that fails it attempts to create a new bucket.  This logic shouldn't be done by default. Also, you may only want to download a single file and if the listing fails, you can't do so.For example, this code is currently causing a 404 in the aws-s3 endpoint.  This keeps the component from ever downloading anything, even the bucket already exists. I am not sure why this fails.{code}getS3Client().listObjects(new ListObjectsRequest(bucketName, null, null, null, 0));{code}However, if I change the code to download a single file using the same bucket name, it works.{code}getS3Client().getObject(new GetObjectRequest(bucketName, filename));{code}
CAMEL-5788 PGP dataformat should support take the key parameter form message header dynamically. Current PGP dataformat cannot take keyfile userid and username parameters from the message header dynamically, we need to update the dataformat to provide this kind of feature.Here is the mail thread[1] about it[1]http://camel.465427.n5.nabble.com/How-to-set-the-dynamic-key-information-in-camel-PGP-encryption-decryption-tp5722562.html Improvement PGP dataformat should support take the key parameter form message header dynamically. Current PGP dataformat cannot take keyfile userid and username parameters from the message header dynamically, we need to update the dataformat to provide this kind of feature.Here is the mail thread[1] about it[1]http://camel.465427.n5.nabble.com/How-to-set-the-dynamic-key-information-in-camel-PGP-encryption-decryption-tp5722562.html
CAMEL-5787 Remove non Camel JARs from distro See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Remove-non-Camel-JARs-from-binary-distro-tp5722218.htmlWe should not include 3rd party JARs in the distro, as the examples is Maven based and will download on the fly what is needed.There is a Jasypt tool which can be run from command line, so we may need to leave the slf4j-api in place which is mandatory dependency. Improvement Remove non Camel JARs from distro See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Remove-non-Camel-JARs-from-binary-distro-tp5722218.htmlWe should not include 3rd party JARs in the distro, as the examples is Maven based and will download on the fly what is needed.There is a Jasypt tool which can be run from command line, so we may need to leave the slf4j-api in place which is mandatory dependency.
CAMEL-5783 option to add bundle directives in the generated test bundles by camel-test-blueprint The generated test bundle by camel-test-blueprint has the plain test class name as the bundle symbolic name in its manifest.Some test cases may require bundle directives to be added to the bundle symbolic name entry in the manifest.One such test case is for disabling xml validation.To support such blueprint test cases, I would like to add an option in CamelBlueprintTestSupport to customize the bundle directives. Improvement option to add bundle directives in the generated test bundles by camel-test-blueprint The generated test bundle by camel-test-blueprint has the plain test class name as the bundle symbolic name in its manifest.Some test cases may require bundle directives to be added to the bundle symbolic name entry in the manifest.One such test case is for disabling xml validation.To support such blueprint test cases, I would like to add an option in CamelBlueprintTestSupport to customize the bundle directives.
CAMEL-5781 limitaions on s3 component. no means to specify acl on created object. objects do not inherit acl from the bucket they belong to. When using s3 component to create new object on amazon bucket, there is no means to specify acl that will be applied to this newly created object. s3 objects do not inherit acl applied to the bucket they belong to. in s3 camel component (enpoint) we can specify bucket policy but not objects acl.the limitation is in s3producer.there is an attachment file (patch) to fix this quickly and whith little modifications to the existing code. but i think that we need to enhance the design of this component to be more flexible and rely on strategy that executes requests to interact with s3.for now there is no tests for s3producer in camel-aws thus i don't supply a unit test.if we enhance the design we can change or improve this layer with less effort. and we can do tests obviously.   Improvement limitaions on s3 component. no means to specify acl on created object. objects do not inherit acl from the bucket they belong to. When using s3 component to create new object on amazon bucket, there is no means to specify acl that will be applied to this newly created object. s3 objects do not inherit acl applied to the bucket they belong to. in s3 camel component (enpoint) we can specify bucket policy but not objects acl.the limitation is in s3producer.there is an attachment file (patch) to fix this quickly and whith little modifications to the existing code. but i think that we need to enhance the design of this component to be more flexible and rely on strategy that executes requests to interact with s3.for now there is no tests for s3producer in camel-aws thus i don't supply a unit test.if we enhance the design we can change or improve this layer with less effort. and we can do tests obviously.  
CAMEL-5779 Fix the tests/camel-itest-karaf - Which has a number of features not installing correctly in the new Karaf 2.3.0 container Running org.apache.camel.itest.karaf.CamelCryptoTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 181.314 sec <<< FAILURE!Running org.apache.camel.itest.karaf.CamelHbaseTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 19.865 sec <<< FAILURE!Running org.apache.camel.itest.karaf.CamelJcloudsTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 181.895 sec <<< FAILURE! Test Fix the tests/camel-itest-karaf - Which has a number of features not installing correctly in the new Karaf 2.3.0 container Running org.apache.camel.itest.karaf.CamelCryptoTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 181.314 sec <<< FAILURE!Running org.apache.camel.itest.karaf.CamelHbaseTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 19.865 sec <<< FAILURE!Running org.apache.camel.itest.karaf.CamelJcloudsTestTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 181.895 sec <<< FAILURE!
CAMEL-5778 Add camel-xmlrpc component As [XML-RPC|http://en.wikipedia.org/wiki/XML-RPC] is wildly used in lots of old services system, it makes sense that camel can invoke this kind of service with the help of camel-xmlrpc component.BTW, as XML-RPC defined a mapping protocol between the method call to xml, xmlrpc date format could help us to do the marshal and unmarshal work at the same time. New Feature Add camel-xmlrpc component As [XML-RPC|http://en.wikipedia.org/wiki/XML-RPC] is wildly used in lots of old services system, it makes sense that camel can invoke this kind of service with the help of camel-xmlrpc component.BTW, as XML-RPC defined a mapping protocol between the method call to xml, xmlrpc date format could help us to do the marshal and unmarshal work at the same time.
CAMEL-5777 Misleading docs on JMS wiki On http://camel.apache.org/jms.htmlit says"acknowledgementModeName	AUTO_ACKNOWLEDGE	 The JMS acknowledgement name, which is one of: TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE"these seems to be constants off the interface:http://docs.oracle.com/javaee/1.4/api/javax/jms/Session.htmlThus it should read: SESSION_TRANSACTED  and NOT "TRANSACTED". Task Misleading docs on JMS wiki On http://camel.apache.org/jms.htmlit says"acknowledgementModeName	AUTO_ACKNOWLEDGE	 The JMS acknowledgement name, which is one of: TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE"these seems to be constants off the interface:http://docs.oracle.com/javaee/1.4/api/javax/jms/Session.htmlThus it should read: SESSION_TRANSACTED  and NOT "TRANSACTED".
CAMEL-5775 Load balancer example - Should use the failover LB instead It would make more sense to use the failover LB and let it run in RR mode. Then people can shutdown server1 or server2 and still have the app running.Also polish the wiki page as it says 5 sec but the sample runs every 10 sec. Improvement Load balancer example - Should use the failover LB instead It would make more sense to use the failover LB and let it run in RR mode. Then people can shutdown server1 or server2 and still have the app running.Also polish the wiki page as it says 5 sec but the sample runs every 10 sec.
CAMEL-5771 IOHelper.getCharsetName() should lookup CHARSET_NAME in headers if exchange property is not set The CHARSET_NAME is currently set as an exchange property. When the exchange is sent over JMS, the properties are lost, which may result in inconveniences in case conversion of the payload is required. In order to tackle this problem, I suggest that IOHelper.getCharsetName() looks up the CHARSET_NAME in the headers of the IN message in case the property is not set on the exchange. If this change is accepted, I am happy to provide a patch. Improvement IOHelper.getCharsetName() should lookup CHARSET_NAME in headers if exchange property is not set The CHARSET_NAME is currently set as an exchange property. When the exchange is sent over JMS, the properties are lost, which may result in inconveniences in case conversion of the payload is required. In order to tackle this problem, I suggest that IOHelper.getCharsetName() looks up the CHARSET_NAME in the headers of the IN message in case the property is not set on the exchange. If this change is accepted, I am happy to provide a patch.
CAMEL-5768 Upgrade to Spring 3.1.x by default and add Spring 3.0 integration tests. We should have Spring 3.1 as default out of the box for people using camel-spring etc.We should then add a spring 3.0 integration tests for backwards sanity tests.For OSGi users, then the Karaf / SMX container provides Spring features that Camel uses. So that can either be Spring 3.0.x or 3.1.x based depending on what ppl have configured the container as. Task Upgrade to Spring 3.1.x by default and add Spring 3.0 integration tests. We should have Spring 3.1 as default out of the box for people using camel-spring etc.We should then add a spring 3.0 integration tests for backwards sanity tests.For OSGi users, then the Karaf / SMX container provides Spring features that Camel uses. So that can either be Spring 3.0.x or 3.1.x based depending on what ppl have configured the container as.
CAMEL-5765 Simple language - Improve OGNL with hardcoded values for null bodies When the message body is null, the OGNL need additional logic to cater for that, so it can do parameter type matching when there is overloaded methods.A bit complicated situations when invoking a method which have overloaded methods, and Camel has to choose the matching method based on parameter type matching / number of parameters etc. Improvement Simple language - Improve OGNL with hardcoded values for null bodies When the message body is null, the OGNL need additional logic to cater for that, so it can do parameter type matching when there is overloaded methods.A bit complicated situations when invoking a method which have overloaded methods, and Camel has to choose the matching method based on parameter type matching / number of parameters etc.
CAMEL-5764 Simple language - Add CamelContext as OGNL to simple language This allows invoking operations on the camelContext easier from the simple language. Improvement Simple language - Add CamelContext as OGNL to simple language This allows invoking operations on the camelContext easier from the simple language.
CAMEL-5763 Enrich Camel message with JMSMessageID for InOnly messages sent to JMS destination This allows end users to access the actual JMSMessageID the JMS vendor have assigned to the sent message.For example to log it, so the message can be traced etc.See nabblehttp://camel.465427.n5.nabble.com/Read-back-JMSMessageId-from-OneWay-JMS-message-tp5721875.html Improvement Enrich Camel message with JMSMessageID for InOnly messages sent to JMS destination This allows end users to access the actual JMSMessageID the JMS vendor have assigned to the sent message.For example to log it, so the message can be traced etc.See nabblehttp://camel.465427.n5.nabble.com/Read-back-JMSMessageId-from-OneWay-JMS-message-tp5721875.html
CAMEL-5760 Aggregate EIP - Allow custom AggregationStrategy to implement Service to have callbacks when starting/stopping the EIP This allows end users to implement custom logic to do in case of stopping Camel.See nabblehttp://camel.465427.n5.nabble.com/Re-How-to-shutdown-AggregationStrategy-when-there-is-no-InFlight-exchange-tp5721761.html Improvement Aggregate EIP - Allow custom AggregationStrategy to implement Service to have callbacks when starting/stopping the EIP This allows end users to implement custom logic to do in case of stopping Camel.See nabblehttp://camel.465427.n5.nabble.com/Re-How-to-shutdown-AggregationStrategy-when-there-is-no-InFlight-exchange-tp5721761.html
CAMEL-5758 Add support for Spring Activation profile annotation from Spring 3.1 We should add support for the new Spring profiles in camel-test-spring. So you can add the @ActiveProfile("myCoolStuff") in your unit test class. See nabblehttp://camel.465427.n5.nabble.com/Is-Spring-ActiveProfiles-annotation-supported-in-camel-test-2-10-tp5721145.html New Feature Add support for Spring Activation profile annotation from Spring 3.1 We should add support for the new Spring profiles in camel-test-spring. So you can add the @ActiveProfile("myCoolStuff") in your unit test class. See nabblehttp://camel.465427.n5.nabble.com/Is-Spring-ActiveProfiles-annotation-supported-in-camel-test-2-10-tp5721145.html
CAMEL-5755 CXF endpoint's parameter exceptionMessageCauseEnabled not working for Camel CXF endpoints CXF provides an option using runtime property exceptionMessageCauseEnabled to include the exception cause at the service invocation in the fault text [1]. But this option is not working for Camel endpoints.For this setting to work, the message's fault mode must be set by the service invoker. In Camel endpoints, this mode is not set when a fault is thrown. Consequently, the above option is not taken into account.To support this option for Camel CXF endpoints, this fault mode setting code can be placed in CxfConsumer.I am attaching a suggested change for trunk and a test case.I logged this as a minor bug, assuming this option was supposed to work but please feel free to change the issue type to improvement if you find it more suitable.1. http://cxf.apache.org/docs/debugging-and-logging.html#DebuggingandLogging-Showingthecauseexceptionmessage Improvement CXF endpoint's parameter exceptionMessageCauseEnabled not working for Camel CXF endpoints CXF provides an option using runtime property exceptionMessageCauseEnabled to include the exception cause at the service invocation in the fault text [1]. But this option is not working for Camel endpoints.For this setting to work, the message's fault mode must be set by the service invoker. In Camel endpoints, this mode is not set when a fault is thrown. Consequently, the above option is not taken into account.To support this option for Camel CXF endpoints, this fault mode setting code can be placed in CxfConsumer.I am attaching a suggested change for trunk and a test case.I logged this as a minor bug, assuming this option was supposed to work but please feel free to change the issue type to improvement if you find it more suitable.1. http://cxf.apache.org/docs/debugging-and-logging.html#DebuggingandLogging-Showingthecauseexceptionmessage
CAMEL-5753 Fix Camel trunk fulltest for Windows at Jenkins This test fails since more than four weeks: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.windows/ Task Fix Camel trunk fulltest for Windows at Jenkins This test fails since more than four weeks: https://builds.apache.org/view/A-F/view/Camel/job/Camel.trunk.fulltest.windows/
CAMEL-5745 camel-test-blueprint - Add support for Aries Blueprint 1.0 Aries Blueprint 1.0 dont work with POJOsr and camel-test-blueprint. This is needed for allowing our end users to do easy unit tests with the blueprint Camel apps. Improvement camel-test-blueprint - Add support for Aries Blueprint 1.0 Aries Blueprint 1.0 dont work with POJOsr and camel-test-blueprint. This is needed for allowing our end users to do easy unit tests with the blueprint Camel apps.
CAMEL-5744 placeholders usage for QName types CXF endpoint attributes (BP version of CAMEL-4351) I noticed the Blueprint equivalent of CAMEL-4351 is not there yet in trunk, which handles the placeholder usage for QName typed CXF endpoint attributes.Since this is a very small but useful change, I would like to have it also integrated into 2.10.x.Could you look at it?Thank you.Aki Improvement placeholders usage for QName types CXF endpoint attributes (BP version of CAMEL-4351) I noticed the Blueprint equivalent of CAMEL-4351 is not there yet in trunk, which handles the placeholder usage for QName typed CXF endpoint attributes.Since this is a very small but useful change, I would like to have it also integrated into 2.10.x.Could you look at it?Thank you.Aki
CAMEL-5742 camel-cdi - The @ContextName should only refer to a CamelContext and not create a new CamelContext on the fly It should only be for referring to an existing CamelContext. If you make a typo then otherwise it just creates a new CamelContext.Instead there should be some other means in CDI to setup a CamelContext. Improvement camel-cdi - The @ContextName should only refer to a CamelContext and not create a new CamelContext on the fly It should only be for referring to an existing CamelContext. If you make a typo then otherwise it just creates a new CamelContext.Instead there should be some other means in CDI to setup a CamelContext.
CAMEL-5739 Camel should validate on adding routes that if id is set then it must be unique When using explicit id's in the routes using Java DSL. Then we should ensure those id's is unique as this is required by management etc.In XML DSL the id's is unique as the xml parser will validate that. Improvement Camel should validate on adding routes that if id is set then it must be unique When using explicit id's in the routes using Java DSL. Then we should ensure those id's is unique as this is required by management etc.In XML DSL the id's is unique as the xml parser will validate that.
CAMEL-5736 Simple language - Unary operators should be more lenient and only be applicable if previous node is a function expression When using ++ or -- unary operators. We should only apply this if the previous node is a function, eg such as{code}${header.counter}++{code}Where as if you use ++ or -- for text then its just literal{code}++++ bla bla ++++{code} Improvement Simple language - Unary operators should be more lenient and only be applicable if previous node is a function expression When using ++ or -- unary operators. We should only apply this if the previous node is a function, eg such as{code}${header.counter}++{code}Where as if you use ++ or -- for text then its just literal{code}++++ bla bla ++++{code}
CAMEL-5734 Cold restart via JMX Camel supports both warm and cold restarts for a couple of years now (see CAMEL-3012). However, cold restart is not possible via JMX because calling stop() shuts down the JMX service, and it becomes impossible to call start().I propose to add support for cold restarts via JMX by adding a restart() method to ManagedCamelContextMBean and ManagedCamelContext, which internally just calls stop() and then start().I'm attaching a patch with the proposed implementation and a test case. New Feature Cold restart via JMX Camel supports both warm and cold restarts for a couple of years now (see CAMEL-3012). However, cold restart is not possible via JMX because calling stop() shuts down the JMX service, and it becomes impossible to call start().I propose to add support for cold restarts via JMX by adding a restart() method to ManagedCamelContextMBean and ManagedCamelContext, which internally just calls stop() and then start().I'm attaching a patch with the proposed implementation and a test case.
CAMEL-5727 camel-blueprint - Add some missing options in errorHandler factory bean A few of the options in the <errorHandler> is missing in camel-blueprint, which is available in camel-spring. Improvement camel-blueprint - Add some missing options in errorHandler factory bean A few of the options in the <errorHandler> is missing in camel-blueprint, which is available in camel-spring.
CAMEL-5726 CamelContext - Add support for CamelContextAware on Language and DataFormat This allows implementations of language and data format to have access to the CamelContext by the CamelContextAware, which we do for other kinds such as Components, Endpoints, Services etc. Improvement CamelContext - Add support for CamelContextAware on Language and DataFormat This allows implementations of language and data format to have access to the CamelContext by the CamelContextAware, which we do for other kinds such as Components, Endpoints, Services etc.
CAMEL-5725 Thread pool profile - maxQueueSize = 0 should mean no work queue in use This allows people to disable the worker queue, and thus only use direct-hand-off to the threads from the pool.Currently 0 or -1 means unbounded worker queue. Which IMHO is not ideal as you dont want a system that can accept any new tasks in an internal memory worker queue. So IMHO we should switch 0 and -1 to be direct-hands-off. And never use unbounded queues. People can specify a Integer.MAX_SIZE which is also unbounded queue anyway. Improvement Thread pool profile - maxQueueSize = 0 should mean no work queue in use This allows people to disable the worker queue, and thus only use direct-hand-off to the threads from the pool.Currently 0 or -1 means unbounded worker queue. Which IMHO is not ideal as you dont want a system that can accept any new tasks in an internal memory worker queue. So IMHO we should switch 0 and -1 to be direct-hands-off. And never use unbounded queues. People can specify a Integer.MAX_SIZE which is also unbounded queue anyway.
CAMEL-5724 Spring-WS consumer and producer do not propagate some custome headers and attachements to a response message Hi!I wanted to send back as response or as a request some soap messages with modified header.I found out that SpringWebserviceProducer and SpringWebserviceConsumer do not populate a soap header for any outgoing message from a camel exchange.In the attachments I am sending you a patch against camel-spring-ws 2.10.1 that solves this issue.Please let me know, what do you think about it.Best regards,Andrej  Improvement Spring-WS consumer and producer do not propagate some custome headers and attachements to a response message Hi!I wanted to send back as response or as a request some soap messages with modified header.I found out that SpringWebserviceProducer and SpringWebserviceConsumer do not populate a soap header for any outgoing message from a camel exchange.In the attachments I am sending you a patch against camel-spring-ws 2.10.1 that solves this issue.Please let me know, what do you think about it.Best regards,Andrej 
CAMEL-5721 Remove not used NodeFactory and re-use code for setting expressions in the DSL Just a little house-keeping in the model code, as we should remove NodeFactory that has never been in use. And also when expression/predicates is set then re-use same logic to be consistent, and ensure that the runtime details of the routes is consistent. eg to avoid the generic <expressionDefinition> being reported as the expression. Task Remove not used NodeFactory and re-use code for setting expressions in the DSL Just a little house-keeping in the model code, as we should remove NodeFactory that has never been in use. And also when expression/predicates is set then re-use same logic to be consistent, and ensure that the runtime details of the routes is consistent. eg to avoid the generic <expressionDefinition> being reported as the expression.
CAMEL-5716 Validator - schema from memory/property As far as I understand, the validator "component" in Camel can only use schemas deployed as file within the classpath (typically the deployed application - ear/war/jar whatever have you) or some file/http resource. Sometimes you might want to load the schema a bit more dynamically, I.E. from some datasource or semi-generate something on the fly. My suggestion is that a schema could be supplied in a propery or a header to the validator.I wrote such an extension to the validator and could probably rewrite it easily as a patch to the regular validator. Do you think people want to use such a feature and that it might be good to have in Camel? Should I submit a patch? Improvement Validator - schema from memory/property As far as I understand, the validator "component" in Camel can only use schemas deployed as file within the classpath (typically the deployed application - ear/war/jar whatever have you) or some file/http resource. Sometimes you might want to load the schema a bit more dynamically, I.E. from some datasource or semi-generate something on the fly. My suggestion is that a schema could be supplied in a propery or a header to the validator.I wrote such an extension to the validator and could probably rewrite it easily as a patch to the regular validator. Do you think people want to use such a feature and that it might be good to have in Camel? Should I submit a patch?
CAMEL-5715 Maven archetypes - Check that they still work after the pom DRY cleanup that broken them Need to check all the maven archetypes that they work as there was some commits to cleanup the pom.xml files that broke them. Task Maven archetypes - Check that they still work after the pom DRY cleanup that broken them Need to check all the maven archetypes that they work as there was some commits to cleanup the pom.xml files that broke them.
CAMEL-5714 Throw a meaningful exception when the conetxt component cannot create a right endpoint If the user doesn't setup the right camel context for the context component. The exception we got is misleading, we need to throw more meaningful exception for it.Here is the mailing thread[1] for it.[1]http://camel.465427.n5.nabble.com/Context-component-not-found-td5721236.html   Improvement Throw a meaningful exception when the conetxt component cannot create a right endpoint If the user doesn't setup the right camel context for the context component. The exception we got is misleading, we need to throw more meaningful exception for it.Here is the mailing thread[1] for it.[1]http://camel.465427.n5.nabble.com/Context-component-not-found-td5721236.html  
CAMEL-5713 SMPP Consumer: support for address_range parameter It is currently not possible to specify the address_range SMPP parameter when creating a Camel SMPP consumer.This parameter is important because, although most real SMSCs ignore it, it is nevertheless used by, for example, SMPPSim to route SMSes between ESMEs. Improvement SMPP Consumer: support for address_range parameter It is currently not possible to specify the address_range SMPP parameter when creating a Camel SMPP consumer.This parameter is important because, although most real SMSCs ignore it, it is nevertheless used by, for example, SMPPSim to route SMSes between ESMEs.
CAMEL-5705 Add new archetype for groovy We should have a new camel-archetype-groovy, to create a new Camel project that uses .groovy. Just as we have for java/scala/spring/blueprint etc. New Feature Add new archetype for groovy We should have a new camel-archetype-groovy, to create a new Camel project that uses .groovy. Just as we have for java/scala/spring/blueprint etc.
CAMEL-5703 camel-netty - Pool Channels instead of producers to make producer singleton We should favor using a light-weight pool for the channel on the producer, so it can be singleton which is the preferred for better scalability.And use commons-pool etc which has eviction logic built-in. Then channels which becomes idle can be evicted sooner.  Improvement camel-netty - Pool Channels instead of producers to make producer singleton We should favor using a light-weight pool for the channel on the producer, so it can be singleton which is the preferred for better scalability.And use commons-pool etc which has eviction logic built-in. Then channels which becomes idle can be evicted sooner. 
CAMEL-5702 camel-netty - The ordered thread pool should be shared Related to CAMEL-5689The ordered memory thread pool from Netty is intended to be shared per application. And not per consumer. Improvement camel-netty - The ordered thread pool should be shared Related to CAMEL-5689The ordered memory thread pool from Netty is intended to be shared per application. And not per consumer.
CAMEL-5692 Allow to create customized AggregateProcessor in AggregateDefinition Allow to create customized AggregateProcessor in AggregateDefinition by adding an overrideable method. Improvement Allow to create customized AggregateProcessor in AggregateDefinition Allow to create customized AggregateProcessor in AggregateDefinition by adding an overrideable method.
CAMEL-5691 camel-smpp - Possible NPE causes inflight count to not deregister See nabblehttp://camel.465427.n5.nabble.com/smpp-consumer-inflight-exchanges-keep-growing-tp5720730.html Improvement camel-smpp - Possible NPE causes inflight count to not deregister See nabblehttp://camel.465427.n5.nabble.com/smpp-consumer-inflight-exchanges-keep-growing-tp5720730.html
CAMEL-5689 Netty - Should use ordered thread pool We should favor using OrderedMemoryAwareThreadPoolExecutor andOrderedDownstreamThreadPoolExecutor to ensure ordering of events in a channel.See nabblehttp://camel.465427.n5.nabble.com/Netty-or-Mina-Async-in-the-same-socket-tp5720478.htmlWe can add an option so people can turn it off, like we did for mina2. Improvement Netty - Should use ordered thread pool We should favor using OrderedMemoryAwareThreadPoolExecutor andOrderedDownstreamThreadPoolExecutor to ensure ordering of events in a channel.See nabblehttp://camel.465427.n5.nabble.com/Netty-or-Mina-Async-in-the-same-socket-tp5720478.htmlWe can add an option so people can turn it off, like we did for mina2.
CAMEL-5688 LRUCache - Should stop service on eviction of eldest entry Related to CAMEL-5683For the LRUCache we should on eviction stop the service (if it stores services). Improvement LRUCache - Should stop service on eviction of eldest entry Related to CAMEL-5683For the LRUCache we should on eviction stop the service (if it stores services).
CAMEL-5675 Camel Route Startup Performance Slow I am writing unit tests for Camel and found that each unit test was taking up to a second just to create the Camel routes. That's not very long, but we have a large unit test suite that needs to run quickly.I did a performance profile and found that most of the time is going to the method org.apache.camel.util.IntrospectionSupport.getProperties(Object, Map, String). That method, then also calls IntrospectionSupport.isSetter(Method), and just running two unit tests I saw isSettter called 2.5 million times!It seems to me that a cache per class of the properties would make a huge performance improvement on Camel route building.  Improvement Camel Route Startup Performance Slow I am writing unit tests for Camel and found that each unit test was taking up to a second just to create the Camel routes. That's not very long, but we have a large unit test suite that needs to run quickly.I did a performance profile and found that most of the time is going to the method org.apache.camel.util.IntrospectionSupport.getProperties(Object, Map, String). That method, then also calls IntrospectionSupport.isSetter(Method), and just running two unit tests I saw isSettter called 2.5 million times!It seems to me that a cache per class of the properties would make a huge performance improvement on Camel route building. 
CAMEL-5671 Add spring 3.1 integration test using spring profile See AMQ-3723We should add a test to tests in spring 3.1 to have a test that has an embedded <camelContext> in a spring beans which has a profile associated.This is to ensure the namespace handler works with profiles.It was not supported for ActiveMQ and hence AMQ-3723. Test Add spring 3.1 integration test using spring profile See AMQ-3723We should add a test to tests in spring 3.1 to have a test that has an embedded <camelContext> in a spring beans which has a profile associated.This is to ensure the namespace handler works with profiles.It was not supported for ActiveMQ and hence AMQ-3723.
CAMEL-5667 Update the camel-scala DSL with latest camel java DSL camel-scala wraps the camel java EIP DSL, we need to add more wrap methods as there are some improvements on the camel java EIP DSL. Improvement Update the camel-scala DSL with latest camel java DSL camel-scala wraps the camel java EIP DSL, we need to add more wrap methods as there are some improvements on the camel java EIP DSL.
CAMEL-5664 Provides the replace wrap methods for calling the deprecated camel-core API  There are some deprecated camel-core API still be used in camel-scala module, we need to revisit them and add the wrap method which uses the prefer method.  Improvement Provides the replace wrap methods for calling the deprecated camel-core API  There are some deprecated camel-core API still be used in camel-scala module, we need to revisit them and add the wrap method which uses the prefer method. 
CAMEL-5662 provide camel-neo4j feature It looks like the Spring-data-neo4j will using the new version of Neo4j which could be friendly for OSGi bundle classloader.We could create a camel-neo4j feature after the new Spring-data-neo4j is released. Task provide camel-neo4j feature It looks like the Spring-data-neo4j will using the new version of Neo4j which could be friendly for OSGi bundle classloader.We could create a camel-neo4j feature after the new Spring-data-neo4j is released.
CAMEL-5661 ExecutorServiceManagement should shutdown after services This allows services to shutdown before the executor service, in case some services have been added later than the executor service itself.This ensures that the executor service is shutdown later and can do its fail-safe shutdown of left over thread pools. Improvement ExecutorServiceManagement should shutdown after services This allows services to shutdown before the executor service, in case some services have been added later than the executor service itself.This ensures that the executor service is shutdown later and can do its fail-safe shutdown of left over thread pools.
CAMEL-5660 Add option to @Consume, @Produce, et all to let them tie lifecycle to CamelContext When using these annotations, you are in control of the lifecycle. But if you use a @Consume on a method its harder to stop the consumer.We should offer an option on the annotation to tie it to the lifecycle of its CamelContext, so when the CamelContext is shutdown, they are shutdown as well.The option should allow to turn this on|off.  Improvement Add option to @Consume, @Produce, et all to let them tie lifecycle to CamelContext When using these annotations, you are in control of the lifecycle. But if you use a @Consume on a method its harder to stop the consumer.We should offer an option on the annotation to tie it to the lifecycle of its CamelContext, so when the CamelContext is shutdown, they are shutdown as well.The option should allow to turn this on|off. 
CAMEL-5658 Add method on ExecutorServiceManager to get Camels ThreadFactory This makes it easier to create a new thread (without thread pool) using the Camel API. This can be used for single one-stop-short-lived tasks where the thread should just terminate after usage.  Improvement Add method on ExecutorServiceManager to get Camels ThreadFactory This makes it easier to create a new thread (without thread pool) using the Camel API. This can be used for single one-stop-short-lived tasks where the thread should just terminate after usage. 
CAMEL-5656 JMXConnector is started async, should terminate thread after started to avoid keeping around When using JMX Connector then its started async using a single thread pool. This is not needed as the thread should be terminated after usage. Improvement JMXConnector is started async, should terminate thread after started to avoid keeping around When using JMX Connector then its started async using a single thread pool. This is not needed as the thread should be terminated after usage.
CAMEL-5651 Control Bus EIP Control Bus EIPhttp://www.eaipatterns.com/ControlBus.htmlI think we should consider a control bus EIP (eg implemented as a component).Then people can manage their Camel apps by sending messages to a control bus endpoint.For example to- start a route- stop a route- get statistics- shutdown camel (???)eg a bit like what you can do with JMX management, but over Camel endpoint.To trick would be to find a message format the control bus can parse. For example should we use a header for the command.But that also makes it easier for people to start|stop a route from a route. Now just send a message to an endpoint, for example using wire tap.{code}from x  to y  wire tap ("controlbus:action=start-route&param=route2"){code}Would need to give some more thought about the syntax and what to be supported by the control bus. New Feature Control Bus EIP Control Bus EIPhttp://www.eaipatterns.com/ControlBus.htmlI think we should consider a control bus EIP (eg implemented as a component).Then people can manage their Camel apps by sending messages to a control bus endpoint.For example to- start a route- stop a route- get statistics- shutdown camel (???)eg a bit like what you can do with JMX management, but over Camel endpoint.To trick would be to find a message format the control bus can parse. For example should we use a header for the command.But that also makes it easier for people to start|stop a route from a route. Now just send a message to an endpoint, for example using wire tap.{code}from x  to y  wire tap ("controlbus:action=start-route&param=route2"){code}Would need to give some more thought about the syntax and what to be supported by the control bus.
CAMEL-5645 Apns Component should allow sandbox/prod environment variable in apnsServiceFactory  Apns Component should allow sandbox/prod environment variable in apnsServiceFactory.apnsServiceFactory does not seem to allow setting Apple's APNS environment to anything but production mode.In addition, the certificatePath should allow an absolute path that is outside of the classpath (web root) Improvement Apns Component should allow sandbox/prod environment variable in apnsServiceFactory  Apns Component should allow sandbox/prod environment variable in apnsServiceFactory.apnsServiceFactory does not seem to allow setting Apple's APNS environment to anything but production mode.In addition, the certificatePath should allow an absolute path that is outside of the classpath (web root)
CAMEL-5643 JDBC aggregation repository - Allow users to store body and arbitrary headers as text within a datasource Add support to show a readonly view of optionally the body and arbitrary headers to the existing JdbcAggregationRepository class which will allow for a human-readable view of values in a datasourceRelated Mailing list link :http://camel.465427.n5.nabble.com/Change-Sql-Component-BLOB-datatype-to-XML-for-Aggregator-serialization-td5718845.html New Feature JDBC aggregation repository - Allow users to store body and arbitrary headers as text within a datasource Add support to show a readonly view of optionally the body and arbitrary headers to the existing JdbcAggregationRepository class which will allow for a human-readable view of values in a datasourceRelated Mailing list link :http://camel.465427.n5.nabble.com/Change-Sql-Component-BLOB-datatype-to-XML-for-Aggregator-serialization-td5718845.html
CAMEL-5642 Simple language - Limit escaping to newline related characters See nabblehttp://camel.465427.n5.nabble.com/String-replacement-via-Spring-tp5719498.htmlThe simple language escaping using \ character makes it header to specify back-slashes. What we really only need escaping for is the new line related.So by limiting the escaping to only \n \t and \r then we can allow people to specify backslashes in method parameters and the likes.  Improvement Simple language - Limit escaping to newline related characters See nabblehttp://camel.465427.n5.nabble.com/String-replacement-via-Spring-tp5719498.htmlThe simple language escaping using \ character makes it header to specify back-slashes. What we really only need escaping for is the new line related.So by limiting the escaping to only \n \t and \r then we can allow people to specify backslashes in method parameters and the likes. 
CAMEL-5639 Idempotent repository - Allow to compute keys based on file/exchange details The idempotent consumer API should allow to pass in additional details, so people can decide what the "key" is. I guess some method to compute the keys. Then the file/ftp components can pass in file/ftp details. And the EIP itself can pass in Exchange etc.This is a slight API change so we should only introduce this in a new release.See nabblehttp://camel.465427.n5.nabble.com/Custom-Idempotent-Jdbc-repository-Using-lastmodified-time-tp5719480.html Improvement Idempotent repository - Allow to compute keys based on file/exchange details The idempotent consumer API should allow to pass in additional details, so people can decide what the "key" is. I guess some method to compute the keys. Then the file/ftp components can pass in file/ftp details. And the EIP itself can pass in Exchange etc.This is a slight API change so we should only introduce this in a new release.See nabblehttp://camel.465427.n5.nabble.com/Custom-Idempotent-Jdbc-repository-Using-lastmodified-time-tp5719480.html
CAMEL-5638 If consumer.bridgeErrorHandler is enabled then let leverage it if poll strategy does a rollback See nabblehttp://camel.465427.n5.nabble.com/FTP-Consumer-Handle-UnknowHostException-tp5719362.htmlThis allows the bridged error handler to deal with rollback.  Improvement If consumer.bridgeErrorHandler is enabled then let leverage it if poll strategy does a rollback See nabblehttp://camel.465427.n5.nabble.com/FTP-Consumer-Handle-UnknowHostException-tp5719362.htmlThis allows the bridged error handler to deal with rollback. 
CAMEL-5634 camel-jaxb - Allow to control namespace prefixes When using JAXB to marhsal, then the generated XML may have auto assigned prefixes for namespaces in the XML. And these auto generated prefixes are: ns2, ns3, ns4 etc.Sometimes people want to control this.So we should allow people to define a bean/map where they can define the mapping. Improvement camel-jaxb - Allow to control namespace prefixes When using JAXB to marhsal, then the generated XML may have auto assigned prefixes for namespaces in the XML. And these auto generated prefixes are: ns2, ns3, ns4 etc.Sometimes people want to control this.So we should allow people to define a bean/map where they can define the mapping.
CAMEL-5633 Camel bean method should be able to take out the annotation from interface Current Camel doesn't pick up the RecipientList annotation from the Interface. It could be good if camel can pick up the annotation from the method which is defined in the interface.  Improvement Camel bean method should be able to take out the annotation from interface Current Camel doesn't pick up the RecipientList annotation from the Interface. It could be good if camel can pick up the annotation from the method which is defined in the interface. 
CAMEL-5630 Add a printer prefix option on the camel-printer endpoint As the windows printer has some prefix like "[Win32 Printer : Microsoft XPS Document Writer, Win32 Printer :\\nrbnrw0264\nrbco006]", it makes camel-printer impossible to look up the right printer without using prefix string.We could resolve this issue by adding a PrinterPrefix option to the camel-printer endpoint. Improvement Add a printer prefix option on the camel-printer endpoint As the windows printer has some prefix like "[Win32 Printer : Microsoft XPS Document Writer, Win32 Printer :\\nrbnrw0264\nrbco006]", it makes camel-printer impossible to look up the right printer without using prefix string.We could resolve this issue by adding a PrinterPrefix option to the camel-printer endpoint.
CAMEL-5629 CamelContext should allow to add intercept defination at runime CamelContext allows to add InterceptStrategy not InterceptFromDefinition.To add below intercept xml to camelContext, I need to add InterceptDefinition to CamelContext. I don't find any add method for InterceptDefinition just like addRouteDefinitions and addRouteDefinition.InterceptDefinition ======================== <interceptFrom xmlns="http://camel.apache.org/schema/spring" >          <when>          <groovy> return exchange.fromRouteId == 'test.hello.restlet.1.0' </groovy>        </when>        <to uri="direct:test.intercepter.v1"/>    </interceptFrom>""" New Feature CamelContext should allow to add intercept defination at runime CamelContext allows to add InterceptStrategy not InterceptFromDefinition.To add below intercept xml to camelContext, I need to add InterceptDefinition to CamelContext. I don't find any add method for InterceptDefinition just like addRouteDefinitions and addRouteDefinition.InterceptDefinition ======================== <interceptFrom xmlns="http://camel.apache.org/schema/spring" >          <when>          <groovy> return exchange.fromRouteId == 'test.hello.restlet.1.0' </groovy>        </when>        <to uri="direct:test.intercepter.v1"/>    </interceptFrom>"""
CAMEL-5625 Test Jt400PgmEndpoint.toString() Add a test case that tests Jt400PgmEndpoint.toString(). This is useful in asserting that the string does not contain the endpoint password. Test Test Jt400PgmEndpoint.toString() Add a test case that tests Jt400PgmEndpoint.toString(). This is useful in asserting that the string does not contain the endpoint password.
CAMEL-5624 An exception when constructing JT400 endpoints should not leak the password Sanitize the endpoint URI in the message of the runtime exception thrown in the constructors for Jt400DataQueueEndpoint and Jt400PgmEndpoint. Improvement An exception when constructing JT400 endpoints should not leak the password Sanitize the endpoint URI in the message of the runtime exception thrown in the constructors for Jt400DataQueueEndpoint and Jt400PgmEndpoint.
CAMEL-5623 Cache-Component doesn't work with decorated Caches The camel-cache component uses cacheManager.getCache(cacheName) in org.apache.camel.component.cache.CacheEndpoint.initializeCache():114This method call does not return decorated caches.If you want to use a SelfPopulatingCache or a BlockingCache with EhCache and you call cacheManager.replaceCacheWithDecoratedCache(oldCache, decoratedCache), then the CachedEndpoint will return a <null> cache instead of the decorated cache. This happens because the preceeding cacheManager.cacheExists(cacheName) check will not check if a cache is a decorated cache.My suggestion is to replace the getCache() call with getEhcache() call, which will return decorated caches as well.Update: With the above issue resolved, there's a follow-up error in the CacheProducer class. In line 98 it checks if there is content for the given key in the cache. This prevents the use of SelfPopulatingCaches as well, since it is expected that there is no element in the Cache at some point - a CacheEntryFactory will then populate the Cache.I've attached a patch to address this issue (camel-cache-5623-part2.patch) Improvement Cache-Component doesn't work with decorated Caches The camel-cache component uses cacheManager.getCache(cacheName) in org.apache.camel.component.cache.CacheEndpoint.initializeCache():114This method call does not return decorated caches.If you want to use a SelfPopulatingCache or a BlockingCache with EhCache and you call cacheManager.replaceCacheWithDecoratedCache(oldCache, decoratedCache), then the CachedEndpoint will return a <null> cache instead of the decorated cache. This happens because the preceeding cacheManager.cacheExists(cacheName) check will not check if a cache is a decorated cache.My suggestion is to replace the getCache() call with getEhcache() call, which will return decorated caches as well.Update: With the above issue resolved, there's a follow-up error in the CacheProducer class. In line 98 it checks if there is content for the given key in the cache. This prevents the use of SelfPopulatingCaches as well, since it is expected that there is no element in the Cache at some point - a CacheEntryFactory will then populate the Cache.I've attached a patch to address this issue (camel-cache-5623-part2.patch)
CAMEL-5622 CxfConsumer should avoid using the async invocation with the decouple endpoints transport As the decouple endpoint transport already switch the thread and we cannot leverage the continuation to provide the async invocation any more. So we need to disable the async invocation in this situation. Improvement CxfConsumer should avoid using the async invocation with the decouple endpoints transport As the decouple endpoint transport already switch the thread and we cannot leverage the continuation to provide the async invocation any more. So we need to disable the async invocation in this situation.
CAMEL-5619 Add blueprint example for XPath on headers There is currently no example of blueprint DSL using XPath on a header's value.I added an example to the XPath documentation page, but it is hard coded in a 'code' element. It would be nice to add this example to source in order to use the 'snippet' element that other examples seem to use Task Add blueprint example for XPath on headers There is currently no example of blueprint DSL using XPath on a header's value.I added an example to the XPath documentation page, but it is hard coded in a 'code' element. It would be nice to add this example to source in order to use the 'snippet' element that other examples seem to use
CAMEL-5618 The tag "contextScan" should inject @Converter methods from @Converter components. The ability to detect converters using "META-INF/services/org/apache/camel/TypeConverter" SPI is cool, but obligates me to make my converters as static methods.This brings me 2 major issues:1) It is hard to "mock" the converters in the "CamelTestSupport" because he auto-detect the "real" ones;2) If I want to "inject" beans in my converter class and use it in my converter method, I can't.So, to solve my problem I did a very simple class. I will copy the code at the end of this. With this class, I don't use Camel SPI anymore and Spring injects the converters for me using "TypeConverterSupport". Then, my suggestion is: why the annotation "contextScan" doesn't have a similar behavior? It would be very nice and simple.Thanks,Bernardo SilvaCLASS:{code}import java.lang.reflect.Method;import java.util.Map;import org.apache.camel.CamelContext;import org.apache.camel.Converter;import org.apache.camel.Exchange;import org.apache.camel.TypeConversionException;import org.apache.camel.support.TypeConverterSupport;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Component;@SuppressWarnings("unchecked")@Componentpublic class CamelConverterInjector implements InitializingBean {	@Autowired	private CamelContext camelContext;	@Autowired	private ApplicationContext springContext;	private static abstract class TypeConverterWrapper extends TypeConverterSupport {		protected final Method method;		protected final Object bean;		protected TypeConverterWrapper(Method method, Object bean) {			this.method = method;			this.bean = bean;		}	}	private static final class TypeConverterSimpleWrapper extends TypeConverterWrapper {		protected TypeConverterSimpleWrapper(Method method, Object bean) {			super(method, bean);		}		public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {			try {				return (T) method.invoke(bean, value);			} catch (Throwable t) {				throw new TypeConversionException(value, type, t);			}		}	}	private static final class TypeConverterExchangeWrapper extends TypeConverterWrapper {		protected TypeConverterExchangeWrapper(Method method, Object bean) {			super(method, bean);		}		public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {			try {				return (T) method.invoke(bean, value, exchange);			} catch (Throwable t) {				throw new TypeConversionException(value, type, t);			}		}	}	public void afterPropertiesSet() throws Exception {		final Map<String, Object> beans = springContext.getBeansWithAnnotation(Converter.class);		for (String beanName : beans.keySet()) {			final Object bean = beans.get(beanName);			for (Method method : bean.getClass().getMethods()) {				if (method.getAnnotation(Converter.class) != null) {					final Class<?>[] parameterTypes = method.getParameterTypes();					final TypeConverterWrapper converter;					if (parameterTypes.length == 1) {						converter = new TypeConverterSimpleWrapper(method, bean);					} else {						converter = new TypeConverterExchangeWrapper(method, bean);					}					camelContext.getTypeConverterRegistry().addTypeConverter(method.getReturnType(), parameterTypes[0], converter);				}			}		}	}}{code} Improvement The tag "contextScan" should inject @Converter methods from @Converter components. The ability to detect converters using "META-INF/services/org/apache/camel/TypeConverter" SPI is cool, but obligates me to make my converters as static methods.This brings me 2 major issues:1) It is hard to "mock" the converters in the "CamelTestSupport" because he auto-detect the "real" ones;2) If I want to "inject" beans in my converter class and use it in my converter method, I can't.So, to solve my problem I did a very simple class. I will copy the code at the end of this. With this class, I don't use Camel SPI anymore and Spring injects the converters for me using "TypeConverterSupport". Then, my suggestion is: why the annotation "contextScan" doesn't have a similar behavior? It would be very nice and simple.Thanks,Bernardo SilvaCLASS:{code}import java.lang.reflect.Method;import java.util.Map;import org.apache.camel.CamelContext;import org.apache.camel.Converter;import org.apache.camel.Exchange;import org.apache.camel.TypeConversionException;import org.apache.camel.support.TypeConverterSupport;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationContext;import org.springframework.stereotype.Component;@SuppressWarnings("unchecked")@Componentpublic class CamelConverterInjector implements InitializingBean {	@Autowired	private CamelContext camelContext;	@Autowired	private ApplicationContext springContext;	private static abstract class TypeConverterWrapper extends TypeConverterSupport {		protected final Method method;		protected final Object bean;		protected TypeConverterWrapper(Method method, Object bean) {			this.method = method;			this.bean = bean;		}	}	private static final class TypeConverterSimpleWrapper extends TypeConverterWrapper {		protected TypeConverterSimpleWrapper(Method method, Object bean) {			super(method, bean);		}		public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {			try {				return (T) method.invoke(bean, value);			} catch (Throwable t) {				throw new TypeConversionException(value, type, t);			}		}	}	private static final class TypeConverterExchangeWrapper extends TypeConverterWrapper {		protected TypeConverterExchangeWrapper(Method method, Object bean) {			super(method, bean);		}		public <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException {			try {				return (T) method.invoke(bean, value, exchange);			} catch (Throwable t) {				throw new TypeConversionException(value, type, t);			}		}	}	public void afterPropertiesSet() throws Exception {		final Map<String, Object> beans = springContext.getBeansWithAnnotation(Converter.class);		for (String beanName : beans.keySet()) {			final Object bean = beans.get(beanName);			for (Method method : bean.getClass().getMethods()) {				if (method.getAnnotation(Converter.class) != null) {					final Class<?>[] parameterTypes = method.getParameterTypes();					final TypeConverterWrapper converter;					if (parameterTypes.length == 1) {						converter = new TypeConverterSimpleWrapper(method, bean);					} else {						converter = new TypeConverterExchangeWrapper(method, bean);					}					camelContext.getTypeConverterRegistry().addTypeConverter(method.getReturnType(), parameterTypes[0], converter);				}			}		}	}}{code}
CAMEL-5617 Added an option in MainSupport to load the camel route builder It could be better if we support to load the camel routebuilder in mainsupport.Here is the mail thread[1] about it.[1]http://camel.465427.n5.nabble.com/Can-we-improve-Main-to-accept-RouteBuilder-subclasses-as-arguments-td5719424.html New Feature Added an option in MainSupport to load the camel route builder It could be better if we support to load the camel routebuilder in mainsupport.Here is the mail thread[1] about it.[1]http://camel.465427.n5.nabble.com/Can-we-improve-Main-to-accept-RouteBuilder-subclasses-as-arguments-td5719424.html
CAMEL-5613 Provide robust connection support for JMX consumers A Camel JMX consumer that connects to a JMX server on the network currently needs the JMX server to be active before the consumer is started.  The consumer also has no ability to re-initialize lost connections to the JMX server.The attached patch eliminates the timing dependency between the JMX consumer and JMX server, by allowing the JMX consumer to optionally poll for the JMX server connection at startup.  The patch also allows the consumer to optionally re-initialize (via polling) connections to a JMX server after an active connection is broken.The patch enables the following URI parameters for JMX consumers : * *testConnectionOnStartup* -- if true the consumer will throw an exception if unable to establish the JMX connection upon startup.  If false, the consumer will attempt to establish the JMX connection every 'x' seconds until the connection is made -- where 'x' is the configured  reconnectDelay.  Default is _true_. * *reconnectOnConnectionFailure* -- If true the consumer will attempt to reconnect to the JMX server when any connection failure occurs.  The consumer will attempt to re-establish the JMX connection every 'x' seconds until the connection is made-- where 'x' is the configured  reconnectDelay.  Default is _false_. * *reconnectDelay* -- The number of seconds to wait before attempting to retry establishment of the initial connection or attempt to reconnect a lost connection.  Default is _10_ seconds. Improvement Provide robust connection support for JMX consumers A Camel JMX consumer that connects to a JMX server on the network currently needs the JMX server to be active before the consumer is started.  The consumer also has no ability to re-initialize lost connections to the JMX server.The attached patch eliminates the timing dependency between the JMX consumer and JMX server, by allowing the JMX consumer to optionally poll for the JMX server connection at startup.  The patch also allows the consumer to optionally re-initialize (via polling) connections to a JMX server after an active connection is broken.The patch enables the following URI parameters for JMX consumers : * *testConnectionOnStartup* -- if true the consumer will throw an exception if unable to establish the JMX connection upon startup.  If false, the consumer will attempt to establish the JMX connection every 'x' seconds until the connection is made -- where 'x' is the configured  reconnectDelay.  Default is _true_. * *reconnectOnConnectionFailure* -- If true the consumer will attempt to reconnect to the JMX server when any connection failure occurs.  The consumer will attempt to re-establish the JMX connection every 'x' seconds until the connection is made-- where 'x' is the configured  reconnectDelay.  Default is _false_. * *reconnectDelay* -- The number of seconds to wait before attempting to retry establishment of the initial connection or attempt to reconnect a lost connection.  Default is _10_ seconds.
CAMEL-5611 Issue with JndiContext in camel tests If you configure the jndiregistry in a unit test produced by CamelInitialContextFactory via jndi.properties you'll always get a new empty JndiContext if any library or component in between does a new InitialContext() call. Improvement Issue with JndiContext in camel tests If you configure the jndiregistry in a unit test produced by CamelInitialContextFactory via jndi.properties you'll always get a new empty JndiContext if any library or component in between does a new InitialContext() call.
CAMEL-5607 pax-logging - Should use the API from Camel to manage thread pool Its better to use the API from Camel for thread pools lifecycle. Improvement pax-logging - Should use the API from Camel to manage thread pool Its better to use the API from Camel for thread pools lifecycle.
CAMEL-5604 camel-jackson - Make it easier to support List as output out of the box See nabblehttp://camel.465427.n5.nabble.com/JSON-Jackson-return-list-rather-than-POJO-tp5717341.htmlWe should look into making it easier to output a List as output with jackson json. On the nabble link there is an example and pseduo code how to do that.We should find a way to make that easy in Camel. Either as some new option, or somehow auto detect its a List etc. Improvement camel-jackson - Make it easier to support List as output out of the box See nabblehttp://camel.465427.n5.nabble.com/JSON-Jackson-return-list-rather-than-POJO-tp5717341.htmlWe should look into making it easier to output a List as output with jackson json. On the nabble link there is an example and pseduo code how to do that.We should find a way to make that easy in Camel. Either as some new option, or somehow auto detect its a List etc.
CAMEL-5603 Camel endpoints with user info using @ sign in username or password should be encoded If people use user info in Camel endpoint uris, and they have a @ sign in for example the username and/or the password. Then that should be percent encoded to %40. This is needed to ensure the java.net.URI can parse it and grab the UserInfo.For example some components support userinfo, such as FTP etc. And they grab the details using the UserInfo from the java.net.URI class.See nabblehttp://camel.465427.n5.nabble.com/Issues-with-URI-containing-40-or-26-tp5719118.html Improvement Camel endpoints with user info using @ sign in username or password should be encoded If people use user info in Camel endpoint uris, and they have a @ sign in for example the username and/or the password. Then that should be percent encoded to %40. This is needed to ensure the java.net.URI can parse it and grab the UserInfo.For example some components support userinfo, such as FTP etc. And they grab the details using the UserInfo from the java.net.URI class.See nabblehttp://camel.465427.n5.nabble.com/Issues-with-URI-containing-40-or-26-tp5719118.html
CAMEL-5597 camel-itest - Karaf testing fails on JDK7 cd camel-itestcd camel-itest-karafmvn clean installWorks fine with JDK6.Fails on JDK7 Task camel-itest - Karaf testing fails on JDK7 cd camel-itestcd camel-itest-karafmvn clean installWorks fine with JDK6.Fails on JDK7
CAMEL-5594 Upgrade to Jetty 7.6.5 We should upgrade to latest Jetty 7.6.x release which CXF now supports. And we got logic in place camel-jetty to support older Jetty releases (which has some minor API changes). Task Upgrade to Jetty 7.6.5 We should upgrade to latest Jetty 7.6.x release which CXF now supports. And we got logic in place camel-jetty to support older Jetty releases (which has some minor API changes).
CAMEL-5590 when recursive=true in camel-file url then may cause camel context not started When use parameters recursive=true in url and lot of directory/files the camel context never start correctly.But processing file start. Improvement when recursive=true in camel-file url then may cause camel context not started When use parameters recursive=true in url and lot of directory/files the camel context never start correctly.But processing file start.
CAMEL-5587 ExceptionHandler - Add method that has consumer parameter See nabblehttp://camel.465427.n5.nabble.com/Getting-consumer-endpoint-details-or-exchange-headers-in-custom-ExceptionHandler-tp5718633.htmlIf people want to share a custom ExceptionHandler among a number of route consumers, then when an exception is being handled, they wont know which consumer failed.We could add a method with the consumer parameter. But that would break the old API. But that may be okay as using a custom ExceptionHandler is not commonly used. Improvement ExceptionHandler - Add method that has consumer parameter See nabblehttp://camel.465427.n5.nabble.com/Getting-consumer-endpoint-details-or-exchange-headers-in-custom-ExceptionHandler-tp5718633.htmlIf people want to share a custom ExceptionHandler among a number of route consumers, then when an exception is being handled, they wont know which consumer failed.We could add a method with the consumer parameter. But that would break the old API. But that may be okay as using a custom ExceptionHandler is not commonly used.
CAMEL-5585 RedeliverErrorHandler - Should quicker reject running scheduled redeliver tasks if shutting down and not allowed to do redeliver If redeliverWhileStopping=false, and we are currently sleeping before attempting a redelivery. Then we could interrupt the thread and reject.This allows to stop quicker.The trick is to interrupt the sleep graceful. For example to sleep in a loop instead, and check if we should still sleep.The scheduled thread pool on the other hand could have many pending tasks. So we would need to shutdown now, and then reject running them, eg need to set exception and invoke done callback.An alternative instead of using a scheduled thread pool. Would to have a task queue, and a multiplexed background thread that runs once in a while (eg every second). Then that could more easy reject the tasks.The caveat is if people use delays < 1 sec. As the thread would then need to be quicker. As well keep precise count when to execute the redelivery.  Improvement RedeliverErrorHandler - Should quicker reject running scheduled redeliver tasks if shutting down and not allowed to do redeliver If redeliverWhileStopping=false, and we are currently sleeping before attempting a redelivery. Then we could interrupt the thread and reject.This allows to stop quicker.The trick is to interrupt the sleep graceful. For example to sleep in a loop instead, and check if we should still sleep.The scheduled thread pool on the other hand could have many pending tasks. So we would need to shutdown now, and then reject running them, eg need to set exception and invoke done callback.An alternative instead of using a scheduled thread pool. Would to have a task queue, and a multiplexed background thread that runs once in a while (eg every second). Then that could more easy reject the tasks.The caveat is if people use delays < 1 sec. As the thread would then need to be quicker. As well keep precise count when to execute the redelivery. 
CAMEL-5581 Add an ExchangeStrategy to the HBase Component. The current hbase component does not provide the ability to forward of the exchange information except for the associated hbase data.  This improvement adds the concept of an ExchangeStrategy that users can extend and allow them to include information from the current exchange in-coming message to the out-going message.I have a default implementation that does nothing that can be extended by a user.  This default implementation can be extended in the future such that users will then not be required to add missing methods. Improvement Add an ExchangeStrategy to the HBase Component. The current hbase component does not provide the ability to forward of the exchange information except for the associated hbase data.  This improvement adds the concept of an ExchangeStrategy that users can extend and allow them to include information from the current exchange in-coming message to the out-going message.I have a default implementation that does nothing that can be extended by a user.  This default implementation can be extended in the future such that users will then not be required to add missing methods.
CAMEL-5579 Add an abstract grouped by aggregator strategy that users can extend from. The current GroupedExchangeAggregationStrategy will combine a list of exchange instances for a given correlation expression and propagate the exchange with that list.   This is great as long as users are content with processing the list of exchanges.  What about users that would like to extract data from the exchange and add that to the forwarded list?  This is something that require users to create their own strategy.What I propose is that we provide base class for users to extend such that it manages the grouped list and have the user state and return the type of instances that will be added to the grouped list.I will attach a base class that users can extend and an example of a sub-classed version that will return a list of exchange instances like the default GroupedExchangeAggregateStrategy camel core class. Improvement Add an abstract grouped by aggregator strategy that users can extend from. The current GroupedExchangeAggregationStrategy will combine a list of exchange instances for a given correlation expression and propagate the exchange with that list.   This is great as long as users are content with processing the list of exchanges.  What about users that would like to extract data from the exchange and add that to the forwarded list?  This is something that require users to create their own strategy.What I propose is that we provide base class for users to extend such that it manages the grouped list and have the user state and return the type of instances that will be added to the grouped list.I will attach a base class that users can extend and an example of a sub-classed version that will return a list of exchange instances like the default GroupedExchangeAggregateStrategy camel core class.
CAMEL-5573 RedeliverErrorHandler - Only need thread pool if redelivery has been enabled in any way The error handling in Camel supports redelivery. Which uses a thread pool for scheduling tasks for future redeliveries etc.This thread pool is only needed if redelivery is enabled. There can be Camel apps that wont use any kind of redelivery. And for these use-cases we can omit creating the thread pool. Improvement RedeliverErrorHandler - Only need thread pool if redelivery has been enabled in any way The error handling in Camel supports redelivery. Which uses a thread pool for scheduling tasks for future redeliveries etc.This thread pool is only needed if redelivery is enabled. There can be Camel apps that wont use any kind of redelivery. And for these use-cases we can omit creating the thread pool.
CAMEL-5569 Make Spring Optional Bundle Import for CXF Transport The camel-cxf-transport component should define the Spring import packages as optional given they are only required if using the Spring DSL namespaces.  If you are using Java DSL Spring is not required.Best Regards,Scott ES Improvement Make Spring Optional Bundle Import for CXF Transport The camel-cxf-transport component should define the Spring import packages as optional given they are only required if using the Spring DSL namespaces.  If you are using Java DSL Spring is not required.Best Regards,Scott ES
CAMEL-5568 Remove Spring Reference from Camel Core Feature I propose that the Spring feature reference in the camel-core feature be removed.Camel Core no longer has a runtime dependency on Spring.  Camel Components that require Spring as a runtime dependency should have a feature reference to Spring and not depend on the *camel-core* feature to install it.  This will eliminate the addition of unnecessary installations of the Spring APIs into the Karaf container.  For example, the *camel-sjms* feature installs the *camel-core* feature which installs the Spring APIs though no dependency on Spring exists.After a run through of all the components with a runtime dependency on Spring and their associated features I found only one feature that was missing a reference to a Spring feature: *camel-test*.Below is a complete breakdown of the components with Spring runtime dependencies.Component Features with a runtime dependency on Spring that include a a Spring Feature reference:  * camel-bam  * camel-cxf  * camel-cxf-transport - Included in camel-cxf feature  * camel-jms  * camel-jpa  * camel-spring  * camel-spring-batch  * camel-spring-integration  * camel-spring-javaconfig  * camel-spring-security  * camel-spring-ws  * camel-sqlComponent Features with a runtime dependency on Spring but no Camel Feature is defined:  * camel-gae  * camel-neo  * camel-testng  * camel-webComponent Features with a runtime dependency on Spring that DO NOT include a a Spring Feature reference *(require an update)*:  * camel-testI am attaching a patch shortly.Best Regards,Scott ES Improvement Remove Spring Reference from Camel Core Feature I propose that the Spring feature reference in the camel-core feature be removed.Camel Core no longer has a runtime dependency on Spring.  Camel Components that require Spring as a runtime dependency should have a feature reference to Spring and not depend on the *camel-core* feature to install it.  This will eliminate the addition of unnecessary installations of the Spring APIs into the Karaf container.  For example, the *camel-sjms* feature installs the *camel-core* feature which installs the Spring APIs though no dependency on Spring exists.After a run through of all the components with a runtime dependency on Spring and their associated features I found only one feature that was missing a reference to a Spring feature: *camel-test*.Below is a complete breakdown of the components with Spring runtime dependencies.Component Features with a runtime dependency on Spring that include a a Spring Feature reference:  * camel-bam  * camel-cxf  * camel-cxf-transport - Included in camel-cxf feature  * camel-jms  * camel-jpa  * camel-spring  * camel-spring-batch  * camel-spring-integration  * camel-spring-javaconfig  * camel-spring-security  * camel-spring-ws  * camel-sqlComponent Features with a runtime dependency on Spring but no Camel Feature is defined:  * camel-gae  * camel-neo  * camel-testng  * camel-webComponent Features with a runtime dependency on Spring that DO NOT include a a Spring Feature reference *(require an update)*:  * camel-testI am attaching a patch shortly.Best Regards,Scott ES
CAMEL-5563 ExecutorServiceManager - Should shutdown thread pools less aggressively  We have so far favored shutting down thread pools a bit too aggressively from the start using shutdownNow. Instead we should favor shutdown, and allow the pool a bit time to shutdown orderly, before we go aggressively by shutting down now.We should also allow end users to configure a await termination timeout value to control how long we wait to orderly shutdown.By default this value could be 5 seconds (not too high and not to low).Also we should consider allow to configure a log level, which logs the in-flight threads which wasn't shutdown orderly. This can aid people to identify these threads.By default we could log this at WARN level. Notice that over time these threads may shutdown naturally when they complete, so its not a severe error. This requires minder API additions to ExeuctorServiceManager. However it ought to be worthy of being backported to the 2.10 branch IMHO Improvement ExecutorServiceManager - Should shutdown thread pools less aggressively  We have so far favored shutting down thread pools a bit too aggressively from the start using shutdownNow. Instead we should favor shutdown, and allow the pool a bit time to shutdown orderly, before we go aggressively by shutting down now.We should also allow end users to configure a await termination timeout value to control how long we wait to orderly shutdown.By default this value could be 5 seconds (not too high and not to low).Also we should consider allow to configure a log level, which logs the in-flight threads which wasn't shutdown orderly. This can aid people to identify these threads.By default we could log this at WARN level. Notice that over time these threads may shutdown naturally when they complete, so its not a severe error. This requires minder API additions to ExeuctorServiceManager. However it ought to be worthy of being backported to the 2.10 branch IMHO
CAMEL-5561 allow camel:run to auto detect OSGI-INF/*.xml for blueprint XML files or META-INF/beans.xml for CDI to avoid users having to customize camel-maven-plugin configuration on a per project basis folks can then use spring/blueprint/cdi with "mvn camel:run" with folks not having to specify <useBlueprint>true</useBlueprint> or <useCDI>true</useCDI> Improvement allow camel:run to auto detect OSGI-INF/*.xml for blueprint XML files or META-INF/beans.xml for CDI to avoid users having to customize camel-maven-plugin configuration on a per project basis folks can then use spring/blueprint/cdi with "mvn camel:run" with folks not having to specify <useBlueprint>true</useBlueprint> or <useCDI>true</useCDI>
CAMEL-5559 Upgrade camel-solr to use http client 4.x Add the solr solrj deprecate CommonsHttpSolrServer which is replace by HttpSolrServer and it is using the http client 4. We could consider to do some clean up work in the camel-solr component to use the http client 4 directly. Improvement Upgrade camel-solr to use http client 4.x Add the solr solrj deprecate CommonsHttpSolrServer which is replace by HttpSolrServer and it is using the http client 4. We could consider to do some clean up work in the camel-solr component to use the http client 4 directly.
CAMEL-5557 Camel-ZeroMQ Component Contribution of Camel-ZeroMQ component.I've taken the liberty of adding documentation here:https://cwiki.apache.org/confluence/display/CAMEL/ZeroMQ90% test coverage. New Feature Camel-ZeroMQ Component Contribution of Camel-ZeroMQ component.I've taken the liberty of adding documentation here:https://cwiki.apache.org/confluence/display/CAMEL/ZeroMQ90% test coverage.
CAMEL-5553 camel-cdi - support injection of Endpoint and @Produce @Consume annotations we don't yet support the various camel annotation injections in CDI yet; we should support the same capabilities as we have in spring/guicehttp://camel.apache.org/bean-integration.htmlhttp://camel.apache.org/bean-injection.htmlI guess a more CDI way to do endpoint injection might be to have an annotation for endpointURI specification. Then you'd either use {code}public class MyBean {   // named reference injection  @Inject @Named("foo") Endpoint bar;  // URI based injection  @Inject @Uri("mock:whatnot") MockEndpoint foo;...}{code}Rather than using the DI-agnostic @EndpointInject annotation - though I guess we could support it too (though having Inject twice looks a bit icky and not as DRY)...{code}public class MyBean {   // using current annotation...  @Inject @EndpointInject(uri = "mock:whatnot") MockEndpoint bar;...}{code}For handling @Consume it would be nice to avoid having to use @Inject too as that seems a bit odd (since there's no injection going on).For @Produce I guess we could support a straight @Inject of a ProcessorTemplate; allowing use of @Uri annotation to specify the default URI to send to Improvement camel-cdi - support injection of Endpoint and @Produce @Consume annotations we don't yet support the various camel annotation injections in CDI yet; we should support the same capabilities as we have in spring/guicehttp://camel.apache.org/bean-integration.htmlhttp://camel.apache.org/bean-injection.htmlI guess a more CDI way to do endpoint injection might be to have an annotation for endpointURI specification. Then you'd either use {code}public class MyBean {   // named reference injection  @Inject @Named("foo") Endpoint bar;  // URI based injection  @Inject @Uri("mock:whatnot") MockEndpoint foo;...}{code}Rather than using the DI-agnostic @EndpointInject annotation - though I guess we could support it too (though having Inject twice looks a bit icky and not as DRY)...{code}public class MyBean {   // using current annotation...  @Inject @EndpointInject(uri = "mock:whatnot") MockEndpoint bar;...}{code}For handling @Consume it would be nice to avoid having to use @Inject too as that seems a bit odd (since there's no injection going on).For @Produce I guess we could support a straight @Inject of a ProcessorTemplate; allowing use of @Uri annotation to specify the default URI to send to
CAMEL-5552 made camel-cmis support osgi Current camel-cmis cannot leverage the OSGi service to locate the SessionFactory, and it also uses lot of internal API which is not expose by the chemistry-client-osgi bundle.We also need an OSGi unit test for it. Task made camel-cmis support osgi Current camel-cmis cannot leverage the OSGi service to locate the SessionFactory, and it also uses lot of internal API which is not expose by the chemistry-client-osgi bundle.We also need an OSGi unit test for it.
CAMEL-5551 String types not converted from CLOB Not all JBDC drivers support "getObject" on the resultset the same way. In particular, the jtds driver returns back a "ClobImpl" type Object when "getObject" is called on some text\varchar(MAX) columns.The simple solution is to check the column type and if it is a Clob\Blob or other known String type, call "getString" instead. Improvement String types not converted from CLOB Not all JBDC drivers support "getObject" on the resultset the same way. In particular, the jtds driver returns back a "ClobImpl" type Object when "getObject" is called on some text\varchar(MAX) columns.The simple solution is to check the column type and if it is a Clob\Blob or other known String type, call "getString" instead.
CAMEL-5550 Add headerName option to xpath/xpath language We recently added headerName to @XPath / @XQuery to support doing xpaths on headers. We should add that as well to the xpath/xquery languages so its exposed in the DSL, so people can use that.For example in a content based router. Today there is some functions that return a header, but its a bit cumbersome to use. Maybe people have stored a xml in a header, and just want the xpath to evaluate on that.The Java / Scala DSL is a bit heavier to add, as it would entail new methods in various builder classes to support that. And we got a bunch already for the namespaces, and return type etc. So be selective and only add a few for the header which makes the most sense. People can always create the expression/predicate using the xpath builder itself. Improvement Add headerName option to xpath/xpath language We recently added headerName to @XPath / @XQuery to support doing xpaths on headers. We should add that as well to the xpath/xquery languages so its exposed in the DSL, so people can use that.For example in a content based router. Today there is some functions that return a header, but its a bit cumbersome to use. Maybe people have stored a xml in a header, and just want the xpath to evaluate on that.The Java / Scala DSL is a bit heavier to add, as it would entail new methods in various builder classes to support that. And we got a bunch already for the namespaces, and return type etc. So be selective and only add a few for the header which makes the most sense. People can always create the expression/predicate using the xpath builder itself.
CAMEL-5549 create a VTD-XML component Seehttps://code.google.com/a/apache-extras.org/p/camel-extra/issues/detail?id=2It would be great with a component for vtd-xml library which is very efficient for xpath processing big files / payloads. The component is being hosted at Camel extra, eg camel-vtdxml is located at Camel Extra, due VTD-XML being GPL. We should though add integration in camel-core DSL for the vtdxml language so its easy to use out of the box, like we do for xquery and other languages that are not part in the core itself. New Feature create a VTD-XML component Seehttps://code.google.com/a/apache-extras.org/p/camel-extra/issues/detail?id=2It would be great with a component for vtd-xml library which is very efficient for xpath processing big files / payloads. The component is being hosted at Camel extra, eg camel-vtdxml is located at Camel Extra, due VTD-XML being GPL. We should though add integration in camel-core DSL for the vtdxml language so its easy to use out of the box, like we do for xquery and other languages that are not part in the core itself.
CAMEL-5546 Zookeper master election logic is too tightly bound to the route policy logic The current structure of the ZooKeeperRoutePolicy does not allow the master election to be re-used.Extracting the master election to a separate top-level class with a suitable, simple API;{noformat}public boolean isMaster() { ... } {noformat}would make re-using the election for things that are not a route easier.The election constructor then takes the same parameters as the existing ZookeeperRoutePolicy, and the new ZooKeeperRoutePolicy would take an election instance. Improvement Zookeper master election logic is too tightly bound to the route policy logic The current structure of the ZooKeeperRoutePolicy does not allow the master election to be re-used.Extracting the master election to a separate top-level class with a suitable, simple API;{noformat}public boolean isMaster() { ... } {noformat}would make re-using the election for things that are not a route easier.The election constructor then takes the same parameters as the existing ZookeeperRoutePolicy, and the new ZooKeeperRoutePolicy would take an election instance.
CAMEL-5544 Zookeeper route policy constructor has no need to throw exceptions The only exceptions that are thrown by the constructor of the ZooKeeperRoutePolicy are thrown by the requirement to make the node name more pretty - adding the hostname to the created zookeeper node.This exception is fairly unlikely to happen and therefore can be caught closer to the cause, logging a warning and using a default hostname.This would clean up the API by avoiding throwing any exceptions. Improvement Zookeeper route policy constructor has no need to throw exceptions The only exceptions that are thrown by the constructor of the ZooKeeperRoutePolicy are thrown by the requirement to make the node name more pretty - adding the hostname to the created zookeeper node.This exception is fairly unlikely to happen and therefore can be caught closer to the cause, logging a warning and using a default hostname.This would clean up the API by avoiding throwing any exceptions.
CAMEL-5534 OSGi split package org.apache.camel.component, both camel-core and camel-spring export Both camel-core and camel-spring export package org.apache.camel.component. camel-spring contains org.apache.camel.component.ResourceBasedComponent, and camel-core does not, so any bundles that resolve to camel-core (most do) will get a ClassNotFoundException for ResourceBasedComponent Task OSGi split package org.apache.camel.component, both camel-core and camel-spring export Both camel-core and camel-spring export package org.apache.camel.component. camel-spring contains org.apache.camel.component.ResourceBasedComponent, and camel-core does not, so any bundles that resolve to camel-core (most do) will get a ClassNotFoundException for ResourceBasedComponent
CAMEL-5530 Suggestion to replace HBaseContants class with HBaseConstants interface and other minor changes. I was looking at the code and noticed that the HBaseContant class can be an interface since all of the defined fields can be set within an interface.I am still trying to understand why the class was called HBaseContant instead of something like HBaseConstants.  There are also minors changes that I made that made the code a little consistent with my prior fix with respect to tablePool.getTable call.I will include a patch that you can take a look at and decide if these changes are useful or not. Improvement Suggestion to replace HBaseContants class with HBaseConstants interface and other minor changes. I was looking at the code and noticed that the HBaseContant class can be an interface since all of the defined fields can be set within an interface.I am still trying to understand why the class was called HBaseContant instead of something like HBaseConstants.  There are also minors changes that I made that made the code a little consistent with my prior fix with respect to tablePool.getTable call.I will include a patch that you can take a look at and decide if these changes are useful or not.
CAMEL-5529 Shutdown Twitter instance if endpoint is shutdown Playing with dynamic routes, I found out that when TwitterEndpoints are stopped or shutdown, so should the Twitter instance too, and/or TwitterStream.The Twitter object (from Twitter4J) keeps connected with Twitter until a session timeout happens, which is controlled by Twitter's server-side in this case.This patch adds a call to Twitter.shutdown on all three endpoints, and in case of the TwitterEndpointEvent, it will call TwitterStream.shutdown() if it's just a stop of the endpoint (not complete shutdown).Also I added a call to restart the streaming. Improvement Shutdown Twitter instance if endpoint is shutdown Playing with dynamic routes, I found out that when TwitterEndpoints are stopped or shutdown, so should the Twitter instance too, and/or TwitterStream.The Twitter object (from Twitter4J) keeps connected with Twitter until a session timeout happens, which is controlled by Twitter's server-side in this case.This patch adds a call to Twitter.shutdown on all three endpoints, and in case of the TwitterEndpointEvent, it will call TwitterStream.shutdown() if it's just a stop of the endpoint (not complete shutdown).Also I added a call to restart the streaming.
CAMEL-5524 Upgrade to Aries 1.0.0 See http://camel.465427.n5.nabble.com/Camel-Aries-Blueprint-dependency-needs-to-be-changed-from-0-3-to-1-0-0-for-Karaf-3-td5717106.html Task Upgrade to Aries 1.0.0 See http://camel.465427.n5.nabble.com/Camel-Aries-Blueprint-dependency-needs-to-be-changed-from-0-3-to-1-0-0-for-Karaf-3-td5717106.html
CAMEL-5523 camel-hbase - Upgrade to a newer release There is a 0.94 release of hbase. We currently use 0.90. Task camel-hbase - Upgrade to a newer release There is a 0.94 release of hbase. We currently use 0.90.
CAMEL-5522 Cannot install camel-atom, camel-rss and camel-hbase in Karaf camel-atomcamel-hbasecamel-rssOn trunk fails to test in tests/camel-itest-karaf.I am trying to install them manually in Karaf 2.2.9 to get more detail what happens, as sometime the unit tests leaves you in the dark (nothing logged of interrest). Task Cannot install camel-atom, camel-rss and camel-hbase in Karaf camel-atomcamel-hbasecamel-rssOn trunk fails to test in tests/camel-itest-karaf.I am trying to install them manually in Karaf 2.2.9 to get more detail what happens, as sometime the unit tests leaves you in the dark (nothing logged of interrest).
CAMEL-5521 Add option to file/ftp producer to move any existing file before writing See nabblehttp://camel.465427.n5.nabble.com/File-Component-Rename-an-existing-file-tp5716075.htmlWe should add new moveExisting enum to fileExist option, so end user can configure Camel to move any existing file before writing a new file.That would need a corresponding option to set the expression for the new name to use.For example to append .old to the existing namemoveExisting=${file:name}.oldThe trick would be if there is already an .old file. In that case Camel should fail with an exception. New Feature Add option to file/ftp producer to move any existing file before writing See nabblehttp://camel.465427.n5.nabble.com/File-Component-Rename-an-existing-file-tp5716075.htmlWe should add new moveExisting enum to fileExist option, so end user can configure Camel to move any existing file before writing a new file.That would need a corresponding option to set the expression for the new name to use.For example to append .old to the existing namemoveExisting=${file:name}.oldThe trick would be if there is already an .old file. In that case Camel should fail with an exception.
CAMEL-5516 @Consume and @Produce annotations - Allow to refer to property on bean with the endpoint to use Currently the @Consume and @Produce annotations on a bean requires to know the endpoint by either a ref or uri. As often you may configure the bean itself with the endpoint ref/uri, we should allow these @Consume and @Produce annotations to use a property on the bean to get the endpoint.Then you can configure the bean using IoC style.For example{code}@Consume(property = "fooEndpoint")public void onFoo(String input) {   ...}...// and having getter/setter to fooEndpointpublic String getFooEndpoint() {   return fooEndpoint;}{code} New Feature @Consume and @Produce annotations - Allow to refer to property on bean with the endpoint to use Currently the @Consume and @Produce annotations on a bean requires to know the endpoint by either a ref or uri. As often you may configure the bean itself with the endpoint ref/uri, we should allow these @Consume and @Produce annotations to use a property on the bean to get the endpoint.Then you can configure the bean using IoC style.For example{code}@Consume(property = "fooEndpoint")public void onFoo(String input) {   ...}...// and having getter/setter to fooEndpointpublic String getFooEndpoint() {   return fooEndpoint;}{code}
CAMEL-5513 Add option to changed readLock to denote whether a zero file size is accepted or not Some people may write zero files and want them to be accepted.  Improvement Add option to changed readLock to denote whether a zero file size is accepted or not Some people may write zero files and want them to be accepted. 
CAMEL-5512 camel-ftp - Improve readlock changed to use fine grained API to get file details If you have a dir with a lot of files, then we are currently doing a LS each time. We should try to use the fine grained API from the ftp clients to get file size / timestamp when applicable. Improvement camel-ftp - Improve readlock changed to use fine grained API to get file details If you have a dir with a lot of files, then we are currently doing a LS each time. We should try to use the fine grained API from the ftp clients to get file size / timestamp when applicable.
CAMEL-5511 Upgrade camel-http4 to http client 4.2.1 We should upgrade from 4.1 to 4.2 for http client 4 in camel-http4. Task Upgrade camel-http4 to http client 4.2.1 We should upgrade from 4.1 to 4.2 for http client 4 in camel-http4.
CAMEL-5508 Optimize property placeholder resolution at runtime to lookup configured properties component once If you are not using property placeholders at all, then we can optimize to avoid lookup up properties component when parsing uris and the likes. Looking up the component is essentially only needed at startup. Improvement Optimize property placeholder resolution at runtime to lookup configured properties component once If you are not using property placeholders at all, then we can optimize to avoid lookup up properties component when parsing uris and the likes. Looking up the component is essentially only needed at startup.
CAMEL-5503 Expanding Bean Binding annotations to define explicitly what to apply it to Currently the bean binding annotations are applied to the body like so :    public void doSomething(@XPath("//foo/bar/text()") String someValue) {    }It would be nice if you could specify what you want to apply it to; for instance you could specify to apply it to headers/properties etcIn terms of annotations it may look something like:    public void doSomething(@XPath("//foo/bar/text()", @Header("someHeader")) String someValue) {    }For backwards compatability it would of course still apply to the body by default, but we can still offer the ability to use it apply it explicitly ie    @XPath("//baz/text(), @Body) String someOtherValueI feel like this would be a useful addition to camel's bean binding.If anyone feels this is a good idea, I am offering to try it out and see how it goes Improvement Expanding Bean Binding annotations to define explicitly what to apply it to Currently the bean binding annotations are applied to the body like so :    public void doSomething(@XPath("//foo/bar/text()") String someValue) {    }It would be nice if you could specify what you want to apply it to; for instance you could specify to apply it to headers/properties etcIn terms of annotations it may look something like:    public void doSomething(@XPath("//foo/bar/text()", @Header("someHeader")) String someValue) {    }For backwards compatability it would of course still apply to the body by default, but we can still offer the ability to use it apply it explicitly ie    @XPath("//baz/text(), @Body) String someOtherValueI feel like this would be a useful addition to camel's bean binding.If anyone feels this is a good idea, I am offering to try it out and see how it goes
CAMEL-5502 SjmsEndpoint getDestinationName() Doesn't Remove Parameters The SjmsEndpoint fails to remove the endpoint parameters which causes some JMS providers to fail when creating a destination.See http://camel.465427.n5.nabble.com/SJMS-Issues-tp5716996.html for full details. Sub-task SjmsEndpoint getDestinationName() Doesn't Remove Parameters The SjmsEndpoint fails to remove the endpoint parameters which causes some JMS providers to fail when creating a destination.See http://camel.465427.n5.nabble.com/SJMS-Issues-tp5716996.html for full details.
CAMEL-5497 Add Batch Transaction Support New Feature:* Batch Transactions Sub-task Add Batch Transaction Support New Feature:* Batch Transactions
CAMEL-5496 Odd default value for file2's readLockTimeout documentation On the documentation page for file2, the default value for readLockTimeout is '<li></li>'http://camel.apache.org/file2.htmlThis may indeed be intentional to notify the user that they should read the description, but it's unclear Task Odd default value for file2's readLockTimeout documentation On the documentation page for file2, the default value for readLockTimeout is '<li></li>'http://camel.apache.org/file2.htmlThis may indeed be intentional to notify the user that they should read the description, but it's unclear
CAMEL-5494 Camel's JavaConfigContextLoader class lacks support for Camel's testing annotations While implementing a Camel route in a new project which uses Spring's JavaConfig I ran into some issues with tests I had written.Originally I implemented the tests using the old XML-based appContext, then once I had everything working I started converting it all to JavaConfig.  After some research, I found that to do this I had to use{code:java}@ContextConfiguration(        locations = {"blah.EsbConfig", ... },        loader = JavaConfigContextLoader.class){code}Which was fine, except it completely broke the functionality of the @MockEndpoints annotation on my tests.  I tried adding a org.apache.camel.impl.InterceptSendToMockEndpointStrategy bean to my JavaConfig context, but that didn't change anything.  To fix it I ended up making a new (Smart)ContextLoader called CamelSpringDelegatingTestContextLoader, which extends Spring's DelegatingSmartContextLoader and is based on CamelSpringTestContextLoader.  It handles both XML and JavaConfig style Spring configuration, and so far seems to have fixed everything.  You must use CamelSpringJUnit4ClassRunner for this to work, and change @ContextConfiguration's "locations" to "classes" (and specify them as Class instances). See example below.{code:java}@RunWith(CamelSpringJUnit4ClassRunner.class)@ContextConfiguration(        classes = {TestCamelSpringDelegatingTestContextLoader.TestConfig.class},        loader = CamelSpringDelegatingTestContextLoader.class)@MockEndpointspublic class TestSomethingWithCamel { ... }{code} Improvement Camel's JavaConfigContextLoader class lacks support for Camel's testing annotations While implementing a Camel route in a new project which uses Spring's JavaConfig I ran into some issues with tests I had written.Originally I implemented the tests using the old XML-based appContext, then once I had everything working I started converting it all to JavaConfig.  After some research, I found that to do this I had to use{code:java}@ContextConfiguration(        locations = {"blah.EsbConfig", ... },        loader = JavaConfigContextLoader.class){code}Which was fine, except it completely broke the functionality of the @MockEndpoints annotation on my tests.  I tried adding a org.apache.camel.impl.InterceptSendToMockEndpointStrategy bean to my JavaConfig context, but that didn't change anything.  To fix it I ended up making a new (Smart)ContextLoader called CamelSpringDelegatingTestContextLoader, which extends Spring's DelegatingSmartContextLoader and is based on CamelSpringTestContextLoader.  It handles both XML and JavaConfig style Spring configuration, and so far seems to have fixed everything.  You must use CamelSpringJUnit4ClassRunner for this to work, and change @ContextConfiguration's "locations" to "classes" (and specify them as Class instances). See example below.{code:java}@RunWith(CamelSpringJUnit4ClassRunner.class)@ContextConfiguration(        classes = {TestCamelSpringDelegatingTestContextLoader.TestConfig.class},        loader = CamelSpringDelegatingTestContextLoader.class)@MockEndpointspublic class TestSomethingWithCamel { ... }{code}
CAMEL-5492 Add option to restrict HTTP method in camel-jetty and camel-servlet See http://camel.465427.n5.nabble.com/Jetty-consumer-restricting-methods-td5716938.html Improvement Add option to restrict HTTP method in camel-jetty and camel-servlet See http://camel.465427.n5.nabble.com/Jetty-consumer-restricting-methods-td5716938.html
CAMEL-5489 Support for selection of direct-vm consumers It may be useful to support ant-like path expression when sending exchangesto multiple direct-vm consumers.{code}protected RouteBuilder createRouteBuilder() throws Exception {    return new RouteBuilder() {        @Override        public void configure() throws Exception {            from("direct:start")                .recipientList(new DirectVmConsumerExpression("direct-vm://parent/**/context*"));        }    };}private RouteBuilder createRouteBuilderCamelContext2() {    return new RouteBuilder() {        @Override        public void configure() throws Exception {            from("direct-vm:parent/child/context2")                .to("mock:result2");        }    };}private RouteBuilder createRouteBuilderCamelContext3() {    return new RouteBuilder() {        @Override        public void configure() throws Exception {            from("direct-vm:parent/child/grandchild/context3")                .to("mock:result3");        }    };}{code} Improvement Support for selection of direct-vm consumers It may be useful to support ant-like path expression when sending exchangesto multiple direct-vm consumers.{code}protected RouteBuilder createRouteBuilder() throws Exception {    return new RouteBuilder() {        @Override        public void configure() throws Exception {            from("direct:start")                .recipientList(new DirectVmConsumerExpression("direct-vm://parent/**/context*"));        }    };}private RouteBuilder createRouteBuilderCamelContext2() {    return new RouteBuilder() {        @Override        public void configure() throws Exception {            from("direct-vm:parent/child/context2")                .to("mock:result2");        }    };}private RouteBuilder createRouteBuilderCamelContext3() {    return new RouteBuilder() {        @Override        public void configure() throws Exception {            from("direct-vm:parent/child/grandchild/context3")                .to("mock:result3");        }    };}{code}
CAMEL-5488 Update and improve camel-hl7 HAPI 2.0 has been recently released. camel-hl7 should depend on this version.Apart from this update, I made some more improvements:* updated dependency from mina to mina2* inject (custom) Parser instance into unmarshal* ability to parse XML-encoded hl7* added "Terser" language and expression to be able to extract fields from a parsed message* added expression to generate acknowledgement messages* added predicate to validate a parsed message against a HAPI ValidationContext* corrected some javadocs Improvement Update and improve camel-hl7 HAPI 2.0 has been recently released. camel-hl7 should depend on this version.Apart from this update, I made some more improvements:* updated dependency from mina to mina2* inject (custom) Parser instance into unmarshal* ability to parse XML-encoded hl7* added "Terser" language and expression to be able to extract fields from a parsed message* added expression to generate acknowledgement messages* added predicate to validate a parsed message against a HAPI ValidationContext* corrected some javadocs
CAMEL-5486 ConnectionResource Refactoring and OSGi Export Fix Includes:* Fixed OSGi exports for the Connection Resources.* Created a cleaner ConnectionFactoryResource as the default.* Began refactoring JMS APIs to a single package structure. Sub-task ConnectionResource Refactoring and OSGi Export Fix Includes:* Fixed OSGi exports for the Connection Resources.* Created a cleaner ConnectionFactoryResource as the default.* Began refactoring JMS APIs to a single package structure.
CAMEL-5483 Component for neo4j I have created a component for neo4j. It is a producer only and it allows you to create / remove nodes and relationships.------ read me ----------camel-neo4j========The camel-neo4j component allows you to treat Neo4j as a camel producer endpoint. This means you can use this component in to() calls but not from() calls. This component is backed by the Spring Data Neo4j Library.* As a producer, can create or remove nodes, and create or remove relationships.* Can support as many endpoints as required, eg for multiple databases across multiple instances.* Headers set for node id (for created nodes), relationship id (for created relationships)How to Use==========You can use neo4j as an endpoint with the following URI.`neo4j:http://hostname[:port]/database`Then you need to set a header on each message, one of the following enum types`	CREATE_NODE,	REMOVE_NODE,	CREATE_RELATIONSHIP,	REMOVE_RELATIONSHIP`Eg,`exchange.getIn().setHeader(Neo4jEndpoint.HEADER_OPERATION, Neo4jOperation.CREATE_NODE);`The body of the message is used to determine the node or relationship to manipulate. The following body types are supported:For CREATE_NODE:* null body - create default node* Map body - create node with the properties set from the mapFor REMOVE_NODE:* Long or Integer - remove node using the body as the id* neo4j Node instance - remove the node specified by that instance For CREATE_RELATIONSHIP:* SpringDataRelationship - create relationship specified by any @NodeEntity annoted Spring entities.* BasicRelationship - create relationship specified by the neo4j node typesFor REMOVE_RELATIONSHIP:* Long or Integer - remove relationship using the body as the id* SpringDataRelationship - remove relationship specified by the @NodeEntity annoted Spring entities.* BasicRelationship - remove relationship specified by the neo4j node typesTests=====camel-neo4j has a complete set of unit tests. In addition there are some integration tests that require you to run a local instance of neo4j. By default the tests will look at localhost:7474 on http://localhost:7474/db/data/- Initial contribution by Stephen Samuel. Improvement Component for neo4j I have created a component for neo4j. It is a producer only and it allows you to create / remove nodes and relationships.------ read me ----------camel-neo4j========The camel-neo4j component allows you to treat Neo4j as a camel producer endpoint. This means you can use this component in to() calls but not from() calls. This component is backed by the Spring Data Neo4j Library.* As a producer, can create or remove nodes, and create or remove relationships.* Can support as many endpoints as required, eg for multiple databases across multiple instances.* Headers set for node id (for created nodes), relationship id (for created relationships)How to Use==========You can use neo4j as an endpoint with the following URI.`neo4j:http://hostname[:port]/database`Then you need to set a header on each message, one of the following enum types`	CREATE_NODE,	REMOVE_NODE,	CREATE_RELATIONSHIP,	REMOVE_RELATIONSHIP`Eg,`exchange.getIn().setHeader(Neo4jEndpoint.HEADER_OPERATION, Neo4jOperation.CREATE_NODE);`The body of the message is used to determine the node or relationship to manipulate. The following body types are supported:For CREATE_NODE:* null body - create default node* Map body - create node with the properties set from the mapFor REMOVE_NODE:* Long or Integer - remove node using the body as the id* neo4j Node instance - remove the node specified by that instance For CREATE_RELATIONSHIP:* SpringDataRelationship - create relationship specified by any @NodeEntity annoted Spring entities.* BasicRelationship - create relationship specified by the neo4j node typesFor REMOVE_RELATIONSHIP:* Long or Integer - remove relationship using the body as the id* SpringDataRelationship - remove relationship specified by the @NodeEntity annoted Spring entities.* BasicRelationship - remove relationship specified by the neo4j node typesTests=====camel-neo4j has a complete set of unit tests. In addition there are some integration tests that require you to run a local instance of neo4j. By default the tests will look at localhost:7474 on http://localhost:7474/db/data/- Initial contribution by Stephen Samuel.
CAMEL-5480 QuickFix session logs in before Camel routes are started To recreate the issue:1) Configure the Camel context to have autostart=false2) Create a route that processes the loggin message3) Refresh the Spring application context4) Start the Spring application contextThe QuickFixj engine will be created and started at step 3 but the route that processes the login message only gets started at step 4. If there are other components in the Spring application context that are slow to initialize then the QuickFixj engines will login before the Camel context (and hence the routes) have been started.This is an issue for us as we add a username and password to the login message using a Camel route.Proposed solution:Have the Dispatcher in the QuickFixjEngine extend ApplicationExtended and disable login until the CamelContext is started.Patch and test to follow.  Improvement QuickFix session logs in before Camel routes are started To recreate the issue:1) Configure the Camel context to have autostart=false2) Create a route that processes the loggin message3) Refresh the Spring application context4) Start the Spring application contextThe QuickFixj engine will be created and started at step 3 but the route that processes the login message only gets started at step 4. If there are other components in the Spring application context that are slow to initialize then the QuickFixj engines will login before the Camel context (and hence the routes) have been started.This is an issue for us as we add a username and password to the login message using a Camel route.Proposed solution:Have the Dispatcher in the QuickFixjEngine extend ApplicationExtended and disable login until the CamelContext is started.Patch and test to follow. 
CAMEL-5479 Add support for the InOut Message Exchange Pattern to the twitter UserProducer in order to be able to retrieve the unique identifier for the published tweet We have a requirement in our application to be able to post to Twitter *and associate the unique identifier for the published tweet (tweet id)* to our application specific entity.We are fairly new to Apache Camel and we have not been able to find a way to retrieve the tweet id with the current twitter component implementation (based on Twitter4J). If our current (limited) understanding of Apache Camel is correct, we believe that the way to accomplish this would be by using the InOut [message exchange pattern (MEP)|http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html] on the "twitter://timeline/user" endpoint. Nevertheless AFAIK the current endpoint implementation in [UserProducer class|http://svn.apache.org/viewvc/camel/trunk/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/producer/UserProducer.java?view=markup] only supports the InOnly MEP and *discards the response object returned by the Twitter API which contains the published tweet id*.Adding InOut MEP support to the UserProducer would allow a very convenient Camel route like this one:{code:java}from("direct:tweets")  ...  .inOut("twitter://timeline/user")  .transform().simple("The tweet '${body.text}' was published with the tweet id '${body.id}'")  ...{code}The attached patch against the current trunk implements InOut MEP support in the UserProducer class together with two unit tests to exercise the code. We are available to provide patches for other branches and to update the [Twitter Camel component documentation|http://camel.apache.org/twitter.html]. Improvement Add support for the InOut Message Exchange Pattern to the twitter UserProducer in order to be able to retrieve the unique identifier for the published tweet We have a requirement in our application to be able to post to Twitter *and associate the unique identifier for the published tweet (tweet id)* to our application specific entity.We are fairly new to Apache Camel and we have not been able to find a way to retrieve the tweet id with the current twitter component implementation (based on Twitter4J). If our current (limited) understanding of Apache Camel is correct, we believe that the way to accomplish this would be by using the InOut [message exchange pattern (MEP)|http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html] on the "twitter://timeline/user" endpoint. Nevertheless AFAIK the current endpoint implementation in [UserProducer class|http://svn.apache.org/viewvc/camel/trunk/components/camel-twitter/src/main/java/org/apache/camel/component/twitter/producer/UserProducer.java?view=markup] only supports the InOnly MEP and *discards the response object returned by the Twitter API which contains the published tweet id*.Adding InOut MEP support to the UserProducer would allow a very convenient Camel route like this one:{code:java}from("direct:tweets")  ...  .inOut("twitter://timeline/user")  .transform().simple("The tweet '${body.text}' was published with the tweet id '${body.id}'")  ...{code}The attached patch against the current trunk implements InOut MEP support in the UserProducer class together with two unit tests to exercise the code. We are available to provide patches for other branches and to update the [Twitter Camel component documentation|http://camel.apache.org/twitter.html].
CAMEL-5478 File component does not consume empty files with the changed readLock In the 2.10.0 version of the FileChangedExclusiveReadLockStrategy, a read-lock cannot be obtained on a zero length file. There is an explicit check to disallow this.e.g.if (newLastModified == lastModified && newLength == length && length != 0) {// We consider that zero-length files are files in progressLOG.trace("Read lock acquired.");I disagree with the reasoning in the comment. If the size of a file hasn't changed in the poll interval, it should be consumed irrespective of size. Wish File component does not consume empty files with the changed readLock In the 2.10.0 version of the FileChangedExclusiveReadLockStrategy, a read-lock cannot be obtained on a zero length file. There is an explicit check to disallow this.e.g.if (newLastModified == lastModified && newLength == length && length != 0) {// We consider that zero-length files are files in progressLOG.trace("Read lock acquired.");I disagree with the reasoning in the comment. If the size of a file hasn't changed in the poll interval, it should be consumed irrespective of size.
CAMEL-5477 Camel component contribution for CouchDB Patch for my contribution for camel couchdb component. New Feature Camel component contribution for CouchDB Patch for my contribution for camel couchdb component.
CAMEL-5474 Support to build the camel-soap offline camel-soap introduce soap12.xsd which has the import from the internet, it will cause some trouble when you build the camel-soap offline. Improvement Support to build the camel-soap offline camel-soap introduce soap12.xsd which has the import from the internet, it will cause some trouble when you build the camel-soap offline.
CAMEL-5462 Add tray support to camel-print Currently its not possible to select a media tray to print to.We need this so we forked camel to add media tray support.I will add an patch/diff. Improvement Add tray support to camel-print Currently its not possible to select a media tray to print to.We need this so we forked camel to add media tray support.I will add an patch/diff.
CAMEL-5452 DoCatch doesn't notify ExchangeFailureHandledEvent The doCatch EIP doesn't honour the emission of an {{ExchangeFailureHandledEvent}} when it recognises and handles an exception. Improvement DoCatch doesn't notify ExchangeFailureHandledEvent The doCatch EIP doesn't honour the emission of an {{ExchangeFailureHandledEvent}} when it recognises and handles an exception.
CAMEL-5446 Add option to disable ManagementLoadTask There is a background task that by default runs once per sec and calculate the load task of your CamelContext and the routes.If you run a lot of CamelContext in a JVM, you take up 1 thread per CamelContext for this background task.If end user do not care about the load task info at runtime, we should offer a way to easily disable the load task.Currently you would have to disable all the JMX stats by setting this to off. This means there is no performance stats either, eg number of messages processed etc. Those stats people may want, as they dont take up 1 background thread to calculate. Improvement Add option to disable ManagementLoadTask There is a background task that by default runs once per sec and calculate the load task of your CamelContext and the routes.If you run a lot of CamelContext in a JVM, you take up 1 thread per CamelContext for this background task.If end user do not care about the load task info at runtime, we should offer a way to easily disable the load task.Currently you would have to disable all the JMX stats by setting this to off. This means there is no performance stats either, eg number of messages processed etc. Those stats people may want, as they dont take up 1 background thread to calculate.
CAMEL-5445 ManagementLoadTask - Background thread should defer starting till CamelContext has been started This ensures CamelContext has been fully started before the task is calculating. And also the thread name pattern hasn't been initalized as well, so if you in the same JVM run multiple CamelContext's you cannot tell the difference in the thread name of the background thread. Improvement ManagementLoadTask - Background thread should defer starting till CamelContext has been started This ensures CamelContext has been fully started before the task is calculating. And also the thread name pattern hasn't been initalized as well, so if you in the same JVM run multiple CamelContext's you cannot tell the difference in the thread name of the background thread.
CAMEL-5444 camel-jms - Log at INFO level if shared replyTo queues are in use, as they are not as fast as temporary or exclusive queues See nabblehttp://camel.465427.n5.nabble.com/fyi-SI-tp5716049.htmlWe should log at INFO (maybe even WARN level) if shared reply queues are in use as they are not as fast. They have their purposes though, such as a shared clustered queue, or if a queue is used by other apps too (not ideally thought). Temporary and Exclusive reply queues are faster.See the JMS docs at the _request reply_ section, for much more details. Improvement camel-jms - Log at INFO level if shared replyTo queues are in use, as they are not as fast as temporary or exclusive queues See nabblehttp://camel.465427.n5.nabble.com/fyi-SI-tp5716049.htmlWe should log at INFO (maybe even WARN level) if shared reply queues are in use as they are not as fast. They have their purposes though, such as a shared clustered queue, or if a queue is used by other apps too (not ideally thought). Temporary and Exclusive reply queues are faster.See the JMS docs at the _request reply_ section, for much more details.
CAMEL-5441 Remove the import package of META-INF.cxf from the camel cxf related examples As the Spring DM will take care of loading the META-INF.cxf file, we don't need to imports that package in camel cxf example bundles. Improvement Remove the import package of META-INF.cxf from the camel cxf related examples As the Spring DM will take care of loading the META-INF.cxf file, we don't need to imports that package in camel cxf example bundles.
CAMEL-5439 camel-ssh component should retrun the stander error and shell exist status camel-ssh component should not just return the stander output, it should also return the stander error and shell exist status.Here is the mailing thread[1] about it.[1]http://camel.465427.n5.nabble.com/ssh-return-code-and-stderror-td5715872.html Improvement camel-ssh component should retrun the stander error and shell exist status camel-ssh component should not just return the stander output, it should also return the stander error and shell exist status.Here is the mailing thread[1] about it.[1]http://camel.465427.n5.nabble.com/ssh-return-code-and-stderror-td5715872.html
CAMEL-5438 Dynamic resolve property for CamelContext If you read the description of the camel http4 component you can find an example set of parameters for a consumer.{code}<camelContext>  <properties>    <property key="http.proxyHost" value="172.168.18.9"/>    <property key="http.proxyPort" value="8080"/>  </properties></camelContext>{code}In this example, the xml has no universal solution.I think that the universal solution is to use a property placeholder. In this case, you can use an external configuration.{code}<camelContext>  <properties>    <property key="http.proxyHost" value="{{http.proxyHost}}"/>    <property key="http.proxyPort" value="{{http.proxyPort}}"/>  </properties></camelContext>{code}One possible solution is to replace the existing structure to access the property{code}String value = getCamelContext().getProperties().get("my_property");{code}Replace the call of the new method{code}String value = getCamelContext().getProperty("my_property");{code}Inside a method call to use the old design and a response sent to the method of resolvePropertyPlaceholders.{code:title=An example of implementation}public String getProperty(String name) {    String value = getProperties().get(name);    if(ObjectHelper.isNotEmpty(value))       value = resolvePropertyPlaceholders(value);    return value; }{code} New Feature Dynamic resolve property for CamelContext If you read the description of the camel http4 component you can find an example set of parameters for a consumer.{code}<camelContext>  <properties>    <property key="http.proxyHost" value="172.168.18.9"/>    <property key="http.proxyPort" value="8080"/>  </properties></camelContext>{code}In this example, the xml has no universal solution.I think that the universal solution is to use a property placeholder. In this case, you can use an external configuration.{code}<camelContext>  <properties>    <property key="http.proxyHost" value="{{http.proxyHost}}"/>    <property key="http.proxyPort" value="{{http.proxyPort}}"/>  </properties></camelContext>{code}One possible solution is to replace the existing structure to access the property{code}String value = getCamelContext().getProperties().get("my_property");{code}Replace the call of the new method{code}String value = getCamelContext().getProperty("my_property");{code}Inside a method call to use the old design and a response sent to the method of resolvePropertyPlaceholders.{code:title=An example of implementation}public String getProperty(String name) {    String value = getProperties().get(name);    if(ObjectHelper.isNotEmpty(value))       value = resolvePropertyPlaceholders(value);    return value; }{code}
CAMEL-5436 Cache expects string in CacheKey header Currently if you specify other value than String as the cache key header, we get ClassCastException. It would be great, if it would use the type converter to convert the key object into String. Improvement Cache expects string in CacheKey header Currently if you specify other value than String as the cache key header, we get ClassCastException. It would be great, if it would use the type converter to convert the key object into String.
CAMEL-5433 camel-hdfs - Allow to lazy connect as hdfs file system has hardcoded 15 min retry in case no connection When start a Camel app with camel-hdfs (either as producer or consumer), then getting a hdfs file system object may have Hadoop block for up till 15 minutes where it tries to obtain a connection to the cluster.This makes the app appear as blocking and people dont want their apps to block for 15 min on startup.We should let the hadoop hdfs connection happing in an async thread, so the app can startup. Configurable so you can turn back the old behavior.Hadoop dosn't allow to configure a lower timeout etc this as its hardcoded. Improvement camel-hdfs - Allow to lazy connect as hdfs file system has hardcoded 15 min retry in case no connection When start a Camel app with camel-hdfs (either as producer or consumer), then getting a hdfs file system object may have Hadoop block for up till 15 minutes where it tries to obtain a connection to the cluster.This makes the app appear as blocking and people dont want their apps to block for 15 min on startup.We should let the hadoop hdfs connection happing in an async thread, so the app can startup. Configurable so you can turn back the old behavior.Hadoop dosn't allow to configure a lower timeout etc this as its hardcoded.
CAMEL-5431 Finish and polish camel-twitter - Implement support for Twitter "Trends" API- Improved inheritance and reduced duplication- Minor refactoring- Improved code coverage- Improved Javadoc comments Improvement Finish and polish camel-twitter - Implement support for Twitter "Trends" API- Improved inheritance and reduced duplication- Minor refactoring- Improved code coverage- Improved Javadoc comments
CAMEL-5430 Remove un-necessary connections to the Twitter API Connects to the Twitter REST API are handled by Twitter4J objects.  These objects should be singletons within this component, created on-demand as needed.  While working with the component, I noticed some old code that, as an example, needlessly initialized a connection to the main API when only the Streaming API was needed. Improvement Remove un-necessary connections to the Twitter API Connects to the Twitter REST API are handled by Twitter4J objects.  These objects should be singletons within this component, created on-demand as needed.  While working with the component, I noticed some old code that, as an example, needlessly initialized a connection to the main API when only the Streaming API was needed.
CAMEL-5428 Seda website documentation has queueSize parameter, but the parameter does not exist The seda endpoint website documentation has both size and queueSize.  At least in Camel 2.10.0, this parameter does not exist and appears to be called only size.  The documentation on the web site should be updated. Task Seda website documentation has queueSize parameter, but the parameter does not exist The seda endpoint website documentation has both size and queueSize.  At least in Camel 2.10.0, this parameter does not exist and appears to be called only size.  The documentation on the web site should be updated.
CAMEL-5425 Add documentation for camel-leveldb See CAMEL-5050Its basically a copy of camel-hawtdb for the aggregate EIP repo. Task Add documentation for camel-leveldb See CAMEL-5050Its basically a copy of camel-hawtdb for the aggregate EIP repo.
CAMEL-5418 camel-soap - Add support for SOAP 1.2 The camel-soap data format only supports SOAP 1.1.We should add support for SOAP 1.2 (it has a different namespace).And for that we may have to let the end user decide in the DLS if using soap 1.1 or 1.2, as we may need to known this when we marshal (xml -> pojo).The trick would be that we would have 2 set of generated pojos based on soap 1.1 or 1.2. New Feature camel-soap - Add support for SOAP 1.2 The camel-soap data format only supports SOAP 1.1.We should add support for SOAP 1.2 (it has a different namespace).And for that we may have to let the end user decide in the DLS if using soap 1.1 or 1.2, as we may need to known this when we marshal (xml -> pojo).The trick would be that we would have 2 set of generated pojos based on soap 1.1 or 1.2.
CAMEL-5416 Camel Simple JMS Component I have developed a Camel JMS Component built with pure Java JMS APIs or Spring free.  I would like to include it in the next 2.x release of Camel and am assuming that will be 2.11.Any guidance on how much lead time would be necessary to integrate it for that release would be appreciated (reads: when do you need the patch). :)_First Iteration:_* Full Queue and Topic Support (Durable & Non-Durable)* Full InOnly & InOut Support* Internal Connection, Session, Consumer, & Producer pooling/caching management* Full Asynchronous Support* JMS Internal Transaction Support_Future Iterations:_* Robust JMX Support* Camel Transaction Support* JTA Support (Pure Java)* Robust-InOnly* Full Migration of Core Camel-JMS Unit Tests (where applicable)* Batch List supportThanks,Scott EShttp://fusesource.com New Feature Camel Simple JMS Component I have developed a Camel JMS Component built with pure Java JMS APIs or Spring free.  I would like to include it in the next 2.x release of Camel and am assuming that will be 2.11.Any guidance on how much lead time would be necessary to integrate it for that release would be appreciated (reads: when do you need the patch). :)_First Iteration:_* Full Queue and Topic Support (Durable & Non-Durable)* Full InOnly & InOut Support* Internal Connection, Session, Consumer, & Producer pooling/caching management* Full Asynchronous Support* JMS Internal Transaction Support_Future Iterations:_* Robust JMX Support* Camel Transaction Support* JTA Support (Pure Java)* Robust-InOnly* Full Migration of Core Camel-JMS Unit Tests (where applicable)* Batch List supportThanks,Scott EShttp://fusesource.com
CAMEL-5409 Upgrade camel-groovy to groovy 2.0 Groovy 2.0 is out. We should upgrade to this in the next minor release of Camel. Task Upgrade camel-groovy to groovy 2.0 Groovy 2.0 is out. We should upgrade to this in the next minor release of Camel.
CAMEL-5407 Better error message when trying to write a null body as file See nabblehttp://camel.465427.n5.nabble.com/Can-t-route-wsdl-request-into-file-tp5715201.htmlWe should have a better error message instead of something about no type converter exception.We could also consider an option to the file producer, to silently ignore writing files if there is no message body.Finding a good name for this option is a challenge - skipNullBody- ignoreWritingNullBody Improvement Better error message when trying to write a null body as file See nabblehttp://camel.465427.n5.nabble.com/Can-t-route-wsdl-request-into-file-tp5715201.htmlWe should have a better error message instead of something about no type converter exception.We could also consider an option to the file producer, to silently ignore writing files if there is no message body.Finding a good name for this option is a challenge - skipNullBody- ignoreWritingNullBody
CAMEL-5402 Parameter Binding Annotations used for Camel Proxy Parameter Binding Annotations (e.g., @Property, @Header, @Body) could be used to annotate an interface being proxied by Camel Proxy.http://camel.apache.org/parameter-binding-annotations.html used for http://camel.apache.org/using-camelproxy.htmlCurrently these are used to identify which parameters Camel should provide when invoking a method of a bean. With the proposed functionality they could also be used to identify which parameter in the bean invocation map to body, and which parameters should be used to modify properties/headers. Possibly bypassing the creation of BeanInvocation object altogether, if @Body is specified.Example:public interface MyListener {&nbsp;&nbsp;&nbsp;&nbsp;void sendBodyWithHeader(@Body String body, @Header("foo") String headerFoo);}And when a Camel Proxy is created, invoking it will result in exchange having the String body as the OUT message with the header "foo" set to String headerFoo. Improvement Parameter Binding Annotations used for Camel Proxy Parameter Binding Annotations (e.g., @Property, @Header, @Body) could be used to annotate an interface being proxied by Camel Proxy.http://camel.apache.org/parameter-binding-annotations.html used for http://camel.apache.org/using-camelproxy.htmlCurrently these are used to identify which parameters Camel should provide when invoking a method of a bean. With the proposed functionality they could also be used to identify which parameter in the bean invocation map to body, and which parameters should be used to modify properties/headers. Possibly bypassing the creation of BeanInvocation object altogether, if @Body is specified.Example:public interface MyListener {&nbsp;&nbsp;&nbsp;&nbsp;void sendBodyWithHeader(@Body String body, @Header("foo") String headerFoo);}And when a Camel Proxy is created, invoking it will result in exchange having the String body as the OUT message with the header "foo" set to String headerFoo.
CAMEL-5398 Optimize String.replaceAll() to cache Patterns where suitable Inspired by issue [1] regarding performance of JMS headers, I performed a little search in IDE and found out that there's pretty much not optimized String.replaceAll() calls.I think it will be good to search the code base for such calls again and replace them with references to the static pre-compiled java.util.regex.Patterns. Of course if such action makes sense (like in StringHelper#removeQuotes()).[1] https://issues.apache.org/jira/browse/CAMEL-5396 Improvement Optimize String.replaceAll() to cache Patterns where suitable Inspired by issue [1] regarding performance of JMS headers, I performed a little search in IDE and found out that there's pretty much not optimized String.replaceAll() calls.I think it will be good to search the code base for such calls again and replace them with references to the static pre-compiled java.util.regex.Patterns. Of course if such action makes sense (like in StringHelper#removeQuotes()).[1] https://issues.apache.org/jira/browse/CAMEL-5396
CAMEL-5396 Improve performance of DefaultJmsKeyFormatStrategy The current default implementation uses String.replace/replaceAll to escape the illegal characters in the header key. This is unfortunate because replace/replaceAll are implemented in terms of regular expressions which makes the escaping quite costly for something that is executed for every single message. Also it's quite likely that the headers will be identical for every single message that's published via JMS. The attached patch makes two changes;* Use Commons Lang StringUtil.replaceEach which using a StringBuilder internally to do the replacement. This adds a dependency on Commons Lang.* Cache the output of StringUtil.replaceEach in a ConcurrentHashMap. This could be moved to a separate class if caching every key is a concern. Or this could be changed to use an LRUCache Improvement Improve performance of DefaultJmsKeyFormatStrategy The current default implementation uses String.replace/replaceAll to escape the illegal characters in the header key. This is unfortunate because replace/replaceAll are implemented in terms of regular expressions which makes the escaping quite costly for something that is executed for every single message. Also it's quite likely that the headers will be identical for every single message that's published via JMS. The attached patch makes two changes;* Use Commons Lang StringUtil.replaceEach which using a StringBuilder internally to do the replacement. This adds a dependency on Commons Lang.* Cache the output of StringUtil.replaceEach in a ConcurrentHashMap. This could be moved to a separate class if caching every key is a concern. Or this could be changed to use an LRUCache
CAMEL-5393 Downgrade camel-spring-ws to use a Spring 3.0 compatible version of spring-ws Spring WS 2.0.3 is the last release that supports Spring 3.0. Any newer release requires Spring 3.1.0+ onwards.We should use this version in the Camel 2.10 release so we have an out of the box camel-spring-ws component that works for any Spring users. Task Downgrade camel-spring-ws to use a Spring 3.0 compatible version of spring-ws Spring WS 2.0.3 is the last release that supports Spring 3.0. Any newer release requires Spring 3.1.0+ onwards.We should use this version in the Camel 2.10 release so we have an out of the box camel-spring-ws component that works for any Spring users.
CAMEL-5392 Optimize bean expression with local introspection cache to avoid re introspection when not needed See nabblehttp://camel.465427.n5.nabble.com/Bean-Expression-Performance-tp5715003.htmlA bean expression is dynamic evaluated on each exchange. But the bean type and method may match previous evaluation, and therefore the introspection can be locally cached to avoid re introspection. Improvement Optimize bean expression with local introspection cache to avoid re introspection when not needed See nabblehttp://camel.465427.n5.nabble.com/Bean-Expression-Performance-tp5715003.htmlA bean expression is dynamic evaluated on each exchange. But the bean type and method may match previous evaluation, and therefore the introspection can be locally cached to avoid re introspection.
CAMEL-5389 Add ProducerTemplate and ConsumerTemplate to bean parameter binding as known types It would be nice if you could just define ProducerTemplate / ConsumerTemplate as a parameter to a bean method, and have the bean component auto map an instance to these, using a shared template created from camel context.We could even support @EndpointInject, @Produce, @Consume as well, so you can do        public void handleError(@Properties Map properties, @EndpointInject(uri = "seda:retry") ProducerTemplate retry) {Currently you can map those as fields on the bean, but its not possible on types, such as in a method signature. Improvement Add ProducerTemplate and ConsumerTemplate to bean parameter binding as known types It would be nice if you could just define ProducerTemplate / ConsumerTemplate as a parameter to a bean method, and have the bean component auto map an instance to these, using a shared template created from camel context.We could even support @EndpointInject, @Produce, @Consume as well, so you can do        public void handleError(@Properties Map properties, @EndpointInject(uri = "seda:retry") ProducerTemplate retry) {Currently you can map those as fields on the bean, but its not possible on types, such as in a method signature.
CAMEL-5387 camel-http4 should support async routing engine The camel-http4 should support the async routing engine in the producer.eg it should use the process(exchange, callback) method, and leverage the native async api from http4 client. Improvement camel-http4 should support async routing engine The camel-http4 should support the async routing engine in the producer.eg it should use the process(exchange, callback) method, and leverage the native async api from http4 client.
CAMEL-5386 Allow to create scheduled thread pool in <threadPool> and ThreadPoolBuilder You can create regular threads pools using- <threadPool>- ThreadPoolBuilderWe should improve these to allow to create scheduled thread pools as well. Currently this is not possible.This is related to CAMEL-5385 that would need this feature as well. Improvement Allow to create scheduled thread pool in <threadPool> and ThreadPoolBuilder You can create regular threads pools using- <threadPool>- ThreadPoolBuilderWe should improve these to allow to create scheduled thread pools as well. Currently this is not possible.This is related to CAMEL-5385 that would need this feature as well.
CAMEL-5385 Allow to configure shared thread pool for scheduled consumers For example if you have many routes that starts from a file endpoint, then they are scheduled consumers, each using its own private thread pool with 1 scheduled thread.So for example having 30 file routes, means 30 threads. The JDK scheduled thread pool is always a fixed size.We should allow people to configure a custom thread pool, so they can use a single shared pool, with a number of fixed thread, that is shared among the 30 file consumers. New Feature Allow to configure shared thread pool for scheduled consumers For example if you have many routes that starts from a file endpoint, then they are scheduled consumers, each using its own private thread pool with 1 scheduled thread.So for example having 30 file routes, means 30 threads. The JDK scheduled thread pool is always a fixed size.We should allow people to configure a custom thread pool, so they can use a single shared pool, with a number of fixed thread, that is shared among the 30 file consumers.
CAMEL-5383 [JDBC component] Add ResultMetaData as a header value JDBC Component could (optionally?) add list of column names (retrieved from resultMetaData) to the message headers.Claus suggested something like CamelJdbcColumnNames : List<String> . Improvement [JDBC component] Add ResultMetaData as a header value JDBC Component could (optionally?) add list of column names (retrieved from resultMetaData) to the message headers.Claus suggested something like CamelJdbcColumnNames : List<String> .
CAMEL-5380 CamelBlueprintHelper should provide a method for adding a customized TinyBundle Right now the generated TinyBunlde in the CamelBlueprintHelper onlygenerates a TinyBundle containing the blueprint.xml file. It might be mandatory to change this to contain also the needed classes. I'm preparing a patch for this. Improvement CamelBlueprintHelper should provide a method for adding a customized TinyBundle Right now the generated TinyBunlde in the CamelBlueprintHelper onlygenerates a TinyBundle containing the blueprint.xml file. It might be mandatory to change this to contain also the needed classes. I'm preparing a patch for this.
CAMEL-5379 Introduce EmptyAsyncCallback What about replacing anonymous inner noop AsyncCallback with EmptyAsyncCallback? Just to make a codebase a little bit nicer.// BadObject value = invocation.proceed(new AsyncCallback() {  public void done(boolean doneSync) {    // nnop  }}, sync);// GoodObject value = invocation.proceed(new EmptyAsyncCallback(), sync); Improvement Introduce EmptyAsyncCallback What about replacing anonymous inner noop AsyncCallback with EmptyAsyncCallback? Just to make a codebase a little bit nicer.// BadObject value = invocation.proceed(new AsyncCallback() {  public void done(boolean doneSync) {    // nnop  }}, sync);// GoodObject value = invocation.proceed(new EmptyAsyncCallback(), sync);
CAMEL-5377 Restlet consumer should support async routing engine This will help scale, if you eg use async routing components such as jetty as well. Improvement Restlet consumer should support async routing engine This will help scale, if you eg use async routing components such as jetty as well.
CAMEL-5375 Add CompletionAwareAggregationStrategy to the aggregator EIP When people use the aggregator EIP, then they use the aggregation strategy interface. What is needing sometimes is a callback when the aggregated exchange is done, so you can do any custom cleanup/logic there, before the exchange is being routed out of the aggregator.Without this you would need to do this logic afterwards in the route, by calling a bean/processor. This is not so nice. So having a onComplete callback method in your aggregation strategy is better. New Feature Add CompletionAwareAggregationStrategy to the aggregator EIP When people use the aggregator EIP, then they use the aggregation strategy interface. What is needing sometimes is a callback when the aggregated exchange is done, so you can do any custom cleanup/logic there, before the exchange is being routed out of the aggregator.Without this you would need to do this logic afterwards in the route, by calling a bean/processor. This is not so nice. So having a onComplete callback method in your aggregation strategy is better.
CAMEL-5374 Support searches on Twitter Search consumer endpoint based on Produced Exchange Based on this Camel User thread:http://camel.465427.n5.nabble.com/Why-is-this-not-possible-with-the-twitter-component-in-Camel-2-10-td5713823.htmlI'm already working on this and patch will be available soon New Feature Support searches on Twitter Search consumer endpoint based on Produced Exchange Based on this Camel User thread:http://camel.465427.n5.nabble.com/Why-is-this-not-possible-with-the-twitter-component-in-Camel-2-10-td5713823.htmlI'm already working on this and patch will be available soon
CAMEL-5373 Add statistics to Karaf CamelContext info command We now have statistics on the CamelContextMBean, which we can display in the Camel Karaf command. New Feature Add statistics to Karaf CamelContext info command We now have statistics on the CamelContextMBean, which we can display in the Camel Karaf command.
CAMEL-5371 We should create a new context per server As current restlet server is reusing the the context from the restlet component, it will cause some trouble if we have multiple server which share different configuration in one component. Improvement We should create a new context per server As current restlet server is reusing the the context from the restlet component, it will cause some trouble if we have multiple server which share different configuration in one component.
CAMEL-5370 New simple component for synchronous, cross-context messaging The vm:// component is nice but does not support synchronous calls (which is currently required for transactions) and the direct:// component does not support cross-context calls.A new hybrid component would be handy. New Feature New simple component for synchronous, cross-context messaging The vm:// component is nice but does not support synchronous calls (which is currently required for transactions) and the direct:// component does not support cross-context calls.A new hybrid component would be handy.
CAMEL-5369 Add wildcard support for karaf camel commands (start/stop/suspend/resume) Many times operations have requested suspending traffic towards a specific system. This means that several routes should be suspended and then resumed, stopped or started. Instead of using the route auto-complete for performing the above actions for each and every route, a wild card support could be very useful.By giving descriptive ids to your routes, you could perform batch actions with ease.Backwards compatibility is ensured. New Feature Add wildcard support for karaf camel commands (start/stop/suspend/resume) Many times operations have requested suspending traffic towards a specific system. This means that several routes should be suspended and then resumed, stopped or started. Instead of using the route auto-complete for performing the above actions for each and every route, a wild card support could be very useful.By giving descriptive ids to your routes, you could perform batch actions with ease.Backwards compatibility is ensured.
CAMEL-5366 Add a way of checking if an Exchange has a given onCompletion already When people adds on completions using the API of Exchange / UnitOfWork, then they sometimes need a way of knowing if a given on completion already has been added. Currently you cannot know this, as there is only a add/remove operation. So we need a contains operation, like you have on a java.util.List. New Feature Add a way of checking if an Exchange has a given onCompletion already When people adds on completions using the API of Exchange / UnitOfWork, then they sometimes need a way of knowing if a given on completion already has been added. Currently you cannot know this, as there is only a add/remove operation. So we need a contains operation, like you have on a java.util.List.
CAMEL-5365 SOAPMessage to InputStream conversion needed for some CXF SOAPMessage Provider scenarios When you have a SOAPMessage Provider based CXF endpoint in your Camel route and the message is forwarded to an input stream based processor or producer (e.g., File), it is necessary to have a converter that converts SOAPMessage into InputStream.It would be practical to have this conversion method included in CxfConverter.I am attaching a test case and a possible implementation. This implementation uses CachedOutputStream to make an InputStream from a SOAPMessage. There might be a better way to get an InputStream, but I don't know a simple one.Thanks. Improvement SOAPMessage to InputStream conversion needed for some CXF SOAPMessage Provider scenarios When you have a SOAPMessage Provider based CXF endpoint in your Camel route and the message is forwarded to an input stream based processor or producer (e.g., File), it is necessary to have a converter that converts SOAPMessage into InputStream.It would be practical to have this conversion method included in CxfConverter.I am attaching a test case and a possible implementation. This implementation uses CachedOutputStream to make an InputStream from a SOAPMessage. There might be a better way to get an InputStream, but I don't know a simple one.Thanks.
CAMEL-5362 camel-itest-osgi - The CXF unit tests fails Willem can you take a look at the CXF unit tests in tests/camel-itest-osgi. They fail for some weird reason. Test camel-itest-osgi - The CXF unit tests fails Willem can you take a look at the CXF unit tests in tests/camel-itest-osgi. They fail for some weird reason.
CAMEL-5359 camel-castor does not use mapping file to convert XML to Java The camel-castor using the static marshal() method to convert the java object into an XML document.  This static method will not leverage the castor mapping XML file defined.  Instead the XMLContext should be used to get an instance of a Marshaller that understands the castor mapping XML file.The following change in AbstractCastorDataFormat seemed to resolve the problem. public void marshal(Exchange exchange, Object body, OutputStream outputStream) throws Exception {        Writer writer = new OutputStreamWriter(outputStream, encoding);        Marshaller marshaller = getXmlContext(        		exchange.getContext().getClassResolver())        			.createMarshaller();        marshaller.setWriter(writer);        marshaller.marshal(body);    }Also there may be a concurrency concern with how the unmarshaller is called.There is only one instance of an unmarshaller that is used by the DataFormat and for concurrent requests, that one instance may be converting multiple requests. Improvement camel-castor does not use mapping file to convert XML to Java The camel-castor using the static marshal() method to convert the java object into an XML document.  This static method will not leverage the castor mapping XML file defined.  Instead the XMLContext should be used to get an instance of a Marshaller that understands the castor mapping XML file.The following change in AbstractCastorDataFormat seemed to resolve the problem. public void marshal(Exchange exchange, Object body, OutputStream outputStream) throws Exception {        Writer writer = new OutputStreamWriter(outputStream, encoding);        Marshaller marshaller = getXmlContext(        		exchange.getContext().getClassResolver())        			.createMarshaller();        marshaller.setWriter(writer);        marshaller.marshal(body);    }Also there may be a concurrency concern with how the unmarshaller is called.There is only one instance of an unmarshaller that is used by the DataFormat and for concurrent requests, that one instance may be converting multiple requests.
CAMEL-5351 Support for tweeting with a StatusUpdate object Tweeting a StatusUpdate gives more power, like setting the 'inReplyToStatusId' property.This patch will let the UserProducer to tweet Exchanges that have either a String or a StatusUpdate object within its body. Improvement Support for tweeting with a StatusUpdate object Tweeting a StatusUpdate gives more power, like setting the 'inReplyToStatusId' property.This patch will let the UserProducer to tweet Exchanges that have either a String or a StatusUpdate object within its body.
CAMEL-5350 Upgrade to the new Scala Maven Plugin (net.alchim31.maven) The new Scala Maven Plugin is this one:<plugin>  <groupId>net.alchim31.maven</groupId>  <artifactId>scala-maven-plugin</artifactId>  <version>3.0.2</version></plugin>This should be used in camel-scala pom.xml file, and also in the camel-archetype-scala Improvement Upgrade to the new Scala Maven Plugin (net.alchim31.maven) The new Scala Maven Plugin is this one:<plugin>  <groupId>net.alchim31.maven</groupId>  <artifactId>scala-maven-plugin</artifactId>  <version>3.0.2</version></plugin>This should be used in camel-scala pom.xml file, and also in the camel-archetype-scala
CAMEL-5349 camel-test - Make it easy to provider override properties from unit tests When unit testing you may use properties from osgi config admin, or external resources and whatnot.We should make it easier to provide a java.util.Properties from the unit test source code. See nabblehttp://camel.465427.n5.nabble.com/Overwrite-blueprint-properties-in-camel-blueprint-tests-tp5710948.html New Feature camel-test - Make it easy to provider override properties from unit tests When unit testing you may use properties from osgi config admin, or external resources and whatnot.We should make it easier to provide a java.util.Properties from the unit test source code. See nabblehttp://camel.465427.n5.nabble.com/Overwrite-blueprint-properties-in-camel-blueprint-tests-tp5710948.html
CAMEL-5345 Removed the unused jaxws bundles from camel-hdfs When upgrade the hadoop-core to 1.0, the code just use the jaxrs interface for management and doesn't need the jaxws api any more. Task Removed the unused jaxws bundles from camel-hdfs When upgrade the hadoop-core to 1.0, the code just use the jaxrs interface for management and doesn't need the jaxws api any more.
CAMEL-5340 Add support for cross-origin filtering We have added support for cross-domain filtering and would like to submit this back to the community.For example, the following endpoint will enable cross-origin filtering for all origins (*) for the path "/cometd" cometd://127.0.0.1:%s?crossOriginFilterOn=true&allowedOrigins=*&filterPath=/cometd Improvement Add support for cross-origin filtering We have added support for cross-domain filtering and would like to submit this back to the community.For example, the following endpoint will enable cross-origin filtering for all origins (*) for the path "/cometd" cometd://127.0.0.1:%s?crossOriginFilterOn=true&allowedOrigins=*&filterPath=/cometd
CAMEL-5339 camel-mail - Should exclude activation from dependency as its part of JDK now The camel-mail component has a dependency on the activation JAR. This JAR is now embedded in the JDK from 6+. So we should not drag it along on the classpath. Task camel-mail - Should exclude activation from dependency as its part of JDK now The camel-mail component has a dependency on the activation JAR. This JAR is now embedded in the JDK from 6+. So we should not drag it along on the classpath.
CAMEL-5335 Documentation for Loan Broker Example is missing code samples The documentation on the Loan Broker Example at http://camel.apache.org/loan-broker-example.html is missing code samples and the following error occurs in the page:{code}Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20{code}There are seven instances of this error in the page. Task Documentation for Loan Broker Example is missing code samples The documentation on the Loan Broker Example at http://camel.apache.org/loan-broker-example.html is missing code samples and the following error occurs in the page:{code}Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20{code}There are seven instances of this error in the page.
CAMEL-5332 Upgrade CXF version to 2.6.1 As CXF 2.6.1 is out, it's time to upgrade it. Task Upgrade CXF version to 2.6.1 As CXF 2.6.1 is out, it's time to upgrade it.
CAMEL-5330 Supporting Camel-CXFs Provider's null response handling (a way to dynamically indicate no response should be sent back)  A Camel-CXF's provider endpoint returns an HTTP 200 with an empty SOAP message when it should be returning an HTTP 202 with no content.This is analogue to the jaxws's Provider behavior implemented in:CXF-3926 Supporting JAXWS Provider's null response handling (the provider's invoke may return a null to indicate no response should be sent back)where property jaxws.provider.interpretNullAsOneway at the endpoint determines whether a null is interpreted as a oneway call (i.e. no response).Concretely, Jaxws 2.2 section 5.1.1 states:"When an invoke method returns null, it is considered that no response needs to be sent by service."This use case assumes there is no information about the operation's MEP (no wsdl, no java annotation).This offers an option of using a provider endpoint to dynamically change its response behavior based on the retern value.Namely, if the service returns a non-null value, the response is a normal HTTP 200 with the corresponding payload. In contrast, if the service returns a null, the response becomes an HTTP 202 with no content. I think it makes sense to align the Camel-CXF Provider's endpoint to support this behavior.I am proposing a fix in DefaultCxfBinding to provide this behavior.Additionally, to simplify the configuration of a provider endpoint,  I think it is practical to introduce a default payload provider SEI so that the provider SEI does not explicitly configured in the endpoint configuration.I am attaching a patch file including these changes and test cases to illustrate these points.Could you have a look at this?Thanksregards, aki Improvement Supporting Camel-CXFs Provider's null response handling (a way to dynamically indicate no response should be sent back)  A Camel-CXF's provider endpoint returns an HTTP 200 with an empty SOAP message when it should be returning an HTTP 202 with no content.This is analogue to the jaxws's Provider behavior implemented in:CXF-3926 Supporting JAXWS Provider's null response handling (the provider's invoke may return a null to indicate no response should be sent back)where property jaxws.provider.interpretNullAsOneway at the endpoint determines whether a null is interpreted as a oneway call (i.e. no response).Concretely, Jaxws 2.2 section 5.1.1 states:"When an invoke method returns null, it is considered that no response needs to be sent by service."This use case assumes there is no information about the operation's MEP (no wsdl, no java annotation).This offers an option of using a provider endpoint to dynamically change its response behavior based on the retern value.Namely, if the service returns a non-null value, the response is a normal HTTP 200 with the corresponding payload. In contrast, if the service returns a null, the response becomes an HTTP 202 with no content. I think it makes sense to align the Camel-CXF Provider's endpoint to support this behavior.I am proposing a fix in DefaultCxfBinding to provide this behavior.Additionally, to simplify the configuration of a provider endpoint,  I think it is practical to introduce a default payload provider SEI so that the provider SEI does not explicitly configured in the endpoint configuration.I am attaching a patch file including these changes and test cases to illustrate these points.Could you have a look at this?Thanksregards, aki
CAMEL-5329 camel-restlet - Should preserve headers like we do in camel-http The camel-restlet producer do not preserve headers during routing. We do this with the other http components, such as camel-http.We should be similar so people dont loose their headers. Improvement camel-restlet - Should preserve headers like we do in camel-http The camel-restlet producer do not preserve headers during routing. We do this with the other http components, such as camel-http.We should be similar so people dont loose their headers.
CAMEL-5328 Camel PropertiesComponent should support resolution of nested properties Spring PropetyPlaceholderConfigurer support the resolution of nested properties like this example http://robertmarkbramprogrammer.blogspot.dk/2008/02/nested-property-placeholders-in-spring.htmlIt would be nice if one would be able to use such property resolution feature directly in the camel context eg. in the simple language. See http://camel.465427.n5.nabble.com/Support-for-nested-properties-in-propertyplaceholder-td5713905.html Improvement Camel PropertiesComponent should support resolution of nested properties Spring PropetyPlaceholderConfigurer support the resolution of nested properties like this example http://robertmarkbramprogrammer.blogspot.dk/2008/02/nested-property-placeholders-in-spring.htmlIt would be nice if one would be able to use such property resolution feature directly in the camel context eg. in the simple language. See http://camel.465427.n5.nabble.com/Support-for-nested-properties-in-propertyplaceholder-td5713905.html
CAMEL-5326 camel-bindy - Do not use locale if not explicit configured Bindy should newer use locale if not explicit configured to use one, as they will format numbers and whatnot in unexpected ways.For example an integer with an US locale will have comma as thousand separator, and that dont go well when marshalling to a CSV file, as the comma is also often a separator there. Improvement camel-bindy - Do not use locale if not explicit configured Bindy should newer use locale if not explicit configured to use one, as they will format numbers and whatnot in unexpected ways.For example an integer with an US locale will have comma as thousand separator, and that dont go well when marshalling to a CSV file, as the comma is also often a separator there.
CAMEL-5325 camel-cxf-transport build failed using system encoding This bug is fixed as "https://issues.apache.org/jira/browse/CXF-2450", by adding <fork>always</fork><additionalJvmArgs>-Duser.language=en</additionalJvmArgs>to cxf-codegen-plugin's configuration section. Task camel-cxf-transport build failed using system encoding This bug is fixed as "https://issues.apache.org/jira/browse/CXF-2450", by adding <fork>always</fork><additionalJvmArgs>-Duser.language=en</additionalJvmArgs>to cxf-codegen-plugin's configuration section.
CAMEL-5324 File consumer - Always include markerFile as readlock See nabblehttp://camel.465427.n5.nabble.com/Input-directory-with-multiple-file-consumers-tp5713788.htmlIf you run multiple nodes with Camel file consumers competing for files on a SAN then they may pickup the same file, if you use readLock=changed, etc. As the markerFile is not in use.So ideally we should always use markerFile to prevent other consumers to pickup the file, regardless if they use changed,rename etc. as readLock. Improvement File consumer - Always include markerFile as readlock See nabblehttp://camel.465427.n5.nabble.com/Input-directory-with-multiple-file-consumers-tp5713788.htmlIf you run multiple nodes with Camel file consumers competing for files on a SAN then they may pickup the same file, if you use readLock=changed, etc. As the markerFile is not in use.So ideally we should always use markerFile to prevent other consumers to pickup the file, regardless if they use changed,rename etc. as readLock.
CAMEL-5320 camel-ftp - Add option to check files without downloading download=false could be an option to stop poll consumers from downloading files when all you need is to check for file attributes.The need was generated from ftp component but it could potentially apply to any file consumer. For more info see the original thread http://camel.465427.n5.nabble.com/Camel-FTP-SFTP-check-instead-of-download-td5713363.html Improvement camel-ftp - Add option to check files without downloading download=false could be an option to stop poll consumers from downloading files when all you need is to check for file attributes.The need was generated from ftp component but it could potentially apply to any file consumer. For more info see the original thread http://camel.465427.n5.nabble.com/Camel-FTP-SFTP-check-instead-of-download-td5713363.html
CAMEL-5319 openjpa profile doesn't work in camel-bam If you run {code}mvn clean install -Popenjpa{code}in camel-bam, you get the following exception:{code}2012-05-29 21:55:05,228 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: nullorg.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)	at org.apache.camel.bam.model.ProcessInstance.getOrCreateActivityState(ProcessInstance.java:137)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:54)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at java.lang.Thread.run(Thread.java:680)Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.apache.camel.bam.model.EntitySupport.pcCopyKeyFieldsToObjectId(EntitySupport.java)	at org.apache.openjpa.util.ApplicationIds.create(ApplicationIds.java:432)	at org.apache.openjpa.kernel.BrokerImpl.isDetached(BrokerImpl.java:4588)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPC(SingleFieldManager.java:794)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPCs(SingleFieldManager.java:762)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:656)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:589)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:505)	at org.apache.openjpa.kernel.StateManagerImpl.preFlush(StateManagerImpl.java:2982)	at org.apache.openjpa.kernel.PNewState.beforeFlush(PNewState.java:40)	at org.apache.openjpa.kernel.StateManagerImpl.beforeFlush(StateManagerImpl.java:1054)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2112)	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1843)	at org.apache.openjpa.kernel.QueryImpl.isInMemory(QueryImpl.java:973)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:853)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:286)	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)	... 41 more2012-05-29 21:55:05,229 [d #0 - seda://a] DEBUG TransactionTemplate            - Initiating transaction rollback on application exceptionorg.apache.camel.RuntimeCamelException: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1256)	at org.apache.camel.bam.processor.BamProcessorSupport.onError(BamProcessorSupport.java:151)	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:101)	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at java.lang.Thread.run(Thread.java:680)Caused by: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)	at org.apache.camel.bam.model.ProcessInstance.getOrCreateActivityState(ProcessInstance.java:137)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:54)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)	... 33 moreCaused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.apache.camel.bam.model.EntitySupport.pcCopyKeyFieldsToObjectId(EntitySupport.java)	at org.apache.openjpa.util.ApplicationIds.create(ApplicationIds.java:432)	at org.apache.openjpa.kernel.BrokerImpl.isDetached(BrokerImpl.java:4588)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPC(SingleFieldManager.java:794)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPCs(SingleFieldManager.java:762)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:656)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:589)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:505)	at org.apache.openjpa.kernel.StateManagerImpl.preFlush(StateManagerImpl.java:2982)	at org.apache.openjpa.kernel.PNewState.beforeFlush(PNewState.java:40)	at org.apache.openjpa.kernel.StateManagerImpl.beforeFlush(StateManagerImpl.java:1054)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2112)	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1843)	at org.apache.openjpa.kernel.QueryImpl.isInMemory(QueryImpl.java:973)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:853)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:286)	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)	... 41 more{code}and the test failed. Task openjpa profile doesn't work in camel-bam If you run {code}mvn clean install -Popenjpa{code}in camel-bam, you get the following exception:{code}2012-05-29 21:55:05,228 [d #0 - seda://a] ERROR BamProcessorSupport            - Caught: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: nullorg.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)	at org.apache.camel.bam.model.ProcessInstance.getOrCreateActivityState(ProcessInstance.java:137)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:54)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at java.lang.Thread.run(Thread.java:680)Caused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.apache.camel.bam.model.EntitySupport.pcCopyKeyFieldsToObjectId(EntitySupport.java)	at org.apache.openjpa.util.ApplicationIds.create(ApplicationIds.java:432)	at org.apache.openjpa.kernel.BrokerImpl.isDetached(BrokerImpl.java:4588)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPC(SingleFieldManager.java:794)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPCs(SingleFieldManager.java:762)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:656)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:589)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:505)	at org.apache.openjpa.kernel.StateManagerImpl.preFlush(StateManagerImpl.java:2982)	at org.apache.openjpa.kernel.PNewState.beforeFlush(PNewState.java:40)	at org.apache.openjpa.kernel.StateManagerImpl.beforeFlush(StateManagerImpl.java:1054)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2112)	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1843)	at org.apache.openjpa.kernel.QueryImpl.isInMemory(QueryImpl.java:973)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:853)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:286)	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)	... 41 more2012-05-29 21:55:05,229 [d #0 - seda://a] DEBUG TransactionTemplate            - Initiating transaction rollback on application exceptionorg.apache.camel.RuntimeCamelException: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1256)	at org.apache.camel.bam.processor.BamProcessorSupport.onError(BamProcessorSupport.java:151)	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:101)	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)	at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:89)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:333)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:223)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:273)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:181)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:137)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at java.lang.Thread.run(Thread.java:680)Caused by: org.springframework.orm.jpa.JpaSystemException: nested exception is <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:321)	at org.springframework.orm.jpa.DefaultJpaDialect.translateExceptionIfPossible(DefaultJpaDialect.java:120)	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213)	at org.springframework.orm.jpa.JpaAccessor.translateIfNecessary(JpaAccessor.java:152)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:188)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:146)	at org.springframework.orm.jpa.JpaTemplate.findByNamedParams(JpaTemplate.java:321)	at org.apache.camel.bam.ProcessBuilder.findOrCreateActivityDefinition(ProcessBuilder.java:185)	at org.apache.camel.bam.rules.ActivityRules.getActivityDefinition(ActivityRules.java:72)	at org.apache.camel.bam.model.ProcessInstance.getOrCreateActivityState(ProcessInstance.java:137)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:54)	at org.apache.camel.bam.processor.JpaBamProcessor.processEntity(JpaBamProcessor.java:37)	at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:97)	... 33 moreCaused by: <openjpa-2.2.0-r422266:1244990 fatal general error> org.apache.openjpa.persistence.PersistenceException: null	at org.apache.camel.bam.model.EntitySupport.pcCopyKeyFieldsToObjectId(EntitySupport.java)	at org.apache.openjpa.util.ApplicationIds.create(ApplicationIds.java:432)	at org.apache.openjpa.kernel.BrokerImpl.isDetached(BrokerImpl.java:4588)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPC(SingleFieldManager.java:794)	at org.apache.openjpa.kernel.SingleFieldManager.preFlushPCs(SingleFieldManager.java:762)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:656)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:589)	at org.apache.openjpa.kernel.SingleFieldManager.preFlush(SingleFieldManager.java:505)	at org.apache.openjpa.kernel.StateManagerImpl.preFlush(StateManagerImpl.java:2982)	at org.apache.openjpa.kernel.PNewState.beforeFlush(PNewState.java:40)	at org.apache.openjpa.kernel.StateManagerImpl.beforeFlush(StateManagerImpl.java:1054)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:2112)	at org.apache.openjpa.kernel.BrokerImpl.flushSafe(BrokerImpl.java:2072)	at org.apache.openjpa.kernel.BrokerImpl.flush(BrokerImpl.java:1843)	at org.apache.openjpa.kernel.QueryImpl.isInMemory(QueryImpl.java:973)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:853)	at org.apache.openjpa.kernel.QueryImpl.execute(QueryImpl.java:794)	at org.apache.openjpa.kernel.DelegatingQuery.execute(DelegatingQuery.java:542)	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:286)	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:302)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:330)	at org.springframework.orm.jpa.JpaTemplate$10.doInJpa(JpaTemplate.java:1)	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:183)	... 41 more{code}and the test failed.
CAMEL-5318 Provide source for maven snapshots When working in an IDE (here eclipse), digging into camels (here camel-core) snapshot sourcecode is not possible, since there is no source-archive on https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.10-SNAPSHOT/In contrast I found (on http://camel.apache.org/download.html) that the source code exists, but in the wrong artifact (apache-camel). The source-code is also not limited to the correct artifact:https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.10-SNAPSHOT/Is there a possiblity to provide the snapshot source-archive also? Thanks Improvement Provide source for maven snapshots When working in an IDE (here eclipse), digging into camels (here camel-core) snapshot sourcecode is not possible, since there is no source-archive on https://repository.apache.org/content/repositories/snapshots/org/apache/camel/camel-core/2.10-SNAPSHOT/In contrast I found (on http://camel.apache.org/download.html) that the source code exists, but in the wrong artifact (apache-camel). The source-code is also not limited to the correct artifact:https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.10-SNAPSHOT/Is there a possiblity to provide the snapshot source-archive also? Thanks
CAMEL-5316 Failover EIP - Should detect graceful shutdown and prevent further failover attempts, to break out Similar to CAMEL-4950We should do this in the failover EIP code. As that logic is not there to break out. Improvement Failover EIP - Should detect graceful shutdown and prevent further failover attempts, to break out Similar to CAMEL-4950We should do this in the failover EIP code. As that logic is not there to break out.
CAMEL-5313 Upgrade to beanio 2.0 BeanIO 2.0 has been released. It has better OSGi support so we should upgrade to this version. Improvement Upgrade to beanio 2.0 BeanIO 2.0 has been released. It has better OSGi support so we should upgrade to this version.
CAMEL-5308 Main is bound to DefaultCamelContext We are using our own CamelContext, which is extending the DefaultCamelContext. Using Main is impossible in this case, since the {{getCamelContextMap()}}-method creates statically a DefaultCamelContext. Overriding this method doesn't works either, since the field {{registery}} is final, and no other accessors are defined.The given path doesn't breaks existing code bases, and gives an easy possiblity to override the context-creation, as well as access to the registry. Improvement Main is bound to DefaultCamelContext We are using our own CamelContext, which is extending the DefaultCamelContext. Using Main is impossible in this case, since the {{getCamelContextMap()}}-method creates statically a DefaultCamelContext. Overriding this method doesn't works either, since the field {{registery}} is final, and no other accessors are defined.The given path doesn't breaks existing code bases, and gives an easy possiblity to override the context-creation, as well as access to the registry.
CAMEL-5307 Blueprint testing - Potential dead lock Using the camel-test-blueprint, there is a potential dead-lock as namespace parser and main method is separate threads, and the namespace parser may still run, when main thread starts the test. Task Blueprint testing - Potential dead lock Using the camel-test-blueprint, there is a potential dead-lock as namespace parser and main method is separate threads, and the namespace parser may still run, when main thread starts the test.
CAMEL-5306 Support for sending ChangeMessageVisibility calls while processing SQS messages When consuming messages from SQS the visibilityTimeout property controls how long the consumer has to call deleteMessage before the message is re-delivered to another consumer.  When processing messages that take an unpredicatible duration, such as requests to download large files, it is difficult to choose a good value for visibilityTimeout.SQS provides an API ChangeMessageVisibility that can be used to extend visbilityTimeout if a consumer determins that it is going to need longer to process the current message (http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/APIReference/Query_QueryChangeMessageVisibility.html).I would like Camel to be able to handle the calling of ChangeMessageVisibility based on how long the message consuming code is taking to process the received message.  Since Camel knows how long visibilityTimeout is set to it should be able to keep SQS notified that the processor is still running until it is ready to call deleteMessage.I have had a first attempt at solving this and my code is in the attached patch.  This may not be a perfect solution so please provide me with feedback if you would like it changed before it is merged in.The patch was made against the 2.9.x branch and my working copy is: https://github.com/haku/camel . New Feature Support for sending ChangeMessageVisibility calls while processing SQS messages When consuming messages from SQS the visibilityTimeout property controls how long the consumer has to call deleteMessage before the message is re-delivered to another consumer.  When processing messages that take an unpredicatible duration, such as requests to download large files, it is difficult to choose a good value for visibilityTimeout.SQS provides an API ChangeMessageVisibility that can be used to extend visbilityTimeout if a consumer determins that it is going to need longer to process the current message (http://docs.amazonwebservices.com/AWSSimpleQueueService/latest/APIReference/Query_QueryChangeMessageVisibility.html).I would like Camel to be able to handle the calling of ChangeMessageVisibility based on how long the message consuming code is taking to process the received message.  Since Camel knows how long visibilityTimeout is set to it should be able to keep SQS notified that the processor is still running until it is ready to call deleteMessage.I have had a first attempt at solving this and my code is in the attached patch.  This may not be a perfect solution so please provide me with feedback if you would like it changed before it is merged in.The patch was made against the 2.9.x branch and my working copy is: https://github.com/haku/camel .
CAMEL-5305 Add support for handling long/short lines in Fixed Width Files Flatpack by default will throw errors if any line isn't the exact length of the definitions file. Sometime it makes sense to allow files that have rows that are either shorter or longer than configured.  Improvement Add support for handling long/short lines in Fixed Width Files Flatpack by default will throw errors if any line isn't the exact length of the definitions file. Sometime it makes sense to allow files that have rows that are either shorter or longer than configured. 
CAMEL-5304 Unable to turn-off \n to \r conversion in HL7Converter The HL7MLLPCodes allows a setting (convertLFtoCR) to enable of disable the conversion of \n characters to \r.  The type converter from String to Messages has that same conversion hardcoded without an option to turn it off.  This means I cannot process messages which contain embeded \n characters in a ED (encapsulated data) section. Improvement Unable to turn-off \n to \r conversion in HL7Converter The HL7MLLPCodes allows a setting (convertLFtoCR) to enable of disable the conversion of \n characters to \r.  The type converter from String to Messages has that same conversion hardcoded without an option to turn it off.  This means I cannot process messages which contain embeded \n characters in a ED (encapsulated data) section.
CAMEL-5302 jClouds Consumer Test (Java DSL) A consumer example for Java DSL was missing until now. Test jClouds Consumer Test (Java DSL) A consumer example for Java DSL was missing until now.
CAMEL-5301 Add exchangePattern option to recipientList Right now, the exchanges sent by the recipientList DSL absorb the exchange pattern that was set on the exchange before it entered the recipientList. We should add a capability to explicitly overwrite the exchange pattern for those exchanges sent by the recipientList.Consider for example a route with a InOut CXF consumer wanting to broadcast a message to a number of AMQ queues dynamically computed from a header. Right now, the exchanges will be sent with an InOut pattern and there is no way to override this behaviour unless we use onPrepareRef. New Feature Add exchangePattern option to recipientList Right now, the exchanges sent by the recipientList DSL absorb the exchange pattern that was set on the exchange before it entered the recipientList. We should add a capability to explicitly overwrite the exchange pattern for those exchanges sent by the recipientList.Consider for example a route with a InOut CXF consumer wanting to broadcast a message to a number of AMQ queues dynamically computed from a header. Right now, the exchanges will be sent with an InOut pattern and there is no way to override this behaviour unless we use onPrepareRef.
CAMEL-5298 Support for delaySeconds property on SQS producer endpoints SQS supports delayed messages via a 'delaySeconds' property specified in the producer connection URL.  Sending this property to AWS is already supported in the AWS Java library, it just needs to be passed through from the Camel Endpoint config.I have a short patch to provide this.  It was made against the 2.9.x branch.  It is also in my fork here: https://github.com/haku/camel . New Feature Support for delaySeconds property on SQS producer endpoints SQS supports delayed messages via a 'delaySeconds' property specified in the producer connection URL.  Sending this property to AWS is already supported in the AWS Java library, it just needs to be passed through from the Camel Endpoint config.I have a short patch to provide this.  It was made against the 2.9.x branch.  It is also in my fork here: https://github.com/haku/camel .
CAMEL-5297 Create a new Camel component via Scala-Component-Archetype That would be great to have a choice when creating new components. Idon't think anyone would strongly oppose a component in scala. We alreadyhave a scala DSL after-all. It makes sense to create components in Scala if the componentis coupled with Scala in some way. For example the play framework, akka, etc.But for other components Java should be prefered, as then anybody in theworld, can look at the source, and fix bugs, improve stuff etc.Also with Scala you force people to add it as dependency etc. Andthere is some binary compatible issues with Scala releases (this mayimprove for the future etc.) And the scala compiler is really slow,and the IDE tooling is not so good (yet) etc. Improvement Create a new Camel component via Scala-Component-Archetype That would be great to have a choice when creating new components. Idon't think anyone would strongly oppose a component in scala. We alreadyhave a scala DSL after-all. It makes sense to create components in Scala if the componentis coupled with Scala in some way. For example the play framework, akka, etc.But for other components Java should be prefered, as then anybody in theworld, can look at the source, and fix bugs, improve stuff etc.Also with Scala you force people to add it as dependency etc. Andthere is some binary compatible issues with Scala releases (this mayimprove for the future etc.) And the scala compiler is really slow,and the IDE tooling is not so good (yet) etc.
CAMEL-5295 Simple language - Add support for escaping values We should add support for escaping values in the simple language, which also makes it easier for people in the XML DSLs to specify new lines as they can use \n for that (eg 2 characters). Improvement Simple language - Add support for escaping values We should add support for escaping values in the simple language, which also makes it easier for people in the XML DSLs to specify new lines as they can use \n for that (eg 2 characters).
CAMEL-5294 DSL expressions should auto trim See CAMEL-5285We should auto trim the XML DSLs as people may configure the DSL with newlines, etc{code:xml}<transform>  <simple>    data=${body}  </simple></transform>{code}Notice how we use new lines in the simple, what you should really do is:{code:xml}<transform>  <simple>data=${body}</simple></transform>{code}We should then support escapes, so you can do \n to indicate newline Improvement DSL expressions should auto trim See CAMEL-5285We should auto trim the XML DSLs as people may configure the DSL with newlines, etc{code:xml}<transform>  <simple>    data=${body}  </simple></transform>{code}Notice how we use new lines in the simple, what you should really do is:{code:xml}<transform>  <simple>data=${body}</simple></transform>{code}We should then support escapes, so you can do \n to indicate newline
CAMEL-5291 Santizie endpoint uri being logged in toString Endpoint uris may contain sensitive information such as passwords, so we should avoid logging them unintended.TRACE logging is okay to log the raw actual values. But for other log levels we should try to use the URISupport methods that masks the password etc.There is still some cases where this is not done. Improvement Santizie endpoint uri being logged in toString Endpoint uris may contain sensitive information such as passwords, so we should avoid logging them unintended.TRACE logging is okay to log the raw actual values. But for other log levels we should try to use the URISupport methods that masks the password etc.There is still some cases where this is not done.
CAMEL-5289 ExchangeSentEvent - Should emit only trigger when callback done, to cater for late async replies We will now have events for before and after sending to an endpoint- ExchangeSendingEvent- ExchangeSentEventThe ExchangeSentEvent should be improved to only be emitted when the async callback is done, eg. if you do request/reply using async, then the event should be emitted when the reply comes back. This allows better to track how long this takes (eg request/reply).Currently the event may be triggered to early for async replies. Improvement ExchangeSentEvent - Should emit only trigger when callback done, to cater for late async replies We will now have events for before and after sending to an endpoint- ExchangeSendingEvent- ExchangeSentEventThe ExchangeSentEvent should be improved to only be emitted when the async callback is done, eg. if you do request/reply using async, then the event should be emitted when the reply comes back. This allows better to track how long this takes (eg request/reply).Currently the event may be triggered to early for async replies.
CAMEL-5287 Add ExchangeSendingEvent to event notifer We should add an event to notify *before* sending to an endpoint. Currently we only have event after the message was done being sent.This allows to track the events in real time with a before and after style of events. Improvement Add ExchangeSendingEvent to event notifer We should add an event to notify *before* sending to an endpoint. Currently we only have event after the message was done being sent.This allows to track the events in real time with a before and after style of events.
CAMEL-5286 Add option to onCompletion to configure if it should be synchronous We should add an option to the onCompletion in the DSL, so people can run this using the current thread. Or if they depend on the onCompletion to run before the exchange is done from the route etc.See nabblehttp://camel.465427.n5.nabble.com/Error-handling-and-invoking-certain-logic-unconditionally-tp5643480.html Improvement Add option to onCompletion to configure if it should be synchronous We should add an option to the onCompletion in the DSL, so people can run this using the current thread. Or if they depend on the onCompletion to run before the exchange is done from the route etc.See nabblehttp://camel.465427.n5.nabble.com/Error-handling-and-invoking-certain-logic-unconditionally-tp5643480.html
CAMEL-5281 Update the hadoop-core bundle version in the apache-camel feature We need to upgrade the hadoop bundle version as we already update the one in the camel-hdfs. Task Update the hadoop-core bundle version in the apache-camel feature We need to upgrade the hadoop bundle version as we already update the one in the camel-hdfs.
CAMEL-5276 Wish ObjectHelper wouldn't return false for a node without children org.apache.camel.util.ObjectHelper's method evaluateValuePredicate(Object) tests to see if an object of type NodeList has any children.  If it doesn't have any children it return false?What if you have an Element that just has attributes and that is all you need?  Would it be possible to check if the object passed in is a Node first and then check to see if it is a list...The offending(?) code{noformat}    /**     * Evaluate the value as a predicate which attempts to convert the value to     * a boolean otherwise true is returned if the value is not null     */    public static boolean evaluateValuePredicate(Object value) {        if (value instanceof Boolean) {            return (Boolean)value;        } else if (value instanceof String) {            if ("true".equalsIgnoreCase((String)value)) {                return true;            } else if ("false".equalsIgnoreCase((String)value)) {                return false;            }        } else if (value instanceof NodeList) { //Test for Node here?            // is it an empty dom            NodeList list = (NodeList) value;            return list.getLength() > 0;        } else if (value instanceof Collection) {            // is it an empty collection            Collection<?> col = (Collection<?>) value;            return col.size() > 0;        }        return value != null;    }{noformat} Wish Wish ObjectHelper wouldn't return false for a node without children org.apache.camel.util.ObjectHelper's method evaluateValuePredicate(Object) tests to see if an object of type NodeList has any children.  If it doesn't have any children it return false?What if you have an Element that just has attributes and that is all you need?  Would it be possible to check if the object passed in is a Node first and then check to see if it is a list...The offending(?) code{noformat}    /**     * Evaluate the value as a predicate which attempts to convert the value to     * a boolean otherwise true is returned if the value is not null     */    public static boolean evaluateValuePredicate(Object value) {        if (value instanceof Boolean) {            return (Boolean)value;        } else if (value instanceof String) {            if ("true".equalsIgnoreCase((String)value)) {                return true;            } else if ("false".equalsIgnoreCase((String)value)) {                return false;            }        } else if (value instanceof NodeList) { //Test for Node here?            // is it an empty dom            NodeList list = (NodeList) value;            return list.getLength() > 0;        } else if (value instanceof Collection) {            // is it an empty collection            Collection<?> col = (Collection<?>) value;            return col.size() > 0;        }        return value != null;    }{noformat}
CAMEL-5270 Add community and peer address of SNMP TRAP PDUs to camel-snmp header A patch is included to add the community and peer address of SNMP traps that are received by camel. This is useful to determine where a trap originated from, as not all SNMPv2 traps include an OID that identifies the sender.The information is placed in the message header as strings with names:securityNamepeerAddressThese names correspond to the accessor names in the snmp4j API for the CommandResponderEvent class. securityName is not the correct name for SNMP v1/2 traps, but it's probably better to stick with a name that can be consistant between SNMP versions. Improvement Add community and peer address of SNMP TRAP PDUs to camel-snmp header A patch is included to add the community and peer address of SNMP traps that are received by camel. This is useful to determine where a trap originated from, as not all SNMPv2 traps include an OID that identifies the sender.The information is placed in the message header as strings with names:securityNamepeerAddressThese names correspond to the accessor names in the snmp4j API for the CommandResponderEvent class. securityName is not the correct name for SNMP v1/2 traps, but it's probably better to stick with a name that can be consistant between SNMP versions.
CAMEL-5269 Make it possible to change the remote file name without changing the local file name Currently, if you change the remote file name by changing the message header Exchange.FILE_NAME, this will not only change the remote file name but also the local file name. This is often undesirable. Instead it is a common requirement to archive the files that you process locally with their original file names unchanged.This has been discussed on the user mailing list:http://camel.465427.n5.nabble.com/how-to-specify-remote-file-name-when-using-FTP-endpoint-td5697227.html Improvement Make it possible to change the remote file name without changing the local file name Currently, if you change the remote file name by changing the message header Exchange.FILE_NAME, this will not only change the remote file name but also the local file name. This is often undesirable. Instead it is a common requirement to archive the files that you process locally with their original file names unchanged.This has been discussed on the user mailing list:http://camel.465427.n5.nabble.com/how-to-specify-remote-file-name-when-using-FTP-endpoint-td5697227.html
CAMEL-5264 SNMP-Component doesn't response to INFORM-Traps When using INFORMs instead of TRAPs the component must response to the Message. Otherwise the sender tries to send the same INFROM x-times and it will be processed x-times in the SNMP-Component.The code below is taken from an example:{code:lang=java}			if ((pdu.getType() != PDU.TRAP) &&					(pdu.getType() != PDU.V1TRAP) &&					(pdu.getType() != PDU.REPORT) &&					(pdu.getType() != PDU.RESPONSE)) {					pdu.setErrorIndex(0);					pdu.setErrorStatus(0);					pdu.setType(PDU.RESPONSE);					StatusInformation statusInformation = new StatusInformation();					StateReference ref = e.getStateReference();					try {						e.getMessageDispatcher().returnResponsePdu(e.							getMessageProcessingModel(),							e.getSecurityModel(),							e.getSecurityName(),							e.getSecurityLevel(),							pdu,							e.getMaxSizeResponsePDU(),							ref,							statusInformation);						System.err.println("Response sent");					}catch (MessageException ex) {						System.err.println("Error while sending response: "+ex.getMessage());					}				}            processPDU(pdu);{code}In this case the component sends a response to the sender before processing the message. Improvement SNMP-Component doesn't response to INFORM-Traps When using INFORMs instead of TRAPs the component must response to the Message. Otherwise the sender tries to send the same INFROM x-times and it will be processed x-times in the SNMP-Component.The code below is taken from an example:{code:lang=java}			if ((pdu.getType() != PDU.TRAP) &&					(pdu.getType() != PDU.V1TRAP) &&					(pdu.getType() != PDU.REPORT) &&					(pdu.getType() != PDU.RESPONSE)) {					pdu.setErrorIndex(0);					pdu.setErrorStatus(0);					pdu.setType(PDU.RESPONSE);					StatusInformation statusInformation = new StatusInformation();					StateReference ref = e.getStateReference();					try {						e.getMessageDispatcher().returnResponsePdu(e.							getMessageProcessingModel(),							e.getSecurityModel(),							e.getSecurityName(),							e.getSecurityLevel(),							pdu,							e.getMaxSizeResponsePDU(),							ref,							statusInformation);						System.err.println("Response sent");					}catch (MessageException ex) {						System.err.println("Error while sending response: "+ex.getMessage());					}				}            processPDU(pdu);{code}In this case the component sends a response to the sender before processing the message.
CAMEL-5262 Relax simple language checking for function start/end tokens, to only validate start tokens has appropriate end token See nabblehttp://camel.465427.n5.nabble.com/Translating-route-exceptions-to-JSON-with-Simple-Expression-Language-or-SPEL-tp5696933.html Improvement Relax simple language checking for function start/end tokens, to only validate start tokens has appropriate end token See nabblehttp://camel.465427.n5.nabble.com/Translating-route-exceptions-to-JSON-with-Simple-Expression-Language-or-SPEL-tp5696933.html
CAMEL-5259 misleading error message was thrown by camel-quartz component if camelContext ID was not unique Suppose we have two camel routes using camel-quartz endpoint:Route one:{code}<camelContext id="camel-quartz-context">   <route id="RouteOne">       <from uri="quartz://testTimer/TimerOne?cron=0+0/1+*+*+*+?" />       <to uri="log:CamelQuartzRouteOne - Route One fired?level=INFO" />   </route></camelContext>{code}Route two:{code}<camelContext id="camel-quartz-context">   <route id="RouteTwo">       <from uri="quartz://testTimer/TimerTwo?cron=0+0/1+*+*+*+?" />       <to uri="log:CamelQuartzRouteTwo - Route Two fired?level=INFO" />   </route></camelContext>{code}Accidentally, both routes were configured using the same camelContext ID of "camel-quartz-context". After deploying the two camel routes, say, into ServiceMix container, following message will be thrown:{quote}14:50:00,004 | ERROR | context_Worker-1 | JobRunShell                      | 195 - org.apache.servicemix.bundles.quartz - 1.8.5.1 | Job DEFAULT.quartz-endpoint9 threw an unhandled Exception:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quartz://testTimer/TimerOne?cron=0+0%2F1+*+*+*+%3F due to: A Quartz job already exists with the name/group: TimerOne/testTimer        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:444)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:457)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:50)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]        at org.quartz.core.JobRunShell.run(JobRunShell.java:216)[195:org.apache.servicemix.bundles.quartz:1.8.5.1]        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)[195:org.apache.servicemix.bundles.quartz:1.8.5.1]Caused by: java.lang.IllegalArgumentException: A Quartz job already exists with the name/group: TimerOne/testTimer        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:130)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:56)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:75)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:426)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        ... 4 more{quote}despite two camel-quartz endpoints were using different job names.The root cause was duplicate camelContext ID used by two camel routes as it has to be unique. However, the error message was certainly misleading. Improvement misleading error message was thrown by camel-quartz component if camelContext ID was not unique Suppose we have two camel routes using camel-quartz endpoint:Route one:{code}<camelContext id="camel-quartz-context">   <route id="RouteOne">       <from uri="quartz://testTimer/TimerOne?cron=0+0/1+*+*+*+?" />       <to uri="log:CamelQuartzRouteOne - Route One fired?level=INFO" />   </route></camelContext>{code}Route two:{code}<camelContext id="camel-quartz-context">   <route id="RouteTwo">       <from uri="quartz://testTimer/TimerTwo?cron=0+0/1+*+*+*+?" />       <to uri="log:CamelQuartzRouteTwo - Route Two fired?level=INFO" />   </route></camelContext>{code}Accidentally, both routes were configured using the same camelContext ID of "camel-quartz-context". After deploying the two camel routes, say, into ServiceMix container, following message will be thrown:{quote}14:50:00,004 | ERROR | context_Worker-1 | JobRunShell                      | 195 - org.apache.servicemix.bundles.quartz - 1.8.5.1 | Job DEFAULT.quartz-endpoint9 threw an unhandled Exception:org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quartz://testTimer/TimerOne?cron=0+0%2F1+*+*+*+%3F due to: A Quartz job already exists with the name/group: TimerOne/testTimer        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:444)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:457)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:50)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]        at org.quartz.core.JobRunShell.run(JobRunShell.java:216)[195:org.apache.servicemix.bundles.quartz:1.8.5.1]        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)[195:org.apache.servicemix.bundles.quartz:1.8.5.1]Caused by: java.lang.IllegalArgumentException: A Quartz job already exists with the name/group: TimerOne/testTimer        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:130)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:56)[215:org.apache.camel.camel-quartz:2.8.0.fuse-02-05]        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:75)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:426)[89:org.apache.camel.camel-core:2.8.0.fuse-02-05]        ... 4 more{quote}despite two camel-quartz endpoints were using different job names.The root cause was duplicate camelContext ID used by two camel routes as it has to be unique. However, the error message was certainly misleading.
CAMEL-5256 upgrade javax.mail to 1.4.5 I ran into a major issue today that was not so apparent.   My unit tests which use the camel-mail component would just hang (even though there is a timeout), they would work on my windows machine, but not on my ubuntu linux or the deployed rhel server.After quite a bit of investigation, it turns out that upgrading the javax.mail from 1.4.4 to 1.4.5 resolved my problem.   My guess would be that something changed on our network/exchange server which caused this problem, but either way it was time consuming to solve.I wanted to save someone else the problem and see if you could upgrade to 1.4.5 on the 2.8.x and 2.9.x branch.<javax-mail-version>1.4.5</javax-mail-version> Task upgrade javax.mail to 1.4.5 I ran into a major issue today that was not so apparent.   My unit tests which use the camel-mail component would just hang (even though there is a timeout), they would work on my windows machine, but not on my ubuntu linux or the deployed rhel server.After quite a bit of investigation, it turns out that upgrading the javax.mail from 1.4.4 to 1.4.5 resolved my problem.   My guess would be that something changed on our network/exchange server which caused this problem, but either way it was time consuming to solve.I wanted to save someone else the problem and see if you could upgrade to 1.4.5 on the 2.8.x and 2.9.x branch.<javax-mail-version>1.4.5</javax-mail-version>
CAMEL-5255 Add all SNMPv1 TRAP PDU information to message body for camel-snmp component The attached patch captures additional information available in an SNMPv1 TRAP PDU (enterprise trap ID, agent-addr, generic trap ID, specific trap ID, and system uptime) to the camel-snmp message body. Improvement Add all SNMPv1 TRAP PDU information to message body for camel-snmp component The attached patch captures additional information available in an SNMPv1 TRAP PDU (enterprise trap ID, agent-addr, generic trap ID, specific trap ID, and system uptime) to the camel-snmp message body.
CAMEL-5252 Simple language - Improved OGNL invocation with simple expression as functions for parameters See nabblehttp://camel.465427.n5.nabble.com/Invoking-a-bean-returned-by-a-previous-bean-invocation-tp5676696.htmlThe example with the nested animal parameter.We should see if we can better detect this use-case, and avoid the intermediate String conversion, when its a parameter type.{code}       public void testBodyOgnlOnAnimalWithOgnlParams() throws Exception {               exchange.getIn().setBody(new Animal("tiger", 13));               exchange.getIn().setHeader("friend", new Animal("donkey", 4));               assertExpression("${body.setFriend(${header.friend})}", null);       }{code}Fails with org.apache.camel.NoTypeConversionAvailableException: No typeconverter available to convert from type: java.lang.String to the requiredtype: org.apache.camel.language.simple.SimpleTest.Animal with value donkey Improvement Simple language - Improved OGNL invocation with simple expression as functions for parameters See nabblehttp://camel.465427.n5.nabble.com/Invoking-a-bean-returned-by-a-previous-bean-invocation-tp5676696.htmlThe example with the nested animal parameter.We should see if we can better detect this use-case, and avoid the intermediate String conversion, when its a parameter type.{code}       public void testBodyOgnlOnAnimalWithOgnlParams() throws Exception {               exchange.getIn().setBody(new Animal("tiger", 13));               exchange.getIn().setHeader("friend", new Animal("donkey", 4));               assertExpression("${body.setFriend(${header.friend})}", null);       }{code}Fails with org.apache.camel.NoTypeConversionAvailableException: No typeconverter available to convert from type: java.lang.String to the requiredtype: org.apache.camel.language.simple.SimpleTest.Animal with value donkey
CAMEL-5247 Allow to send sync with quickfix, and detect send failures which should be marked as exceptions See nabblehttp://camel.465427.n5.nabble.com/Handling-unsuccessful-Session-send-in-Quickfix-component-td5680836.htmlI think about the following solution: replace in QuickfixjConsumer.sendOutMessage: session.send(quickfixjMessage);with if (! session.send(quickfixjMessage) ) {    throw new CannotSendException(); // any idea if some existing exception would make sense here?} Improvement Allow to send sync with quickfix, and detect send failures which should be marked as exceptions See nabblehttp://camel.465427.n5.nabble.com/Handling-unsuccessful-Session-send-in-Quickfix-component-td5680836.htmlI think about the following solution: replace in QuickfixjConsumer.sendOutMessage: session.send(quickfixjMessage);with if (! session.send(quickfixjMessage) ) {    throw new CannotSendException(); // any idea if some existing exception would make sense here?}
CAMEL-5245 Expose ManagementName in JMX API of ManagedCamelContextMBean The managementName should be exposed in the camel context mbean as a read only attribute. Improvement Expose ManagementName in JMX API of ManagedCamelContextMBean The managementName should be exposed in the camel context mbean as a read only attribute.
CAMEL-5243 jt400: program call should support binary format Data queue message exchange supports both text and binary formats and so should the remote program call exchange. The specification is the same as the one for the data queue.Additionally, this patch supports the concept of ommiting a parameter. This is achieved by passing null as the parameter value.Implementation note:Since I don't know Camel's policy regarding API breaking, I opted to refer to Jt400DataQueueEndpoint.Format; but Format should now be a top-level class, since the concept is the same for data queues and programs. Improvement jt400: program call should support binary format Data queue message exchange supports both text and binary formats and so should the remote program call exchange. The specification is the same as the one for the data queue.Additionally, this patch supports the concept of ommiting a parameter. This is achieved by passing null as the parameter value.Implementation note:Since I don't know Camel's policy regarding API breaking, I opted to refer to Jt400DataQueueEndpoint.Format; but Format should now be a top-level class, since the concept is the same for data queues and programs.
CAMEL-5241 Sanitize URI in debug messages Sanitizes URI in debug messages that may otherwise reveal sensitive information.Design note:I opted to provide a specific method, URISupport.sanitizePath(String), instead of relaxing the match in URISupport.sanitizeUri(String). This is because formally an authority component in an URI is preceded by "//", which is not contained in the path part of the URI (see http://docs.oracle.com/javase/6/docs/api/java/net/URI.html). Improvement Sanitize URI in debug messages Sanitizes URI in debug messages that may otherwise reveal sensitive information.Design note:I opted to provide a specific method, URISupport.sanitizePath(String), instead of relaxing the match in URISupport.sanitizeUri(String). This is because formally an authority component in an URI is preceded by "//", which is not contained in the path part of the URI (see http://docs.oracle.com/javase/6/docs/api/java/net/URI.html).
CAMEL-5240 Upgrade to newer release of snmp4j http://snmp4j.org/html/download.htmlThere is a 2.x release now. We should try to upgrade to that release.If not there is also a newer 1.x release we could upgrade.I guess OSGi bundles may be neededhttp://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.snmp4j/ Improvement Upgrade to newer release of snmp4j http://snmp4j.org/html/download.htmlThere is a 2.x release now. We should try to upgrade to that release.If not there is also a newer 1.x release we could upgrade.I guess OSGi bundles may be neededhttp://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.snmp4j/
CAMEL-5239 Moving camel-itest-osgi to Pax-Exam 2.x As the pax-exam 2.3 is released for a long time, we should consider to upgrade out osgi integration tests to 2.x. Improvement Moving camel-itest-osgi to Pax-Exam 2.x As the pax-exam 2.3 is released for a long time, we should consider to upgrade out osgi integration tests to 2.x.
CAMEL-5238 camel-avro - Fails testing on Windows Seen this on windows{code}------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.avro.AvroHttpConsumerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.578 secRunning org.apache.camel.component.avro.AvroHttpProducerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 secRunning org.apache.camel.component.avro.AvroHttpSpringProducerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.641 secRunning org.apache.camel.component.avro.AvroNettyConsumerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.375 secRunning org.apache.camel.component.avro.AvroNettyProducerTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.156 sec <<< FAILURE!Running org.apache.camel.component.avro.AvroNettySpringConsumerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.657 secRunning org.apache.camel.component.avro.AvroNettySpringProducerTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.265 sec <<< FAILURE!Running org.apache.camel.dataformat.avro.AvroMarshalAndUnmarshalSpringTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.422 secRunning org.apache.camel.dataformat.avro.AvroMarshalAndUnmarshallTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.719 secResults :Failed tests:  testInOut(org.apache.camel.component.avro.AvroNettyProducerTest): mock://result-inout There is no type conversion possible from org.apache.camel.avro.generated.Key to org.apache.camel.avro.generated.Value  testInOut(org.apache.camel.component.avro.AvroNettySpringProducerTest): mock://result-inout There is no type conversion possible from org.apache.camel.avro.generated.Key to org.apache.camel.avro.generated.ValueTests run: 22, Failures: 2, Errors: 0, Skipped: 0{code} Test camel-avro - Fails testing on Windows Seen this on windows{code}------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.avro.AvroHttpConsumerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.578 secRunning org.apache.camel.component.avro.AvroHttpProducerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 secRunning org.apache.camel.component.avro.AvroHttpSpringProducerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.641 secRunning org.apache.camel.component.avro.AvroNettyConsumerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.375 secRunning org.apache.camel.component.avro.AvroNettyProducerTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.156 sec <<< FAILURE!Running org.apache.camel.component.avro.AvroNettySpringConsumerTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.657 secRunning org.apache.camel.component.avro.AvroNettySpringProducerTestTests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.265 sec <<< FAILURE!Running org.apache.camel.dataformat.avro.AvroMarshalAndUnmarshalSpringTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.422 secRunning org.apache.camel.dataformat.avro.AvroMarshalAndUnmarshallTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.719 secResults :Failed tests:  testInOut(org.apache.camel.component.avro.AvroNettyProducerTest): mock://result-inout There is no type conversion possible from org.apache.camel.avro.generated.Key to org.apache.camel.avro.generated.Value  testInOut(org.apache.camel.component.avro.AvroNettySpringProducerTest): mock://result-inout There is no type conversion possible from org.apache.camel.avro.generated.Key to org.apache.camel.avro.generated.ValueTests run: 22, Failures: 2, Errors: 0, Skipped: 0{code}
CAMEL-5237 Move camel-jibx to camel-extra or remove it or whatever The camel-jibx component uses some jibx plugin that cannot find its dependencies in any maven repo, and we get issues when building the source.Just getting tired of maintaining this not used component, causing build to fail due artifacts not in reliable maven repos. Task Move camel-jibx to camel-extra or remove it or whatever The camel-jibx component uses some jibx plugin that cannot find its dependencies in any maven repo, and we get issues when building the source.Just getting tired of maintaining this not used component, causing build to fail due artifacts not in reliable maven repos.
CAMEL-5236 Make it easy to use the splitter to split files by a number of lines into groups Currently you can use the splitter and the tokenize langue to split on a line by line basis.We should add a way so you can say that you want to group that into X number of lines, so people can split files into smaller chunks to work with.Currently they would need to write their own expression to return the chunks.We could support configuring- number of lines- number of bytes Improvement Make it easy to use the splitter to split files by a number of lines into groups Currently you can use the splitter and the tokenize langue to split on a line by line basis.We should add a way so you can say that you want to group that into X number of lines, so people can split files into smaller chunks to work with.Currently they would need to write their own expression to return the chunks.We could support configuring- number of lines- number of bytes
CAMEL-5233 Removed components from camel-spring that was moved to camel-core Fix the osgi import|export of camel-spring, so it wont include components from camel-core.See nabblehttp://camel.465427.n5.nabble.com/duplicated-classes-in-camel-core-and-camel-spring-2-9-2-tp5674967.html Task Removed components from camel-spring that was moved to camel-core Fix the osgi import|export of camel-spring, so it wont include components from camel-core.See nabblehttp://camel.465427.n5.nabble.com/duplicated-classes-in-camel-core-and-camel-spring-2-9-2-tp5674967.html
CAMEL-5232 xslt component - If using http scheme for xslt schema, then add support for query parameters in the http url See nabblehttp://camel.465427.n5.nabble.com/Camel-XSLT-Component-Load-XSLT-from-database-tp5033499p5033499.htmlWe should add support for query parameters in the xslt component if http/https is used. Improvement xslt component - If using http scheme for xslt schema, then add support for query parameters in the http url See nabblehttp://camel.465427.n5.nabble.com/Camel-XSLT-Component-Load-XSLT-from-database-tp5033499p5033499.htmlWe should add support for query parameters in the xslt component if http/https is used.
CAMEL-5226 camel-cache - Ability to set an Element's ttl and perhaps other properties when performing an add would be nice. Currently it's possible to set a TTL at the cache level but there is no way to override this value at the Element.I propose adding some headers for controlling this behavior. Something along the lines of:CamelCacheTimeToLive (seconds)CamelCacheTimeToIdle (seconds)CamelCacheEternal (boolean)These values would apply to the ADD and UPDATE operations. I'll look at creating a patch. New Feature camel-cache - Ability to set an Element's ttl and perhaps other properties when performing an add would be nice. Currently it's possible to set a TTL at the cache level but there is no way to override this value at the Element.I propose adding some headers for controlling this behavior. Something along the lines of:CamelCacheTimeToLive (seconds)CamelCacheTimeToIdle (seconds)CamelCacheEternal (boolean)These values would apply to the ADD and UPDATE operations. I'll look at creating a patch.
CAMEL-5217 Bundle filter configuration in CamelBlueprintTestSupport I am experimenting a problem with  CamelBlueprintTestSupport for unit test OSGI blueprint bundle. With the last version in the trunk, i can't modify the bundle descriptor filter. Under Eclipse, i have an BundleException when i try to load JUnit, caused by: java.lang.NoClassDefFoundError: org/eclipse/core/runtime/Plugin.With a modification of filter expression:         protected String getBundleFilter()    {        return "(&(Bundle-SymbolicName=*)(!(Bundle-SymbolicName=org.eclipse.jdt.junit*)))";    }all work fine again.Patch for CamelBluePrintTestSupport and CamelBlueprintHelper attached. Improvement Bundle filter configuration in CamelBlueprintTestSupport I am experimenting a problem with  CamelBlueprintTestSupport for unit test OSGI blueprint bundle. With the last version in the trunk, i can't modify the bundle descriptor filter. Under Eclipse, i have an BundleException when i try to load JUnit, caused by: java.lang.NoClassDefFoundError: org/eclipse/core/runtime/Plugin.With a modification of filter expression:         protected String getBundleFilter()    {        return "(&(Bundle-SymbolicName=*)(!(Bundle-SymbolicName=org.eclipse.jdt.junit*)))";    }all work fine again.Patch for CamelBluePrintTestSupport and CamelBlueprintHelper attached.
CAMEL-5216 ConvertBodyTo should reset message type like transform EIP does We should make convertBodyTo alike transform/setBody, as when you change the message body, then if any specialized message instances, then we should copy the message to a default message, and set the type converted body. This is how those other EIPs does it.If you do a {code}from file  convertBodyTo String  to file{code}Then the file producer may detect the GenericFileMessage, from the consumer. But the convert body to, should have converted the message into a default message. Improvement ConvertBodyTo should reset message type like transform EIP does We should make convertBodyTo alike transform/setBody, as when you change the message body, then if any specialized message instances, then we should copy the message to a default message, and set the type converted body. This is how those other EIPs does it.If you do a {code}from file  convertBodyTo String  to file{code}Then the file producer may detect the GenericFileMessage, from the consumer. But the convert body to, should have converted the message into a default message.
CAMEL-5213 Add description of what an expression does The expression page (http://camel.apache.org/expression.html) does a good job at presenting a list of available options for creating expressions, but does not clearly outline to the newcomer what they do. Could you please add the following sentence at the top of the page:---Expressions are used by Camel to return a set of nodes for further processing.---Could you then please swap the first ("To support..") and second ("Expressions and Predicates...") paragraphs around - this would be a real help to aid understanding. Improvement Add description of what an expression does The expression page (http://camel.apache.org/expression.html) does a good job at presenting a list of available options for creating expressions, but does not clearly outline to the newcomer what they do. Could you please add the following sentence at the top of the page:---Expressions are used by Camel to return a set of nodes for further processing.---Could you then please swap the first ("To support..") and second ("Expressions and Predicates...") paragraphs around - this would be a real help to aid understanding.
CAMEL-5211 camel-netty - The netty consumer should use the non blocking routing engine When doing request/reply over Netty, then processing the message should allow to be non-blocking. So sending the reply message back from netty consumer may be done by another thread, to avoid the initial thread to be blocked while processing the message. Improvement camel-netty - The netty consumer should use the non blocking routing engine When doing request/reply over Netty, then processing the message should allow to be non-blocking. So sending the reply message back from netty consumer may be done by another thread, to avoid the initial thread to be blocked while processing the message.
CAMEL-5208 Optimize type converters for primitive types Currently if you type convert to primitive types such as- int- longThen Camel will use the their object counterparts for conversion, eg- Integer- LongBut we do not optimize so the next time we can do a faster lookup of the type converter Improvement Optimize type converters for primitive types Currently if you type convert to primitive types such as- int- longThen Camel will use the their object counterparts for conversion, eg- Integer- LongBut we do not optimize so the next time we can do a faster lookup of the type converter
CAMEL-5207 Move src/main/data files to src/test/data in camel-core These files in src/main/data is part of testing, and should be in src/test/data instead Task Move src/main/data files to src/test/data in camel-core These files in src/main/data is part of testing, and should be in src/test/data instead
CAMEL-5205 Remove legacy code in DefaultEndpoint in createExchange(Exchange) method This code was only applicable in the Camel 1.x days with multiple types of Exchange. Now there is only a final default exchange. Task Remove legacy code in DefaultEndpoint in createExchange(Exchange) method This code was only applicable in the Camel 1.x days with multiple types of Exchange. Now there is only a final default exchange.
CAMEL-5204 Remove not used jaxb pojo message model from camel-jaxb This code was an experiment that was never finished, and is not in use. We should remove this outdated code. Task Remove not used jaxb pojo message model from camel-jaxb This code was an experiment that was never finished, and is not in use. We should remove this outdated code.
CAMEL-5203 example - A little CXFRS example We need a little example to provide with the Camel kit, and documented athttp://camel.apache.org/examplesIt should expose a simple REST service using CXF-RS, using JSon, and then invoke a bean where we can simulate a computation, and then prepare a response.We could also do a little CBR in the Camel route etc. But the showcase is how to setup and use CXF-RS with Camel and use JSon.Contributions is much welcome. Wish example - A little CXFRS example We need a little example to provide with the Camel kit, and documented athttp://camel.apache.org/examplesIt should expose a simple REST service using CXF-RS, using JSon, and then invoke a bean where we can simulate a computation, and then prepare a response.We could also do a little CBR in the Camel route etc. But the showcase is how to setup and use CXF-RS with Camel and use JSon.Contributions is much welcome.
CAMEL-5202 Add option eagerLimitMaxMessagesPerPoll See nabblehttp://camel.465427.n5.nabble.com/Looking-for-advice-or-help-on-batching-queueing-for-a-fairly-simple-route-tp5625388p5625388.htmlWe should allow people to configure the file/ftp components to whether the max messages per poll is eager (by default) or not.By setting this option to false, then Camel will poll all files, and then only at a later moment limit the poll. This allows eg. to sort all the files. Improvement Add option eagerLimitMaxMessagesPerPoll See nabblehttp://camel.465427.n5.nabble.com/Looking-for-advice-or-help-on-batching-queueing-for-a-fairly-simple-route-tp5625388p5625388.htmlWe should allow people to configure the file/ftp components to whether the max messages per poll is eager (by default) or not.By setting this option to false, then Camel will poll all files, and then only at a later moment limit the poll. This allows eg. to sort all the files.
CAMEL-5198 Implement connection pooling in jt400 component Instead of eagerly obtaining a new connection to the AS/400 system, Endpoint instances request one from a connection pool. Users can specify that their own connection pool be used, or let Camel provide one (default behaviour).Functionally speaking, this feature does not introduce any change (it can be viewed as an optimization in advanced usage scenarios).Thread safety: the producers/consumers, which were inherently thread-safe, became not thread-safe in regard to their start/stop lifecycle.The following text can be used as the documentation for the new URI option:*Name*{{connectionPool}}*Default value*{{AS400ConnectionPool}} instance*Description**Camel 2.10:* Reference to an {{com.ibm.as400.access.AS400ConnectionPool}} instance in the Registry. This is used for obtaining connections to the AS/400 system. The look up notation ('#' character) should be used. Improvement Implement connection pooling in jt400 component Instead of eagerly obtaining a new connection to the AS/400 system, Endpoint instances request one from a connection pool. Users can specify that their own connection pool be used, or let Camel provide one (default behaviour).Functionally speaking, this feature does not introduce any change (it can be viewed as an optimization in advanced usage scenarios).Thread safety: the producers/consumers, which were inherently thread-safe, became not thread-safe in regard to their start/stop lifecycle.The following text can be used as the documentation for the new URI option:*Name*{{connectionPool}}*Default value*{{AS400ConnectionPool}} instance*Description**Camel 2.10:* Reference to an {{com.ibm.as400.access.AS400ConnectionPool}} instance in the Registry. This is used for obtaining connections to the AS/400 system. The look up notation ('#' character) should be used.
CAMEL-5197 Allow the definition of a FileComponent with a FileConfiguration (same as for JMS) We should be able to configure something like this:    <bean id="file" class="org.apache.camel.component.file.FileComponent">        <property name="configuration">            <bean class="org.apache.camel.component.file.FileConfiguration">                <property name="autoCreate" value="true" />                <property name="premove" value="work"/>                <property name="move" value="done"/>            </bean>        </property>    </bean>To ensure a common behaviour and directory structure for file processing and make the endpoint declaration lighter(without all the options). New Feature Allow the definition of a FileComponent with a FileConfiguration (same as for JMS) We should be able to configure something like this:    <bean id="file" class="org.apache.camel.component.file.FileComponent">        <property name="configuration">            <bean class="org.apache.camel.component.file.FileConfiguration">                <property name="autoCreate" value="true" />                <property name="premove" value="work"/>                <property name="move" value="done"/>            </bean>        </property>    </bean>To ensure a common behaviour and directory structure for file processing and make the endpoint declaration lighter(without all the options).
CAMEL-5190 Upgrade CXF version to 2.5.3 As the CXF 2.5.3 is released, we should consider to upgrade CXF version in Camel. Task Upgrade CXF version to 2.5.3 As the CXF 2.5.3 is released, we should consider to upgrade CXF version in Camel.
CAMEL-5189 Bean component - Should preserver properties from exchange to allow to transfer state See nabblehttp://camel.465427.n5.nabble.com/Stateful-Dynamic-Router-tp5647070p5647070.htmlThis allows other EIPs such as the dynamic route to use state when using a bean as its expression. Improvement Bean component - Should preserver properties from exchange to allow to transfer state See nabblehttp://camel.465427.n5.nabble.com/Stateful-Dynamic-Router-tp5647070p5647070.htmlThis allows other EIPs such as the dynamic route to use state when using a bean as its expression.
CAMEL-5188 Ensure all EIPs out of the box is enlisted in JMX and they expose performance stats Its to confusing when some EIPs are not enlisted, while others are in JMX.So we should make sure all the EIPs out of the box is enlisted in JMX.Currently some of the transformation/validation etc EIPs is missing. Improvement Ensure all EIPs out of the box is enlisted in JMX and they expose performance stats Its to confusing when some EIPs are not enlisted, while others are in JMX.So we should make sure all the EIPs out of the box is enlisted in JMX.Currently some of the transformation/validation etc EIPs is missing.
CAMEL-5186 Upgrade to qpid 0.14 Apache qpid 0.14 is now in central repo, and we should upgrade. This version should be compatible with RabbitMQ Improvement Upgrade to qpid 0.14 Apache qpid 0.14 is now in central repo, and we should upgrade. This version should be compatible with RabbitMQ
CAMEL-5185 Disable the update checker of hazelcast Hazelcast has an update checker that goes online, and reports {code}WARNING: /192.168.xxx.xxx:5701 [dev] Newer version of Hazelcast is available.======================================You are running 1.9.4.6	[20120105]Newer version 2.0.2	[20120321]======================================{code}People running this in product really dislike such things. We should find a way to turn this off. Improvement Disable the update checker of hazelcast Hazelcast has an update checker that goes online, and reports {code}WARNING: /192.168.xxx.xxx:5701 [dev] Newer version of Hazelcast is available.======================================You are running 1.9.4.6	[20120105]Newer version 2.0.2	[20120321]======================================{code}People running this in product really dislike such things. We should find a way to turn this off.
CAMEL-5184 Faster testing with seda endpoints by shutting down seda endpoints faster When shutting down seda endpoints they take a lille while to shutdown properly.However during testing we dont need to do that, so we could shortcut this and shutdown faster.For example the camel-test kit could tweak that. As well in camel-core.I suspect we can cut down minutes of testing times. Improvement Faster testing with seda endpoints by shutting down seda endpoints faster When shutting down seda endpoints they take a lille while to shutdown properly.However during testing we dont need to do that, so we could shortcut this and shutdown faster.For example the camel-test kit could tweak that. As well in camel-core.I suspect we can cut down minutes of testing times.
CAMEL-5178 "IOException: No space left on device" exception swallowed by camel When routing a file using the GenericFileConsumer object an exception is swallowed if the lock file cant be created (i.e there is no harddrive space).{code:title=GenericFileConsumer.java|borderStyle=solid}protected void processExchange(final Exchange exchange) {        GenericFile<T> file = getExchangeFileProperty(exchange);        log.trace("Processing file: {}", file);        // must extract the absolute name before the begin strategy as the file could potentially be pre moved        // and then the file name would be changed        String absoluteFileName = file.getAbsoluteFilePath();        // check if we can begin processing the file        try {            final GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();            boolean begin = processStrategy.begin(operations, endpoint, exchange, file);            if (!begin) {                log.debug(endpoint + " cannot begin processing file: {}", file);                // begin returned false, so remove file from the in progress list as its no longer in progress                endpoint.getInProgressRepository().remove(absoluteFileName);                return;            }        } catch (Exception e) {            if (log.isDebugEnabled()) {                log.debug(endpoint + " cannot begin processing file: " + file + " due to: " + e.getMessage(), e);            }            endpoint.getInProgressRepository().remove(absoluteFileName);            return;        }....}{code}When processStrategy.begin(operations, endpoint, exchange, file); throws an java.io.IOException this is swallowed in the catch method and never propagated to the error handling of camel. Output from log is: {noformat}11:33:44.290 [Camel (camel-2) thread #1 - file:/Users/xxxx/yyyy/Files/] DEBUG o.a.c.component.file.FileConsumer - Endpoint[file:/Users/xxxx/yyyy/Files/] cannot begin processing file: GenericFile[//Users/xxxx/yyyy/Files/file01] due to: No space left on devicejava.io.IOException: No space left on device	at java.io.UnixFileSystem.createFileExclusively(Native Method) ~[na:1.6.0_31]	at java.io.File.createNewFile(File.java:883) ~[na:1.6.0_31]	at org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock(MarkerFileExclusiveReadLockStrategy.java:54) ~[camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:46) ~[camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:46) ~[camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:308) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:175) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:136) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:140) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.9.0.jar:2.9.0]	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_31]	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_31]	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_31]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_31]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_31]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_31]	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_31]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_31]	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_31]{noformat}I have tried both tried error handling on the route and the DefaultErrorHandler way but this exception is never handled by the methods, ie Camel log them and then swallow them. Improvement "IOException: No space left on device" exception swallowed by camel When routing a file using the GenericFileConsumer object an exception is swallowed if the lock file cant be created (i.e there is no harddrive space).{code:title=GenericFileConsumer.java|borderStyle=solid}protected void processExchange(final Exchange exchange) {        GenericFile<T> file = getExchangeFileProperty(exchange);        log.trace("Processing file: {}", file);        // must extract the absolute name before the begin strategy as the file could potentially be pre moved        // and then the file name would be changed        String absoluteFileName = file.getAbsoluteFilePath();        // check if we can begin processing the file        try {            final GenericFileProcessStrategy<T> processStrategy = endpoint.getGenericFileProcessStrategy();            boolean begin = processStrategy.begin(operations, endpoint, exchange, file);            if (!begin) {                log.debug(endpoint + " cannot begin processing file: {}", file);                // begin returned false, so remove file from the in progress list as its no longer in progress                endpoint.getInProgressRepository().remove(absoluteFileName);                return;            }        } catch (Exception e) {            if (log.isDebugEnabled()) {                log.debug(endpoint + " cannot begin processing file: " + file + " due to: " + e.getMessage(), e);            }            endpoint.getInProgressRepository().remove(absoluteFileName);            return;        }....}{code}When processStrategy.begin(operations, endpoint, exchange, file); throws an java.io.IOException this is swallowed in the catch method and never propagated to the error handling of camel. Output from log is: {noformat}11:33:44.290 [Camel (camel-2) thread #1 - file:/Users/xxxx/yyyy/Files/] DEBUG o.a.c.component.file.FileConsumer - Endpoint[file:/Users/xxxx/yyyy/Files/] cannot begin processing file: GenericFile[//Users/xxxx/yyyy/Files/file01] due to: No space left on devicejava.io.IOException: No space left on device	at java.io.UnixFileSystem.createFileExclusively(Native Method) ~[na:1.6.0_31]	at java.io.File.createNewFile(File.java:883) ~[na:1.6.0_31]	at org.apache.camel.component.file.strategy.MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock(MarkerFileExclusiveReadLockStrategy.java:54) ~[camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.begin(GenericFileProcessStrategySupport.java:46) ~[camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.begin(GenericFileRenameProcessStrategy.java:46) ~[camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:308) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:175) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:136) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:140) [camel-core-2.9.0.jar:2.9.0]	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.9.0.jar:2.9.0]	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_31]	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_31]	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_31]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_31]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_31]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_31]	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_31]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_31]	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_31]{noformat}I have tried both tried error handling on the route and the DefaultErrorHandler way but this exception is never handled by the methods, ie Camel log them and then swallow them.
CAMEL-5177 Avoid parsing URI each time when getting uri from endpoint In Camel 2.9, a new EndpointConfiguration was introduced, which has more fine grained details about an URI.However the getEndpointUri method on Endpoint is now parsing the uri on each call, this is not needed, and is also unnecessary overhead.We should parse this once.Also Camel's built-in type converter should be used during the parsing, and not just the hardcoded PropertyEditorTypeConverter which is to be considered removed as its not- thread safe- causes unforeseen side effects when 3rd party projects register property converter Improvement Avoid parsing URI each time when getting uri from endpoint In Camel 2.9, a new EndpointConfiguration was introduced, which has more fine grained details about an URI.However the getEndpointUri method on Endpoint is now parsing the uri on each call, this is not needed, and is also unnecessary overhead.We should parse this once.Also Camel's built-in type converter should be used during the parsing, and not just the hardcoded PropertyEditorTypeConverter which is to be considered removed as its not- thread safe- causes unforeseen side effects when 3rd party projects register property converter
CAMEL-5176 CxfProducer should not always leverage toList type converter to find out the parameters for invocation CAMEL-5173 removed the two type converters which could always to load the classes and it broke the itest of CxfToJmsInOutTest.After digging the code for a while I found the CxfProducer always looks up the parameter by turning the message body into a List. With the change of CAMEL-5173, Camel will turn the message body into a List of ActiveQueue (as the String --> List converter are wildly used).To fix this issue, we should let the CxfProducer pick up the parameter carefully. Improvement CxfProducer should not always leverage toList type converter to find out the parameters for invocation CAMEL-5173 removed the two type converters which could always to load the classes and it broke the itest of CxfToJmsInOutTest.After digging the code for a while I found the CxfProducer always looks up the parameter by turning the message body into a List. With the change of CAMEL-5173, Camel will turn the message body into a List of ActiveQueue (as the String --> List converter are wildly used).To fix this issue, we should let the CxfProducer pick up the parameter carefully.
CAMEL-5175 Add utilization statistic to base type converter to gain better insight We should add a bit of insight to the base type converter registry, so we can better see number of attempts, failures, misses, etc. And which miss from -> to, was requests, but there was no suitable type converter. The stats can then be exposed in JMX so ppl can see it at runtime. Improvement Add utilization statistic to base type converter to gain better insight We should add a bit of insight to the base type converter registry, so we can better see number of attempts, failures, misses, etc. And which miss from -> to, was requests, but there was no suitable type converter. The stats can then be exposed in JMX so ppl can see it at runtime.
CAMEL-5174 Avoid using the ActiveMQ org.apache.activemq.util.ListEditor with Camel type converters activemq-core includes a property editor that Camel will use as fallback type converterorg.apache.activemq.util.ListEditorAnd this is a String -> List<ActiveMQDestination> converter which can be kicked in as fallback converter with Camel.We should avoid using 3rd party property editors, but only rely on the built in from the JDK. Or provide them as core type converters.As this can cause side effects. Improvement Avoid using the ActiveMQ org.apache.activemq.util.ListEditor with Camel type converters activemq-core includes a property editor that Camel will use as fallback type converterorg.apache.activemq.util.ListEditorAnd this is a String -> List<ActiveMQDestination> converter which can be kicked in as fallback converter with Camel.We should avoid using 3rd party property editors, but only rely on the built in from the JDK. Or provide them as core type converters.As this can cause side effects.
CAMEL-5173 camel-cxf - Remove convert from String -> List that assume its classes In CxfConverter we have 2 type converters that does a- String -> List- String[] -> ListAnd it assumes the string is a class name.This is really bad, as its too generic, eg String -> List. As the string can contain anything. And when adding camel-cxf to your application, you get these type converters added, that can cause side effects elsewhere.For now this has not surfaced, as the type converter would ignore exceptions, but frankly when the type converter was used, it will use Apache CXF to load classes, on each attempt, which of couse is not desirable. Improvement camel-cxf - Remove convert from String -> List that assume its classes In CxfConverter we have 2 type converters that does a- String -> List- String[] -> ListAnd it assumes the string is a class name.This is really bad, as its too generic, eg String -> List. As the string can contain anything. And when adding camel-cxf to your application, you get these type converters added, that can cause side effects elsewhere.For now this has not surfaced, as the type converter would ignore exceptions, but frankly when the type converter was used, it will use Apache CXF to load classes, on each attempt, which of couse is not desirable.
CAMEL-5172 TypeConverter - Tighten up API to rethrow failed exception during type conversion, and introduce new API for try to convert The org.apache.camel.TypeConverter API would not propagate exceptions that would occur during type conversion back to the caller. But instead return null.We should tighten this up and introduce a new API for trying to convert, so what we would have is- convertTo = converts, and throws exception if failure during conversion, can return null, if no value to convert, or no type converter exists to do this- mandatoryConvertTo = convertTo + will throw exception if no value, eg it never returns null- *new* tryConvertTo = convertTo but will catch exceptions and return null (like the old behavior)This introduces an API change in TypeConverter. But it is more intuitive. There is some internal logic that needs to be adjust a bit due they rely on the old behavior. Improvement TypeConverter - Tighten up API to rethrow failed exception during type conversion, and introduce new API for try to convert The org.apache.camel.TypeConverter API would not propagate exceptions that would occur during type conversion back to the caller. But instead return null.We should tighten this up and introduce a new API for trying to convert, so what we would have is- convertTo = converts, and throws exception if failure during conversion, can return null, if no value to convert, or no type converter exists to do this- mandatoryConvertTo = convertTo + will throw exception if no value, eg it never returns null- *new* tryConvertTo = convertTo but will catch exceptions and return null (like the old behavior)This introduces an API change in TypeConverter. But it is more intuitive. There is some internal logic that needs to be adjust a bit due they rely on the old behavior.
CAMEL-5171 Favor static methods for type converters provided by Camel components We should favor static classes if possible for Camel type converters when discovered and using @Converter. This allow to use a static method call, instead of having to create a new instance of the class, to invoke the converter method, for *every* type converstion.In most cases a type conversion class do not need to store state, and thus it can be static method calls.An alternative is to allow a new attribute on @Converter at the class level, where you can define if its thread safe or not.{code}@Converter(threadSafe = true)public class MyComponentConverters{code} Improvement Favor static methods for type converters provided by Camel components We should favor static classes if possible for Camel type converters when discovered and using @Converter. This allow to use a static method call, instead of having to create a new instance of the class, to invoke the converter method, for *every* type converstion.In most cases a type conversion class do not need to store state, and thus it can be static method calls.An alternative is to allow a new attribute on @Converter at the class level, where you can define if its thread safe or not.{code}@Converter(threadSafe = true)public class MyComponentConverters{code}
CAMEL-5170 Add support for delete event in camel-zookeeper See nabblehttp://camel.465427.n5.nabble.com/Receiving-NodeDeleted-event-using-Camel-s-ZooKeeper-component-tp5630121p5630121.htmlWe should add support so this event is also triggered in the camel-zookeeper component. Improvement Add support for delete event in camel-zookeeper See nabblehttp://camel.465427.n5.nabble.com/Receiving-NodeDeleted-event-using-Camel-s-ZooKeeper-component-tp5630121p5630121.htmlWe should add support so this event is also triggered in the camel-zookeeper component.
CAMEL-5168 camel-run plugin - Should support OSGi blueprint to run that easily out of container, using the pojosr framework This makes it possible to run Camel application that is using OSGi blueprint XML files.Currently you can run Spring XML files.But for people developing OSGi blueprint, it would be nice at least to have a chance to run their apps out of container.The pojosr is the component we use in camel-test-blueprint. New Feature camel-run plugin - Should support OSGi blueprint to run that easily out of container, using the pojosr framework This makes it possible to run Camel application that is using OSGi blueprint XML files.Currently you can run Spring XML files.But for people developing OSGi blueprint, it would be nice at least to have a chance to run their apps out of container.The pojosr is the component we use in camel-test-blueprint.
CAMEL-5167 onException policy within global context lost when error handler redefined within route context. This may as well be Camel feature (limitation of Java DSL), but I found no indications/warning that this is a feature in Camel book or web documentation. The route is somewhat ill defined as local errorHandler should be placed before bean part, but maybe for those types of mistakes it should not have this nasty side effects of loosing global onException policy, but at least complain during route creation (?).  Moreover, the route works properly if I remove global error handler, so it is rather nasty effect if route definition correctness depends on the existence of the global error handler definition.If I move local errorHandler before bean part then the my test passes as the onException policy is triggered and works properly. As soon as I redefine the error handler within a route the onException policy is no longer applicable for the route and the route propagates the exception back to the caller. {code}        errorHandler(defaultErrorHandler().maximumRedeliveries(1));        onException(NullPointerException.class).setOnRedelivery(new NullRegistrationDateProcessor());        from("direct:toPropertyFile").routeId("registrationEntryToPropertyFile")                .setHeader(Exchange.FILE_NAME, simple("${body.firstname}.${body.surname}"))                .bean(RegistrationToPropertiesBean.class, "convert")     // Potential bug in Camel, if the same error handler like global is turned on then onException defined in global context will not be picked up.              .errorHandler(defaultErrorHandler().maximumRedeliveries(1))     // the code above is working if no default handler was created for a global context.              .to("file://" + outFolder);{code} Improvement onException policy within global context lost when error handler redefined within route context. This may as well be Camel feature (limitation of Java DSL), but I found no indications/warning that this is a feature in Camel book or web documentation. The route is somewhat ill defined as local errorHandler should be placed before bean part, but maybe for those types of mistakes it should not have this nasty side effects of loosing global onException policy, but at least complain during route creation (?).  Moreover, the route works properly if I remove global error handler, so it is rather nasty effect if route definition correctness depends on the existence of the global error handler definition.If I move local errorHandler before bean part then the my test passes as the onException policy is triggered and works properly. As soon as I redefine the error handler within a route the onException policy is no longer applicable for the route and the route propagates the exception back to the caller. {code}        errorHandler(defaultErrorHandler().maximumRedeliveries(1));        onException(NullPointerException.class).setOnRedelivery(new NullRegistrationDateProcessor());        from("direct:toPropertyFile").routeId("registrationEntryToPropertyFile")                .setHeader(Exchange.FILE_NAME, simple("${body.firstname}.${body.surname}"))                .bean(RegistrationToPropertiesBean.class, "convert")     // Potential bug in Camel, if the same error handler like global is turned on then onException defined in global context will not be picked up.              .errorHandler(defaultErrorHandler().maximumRedeliveries(1))     // the code above is working if no default handler was created for a global context.              .to("file://" + outFolder);{code}
CAMEL-5159 Allow copying email into specific folder after consuming on imap consumer Sometimes, it would be helpfull to copy or move the treated mail into a specific folder after consuming it.The idea is to add an option "copyTo" to copy (or move if delete is true) the read message in a treated" imap folder after consuming it. New Feature Allow copying email into specific folder after consuming on imap consumer Sometimes, it would be helpfull to copy or move the treated mail into a specific folder after consuming it.The idea is to add an option "copyTo" to copy (or move if delete is true) the read message in a treated" imap folder after consuming it.
CAMEL-5150 camel-netty - Remove options for pool size as Netty and rely on default implementation Accordingly to Netty documentation we should use a cached thread pool for its boss and worker threads. Netty setup workers based on cpu cores. And besides you can configure the workerCounter option explicit.Also the options on the producer should not be client prefix as its using a ClientBootstrap which dont have a child. Improvement camel-netty - Remove options for pool size as Netty and rely on default implementation Accordingly to Netty documentation we should use a cached thread pool for its boss and worker threads. Netty setup workers based on cpu cores. And besides you can configure the workerCounter option explicit.Also the options on the producer should not be client prefix as its using a ClientBootstrap which dont have a child.
CAMEL-5149 The default injector should perform bean post processing to setup @Produce and the likes on the bean If you are not using Spring, Blueprint, Guice etc. And rely on the default implementation of the Injector, then that currently just creates a bean instance using the no-arg ctr. We should also perform bean post processing, which we have available from the DefaultCamelBeanPostProcessor which can inject @Procuce, @Consume etc. on the bean.See nabblehttp://camel.465427.n5.nabble.com/My-long-running-bean-sending-out-messages-tp5622710p5622710.html Improvement The default injector should perform bean post processing to setup @Produce and the likes on the bean If you are not using Spring, Blueprint, Guice etc. And rely on the default implementation of the Injector, then that currently just creates a bean instance using the no-arg ctr. We should also perform bean post processing, which we have available from the DefaultCamelBeanPostProcessor which can inject @Procuce, @Consume etc. on the bean.See nabblehttp://camel.465427.n5.nabble.com/My-long-running-bean-sending-out-messages-tp5622710p5622710.html
CAMEL-5148 Aggregate EIP - Add support for TimeoutAwareAggregationStrategy The aggregator EIP has timeout options.And if people implement the TimeoutAwareAggregationStrategy interface, then we should invoke the timeout method, if a timeout occurred during aggregation.  Improvement Aggregate EIP - Add support for TimeoutAwareAggregationStrategy The aggregator EIP has timeout options.And if people implement the TimeoutAwareAggregationStrategy interface, then we should invoke the timeout method, if a timeout occurred during aggregation. 
CAMEL-5147 Java DSL - Method call expressions should be consistent and use method, and not bean as done in some places The Java DSL uses both bean and method interchangeable for a method call expression. In XML DSLs its consistent named method. This is also what the model says. We should improved this in Java DSL to offer method consistently. And then @deprecate the bean method. Improvement Java DSL - Method call expressions should be consistent and use method, and not bean as done in some places The Java DSL uses both bean and method interchangeable for a method call expression. In XML DSLs its consistent named method. This is also what the model says. We should improved this in Java DSL to offer method consistently. And then @deprecate the bean method.
CAMEL-5146 Java DSL - Let ValueBuilder be Predicate to make it easier to use predicates in the Java DSL The Java DSL with the RouteBuilder has a number of built-in predicates and expressions we use in the DSL. Such as with the CBR or Filter etc to define predicates.ValueBuilder contains many out of the box predicates for the DSL. We should let it be predicate as well.Then you can use compound predicates such as with not, to stack predicates together:{code}                from("direct:start")                    .filter(not(header("foo")))                        .to("mock:result");{code}Before this was not possible as header from ValueBuilder is only an expression. And to fix that you would have to convert that to a predicate using a toPredicate static method. Which makes the DSL more verbose and not as stream-lined.This causes a slight API change as we need to remove retryWhile(Expression) in OnException as it has 2 methods to accept a predicate or expression. But in reality we should only need the predicate, as that is what retryWhile is about.This slight API change will break backwards compatibility (eg retryWhile in OnException) so we will keep this on the 2.10 trunk. Improvement Java DSL - Let ValueBuilder be Predicate to make it easier to use predicates in the Java DSL The Java DSL with the RouteBuilder has a number of built-in predicates and expressions we use in the DSL. Such as with the CBR or Filter etc to define predicates.ValueBuilder contains many out of the box predicates for the DSL. We should let it be predicate as well.Then you can use compound predicates such as with not, to stack predicates together:{code}                from("direct:start")                    .filter(not(header("foo")))                        .to("mock:result");{code}Before this was not possible as header from ValueBuilder is only an expression. And to fix that you would have to convert that to a predicate using a toPredicate static method. Which makes the DSL more verbose and not as stream-lined.This causes a slight API change as we need to remove retryWhile(Expression) in OnException as it has 2 methods to accept a predicate or expression. But in reality we should only need the predicate, as that is what retryWhile is about.This slight API change will break backwards compatibility (eg retryWhile in OnException) so we will keep this on the 2.10 trunk.
CAMEL-5144 Upgrade to ehcache 2.5 We should upgrade to the 2.5 version of EHCache fromhttp://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.ehcache/2.5.1_1/ Task Upgrade to ehcache 2.5 We should upgrade to the 2.5 version of EHCache fromhttp://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.ehcache/2.5.1_1/
CAMEL-5143 Add a new camel-mybatis statementType of 'InsertList' (similar to SelectOne versus SelectList) to allow for mybatis foreach driven batch insert statements The camel-mybatis code will iterate over any list passed in and attempt to insert each item individually, bypassing foreach support in statements like:    <insert id="batchInsertdataCore" parameterType="java.util.List">        INSERT INTO CORE_DATA (        <include refid="dataCoreColumns"/>        )        VALUES (        <foreach item="dataCore" collection="_parameter" open="" close="" separator="),(">            #{dataCore.event_id}, #{dataCore.start_time_val}, #{dataCore.end_time_val}        </foreach>        )    </insert>This results in mybatis generating the following error even when the route is receiving a list of objects as desired:### Error updating database.  Cause: org.apache.ibatis.builder.BuilderException: Error evaluating expression '_parameter'.  Return value (dataCore{    event_id=111222333,    start_time_val=Thu Mar 01 02:03:04 EST 2001,    end_time_val=Thu Mar 01 02:03:05 EST 2001,}) was not iterable.### The error may exist in mybatis/dataCore.xml### The error may involve dataCore.batchInsertdataCore### The error occurred while executing an update---from camel/trunk/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java ---    private void doInsert(Exchange exchange) throws Exception {        SqlSessionFactory client = endpoint.getSqlSessionFactory();        SqlSession session = client.openSession();        try {            Object result;            Object in = exchange.getIn().getBody();            if (in != null) {                // lets handle arrays or collections of objects                Iterator<?> iter = ObjectHelper.createIterator(in);                while (iter.hasNext()) {                    Object value = iter.next();                    LOG.trace("Inserting: {} using statement: {}", value, statement);                    result = session.insert(statement, value);                    doProcessResult(exchange, result);                }            } else {                LOG.trace("Inserting using statement: {}", statement);                result = session.insert(statement);                doProcessResult(exchange, result);            }        } finally {            session.commit();            session.close();        }    }---from camel/trunk/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java ---It should be simple to add a new statementType = 'InsertList' (similar to SelectOne versus SelectList) and add it to the switch statement further up in the MyBatisProducer.java code.Then a new doInsertBatch would be created, copying the code above and just emoving the iterator related code, simply calling:result = session.insert(statement, in); Improvement Add a new camel-mybatis statementType of 'InsertList' (similar to SelectOne versus SelectList) to allow for mybatis foreach driven batch insert statements The camel-mybatis code will iterate over any list passed in and attempt to insert each item individually, bypassing foreach support in statements like:    <insert id="batchInsertdataCore" parameterType="java.util.List">        INSERT INTO CORE_DATA (        <include refid="dataCoreColumns"/>        )        VALUES (        <foreach item="dataCore" collection="_parameter" open="" close="" separator="),(">            #{dataCore.event_id}, #{dataCore.start_time_val}, #{dataCore.end_time_val}        </foreach>        )    </insert>This results in mybatis generating the following error even when the route is receiving a list of objects as desired:### Error updating database.  Cause: org.apache.ibatis.builder.BuilderException: Error evaluating expression '_parameter'.  Return value (dataCore{    event_id=111222333,    start_time_val=Thu Mar 01 02:03:04 EST 2001,    end_time_val=Thu Mar 01 02:03:05 EST 2001,}) was not iterable.### The error may exist in mybatis/dataCore.xml### The error may involve dataCore.batchInsertdataCore### The error occurred while executing an update---from camel/trunk/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java ---    private void doInsert(Exchange exchange) throws Exception {        SqlSessionFactory client = endpoint.getSqlSessionFactory();        SqlSession session = client.openSession();        try {            Object result;            Object in = exchange.getIn().getBody();            if (in != null) {                // lets handle arrays or collections of objects                Iterator<?> iter = ObjectHelper.createIterator(in);                while (iter.hasNext()) {                    Object value = iter.next();                    LOG.trace("Inserting: {} using statement: {}", value, statement);                    result = session.insert(statement, value);                    doProcessResult(exchange, result);                }            } else {                LOG.trace("Inserting using statement: {}", statement);                result = session.insert(statement);                doProcessResult(exchange, result);            }        } finally {            session.commit();            session.close();        }    }---from camel/trunk/components/camel-mybatis/src/main/java/org/apache/camel/component/mybatis/MyBatisProducer.java ---It should be simple to add a new statementType = 'InsertList' (similar to SelectOne versus SelectList) and add it to the switch statement further up in the MyBatisProducer.java code.Then a new doInsertBatch would be created, copying the code above and just emoving the iterator related code, simply calling:result = session.insert(statement, in);
CAMEL-5141 camel-jms - Allow to configure frequency of timeout checker when doing request/reply over JMS Currently the reply manager checks per 1 second if timeout has occurred while waiting for expected replies when doing req/reply over JMS.If you have a strict timeout requirement, then the 1 sec interval may be to high. So we should allow ppl to configure this. Improvement camel-jms - Allow to configure frequency of timeout checker when doing request/reply over JMS Currently the reply manager checks per 1 second if timeout has occurred while waiting for expected replies when doing req/reply over JMS.If you have a strict timeout requirement, then the 1 sec interval may be to high. So we should allow ppl to configure this.
CAMEL-5136 File producer should support a flush attribute Currently, the file operation doesn't flush the file change while writing to the filesystem:    private void writeFileByFile(File source, File target) throws IOException {        FileChannel in = new FileInputStream(source).getChannel();        FileChannel out = null;        try {            out = prepareOutputFileChannel(target, out);            LOG.trace("Using FileChannel to transfer from: {} to: {}", in, out);            long size = in.size();            long position = 0;            while (position < size) {                position += in.transferTo(position, endpoint.getBufferSize(), out);            }        } finally {            IOHelper.close(in, source.getName(), LOG);            IOHelper.close(out, target.getName(), LOG);        }    }    private void writeFileByStream(InputStream in, File target) throws IOException {        FileChannel out = null;        try {            out = prepareOutputFileChannel(target, out);            LOG.trace("Using InputStream to transfer from: {} to: {}", in, out);            int size = endpoint.getBufferSize();            byte[] buffer = new byte[size];            ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);            int bytesRead;            while ((bytesRead = in.read(buffer)) != -1) {                if (bytesRead < size) {                    byteBuffer.limit(bytesRead);                }                out.write(byteBuffer);                byteBuffer.clear();            }        } finally {            IOHelper.close(in, target.getName(), LOG);            IOHelper.close(out, target.getName(), LOG);        }    }It means that the file can be visible on the filesystem quite a long time after starting to send the exchanges to the file endpoint.It could be interesting to add a flush attribute doing:    FileOutputStream os = ...    FileDescriptor fd = os.getFD();    ...    os.write(data);    os.flush();    fd.sync(); Improvement File producer should support a flush attribute Currently, the file operation doesn't flush the file change while writing to the filesystem:    private void writeFileByFile(File source, File target) throws IOException {        FileChannel in = new FileInputStream(source).getChannel();        FileChannel out = null;        try {            out = prepareOutputFileChannel(target, out);            LOG.trace("Using FileChannel to transfer from: {} to: {}", in, out);            long size = in.size();            long position = 0;            while (position < size) {                position += in.transferTo(position, endpoint.getBufferSize(), out);            }        } finally {            IOHelper.close(in, source.getName(), LOG);            IOHelper.close(out, target.getName(), LOG);        }    }    private void writeFileByStream(InputStream in, File target) throws IOException {        FileChannel out = null;        try {            out = prepareOutputFileChannel(target, out);            LOG.trace("Using InputStream to transfer from: {} to: {}", in, out);            int size = endpoint.getBufferSize();            byte[] buffer = new byte[size];            ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);            int bytesRead;            while ((bytesRead = in.read(buffer)) != -1) {                if (bytesRead < size) {                    byteBuffer.limit(bytesRead);                }                out.write(byteBuffer);                byteBuffer.clear();            }        } finally {            IOHelper.close(in, target.getName(), LOG);            IOHelper.close(out, target.getName(), LOG);        }    }It means that the file can be visible on the filesystem quite a long time after starting to send the exchanges to the file endpoint.It could be interesting to add a flush attribute doing:    FileOutputStream os = ...    FileDescriptor fd = os.getFD();    ...    os.write(data);    os.flush();    fd.sync();
CAMEL-5134 Simple language - Add support for referring to headers using square brackets This is intuitive to refer to a header using a square brackets to indicate a key lookupSo you can do{code}"${header[foo]}"{code}The current way would be to use a dot{code}"${header.foo}"{code} Improvement Simple language - Add support for referring to headers using square brackets This is intuitive to refer to a header using a square brackets to indicate a key lookupSo you can do{code}"${header[foo]}"{code}The current way would be to use a dot{code}"${header.foo}"{code}
CAMEL-5128 Using custom NodeIfFactory should be auto discovered with XML DSL Seehttp://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.htmlThere is a number of custom features that is auto discovered. NodeIdFactory is missing. Improvement Using custom NodeIfFactory should be auto discovered with XML DSL Seehttp://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.htmlThere is a number of custom features that is auto discovered. NodeIdFactory is missing.
CAMEL-5127 serviceUrl in JMX remote connection should use 0.0.0.0 instead of localhost See https://issues.apache.org/jira/browse/KARAF-1295We should do similar in Camel, so its easier to connect from remote JMX over the network Improvement serviceUrl in JMX remote connection should use 0.0.0.0 instead of localhost See https://issues.apache.org/jira/browse/KARAF-1295We should do similar in Camel, so its easier to connect from remote JMX over the network
CAMEL-5126 Improve the exception message if the throttlers header key/value is null See http://camel.465427.n5.nabble.com/Throttling-maximumRequestsPerPeriod-problem-td5586898.html#a5599362 Improvement Improve the exception message if the throttlers header key/value is null See http://camel.465427.n5.nabble.com/Throttling-maximumRequestsPerPeriod-problem-td5586898.html#a5599362
CAMEL-5121 Add LifecycleSupport class for end users to use as base class The {{LifecycleStrategy}} interface has 10+ methods. We should offer a base class in support package. End users can extend and then override the methods they need.For example if they only need to work with onContextStart() etc.Also it makes it easier for them to migrate in case we add new methods to the interface, as the base class will just have a noop implementation. Improvement Add LifecycleSupport class for end users to use as base class The {{LifecycleStrategy}} interface has 10+ methods. We should offer a base class in support package. End users can extend and then override the methods they need.For example if they only need to work with onContextStart() etc.Also it makes it easier for them to migrate in case we add new methods to the interface, as the base class will just have a noop implementation.
CAMEL-5120 Multiple inputs to a route should be visible in JMX when browsing a route mbean Its a limitation in the current logic for JMX.We should strive to refacator this to ensure the route mbean gets used by both input consumers for the route, so they have combined data in the route mbean that gets registered.See nabblehttp://camel.465427.n5.nabble.com/multiple-from-endpoints-and-jmx-console-tp5587775p5587775.html Improvement Multiple inputs to a route should be visible in JMX when browsing a route mbean Its a limitation in the current logic for JMX.We should strive to refacator this to ensure the route mbean gets used by both input consumers for the route, so they have combined data in the route mbean that gets registered.See nabblehttp://camel.465427.n5.nabble.com/multiple-from-endpoints-and-jmx-console-tp5587775p5587775.html
CAMEL-5118 Upgrade to jclouds 1.4.0 Ioannis, can we upgrade camel-jclouds? Task Upgrade to jclouds 1.4.0 Ioannis, can we upgrade camel-jclouds?
CAMEL-5117 camel-twitter - Allow to configure twitter connection on component level Currently you must set the 4 twitter auth settings on the endpoint, and they are long options.We should allow to configure this on component level, so using the endpoint is easier. Improvement camel-twitter - Allow to configure twitter connection on component level Currently you must set the 4 twitter auth settings on the endpoint, and they are long options.We should allow to configure this on component level, so using the endpoint is easier.
CAMEL-5111 OSGi test failure for camel-beanio Due to incomplete MANIFEST.MF in org.beanio:beanio:1.2.3. There is an [issue reported|http://code.google.com/p/beanio/issues/detail?id=26] we are only waiting for a new beanio release. Hopefully there will be one before 2.10.0. Test OSGi test failure for camel-beanio Due to incomplete MANIFEST.MF in org.beanio:beanio:1.2.3. There is an [issue reported|http://code.google.com/p/beanio/issues/detail?id=26] we are only waiting for a new beanio release. Hopefully there will be one before 2.10.0.
CAMEL-5108 Set Restlet Server Options and Return HTTP Headers Set in Exchange The underlying Restlet server options can now be set via an Endpoint option.HTTP headers (e.g. Expires or Last Modified) are returned properly from the exchange to the Restlet. Improvement Set Restlet Server Options and Return HTTP Headers Set in Exchange The underlying Restlet server options can now be set via an Endpoint option.HTTP headers (e.g. Expires or Last Modified) are returned properly from the exchange to the Restlet.
CAMEL-5101 Add some of the performance stats to the CamelContextMBean On the routes mbeans you can see number of messages processed, failed, etc.We should aggregate and add some of those on the camel context mbean.Its nice to see the total number of messages processed, failed etc. Improvement Add some of the performance stats to the CamelContextMBean On the routes mbeans you can see number of messages processed, failed, etc.We should aggregate and add some of those on the camel context mbean.Its nice to see the total number of messages processed, failed etc.
CAMEL-5099 Timer component - Should use thread name pattern so the thread name is aligned with the Camel threads When using the timer component, the thread name will just be the timer name.Before{code}2012-03-16 09:28:42,857 [foo                                ] INFO  route1                         - Fired timer{code}After{code}2012-03-16 09:28:18,611 [Camel (camel-1) thread #0 - foo    ] INFO  route1                         - Fired timer{code} Improvement Timer component - Should use thread name pattern so the thread name is aligned with the Camel threads When using the timer component, the thread name will just be the timer name.Before{code}2012-03-16 09:28:42,857 [foo                                ] INFO  route1                         - Fired timer{code}After{code}2012-03-16 09:28:18,611 [Camel (camel-1) thread #0 - foo    ] INFO  route1                         - Fired timer{code}
CAMEL-5091 Do not register ProducerCache in JMX as they dont bring much value We should consider not registering ProducerCache mbean in JMX as they are an mostly internal in use by the EIPs.And for end users they do not bring much value, and just add more mbeans for them to stare at in jconsole.Also each <to> in the Camel routes has its own producer cache, and thus you can have many producer cache mbeans in JMX. Improvement Do not register ProducerCache in JMX as they dont bring much value We should consider not registering ProducerCache mbean in JMX as they are an mostly internal in use by the EIPs.And for end users they do not bring much value, and just add more mbeans for them to stare at in jconsole.Also each <to> in the Camel routes has its own producer cache, and thus you can have many producer cache mbeans in JMX.
CAMEL-5090 WireTap EIP - Sending to destination should support error handler When using the wire tap to a destination, then that process does not support error handling, such as redelivery or onException.We should improve this and allow error handling.If you send the message to a route using such as a direct endpoint, then that route will have error handling. So you can do it like that. But then you would need to add that 2nd route.See nabblehttp://camel.465427.n5.nabble.com/exception-in-the-wireTap-EIP-tp5566464p5566464.html Improvement WireTap EIP - Sending to destination should support error handler When using the wire tap to a destination, then that process does not support error handling, such as redelivery or onException.We should improve this and allow error handling.If you send the message to a route using such as a direct endpoint, then that route will have error handling. So you can do it like that. But then you would need to add that 2nd route.See nabblehttp://camel.465427.n5.nabble.com/exception-in-the-wireTap-EIP-tp5566464p5566464.html
CAMEL-5082 camel-printer: more than one lpr + JobName + mockito camel-printer only supports one configuration. I needed two lpr endpoints...javax.print allows to set a JobName - nice in the webinterface of cups. from(...).setHeader(PrinterEndpoint.JOB_NAME, simple(${file:onlyname})).to("lpr://localhost/printer");The new testcases should work without a printer configured. mockito seems to be in use by other components, too. Improvement camel-printer: more than one lpr + JobName + mockito camel-printer only supports one configuration. I needed two lpr endpoints...javax.print allows to set a JobName - nice in the webinterface of cups. from(...).setHeader(PrinterEndpoint.JOB_NAME, simple(${file:onlyname})).to("lpr://localhost/printer");The new testcases should work without a printer configured. mockito seems to be in use by other components, too.
CAMEL-5079 Thread pools configured on EIPs should be shutdown and removed if possible when the route is removed Some EIPs such as the wire tap, aggregator, splitter, etc supports thread pools. A thread pool can either bea) use an existing thread poolb) a new thread pool based on a profilec) a new thread pool due parallel processingFor b+c we should regard this as safe to shutdown and remove the thread pool when the routes is removed, as the thread pool was only used by this EIP.If its an existing thread pool, then Camel cannot handle the lifecycle, the end user is responsible for shutting down the pool when its no longer needed.See nabblehttp://camel.465427.n5.nabble.com/WireTap-threads-number-keeps-on-growing-tp5557827p5557827.html Improvement Thread pools configured on EIPs should be shutdown and removed if possible when the route is removed Some EIPs such as the wire tap, aggregator, splitter, etc supports thread pools. A thread pool can either bea) use an existing thread poolb) a new thread pool based on a profilec) a new thread pool due parallel processingFor b+c we should regard this as safe to shutdown and remove the thread pool when the routes is removed, as the thread pool was only used by this EIP.If its an existing thread pool, then Camel cannot handle the lifecycle, the end user is responsible for shutting down the pool when its no longer needed.See nabblehttp://camel.465427.n5.nabble.com/WireTap-threads-number-keeps-on-growing-tp5557827p5557827.html
CAMEL-5078 A number of dependency upgrades There is a number of 3rd party JARs we should upgrade in parent/pom.xml. Task A number of dependency upgrades There is a number of 3rd party JARs we should upgrade in parent/pom.xml.
CAMEL-5077 Upgrade to hazelcast 2.0.1 Hazelcast 2.0.x is released. We should upgrade. Task Upgrade to hazelcast 2.0.1 Hazelcast 2.0.x is released. We should upgrade.
CAMEL-5076 Update docs for Cache sharing (CAMEL-3686) Update wiki pages when patch will be accepted Sub-task Update docs for Cache sharing (CAMEL-3686) Update wiki pages when patch will be accepted
CAMEL-5074 Add option to newSingleThreadExecutor to allow thread pool to shrink to 0 in case task is not needed to run all the time Sometimes you want to use a async task to run some task, and for that the thread pools can be used.However there may not be a need for the thread pool to keep 1 thread in the pool. So we should allow the pool to shrink to 0. Improvement Add option to newSingleThreadExecutor to allow thread pool to shrink to 0 in case task is not needed to run all the time Sometimes you want to use a async task to run some task, and for that the thread pools can be used.However there may not be a need for the thread pool to keep 1 thread in the pool. So we should allow the pool to shrink to 0.
CAMEL-5073 Add camel-jt400 to features Seehttp://fusesource.com/forums/thread.jspa?threadID=3755&tstart=0 Improvement Add camel-jt400 to features Seehttp://fusesource.com/forums/thread.jspa?threadID=3755&tstart=0
CAMEL-5072 Shutting down scheduled poll consumer should shutdown self managed thread pool, as its no longer needed See nabblehttp://camel.465427.n5.nabble.com/FTP-ConsumerTemplate-Threads-remaining-alive-tp5548338p5548338.htmlThis helps to shutdown thread pools more eagerly. And also helps for end users who create a lot of scheduled poll consumers on the fly, such as the use case from the nabble link. Improvement Shutting down scheduled poll consumer should shutdown self managed thread pool, as its no longer needed See nabblehttp://camel.465427.n5.nabble.com/FTP-ConsumerTemplate-Threads-remaining-alive-tp5548338p5548338.htmlThis helps to shutdown thread pools more eagerly. And also helps for end users who create a lot of scheduled poll consumers on the fly, such as the use case from the nabble link.
CAMEL-5067 Inflight registry - Change endpoint based to consumer based and avoid synchronized access The CAMEL-5058 identified a leak when using producer template to send to many unique endpoints. The reason is the UoW add/remove itself from the inflight registry.What we need to do is to make the inflight registry add/remove seperated into two- from UoW as of today, to track totals- from route consumer to tracker per route basedThen we can avoid synchronized access to the endpoint counter as we do with the fix from CAMEL-5058.The requires a little API change in InflightRegistry. Which we may or may not consider backporting to 2.9.x Improvement Inflight registry - Change endpoint based to consumer based and avoid synchronized access The CAMEL-5058 identified a leak when using producer template to send to many unique endpoints. The reason is the UoW add/remove itself from the inflight registry.What we need to do is to make the inflight registry add/remove seperated into two- from UoW as of today, to track totals- from route consumer to tracker per route basedThen we can avoid synchronized access to the endpoint counter as we do with the fix from CAMEL-5058.The requires a little API change in InflightRegistry. Which we may or may not consider backporting to 2.9.x
CAMEL-5065 Populating Exchange.FAILURE_ENDPOINT when bean is referenced using bean(...) and throws Exception We are currently working on the management of failed exchanged. For getting an insight what has happened the Exchange.FAILURE_ENDPOINT delivers valuable information. However, this property gets only populated by endpoints. This means, when using beans, the property is set when the bean is referenced using to(bean://exceptionBean), but not if the bean is referenced using bean(exceptionBean). In the latter case, the property gets either populated using the last endpoint before the bean(...) or not at all. Please see the attached test case.Thus, I would like to suggest populating the Exchange.FAILURE_ENDPOINT also for beans that are referenced in the DSL using the .bean() notation Improvement Populating Exchange.FAILURE_ENDPOINT when bean is referenced using bean(...) and throws Exception We are currently working on the management of failed exchanged. For getting an insight what has happened the Exchange.FAILURE_ENDPOINT delivers valuable information. However, this property gets only populated by endpoints. This means, when using beans, the property is set when the bean is referenced using to(bean://exceptionBean), but not if the bean is referenced using bean(exceptionBean). In the latter case, the property gets either populated using the last endpoint before the bean(...) or not at all. Please see the attached test case.Thus, I would like to suggest populating the Exchange.FAILURE_ENDPOINT also for beans that are referenced in the DSL using the .bean() notation
CAMEL-5061 camel-websocket - Cleanup code a bit and ensure resources is deallocated when stopping The new camel-websocket needs a bit of polished, and to de-allocate resources when being stopped etc. Task camel-websocket - Cleanup code a bit and ensure resources is deallocated when stopping The new camel-websocket needs a bit of polished, and to de-allocate resources when being stopped etc.
CAMEL-5059 Advice with - mock endpoints - should allow to skip send to original endpoint This allows people in unit tests to mock sending to endpoints (which you can do now) but now they can also configure to skip sending to original endpoint. Improvement Advice with - mock endpoints - should allow to skip send to original endpoint This allows people in unit tests to mock sending to endpoints (which you can do now) but now they can also configure to skip sending to original endpoint.
CAMEL-5056 Remove fluent builders on BeanDefinition as they are not used And allow to set bean type as a class<?> as we do not need to load the class by its name. And there can in fact be minor issues if using simple type such as long, array[] as they tend to report their type name in a special way. Improvement Remove fluent builders on BeanDefinition as they are not used And allow to set bean type as a class<?> as we do not need to load the class by its name. And there can in fact be minor issues if using simple type such as long, array[] as they tend to report their type name in a special way.
CAMEL-5054 Configuration of executorService / executorServiceRef and parallelProcessing should be intuitive for EIPs Currently if you use executorServiceRef you must enabled parallel processing as well. But if you configure executorService then it does not matter what parallelProcessing has been set to. This should be changed, so its consistent. Improvement Configuration of executorService / executorServiceRef and parallelProcessing should be intuitive for EIPs Currently if you use executorServiceRef you must enabled parallel processing as well. But if you configure executorService then it does not matter what parallelProcessing has been set to. This should be changed, so its consistent.
CAMEL-5050 Create LevelDB Aggregator Component Create an aggregator component using LevelDB Improvement Create LevelDB Aggregator Component Create an aggregator component using LevelDB
CAMEL-5047 Clean up MDC property names Current MDC support in camel uses different property names. My proposal is to align them and use a "camel." prefix for all of them to let them live in own logical namespace:||Before change||After change|||breadcrumbId|camel.breadcrumbId||exchangeId|camel.exchangeId||messageId|camel.messageId||correlationId|camel.correlationId||routeId|camel.routeId| |camelContextId|camel.contextId||transactionKey|camel.transactionKey| Improvement Clean up MDC property names Current MDC support in camel uses different property names. My proposal is to align them and use a "camel." prefix for all of them to let them live in own logical namespace:||Before change||After change|||breadcrumbId|camel.breadcrumbId||exchangeId|camel.exchangeId||messageId|camel.messageId||correlationId|camel.correlationId||routeId|camel.routeId| |camelContextId|camel.contextId||transactionKey|camel.transactionKey|
CAMEL-5042 Shutting down a thread pool should remove the thread pool from JMX if it was enlisted This will require an API change in LifecycleStrategy to offer a onThreadPoolRemove method. Improvement Shutting down a thread pool should remove the thread pool from JMX if it was enlisted This will require an API change in LifecycleStrategy to offer a onThreadPoolRemove method.
CAMEL-5032 Java RouteBuilder configuring context scoped error handler should not be a fluent builder People may configure code like{code}@Override    protected RouteBuilder createRouteBuilder() throws Exception {        return new RouteBuilder() {            @Override            public void configure() throws Exception {                errorHandler(defaultErrorHandler())                    .onException(Exception.class)                    .redeliveryPolicyRef("redeliveryPolicy")                    .log(LoggingLevel.ERROR, "Error");{code}Which is wrong. As the context scoped error handler, should be a void method, so people have to configure the onException in a new method as best practice would be. Improvement Java RouteBuilder configuring context scoped error handler should not be a fluent builder People may configure code like{code}@Override    protected RouteBuilder createRouteBuilder() throws Exception {        return new RouteBuilder() {            @Override            public void configure() throws Exception {                errorHandler(defaultErrorHandler())                    .onException(Exception.class)                    .redeliveryPolicyRef("redeliveryPolicy")                    .log(LoggingLevel.ERROR, "Error");{code}Which is wrong. As the context scoped error handler, should be a void method, so people have to configure the onException in a new method as best practice would be.
CAMEL-5028 Using adviceWith in CamelSpringTestSupport When using adviceWith in CamelSpringTestSupport you should override isUseAdviceWith in your testcase and return true. But this results in a error been thrown from assertValidContext in CamelSpringTestSupport with error 'Should have at least one route'.see : http://camel.465427.n5.nabble.com/Using-adviceWith-in-CamelSpringTestSupport-td5504936.html Improvement Using adviceWith in CamelSpringTestSupport When using adviceWith in CamelSpringTestSupport you should override isUseAdviceWith in your testcase and return true. But this results in a error been thrown from assertValidContext in CamelSpringTestSupport with error 'Should have at least one route'.see : http://camel.465427.n5.nabble.com/Using-adviceWith-in-CamelSpringTestSupport-td5504936.html
CAMEL-5019 Create a camel-mongodb Karaf feature Creation of a camel-mongodb feature for quick installation of the component in Karaf environments.Patch attached. Improvement Create a camel-mongodb Karaf feature Creation of a camel-mongodb feature for quick installation of the component in Karaf environments.Patch attached.
CAMEL-5018 Support unmarshall of CSV files that does not contain all fields described in the annotated POJO.  Actually when trying to unmarshall a CSV that does not contain all the fields described via @DataField annotation, an IllegalArgumentException is thrown. Would be better to define a default value for non required fields via @DataField annotation and therefore, not fail. Improvement Support unmarshall of CSV files that does not contain all fields described in the annotated POJO.  Actually when trying to unmarshall a CSV that does not contain all the fields described via @DataField annotation, an IllegalArgumentException is thrown. Would be better to define a default value for non required fields via @DataField annotation and therefore, not fail.
CAMEL-5017 Let user choice how to group the lines in the StreamConsumer We could let the user choice how to group the lines if the groupLines option is enabled.The Stream Endpoint can hold the strategy bean reference from the registry. Improvement Let user choice how to group the lines in the StreamConsumer We could let the user choice how to group the lines if the groupLines option is enabled.The Stream Endpoint can hold the strategy bean reference from the registry.
CAMEL-5015 camel-jt400: add support for keyed data queues The current DTAQ support is limited to non-keyed data queues. I have created a patch that adds support for keyed data queues. Configuration is done via options on the endpoint, which is the standard.When writing to a keyed data queue, the message header "KEY" must contain the desired message key. This can be binary or text, depending upon the Format used.When reading from a keyed data queue, the searchKey and searchType must be set.Example endpoint configurations------------------------------Writing to keyed data queue from JMSfrom("jms:queue:input").                        to("jt400://username:password@system/lib.lib/MSGINDQ.DTAQ?keyed=true");------------------------------Reading from keyed data queue to JMSfrom("jt400://username:password@system/lib.lib/MSGOUTDQ.DTAQ?keyed=true&searchKey=MYKEY&searchType=GE").                        to("jms:queue:output");------------------------------In addition, I have added the iSeries DTAQ Sender Information to the message header for messages read from a DTAQ. New Feature camel-jt400: add support for keyed data queues The current DTAQ support is limited to non-keyed data queues. I have created a patch that adds support for keyed data queues. Configuration is done via options on the endpoint, which is the standard.When writing to a keyed data queue, the message header "KEY" must contain the desired message key. This can be binary or text, depending upon the Format used.When reading from a keyed data queue, the searchKey and searchType must be set.Example endpoint configurations------------------------------Writing to keyed data queue from JMSfrom("jms:queue:input").                        to("jt400://username:password@system/lib.lib/MSGINDQ.DTAQ?keyed=true");------------------------------Reading from keyed data queue to JMSfrom("jt400://username:password@system/lib.lib/MSGOUTDQ.DTAQ?keyed=true&searchKey=MYKEY&searchType=GE").                        to("jms:queue:output");------------------------------In addition, I have added the iSeries DTAQ Sender Information to the message header for messages read from a DTAQ.
CAMEL-5012 Starting and stopping Camel should be less verbose When starting and shutting down Camel, it reports a bit stuff at INFO level. We should make it less verbose. For example the type converter logs 3-4 lines, we should just log 1 line instead. Improvement Starting and stopping Camel should be less verbose When starting and shutting down Camel, it reports a bit stuff at INFO level. We should make it less verbose. For example the type converter logs 3-4 lines, we should just log 1 line instead.
CAMEL-5011 Deprecate the lazyLoadingTypeConverter option as loading TC is now fast We should mark this option as @deprecated as loading the TC is now fast (avoid file scanning as we did in the past).As loading type converters should generally be part of bootstrapping CamelContext so everything is in order before starting routing. Improvement Deprecate the lazyLoadingTypeConverter option as loading TC is now fast We should mark this option as @deprecated as loading the TC is now fast (avoid file scanning as we did in the past).As loading type converters should generally be part of bootstrapping CamelContext so everything is in order before starting routing.
CAMEL-5010 Remove OSGi environment detection logging from camel-spring In the old days when using OSGi and Camel it was sometime tricky to get the stuff working and running correctly. So we had some logic to detect if OSGi environment. We have some left over code in camel-spring that logs this. We should now remove this as it does not offer any value.And also causes a WARN to be logged in JBoss7 that may confuse users, when using Camel as a WAR app in JBoss.http://camel.465427.n5.nabble.com/Camel-2-9-0-startup-error-message-ClassNotFoundException-org-osgi-framework-BundleActivator-tp5133932p5133932.html Improvement Remove OSGi environment detection logging from camel-spring In the old days when using OSGi and Camel it was sometime tricky to get the stuff working and running correctly. So we had some logic to detect if OSGi environment. We have some left over code in camel-spring that logs this. We should now remove this as it does not offer any value.And also causes a WARN to be logged in JBoss7 that may confuse users, when using Camel as a WAR app in JBoss.http://camel.465427.n5.nabble.com/Camel-2-9-0-startup-error-message-ClassNotFoundException-org-osgi-framework-BundleActivator-tp5133932p5133932.html
CAMEL-5007 PropertiesComponent on errorHandler properties PropertiesComponent should apply on errorHandler and redeliveryPolicy properties definition in the camel context. Improvement PropertiesComponent on errorHandler properties PropertiesComponent should apply on errorHandler and redeliveryPolicy properties definition in the camel context.
CAMEL-5003 Add support of generated keys retrieval in JDBC component The JDBC component has no support of generated keys retrieval, i.e use of Jdbc api calls : - [statement.execute(String, int)|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int)] - [statement.execute(String, int[])|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int[])] - [statement.execute(String, String[])|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20java.lang.String[])]This patch allow to retrieve the generated keys using headers : - JDBC_RETRIEVE_GENERATED_KEYS : boolean (mandatory to retrieve the generated keys) - JDBC_GENERATED_COLUMNS : containing the int[] or String[] generated keys expected (optional)The results are put in two headers : - JDBC_GENERATED_KEYS_DATA : the generated keys rows - JDBC_GENERATED_KEYS_ROW_COUNT : the number of generated keys rows put Improvement Add support of generated keys retrieval in JDBC component The JDBC component has no support of generated keys retrieval, i.e use of Jdbc api calls : - [statement.execute(String, int)|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int)] - [statement.execute(String, int[])|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20int[])] - [statement.execute(String, String[])|http://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#execute(java.lang.String,%20java.lang.String[])]This patch allow to retrieve the generated keys using headers : - JDBC_RETRIEVE_GENERATED_KEYS : boolean (mandatory to retrieve the generated keys) - JDBC_GENERATED_COLUMNS : containing the int[] or String[] generated keys expected (optional)The results are put in two headers : - JDBC_GENERATED_KEYS_DATA : the generated keys rows - JDBC_GENERATED_KEYS_ROW_COUNT : the number of generated keys rows put
CAMEL-5002 BaseTypeConverter blocks when getting type converter When load testing my application, BaseTypeConverter#getOrFindTypeConverter caused threads to block due to the synchronized block in the getOrFindTypeConverter method.  This was triggered when exchange.getIn().getBody(Class) was called.  Changing the method to getBody() resulted in higher application throughput.   Improvement BaseTypeConverter blocks when getting type converter When load testing my application, BaseTypeConverter#getOrFindTypeConverter caused threads to block due to the synchronized block in the getOrFindTypeConverter method.  This was triggered when exchange.getIn().getBody(Class) was called.  Changing the method to getBody() resulted in higher application throughput.  
CAMEL-5001 Remove shareUnitOfWork from recipient list EIP The option {{shareUnitOfWork}} does not make sense for recipient list, and we should remove that option. In older Camel releases we should mark it as deprecated. Improvement Remove shareUnitOfWork from recipient list EIP The option {{shareUnitOfWork}} does not make sense for recipient list, and we should remove that option. In older Camel releases we should mark it as deprecated.
CAMEL-4997 Method call expression with bean type uses the toString to lookup a bean instead Seehttp://stackoverflow.com/questions/9192458/apache-camel-methodnotfoundexception-in-transformIts a side-effect of CAMEL-4733 Improvement Method call expression with bean type uses the toString to lookup a bean instead Seehttp://stackoverflow.com/questions/9192458/apache-camel-methodnotfoundexception-in-transformIts a side-effect of CAMEL-4733
CAMEL-4994 UnsupportedOperationException thrown if @Consume method is not public If the org.apache.camel.Consume annotation is used on a method that is not public (e.g. default visibility), then the following exception will be thrown every time a message is delivered to that consumer and the message will roll-back with the consumer never invoked.2012-02-08 16:29:37,298 [Camel Thread 0 - JmsConsumer[paula.inprogress] WARN  org.apache.camel.component.jms.JmsMessageListenerContainer  - Execution of JMS message listener failed, and no ErrorHandler has been set.org.apache.camel.RuntimeCamelException: java.lang.UnsupportedOperationException	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:115)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:243)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at java.lang.Thread.run(Thread.java:680)Caused by: java.lang.UnsupportedOperationException	at java.util.Collections$UnmodifiableMap.put(Collections.java:1285)	at org.apache.camel.component.bean.BeanInfo.introspect(BeanInfo.java:256)	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:136)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:142)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:92)	... 11 moreI appreacate that this not specifically a bug, so I am filing this as an improvement.  However this is a REALLY misleading error message.  A more specific error message would be greaty appreaceated and save a lot of time.  Thanks. Improvement UnsupportedOperationException thrown if @Consume method is not public If the org.apache.camel.Consume annotation is used on a method that is not public (e.g. default visibility), then the following exception will be thrown every time a message is delivered to that consumer and the message will roll-back with the consumer never invoked.2012-02-08 16:29:37,298 [Camel Thread 0 - JmsConsumer[paula.inprogress] WARN  org.apache.camel.component.jms.JmsMessageListenerContainer  - Execution of JMS message listener failed, and no ErrorHandler has been set.org.apache.camel.RuntimeCamelException: java.lang.UnsupportedOperationException	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1139)	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:115)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:243)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at java.lang.Thread.run(Thread.java:680)Caused by: java.lang.UnsupportedOperationException	at java.util.Collections$UnmodifiableMap.put(Collections.java:1285)	at org.apache.camel.component.bean.BeanInfo.introspect(BeanInfo.java:256)	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:136)	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:142)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85)	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:92)	... 11 moreI appreacate that this not specifically a bug, so I am filing this as an improvement.  However this is a REALLY misleading error message.  A more specific error message would be greaty appreaceated and save a lot of time.  Thanks.
CAMEL-4993 Add session information from cometd to camel message headers The cometd component has the ability to authenticate a connection with a custom SecurityPolicy.[1] This information can then be added to the cometd session for further calls. Unfortunately, session attributes aren't passed to the camel message for processing by endpoints and processors further down the line.  1. http://cometd.org/documentation/2.x/howtos/authentication Improvement Add session information from cometd to camel message headers The cometd component has the ability to authenticate a connection with a custom SecurityPolicy.[1] This information can then be added to the cometd session for further calls. Unfortunately, session attributes aren't passed to the camel message for processing by endpoints and processors further down the line.  1. http://cometd.org/documentation/2.x/howtos/authentication
CAMEL-4990 SimpleExpression should trim the string before parsing  The expression could has "\r", "\n" character at the begin or end.We should trim the expression before parsing it.Here is the mail thread[1] which talks about it.[1]http://camel.465427.n5.nabble.com/Please-consider-to-trim-simple-expressions-before-parsing-tt5455143.html Improvement SimpleExpression should trim the string before parsing  The expression could has "\r", "\n" character at the begin or end.We should trim the expression before parsing it.Here is the mail thread[1] which talks about it.[1]http://camel.465427.n5.nabble.com/Please-consider-to-trim-simple-expressions-before-parsing-tt5455143.html
CAMEL-4978 Dead Letter Channel: add onError with correspondence to onRedelivery When an error occurs there can be situation when some actions should be performed before next redelivery attempt. These actions can be custom logging (in case of Dead Letter Channel we don't have control on logger name and format), creating incident request in internal company system, etc.Current version of Dead Letter Channel provides support for specifying processor which is called when next redelivery attempt is performed. However, if delay between attempts is long, this can be too late.I think we can implement support for specifying processor which will be called when error occurs, e.g., onError property. Then this processor with information from provided Exchange can take appropriate actions. For example, it can save this message for further investigation, while Dead Letter Channel will keep going on redelivering it.If this feature is worth to be implemented, I can prepare a patch. I implemented a work-around in my current project using onRedelivery, but I don't like it because of latency in redelivery interval. Improvement Dead Letter Channel: add onError with correspondence to onRedelivery When an error occurs there can be situation when some actions should be performed before next redelivery attempt. These actions can be custom logging (in case of Dead Letter Channel we don't have control on logger name and format), creating incident request in internal company system, etc.Current version of Dead Letter Channel provides support for specifying processor which is called when next redelivery attempt is performed. However, if delay between attempts is long, this can be too late.I think we can implement support for specifying processor which will be called when error occurs, e.g., onError property. Then this processor with information from provided Exchange can take appropriate actions. For example, it can save this message for further investigation, while Dead Letter Channel will keep going on redelivering it.If this feature is worth to be implemented, I can prepare a patch. I implemented a work-around in my current project using onRedelivery, but I don't like it because of latency in redelivery interval.
CAMEL-4974 Hide or Encrypt some informations in the JMX MBeans Hi,It would be great that there is an option that permits to hide or encrypt some information displayed inside the jmx mbean.An example of use case:A software engineer that wants to inspect some problems with the performance in the JMX console. For now he can see all the route uris that contains login/password in clear (mail-connector for example). I think it is not a good thing for the security of the project.For me it's the same case as a database manager can't see the password inside the database he manages.Except this one I think camel is a very useful and good project.Thank you. New Feature Hide or Encrypt some informations in the JMX MBeans Hi,It would be great that there is an option that permits to hide or encrypt some information displayed inside the jmx mbean.An example of use case:A software engineer that wants to inspect some problems with the performance in the JMX console. For now he can see all the route uris that contains login/password in clear (mail-connector for example). I think it is not a good thing for the security of the project.For me it's the same case as a database manager can't see the password inside the database he manages.Except this one I think camel is a very useful and good project.Thank you.
CAMEL-4971 Add camelId as function to simple language This makes it easier to grab camelId Improvement Add camelId as function to simple language This makes it easier to grab camelId
CAMEL-4968 Expose Transacted Redeliveries statistic in JMX See also CAMEL-4961We should expose a TransactedRedeliveries counter as JMX attribute on the Camel routes etc.This allow people to know how many redelivered messages they have processed.For example when using a JMS broker such as AMQ, and using transaction. Then the JMS broker may send the same messageback to Camel as a transacted redelivered message. So we should count those in JMX.This allows people to know how many unique messages they have processed as itsunique = total - transacted redeliveries Improvement Expose Transacted Redeliveries statistic in JMX See also CAMEL-4961We should expose a TransactedRedeliveries counter as JMX attribute on the Camel routes etc.This allow people to know how many redelivered messages they have processed.For example when using a JMS broker such as AMQ, and using transaction. Then the JMS broker may send the same messageback to Camel as a transacted redelivered message. So we should count those in JMX.This allows people to know how many unique messages they have processed as itsunique = total - transacted redeliveries
CAMEL-4966 Upgrade to Jetty 7.6.0 Jetty: 7.6.0.v20120127Has been released. There is some API changes since 7.5.3.There is also a 7.5.4.v20111024 release (we are using 7.5.3) Task Upgrade to Jetty 7.6.0 Jetty: 7.6.0.v20120127Has been released. There is some API changes since 7.5.3.There is also a 7.5.4.v20111024 release (we are using 7.5.3)
CAMEL-4965 Allow to configure rollback logging level on TX error handler By default the transacted error handler, will log at WARN level if a rollback occurs.We should allow people to configure the logging level. Improvement Allow to configure rollback logging level on TX error handler By default the transacted error handler, will log at WARN level if a rollback occurs.We should allow people to configure the logging level.
CAMEL-4964 BeanIO dataformat Hello,I've been using Camel for marshalling and unmarshalling data from flat files (mainly CSV and fixed width) and have found it to be really great. There are a few cases that the existing bindy/flatpack dataformats don't seem to support (files with multiple different record types, nested types) and after looking around I came across BeanIO which supports some of these cases. I've created a dataformat which uses BeanIO and wondered if it would be useful for anyone else, so thought I would submit it.Here's what I have...https://bitbucket.org/james_l/camel-beanioBeanIO: http://www.beanio.org - It's Apache 2.0 licensed. I'm not involved with BeanIO at all but did mail them to ask if they were OK for me to submit this.If you think it's of use to others then it'd be great to see it as a Camel dataformat.Thanks!James New Feature BeanIO dataformat Hello,I've been using Camel for marshalling and unmarshalling data from flat files (mainly CSV and fixed width) and have found it to be really great. There are a few cases that the existing bindy/flatpack dataformats don't seem to support (files with multiple different record types, nested types) and after looking around I came across BeanIO which supports some of these cases. I've created a dataformat which uses BeanIO and wondered if it would be useful for anyone else, so thought I would submit it.Here's what I have...https://bitbucket.org/james_l/camel-beanioBeanIO: http://www.beanio.org - It's Apache 2.0 licensed. I'm not involved with BeanIO at all but did mail them to ask if they were OK for me to submit this.If you think it's of use to others then it'd be great to see it as a Camel dataformat.Thanks!James
CAMEL-4963 antInclude support for case insensitive patterns antIncude patterns are case sensitive. I need a case insensitive file matching pattern with file and ftp components.note: custom filters is not applicable since I read patterns from database there is no way to correlate the filters with the routes. Improvement antInclude support for case insensitive patterns antIncude patterns are case sensitive. I need a case insensitive file matching pattern with file and ftp components.note: custom filters is not applicable since I read patterns from database there is no way to correlate the filters with the routes.
CAMEL-4962 Add messageId as key for MDC logging MessageId is handy for transactional messages. So we should offer that for MDC logging Improvement Add messageId as key for MDC logging MessageId is handy for transactional messages. So we should offer that for MDC logging
CAMEL-4961 Make TX error handler log more details such as redelivery and messageId, which allows people to better correlate messages If you use a JMS route, and have transacted=true, then messages may get redelivered from the JMS broker. And currently it can be a bit tricky to see from the logs that this is a redelivered message from the JMS broker. And be able to correlate message logs, to previous message attempts.We need to improve this so the TransctedErrorHandler can detect the JMS redelivered message, and log that its a redelivery.Likewise we need to log both MessageId and Exchange, which allows people to correlate the messages.the MessageID will be the same for redelivered messages. While ExchangeID will always be unique.So for example if you redeliver the same message 5 times, you get (example simplified){code}1: redelivered=false, messageId=123, exchangeId=5012: redelivered=true, messageId=123, exchangeId=5023: redelivered=true, messageId=123, exchangeId=5084: redelivered=true, messageId=123, exchangeId=5095: redelivered=true, messageId=123, exchangeId=5126: redelivered=true, messageId=123, exchangeId=513{code}The exchangeId is always a new UUID created, and it can jump in sequence, and hence why i showed that in the example above. Improvement Make TX error handler log more details such as redelivery and messageId, which allows people to better correlate messages If you use a JMS route, and have transacted=true, then messages may get redelivered from the JMS broker. And currently it can be a bit tricky to see from the logs that this is a redelivered message from the JMS broker. And be able to correlate message logs, to previous message attempts.We need to improve this so the TransctedErrorHandler can detect the JMS redelivered message, and log that its a redelivery.Likewise we need to log both MessageId and Exchange, which allows people to correlate the messages.the MessageID will be the same for redelivered messages. While ExchangeID will always be unique.So for example if you redeliver the same message 5 times, you get (example simplified){code}1: redelivered=false, messageId=123, exchangeId=5012: redelivered=true, messageId=123, exchangeId=5023: redelivered=true, messageId=123, exchangeId=5084: redelivered=true, messageId=123, exchangeId=5095: redelivered=true, messageId=123, exchangeId=5126: redelivered=true, messageId=123, exchangeId=513{code}The exchangeId is always a new UUID created, and it can jump in sequence, and hence why i showed that in the example above.
CAMEL-4958 camel-jms - JmsConsumer make it less verbose logging in case of an exception or TX rollback When using a JMS route, and an exception occurs, then you get a WARN logging from Spring JMS that there is no error handler configured.And you get the stacktrace etc.{code}2012-01-31 07:27:51,628 [sConsumer[okay]] WARN  ultJmsMessageListenerContainer - Execution of JMS message listener failed, and no ErrorHandler has been set.org.apache.camel.RuntimeCamelException: ...{code}However Camel itself will also by default log the stacktrace, so we have it logged twice. We should make this less verbose.And allow end users to more easily customize the logging level and/or whether stracktraces should be included. Improvement camel-jms - JmsConsumer make it less verbose logging in case of an exception or TX rollback When using a JMS route, and an exception occurs, then you get a WARN logging from Spring JMS that there is no error handler configured.And you get the stacktrace etc.{code}2012-01-31 07:27:51,628 [sConsumer[okay]] WARN  ultJmsMessageListenerContainer - Execution of JMS message listener failed, and no ErrorHandler has been set.org.apache.camel.RuntimeCamelException: ...{code}However Camel itself will also by default log the stacktrace, so we have it logged twice. We should make this less verbose.And allow end users to more easily customize the logging level and/or whether stracktraces should be included.
CAMEL-4956 camel-beanio component This looks like a good library for CSV, fixed, XML mappingshttp://beanio.org/ New Feature camel-beanio component This looks like a good library for CSV, fixed, XML mappingshttp://beanio.org/
CAMEL-4953 Add interface to allow processors in routes to be notified that a shutdown is in progress This will allow EIPs and processors to be aware that a shutdown is in progress, so they can do any custom work they may need to do before hand.For example stateful EIPs such as the aggregator, may want to force completion of its current aggregated messages. Improvement Add interface to allow processors in routes to be notified that a shutdown is in progress This will allow EIPs and processors to be aware that a shutdown is in progress, so they can do any custom work they may need to do before hand.For example stateful EIPs such as the aggregator, may want to force completion of its current aggregated messages.
CAMEL-4951 Upgrade com.amazonaws:aws-java-sdk 1.2.12 -> 1.3 I need aws 1.3 in order to add dynamodb support to Camel. Improvement Upgrade com.amazonaws:aws-java-sdk 1.2.12 -> 1.3 I need aws 1.3 in order to add dynamodb support to Camel.
CAMEL-4950 RedeliverErrorHandler - Should break out earlier if CamelContext is shutting down Redelivery error handler, will keep attempting redeliveries, also during graceful shutdown.We should improve this, so it detects the shutdown action, and breaks out earlier.See CAMEL-4949 Improvement RedeliverErrorHandler - Should break out earlier if CamelContext is shutting down Redelivery error handler, will keep attempting redeliveries, also during graceful shutdown.We should improve this, so it detects the shutdown action, and breaks out earlier.See CAMEL-4949
CAMEL-4946 Management - Get performance statistics as XML per CamelContext or per Route Currently its harder for tooling such as JConsole, Camel Karaf Shell or others to gather performance statistics of a CamelContext and its routes, as you will have to use the JMX API and loop each route, and gather processors, and associate the processors with the route etc. And then use the fine grained attributes on the ManagedProcessorMBean to get the performance statistics.This is a bit cumbersome, and also very chatty API calls, especially if the JMX is remoting, and it makes it slower to gather stats.As we got XML outputs for bulk of data such as routes etc, we should have a single API call to get the full stats for the entire CamelContext, or per route basis. Using XML as return type, makes it much easier for any kind of tooling and language to use the data. Instead of tying to use the JMX OpenMBean structure which is Java only based.SIDENOTE START:For Camel 3.0 we should offer a JSON output with a REST based management API as well. But that would require a possible new camel-core-management component which as a JSON library in use such as Jackson.SIDENOTE END: Improvement Management - Get performance statistics as XML per CamelContext or per Route Currently its harder for tooling such as JConsole, Camel Karaf Shell or others to gather performance statistics of a CamelContext and its routes, as you will have to use the JMX API and loop each route, and gather processors, and associate the processors with the route etc. And then use the fine grained attributes on the ManagedProcessorMBean to get the performance statistics.This is a bit cumbersome, and also very chatty API calls, especially if the JMX is remoting, and it makes it slower to gather stats.As we got XML outputs for bulk of data such as routes etc, we should have a single API call to get the full stats for the entire CamelContext, or per route basis. Using XML as return type, makes it much easier for any kind of tooling and language to use the data. Instead of tying to use the JMX OpenMBean structure which is Java only based.SIDENOTE START:For Camel 3.0 we should offer a JSON output with a REST based management API as well. But that would require a possible new camel-core-management component which as a JSON library in use such as Jackson.SIDENOTE END:
CAMEL-4944 Add support of marshal/unmarshal JSON with Google Gson library Added support of fresh version Google Gson. Improvement Add support of marshal/unmarshal JSON with Google Gson library Added support of fresh version Google Gson.
CAMEL-4943 Upgrade to Apache Shiro 1.2.0 Apache Shiro 1.2.0 has been released, and its an osgi bundle now. Task Upgrade to Apache Shiro 1.2.0 Apache Shiro 1.2.0 has been released, and its an osgi bundle now.
CAMEL-4940 camel archetypes - Add camel-test, camel-test-spring, camel-test-blueprint as test scoped to the generated pom.xml We should ensure the Camel maven archetypes have a pre configured camel-test kit appropriate to its type: spring, java, blueprint etc.Likewise we should have a src/test/java and src/test/resources directory out of the box as well. So the project is all setup. Improvement camel archetypes - Add camel-test, camel-test-spring, camel-test-blueprint as test scoped to the generated pom.xml We should ensure the Camel maven archetypes have a pre configured camel-test kit appropriate to its type: spring, java, blueprint etc.Likewise we should have a src/test/java and src/test/resources directory out of the box as well. So the project is all setup.
CAMEL-4939 camel-test - Move CamelSpringTestSupport to a new camel-test-spring component See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Add-camel-test-spring-component-tp5281207p5281207.htmlThis allows camel-test to be plain Java based without dragging in Spring JARs.And for people using Spring, they can use the new camel-test-spring component. Improvement camel-test - Move CamelSpringTestSupport to a new camel-test-spring component See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Add-camel-test-spring-component-tp5281207p5281207.htmlThis allows camel-test to be plain Java based without dragging in Spring JARs.And for people using Spring, they can use the new camel-test-spring component.
CAMEL-4936 camel-test-blueprint - Add support for using @EndpointInject et all in the unit test class It would be good to be abel to use the @EndpointInject, and @Produce etc. annotations in the end user created unit test classes, that extends CamelBlueprintTestSupport. This is supported by camel-test and camel-testng already. Improvement camel-test-blueprint - Add support for using @EndpointInject et all in the unit test class It would be good to be abel to use the @EndpointInject, and @Produce etc. annotations in the end user created unit test classes, that extends CamelBlueprintTestSupport. This is supported by camel-test and camel-testng already.
CAMEL-4934 CamelBeanPostProcessor - Move from camel-spring to camel-core to make it reuseable by others such as camel-blueprint and camel-test The CamelBeanPostProcessor is currently in camel-spring for historical reasons. We should move it to camel-core, to let it be reusable by camel-test and camel-blueprint as well.This will also ensure that using CamelTestSupport you can use the Camel @EndpointInject, @Produce etc annotations in your unit test classes. Improvement CamelBeanPostProcessor - Move from camel-spring to camel-core to make it reuseable by others such as camel-blueprint and camel-test The CamelBeanPostProcessor is currently in camel-spring for historical reasons. We should move it to camel-core, to let it be reusable by camel-test and camel-blueprint as well.This will also ensure that using CamelTestSupport you can use the Camel @EndpointInject, @Produce etc annotations in your unit test classes.
CAMEL-4933 camel-test - CamelTestSupport should not have any Spring dependency The CamelTestSupport has dependency on Spring JARs. It should not. People should use the CamelSpringTestSupport if they use Spring for unit testing.However Spring has a bean post processor logic that will IoC beans with members that has been annotated with @EndpointInject, @Produce, @Consume etc.This is no longer supported, when using CamelTestSupport as that requires Spring JAR at runtime. Improvement camel-test - CamelTestSupport should not have any Spring dependency The CamelTestSupport has dependency on Spring JARs. It should not. People should use the CamelSpringTestSupport if they use Spring for unit testing.However Spring has a bean post processor logic that will IoC beans with members that has been annotated with @EndpointInject, @Produce, @Consume etc.This is no longer supported, when using CamelTestSupport as that requires Spring JAR at runtime.
CAMEL-4931 Improve column display in camel:route-list and similar Karaf commands Camel's shell extensions for Karaf print poorly-formatted results in some cases (particularly camel:route-list), impeding legibility and ease of use.  It appears that the fields are right-padded with spaces to 18 columns regardless of maximum actual column length.  I understand there's ultimately a limit to the width of the console.  However, if the width of the console can be determined, it should be filled appropriately; middle truncation might be an option for excessively long fields (e.g.: "thisIsAVeryLongField...ThatHadToBePartiallyTruncated").  If the console width cannot be determined, it may still be acceptable to scan for the longest field and set the entire column to its width in the interest of uniform appearance.   Improvement Improve column display in camel:route-list and similar Karaf commands Camel's shell extensions for Karaf print poorly-formatted results in some cases (particularly camel:route-list), impeding legibility and ease of use.  It appears that the fields are right-padded with spaces to 18 columns regardless of maximum actual column length.  I understand there's ultimately a limit to the width of the console.  However, if the width of the console can be determined, it should be filled appropriately; middle truncation might be an option for excessively long fields (e.g.: "thisIsAVeryLongField...ThatHadToBePartiallyTruncated").  If the console width cannot be determined, it may still be acceptable to scan for the longest field and set the entire column to its width in the interest of uniform appearance.  
CAMEL-4928 Async API support by the Timer component It would be great to have timer component support asynchronous API.Such a feature can be useful when timer component generates events which must be processed by multiple threads. Current implementation of the timer component makes a blocking call so the usage of thread pools hardly possible to process multiple timer event simultaneously.{code:title=Sample}from("timer:start")    .threads(1, 5)    .to("bean:very-long-operation");{code} Improvement Async API support by the Timer component It would be great to have timer component support asynchronous API.Such a feature can be useful when timer component generates events which must be processed by multiple threads. Current implementation of the timer component makes a blocking call so the usage of thread pools hardly possible to process multiple timer event simultaneously.{code:title=Sample}from("timer:start")    .threads(1, 5)    .to("bean:very-long-operation");{code}
CAMEL-4919 Testing headers in multiple messages  The need is something similar to expectedBodiesReceivedInAnyOrder applied to headers :I know that a given endpoint will receive 3 messages in any order, and I need to test ONE header in each of these messages.I wrote :getMockEndpoint("mock:zipSHP").expectedHeaderReceived("zippedFile", "001.zip");getMockEndpoint("mock:zipSHP").expectedHeaderReceived("zippedFile", "002.zip");getMockEndpoint("mock:zipSHP").expectedHeaderReceived("zippedFile", "003.zip");for the route :for("file://filesToBeZipped/").to("bean:my.bean.ZipperBean").log("Zipped : ...");The endpoint effectively received the three messages (the results of three ZIP operations) but the test failed saying that the first message header was "003.zip" and not the expected "001.zip".  Improvement Testing headers in multiple messages  The need is something similar to expectedBodiesReceivedInAnyOrder applied to headers :I know that a given endpoint will receive 3 messages in any order, and I need to test ONE header in each of these messages.I wrote :getMockEndpoint("mock:zipSHP").expectedHeaderReceived("zippedFile", "001.zip");getMockEndpoint("mock:zipSHP").expectedHeaderReceived("zippedFile", "002.zip");getMockEndpoint("mock:zipSHP").expectedHeaderReceived("zippedFile", "003.zip");for the route :for("file://filesToBeZipped/").to("bean:my.bean.ZipperBean").log("Zipped : ...");The endpoint effectively received the three messages (the results of three ZIP operations) but the test failed saying that the first message header was "003.zip" and not the expected "001.zip". 
CAMEL-4917 To avoid to confuse end users, a different name should be used for output position of CSV and not position as now (pos vs postion) When we generates a CSV file from the model, it is perfectly possible to use an order which is different from the one we have used to read the CSV in input. Currently, we use pos (for input positing) and position (for output csv generation)We suggest to use --> outputPos (when output position is different) Improvement To avoid to confuse end users, a different name should be used for output position of CSV and not position as now (pos vs postion) When we generates a CSV file from the model, it is perfectly possible to use an order which is different from the one we have used to read the CSV in input. Currently, we use pos (for input positing) and position (for output csv generation)We suggest to use --> outputPos (when output position is different)
CAMEL-4914 camel-test-blueprint - Make it possible for end users to easier specify the blueprint XML file to use for testing In the new camel-test-blueprint, you need to return a Collection<URL> which is really cumbersome for end users, who just want to specify to use "META-INF/blueprint/myBlueprint.xml" as the test file.Or some other file on the classpath.So having some nicer way (possible both or whatever).Also we should have better reporting if the file is not found. Like a FileNotFoundException with details about the file not found. Improvement camel-test-blueprint - Make it possible for end users to easier specify the blueprint XML file to use for testing In the new camel-test-blueprint, you need to return a Collection<URL> which is really cumbersome for end users, who just want to specify to use "META-INF/blueprint/myBlueprint.xml" as the test file.Or some other file on the classpath.So having some nicer way (possible both or whatever).Also we should have better reporting if the file is not found. Like a FileNotFoundException with details about the file not found.
CAMEL-4912 Starting CamelContext should start routes after the CamelContext state has been set to started When routes are started, they may poll and and intake new messages, that gets routed in the Camel routes.So its best that the CamelContext state has been changed from starting to started. To indicate the CamelContext has been fully started.Otherwise you may have a odd race condition, that you process a new message, while the state of CamelContext is starting.For example as we have with the SedaConsumer that in CAMEL-4911 Improvement Starting CamelContext should start routes after the CamelContext state has been set to started When routes are started, they may poll and and intake new messages, that gets routed in the Camel routes.So its best that the CamelContext state has been changed from starting to started. To indicate the CamelContext has been fully started.Otherwise you may have a odd race condition, that you process a new message, while the state of CamelContext is starting.For example as we have with the SedaConsumer that in CAMEL-4911
CAMEL-4911 SedaConsumer - Should not poll if CamelContext is starting If you startup Camel with many routes, which mean starting Camel may take some seconds or whatnot, and then SedaConsumer may poll messages, while CamelContext is starting. It should avoid polling until CamelContext is fully started. Improvement SedaConsumer - Should not poll if CamelContext is starting If you startup Camel with many routes, which mean starting Camel may take some seconds or whatnot, and then SedaConsumer may poll messages, while CamelContext is starting. It should avoid polling until CamelContext is fully started.
CAMEL-4910 Upgrade saxon version to 9.3.0.11 We need to pick up the saxon 9.3.0.11 with some bug fixing and enhancements. Task Upgrade saxon version to 9.3.0.11 We need to pick up the saxon 9.3.0.11 with some bug fixing and enhancements.
CAMEL-4909 Correct camel-twitter unit test account tokens Previous commits accidentally included authentication tokens from a private account.  Please update to a test account's tokens using the provided patch.  Thanks! Task Correct camel-twitter unit test account tokens Previous commits accidentally included authentication tokens from a private account.  Please update to a test account's tokens using the provided patch.  Thanks!
CAMEL-4906 Allow to configure management name using a pattern, such as to enforce a fixed name When Camel enlist itself in JMX it uses a auto assigning naming strategy, which can detect clashes (name already exist) and then re-calculate a new name, finding a free name. This ensures you can deploy multiple Camel apps in the same JVM, whether you run in Tomcat, JEE, OSGi etc.However for some people they want to have full control of the JMX name.For OSGi users in particular, as by default Camel uses the bundle-id as part of the JMX name. So the JMX name can change, for example if you restart the server (and have deleted the data directory) so bundle-ids is re-assigned by the OSGi container.Or that you uninstall and install the app again. Then the old bundle-id is never reused.We could possible add a managementName attribute to <camelContext>with a syntax pattern, so end user can configure this in the XML as well, fairly easily<camelContext id="foo" managementNamePattern="myFoo">...</camelContext>eg the managementName is a new attribute, where you can use a syntaxto configure it with tokens- #name# - the camel context name- #camelId# - same as #name#- #bundleId# - the bundle id- #symbolicName# - the bundle symbolic name- #counter# - an incrementing counter, used to remedy clashes by finding a new free nameThen they can assemble their naming as they want.The osgi default naming pattern could be, which it is hardcoded as currently:#bundleId#-#name#In the example above it uses a fixed name "myFoo" which then must be unique in the JVM New Feature Allow to configure management name using a pattern, such as to enforce a fixed name When Camel enlist itself in JMX it uses a auto assigning naming strategy, which can detect clashes (name already exist) and then re-calculate a new name, finding a free name. This ensures you can deploy multiple Camel apps in the same JVM, whether you run in Tomcat, JEE, OSGi etc.However for some people they want to have full control of the JMX name.For OSGi users in particular, as by default Camel uses the bundle-id as part of the JMX name. So the JMX name can change, for example if you restart the server (and have deleted the data directory) so bundle-ids is re-assigned by the OSGi container.Or that you uninstall and install the app again. Then the old bundle-id is never reused.We could possible add a managementName attribute to <camelContext>with a syntax pattern, so end user can configure this in the XML as well, fairly easily<camelContext id="foo" managementNamePattern="myFoo">...</camelContext>eg the managementName is a new attribute, where you can use a syntaxto configure it with tokens- #name# - the camel context name- #camelId# - same as #name#- #bundleId# - the bundle id- #symbolicName# - the bundle symbolic name- #counter# - an incrementing counter, used to remedy clashes by finding a new free nameThen they can assemble their naming as they want.The osgi default naming pattern could be, which it is hardcoded as currently:#bundleId#-#name#In the example above it uses a fixed name "myFoo" which then must be unique in the JVM
CAMEL-4903 ThreadName pattern should use #word# tokens to avoid clash with property placeholder tokens, as its not the same We should use #camelId# instead of ${camelId} as the latter is a common property placeholder token by spring etc. Improvement ThreadName pattern should use #word# tokens to avoid clash with property placeholder tokens, as its not the same We should use #camelId# instead of ${camelId} as the latter is a common property placeholder token by spring etc.
CAMEL-4876 Add support for a "back-off multiplier" capability to the ScheduledPollConsumer Usually files or tables are only updated once a day or even once a week in a batch like fashion. When this happens its of course important to process as fast as possible (using the default 500 ms delay), but most of the time when there is no activity, polling every 500 ms. is not necessary and takes system resources when running many polling routes on the same box.   I was thinking that the ScheduledPollConsumer could be more dynamic by introducing a new option eg. backoffMultiplier, that resets the scheduler to maxDelay if a poll results in no exchange (maybe after x polls with no results). The same goes if a poll results in an exchange, and the delay currently is at backoffMultiplier the scheduler is reset to the original delay thereby polling more agresive again. Original Camel User Forum request : http://camel.465427.n5.nabble.com/DISCUSS-Dynamic-ScheduledPollConsumer-td5129231.html New Feature Add support for a "back-off multiplier" capability to the ScheduledPollConsumer Usually files or tables are only updated once a day or even once a week in a batch like fashion. When this happens its of course important to process as fast as possible (using the default 500 ms delay), but most of the time when there is no activity, polling every 500 ms. is not necessary and takes system resources when running many polling routes on the same box.   I was thinking that the ScheduledPollConsumer could be more dynamic by introducing a new option eg. backoffMultiplier, that resets the scheduler to maxDelay if a poll results in no exchange (maybe after x polls with no results). The same goes if a poll results in an exchange, and the delay currently is at backoffMultiplier the scheduler is reset to the original delay thereby polling more agresive again. Original Camel User Forum request : http://camel.465427.n5.nabble.com/DISCUSS-Dynamic-ScheduledPollConsumer-td5129231.html
CAMEL-4875 The package scan for RouteBuilder classes should not include anonymous inner classes We should skip anonymous RouteBuilder classes. For example if people add routes from an unit test, just to have a special route in the test method. You may get package scan issues, such as{code}Tests in error: testCamelRoute(foo.CamelContextXmlTest): Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'foo.CamelContextXmlTest$1': Unsatisfied dependency expressed through constructor argument with index 0 of type [foo.CamelContextXmlTest]: : No matching bean of type [foo.CamelContextXmlTest] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [foo.CamelContextXmlTest] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}{code} Improvement The package scan for RouteBuilder classes should not include anonymous inner classes We should skip anonymous RouteBuilder classes. For example if people add routes from an unit test, just to have a special route in the test method. You may get package scan issues, such as{code}Tests in error: testCamelRoute(foo.CamelContextXmlTest): Error creating bean with name 'template': Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'foo.CamelContextXmlTest$1': Unsatisfied dependency expressed through constructor argument with index 0 of type [foo.CamelContextXmlTest]: : No matching bean of type [foo.CamelContextXmlTest] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No matching bean of type [foo.CamelContextXmlTest] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}{code}
CAMEL-4874 camel archetypes - The Java and Scala archetypes should not have Spring included The maven archetype for java and scala, include spring pieces. We should remove those, as there is a archetype for spring, people can use instead. Improvement camel archetypes - The Java and Scala archetypes should not have Spring included The maven archetype for java and scala, include spring pieces. We should remove those, as there is a archetype for spring, people can use instead.
CAMEL-4873 camel-twitter: Twitter4J response objects as Exchange body camel-twitter originally used its own Class(es) as the Exchange body.  Instead, allow it to simply reuse the Twitter4J response objects (Status, Tweet, DirectMessage, etc.).  This will provide applications the complete set of fields and require no maintenance. Improvement camel-twitter: Twitter4J response objects as Exchange body camel-twitter originally used its own Class(es) as the Exchange body.  Instead, allow it to simply reuse the Twitter4J response objects (Status, Tweet, DirectMessage, etc.).  This will provide applications the complete set of fields and require no maintenance.
CAMEL-4869 camel-ahc - Provide easier realm configuration possibility It would be nice if the authentication realm object could be configured in the same easy way as the rest of the clientConfig.Something like:{noformat}clientConfig.realm.type=Digest&clientConfig.realm.user=someUser&clientConfig.realm.password=somePass&clientConfig.realm.preemtive=true{noformat}etcToday there is really no option other than using the AHC RealmBuilder directly (which is more cumbersome as the actual values are externalized - and thus plumbing is needed to read these, build a realm, and set it on the component. Improvement camel-ahc - Provide easier realm configuration possibility It would be nice if the authentication realm object could be configured in the same easy way as the rest of the clientConfig.Something like:{noformat}clientConfig.realm.type=Digest&clientConfig.realm.user=someUser&clientConfig.realm.password=somePass&clientConfig.realm.preemtive=true{noformat}etcToday there is really no option other than using the AHC RealmBuilder directly (which is more cumbersome as the actual values are externalized - and thus plumbing is needed to read these, build a realm, and set it on the component.
CAMEL-4867 Create camel-twitter feature We need to provide a camel-twitter feature for loading camel-twitter module in karaf. Task Create camel-twitter feature We need to provide a camel-twitter feature for loading camel-twitter module in karaf.
CAMEL-4865 Camel archetypes - Add camel-test at test scope in generated pom.xml We should add camel-test as dependency to the archetypes, so its easier for end users to get up and testing.There is a few which already do that. Improvement Camel archetypes - Add camel-test at test scope in generated pom.xml We should add camel-test as dependency to the archetypes, so its easier for end users to get up and testing.There is a few which already do that.
CAMEL-4864 Upgrade to Karaf 2.2.5 We should upgrade to Karaf 2.2.5 Task Upgrade to Karaf 2.2.5 We should upgrade to Karaf 2.2.5
CAMEL-4856 Documentation Bug Online Netty docs do not show new receiveBufferSizePredictor optionhttp://camel.apache.org/netty.html Task Documentation Bug Online Netty docs do not show new receiveBufferSizePredictor optionhttp://camel.apache.org/netty.html
CAMEL-4855 Add wiki page for camel-mina2 component Checkout the instructions here:http://camel.apache.org/add-new-component-guide.html Sub-task Add wiki page for camel-mina2 component Checkout the instructions here:http://camel.apache.org/add-new-component-guide.html
CAMEL-4853 camel-mina - Make it easier to use a custom thread pool for the consumer It should be easier to use a custom thread pool for the mina consumer, in case you use it in sync mode, where the consumer thread would then be synchronous, and thus take up a thread. So in case you put load on the mina consumer, it will use up the default thread pool size of 10 threads.We should add documentation in the wiki, how to use a custom thread pool / and pool profile.See nabblehttp://camel.465427.n5.nabble.com/inflight-exchange-and-queue-of-apache-camel-tp5112396p5112396.html Improvement camel-mina - Make it easier to use a custom thread pool for the consumer It should be easier to use a custom thread pool for the mina consumer, in case you use it in sync mode, where the consumer thread would then be synchronous, and thus take up a thread. So in case you put load on the mina consumer, it will use up the default thread pool size of 10 threads.We should add documentation in the wiki, how to use a custom thread pool / and pool profile.See nabblehttp://camel.465427.n5.nabble.com/inflight-exchange-and-queue-of-apache-camel-tp5112396p5112396.html
CAMEL-4848 Properties component - Prefix and suffix tokens which has been quoted should not be skipped The prefix and suffix tokens from the property placeholders, which has been quoted should be skipped. As it should be regarded as literal.For example:{code}"'{{' + someStuffHere + '}}'"{code}For example as part of a groovy script. Improvement Properties component - Prefix and suffix tokens which has been quoted should not be skipped The prefix and suffix tokens from the property placeholders, which has been quoted should be skipped. As it should be regarded as literal.For example:{code}"'{{' + someStuffHere + '}}'"{code}For example as part of a groovy script.
CAMEL-4847 Upgrade org.ops4j.pax.exam 1.2.4 -> 2.3.0 Pax Exam 2.3.0 is releases. At present we use 1.2.4. We should consider to upgrade to this version.They fixed 104 issues since 1.2.4 was released.Query: project = PAXEXAM AND fixVersion > '1.2.4' AND fixVersion <= '2.3.0' Task Upgrade org.ops4j.pax.exam 1.2.4 -> 2.3.0 Pax Exam 2.3.0 is releases. At present we use 1.2.4. We should consider to upgrade to this version.They fixed 104 issues since 1.2.4 was released.Query: project = PAXEXAM AND fixVersion > '1.2.4' AND fixVersion <= '2.3.0'
CAMEL-4844 Resolve property placeholders in embedded expressions in the route when creating runtime route See CAMEL-4843The embedded simple expression in the route definition, should also support property placeholders, to be resolved before the runtime route is created. Just as we already do for the definitions.This will also fix that CAMEL-4843 can be done as it was previously done. Before the simple language was improved to do syntax parsing. Improvement Resolve property placeholders in embedded expressions in the route when creating runtime route See CAMEL-4843The embedded simple expression in the route definition, should also support property placeholders, to be resolved before the runtime route is created. Just as we already do for the definitions.This will also fix that CAMEL-4843 can be done as it was previously done. Before the simple language was improved to do syntax parsing.
CAMEL-4839 Ability to specify the cache level on JMS reply to queue I'm trying to use Camel (v 2.6.0) JMS Request/Reply with Websphere 7 using Websphere MQ.  I'm successfully able to put the request message onto the queue using the following URI: jms:queue:inboundQueue?connectionFactory=#connectionFactory&taskExecutor=#taskExecutor&transactionManager=#transactionManager&cacheLevelName=CACHE_NONE&replyTo=outboundQueue&requestTimeout=120000 Note: I have to use cacheLevelName=CACHE_NONE in order for this to work on Websphere. However, when Camel creates the PersistentQueueMessageListenerContainer to read the reply message, it is hard coding the cache level to CACHE_SESSION (see PersistentQueueReplyManager.java line 192).  What happens is that Camel is successfully able to read the reply off the queue, but then spits out the following error repeatedly: 23 Dec 2011 09:23:32,427|||WorkManager.DefaultWorkManager : 3||WARN |org.springframework.jms.listener.DefaultMessageListenerContainer|Setup of JMS message listener invoker failed for destination 'outboundQueue' - trying to recover. Cause: Connection closed I believe this is due to the PersistentQueueMessageListenerContainer using a cache level of CACHE_SESSION instead of CACHE_NONE. Can Camel be enhanced to have the ability to set the cache level on the reply queue?  Improvement Ability to specify the cache level on JMS reply to queue I'm trying to use Camel (v 2.6.0) JMS Request/Reply with Websphere 7 using Websphere MQ.  I'm successfully able to put the request message onto the queue using the following URI: jms:queue:inboundQueue?connectionFactory=#connectionFactory&taskExecutor=#taskExecutor&transactionManager=#transactionManager&cacheLevelName=CACHE_NONE&replyTo=outboundQueue&requestTimeout=120000 Note: I have to use cacheLevelName=CACHE_NONE in order for this to work on Websphere. However, when Camel creates the PersistentQueueMessageListenerContainer to read the reply message, it is hard coding the cache level to CACHE_SESSION (see PersistentQueueReplyManager.java line 192).  What happens is that Camel is successfully able to read the reply off the queue, but then spits out the following error repeatedly: 23 Dec 2011 09:23:32,427|||WorkManager.DefaultWorkManager : 3||WARN |org.springframework.jms.listener.DefaultMessageListenerContainer|Setup of JMS message listener invoker failed for destination 'outboundQueue' - trying to recover. Cause: Connection closed I believe this is due to the PersistentQueueMessageListenerContainer using a cache level of CACHE_SESSION instead of CACHE_NONE. Can Camel be enhanced to have the ability to set the cache level on the reply queue? 
CAMEL-4837 camel-itest - Should use dynamic port numbers in unit tests We should use dynamic port number assignments in tests\camel-itest.This avoids CI servers to fail withjava.net.BindException: Address already in use	at sun.nio.ch.Net.bind(Native Method) Task camel-itest - Should use dynamic port numbers in unit tests We should use dynamic port number assignments in tests\camel-itest.This avoids CI servers to fail withjava.net.BindException: Address already in use	at sun.nio.ch.Net.bind(Native Method)
CAMEL-4836 Upgrade smack version to 3.2.1 As the smack 3.2.1 maven artifacts are in the maven central, we need to think about upgrading the version to get ride of the dependency of other maven repo. Task Upgrade smack version to 3.2.1 As the smack 3.2.1 maven artifacts are in the maven central, we need to think about upgrading the version to get ride of the dependency of other maven repo.
CAMEL-4835 camel-cxfrs should support to look up the CXF message from the camel message header It is useful for the user to lookup the CXF message instance from camel message header. Improvement camel-cxfrs should support to look up the CXF message from the camel message header It is useful for the user to lookup the CXF message instance from camel message header.
CAMEL-4834 camel properties component should support not specify the file location If we don't specify the file location of the properties component, it will try to load the properties from the system environment. Improvement camel properties component should support not specify the file location If we don't specify the file location of the properties component, it will try to load the properties from the system environment.
CAMEL-4829 Set the bus on the exchange in case the CXF interceptor needs it CXF interceptor need to access the Bus instance from the exchange, it is important that we the bus instance on the exchange when sending the Camel message to CXF when Camel is deployed into container.  Improvement Set the bus on the exchange in case the CXF interceptor needs it CXF interceptor need to access the Bus instance from the exchange, it is important that we the bus instance on the exchange when sending the Camel message to CXF when Camel is deployed into container. 
CAMEL-4826 Tech edits of JavaDoc and other code comments -- lets -> (let's, allow, {}) Partial conversion of "lets do..." to "let's do...", "allows for doing", or "do..." as appropriate, and associated other nitpicks found.  "Let's" retained more where the code is part of an example or tutorial or if it's a matter-of-opinion on how to implement. Improvement Tech edits of JavaDoc and other code comments -- lets -> (let's, allow, {}) Partial conversion of "lets do..." to "let's do...", "allows for doing", or "do..." as appropriate, and associated other nitpicks found.  "Let's" retained more where the code is part of an example or tutorial or if it's a matter-of-opinion on how to implement.
CAMEL-4823 Log EIP - Check if it should log first before evaluating exchange In the log EIP only evaluate the log message if really needed, eg shouldLog returns true Improvement Log EIP - Check if it should log first before evaluating exchange In the log EIP only evaluate the log message if really needed, eg shouldLog returns true
CAMEL-4822 Enhance JdbcMessageIdRepository so that custom tables and SQL can be easily used The existing JdbcMessageIdRepository is tied to a particular table (CAMEL_MESSAGEPROCESSED) and includes an INSERT statement that is incompatible with MS SQL Server.  The design of the class makes it difficult to change the table name and related SQL statements.  In some environments, table names and structures are strictly controlled and it would be nice to be able to change these things easily.  It would also be nice for this to work on a variety of databases, including MS SQL Server.I've submitted a patch that refactors the design of the class so that it can be easily extended.  An abstract base class called AbstractJDBCIdempotentRepository has been introduced that takes care of the plumbing required to query, insert and delete.  Classes that extend this abstract base class need only implement the query, insert, and delete operations.  This makes it very easy to customize an idempotent repository for a particular environment.The existing JdbcMessageIdRepository has been changed to extend the AbstractJDBCIdempotentRepository and has retained the SQL statements present in the prior version.  A patch is attached to this JIRA and the existing unit test passes after applying this patch.  Improvement Enhance JdbcMessageIdRepository so that custom tables and SQL can be easily used The existing JdbcMessageIdRepository is tied to a particular table (CAMEL_MESSAGEPROCESSED) and includes an INSERT statement that is incompatible with MS SQL Server.  The design of the class makes it difficult to change the table name and related SQL statements.  In some environments, table names and structures are strictly controlled and it would be nice to be able to change these things easily.  It would also be nice for this to work on a variety of databases, including MS SQL Server.I've submitted a patch that refactors the design of the class so that it can be easily extended.  An abstract base class called AbstractJDBCIdempotentRepository has been introduced that takes care of the plumbing required to query, insert and delete.  Classes that extend this abstract base class need only implement the query, insert, and delete operations.  This makes it very easy to customize an idempotent repository for a particular environment.The existing JdbcMessageIdRepository has been changed to extend the AbstractJDBCIdempotentRepository and has retained the SQL statements present in the prior version.  A patch is attached to this JIRA and the existing unit test passes after applying this patch. 
CAMEL-4821 API problems in org.apache.camel.util.OgnlHelper Hi, the OgnlHelper class:http://svn.apache.org/viewvc/camel/trunk/camel-core/src/main/java/org/apache/camel/util/OgnlHelper.java?annotate=1145881appears to have a couple of issues with it:1.)  There's a nonsensically named "isInvalidValidOgnlExpression(String expression)" method at line #59, I'm not sure why it's needed because there is an isValidOgnlExpression() just above it, the negative of which can be used to accomplish to goal of isInvalidValidOgnlExpression.  If desired to retain this method, best to leave a comment why it's not named isInvalidOgnlExpression and why the negative of isValidOgnlExpression() is insufficient.  Otherwise, this method should be deprecated, either with a new isInvalidOgnlExpression in its place that does the same thing or with no replacement (i.e., users should just use !isValidOgnlExpression().2.) The method "isNullSafeOperator()" at line #89 says it checks whether the "Elvis" operator is being used -- but the code is just checking for a "?" According to here: https://docs.google.com/Doc?docid=ddb3zt39_78frdf87dc&hl=en the Elvis operator is the binary "?:" token (not the ternary a = (b > c) ? d : e one).  Perhaps a change is needed to the logic to check for "?:" or an update to the JavaDoc for this method that it's not the Elvis operator being checked for. Task API problems in org.apache.camel.util.OgnlHelper Hi, the OgnlHelper class:http://svn.apache.org/viewvc/camel/trunk/camel-core/src/main/java/org/apache/camel/util/OgnlHelper.java?annotate=1145881appears to have a couple of issues with it:1.)  There's a nonsensically named "isInvalidValidOgnlExpression(String expression)" method at line #59, I'm not sure why it's needed because there is an isValidOgnlExpression() just above it, the negative of which can be used to accomplish to goal of isInvalidValidOgnlExpression.  If desired to retain this method, best to leave a comment why it's not named isInvalidOgnlExpression and why the negative of isValidOgnlExpression() is insufficient.  Otherwise, this method should be deprecated, either with a new isInvalidOgnlExpression in its place that does the same thing or with no replacement (i.e., users should just use !isValidOgnlExpression().2.) The method "isNullSafeOperator()" at line #89 says it checks whether the "Elvis" operator is being used -- but the code is just checking for a "?" According to here: https://docs.google.com/Doc?docid=ddb3zt39_78frdf87dc&hl=en the Elvis operator is the binary "?:" token (not the ternary a = (b > c) ? d : e one).  Perhaps a change is needed to the logic to check for "?:" or an update to the JavaDoc for this method that it's not the Elvis operator being checked for.
CAMEL-4820 Javadoc editorial fixes to org.apache.camel.util package Various minor edits. Improvement Javadoc editorial fixes to org.apache.camel.util package Various minor edits.
CAMEL-4814 Use dynamic port numbers for unit tests the examples Its a bit annoying that CI servers and whatnot fail tests due to a port number in use issue when testing the examples.> org.apache.cxf.interceptor.Fault: Could not start Jetty server on port 9,000: Address already in useWe should use dynamic port numbers, like we do when testing components. camel-test has a util class to find a free port number. Task Use dynamic port numbers for unit tests the examples Its a bit annoying that CI servers and whatnot fail tests due to a port number in use issue when testing the examples.> org.apache.cxf.interceptor.Fault: Could not start Jetty server on port 9,000: Address already in useWe should use dynamic port numbers, like we do when testing components. camel-test has a util class to find a free port number.
CAMEL-4813 Add a converter to turn StringBuffer to InputStream As the user request[1], we need to consider to provide a converter for StringBuffer[1]http://camel.465427.n5.nabble.com/TypeConverter-for-StringBuilder-tp5092438p5092438.html Improvement Add a converter to turn StringBuffer to InputStream As the user request[1], we need to consider to provide a converter for StringBuffer[1]http://camel.465427.n5.nabble.com/TypeConverter-for-StringBuilder-tp5092438p5092438.html
CAMEL-4809 interceptSendToEndpoint with predicate and skip The <when> clause in the interceptors behave like filters. This is okay with intercept and interceptFrom, where the only possible route manipulation is <stop />, which is expressed inside the routing block.However, with interceptSendToEndpoint there is one edge case that could cause ambiguity. When skipSendToEndpoint=true, along with a <when> clause, the user might expect that the skipping will only occur if the condition is met. However, it occurs always. The <when /> only determines whether the routing logic contained inside the body of the intercept block will occur or not.I propose to add a new attribute onlySkipWhenConditionMet, so that when this is true, the <when> clause will be evaluated to determine if the originally intended endpoint is actually skipped or not. Improvement interceptSendToEndpoint with predicate and skip The <when> clause in the interceptors behave like filters. This is okay with intercept and interceptFrom, where the only possible route manipulation is <stop />, which is expressed inside the routing block.However, with interceptSendToEndpoint there is one edge case that could cause ambiguity. When skipSendToEndpoint=true, along with a <when> clause, the user might expect that the skipping will only occur if the condition is met. However, it occurs always. The <when /> only determines whether the routing logic contained inside the body of the intercept block will occur or not.I propose to add a new attribute onlySkipWhenConditionMet, so that when this is true, the <when> clause will be evaluated to determine if the originally intended endpoint is actually skipped or not.
CAMEL-4808 Javadoc edits to the org.apache.camel.api.management package (and mbean subpackage) Hi attached patch standardizes spelling of ID, URI, JMX, JPA, etc. throughout the MBean description fields (and includes a few other edits).  (Used ID instead of id as the former spelling is used in the JMX specification.) Improvement Javadoc edits to the org.apache.camel.api.management package (and mbean subpackage) Hi attached patch standardizes spelling of ID, URI, JMX, JPA, etc. throughout the MBean description fields (and includes a few other edits).  (Used ID instead of id as the former spelling is used in the JMX specification.)
CAMEL-4806 Seda component - Add strategy method to prepare the exchange before processing by the consumer CAMEL-4724 caused a change in SedaConsumer which may break 3rd party which extend the SedaConsumer.We need to offer a strategy method they can override for any custom behavior. Improvement Seda component - Add strategy method to prepare the exchange before processing by the consumer CAMEL-4724 caused a change in SedaConsumer which may break 3rd party which extend the SedaConsumer.We need to offer a strategy method they can override for any custom behavior.
CAMEL-4805 Adding a FileCacheManagerFactory for user to use Current DefaultCacheManagerFactory just load the ehcache configuration for the class path, it could be more connivence if the user can specify the configuration file directly as a File from the CacheManagerFactory when he use the camel-cache in different bundles within the Karaf. We could provide a FileCacheManagerFactory for user to use. Improvement Adding a FileCacheManagerFactory for user to use Current DefaultCacheManagerFactory just load the ehcache configuration for the class path, it could be more connivence if the user can specify the configuration file directly as a File from the CacheManagerFactory when he use the camel-cache in different bundles within the Karaf. We could provide a FileCacheManagerFactory for user to use.
CAMEL-4803 Upgrade to zookeeper 3.4.x We currently use 3.3.x. We should upgrade to the 3.4.x branch. Task Upgrade to zookeeper 3.4.x We currently use 3.3.x. We should upgrade to the 3.4.x branch.
CAMEL-4802 Upgrade to CXF 2.3.8 on Camel 2.7 branch CXF 2.3.8 has been released. Task Upgrade to CXF 2.3.8 on Camel 2.7 branch CXF 2.3.8 has been released.
CAMEL-4800 camel-jms - Include details about correlation id in exchange timeout exception if a reply message did not come back This helps make it easier to spot situations when doing request/reply over JMS and the reply message is not received within the timeout period.And then the reply messages comes later.Then it should be easier to spot in the logs when the timeout occurred, and the correlation ID should be in the logs, so you can correlate these two situations. Improvement camel-jms - Include details about correlation id in exchange timeout exception if a reply message did not come back This helps make it easier to spot situations when doing request/reply over JMS and the reply message is not received within the timeout period.And then the reply messages comes later.Then it should be easier to spot in the logs when the timeout occurred, and the correlation ID should be in the logs, so you can correlate these two situations.
CAMEL-4798 Upgrade to CXF 2.5.1 CXF 2.5.1 is released today. Task Upgrade to CXF 2.5.1 CXF 2.5.1 is released today.
CAMEL-4792 Polish management to ensure state is correct for components and endpoint We should double check that- components- endpoint- consumers- processorsIs showing correct state, camel id, etc. as some may by mistake not properly override doStart instead of start, to ensure the state is shown correctly.For example the log endpoint has this problem. Improvement Polish management to ensure state is correct for components and endpoint We should double check that- components- endpoint- consumers- processorsIs showing correct state, camel id, etc. as some may by mistake not properly override doStart instead of start, to ensure the state is shown correctly.For example the log endpoint has this problem.
CAMEL-4791 Add exchangeId to mbeans about first and last failed/complete Currently we only have a timestamp when the first/last completed/failed happen for a given mbean in the routes.We should add exchangeId as detail as well. This allows people to get that exchange id, in case they need to look into some logs etc. This would make it a bit easier to find the details from the logs, when they have the exchangeId as well.See nabblehttp://camel.465427.n5.nabble.com/Statistics-camel-Jconsole-tp5080220p5080220.html Improvement Add exchangeId to mbeans about first and last failed/complete Currently we only have a timestamp when the first/last completed/failed happen for a given mbean in the routes.We should add exchangeId as detail as well. This allows people to get that exchange id, in case they need to look into some logs etc. This would make it a bit easier to find the details from the logs, when they have the exchangeId as well.See nabblehttp://camel.465427.n5.nabble.com/Statistics-camel-Jconsole-tp5080220p5080220.html
CAMEL-4788 CxfRs and properties If you declare an endpoint like<cxf:rsServer id="testEndpoint" address="{{address}}" serviceClass="org.apache.camel.component.cxf.jaxrs.testbean.CustomerService" />the address is not resolve with the properties.It would be useful, as it is possible for CxfEndpoint. You can find with this issue, a small patch with a unit test to reproduce this use case, and a (naive but working) patch that fix the issue for us. Improvement CxfRs and properties If you declare an endpoint like<cxf:rsServer id="testEndpoint" address="{{address}}" serviceClass="org.apache.camel.component.cxf.jaxrs.testbean.CustomerService" />the address is not resolve with the properties.It would be useful, as it is possible for CxfEndpoint. You can find with this issue, a small patch with a unit test to reproduce this use case, and a (naive but working) patch that fix the issue for us.
CAMEL-4786 Add a sized scheduled thread pool to support throttler eip and other scheduled tasks, to avoid intaking more tasks than they can execute The ScheduledThreadPoolExecutor from the JDK has a flaw that it has an unbounded queue task, which mean you can keep scheduling tasks to it, and it will never reject the tasks.This could potential cause to eat up all memory if you add more tasks, than the thread pool can execute.We need to guard the thread pool, and reject tasks if a queue size has been reached.The default queue size in Camel is 1000, so the guard should use that option.http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html Improvement Add a sized scheduled thread pool to support throttler eip and other scheduled tasks, to avoid intaking more tasks than they can execute The ScheduledThreadPoolExecutor from the JDK has a flaw that it has an unbounded queue task, which mean you can keep scheduling tasks to it, and it will never reject the tasks.This could potential cause to eat up all memory if you add more tasks, than the thread pool can execute.We need to guard the thread pool, and reject tasks if a queue size has been reached.The default queue size in Camel is 1000, so the guard should use that option.http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html
CAMEL-4784 Change the ScalaTypeConverter to be object From Camel 2.8.0, camel support to load the type converter without using package scanning. We could use the scala object to define the static type converter method. Improvement Change the ScalaTypeConverter to be object From Camel 2.8.0, camel support to load the type converter without using package scanning. We could use the scala object to define the static type converter method.
CAMEL-4781  Improving NoTypeConversionAvailableException message with cause The NoTypeConversionAvailableException message is misleading when it is caused by other exception.It just eats up the cause message and let us think there is no converter which can turn an InputStream into a Dom from theThe below exception stack trace.{code}org.apache.camel.InvalidPayloadException: No body available of type: org.w3c.dom.Document but has value: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5 of type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream on: Message: [Body is instance of java.io.InputStream]. Caused by: No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5. Exchange[Message: [Body is instance of java.io.InputStream]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5]	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:102)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:58)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:171)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:59)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:42)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:134)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:317)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:330)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.interceptor.TraceInterceptor$1.done(TraceInterceptor.java:188)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:307)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:119)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.component.cxf.CxfClientCallback.handleResponse(CxfClientCallback.java:62)[143:org.apache.camel.camel-cxf:2.8.0.fuse-01-13]	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:818)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1626)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1498)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_23]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_23]	at java.lang.Thread.run(Thread.java:662)[:1.6.0_23]Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:140)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.core.osgi.OsgiTypeConverter.mandatoryConvertTo(OsgiTypeConverter.java:110)[91:org.apache.camel.camel-spring:2.8.0.fuse-01-13]	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	... 36 moreCaused by: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:832)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:69)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:182)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:138)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	... 38 moreCaused by: org.xml.sax.SAXParseException: Premature end of file.	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)[:]	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)[:]	at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:110)[:]	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:733)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_23]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_23]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_23]	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_23]	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:828)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	... 41 more{code} Improvement  Improving NoTypeConversionAvailableException message with cause The NoTypeConversionAvailableException message is misleading when it is caused by other exception.It just eats up the cause message and let us think there is no converter which can turn an InputStream into a Dom from theThe below exception stack trace.{code}org.apache.camel.InvalidPayloadException: No body available of type: org.w3c.dom.Document but has value: sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5 of type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream on: Message: [Body is instance of java.io.InputStream]. Caused by: No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5. Exchange[Message: [Body is instance of java.io.InputStream]]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5]	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:102)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:58)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:171)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:59)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:42)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:134)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.DefaultChannel$1.done(DefaultChannel.java:317)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:330)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.interceptor.TraceInterceptor$1.done(TraceInterceptor.java:188)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:78)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.ProducerCache$1.done(ProducerCache.java:307)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.processor.SendProcessor$2$1.done(SendProcessor.java:119)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.component.cxf.CxfClientCallback.handleResponse(CxfClientCallback.java:62)[143:org.apache.camel.camel-cxf:2.8.0.fuse-01-13]	at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:818)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1626)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1498)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$2.run(AutomaticWorkQueueImpl.java:353)[133:org.apache.cxf.bundle:2.4.3.fuse-00-13]	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_23]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_23]	at java.lang.Thread.run(Thread.java:662)[:1.6.0_23]Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: sun.net.www.protocol.http.HttpURLConnection.HttpInputStream to the required type: org.w3c.dom.Document with value sun.net.www.protocol.http.HttpURLConnection$HttpInputStream@4c4571c5	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:140)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.core.osgi.OsgiTypeConverter.mandatoryConvertTo(OsgiTypeConverter.java:110)[91:org.apache.camel.camel-spring:2.8.0.fuse-01-13]	at org.apache.camel.impl.MessageSupport.getMandatoryBody(MessageSupport.java:100)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	... 36 moreCaused by: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file.	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:832)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:69)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:182)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:138)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	... 38 moreCaused by: org.xml.sax.SAXParseException: Premature end of file.	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source)[:]	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)[:]	at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:110)[:]	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:733)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_23]	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_23]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_23]	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_23]	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:828)[89:org.apache.camel.camel-core:2.8.0.fuse-01-13]	... 41 more{code}
CAMEL-4779 Make Ant path matching in file / FTP component easier to use The existing codebase has an implicit optional dependency from camel-core to camel-spring; camel-core contains the class AntPathMatcherGenericFileFilter, which internally uses camel-spring's SpringAntPathMatcherFileFilter class via runtime classpath checks and reflection. The reason that SpringAntPathMatcherFileFilter is in camel-spring is that it uses Spring's AntPathMatcher class internally. Interestingly, there is already an AntPathMatcher class with an API very similar to Spring's class in the camel-core-xml module.This patch moves camel-core-xml's AntPathMatcher into camel-core, removes the classpath and reflection magic in camel-core's AntPathMatcherGenericFileFilter class, and adds a new class to camel-core named GenericFileFilterConverter, which automagically converts strings to ant path file filters. The patch also adds some unit tests.The end result is that Camel users can now use ant path matching with the file and FTP components without having to add a dependency on camel-spring, and Camel users can specify the ant path expression to use directly in the component querystring, rather than having to go through the work of registering an additional file filter instance in the registry (although this is only true when the user only needs to specify a single include path, which is a very common use case). For example:from("file://target/blah?recursive=true&filter=**/*.txt")  .to(...);Instead of:from("file://target/blah?recursive=true&filter=#myTxtFilter")  .to(...); Improvement Make Ant path matching in file / FTP component easier to use The existing codebase has an implicit optional dependency from camel-core to camel-spring; camel-core contains the class AntPathMatcherGenericFileFilter, which internally uses camel-spring's SpringAntPathMatcherFileFilter class via runtime classpath checks and reflection. The reason that SpringAntPathMatcherFileFilter is in camel-spring is that it uses Spring's AntPathMatcher class internally. Interestingly, there is already an AntPathMatcher class with an API very similar to Spring's class in the camel-core-xml module.This patch moves camel-core-xml's AntPathMatcher into camel-core, removes the classpath and reflection magic in camel-core's AntPathMatcherGenericFileFilter class, and adds a new class to camel-core named GenericFileFilterConverter, which automagically converts strings to ant path file filters. The patch also adds some unit tests.The end result is that Camel users can now use ant path matching with the file and FTP components without having to add a dependency on camel-spring, and Camel users can specify the ant path expression to use directly in the component querystring, rather than having to go through the work of registering an additional file filter instance in the registry (although this is only true when the user only needs to specify a single include path, which is a very common use case). For example:from("file://target/blah?recursive=true&filter=**/*.txt")  .to(...);Instead of:from("file://target/blah?recursive=true&filter=#myTxtFilter")  .to(...);
CAMEL-4775 Incorrect information in documentation about spring testing http://camel.apache.org/spring-testing.html says{quote}You can overload the method createApplicationContext to provide the Spring ApplicationContext that isn't following the above default{quote}This is after it says in the example that you test class should extend AbstractJUnit38SpringContextTests.  This is incorrect.*Solution*The test class should actually extend CamelSpringTestSupport Task Incorrect information in documentation about spring testing http://camel.apache.org/spring-testing.html says{quote}You can overload the method createApplicationContext to provide the Spring ApplicationContext that isn't following the above default{quote}This is after it says in the example that you test class should extend AbstractJUnit38SpringContextTests.  This is incorrect.*Solution*The test class should actually extend CamelSpringTestSupport
CAMEL-4770 Add startAsync option to JMS consumer endpoint to allow route to be started, but the connection to the remote broker occurs async This allows people to add routes which consumes from JMS destinations, by which the consumer should start async in a separate thread, this ensures Camel will continue starting the route, and continue the code. Then the asyns thread starts the JmsConsumer in the background. This is needed in case the remote connection to the JMS broker does not work. But you want to signal the route is started anyway, as the JMS consumer most likely support failover and retry, so the connection may come online later.We may need to add some way to store a flag, so you from JMX can monitor if the JMS consumer is live or not.See nabblehttp://camel.465427.n5.nabble.com/Adding-JMS-route-may-block-if-remote-is-down-using-failover-connection-tp5037014p5037014.html Improvement Add startAsync option to JMS consumer endpoint to allow route to be started, but the connection to the remote broker occurs async This allows people to add routes which consumes from JMS destinations, by which the consumer should start async in a separate thread, this ensures Camel will continue starting the route, and continue the code. Then the asyns thread starts the JmsConsumer in the background. This is needed in case the remote connection to the JMS broker does not work. But you want to signal the route is started anyway, as the JMS consumer most likely support failover and retry, so the connection may come online later.We may need to add some way to store a flag, so you from JMX can monitor if the JMS consumer is live or not.See nabblehttp://camel.465427.n5.nabble.com/Adding-JMS-route-may-block-if-remote-is-down-using-failover-connection-tp5037014p5037014.html
CAMEL-4762 Upgraded the hawtbuf version to 2.7 hawtbuf 2.7 has a fix which can help the ObjectCodec load the class dynamically.We need to use it to fix the issue of CAMEL-4709. Task Upgraded the hawtbuf version to 2.7 hawtbuf 2.7 has a fix which can help the ObjectCodec load the class dynamically.We need to use it to fix the issue of CAMEL-4709.
CAMEL-4760 Unable to set logName on DefaultErrorHandler as well as executorService on LoggingErrorHandler The following snippets do not work, although each of the specified error handlers supports _logName_ and _executorServiceRef_. The issue is actual for the _DeadLetterChannel_ error handler too.{code:title=LoggingErrorHandler}<errorHandler id="errorHandler" type="LoggingErrorHandler" logName="${router.logger.name}" executorServiceRef="redeliveryExecutor"/>{code}{code:title=DefaultErrorHandler}<errorHandler id="errorHandler" type="DefaultErrorHandler" logName="${router.logger.name}" executorServiceRef="redeliveryExecutor"/>{code}{code:title=StackTrace}Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [META-INF/spring/camel-context.xml]; nested exception is java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler, in error handler with id: errorHandler	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:186)	... 42 moreCaused by: java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler, in error handler with id: errorHandler{code} Improvement Unable to set logName on DefaultErrorHandler as well as executorService on LoggingErrorHandler The following snippets do not work, although each of the specified error handlers supports _logName_ and _executorServiceRef_. The issue is actual for the _DeadLetterChannel_ error handler too.{code:title=LoggingErrorHandler}<errorHandler id="errorHandler" type="LoggingErrorHandler" logName="${router.logger.name}" executorServiceRef="redeliveryExecutor"/>{code}{code:title=DefaultErrorHandler}<errorHandler id="errorHandler" type="DefaultErrorHandler" logName="${router.logger.name}" executorServiceRef="redeliveryExecutor"/>{code}{code:title=StackTrace}Caused by: org.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [META-INF/spring/camel-context.xml]; nested exception is java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler, in error handler with id: errorHandler	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:412)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:143)	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:178)	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.importBeanDefinitionResource(DefaultBeanDefinitionDocumentReader.java:186)	... 42 moreCaused by: java.lang.IllegalArgumentException: Attribute executorServiceRef is not supported by error handler type: LoggingErrorHandler, in error handler with id: errorHandler{code}
CAMEL-4758 Updates to JavaDoc for org.apache.camel package Mostly typos/grammatical errors fixed (from svn on "trunk") - see patch. Improvement Updates to JavaDoc for org.apache.camel package Mostly typos/grammatical errors fixed (from svn on "trunk") - see patch.
CAMEL-4757 XPath expression - Add option to use Saxon, so you can configure this from XML DSL See nabblehttp://camel.465427.n5.nabble.com/XPath-Language-Saxon-for-XPath-2-0-on-Spring-DSL-tp5056545p5056545.htmlWe should add an option so you can configure to use saxon, like you can do in Java DSL.Something alike:{code}<xpath saxon="true">/foo/bar</xpath>{code} Improvement XPath expression - Add option to use Saxon, so you can configure this from XML DSL See nabblehttp://camel.465427.n5.nabble.com/XPath-Language-Saxon-for-XPath-2-0-on-Spring-DSL-tp5056545p5056545.htmlWe should add an option so you can configure to use saxon, like you can do in Java DSL.Something alike:{code}<xpath saxon="true">/foo/bar</xpath>{code}
CAMEL-4752 Update the ActiveMQ ID generator in Camel with the patches from AMQ-3614 See AMQ-3614http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java?r1=1209162&r2=1209161&pathrev=1209162 Task Update the ActiveMQ ID generator in Camel with the patches from AMQ-3614 See AMQ-3614http://svn.apache.org/viewvc/activemq/trunk/activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java?r1=1209162&r2=1209161&pathrev=1209162
CAMEL-4750 camel-mail - Allow to use ContentTypeResolver when receiving mails as well See nabblehttp://camel.465427.n5.nabble.com/Mail-component-ContentTypeResolver-SPI-customization-tp5054171p5054171.htmlWe should use the ContentTypeResolver when extracting the attachments from the javax.mail.Message, when we receive emails.It was at first intended to work around a Geronimo mail issue, but it can be used to let people fixup mime times which are not to their satisfaction.And people may expect that ContentTypeResolver to be used on the consumer side as well. I dont think we clearly documented that it was only on producer side, when we added it years ago. Improvement camel-mail - Allow to use ContentTypeResolver when receiving mails as well See nabblehttp://camel.465427.n5.nabble.com/Mail-component-ContentTypeResolver-SPI-customization-tp5054171p5054171.htmlWe should use the ContentTypeResolver when extracting the attachments from the javax.mail.Message, when we receive emails.It was at first intended to work around a Geronimo mail issue, but it can be used to let people fixup mime times which are not to their satisfaction.And people may expect that ContentTypeResolver to be used on the consumer side as well. I dont think we clearly documented that it was only on producer side, when we added it years ago.
CAMEL-4749 camel-ahc - Ensure AsyncHttpClient is closed when stopping producer We should ensure the client is closed when stopping the producer, as seeing these WARNs in the logsWARN  AsyncHttpClient - AsyncHttpClient.close() hasn't been invoked, which may produce file descriptor leaks  Improvement camel-ahc - Ensure AsyncHttpClient is closed when stopping producer We should ensure the client is closed when stopping the producer, as seeing these WARNs in the logsWARN  AsyncHttpClient - AsyncHttpClient.close() hasn't been invoked, which may produce file descriptor leaks 
CAMEL-4747 Add java compiler plugin into the camel-archetype-scala  Some time the scala user may need to compile the java code which could be generated from WSDL or others.It could be better if we specify the java compile plugin in camel-archetype-scala. Improvement Add java compiler plugin into the camel-archetype-scala  Some time the scala user may need to compile the java code which could be generated from WSDL or others.It could be better if we specify the java compile plugin in camel-archetype-scala.
CAMEL-4745 Cannot determine which channel someone is subscribing to by listening to the /meta/subscribe channel When you listen to the /meta/subscribe channel, you can tell that a client has subscribed to a channel, but there is no way to determine which channel because the channel information is not passed in through the Exchange object that is received by the listener.This also applies to listening to the /meta/unsubscribe for when a client unsubscribes from a channel. Improvement Cannot determine which channel someone is subscribing to by listening to the /meta/subscribe channel When you listen to the /meta/subscribe channel, you can tell that a client has subscribed to a channel, but there is no way to determine which channel because the channel information is not passed in through the Exchange object that is received by the listener.This also applies to listening to the /meta/unsubscribe for when a client unsubscribes from a channel.
CAMEL-4744 Improve log message when starting Camel with routes having autoStartup=false When CamelContext is started it logs at INFO level for the routes which had autoStartup=false.We should change that to DEBUG level, and have a better wording, than current. It seems a bit as a mistake when we say "Cannot start route XXX as its auto startup = false". Instead we should have a different message saying this.At INFO level Camel will still say started X routes out of Y. So people can see if some routes has been disabled auto startup, as the count would differ. Improvement Improve log message when starting Camel with routes having autoStartup=false When CamelContext is started it logs at INFO level for the routes which had autoStartup=false.We should change that to DEBUG level, and have a better wording, than current. It seems a bit as a mistake when we say "Cannot start route XXX as its auto startup = false". Instead we should have a different message saying this.At INFO level Camel will still say started X routes out of Y. So people can see if some routes has been disabled auto startup, as the count would differ.
CAMEL-4732 Allow camel-freemarker template cache duration to be specified The camel-freemarker component supports caching of template files; however, the cache period that is applied is always 5 seconds -- which is the default cache delay defined in the FreeMarker Configuration.  This short cache window seems incongruent with likely uses of FreeMarker within a Camel route.  Camel should allow the template cache duration to be specified as part of the component's URI definition so that longer cache periods can be configured in a route. Improvement Allow camel-freemarker template cache duration to be specified The camel-freemarker component supports caching of template files; however, the cache period that is applied is always 5 seconds -- which is the default cache delay defined in the FreeMarker Configuration.  This short cache window seems incongruent with likely uses of FreeMarker within a Camel route.  Camel should allow the template cache duration to be specified as part of the component's URI definition so that longer cache periods can be configured in a route.
CAMEL-4730 Change cometd SslSocketConnetor to use SslSelectChannelConnector Currently cometd uses SslSocketConnector for cometds connections. In its current configuration it can only support about 35 connections as SslSocketConnector is a blocking connector. Switching this to use the SslSelectChannelConnector in the same way it uses the SelectChannelConnector will fix this and allow the cometds to perform as the non ssl version. Improvement Change cometd SslSocketConnetor to use SslSelectChannelConnector Currently cometd uses SslSocketConnector for cometds connections. In its current configuration it can only support about 35 connections as SslSocketConnector is a blocking connector. Switching this to use the SslSelectChannelConnector in the same way it uses the SelectChannelConnector will fix this and allow the cometds to perform as the non ssl version.
CAMEL-4729 Supports to set the default value of SedaComponent SedaComponent should support to set the defautl value of queueSize and ConcurrentConsumers.Here[1] is the mail thread discusses about it.[1]http://camel.465427.n5.nabble.com/SEDA-by-default-tp5034854p5034854.html  Improvement Supports to set the default value of SedaComponent SedaComponent should support to set the defautl value of queueSize and ConcurrentConsumers.Here[1] is the mail thread discusses about it.[1]http://camel.465427.n5.nabble.com/SEDA-by-default-tp5034854p5034854.html 
CAMEL-4728 Add setDefaultEndpoint method on the interface of ProducerTemplate Here[1] is user complain that need to cast the ProducerTemplate to DefaultProducerTemplate to set the default endpoint which is used to send the message.[1]http://camel.465427.n5.nabble.com/How-to-configure-default-endpoint-tt5034140.html Improvement Add setDefaultEndpoint method on the interface of ProducerTemplate Here[1] is user complain that need to cast the ProducerTemplate to DefaultProducerTemplate to set the default endpoint which is used to send the message.[1]http://camel.465427.n5.nabble.com/How-to-configure-default-endpoint-tt5034140.html
CAMEL-4725 camel-sql - Add support for Callable statements See [Nabble|http://camel.465427.n5.nabble.com/call-Oracle-Package-procedure-td5032133.html] for details. New Feature camel-sql - Add support for Callable statements See [Nabble|http://camel.465427.n5.nabble.com/call-Oracle-Package-procedure-td5032133.html] for details.
CAMEL-4723 clean up the imports of cxf extension xml in the examples Since CXF 2.4.0, the user don't need to imports bunch of cxf extensions in their camel context to load a right bus.We need to flow the this practice in camel example at the same time.  Improvement clean up the imports of cxf extension xml in the examples Since CXF 2.4.0, the user don't need to imports bunch of cxf extensions in their camel context to load a right bus.We need to flow the this practice in camel example at the same time. 
CAMEL-4722 Update to Camel Aggregation sample Patch makes minor text and commenting updates to the Aggregation sample. Improvement Update to Camel Aggregation sample Patch makes minor text and commenting updates to the Aggregation sample.
CAMEL-4716 camel-quickfix - Should not depend on Spring JARs Currently camel-quickfix uses Spring API for a FactoryBean to setup a QuickfixjSettings bean. This makes it harder to in non Spring environments. Improvement camel-quickfix - Should not depend on Spring JARs Currently camel-quickfix uses Spring API for a FactoryBean to setup a QuickfixjSettings bean. This makes it harder to in non Spring environments.
CAMEL-4714 Improvements to camel-example-cxf-tomcat sample Hi, attached patch makes the following changes to the camel-example-cxf-tomcat sample:1.) Reactivates the client call (mvn exec:java now enabled); README updated.2.) In the README, provides sample SOAP requests for usage via soapUI.3.) Allows for optional faster deployment of the WAR via mvn tomcat:deploy (for TC7) or mvn tomcat:deploy -PTomcat6 (TC6) instead    of just manually copying the WAR to the webapps folder.4.) Removed the resource filtering (as the client Java file was missing it and hence not working, and there's enough of a case     that SOAP web service providers shouldn't have a version # in the deployed WAR) in favor of a hardcoded    "camel-example-cxf-tomcat" WAR file name. Improvement Improvements to camel-example-cxf-tomcat sample Hi, attached patch makes the following changes to the camel-example-cxf-tomcat sample:1.) Reactivates the client call (mvn exec:java now enabled); README updated.2.) In the README, provides sample SOAP requests for usage via soapUI.3.) Allows for optional faster deployment of the WAR via mvn tomcat:deploy (for TC7) or mvn tomcat:deploy -PTomcat6 (TC6) instead    of just manually copying the WAR to the webapps folder.4.) Removed the resource filtering (as the client Java file was missing it and hence not working, and there's enough of a case     that SOAP web service providers shouldn't have a version # in the deployed WAR) in favor of a hardcoded    "camel-example-cxf-tomcat" WAR file name.
CAMEL-4713 Create a camel component for SSH Lately, I've seen a lot of questions in the mailing list for people that would want to use camel to execute SSH commands to remote hosts.I think it would be nice if we could provide such component to the users. New Feature Create a camel component for SSH Lately, I've seen a lot of questions in the mailing list for people that would want to use camel to execute SSH commands to remote hosts.I think it would be nice if we could provide such component to the users.
CAMEL-4712 Release camel extra 2.8.0 It has been a while we doesn't do any release on the camel-extra since we move the project to apache-extra.As the Apache-Camel 2.8.3 is out for a while, we could start to do the camel-extra 2.8.0 release for it. Task Release camel extra 2.8.0 It has been a while we doesn't do any release on the camel-extra since we move the project to apache-extra.As the Apache-Camel 2.8.3 is out for a while, we could start to do the camel-extra 2.8.0 release for it.
CAMEL-4711 Supports to set the properties on the ClientFactoryBean Current CxfEndpoint doesn't support to set the properties to the ClientFactoryBean, it doesn't be helpful if we want to set the AuthorizationPolicy on the CXF client through the properties. Improvement Supports to set the properties on the ClientFactoryBean Current CxfEndpoint doesn't support to set the properties to the ClientFactoryBean, it doesn't be helpful if we want to set the AuthorizationPolicy on the CXF client through the properties.
CAMEL-4708 camel-script - Remove dependency on Spring JARs We should remove dependency on Spring JARs as camel-script only uses a tiny area of Spring, which is its its Resource abstraction.We have this in camel-core now as well. Improvement camel-script - Remove dependency on Spring JARs We should remove dependency on Spring JARs as camel-script only uses a tiny area of Spring, which is its its Resource abstraction.We have this in camel-core now as well.
CAMEL-4706 camel-groovy - No dependency on Spring is required The camel-groovy/pom.xml has runtime dep on camel-spring, which bring in Spring JARs.At first glance this seems not needed. As camel-groovy can run without any Spring JARs. Improvement camel-groovy - No dependency on Spring is required The camel-groovy/pom.xml has runtime dep on camel-spring, which bring in Spring JARs.At first glance this seems not needed. As camel-groovy can run without any Spring JARs.
CAMEL-4705 file endpoint to raise a warning msgs if unable to auto-create the starting directory The file component tries to auto-create any non-existing starting directories however it does not raise any warnings if its unable to create the directory (e.g. due to file permission or due to unmounted file systems). It should at least log a warning msg if it cannot auto-create the starting directory.  Improvement file endpoint to raise a warning msgs if unable to auto-create the starting directory The file component tries to auto-create any non-existing starting directories however it does not raise any warnings if its unable to create the directory (e.g. due to file permission or due to unmounted file systems). It should at least log a warning msg if it cannot auto-create the starting directory. 
CAMEL-4704 Allow type converters to be specified as Spring beans There are many Camel configuration elements that are auto-discovered when they are configured as Spring beans (Tracer, InterceptStrategy, EventNotifier, PlatformTransactionManager, etc):http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.htmlHowever, instances of TypeConverter are not auto-discovered based on the Spring configuration (there is a different auto-discovery mechanism):http://camel.apache.org/type-converter.htmlA related JIRA ticket (requesting custom XML syntax) was marked "won't fix": CAMEL-1685.I agree that the extra XML tag is not necessary. However, the omission of Spring bean auto-discovery seems to violate the principle of least surprise -- as a new Camel user, knowing that Camel auto-discovers Spring beans for other configuration elements, I was surprised to find that Camel didn't find my TypeConverter Spring bean. New Feature Allow type converters to be specified as Spring beans There are many Camel configuration elements that are auto-discovered when they are configured as Spring beans (Tracer, InterceptStrategy, EventNotifier, PlatformTransactionManager, etc):http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.htmlHowever, instances of TypeConverter are not auto-discovered based on the Spring configuration (there is a different auto-discovery mechanism):http://camel.apache.org/type-converter.htmlA related JIRA ticket (requesting custom XML syntax) was marked "won't fix": CAMEL-1685.I agree that the extra XML tag is not necessary. However, the omission of Spring bean auto-discovery seems to violate the principle of least surprise -- as a new Camel user, knowing that Camel auto-discovers Spring beans for other configuration elements, I was surprised to find that Camel didn't find my TypeConverter Spring bean.
CAMEL-4703 Multiple route definitions with distinct "handlers" only take into account the first one  Here is an extract of my camel-config.xml :<from uri="jetty:http://0.0.0.0:9000/route1?handlers=securityHandler1"/><from uri="jetty:http://0.0.0.0:9000/route2?handlers=securityHandler2"/>The handler "securityHandler2" is ignored.Impact : 2 routes cannot be defined with distinct security roles within the same bundle.Cause : the JettyHttpComponent.createServletForConnector is called only once, therefore only "securityHandler1" is registered on the Jetty server instance.This might be considered as an acceptable limitation and documented as such.Workaround : use a different TCP port. Improvement Multiple route definitions with distinct "handlers" only take into account the first one  Here is an extract of my camel-config.xml :<from uri="jetty:http://0.0.0.0:9000/route1?handlers=securityHandler1"/><from uri="jetty:http://0.0.0.0:9000/route2?handlers=securityHandler2"/>The handler "securityHandler2" is ignored.Impact : 2 routes cannot be defined with distinct security roles within the same bundle.Cause : the JettyHttpComponent.createServletForConnector is called only once, therefore only "securityHandler1" is registered on the Jetty server instance.This might be considered as an acceptable limitation and documented as such.Workaround : use a different TCP port.
CAMEL-4702 SNMP Component, Documentation is confusing with respect to hostname:port vs. address On this page: http://camel.apache.org/snmp.html, it says the URI format is:   snmp://hostname[:port][?Options]And documents the "address" option as "the IP address and the port of the host to poll or where to setup the Trap Receiver. Example: 127.0.0.1:162"So how does address differ from the "hostname:port" in the URI?Thanks! Improvement SNMP Component, Documentation is confusing with respect to hostname:port vs. address On this page: http://camel.apache.org/snmp.html, it says the URI format is:   snmp://hostname[:port][?Options]And documents the "address" option as "the IP address and the port of the host to poll or where to setup the Trap Receiver. Example: 127.0.0.1:162"So how does address differ from the "hostname:port" in the URI?Thanks!
CAMEL-4697 Using servlet API 2.5 across the camel components There are lots camel components has the dependency of the servlet api, we should agile the servlet API to avoid the servlet API conflicts. Improvement Using servlet API 2.5 across the camel components There are lots camel components has the dependency of the servlet api, we should agile the servlet API to avoid the servlet API conflicts.
CAMEL-4693 http4 Component not exposing HttpContext HttpComponents 4.x provides a facility to use a HttpContext for a given request by calling HttpClient.execute(HttpUriRequest, HttpContext), but it looks like the http4 Camel Component doesn't have hooks to use this. Looking at the latest source of org.apache.camel.component.http4.HttpProducer, I only see one way of calling HttpClient.execute():    protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {        return httpClient.execute(httpRequest);    }Perhaps this could be made available in a similar fashion to HttpClientConfigurer? (for example creating a HttpContextConfigurer)My particular symptom is that I'm unable to force the http4 component to use preemptive authentication, which relies on HttpContext in HttpClient 4.x. In HttpClient 3.x, this was made possible by the HttpClientParams flag "authenticationPreemptive". However, it appears that this was removed for 4.x in favor of using HttpContext because of security concerns. Improvement http4 Component not exposing HttpContext HttpComponents 4.x provides a facility to use a HttpContext for a given request by calling HttpClient.execute(HttpUriRequest, HttpContext), but it looks like the http4 Camel Component doesn't have hooks to use this. Looking at the latest source of org.apache.camel.component.http4.HttpProducer, I only see one way of calling HttpClient.execute():    protected HttpResponse executeMethod(HttpUriRequest httpRequest) throws IOException {        return httpClient.execute(httpRequest);    }Perhaps this could be made available in a similar fashion to HttpClientConfigurer? (for example creating a HttpContextConfigurer)My particular symptom is that I'm unable to force the http4 component to use preemptive authentication, which relies on HttpContext in HttpClient 4.x. In HttpClient 3.x, this was made possible by the HttpClientParams flag "authenticationPreemptive". However, it appears that this was removed for 4.x in favor of using HttpContext because of security concerns.
CAMEL-4686 Messages larger than 64KB can be processed very slowly due to file read buffer of 1 byte When the message body is larger than 64KB, the message is stored on the disk by CachedOutputStream and read back later by FileInputStreamCache.A thread dump during a load test shows that the execution is most of the time waiting in the "InputStream.read()" method calls.The "truss" output shows that the file is read back 1 byte at a time, which makes the calls very slow.A first workaround (setting property "CamelCachedOutputStreamThreshold" to 10000000 on the CamelContext's properties) helped in some case.  The cause is that the FileInputStreamCache does not use a BufferInputStream to read on the disk, although the CachedOutputStream does properly use a BufferOutputStream.Seehttp://java.sun.com/docs/books/performance/1st_edition/html/JPIOPerformance.fm.html#17675A trivial patch is attached, which provides a fix.Reference :http://servicemix.396122.n5.nabble.com/DefaultTraceFormatter-is-very-slow-for-messages-gt-64KB-td4902840.htmlThis problem was first noticed when the trace was enabled on the CamelContext, but it occurs also in other scenarios. Improvement Messages larger than 64KB can be processed very slowly due to file read buffer of 1 byte When the message body is larger than 64KB, the message is stored on the disk by CachedOutputStream and read back later by FileInputStreamCache.A thread dump during a load test shows that the execution is most of the time waiting in the "InputStream.read()" method calls.The "truss" output shows that the file is read back 1 byte at a time, which makes the calls very slow.A first workaround (setting property "CamelCachedOutputStreamThreshold" to 10000000 on the CamelContext's properties) helped in some case.  The cause is that the FileInputStreamCache does not use a BufferInputStream to read on the disk, although the CachedOutputStream does properly use a BufferOutputStream.Seehttp://java.sun.com/docs/books/performance/1st_edition/html/JPIOPerformance.fm.html#17675A trivial patch is attached, which provides a fix.Reference :http://servicemix.396122.n5.nabble.com/DefaultTraceFormatter-is-very-slow-for-messages-gt-64KB-td4902840.htmlThis problem was first noticed when the trace was enabled on the CamelContext, but it occurs also in other scenarios.
CAMEL-4684 Using commons-io 1.4 across camel components As the camel-exec uses commons-io 1.4 and other camel components use commons-io 1.3.2, we should algin the commons-io version to 1.4. Task Using commons-io 1.4 across camel components As the camel-exec uses commons-io 1.4 and other camel components use commons-io 1.3.2, we should algin the commons-io version to 1.4.
CAMEL-4683 JpaConsumer - Add option to control if consumer should run in transacted mode and rollback all if one exchange failed See nabblehttp://camel.465427.n5.nabble.com/Misleading-jmx-statistics-on-jpa-component-tp4960503p4960503.htmlWe should add option {{consumer.transacted}} to allow end users to control if they want the JpaConsumer to run in transacted mode, where by if one exchange failed to be processed, the entire batch is rolled back. If not, then all the good messages will be committed, and only the failed message will rollback. Improvement JpaConsumer - Add option to control if consumer should run in transacted mode and rollback all if one exchange failed See nabblehttp://camel.465427.n5.nabble.com/Misleading-jmx-statistics-on-jpa-component-tp4960503p4960503.htmlWe should add option {{consumer.transacted}} to allow end users to control if they want the JpaConsumer to run in transacted mode, where by if one exchange failed to be processed, the entire batch is rolled back. If not, then all the good messages will be committed, and only the failed message will rollback.
CAMEL-4681 Add xml-spec-api feature into apache-camel In CAMEL-4671 we remove bunch of xml spec API bundles which has the packages those can be export for JRE itself.The xml-spec-api(activateion, jaxb, stax) feature is introduced in case of the jre doesn't exports these packages. Task Add xml-spec-api feature into apache-camel In CAMEL-4671 we remove bunch of xml spec API bundles which has the packages those can be export for JRE itself.The xml-spec-api(activateion, jaxb, stax) feature is introduced in case of the jre doesn't exports these packages.
CAMEL-4680 Check for clash with multiple consumers when starting a new route manually using startRoute When manually starting a route we should check if any existing running route consumers, may cause a clash with multiple consumers, if endpoint does not support multiple consumer.See CAMEL-4650 Improvement Check for clash with multiple consumers when starting a new route manually using startRoute When manually starting a route we should check if any existing running route consumers, may cause a clash with multiple consumers, if endpoint does not support multiple consumer.See CAMEL-4650
CAMEL-4678 Allow lifecycle strategy to veto starting CamelContext, but to suppress exception to ensure bundle is in valid state in OSGi A custom lifecycle strategy can veto starting CamelContext in case something is wrong etc.This can be done by throwing the VetoCamelContextStartException in the onCamelContextStart method.However currently the exception is re-thrown all the way causing the osgi container to regard the bundle in failure state.Where as you may want the bundle to start properly, but what you intend to do is to prevent CamelContext itself from starting.For example currently you will get this state [ 218] [Active     ] [Failure     ] [       ] [   60] Camel Demo App for Veto starting a CamelContext (1.0.0)And this error in the log 15:58:13,057 | ERROR | rint Extender: 1 | BlueprintContainerImpl           | ?                                   ? | 10 - org.apache.aries.blueprint - 0.3.1 | Unable to start blueprint container for bundle foo Improvement Allow lifecycle strategy to veto starting CamelContext, but to suppress exception to ensure bundle is in valid state in OSGi A custom lifecycle strategy can veto starting CamelContext in case something is wrong etc.This can be done by throwing the VetoCamelContextStartException in the onCamelContextStart method.However currently the exception is re-thrown all the way causing the osgi container to regard the bundle in failure state.Where as you may want the bundle to start properly, but what you intend to do is to prevent CamelContext itself from starting.For example currently you will get this state [ 218] [Active     ] [Failure     ] [       ] [   60] Camel Demo App for Veto starting a CamelContext (1.0.0)And this error in the log 15:58:13,057 | ERROR | rint Extender: 1 | BlueprintContainerImpl           | ?                                   ? | 10 - org.apache.aries.blueprint - 0.3.1 | Unable to start blueprint container for bundle foo
CAMEL-4677 Camel CXF Blueprint XSD is not Publicly Released The schema definition for Camel CXF Blueprint is not publicly available in any form.  Following other Camel XML DSL releases, the XSD should be included as part of the release process and located at:* http://camel.apache.org/schema/blueprint/cxfIt should also appear in the Maven Repository along side the Spring DSL XSD.I may be missing something but I believe the following TODOs cover what is needed to clean this up:* Update the WIKI: (Claus has already fixed this)https://cwiki.apache.org/confluence/display/CAMEL/Release+Guide* Update the POM to attach it with a classifier of blueprint* The schemas for the corresponding versions need to be uploaded to the Camel Schema site:http://camel.apache.org/schema/blueprint/cxfThanks,Scott ES Task Camel CXF Blueprint XSD is not Publicly Released The schema definition for Camel CXF Blueprint is not publicly available in any form.  Following other Camel XML DSL releases, the XSD should be included as part of the release process and located at:* http://camel.apache.org/schema/blueprint/cxfIt should also appear in the Maven Repository along side the Spring DSL XSD.I may be missing something but I believe the following TODOs cover what is needed to clean this up:* Update the WIKI: (Claus has already fixed this)https://cwiki.apache.org/confluence/display/CAMEL/Release+Guide* Update the POM to attach it with a classifier of blueprint* The schemas for the corresponding versions need to be uploaded to the Camel Schema site:http://camel.apache.org/schema/blueprint/cxfThanks,Scott ES
CAMEL-4669 Add JMX support for clearing the resource cache on components that extend ResourceEndpoint  Add JMX support for cache clearing to the abstract ResourceEndpoint class from camel-core. This allows freemarker, velocity and other components that use this class to have the ability to force a re-load of cached resources. Improvement Add JMX support for clearing the resource cache on components that extend ResourceEndpoint  Add JMX support for cache clearing to the abstract ResourceEndpoint class from camel-core. This allows freemarker, velocity and other components that use this class to have the ability to force a re-load of cached resources.
CAMEL-4667 Upgrade CXF version to 2.4.4 CXF 2.4.4 is out for while, we should consider to upgrade it in camel 2.8.x branch. Task Upgrade CXF version to 2.4.4 CXF 2.4.4 is out for while, we should consider to upgrade it in camel 2.8.x branch.
CAMEL-4661 DefaultUnitOfWork doesn't copy headers to originalInMessage for JmsMessages There's a comment in the constructor code that explains headers are currently not copied for a reason and that this should be fixed with Camel 3.0. Wanted to create a JIRA to track the requirement.We'd need the original in message including all headers it was carrying when it got dequeued. Improvement DefaultUnitOfWork doesn't copy headers to originalInMessage for JmsMessages There's a comment in the constructor code that explains headers are currently not copied for a reason and that this should be fixed with Camel 3.0. Wanted to create a JIRA to track the requirement.We'd need the original in message including all headers it was carrying when it got dequeued.
CAMEL-4656 camel-jms - Request/Reply - Cache consumer for exclusive replyTo type, or if replyToDestinationSelectorName is used for shared replyTo type We can cache the consumer for these 2 situations- exclusive replyTo type- when replyToDestinationSelectorName is used for shared replyTo typeThis improves performance as the consumer is not re-created as often (eg its cached) and therefore reply messages can be picked up faster. Improvement camel-jms - Request/Reply - Cache consumer for exclusive replyTo type, or if replyToDestinationSelectorName is used for shared replyTo type We can cache the consumer for these 2 situations- exclusive replyTo type- when replyToDestinationSelectorName is used for shared replyTo typeThis improves performance as the consumer is not re-created as often (eg its cached) and therefore reply messages can be picked up faster.
CAMEL-4653 Support for Context Parameters in Restlet Component The component should allow passing context parameters (e.g. "persistingConnections"), which are important for some applications. New Feature Support for Context Parameters in Restlet Component The component should allow passing context parameters (e.g. "persistingConnections"), which are important for some applications.
CAMEL-4651 camel-jms - Set bean name on reply manager so Spring JMS will use the bean name as thread name, so we can see its a Camel thread If not then all we see in the thread list is DefaultMessageListenerContainer-1 which does not really indicate its from camel-jms, when you do request/reply over JMS. Improvement camel-jms - Set bean name on reply manager so Spring JMS will use the bean name as thread name, so we can see its a Camel thread If not then all we see in the thread list is DefaultMessageListenerContainer-1 which does not really indicate its from camel-jms, when you do request/reply over JMS.
CAMEL-4648 Clean up the code of CxfRsEndpoint of getting configuration from spring or blueprint As we set the bean scope to prototype, we don't need to create a new JAXRSClientFactoryBean or JAXRSServerFactoryBean ourself in CxfRsEndpoint, that could make the code more clean. Improvement Clean up the code of CxfRsEndpoint of getting configuration from spring or blueprint As we set the bean scope to prototype, we don't need to create a new JAXRSClientFactoryBean or JAXRSServerFactoryBean ourself in CxfRsEndpoint, that could make the code more clean.
CAMEL-4646 MessageDataFormatFeature should keep the interceptors which are set to cxfEndpoint We can let user choice what interceptor should be kept in MESSAGE dataformat.As the PayLoadFeature just remove the specified interceptors not according the phase name, we don't need to do such kind of work there. Improvement MessageDataFormatFeature should keep the interceptors which are set to cxfEndpoint We can let user choice what interceptor should be kept in MESSAGE dataformat.As the PayLoadFeature just remove the specified interceptors not according the phase name, we don't need to do such kind of work there.
CAMEL-4645 Enhancement of loggingFeature setting on the camel-cxf As Claus suggested[1], it could be handy if we support enable the logging feature and logginglimit by setting the attribute of cxfEndpoint. We should face the problem on cxfRSServer or CxfRsClient.[1]http://camel.465427.n5.nabble.com/IDEA-camel-cxf-make-it-easier-to-enable-logging-in-out-tt4973860.html#a4974042 Improvement Enhancement of loggingFeature setting on the camel-cxf As Claus suggested[1], it could be handy if we support enable the logging feature and logginglimit by setting the attribute of cxfEndpoint. We should face the problem on cxfRSServer or CxfRsClient.[1]http://camel.465427.n5.nabble.com/IDEA-camel-cxf-make-it-easier-to-enable-logging-in-out-tt4973860.html#a4974042
CAMEL-4644 MessageDataFormatFeature should keep the LoggingOutInterceptor Because the user need to reset the default phase of LoggingOutInterceptor to get it work.It could be more convince if we keep the LoggingOutInterceptor in MessageDataFormatFeature.  Improvement MessageDataFormatFeature should keep the LoggingOutInterceptor Because the user need to reset the default phase of LoggingOutInterceptor to get it work.It could be more convince if we keep the LoggingOutInterceptor in MessageDataFormatFeature. 
CAMEL-4642 Do not print javax.jms.Message in toString in camel-jms See nabblehttp://camel.465427.n5.nabble.com/ExchangeTimedOutException-not-properly-constructed-by-Camel-2-7-1-exposing-exchange-data-tp4971556p4971556.htmlThere may be details in the JMS message you do not want to show in logs unintended. Improvement Do not print javax.jms.Message in toString in camel-jms See nabblehttp://camel.465427.n5.nabble.com/ExchangeTimedOutException-not-properly-constructed-by-Camel-2-7-1-exposing-exchange-data-tp4971556p4971556.htmlThere may be details in the JMS message you do not want to show in logs unintended.
CAMEL-4638 Improvements to camel-example-cxf-blueprint and camel-example-cxf-osgi READMEs Improvements to README for the two samples made, also removed unneeded explicit cxf-rt-core dependency reference from the four samples that had it (already brought in via the cxf-rt-frontend-jaxws and cxf-rt-transports-http dependency declarations.) Improvement Improvements to camel-example-cxf-blueprint and camel-example-cxf-osgi READMEs Improvements to README for the two samples made, also removed unneeded explicit cxf-rt-core dependency reference from the four samples that had it (already brought in via the cxf-rt-frontend-jaxws and cxf-rt-transports-http dependency declarations.)
CAMEL-4637 Site code-walkthrough has a broken link to camel-core The site http://camel.apache.org/code-walkthrough.html links to http://camel.apache.org/maven/camel-core/ which results in a HTTP 404 Task Site code-walkthrough has a broken link to camel-core The site http://camel.apache.org/code-walkthrough.html links to http://camel.apache.org/maven/camel-core/ which results in a HTTP 404
CAMEL-4636 Tracing of exceptions When a bean in a traced route throws an exception (e.g. NullPointerException) one would expect to see that in the causedByException property of the DefaultTraceEventMessage. But the exception is null.The reason is that in DefaultTraceEventMessage the causedByException is set to exchange.getException(), at a time where it is already handled. The exception is still available as property Exchange.EXCEPTION_CAUGHT.Suggestion for change:{code}public DefaultTraceEventMessage(final Date timestamp, final ProcessorDefinition<?> toNode, final Exchange exchange) {        this.tracedExchange = exchange;        ...        this.causedByException = exchange.getException() != null ? exchange.getException().toString()				: extractExceptionCaught(exchange);}  // used to set causedByException in cases where the exception is already handled private static String extractExceptionCaught(Exchange exchange) { 	Exception exceptionCaught = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT); 	return (exceptionCaught != null ? exceptionCaught.toString() : null);}{code} Improvement Tracing of exceptions When a bean in a traced route throws an exception (e.g. NullPointerException) one would expect to see that in the causedByException property of the DefaultTraceEventMessage. But the exception is null.The reason is that in DefaultTraceEventMessage the causedByException is set to exchange.getException(), at a time where it is already handled. The exception is still available as property Exchange.EXCEPTION_CAUGHT.Suggestion for change:{code}public DefaultTraceEventMessage(final Date timestamp, final ProcessorDefinition<?> toNode, final Exchange exchange) {        this.tracedExchange = exchange;        ...        this.causedByException = exchange.getException() != null ? exchange.getException().toString()				: extractExceptionCaught(exchange);}  // used to set causedByException in cases where the exception is already handled private static String extractExceptionCaught(Exchange exchange) { 	Exception exceptionCaught = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT); 	return (exceptionCaught != null ? exceptionCaught.toString() : null);}{code}
CAMEL-4629 Add support for loading script from file/classpath in the groovy/ognl/mvel etc components This allows these language components to be more usable, and for people to have scripts in external resources in the classpath or the file system.The script can be loaded like this code:{code}        if (ResourceHelper.hasScheme(script)) {            InputStream is = loadResource(script);            answer = getCamelContext().getTypeConverter().convertTo(String.class, is);            IOHelper.close(is);        } else {            // already a script so no need to load{code} Improvement Add support for loading script from file/classpath in the groovy/ognl/mvel etc components This allows these language components to be more usable, and for people to have scripts in external resources in the classpath or the file system.The script can be loaded like this code:{code}        if (ResourceHelper.hasScheme(script)) {            InputStream is = loadResource(script);            answer = getCamelContext().getTypeConverter().convertTo(String.class, is);            IOHelper.close(is);        } else {            // already a script so no need to load{code}
CAMEL-4628 Upgrade to jibx 1.2.3 jibx 1.2.3 is now an osgi bundle so no need for SMX team to wrap that anymore Task Upgrade to jibx 1.2.3 jibx 1.2.3 is now an osgi bundle so no need for SMX team to wrap that anymore
CAMEL-4627 Add support for loading script from file/classpath in the language component in camel-core This allows the language component to be more usable, and for people to have scripts in external resources in the classpath or the file system. Improvement Add support for loading script from file/classpath in the language component in camel-core This allows the language component to be more usable, and for people to have scripts in external resources in the classpath or the file system.
CAMEL-4626 Upgrade to Jersey 1.10 Jersey 1.10 has been released. Task Upgrade to Jersey 1.10 Jersey 1.10 has been released.
CAMEL-4625 Allow consumer to control whether UnitOfWorkProcessor should process synchronous only Some components like FTP must process the consumer fully synchronous so the completion tasks is executed by the same thread as the consumer. This is because the FTP client is not thread safe and do not support another thread to process the completion.For example when you do FTP -> async (eg NMR, Jetty, etc.)The most flexible way of doing this is to allow a consumer to mark the exchange to be processed fully sync by the unit of work processor.This can be done by an exchange property, the consumer can set on the created exchange. Improvement Allow consumer to control whether UnitOfWorkProcessor should process synchronous only Some components like FTP must process the consumer fully synchronous so the completion tasks is executed by the same thread as the consumer. This is because the FTP client is not thread safe and do not support another thread to process the completion.For example when you do FTP -> async (eg NMR, Jetty, etc.)The most flexible way of doing this is to allow a consumer to mark the exchange to be processed fully sync by the unit of work processor.This can be done by an exchange property, the consumer can set on the created exchange.
CAMEL-4620 Upgrade to MyBatis 3.0.6 MyBatis 3.0.6 has been released. The 3.0.5 had a osgi bug which caused it to not work in osgi.The 3.0.6 ought to work as I helped test their SNAPSHOT release back then. Task Upgrade to MyBatis 3.0.6 MyBatis 3.0.6 has been released. The 3.0.5 had a osgi bug which caused it to not work in osgi.The 3.0.6 ought to work as I helped test their SNAPSHOT release back then.
CAMEL-4618 Add support for PGP data format in Java and XML DSLs The new PGP data format from CAMEL-4549requires to create it from Java code.We should add some syntax sugar and have it in the DSL directly like the other data formats.We may also want to look into how to configure a public and private key file, and have it load the PGPPublicKey and PGPPrivateKey for you automatic.Instead of using the PGPDataFormatUtil class. Improvement Add support for PGP data format in Java and XML DSLs The new PGP data format from CAMEL-4549requires to create it from Java code.We should add some syntax sugar and have it in the DSL directly like the other data formats.We may also want to look into how to configure a public and private key file, and have it load the PGPPublicKey and PGPPrivateKey for you automatic.Instead of using the PGPDataFormatUtil class.
CAMEL-4617 Tokenizer pair - Add option to control if tokens should be included or not Most likely you want to skip the start/end tokens by default. But we should have an option so people can control this Improvement Tokenizer pair - Add option to control if tokens should be included or not Most likely you want to skip the start/end tokens by default. But we should have an option so people can control this
CAMEL-4615 MBeanInfo assembler should mixin custom instance with default managed mbean This allows to use both the default ManagedXXX classes with an instance that has as well been annotated with ManagedResource JMX annotation.For example SedaEndpoint, which allows it to be both a MangedBrowsableEndpoint and then any custom annotations it may have decorated in SedaEndpoint class. Improvement MBeanInfo assembler should mixin custom instance with default managed mbean This allows to use both the default ManagedXXX classes with an instance that has as well been annotated with ManagedResource JMX annotation.For example SedaEndpoint, which allows it to be both a MangedBrowsableEndpoint and then any custom annotations it may have decorated in SedaEndpoint class.
CAMEL-4614 Add purge JMX operation to seda endpoint This allows you to manually purge the seda endpoint queue in case you want to do that. Improvement Add purge JMX operation to seda endpoint This allows you to manually purge the seda endpoint queue in case you want to do that.
CAMEL-4613 improvement to camel-example-cxf-osgi README I went through the camel-example-cxf-osgi example on the latest Apache Karaf 2.2.4 and updated it based on any inaccuracies I found.  Note CXF 2.4.3 won't work with Felix but it will on Equinox.  CXF 2.5, and upcoming CXF 2.4.4 will work with Felix, however.Upon application of this patch I will update the corresponding Camel website page with the updated information (http://camel.apache.org/cxf-example-osgi.html). Improvement improvement to camel-example-cxf-osgi README I went through the camel-example-cxf-osgi example on the latest Apache Karaf 2.2.4 and updated it based on any inaccuracies I found.  Note CXF 2.4.3 won't work with Felix but it will on Equinox.  CXF 2.5, and upcoming CXF 2.4.4 will work with Felix, however.Upon application of this patch I will update the corresponding Camel website page with the updated information (http://camel.apache.org/cxf-example-osgi.html).
CAMEL-4610 Add support for namespaces in XML tokenizer mode We should be able to inherit namespaces from a root/parent tag, so you can define a common namespace, and have each splitter message include that namespace.See nabblehttp://camel.465427.n5.nabble.com/HEADS-UP-Splitting-big-XML-files-using-XPath-tp4949834p4949834.html Improvement Add support for namespaces in XML tokenizer mode We should be able to inherit namespaces from a root/parent tag, so you can define a common namespace, and have each splitter message include that namespace.See nabblehttp://camel.465427.n5.nabble.com/HEADS-UP-Splitting-big-XML-files-using-XPath-tp4949834p4949834.html
CAMEL-4608 Upgrade jackson to 1.9.2 Jackson 1.9.2 has been released. We are using 1.8.6 currently. Task Upgrade jackson to 1.9.2 Jackson 1.9.2 has been released. We are using 1.8.6 currently.
CAMEL-4602 file/ftp consumer - The filter option should be able to work on directories as well See nabblehttp://camel.465427.n5.nabble.com/Copying-files-from-an-FTP-server-using-search-criteria-tp4882889p4882889.htmlBy invoking the filter for directories, it allows end users to skip entire directories, which would make the polling faster. And no need to walk down unwanted directories.The logic need to apply for both file/ftp consumers, as well having unit tests to ensure it works. Improvement file/ftp consumer - The filter option should be able to work on directories as well See nabblehttp://camel.465427.n5.nabble.com/Copying-files-from-an-FTP-server-using-search-criteria-tp4882889p4882889.htmlBy invoking the filter for directories, it allows end users to skip entire directories, which would make the polling faster. And no need to walk down unwanted directories.The logic need to apply for both file/ftp consumers, as well having unit tests to ensure it works.
CAMEL-4600 Improve URISupport.sanitizeUri and apply it in additional places In this issue, I propose that URISupport.sanitizeUri method sanitizes the password token in URIs that contain it (i.e., URIs in the form scheme://user:password@host). JT400 component URIs directly benefit from this improvement.Additionally, I suggest that this method be invoked in additional sensitive places (in much the same way as DefaultEndpoint.toString()).Proposed patch attached. Improvement Improve URISupport.sanitizeUri and apply it in additional places In this issue, I propose that URISupport.sanitizeUri method sanitizes the password token in URIs that contain it (i.e., URIs in the form scheme://user:password@host). JT400 component URIs directly benefit from this improvement.Additionally, I suggest that this method be invoked in additional sensitive places (in much the same way as DefaultEndpoint.toString()).Proposed patch attached.
CAMEL-4596 enrich and pollEnrich should accept an expression for dynamic uris We should consider using an expression for uri's for the enrich and pollEnrich EIP's so we can poll from a dynamic computed endpoint.However it will break API as currently the uri is mandatory.It's a bit the same problem with to EIP which is also static uri. However for to EIP we have recipientList which is the dynamic to.So we need a similar dynamic for enrich and pollEnrich. This also solves the problem with that people wan't to provide details from the current exchange in the endpoint uri. We have a ticket for that.eg enrich("file:inbox?fileName=${header.nameToPickUp}")So if we can do it using an expression it could be.enrich().simple("file:inbox?fileName=${header.nameToPickUp}")See nabblehttp://camel.465427.n5.nabble.com/pollEnrich-consumer-with-selector-tp4939908p4939908.html New Feature enrich and pollEnrich should accept an expression for dynamic uris We should consider using an expression for uri's for the enrich and pollEnrich EIP's so we can poll from a dynamic computed endpoint.However it will break API as currently the uri is mandatory.It's a bit the same problem with to EIP which is also static uri. However for to EIP we have recipientList which is the dynamic to.So we need a similar dynamic for enrich and pollEnrich. This also solves the problem with that people wan't to provide details from the current exchange in the endpoint uri. We have a ticket for that.eg enrich("file:inbox?fileName=${header.nameToPickUp}")So if we can do it using an expression it could be.enrich().simple("file:inbox?fileName=${header.nameToPickUp}")See nabblehttp://camel.465427.n5.nabble.com/pollEnrich-consumer-with-selector-tp4939908p4939908.html
CAMEL-4595 Add tokenize by pair to be able to split big XML files in streaming mode Using XPath to split big XML files is not optimal as the JDK XPath framework doesn't support streaming mode yet. It may come in the future.So instead we can introduce a tokenizer which can grab the xml content between start/end tokens instead. Then we can parse big files with very low memory footprint. New Feature Add tokenize by pair to be able to split big XML files in streaming mode Using XPath to split big XML files is not optimal as the JDK XPath framework doesn't support streaming mode yet. It may come in the future.So instead we can introduce a tokenizer which can grab the xml content between start/end tokens instead. Then we can parse big files with very low memory footprint.
CAMEL-4593 Upgrade abdera version to 1.1.3  There are bunch fixes of ABDERA-281, ABDERA-290 can help camel-atom work smoothly with OSGi platform.We need to upgrade the the abdera to 1.1.3 once it is out. Task Upgrade abdera version to 1.1.3  There are bunch fixes of ABDERA-281, ABDERA-290 can help camel-atom work smoothly with OSGi platform.We need to upgrade the the abdera to 1.1.3 once it is out.
CAMEL-4592 AtomUtils.parseDocument() should be set with right TCCL CAMEL-4183 is not a perfect solution for let camel-atom work on OSGi platform.With the help of bunch fixes of ABDERA-281, ABDERA-290, we can find a more elegant way to let user's route configure works without add any imports package.  Improvement AtomUtils.parseDocument() should be set with right TCCL CAMEL-4183 is not a perfect solution for let camel-atom work on OSGi platform.With the help of bunch fixes of ABDERA-281, ABDERA-290, we can find a more elegant way to let user's route configure works without add any imports package. 
CAMEL-4589 XPathBuilder - Optimize to use better suitable message body The XPathBuilder in Camel which is used for XPath expressions should be optimized to better check the message body for already being an InputSource or if its easier to convert to InputSource than a DOM object.Hopefully this should help with big streams to avoid by default to use DOM, but to prefer to use a stream based input source, as well accept SAXSource as source. Improvement XPathBuilder - Optimize to use better suitable message body The XPathBuilder in Camel which is used for XPath expressions should be optimized to better check the message body for already being an InputSource or if its easier to convert to InputSource than a DOM object.Hopefully this should help with big streams to avoid by default to use DOM, but to prefer to use a stream based input source, as well accept SAXSource as source.
CAMEL-4588 Add Node type converters to the various javax.xml.transform.Source type converters Ensure we have Node -> Source type converters for all 4 different kind of Source (StAX, SAX, Stream, DOM). This can help ensure optimal usages of Source when using the various XML related components such as XQuery, XPath, XSLT etc.See nabblehttp://camel.465427.n5.nabble.com/Re-svn-commit-r1188642-in-camel-trunk-camel-core-src-main-java-org-apache-camel-builder-xml-XsltBuila-tp4936225p4936225.html Improvement Add Node type converters to the various javax.xml.transform.Source type converters Ensure we have Node -> Source type converters for all 4 different kind of Source (StAX, SAX, Stream, DOM). This can help ensure optimal usages of Source when using the various XML related components such as XQuery, XPath, XSLT etc.See nabblehttp://camel.465427.n5.nabble.com/Re-svn-commit-r1188642-in-camel-trunk-camel-core-src-main-java-org-apache-camel-builder-xml-XsltBuila-tp4936225p4936225.html
CAMEL-4587 Camel Velocity component should not require you to import CamelVelocityClasspathResourceLoader While trying out a Camel demo that uses velocity, I discovered a change of behaviour in the velocity component in Camel 2.8.0. I am using velocity in a Camel route defined in Spring XML. When I deploy the route into the OSGi container, velocity complains that it cannot find the CamelVelocityClasspathResourceLoader class. I can fix this by importing the class into my bundle.I just checked the code of camel-velocity, as we introduced the CamelVelocityClasspathResourceLoader which should be loaded from the TCCL to load the resource by using camel context resolver.That could explain why you need to add the import package of "org.apache.camel.component.velocity".We can fix it by resetting a custom TCCL which knows how to load the CamelVelocityClasspathResourceLoader when calling the velocityEngine.init(properties). Improvement Camel Velocity component should not require you to import CamelVelocityClasspathResourceLoader While trying out a Camel demo that uses velocity, I discovered a change of behaviour in the velocity component in Camel 2.8.0. I am using velocity in a Camel route defined in Spring XML. When I deploy the route into the OSGi container, velocity complains that it cannot find the CamelVelocityClasspathResourceLoader class. I can fix this by importing the class into my bundle.I just checked the code of camel-velocity, as we introduced the CamelVelocityClasspathResourceLoader which should be loaded from the TCCL to load the resource by using camel context resolver.That could explain why you need to add the import package of "org.apache.camel.component.velocity".We can fix it by resetting a custom TCCL which knows how to load the CamelVelocityClasspathResourceLoader when calling the velocityEngine.init(properties).
CAMEL-4586 camel-script - Make it easier to use the Camel properties component It should be easier to use the Camel properties component from the camel-script component.  Improvement camel-script - Make it easier to use the Camel properties component It should be easier to use the Camel properties component from the camel-script component. 
CAMEL-4580 file tail listener  it would be nice to watch files as unix tail doessee http://stackoverflow.com/questions/557844/java-io-implementation-of-unix-linux-tail-f Improvement file tail listener  it would be nice to watch files as unix tail doessee http://stackoverflow.com/questions/557844/java-io-implementation-of-unix-linux-tail-f
CAMEL-4576 Make exception throwing as flexible in XML as in Java DSL When throwing exceptions there are more options in the java DSL (one has full control) than in the XML where you can only reference an exception instance.It would be useful to be able to construct the exception and throw it, so that one could add messages to it - preferably like:{noformat}throwException class="someEx" message="someProblem ${body} ${in.header.someHeader}{noformat}Reference: http://camel.apache.org/exception-clause.html Improvement Make exception throwing as flexible in XML as in Java DSL When throwing exceptions there are more options in the java DSL (one has full control) than in the XML where you can only reference an exception instance.It would be useful to be able to construct the exception and throw it, so that one could add messages to it - preferably like:{noformat}throwException class="someEx" message="someProblem ${body} ${in.header.someHeader}{noformat}Reference: http://camel.apache.org/exception-clause.html
CAMEL-4574 Tracer - Should have a fixed limit of maxChars to avoid tracing to big message bodies The tracerhttp://camel.apache.org/tracerHas a tracer formatter that has maxChars set as unlimited by default. We should change this to a value of lets say 10000 chars (10K) or possible higher (100K) but that is also a lot considering you would normally log the tracer events.Then maxChars = -1 and 0 can become unlimited as its now. Notice maxChars is the entire logging line, including headers, node ids etc, its (all inclusive). So if you configure maxChars=0, then nothing is outputted from the trace formatter. So maxChars = 0 should be as now, the current behavior, is unlimited.See nabblehttp://camel.465427.n5.nabble.com/tracing-large-messages-tp4921360p4921360.html Improvement Tracer - Should have a fixed limit of maxChars to avoid tracing to big message bodies The tracerhttp://camel.apache.org/tracerHas a tracer formatter that has maxChars set as unlimited by default. We should change this to a value of lets say 10000 chars (10K) or possible higher (100K) but that is also a lot considering you would normally log the tracer events.Then maxChars = -1 and 0 can become unlimited as its now. Notice maxChars is the entire logging line, including headers, node ids etc, its (all inclusive). So if you configure maxChars=0, then nothing is outputted from the trace formatter. So maxChars = 0 should be as now, the current behavior, is unlimited.See nabblehttp://camel.465427.n5.nabble.com/tracing-large-messages-tp4921360p4921360.html
CAMEL-4571 JettyHttpProducer - Should accept HTTP content type header may have quotes around charset, which some HTTP servers may return Some HTTP servers may return back HTTP headers as{code}Content-Type : text/plain; charset="utf-8"{code}Notice the quotes around the charset.This causes Jetty to fail when getting the response body with an exception{code}java.io.UnsupportedEncodingException: "utf-8"at java.lang.StringCoding.decode(StringCoding.java:170)[:1.6.0_26]at java.lang.String.<init>(String.java:443)[:1.6.0_26]at java.io.ByteArrayOutputStream.toString(ByteArrayOutputStream.java:187)[:1.6.0_26]at org.eclipse.jetty.client.ContentExchange.getResponseContent(ContentExchange.java:51)[110:org.eclipse.jetty.client:7.4.1.v20110513]at org.apache.camel.component.jetty.JettyContentExchange.getBody(JettyContentExchange.java:122){code}We need to cater for this and remove quotes from charset. Improvement JettyHttpProducer - Should accept HTTP content type header may have quotes around charset, which some HTTP servers may return Some HTTP servers may return back HTTP headers as{code}Content-Type : text/plain; charset="utf-8"{code}Notice the quotes around the charset.This causes Jetty to fail when getting the response body with an exception{code}java.io.UnsupportedEncodingException: "utf-8"at java.lang.StringCoding.decode(StringCoding.java:170)[:1.6.0_26]at java.lang.String.<init>(String.java:443)[:1.6.0_26]at java.io.ByteArrayOutputStream.toString(ByteArrayOutputStream.java:187)[:1.6.0_26]at org.eclipse.jetty.client.ContentExchange.getResponseContent(ContentExchange.java:51)[110:org.eclipse.jetty.client:7.4.1.v20110513]at org.apache.camel.component.jetty.JettyContentExchange.getBody(JettyContentExchange.java:122){code}We need to cater for this and remove quotes from charset.
CAMEL-4570 DefaultCxfBinding should take consideration of the Exchange.HTTP_RESPONSE_CODE When people use the camel-cxf and camel-http together, he will fix the issue that the fault message is routed back without status code. After digging the code for a while, I find out that the DefaultCxfBinding just ignore the header of Exchange.HTTP_RESPONSE_CODE.   Improvement DefaultCxfBinding should take consideration of the Exchange.HTTP_RESPONSE_CODE When people use the camel-cxf and camel-http together, he will fix the issue that the fault message is routed back without status code. After digging the code for a while, I find out that the DefaultCxfBinding just ignore the header of Exchange.HTTP_RESPONSE_CODE.  
CAMEL-4569 Update Spring Security 3.0.7.RELEASE Using camel-cxf and camel-spring-security, I ran into a strange behaviour : unit tests are working fine in Eclipse but not with Maven. After digging a little, that seems to be a bug with Sping Security itself, as the update from 3.0.6.RELEASE to 3.0.7.RELEASE solved it. I think it's related to [SEC-1809|https://jira.springsource.org/browse/SEC-1809].(BTW, there is no camel-spring-security category available in the components' list to categorize the bug.) Task Update Spring Security 3.0.7.RELEASE Using camel-cxf and camel-spring-security, I ran into a strange behaviour : unit tests are working fine in Eclipse but not with Maven. After digging a little, that seems to be a bug with Sping Security itself, as the update from 3.0.6.RELEASE to 3.0.7.RELEASE solved it. I think it's related to [SEC-1809|https://jira.springsource.org/browse/SEC-1809].(BTW, there is no camel-spring-security category available in the components' list to categorize the bug.)
CAMEL-4565 Allow to send messages using a user supplied pojo interface The basic requirement is that we want to send a user defined object to a camel endpoint. The user code for sending the object should not contain any camel code.So imagine a simple DTO like Person with properties name and age. I would like to use an interface likeinterface PersonSender {  void send(Person person);}So in the use code I code get an implementation injected that I simply could call with sender.send(person);So this is quite similar to our Pojo Messaging @Produce but I don´t want to send a BeanInvocation. Instead I would like to just have the Person object in the body. Ideally this should also support request / response if there is a return type.Additionally it should be configurable if it should send aynschronously or synchronously.Optionally we may also support a handler or Future for the response.To get the interface implementation we should support up to three variants.1) Create the dynamic proxy programmatically2) Define the proxy thiough a spring bean3) Create and inject the proxy using the @Produce annotation (we will need a flag to switch behaviour or use a second annotation) Improvement Allow to send messages using a user supplied pojo interface The basic requirement is that we want to send a user defined object to a camel endpoint. The user code for sending the object should not contain any camel code.So imagine a simple DTO like Person with properties name and age. I would like to use an interface likeinterface PersonSender {  void send(Person person);}So in the use code I code get an implementation injected that I simply could call with sender.send(person);So this is quite similar to our Pojo Messaging @Produce but I don't want to send a BeanInvocation. Instead I would like to just have the Person object in the body. Ideally this should also support request / response if there is a return type.Additionally it should be configurable if it should send aynschronously or synchronously.Optionally we may also support a handler or Future for the response.To get the interface implementation we should support up to three variants.1) Create the dynamic proxy programmatically2) Define the proxy thiough a spring bean3) Create and inject the proxy using the @Produce annotation (we will need a flag to switch behaviour or use a second annotation)
CAMEL-4555 Support nested directories with multiple segment files in the HDFS endpoint consumer A common pattern in HDFS is for multiple segment files underneath a given directory, representing the fragments of data.  Lots of tools understand to automatically merge these segment files (ie hadoop fs -getmerge, pig script loaders).  This patch does the same for the HDFS consumer, using a temporary local directory for the merging.Additionally, tools like pig and oozie understand to look for a _SUCCESS file in one of these directories containing segments.  This file indicates that the segments have been completely written.  This patch additionally skips the directory if a _SUCCESS file is not present. Improvement Support nested directories with multiple segment files in the HDFS endpoint consumer A common pattern in HDFS is for multiple segment files underneath a given directory, representing the fragments of data.  Lots of tools understand to automatically merge these segment files (ie hadoop fs -getmerge, pig script loaders).  This patch does the same for the HDFS consumer, using a temporary local directory for the merging.Additionally, tools like pig and oozie understand to look for a _SUCCESS file in one of these directories containing segments.  This file indicates that the segments have been completely written.  This patch additionally skips the directory if a _SUCCESS file is not present.
CAMEL-4552 Add support for @EndpointInject, @Producer, etc in camel-blueprint as we support in camel-spring The following syntax with Camel 2.8 generates the error{code}public class NmrConsumerRoute extends RouteBuilder{ @EndpointInject(ref="nmrConsumer") private Endpoint demo1ConsumerUri ; @Override public void configure() throws Exception {  from("nmr:demo1").log("${in.body}"); }}<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xmlns:camel="http://camel.apache.org/schema/blueprint"      xsi:schemaLocation="      http://www.osgi.org/xmlns/blueprint/v1.0.0http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd      http://camel.apache.org/schema/blueprinthttp://camel.apache.org/schema/blueprint/camel-blueprint.xsd"> <camelContext xmlns="http://camel.apache.org/schema/blueprint">    <endpoint id="nmrConsumer" uri="nmr:demo1"/> </camelContext></blueprint>{code}Error{code}Caused by: org.apache.camel.FailedToCreateRouteException: Failed tocreate route route8: Route[[From[no uri or ref supplied!]] ->[Log[${in.body}]]] because of Either 'uri' or 'ref' must be specifiedon: org.apache.camel.impl.DefaultRouteContext@2dac2cb7       at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:170)       at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:698)       at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1660)       at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1447)       at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1339)       at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)       at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)       at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1317)       at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:88)       at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:80)       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_26]       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_26]       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_26]       at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_26]       at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)[10:org.apache.aries.blueprint:0.3.1]       at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)[10:org.apache.aries.blueprint:0.3.1]       at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:636)[10:org.apache.aries.blueprint:0.3.1]       ... 24 more{code} Improvement Add support for @EndpointInject, @Producer, etc in camel-blueprint as we support in camel-spring The following syntax with Camel 2.8 generates the error{code}public class NmrConsumerRoute extends RouteBuilder{ @EndpointInject(ref="nmrConsumer") private Endpoint demo1ConsumerUri ; @Override public void configure() throws Exception {  from("nmr:demo1").log("${in.body}"); }}<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xmlns:camel="http://camel.apache.org/schema/blueprint"      xsi:schemaLocation="      http://www.osgi.org/xmlns/blueprint/v1.0.0http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd      http://camel.apache.org/schema/blueprinthttp://camel.apache.org/schema/blueprint/camel-blueprint.xsd"> <camelContext xmlns="http://camel.apache.org/schema/blueprint">    <endpoint id="nmrConsumer" uri="nmr:demo1"/> </camelContext></blueprint>{code}Error{code}Caused by: org.apache.camel.FailedToCreateRouteException: Failed tocreate route route8: Route[[From[no uri or ref supplied!]] ->[Log[${in.body}]]] because of Either 'uri' or 'ref' must be specifiedon: org.apache.camel.impl.DefaultRouteContext@2dac2cb7       at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:170)       at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:698)       at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1660)       at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1447)       at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1339)       at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)       at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)       at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1317)       at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:88)       at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:80)       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_26]       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_26]       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_26]       at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_26]       at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)[10:org.apache.aries.blueprint:0.3.1]       at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)[10:org.apache.aries.blueprint:0.3.1]       at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:636)[10:org.apache.aries.blueprint:0.3.1]       ... 24 more{code}
CAMEL-4551 NotifyBuilder wereSentTo condition fires too eagerly Problem is:NotifyBuilder notify = new NotifyBuilder(context)                 .whenDone(2).wereSentTo("mock:bar");The wereSentTo condition will fire after first message gets to endpoint "mock:bar", so either needs to take preceding whenDone into account, or wereSentTo needs to have a count condition added to it's method signature.See nabble trail for full details:http://camel.465427.n5.nabble.com/NotifyBuilder-condition-fails-to-match-on-an-out-activemq-endpoint-tp4689038p4867857.html Improvement NotifyBuilder wereSentTo condition fires too eagerly Problem is:NotifyBuilder notify = new NotifyBuilder(context)                 .whenDone(2).wereSentTo("mock:bar");The wereSentTo condition will fire after first message gets to endpoint "mock:bar", so either needs to take preceding whenDone into account, or wereSentTo needs to have a count condition added to it's method signature.See nabble trail for full details:http://camel.465427.n5.nabble.com/NotifyBuilder-condition-fails-to-match-on-an-out-activemq-endpoint-tp4689038p4867857.html
CAMEL-4549 Add support for PGP to camel-crypto This is an enhancement which add upon the camel-crypto component.  This patch has the following changes:- Add PGPDataFormat- Introduce the use of bouncycastle, it was previously only a "test" resource Notes: - The camel-crypto "component" did not exist in Jira, could you please add it. - Can you please update the bouncycastle-version from 1.40 to 1.46 in the parent pom.  I temporarily hard coded it into the pom of this project. - The diff doesn't appear to allow binaries, I have a sample pgp keyring in my project, I will upload them as separate filesOne this patch is approved, please let me know and I will go and update the wiki docmentation. Improvement Add support for PGP to camel-crypto This is an enhancement which add upon the camel-crypto component.  This patch has the following changes:- Add PGPDataFormat- Introduce the use of bouncycastle, it was previously only a "test" resource Notes: - The camel-crypto "component" did not exist in Jira, could you please add it. - Can you please update the bouncycastle-version from 1.40 to 1.46 in the parent pom.  I temporarily hard coded it into the pom of this project. - The diff doesn't appear to allow binaries, I have a sample pgp keyring in my project, I will upload them as separate filesOne this patch is approved, please let me know and I will go and update the wiki docmentation.
CAMEL-4547 Add camelContextId to the mdc logging keys For MDC logginghttp://camel.apache.org/mdc-logging.htmlWe should add a camelContextId key in case some people need this information. Improvement Add camelContextId to the mdc logging keys For MDC logginghttp://camel.apache.org/mdc-logging.htmlWe should add a camelContextId key in case some people need this information.
CAMEL-4544 Upgrade to jetty 7.5.3.v20111011 The API of SslContextFactory has changed so a simple dependency update is not enough.http://download.eclipse.org/jetty/7.4.5.v20110725/apidocs/org/eclipse/jetty/http/ssl/SslContextFactory.html#checkConfig()http://download.eclipse.org/jetty/7.5.3.v20111011/apidocs/org/eclipse/jetty/http/ssl/SslContextFactory.html#checkKeyStore()The attached patch update the dependency, correct JettyHttpComponent and doesn't break the existing unit tests. Task Upgrade to jetty 7.5.3.v20111011 The API of SslContextFactory has changed so a simple dependency update is not enough.http://download.eclipse.org/jetty/7.4.5.v20110725/apidocs/org/eclipse/jetty/http/ssl/SslContextFactory.html#checkConfig()http://download.eclipse.org/jetty/7.5.3.v20111011/apidocs/org/eclipse/jetty/http/ssl/SslContextFactory.html#checkKeyStore()The attached patch update the dependency, correct JettyHttpComponent and doesn't break the existing unit tests.
CAMEL-4541 Bean Binding should support interface methods for non-public classes As a user, I'd like to be able to use bean binding for non public classes.Bean binding is a strong selling point for Camel so it would be nice to have it work for non-public classes as well, provided that the target method is available via an implemented interface.eg.{code}// return private implementation of FooInterfaceFooInterface foo = Foos.newInstance();// works fine with plain javafoo.doStuff("Hello");...// This will throw an exception at runtime stating that the method can't be invoked (Illegal Access)from("direct:start").bean(foo, "doStuff").mock("direct:result");{code}The Bean component should at the very least prefer interface methods (which won't cause the above exception) to class methods when a matching method is available on both the class and its interfaces (it currently ignore interface methods).On a side note, its probably faster to look for interface methods first since there are usually less of them.I'll attach a unit test and patch soon. Improvement Bean Binding should support interface methods for non-public classes As a user, I'd like to be able to use bean binding for non public classes.Bean binding is a strong selling point for Camel so it would be nice to have it work for non-public classes as well, provided that the target method is available via an implemented interface.eg.{code}// return private implementation of FooInterfaceFooInterface foo = Foos.newInstance();// works fine with plain javafoo.doStuff("Hello");...// This will throw an exception at runtime stating that the method can't be invoked (Illegal Access)from("direct:start").bean(foo, "doStuff").mock("direct:result");{code}The Bean component should at the very least prefer interface methods (which won't cause the above exception) to class methods when a matching method is available on both the class and its interfaces (it currently ignore interface methods).On a side note, its probably faster to look for interface methods first since there are usually less of them.I'll attach a unit test and patch soon.
CAMEL-4532 improve printer support on unix The current printing component finds the printer by its UNC pathbut that doesn't work on other OS's like Linux.On my Linux box I added a cups server address to /etc/cups/client.confThen the printer are accessible by simply its printername (like: HP_LASERJET_4200).camel-printer cannot find the printer.The camel-printer should be improved to support printing to a printer on a non windows system.  Improvement improve printer support on unix The current printing component finds the printer by its UNC pathbut that doesn't work on other OS's like Linux.On my Linux box I added a cups server address to /etc/cups/client.confThen the printer are accessible by simply its printername (like: HP_LASERJET_4200).camel-printer cannot find the printer.The camel-printer should be improved to support printing to a printer on a non windows system. 
CAMEL-4531 Expose workerCount parameter of Netty NioServerSocketChannelFactory in Camel-Netty Camel-netty component did not implement oio model of netty, we can only use nio one, however it uses default workerCount parameter from Netty, which is cpu_core_threads*2.This is far from enough when the underlying app is a little bit slow, e.g. a traditional transactional application. In this situation NioWorker threads become an obvious bottle neck.I think that exposing workerCount is a very practical yet effective way for one to broaden the usage scenario of camel-netty in various network communication/application environment.I add a workerCount parameter in the configuration, one can use it in the Endpoint URL: "netty:tcp://0.0.0.0:1111?...&workerCount=256&...". I leave the default value to 0 so that one can use Netty default policy by omit the param.I have tested the patch in a 2 core(4 Threads) machine, using 256 workers, it significantly improves the performance by 15 times, than the default parameter of only 8 workers, while CPU usage only increase 5 times. Improvement Expose workerCount parameter of Netty NioServerSocketChannelFactory in Camel-Netty Camel-netty component did not implement oio model of netty, we can only use nio one, however it uses default workerCount parameter from Netty, which is cpu_core_threads*2.This is far from enough when the underlying app is a little bit slow, e.g. a traditional transactional application. In this situation NioWorker threads become an obvious bottle neck.I think that exposing workerCount is a very practical yet effective way for one to broaden the usage scenario of camel-netty in various network communication/application environment.I add a workerCount parameter in the configuration, one can use it in the Endpoint URL: "netty:tcp://0.0.0.0:1111?...&workerCount=256&...". I leave the default value to 0 so that one can use Netty default policy by omit the param.I have tested the patch in a 2 core(4 Threads) machine, using 256 workers, it significantly improves the performance by 15 times, than the default parameter of only 8 workers, while CPU usage only increase 5 times.
CAMEL-4529 camel-jms - Add trace logging for adding/removing correlationIDs trace logging is needed when adding/removing correlation IDs in correlation maps, so we can check logs in case something is wrong. Improvement camel-jms - Add trace logging for adding/removing correlationIDs trace logging is needed when adding/removing correlation IDs in correlation maps, so we can check logs in case something is wrong.
CAMEL-4528 XSLT component - Add JMX to the endpoint, and expose operations to clear the cache, so resources is forced to be reloaded This allows people to force a re-load of the resources using JMX, but still have cache by default.See nabblehttp://camel.465427.n5.nabble.com/Updating-cached-content-without-restart-tp4883378p4883378.html Improvement XSLT component - Add JMX to the endpoint, and expose operations to clear the cache, so resources is forced to be reloaded This allows people to force a re-load of the resources using JMX, but still have cache by default.See nabblehttp://camel.465427.n5.nabble.com/Updating-cached-content-without-restart-tp4883378p4883378.html
CAMEL-4527 osgi unit tests - use karaf integration test project Seehttps://github.com/openengsb/labs-paxexam-karaf/wikiIts going to be part of Karaf 3.0 distribution.The JARs is in central repo, and its ASL2 license.Its using Pax Exam 2 as well, so by using this we also get upgraded to Pax Exam 2 at the same time. Improvement osgi unit tests - use karaf integration test project Seehttps://github.com/openengsb/labs-paxexam-karaf/wikiIts going to be part of Karaf 3.0 distribution.The JARs is in central repo, and its ASL2 license.Its using Pax Exam 2 as well, so by using this we also get upgraded to Pax Exam 2 at the same time.
CAMEL-4525 Upgrade CXF version to 2.4.3 As CXF 2.4.3 is released, it's time to upgrade it :) Task Upgrade CXF version to 2.4.3 As CXF 2.4.3 is released, it's time to upgrade it :)
CAMEL-4522 The sftp improvement adding compression level to the SftpEndpoint It would be a good idea to add the compression to the SFTP component. As it was suggested in this jira: https://issues.apache.org/jira/browse/CAMEL-4506 I'm attaching the class with an example how it might be done.  New Feature The sftp improvement adding compression level to the SftpEndpoint It would be a good idea to add the compression to the SFTP component. As it was suggested in this jira: https://issues.apache.org/jira/browse/CAMEL-4506 I'm attaching the class with an example how it might be done. 
CAMEL-4518 Upgrade to Jackson 1.8.6 Jackson 1.8.6 has been released.Also notice 1.9.0 has been released, but we should at first upgrade to the latest patch release on the 1.8.x branch.And possible backport that upgrade to Camel 2.8 branch.Then we can consider upgrading to 1.9.x Jackson on Camel 2.9.x branch. Task Upgrade to Jackson 1.8.6 Jackson 1.8.6 has been released.Also notice 1.9.0 has been released, but we should at first upgrade to the latest patch release on the 1.8.x branch.And possible backport that upgrade to Camel 2.8 branch.Then we can consider upgrading to 1.9.x Jackson on Camel 2.9.x branch.
CAMEL-4515 Spring-WS should populate Camel Header with the SOAP Header Currently the Camel-Spring-WS component does not support the setting of SOAP Headers and has issues getting them. The current issue getting the SOAP Headers when receiving a message is that the resulting header key includes the namespace.Change the component so that a Camel header "CamelSpringWebserviceSoapHeader" can be populated with an intended SOAP Header for a request, and that this Header is also populated from the SOAP Header on a response. Improvement Spring-WS should populate Camel Header with the SOAP Header Currently the Camel-Spring-WS component does not support the setting of SOAP Headers and has issues getting them. The current issue getting the SOAP Headers when receiving a message is that the resulting header key includes the namespace.Change the component so that a Camel header "CamelSpringWebserviceSoapHeader" can be populated with an intended SOAP Header for a request, and that this Header is also populated from the SOAP Header on a response.
CAMEL-4511 README.txt improvements for camel-example-gae and camel-example-gauth sample projects All the README.txt files for the Camel examples provide a general description of the example and how to run them (along with links for more information), except for the following two sample projects:--> camel-example-gae --> camel-example-gauthThese sample projects do not include general description or execution steps.Please consider improving the README.txt files for the camel-example-gae and camel-example-gauth example projects to be consistent with the rest of the README.txt files.Thanks. Improvement README.txt improvements for camel-example-gae and camel-example-gauth sample projects All the README.txt files for the Camel examples provide a general description of the example and how to run them (along with links for more information), except for the following two sample projects:--> camel-example-gae --> camel-example-gauthThese sample projects do not include general description or execution steps.Please consider improving the README.txt files for the camel-example-gae and camel-example-gauth example projects to be consistent with the rest of the README.txt files.Thanks.
CAMEL-4508 Add option for scheduled polling consumer to emit an null message if there was no messages to poll For example when people poll files, then they may want to react if there is no files to pickup. Currently you would have to use a poll strategy, but we should add an option you can configure on the endpoint, to have it emit an null message instead.sendEmptyMessageWhenIdle - false - If this option is true, and there was no messages to poll, then we simulate processing a single message, by sending an empty message. Improvement Add option for scheduled polling consumer to emit an null message if there was no messages to poll For example when people poll files, then they may want to react if there is no files to pickup. Currently you would have to use a poll strategy, but we should add an option you can configure on the endpoint, to have it emit an null message instead.sendEmptyMessageWhenIdle - false - If this option is true, and there was no messages to poll, then we simulate processing a single message, by sending an empty message.
CAMEL-4505 FileUtils change to make 'copy/delete instead of renaming' feature configurable It would be nice to make the enhancement in the FileUtils 'renameFile' method configurable. Not long ago the 'renameFile' method was changed to try copy/delete after 3 tries of renaming a File. In certain cases you would want the renaming to fail as a way of knowing that the File is opened or being used, otherwise it might cause the file to be copied and not deleted (because it is opened).Apart of this enhancement request I think there is a bug in that area:                    if (!deleteFile(from)) {                    LOG.warn("Renaming file from: {} to: {} failed due cannot delete from file: {} after copy succeeded", new Object[]{from, to, from});                    renamed = false;                }                renamed = true;Shouldn't this be :                if (!deleteFile(from)) {                    LOG.warn("Renaming file from: {} to: {} failed due cannot delete from file: {} after copy succeeded", new Object[]{from, to, from});                    renamed = false;                }                else renamed = true;            Improvement FileUtils change to make 'copy/delete instead of renaming' feature configurable It would be nice to make the enhancement in the FileUtils 'renameFile' method configurable. Not long ago the 'renameFile' method was changed to try copy/delete after 3 tries of renaming a File. In certain cases you would want the renaming to fail as a way of knowing that the File is opened or being used, otherwise it might cause the file to be copied and not deleted (because it is opened).Apart of this enhancement request I think there is a bug in that area:                    if (!deleteFile(from)) {                    LOG.warn("Renaming file from: {} to: {} failed due cannot delete from file: {} after copy succeeded", new Object[]{from, to, from});                    renamed = false;                }                renamed = true;Shouldn't this be :                if (!deleteFile(from)) {                    LOG.warn("Renaming file from: {} to: {} failed due cannot delete from file: {} after copy succeeded", new Object[]{from, to, from});                    renamed = false;                }                else renamed = true;           
CAMEL-4502 Splitter EIP should not output timeout when dumping route as XML The getTimeout() should return null like the other EIP does Task Splitter EIP should not output timeout when dumping route as XML The getTimeout() should return null like the other EIP does
CAMEL-4497 HttpPollingConsumer Get URL should support the property place holders as HttpProducer does When fixing the CAMEL-4489, I just found the HttpPollingConsumer Get URL should support the property place holders as HttpProducer does. Improvement HttpPollingConsumer Get URL should support the property place holders as HttpProducer does When fixing the CAMEL-4489, I just found the HttpPollingConsumer Get URL should support the property place holders as HttpProducer does.
CAMEL-4494 Allow replyTo message header to be different from actual reply queue We have an application that acts as a JMS client in the following setup:* a local queue manager (L) with queues for request (L.REQUEST) and reply (L.REPLY) messages* a remote queue manager (R) with queues for request (R.REQUEST) and reply (R.REPLY) messagesThe remote queue manager is unknown to the client application, and messages sent to L.REQUEST are automatically forwarded to R.REQUEST. Similarly, there is a server application listening on R.REQUEST, posting responses in R.REPLY. The local queue manager is unknown to the server application. Messages sent to R.REPLY are automatically forwarded to L.REPLY.The client needs to put message in L.REQUEST and receive the reply in L.REPLY. However, in the message header it must set R.REPLY as the reply queue because L.REPLY is not known to the server application.The Camel JMS component currently doesn't seem to support this scenario. New Feature Allow replyTo message header to be different from actual reply queue We have an application that acts as a JMS client in the following setup:* a local queue manager (L) with queues for request (L.REQUEST) and reply (L.REPLY) messages* a remote queue manager (R) with queues for request (R.REQUEST) and reply (R.REPLY) messagesThe remote queue manager is unknown to the client application, and messages sent to L.REQUEST are automatically forwarded to R.REQUEST. Similarly, there is a server application listening on R.REQUEST, posting responses in R.REPLY. The local queue manager is unknown to the server application. Messages sent to R.REPLY are automatically forwarded to L.REPLY.The client needs to put message in L.REQUEST and receive the reply in L.REPLY. However, in the message header it must set R.REPLY as the reply queue because L.REPLY is not known to the server application.The Camel JMS component currently doesn't seem to support this scenario.
CAMEL-4492 Be able to check classtype through simple language See http://camel.465427.n5.nabble.com/How-do-I-access-the-message-class-name-from-Simple-td4842269.html for the full context.In short be able to access Object.getClass() for usage in Camel's simple language. Improvement Be able to check classtype through simple language See http://camel.465427.n5.nabble.com/How-do-I-access-the-message-class-name-from-Simple-td4842269.html for the full context.In short be able to access Object.getClass() for usage in Camel's simple language.
CAMEL-4490 Restore ResourceBasedEndpoint in camel-spring to be backwards compatible The Spring dependency removal for Camel 2.9, should mark this component as @deprecated in camel-spring. Task Restore ResourceBasedEndpoint in camel-spring to be backwards compatible The Spring dependency removal for Camel 2.9, should mark this component as @deprecated in camel-spring.
CAMEL-4481 Add setter/getter for preserveMessageQos directly on JmsComponent as we have this for the other options Its a missing option. It makes it easier to configure this on the JmsComponent, so you do not have to do it on each endpoint. Improvement Add setter/getter for preserveMessageQos directly on JmsComponent as we have this for the other options Its a missing option. It makes it easier to configure this on the JmsComponent, so you do not have to do it on each endpoint.
CAMEL-4470 Expose load statistics in Camel Karaf command The new load statistics on CamelContextMBean and RouteMBean should be outputted in the Camel Karaf command. Sub-task Expose load statistics in Camel Karaf command The new load statistics on CamelContextMBean and RouteMBean should be outputted in the Camel Karaf command.
CAMEL-4469 Add TimerListener and TimerListenerManager to make it easier to register periodically background tasks Camel itself and end users may find them in situations where they need a scheduled background task to occur every X'th period.We should introduce a {{TimerListener}} and a {{TimerListenerMananger}} to make this easier. New Feature Add TimerListener and TimerListenerManager to make it easier to register periodically background tasks Camel itself and end users may find them in situations where they need a scheduled background task to occur every X'th period.We should introduce a {{TimerListener}} and a {{TimerListenerMananger}} to make this easier.
CAMEL-4468 Providing Interfaces for MBeans to be able to proxy them This issue proposes to provide interfaces for the Camel JMX MBeans, which allows to (easily) proxy them on the client side (c.f. http://camel.465427.n5.nabble.com/Providing-Interfaces-for-MBeans-to-be-able-to-proxy-them-td4813271.html#a4813298) I would provide the patch for this but before, I ask the core developers for code conventions in terms of the interfaces: In which package should the interfaces be put and how should they be named?Should they be put to the MBeans classes in org.apache.camel.management? But how to name them then, since for example IManagedRoute would break current camel naming conventions and identifiers such as ManagedRoute are already taken by the class implementations. Improvement Providing Interfaces for MBeans to be able to proxy them This issue proposes to provide interfaces for the Camel JMX MBeans, which allows to (easily) proxy them on the client side (c.f. http://camel.465427.n5.nabble.com/Providing-Interfaces-for-MBeans-to-be-able-to-proxy-them-td4813271.html#a4813298) I would provide the patch for this but before, I ask the core developers for code conventions in terms of the interfaces: In which package should the interfaces be put and how should they be named?Should they be put to the MBeans classes in org.apache.camel.management? But how to name them then, since for example IManagedRoute would break current camel naming conventions and identifiers such as ManagedRoute are already taken by the class implementations.
CAMEL-4465 Add OSGi integration for camel-sql Create osgi integration tests for camel-sql component. Sub-task Add OSGi integration for camel-sql Create osgi integration tests for camel-sql component.
CAMEL-4462 Align removeProperty and getProperty in Exchange API For consistency, the following methods should be added:removeProperty(String, Class<T>):TremoveProperty(String, Object):ObjectremoveProperty(String, Object, Class<T>):T Improvement Align removeProperty and getProperty in Exchange API For consistency, the following methods should be added:removeProperty(String, Class<T>):TremoveProperty(String, Object):ObjectremoveProperty(String, Object, Class<T>):T
CAMEL-4458 Test failure in SpringAsyncDeadLetterChannelExecutorServiceRefTest : IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry.	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1164)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:240)	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)	at org.apache.camel.spring.processor.async.SpringAsyncDeadLetterChannelExecutorServiceRefTest.createApplicationContext(SpringAsyncDeadLetterChannelExecutorServiceRefTest.java:31)	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:54)	at junit.framework.TestCase.runBare(TestCase.java:132)	at org.apache.camel.TestSupport.runBare(TestSupport.java:59)	at junit.framework.TestResult$1.protect(TestResult.java:110)	at junit.framework.TestResult.runProtected(TestResult.java:128)	at junit.framework.TestResult.run(TestResult.java:113)	at junit.framework.TestCase.run(TestCase.java:124)	at junit.framework.TestSuite.runTest(TestSuite.java:232)	at junit.framework.TestSuite.run(TestSuite.java:227)	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: java.lang.IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry.	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:998)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:150)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:82)	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:922)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:82)	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:922)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:444)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:986)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:150)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:246)	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:143)	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1859)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1787)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1580)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1472)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1360)	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1338)	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)	... 24 more Test Test failure in SpringAsyncDeadLetterChannelExecutorServiceRefTest : IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry.	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1164)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:240)	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:428)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)	at org.apache.camel.spring.processor.async.SpringAsyncDeadLetterChannelExecutorServiceRefTest.createApplicationContext(SpringAsyncDeadLetterChannelExecutorServiceRefTest.java:31)	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:54)	at junit.framework.TestCase.runBare(TestCase.java:132)	at org.apache.camel.TestSupport.runBare(TestSupport.java:59)	at junit.framework.TestResult$1.protect(TestResult.java:110)	at junit.framework.TestResult.runProtected(TestResult.java:128)	at junit.framework.TestResult.run(TestResult.java:113)	at junit.framework.TestCase.run(TestCase.java:124)	at junit.framework.TestSuite.runTest(TestSuite.java:232)	at junit.framework.TestSuite.run(TestSuite.java:227)	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)Caused by: java.lang.IllegalArgumentException: ExecutorServiceRef myAsyncPool not found in registry.	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:998)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:150)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:82)	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:922)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:82)	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:922)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.processor.interceptor.TraceInterceptor.doStart(TraceInterceptor.java:444)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:986)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DefaultChannel.doStart(DefaultChannel.java:150)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:49)	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:70)	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:78)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:246)	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:143)	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1859)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1787)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1580)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1472)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1360)	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1338)	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)	... 24 more
CAMEL-4456 camel-mail - Add option to control if mail folder should be closed after poll It should be possible to control if the mail folder should be closed after a poll or not.For example if people is routing mails over SEDA or other async endpoints, then we should not close the mail folder before the mail message is being processed async.We have a similar option on mina,netty etc. named {{disconnect}}. So the option could be named like that as well. Improvement camel-mail - Add option to control if mail folder should be closed after poll It should be possible to control if the mail folder should be closed after a poll or not.For example if people is routing mails over SEDA or other async endpoints, then we should not close the mail folder before the mail message is being processed async.We have a similar option on mina,netty etc. named {{disconnect}}. So the option could be named like that as well.
CAMEL-4445 Simple language - Add support for nested functions With the improved parser we can add support for nesting functions.For example people may want to lookup from a properties file using a key from a header{code}.setHeader("myHeader").simple("${properties:${header.beer}}"){code}There has been other reports in the community for nested functions when defining the properties component in use. New Feature Simple language - Add support for nested functions With the improved parser we can add support for nesting functions.For example people may want to lookup from a properties file using a key from a header{code}.setHeader("myHeader").simple("${properties:${header.beer}}"){code}There has been other reports in the community for nested functions when defining the properties component in use.
CAMEL-4437 camel-hl7 - Upgrade HAPI HAPI has released 1.2http://hl7api.sourceforge.net/We are currently on version 1.0.1 Task camel-hl7 - Upgrade HAPI HAPI has released 1.2http://hl7api.sourceforge.net/We are currently on version 1.0.1
CAMEL-4432 camel-example-spring-ws - missing jaxb.index files in distribution The follow file is missing in the dist src/main/resources/org/apache/camel/example/server/model/jaxb.indexIt should be included.Because the file is missing, it cases the example to not work. Task camel-example-spring-ws - missing jaxb.index files in distribution The follow file is missing in the dist src/main/resources/org/apache/camel/example/server/model/jaxb.indexIt should be included.Because the file is missing, it cases the example to not work.
CAMEL-4430 Using the ClientFactoryBean instead of ProxyFactoryBean to create the Client for the CxfProducer As the proxy lifecycle cleanup work are done in CXF 2.4.3, we are facing some test failed in camel-cxf.After digging the code, I found the proxy instance which is created by the CxfProxyFactoryBean will be GC and the CXF client which is used in CxfProducer will be affect. The endpoint which is set on the conduit will gone, and CxfProducer will complain it with a NPE exception. We can use the CxfClientFactoryBean to create client instead of CxfProxyFactoryBean to avoid the GC and NPE exception.I checked the difference between using CxfProxyFactoryBean and CxfClientFactoryBean, they are same in most case.We just need to take care of handler setting part which is used in JAXWS frontend.  Improvement Using the ClientFactoryBean instead of ProxyFactoryBean to create the Client for the CxfProducer As the proxy lifecycle cleanup work are done in CXF 2.4.3, we are facing some test failed in camel-cxf.After digging the code, I found the proxy instance which is created by the CxfProxyFactoryBean will be GC and the CXF client which is used in CxfProducer will be affect. The endpoint which is set on the conduit will gone, and CxfProducer will complain it with a NPE exception. We can use the CxfClientFactoryBean to create client instead of CxfProxyFactoryBean to avoid the GC and NPE exception.I checked the difference between using CxfProxyFactoryBean and CxfClientFactoryBean, they are same in most case.We just need to take care of handler setting part which is used in JAXWS frontend. 
CAMEL-4429 CXFProducer should tell CXF to ignore the part response handling  when it uses MESSSAGE dataformat IN CXF-3788, CXF HTTPConduit will handle the partial response when the HTTP response code is 202 nor matter the operation is oneway or not. It will cause the camel-cxf producer wait for the response for server for ever. CXF-3796 introduces a new message header to help us to workaround this issue, we need to set this header in CxfProducer when the data format is MESSAGE.  Improvement CXFProducer should tell CXF to ignore the part response handling  when it uses MESSSAGE dataformat IN CXF-3788, CXF HTTPConduit will handle the partial response when the HTTP response code is 202 nor matter the operation is oneway or not. It will cause the camel-cxf producer wait for the response for server for ever. CXF-3796 introduces a new message header to help us to workaround this issue, we need to set this header in CxfProducer when the data format is MESSAGE. 
CAMEL-4426 mask username and passwords in endpoint uris when logging We have logic in place which can mask username/paswords etc. We just need to make sure that there is not a gap somewhere where the logic wasn't in use, as an end user reported an issue recently. So this is a ticket to not forget about this and look into it.See nabblehttp://camel.465427.n5.nabble.com/usernames-and-passwords-in-logs-tp4753576p4753576.html Improvement mask username and passwords in endpoint uris when logging We have logic in place which can mask username/paswords etc. We just need to make sure that there is not a gap somewhere where the logic wasn't in use, as an end user reported an issue recently. So this is a ticket to not forget about this and look into it.See nabblehttp://camel.465427.n5.nabble.com/usernames-and-passwords-in-logs-tp4753576p4753576.html
CAMEL-4424 Missing saxon-sql 9.1.0.8 dependency for camel-saxon in Maven Central The camel-saxon jar has a dependency on net.sf.saxon:saxon-sql:9.1.0.8. When using Maven Central and depending on camel-saxon this doesn't work, since Maven Central does not provide this version of this jar:----[WARNING] The POM for net.sf.saxon:saxon-sql:jar:9.1.0.8 is missing, no dependency information available----Looking at http://search.maven.org/#browse%7C1332070261 I indeed only find versions 7.9.1 and 8.7. Wish Missing saxon-sql 9.1.0.8 dependency for camel-saxon in Maven Central The camel-saxon jar has a dependency on net.sf.saxon:saxon-sql:9.1.0.8. When using Maven Central and depending on camel-saxon this doesn't work, since Maven Central does not provide this version of this jar:----[WARNING] The POM for net.sf.saxon:saxon-sql:jar:9.1.0.8 is missing, no dependency information available----Looking at http://search.maven.org/#browse%7C1332070261 I indeed only find versions 7.9.1 and 8.7.
CAMEL-4413 Trim camel-web console to make it more lighter There is possible some leftover java script libraries in camel-web, which we should remove. They were used in the past for syntax highlighting routes when showing as xml, as well having in browser editing using bespin javascript editor. We should trim the camel-web to make it lighter.Also possible maybe we can trim/reduce other JARs. Improvement Trim camel-web console to make it more lighter There is possible some leftover java script libraries in camel-web, which we should remove. They were used in the past for syntax highlighting routes when showing as xml, as well having in browser editing using bespin javascript editor. We should trim the camel-web to make it lighter.Also possible maybe we can trim/reduce other JARs.
CAMEL-4412 ServletEndpoint doesn't support to create the producer After applied the patch of CAMEL-4410, I found we don't use the ServletEndpoint to create the producer.It could be better if we throw the exception when the people wants to create producer at that point.  Improvement ServletEndpoint doesn't support to create the producer After applied the patch of CAMEL-4410, I found we don't use the ServletEndpoint to create the producer.It could be better if we throw the exception when the people wants to create producer at that point. 
CAMEL-4411 DefaultPackageScanClassResolver should skip the bundleresource url when it try to find the classes As the bundleresource url is used in eclipse which is not a generally used, and DefaultPackageScanClassResolver just look up the class by using the file directory lookup, so we should skip the bundleresource url look up in the DefaultPackageScanClassResolver. Improvement DefaultPackageScanClassResolver should skip the bundleresource url when it try to find the classes As the bundleresource url is used in eclipse which is not a generally used, and DefaultPackageScanClassResolver just look up the class by using the file directory lookup, so we should skip the bundleresource url look up in the DefaultPackageScanClassResolver.
CAMEL-4410 The URI of the ServletEndpoint exposed to the JMX is not accurate As an example a ServletEndpoint with the URI 'servlet:///test?matchOnUriPrefix=true&servletName=test' is exposed as '/test' on the JMX-MBeanServer! For details see:http://camel.465427.n5.nabble.com/backslashes-on-Endpoint-URI-by-JConsole-td4757427.html Improvement The URI of the ServletEndpoint exposed to the JMX is not accurate As an example a ServletEndpoint with the URI 'servlet:///test?matchOnUriPrefix=true&servletName=test' is exposed as '/test' on the JMX-MBeanServer! For details see:http://camel.465427.n5.nabble.com/backslashes-on-Endpoint-URI-by-JConsole-td4757427.html
CAMEL-4408 Fix OSGi-exports of camel-soap The OSGi exports of camel-soap is not correct. If I run exports in karaf I get the following output. {code} karaf@localhost>  exports 135       ID Packages      135 org.apache.camel.dataformat.soap; version="0.0.0"      135 org.apache.camel.dataformat.soap.name; version="0.0.0"      135 org.xmlsoap.schemas.soap.envelope; version="2.8.1.SNAPSHOT" {code} I think org.apache.camel.dataformat.soap and org.apache.camel.dataformat.soap.name should be exported with version="2.8.1.SNAPSHOT" ???? (The same issue is on trunk). Improvement Fix OSGi-exports of camel-soap The OSGi exports of camel-soap is not correct. If I run exports in karaf I get the following output. {code} karaf@localhost>  exports 135       ID Packages      135 org.apache.camel.dataformat.soap; version="0.0.0"      135 org.apache.camel.dataformat.soap.name; version="0.0.0"      135 org.xmlsoap.schemas.soap.envelope; version="2.8.1.SNAPSHOT" {code} I think org.apache.camel.dataformat.soap and org.apache.camel.dataformat.soap.name should be exported with version="2.8.1.SNAPSHOT" ???? (The same issue is on trunk).
CAMEL-4403 camel-scala - Expressions is favored over Predicates in the DSL and languages The camel-scala DSL crates Expression for languages used in the DSL, regardless if they are to be used as Prediacates.The Java DSL is capable of creating a Predicate instead. For example in a Content Based Router, InterceptFrom -> When etc.We ought to look into being able to supply Predicate when a predicate is really to be used.See ScalaPredicateThis affects for example the improved simple language which operates different accordingly to whether its a predicate or expression being evaluated. So in camel-scala this mode will always be Expression, despite a Predicate was to be used. Improvement camel-scala - Expressions is favored over Predicates in the DSL and languages The camel-scala DSL crates Expression for languages used in the DSL, regardless if they are to be used as Prediacates.The Java DSL is capable of creating a Predicate instead. For example in a Content Based Router, InterceptFrom -> When etc.We ought to look into being able to supply Predicate when a predicate is really to be used.See ScalaPredicateThis affects for example the improved simple language which operates different accordingly to whether its a predicate or expression being evaluated. So in camel-scala this mode will always be Expression, despite a Predicate was to be used.
CAMEL-4402 OsgiCamelContextPublisher should publish the camel context with the camelName If there are more than one camel context in the OSGi bundle, current OSGiCamelContextPublisher cannot handle it. Improvement OsgiCamelContextPublisher should publish the camel context with the camelName If there are more than one camel context in the OSGi bundle, current OSGiCamelContextPublisher cannot handle it.
CAMEL-4391 Support for marking a CamelProxy as a primary or non-primary spring bean It would be very handy if a camelProxy bean (which is also a spring bean) could be defined as primary (see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html, search for @Primary).I have a content based route, which delegates to some other beans depending on argument values to the proxy. All three beans implement the same interface. So if I could just mark the proxy as primary that bean would be preferred.Other usecases where you would like it not to be primary probably exist as well.I suggest adding an optional boolean attribute "primary" which is by default true. New Feature Support for marking a CamelProxy as a primary or non-primary spring bean It would be very handy if a camelProxy bean (which is also a spring bean) could be defined as primary (see http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/htmlsingle/spring-framework-reference.html, search for @Primary).I have a content based route, which delegates to some other beans depending on argument values to the proxy. All three beans implement the same interface. So if I could just mark the proxy as primary that bean would be preferred.Other usecases where you would like it not to be primary probably exist as well.I suggest adding an optional boolean attribute "primary" which is by default true.
CAMEL-4390 Upgrade hawtdb to 1.6 HawtDB 1.6 has been released. Task Upgrade hawtdb to 1.6 HawtDB 1.6 has been released.
CAMEL-4386 bean component - Invoking a static method should not require an instance of the bean Just a ticket to remember to look into this, to see whats the current behavior. As we should be able to invoke a static method directly on a bean type without an instance of the bean.See nabblehttp://camel.465427.n5.nabble.com/Static-method-in-route-tp4736318p4736318.html Improvement bean component - Invoking a static method should not require an instance of the bean Just a ticket to remember to look into this, to see whats the current behavior. As we should be able to invoke a static method directly on a bean type without an instance of the bean.See nabblehttp://camel.465427.n5.nabble.com/Static-method-in-route-tp4736318p4736318.html
CAMEL-4384 camel-jms - Request/Reply - Allow null messages to be send back as replies when using ObjectMessage type See CAMEL-3354 Improvement camel-jms - Request/Reply - Allow null messages to be send back as replies when using ObjectMessage type See CAMEL-3354
CAMEL-4380 FactoryFinder should support to find the class with a right version of class Current OSGiFactoryFinder doesn't support to find the class with a right version.Here is the mail thread which discusses about it.http://camel.465427.n5.nabble.com/Running-multiple-versions-of-Camel-concurrently-tp4733518p4733518.html Improvement FactoryFinder should support to find the class with a right version of class Current OSGiFactoryFinder doesn't support to find the class with a right version.Here is the mail thread which discusses about it.http://camel.465427.n5.nabble.com/Running-multiple-versions-of-Camel-concurrently-tp4733518p4733518.html
CAMEL-4374 The debugger doesn't work in the CamelSpringTestSupport with route defined in XML The debugger doesn't work in the CamelSpringTestSupport with route defined in XML. This issue is related to CAMEL-4368 (closed and I cannot re-open).I've created a patch with 2 new tests that show the problem and a solution (check the doSetup() method in the tests). However I think this could be improved by moving the SpringCamelContext.setNoStart(true); to CamelSpringTestSupport). Improvement The debugger doesn't work in the CamelSpringTestSupport with route defined in XML The debugger doesn't work in the CamelSpringTestSupport with route defined in XML. This issue is related to CAMEL-4368 (closed and I cannot re-open).I've created a patch with 2 new tests that show the problem and a solution (check the doSetup() method in the tests). However I think this could be improved by moving the SpringCamelContext.setNoStart(true); to CamelSpringTestSupport).
CAMEL-4372 Add FiltersRef option for the Jetty component As there are lots of handy filter could be used in Jetty, it could be useful if we can set the filter list for camel-jetty component. New Feature Add FiltersRef option for the Jetty component As there are lots of handy filter could be used in Jetty, it could be useful if we can set the filter list for camel-jetty component.
CAMEL-4369 bindy - Add fixed to BindyType so its easier to use in Camel routes See nabblehttp://camel.465427.n5.nabble.com/Trying-to-set-fixed-length-bindy-type-data-formatter-in-RouteBuilder-tp4725299p4725299.htmlThe fixed type is missing from BindyType so its easier to use in the route dsl. Improvement bindy - Add fixed to BindyType so its easier to use in Camel routes See nabblehttp://camel.465427.n5.nabble.com/Trying-to-set-fixed-length-bindy-type-data-formatter-in-RouteBuilder-tp4725299p4725299.htmlThe fixed type is missing from BindyType so its easier to use in the route dsl.
CAMEL-4368 The debug doesn't work in the CamelSpringTestSupport Here is the mail thread about this issue.http://camel.465427.n5.nabble.com/camel-testng-Start-debugger-with-CamelSpringTestSupport-tp4716094p4716094.html Improvement The debug doesn't work in the CamelSpringTestSupport Here is the mail thread about this issue.http://camel.465427.n5.nabble.com/camel-testng-Start-debugger-with-CamelSpringTestSupport-tp4716094p4716094.html
CAMEL-4366 Expose Exchange Load statistics in Route and Context MBeans Add load statistics exposing a exponentially moving weighted average for the number of inflight exchanges in routes and the whole CamelContext. Initially the window is fixed to 1m, 5m and 15m, just like Linux load figures. New Feature Expose Exchange Load statistics in Route and Context MBeans Add load statistics exposing a exponentially moving weighted average for the number of inflight exchanges in routes and the whole CamelContext. Initially the window is fixed to 1m, 5m and 15m, just like Linux load figures.
CAMEL-4364 Simple language - OGNL - keys to access Map should support quotes in the provided key name Current to access a map from the message body you have to provide the key name without any enclosing quotes as: .when().simple("${body.property[foo]} == 'King Kong'")However we should support both notations as people may enclose using quotes as this is needed in Java .when().simple("${body.property['foo']} == 'King Kong'")And the quotes can also be double quotes. Improvement Simple language - OGNL - keys to access Map should support quotes in the provided key name Current to access a map from the message body you have to provide the key name without any enclosing quotes as: .when().simple("${body.property[foo]} == 'King Kong'")However we should support both notations as people may enclose using quotes as this is needed in Java .when().simple("${body.property['foo']} == 'King Kong'")And the quotes can also be double quotes.
CAMEL-4363 Allow for static file handlers to be added to the jetty component As per the discussion here: http://camel.465427.n5.nabble.com/Serving-static-pages-with-JettyComponent-td4711870.htmlA Jetty ResourceHandler or a ServletContextHandler cannot be added to the jetty server to serve up pages that are not processed via camel routes. It would be nice to utilize the currently running jetty server to serve up pages/resources other than those represented via camel routes. New Feature Allow for static file handlers to be added to the jetty component As per the discussion here: http://camel.465427.n5.nabble.com/Serving-static-pages-with-JettyComponent-td4711870.htmlA Jetty ResourceHandler or a ServletContextHandler cannot be added to the jetty server to serve up pages that are not processed via camel routes. It would be nice to utilize the currently running jetty server to serve up pages/resources other than those represented via camel routes.
CAMEL-4360 Camel test - Debugger should be explicit enabled if end user want to leverage it The debugger adds a little overhead and silently enables tracer as well. We should have the end user to explicit enable the debugger if he need to use it from his unit tests. Improvement Camel test - Debugger should be explicit enabled if end user want to leverage it The debugger adds a little overhead and silently enables tracer as well. We should have the end user to explicit enable the debugger if he need to use it from his unit tests.
CAMEL-4356 faster way of testing for file existence when storing a file the ftp component checks if the file exists in the endpoint, this is done by listing the content of the destination folder and looping through all files listed. the list operation takes a long time when the destination folder contains hundreds of files. instead of listing for all files the component can simply list for the file it is interested on, this way the number of files contained in destination folder won't affect the time it takes the producer to process the exchange. I currently have a case where delivering to an endpoint is taking more than a minute because of this issue. Both ftp and sftp libraries used supports listing for a single file so the changes would be the following: {code:title=FtpOperations.java}public boolean existsFile(String name) throws GenericFileOperationFailedException {   String[] names = client.listNames(name);   if (names == null) {     return false;   }   return (names.lenght >= 1); } {code}{code:title=SftpOperations.java}public boolean existsFile(String name) throws GenericFileOperationFailedException {   Vector files = channel.ls(name);   if (names == null) {     return false;   }   return (names.size >= 1); }{code} Improvement faster way of testing for file existence when storing a file the ftp component checks if the file exists in the endpoint, this is done by listing the content of the destination folder and looping through all files listed. the list operation takes a long time when the destination folder contains hundreds of files. instead of listing for all files the component can simply list for the file it is interested on, this way the number of files contained in destination folder won't affect the time it takes the producer to process the exchange. I currently have a case where delivering to an endpoint is taking more than a minute because of this issue. Both ftp and sftp libraries used supports listing for a single file so the changes would be the following: {code:title=FtpOperations.java}public boolean existsFile(String name) throws GenericFileOperationFailedException {   String[] names = client.listNames(name);   if (names == null) {     return false;   }   return (names.lenght >= 1); } {code}{code:title=SftpOperations.java}public boolean existsFile(String name) throws GenericFileOperationFailedException {   Vector files = channel.ls(name);   if (names == null) {     return false;   }   return (names.size >= 1); }{code}
CAMEL-4355 CxfRsProducer - Should use LRUSoftCache and start/stop the cache according to the producers lifecycle The CxfRsProducer uses an internal LRUCache. Now we have a LRUSoftCache that uses soft reference, so we can switch to use that directly.Also the cache should be started/stopped in the doStart/doStop methods of the CxfRsProducer itself, to ensure proper house cleaning. Improvement CxfRsProducer - Should use LRUSoftCache and start/stop the cache according to the producers lifecycle The CxfRsProducer uses an internal LRUCache. Now we have a LRUSoftCache that uses soft reference, so we can switch to use that directly.Also the cache should be started/stopped in the doStart/doStop methods of the CxfRsProducer itself, to ensure proper house cleaning.
CAMEL-4353 Using transacted in Java DSL without Spring XML setting up TX manager should report better error when not able to find a TX manager in the registry See nabblehttp://camel.465427.n5.nabble.com/Transaction-configuration-in-Java-DSL-tp4711625p4711625.htmlYou will see an error likeException in thread "main" org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Policy[ref:null] <<< We should improve that and report a more details error. Improvement Using transacted in Java DSL without Spring XML setting up TX manager should report better error when not able to find a TX manager in the registry See nabblehttp://camel.465427.n5.nabble.com/Transaction-configuration-in-Java-DSL-tp4711625p4711625.htmlYou will see an error likeException in thread "main" org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Policy[ref:null] <<< We should improve that and report a more details error.
CAMEL-4351 Impossible to use placeholders in endpointName and serviceName attributes of cxf:cxfEndpoint Here is how endpointName and serviceName are declared in XSD.{code}<xsd:attribute name="endpointName" type="xsd:QName" /> <xsd:attribute name="serviceName" type="xsd:QName" /> {code}So the xml parser fails to parse the following element{code}<cxf:cxfEndpoint id="service" address="${http.service.endpoint.path}" wsdlURL="${http.service.wsdl.path}"    serviceName="${http.service.serviceName}"    endpointName="${http.service.portName}"></cxf:cxfEndpoint>{code} Improvement Impossible to use placeholders in endpointName and serviceName attributes of cxf:cxfEndpoint Here is how endpointName and serviceName are declared in XSD.{code}<xsd:attribute name="endpointName" type="xsd:QName" /> <xsd:attribute name="serviceName" type="xsd:QName" /> {code}So the xml parser fails to parse the following element{code}<cxf:cxfEndpoint id="service" address="${http.service.endpoint.path}" wsdlURL="${http.service.wsdl.path}"    serviceName="${http.service.serviceName}"    endpointName="${http.service.portName}"></cxf:cxfEndpoint>{code}
CAMEL-4349 Add encryptionMethod option to nagios to easily set encryption Setting the encryption mode on camel-nagios is a bit cumbersome, as you would need to crate a custom NagiosSetting object with the settings.We should expose the encryptionMode in the uri, so people can configure it like the other parameters. Improvement Add encryptionMethod option to nagios to easily set encryption Setting the encryption mode on camel-nagios is a bit cumbersome, as you would need to crate a custom NagiosSetting object with the settings.We should expose the encryptionMode in the uri, so people can configure it like the other parameters.
CAMEL-4348 Add String->TimeZone converter so that time zone can be specified for camel-quartz It is possible to specify a time zone for Quartz, however, in order for that to work Camel needs a String to TimeZone type converter since Quartz requires a TimeZone.Attached is a patch containing a type converter that works. By setting the type converter explicitly on the context like this,{quote}context.getTypeConverterRegistry().addTypeConverter(TimeZone.class, String.class, new String2TimeZoneConverter());{quote}it is possible to create an endpoint URI looking like this:{quote}quartz://groupName/timerName?cron=<cronExpression>&trigger.timeZone=Europe/Stockholm{quote}However, it would be really useful if this type converter could be included in camel-core. This has been discussed on the camel user list:http://camel.465427.n5.nabble.com/How-to-specify-a-time-zone-for-camel-quartz-td4700077.html Improvement Add String->TimeZone converter so that time zone can be specified for camel-quartz It is possible to specify a time zone for Quartz, however, in order for that to work Camel needs a String to TimeZone type converter since Quartz requires a TimeZone.Attached is a patch containing a type converter that works. By setting the type converter explicitly on the context like this,{quote}context.getTypeConverterRegistry().addTypeConverter(TimeZone.class, String.class, new String2TimeZoneConverter());{quote}it is possible to create an endpoint URI looking like this:{quote}quartz://groupName/timerName?cron=<cronExpression>&trigger.timeZone=Europe/Stockholm{quote}However, it would be really useful if this type converter could be included in camel-core. This has been discussed on the camel user list:http://camel.465427.n5.nabble.com/How-to-specify-a-time-zone-for-camel-quartz-td4700077.html
CAMEL-4346 Allow files to be chmod-ed after being produced sftp Some communication partners require files to be chmod-ed after being transfered to ensure locking. (instead of "done" files)This is how it works:from("file:/in").to("sftp:user@host/out&password=secret&chmod=640") New Feature Allow files to be chmod-ed after being produced sftp Some communication partners require files to be chmod-ed after being transfered to ensure locking. (instead of "done" files)This is how it works:from("file:/in").to("sftp:user@host/out&password=secret&chmod=640")
CAMEL-4343 Add method to test kit to control if CamelContext should be auto started or not By default CamelContext is started when using the Camel test kit. We should add some method people can override to more easily control if CamelContext should be started or not.This works well with advice with, where people may replace endpoints, remove parts of routes, etc. So we should prefer to start CamelContext *after* the advice has been executed.For example people should then be able to run the tests without have X components on the classpath, if they got replace in the advice. Improvement Add method to test kit to control if CamelContext should be auto started or not By default CamelContext is started when using the Camel test kit. We should add some method people can override to more easily control if CamelContext should be started or not.This works well with advice with, where people may replace endpoints, remove parts of routes, etc. So we should prefer to start CamelContext *after* the advice has been executed.For example people should then be able to run the tests without have X components on the classpath, if they got replace in the advice.
CAMEL-4342 Validator component - Should be able to validate from a File payload The validator component should be able to validate a message which is from a java.io.File.What is needed is a couple of type converters to ensure this. Improvement Validator component - Should be able to validate from a File payload The validator component should be able to validate a message which is from a java.io.File.What is needed is a couple of type converters to ensure this.
CAMEL-4340 Adjust BrowsableEndpoint with option to dictate if message body can be omitted If an endpoint is browsable, then it implements the BrowsableEndpoint interface.It currently has this API{code}    List<Exchange> getExchanges();}{code}We should improve the API by adding a boolean to indicate the message body can be omitted. For example if the body is not really needed. Or if loading the body could potentially consume a lot of memory etc.{code}    List<Exchange> getExchanges(boolean omitMessageBodyAllowed);}{code}We could also go a bit further and allow an API to query depth size, return a range, return an iterator, etc.We can keep the old API to be backwards compatible and mark it as @deprecated. Improvement Adjust BrowsableEndpoint with option to dictate if message body can be omitted If an endpoint is browsable, then it implements the BrowsableEndpoint interface.It currently has this API{code}    List<Exchange> getExchanges();}{code}We should improve the API by adding a boolean to indicate the message body can be omitted. For example if the body is not really needed. Or if loading the body could potentially consume a lot of memory etc.{code}    List<Exchange> getExchanges(boolean omitMessageBodyAllowed);}{code}We could also go a bit further and allow an API to query depth size, return a range, return an iterator, etc.We can keep the old API to be backwards compatible and mark it as @deprecated.
CAMEL-4339 AdviceWith - Add fluent builder to easily replace the from endpoint To make it easier to replace the route consumer with something else. For example a JMS with a SEDA to make it easier to unit test. Improvement AdviceWith - Add fluent builder to easily replace the from endpoint To make it easier to replace the route consumer with something else. For example a JMS with a SEDA to make it easier to unit test.
CAMEL-4338 Managed browse endpoint - Should have boolean parameter to indicate if payload to be included or not JMX has operations to browse endpoints. For example a JMS endpoint. It may have a lot of messages, and a message may contain a lot of data.The exposed JMX operations should have a boolean to indicate if the payload should be included or not.This can reduce the data to fetch but also transfer over the network to the JMX console. Improvement Managed browse endpoint - Should have boolean parameter to indicate if payload to be included or not JMX has operations to browse endpoints. For example a JMS endpoint. It may have a lot of messages, and a message may contain a lot of data.The exposed JMX operations should have a boolean to indicate if the payload should be included or not.This can reduce the data to fetch but also transfer over the network to the JMX console.
CAMEL-4337 Bindy - Proposal: Evaluate DataField annotation properties trim, length, clip when marshalling BindyCsvDataFormat When generating a csv file from a model object with a DataField annotated property the DataField properties trim, length, clip should be evaluated in order to control the maximum length of a field in the csv record.Example:@DataField(pos = 3, trim = true, length = 20, clip = true)private String lastName;This should produce a field in the csv record, which length is not greater than 20 even though lastName may be longer and that has no leading or trailing spaces.For example this would be useful when dumping the csv file into a database.Please see the attached patch for changes in BindyCsvFactory and a unit test. Improvement Bindy - Proposal: Evaluate DataField annotation properties trim, length, clip when marshalling BindyCsvDataFormat When generating a csv file from a model object with a DataField annotated property the DataField properties trim, length, clip should be evaluated in order to control the maximum length of a field in the csv record.Example:@DataField(pos = 3, trim = true, length = 20, clip = true)private String lastName;This should produce a field in the csv record, which length is not greater than 20 even though lastName may be longer and that has no leading or trailing spaces.For example this would be useful when dumping the csv file into a database.Please see the attached patch for changes in BindyCsvFactory and a unit test.
CAMEL-4336 camel-cxf payload should take consideration of the namespace which is defined in the soap envelope Current camel-cxf PAYLOAD data formate can handle the namespace which is used as the element namespace, but it can not take consideration of namespace from soap envelope which is used in the attribute value likes xsi:type="xsd:String",The soap envelop could be{code}<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"       xmlns:ns1="http://cxf.component.camel.apache.org/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:ns2="http://cxf.component.camel.apache.org/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">       <soap:Body>        <ns1:echo><ns2:arg0 xsi:type="xsd:string\">Hello World!</ns2:arg0></ns1:echo>        </soap:Body></soap:Envelope>    {code}The element in the PAYLOAD message body should be like this{code}<ns1:echo xmlns:ns1="http://cxf.component.camel.apache.org/" xmlns:ns2="http://cxf.component.camel.apache.org/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  <ns2:arg0 xsi:type="xsd:string">Hello World!</ns2:arg0></ns1:echo>{code} Improvement camel-cxf payload should take consideration of the namespace which is defined in the soap envelope Current camel-cxf PAYLOAD data formate can handle the namespace which is used as the element namespace, but it can not take consideration of namespace from soap envelope which is used in the attribute value likes xsi:type="xsd:String",The soap envelop could be{code}<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"       xmlns:ns1="http://cxf.component.camel.apache.org/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:ns2="http://cxf.component.camel.apache.org/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">       <soap:Body>        <ns1:echo><ns2:arg0 xsi:type="xsd:string\">Hello World!</ns2:arg0></ns1:echo>        </soap:Body></soap:Envelope>    {code}The element in the PAYLOAD message body should be like this{code}<ns1:echo xmlns:ns1="http://cxf.component.camel.apache.org/" xmlns:ns2="http://cxf.component.camel.apache.org/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  <ns2:arg0 xsi:type="xsd:string">Hello World!</ns2:arg0></ns1:echo>{code}
CAMEL-4335 Upgrade to CXF 2.4.2 Apache CXF 2.4.2 is released. We should upgrade to this version. Task Upgrade to CXF 2.4.2 Apache CXF 2.4.2 is released. We should upgrade to this version.
CAMEL-4334 ResourceHelperTest.testLoadFileNotFound fails in Windows/non english OS. the hard coded assertion:assertEquals("src/test/resources/notfound.txt (No such file or directory)", e.getMessage());fails in Windows OS (since the seperator is "\") as well as in Non-english language OS (since the OS message does not match).Solution:1.Simply comment out the assertion since the correctness is assured by catching the FileNotFoundException.2.Polish the assertion by use OS file seperator to make the string and use pos() the test whether the string is in the message.Either way you like, I can make the patch. Test ResourceHelperTest.testLoadFileNotFound fails in Windows/non english OS. the hard coded assertion:assertEquals("src/test/resources/notfound.txt (No such file or directory)", e.getMessage());fails in Windows OS (since the seperator is "\") as well as in Non-english language OS (since the OS message does not match).Solution:1.Simply comment out the assertion since the correctness is assured by catching the FileNotFoundException.2.Polish the assertion by use OS file seperator to make the string and use pos() the test whether the string is in the message.Either way you like, I can make the patch.
CAMEL-4333 Add wereSentTo to NotifyBuilder to match if exchange was sent to the given endpoint pattern See nabblehttp://camel.465427.n5.nabble.com/NotifyBuilder-condition-fails-to-match-on-an-out-activemq-endpoint-tp4689038p4689038.htmlYou can now do{code}        NotifyBuilder notify = new NotifyBuilder(context)                .wereSentTo("mock:foo")                .create();{code}To only match if the exchange was at any point sent to the given endpoint (the uri can be a pattern) Improvement Add wereSentTo to NotifyBuilder to match if exchange was sent to the given endpoint pattern See nabblehttp://camel.465427.n5.nabble.com/NotifyBuilder-condition-fails-to-match-on-an-out-activemq-endpoint-tp4689038p4689038.htmlYou can now do{code}        NotifyBuilder notify = new NotifyBuilder(context)                .wereSentTo("mock:foo")                .create();{code}To only match if the exchange was at any point sent to the given endpoint (the uri can be a pattern)
CAMEL-4331 Avoid the redundant direct dependency on log4j by the components (of the scope 'test'), as it's transitively given for free through the slf4j-log4j12 dependency with the RIGHT / COMPLIANT version See the discussion here http://camel.465427.n5.nabble.com/Camel-freemarker-td4693216.html Improvement Avoid the redundant direct dependency on log4j by the components (of the scope 'test'), as it's transitively given for free through the slf4j-log4j12 dependency with the RIGHT / COMPLIANT version See the discussion here http://camel.465427.n5.nabble.com/Camel-freemarker-td4693216.html
CAMEL-4328 CAMEL-4244 broke EIP configuration of thread pools CAMEL-4244 refactored the ExecutorServiceStrategy. However there was a mistake as the current API is too limited.If you configure an EIP with a thread pool by an id, then that id is mandatory. Either an existing thread pool should exist with that id, or a thread pool profile should exist. If neither does, it should fail. The refactored code fallback and creates a default pool. This is a mistake.See the unit test for an example AggregateUnknownExecutorServiceRefTest Task CAMEL-4244 broke EIP configuration of thread pools CAMEL-4244 refactored the ExecutorServiceStrategy. However there was a mistake as the current API is too limited.If you configure an EIP with a thread pool by an id, then that id is mandatory. Either an existing thread pool should exist with that id, or a thread pool profile should exist. If neither does, it should fail. The refactored code fallback and creates a default pool. This is a mistake.See the unit test for an example AggregateUnknownExecutorServiceRefTest
CAMEL-4323 camel-example-spring-javaconfig This example uses some old spring osgi-core stuff that is not maintained anymore.And that depends on the old Spring 2.5 version.[INFO] +- org.springframework.osgi:spring-osgi-core:jar:1.2.1:compile[INFO] |  +- org.springframework.osgi:spring-osgi-io:jar:1.2.1:compile[INFO] |  +- org.springframework:org.springframework.aop:jar:2.5.6.SEC01:compile[INFO] |  |  \- org.aopalliance:com.springsource.org.aopalliance:jar:1.0.0:compile[INFO] |  +- org.springframework:org.springframework.beans:jar:2.5.6.SEC01:compile[INFO] |  +- org.springframework:org.springframework.context:jar:2.5.6.SEC01:compile[INFO] |  \- org.springframework:org.springframework.core:jar:2.5.6.SEC01:compileWe should consider trying to fix this. Maybe just make the example not run in osgi. Task camel-example-spring-javaconfig This example uses some old spring osgi-core stuff that is not maintained anymore.And that depends on the old Spring 2.5 version.[INFO] +- org.springframework.osgi:spring-osgi-core:jar:1.2.1:compile[INFO] |  +- org.springframework.osgi:spring-osgi-io:jar:1.2.1:compile[INFO] |  +- org.springframework:org.springframework.aop:jar:2.5.6.SEC01:compile[INFO] |  |  \- org.aopalliance:com.springsource.org.aopalliance:jar:1.0.0:compile[INFO] |  +- org.springframework:org.springframework.beans:jar:2.5.6.SEC01:compile[INFO] |  +- org.springframework:org.springframework.context:jar:2.5.6.SEC01:compile[INFO] |  \- org.springframework:org.springframework.core:jar:2.5.6.SEC01:compileWe should consider trying to fix this. Maybe just make the example not run in osgi.
CAMEL-4321 Create camel-jcifs component Currently, we don't have any component to use a CIFS/Samba share.Using jcifs, users will be able to use CIFS shares.This component is an extension of the file one (more or less like camel-ftp). New Feature Create camel-jcifs component Currently, we don't have any component to use a CIFS/Samba share.Using jcifs, users will be able to use CIFS shares.This component is an extension of the file one (more or less like camel-ftp).
CAMEL-4317 Clean up the camel context file of the example after upgrading to CXF 2.4.x After upgrading to CXF 2.4.x, we don't need to import the resources file like /META-INF/cxf/cxf-extension-xxx.xml any more, so it's time to clean up these imports. Improvement Clean up the camel context file of the example after upgrading to CXF 2.4.x After upgrading to CXF 2.4.x, we don't need to import the resources file like /META-INF/cxf/cxf-extension-xxx.xml any more, so it's time to clean up these imports.
CAMEL-4314 When tracing is enabled, the ids on the nodes in the routes should be forced assigned When tracing is enabled, the nodes in the route may not have id assigned (for example if end user do not explicit assign an id). To improve the tracing messages we should force the ids to be auto assigned.Currently it does this, but the tracer may skip child nodes which should have ids assigned as well. So we should improve the logic in the tracer to assign for child nodes as well.For example a Content Based Router would not have ids assigned for when/otherwise nodes. Improvement When tracing is enabled, the ids on the nodes in the routes should be forced assigned When tracing is enabled, the nodes in the route may not have id assigned (for example if end user do not explicit assign an id). To improve the tracing messages we should force the ids to be auto assigned.Currently it does this, but the tracer may skip child nodes which should have ids assigned as well. So we should improve the logic in the tracer to assign for child nodes as well.For example a Content Based Router would not have ids assigned for when/otherwise nodes.
CAMEL-4310 Generate CamelSplitSize property with streaming splitter Actually, the Camel splitter does not generate a property "CamelSplitSize" when streaming is used.Instead, the last splitted exchange is marked with a property "CamelSplitComplete" set to "true".To further reduce the gap between streaming and non streaming routes, the splitter could also generate a proper "CamelSplitSize" property on the last splitted exchange.Ok, this is really a nice-to-have ;-) Improvement Generate CamelSplitSize property with streaming splitter Actually, the Camel splitter does not generate a property "CamelSplitSize" when streaming is used.Instead, the last splitted exchange is marked with a property "CamelSplitComplete" set to "true".To further reduce the gap between streaming and non streaming routes, the splitter could also generate a proper "CamelSplitSize" property on the last splitted exchange.Ok, this is really a nice-to-have ;-)
CAMEL-4309 JmsConsumer - Add option to destroy the message listener in an async thread This can help speed up unit testing.However the default logic must be as currently (sync destroy). This is what people are using in their production systems.See nabblehttp://camel.465427.n5.nabble.com/Re-svn-commit-r1152991-in-camel-trunk-components-camel-jms-src-main-java-org-apache-camel-component-a-tp4657692p4657692.html New Feature JmsConsumer - Add option to destroy the message listener in an async thread This can help speed up unit testing.However the default logic must be as currently (sync destroy). This is what people are using in their production systems.See nabblehttp://camel.465427.n5.nabble.com/Re-svn-commit-r1152991-in-camel-trunk-components-camel-jms-src-main-java-org-apache-camel-component-a-tp4657692p4657692.html
CAMEL-4308 commons-dbcp bundle used in camel feature.xml doesn't allow dynamic imports currently the commons-dbcp bundle used in camel feature.xml doesn't allow dynamic imports, it will cause exception likeorg.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'as JDBC driver class not found actually is a common issue in OSGi container, this problem generally from a bundle(let's say it bundle A, commons-dbcp in this case) using some code like classForName(jdbc_driver_classname) to init a jdbc driver class, this is a big problem in OSGi world, as if BundleA not import package for jdbc_driver_classname, we'll see the problem. However BundleA actually can't know about package name for jdbc_driver_classname beforehand, as the jdbc_driver_classname generally is passed in through configuration during runtime, it can't be determined during build time, so we can't add correct package import when we generate bundle A.The general solution is1. add dynamic import for bundle A(commons-dbcp) or 2. create JDBC driver as a fragment bundle, and attach it to bundle A(bundle A is host bundle now), so that all resource from fragment bundle is available for the host bundle.Solution 1 left less effort for end user and n servicemix wrapped commons-dbcp bundle we already have dynamic-import header and I think camel features should use the  servicemix wrapped commons-dbcp bundle as well.I will append a patch soon. Improvement commons-dbcp bundle used in camel feature.xml doesn't allow dynamic imports currently the commons-dbcp bundle used in camel feature.xml doesn't allow dynamic imports, it will cause exception likeorg.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class 'oracle.jdbc.driver.OracleDriver'as JDBC driver class not found actually is a common issue in OSGi container, this problem generally from a bundle(let's say it bundle A, commons-dbcp in this case) using some code like classForName(jdbc_driver_classname) to init a jdbc driver class, this is a big problem in OSGi world, as if BundleA not import package for jdbc_driver_classname, we'll see the problem. However BundleA actually can't know about package name for jdbc_driver_classname beforehand, as the jdbc_driver_classname generally is passed in through configuration during runtime, it can't be determined during build time, so we can't add correct package import when we generate bundle A.The general solution is1. add dynamic import for bundle A(commons-dbcp) or 2. create JDBC driver as a fragment bundle, and attach it to bundle A(bundle A is host bundle now), so that all resource from fragment bundle is available for the host bundle.Solution 1 left less effort for end user and n servicemix wrapped commons-dbcp bundle we already have dynamic-import header and I think camel features should use the  servicemix wrapped commons-dbcp bundle as well.I will append a patch soon.
CAMEL-4303 Add camel-netty option to configure whether the server needs client auth when using SSL Right now it is hardcoded to serverEngine.setNeedClientAuth(true) Improvement Add camel-netty option to configure whether the server needs client auth when using SSL Right now it is hardcoded to serverEngine.setNeedClientAuth(true)
CAMEL-4300 camel-cache - Make it possible to specify cache operation / key in endpoint uri Currently you need to provide headers with an operation and key. Instead it should be simpler to do in the uri directly.to("cache:myCache?operation=update&key=foo");But if there is any headers, then they should take precedence. This is the normal convention with other Camel components. That headers takes precedence over uri configuration. Improvement camel-cache - Make it possible to specify cache operation / key in endpoint uri Currently you need to provide headers with an operation and key. Instead it should be simpler to do in the uri directly.to("cache:myCache?operation=update&key=foo");But if there is any headers, then they should take precedence. This is the normal convention with other Camel components. That headers takes precedence over uri configuration.
CAMEL-4298 Add back ExecutorServiceStrategy and mark it as @deprecated The old ExecutorServiceStrategy was refacted into ExecutorServiceManager. But it was removed. This was a mistake as it breaks backwards compatibility, and people are not given a reasonable time to adjust.So we should add back the ExecutorServiceStrategy and have it marked as @deprecated. It can then just under the hood, use the ExecutorServiceManager.Then in a future Camel release we can removed the @deprecated ExecutorServiceStrategy (for example Camel 3.0, or in eg 1 year from now) Task Add back ExecutorServiceStrategy and mark it as @deprecated The old ExecutorServiceStrategy was refacted into ExecutorServiceManager. But it was removed. This was a mistake as it breaks backwards compatibility, and people are not given a reasonable time to adjust.So we should add back the ExecutorServiceStrategy and have it marked as @deprecated. It can then just under the hood, use the ExecutorServiceManager.Then in a future Camel release we can removed the @deprecated ExecutorServiceStrategy (for example Camel 3.0, or in eg 1 year from now)
CAMEL-4292 Camel JMS documentation - Two links to nabble do no longer work On the camel-jms pageThe 2 links to Nabble for WebSphereMQ and JNDI lookup is broken.We should remove those 2 sections.Created this ticket as Apache cwiki is currently down. Task Camel JMS documentation - Two links to nabble do no longer work On the camel-jms pageThe 2 links to Nabble for WebSphereMQ and JNDI lookup is broken.We should remove those 2 sections.Created this ticket as Apache cwiki is currently down.
CAMEL-4288 Log component - Add option to log formatter to showFiles The log component will by default not show files. But we should allow people to configure this. Just like we have showStreams, we should add a showFiles option. Improvement Log component - Add option to log formatter to showFiles The log component will by default not show files. But we should allow people to configure this. Just like we have showStreams, we should add a showFiles option.
CAMEL-4286 BlueprintCamelContextFactoryBean should set the ApplicationContextClassLoader for the CamelContext There are lots of other camel component like camel-jaxb, camel-atom who want to use the ApplicationContextClassLoader to load the context files. BlueprintCameContextFactoryBean should setup the ApplicationContextClassLoader for the CamelContext.  Improvement BlueprintCamelContextFactoryBean should set the ApplicationContextClassLoader for the CamelContext There are lots of other camel component like camel-jaxb, camel-atom who want to use the ApplicationContextClassLoader to load the context files. BlueprintCameContextFactoryBean should setup the ApplicationContextClassLoader for the CamelContext. 
CAMEL-4285 Imported Xquery modules will not resolve using classpath When using an xquery endpoint that uses an xquery file like this:<camel:to uri="xquery:com/test/xquery/manual.xq"/> If the manual.xq file contains imported modules such as:import module namespace utils = "myutils" at "classpath:/com/test/utils.xq"; they will not resolve relative to the classpath.This is a big problem when using OSGI or any other situation where your Xquery files are inside your package/jar.I've created a patch so that it will resolve the imports in the same way that the component resolves resources using resolveMandatoryResource.I've tested the patch successfully using "classpath:/", "file://", and "http://" uri formats. Improvement Imported Xquery modules will not resolve using classpath When using an xquery endpoint that uses an xquery file like this:<camel:to uri="xquery:com/test/xquery/manual.xq"/> If the manual.xq file contains imported modules such as:import module namespace utils = "myutils" at "classpath:/com/test/utils.xq"; they will not resolve relative to the classpath.This is a big problem when using OSGI or any other situation where your Xquery files are inside your package/jar.I've created a patch so that it will resolve the imports in the same way that the component resolves resources using resolveMandatoryResource.I've tested the patch successfully using "classpath:/", "file://", and "http://" uri formats.
CAMEL-4282 Camel archetypes and examples should enable JMX for ActiveMQ The camel-activemq archetype setup an embedded AMQ broker which has JMX disabled.We should check all our examples and archetypes that JMX is enabled for AMQ when its embedded.As it may confuse end users that they can see Camel in JMX, but not AMQ. Improvement Camel archetypes and examples should enable JMX for ActiveMQ The camel-activemq archetype setup an embedded AMQ broker which has JMX disabled.We should check all our examples and archetypes that JMX is enabled for AMQ when its embedded.As it may confuse end users that they can see Camel in JMX, but not AMQ.
CAMEL-4281 would be good for FileEndpoint to implement BrowsableEndpoint (ditto any other components we can find that are easy to do)... then via JMX or code folks can browse the available messages Improvement would be good for FileEndpoint to implement BrowsableEndpoint (ditto any other components we can find that are easy to do)... then via JMX or code folks can browse the available messages
CAMEL-4278 Additional methods added to example QuickfixConverters The example QuickfixConverters converter class didn't have methods to convert from a byte array to a Message and from Message to InputStream. That prevented me from marshalling/unmarshalling Quickfix messages with Bindy. Enclosed is a patch with the needed methods. Improvement Additional methods added to example QuickfixConverters The example QuickfixConverters converter class didn't have methods to convert from a byte array to a Message and from Message to InputStream. That prevented me from marshalling/unmarshalling Quickfix messages with Bindy. Enclosed is a patch with the needed methods.
CAMEL-4277 camel-kestrel: Cannot cache data larger than 1048576 bytes Please add {{camel-kestrel}} as a component in JIRA.I call {{ProducerTemplate.sendBody(Set<...>)}}. The set is serialized into 10 MB of pure bytes and then I get {{CamelExchangeException}}. With the data smaller than 1 MB everything is OK.The full stack trace:{code}org.apache.camel.CamelExchangeException: Error sending to: feeds. Exchange[Message: Set(... [Body clipped after 1000 chars, total length is 10891852]]. Caused by: [java.lang.IllegalArgumentException - Cannot cache data larger than 1048576 bytes (you tried to cache a 1235078 byte object)]	at org.apache.camel.component.kestrel.KestrelProducer.process(KestrelProducer.java:49) ~[camel-kestrel-2.7.0.jar:2.7.0]	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:53) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:333) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:303) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:208) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:303) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:154) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:123) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:341) [camel-core-2.7.0.jar:2.7.0]	...	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:93) [scala-library.jar:na]	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:93) [scala-library.jar:na]	at scala.collection.Iterator$class.foreach(Iterator.scala:652) [scala-library.jar:na]	at scala.collection.mutable.HashTable$$anon$1.foreach(HashTable.scala:157) [scala-library.jar:na]	at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:190) [scala-library.jar:na]	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:43) [scala-library.jar:na]	at scala.collection.mutable.HashMap.foreach(HashMap.scala:93) [scala-library.jar:na]	...	at sun.reflect.GeneratedMethodAccessor133.invoke(Unknown Source) ~[na:na]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_24]	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_24]	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:322) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:224) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:167) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:74) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:102) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:72) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:53) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:330) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:157) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:121) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97) [camel-core-2.7.0.jar:2.7.0]	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_24]	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_24]	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_24]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_24]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_24]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_24]	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_24]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_24]	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_24]Caused by: java.lang.IllegalArgumentException: Cannot cache data larger than 1048576 bytes (you tried to cache a 1235078 byte object)	at net.spy.memcached.CachedData.<init>(CachedData.java:30) ~[memcached-2.5.jar:]	at net.spy.memcached.transcoders.SerializingTranscoder.encode(SerializingTranscoder.java:152) ~[memcached-2.5.jar:]	at net.spy.memcached.MemcachedClient.asyncStore(MemcachedClient.java:301) ~[memcached-2.5.jar:]	at net.spy.memcached.MemcachedClient.set(MemcachedClient.java:691) ~[memcached-2.5.jar:]	at org.apache.camel.component.kestrel.KestrelProducer.process(KestrelProducer.java:47) ~[camel-kestrel-2.7.0.jar:2.7.0]	... 93 common frames omitted{code} Improvement camel-kestrel: Cannot cache data larger than 1048576 bytes Please add {{camel-kestrel}} as a component in JIRA.I call {{ProducerTemplate.sendBody(Set<...>)}}. The set is serialized into 10 MB of pure bytes and then I get {{CamelExchangeException}}. With the data smaller than 1 MB everything is OK.The full stack trace:{code}org.apache.camel.CamelExchangeException: Error sending to: feeds. Exchange[Message: Set(... [Body clipped after 1000 chars, total length is 10891852]]. Caused by: [java.lang.IllegalArgumentException - Cannot cache data larger than 1048576 bytes (you tried to cache a 1235078 byte object)]	at org.apache.camel.component.kestrel.KestrelProducer.process(KestrelProducer.java:49) ~[camel-kestrel-2.7.0.jar:2.7.0]	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:53) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:139) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:85) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:333) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:303) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:208) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:303) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:154) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:123) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:341) [camel-core-2.7.0.jar:2.7.0]	...	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:93) [scala-library.jar:na]	at scala.collection.mutable.HashMap$$anonfun$foreach$1.apply(HashMap.scala:93) [scala-library.jar:na]	at scala.collection.Iterator$class.foreach(Iterator.scala:652) [scala-library.jar:na]	at scala.collection.mutable.HashTable$$anon$1.foreach(HashTable.scala:157) [scala-library.jar:na]	at scala.collection.mutable.HashTable$class.foreachEntry(HashTable.scala:190) [scala-library.jar:na]	at scala.collection.mutable.HashMap.foreachEntry(HashMap.scala:43) [scala-library.jar:na]	at scala.collection.mutable.HashMap.foreach(HashMap.scala:93) [scala-library.jar:na]	...	at sun.reflect.GeneratedMethodAccessor133.invoke(Unknown Source) ~[na:na]	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_24]	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_24]	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:322) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:224) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:167) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:103) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:74) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:102) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:72) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:104) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:272) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:99) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:53) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:299) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:208) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:269) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:109) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:77) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:330) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:157) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:121) [camel-core-2.7.0.jar:2.7.0]	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97) [camel-core-2.7.0.jar:2.7.0]	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) [na:1.6.0_24]	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [na:1.6.0_24]	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [na:1.6.0_24]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [na:1.6.0_24]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [na:1.6.0_24]	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [na:1.6.0_24]	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_24]	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_24]	at java.lang.Thread.run(Thread.java:680) [na:1.6.0_24]Caused by: java.lang.IllegalArgumentException: Cannot cache data larger than 1048576 bytes (you tried to cache a 1235078 byte object)	at net.spy.memcached.CachedData.<init>(CachedData.java:30) ~[memcached-2.5.jar:]	at net.spy.memcached.transcoders.SerializingTranscoder.encode(SerializingTranscoder.java:152) ~[memcached-2.5.jar:]	at net.spy.memcached.MemcachedClient.asyncStore(MemcachedClient.java:301) ~[memcached-2.5.jar:]	at net.spy.memcached.MemcachedClient.set(MemcachedClient.java:691) ~[memcached-2.5.jar:]	at org.apache.camel.component.kestrel.KestrelProducer.process(KestrelProducer.java:47) ~[camel-kestrel-2.7.0.jar:2.7.0]	... 93 common frames omitted{code}
CAMEL-4275 Don't ignore java.io.File.delete() returned boolean value Created this ticket separately since part of the provided patch in https://issues.apache.org/jira/browse/CAMEL-4255 didn't match with it's description. Improvement Don't ignore java.io.File.delete() returned boolean value Created this ticket separately since part of the provided patch in https://issues.apache.org/jira/browse/CAMEL-4255 didn't match with it's description.
CAMEL-4273 Favor static member classes over nonstatic ones. See http://camel.465427.n5.nabble.com/Favor-static-member-classes-over-nonstatic-td4634964.html Improvement Favor static member classes over nonstatic ones. See http://camel.465427.n5.nabble.com/Favor-static-member-classes-over-nonstatic-td4634964.html
CAMEL-4272 camel-jdbc should provide a option not set the autoCommit flag When the jdbc connection is work as XA resource, the connection autoCommit flag doesn't support to be reset.So we should provide an option in the camel-jdbc endpont not to set the autoCommit flag on the connection. Improvement camel-jdbc should provide a option not set the autoCommit flag When the jdbc connection is work as XA resource, the connection autoCommit flag doesn't support to be reset.So we should provide an option in the camel-jdbc endpont not to set the autoCommit flag on the connection.
CAMEL-4270 File consumer on completion should pre copy file information, in case end user messes with them later on See nabblehttp://camel.465427.n5.nabble.com/file-move-option-not-working-when-using-split-tp4616425p4616425.htmlThe file consumer uses an on completion to execute the delete/rename strategy after the file has been processed. For that to work it uses the file headers on the exchange. But the end user can in between tamper with those, and thus influence the on completion process. We should guard against this by having the on completion do a pre copy of the information it needs. Improvement File consumer on completion should pre copy file information, in case end user messes with them later on See nabblehttp://camel.465427.n5.nabble.com/file-move-option-not-working-when-using-split-tp4616425p4616425.htmlThe file consumer uses an on completion to execute the delete/rename strategy after the file has been processed. For that to work it uses the file headers on the exchange. But the end user can in between tamper with those, and thus influence the on completion process. We should guard against this by having the on completion do a pre copy of the information it needs.
CAMEL-4263 When using @EndpointInject or other bean initializers, then JMX should pre record those lifecycle events to enlist in JMX later when CamelContext has been enlisted See nabblehttp://camel.465427.n5.nabble.com/Camel-issue-with-JMX-Endpoints-disappearing-and-endpoint-injection-for-SEDA-tp4616624p4616624.htmlThe problem is that when you use @EndpointInject, @Produce, @Consume etc. on beans then Spring / Blueprint triggers the CamelBeanPostProcessor which inject those details into the bean. But this process happens very early, before CamelContext is being started.And thus components/endpoints/etc is already been loaded/registered in registry.But they cannot this early be enlisted in JMX, as CamelContext has not yet been enlisted. So we need to pre record those events, and then enlist them after CamelContext has been enlisted in JMX. Improvement When using @EndpointInject or other bean initializers, then JMX should pre record those lifecycle events to enlist in JMX later when CamelContext has been enlisted See nabblehttp://camel.465427.n5.nabble.com/Camel-issue-with-JMX-Endpoints-disappearing-and-endpoint-injection-for-SEDA-tp4616624p4616624.htmlThe problem is that when you use @EndpointInject, @Produce, @Consume etc. on beans then Spring / Blueprint triggers the CamelBeanPostProcessor which inject those details into the bean. But this process happens very early, before CamelContext is being started.And thus components/endpoints/etc is already been loaded/registered in registry.But they cannot this early be enlisted in JMX, as CamelContext has not yet been enlisted. So we need to pre record those events, and then enlist them after CamelContext has been enlisted in JMX.
CAMEL-4260 Removed camel-example-axis See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Removing-the-camel-example-axis-tp4620093p4620093.html Task Removed camel-example-axis See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Removing-the-camel-example-axis-tp4620093p4620093.html
CAMEL-4257 Expose setDeliveryMode property in org.apache.camel.component.jms.JmsComponent It would be beneficial if org.apache.camel.component.jms.JmsComponent would allow to specify JMS deliveryMode explicitly. Currently, from what I can tell, there is only boolean deliveryPersistent property which is not enough if JMS provider supports additional non-standard delivery modes. Example is Tibco EMS RELIABLE_DELIVERY mode. Improvement Expose setDeliveryMode property in org.apache.camel.component.jms.JmsComponent It would be beneficial if org.apache.camel.component.jms.JmsComponent would allow to specify JMS deliveryMode explicitly. Currently, from what I can tell, there is only boolean deliveryPersistent property which is not enough if JMS provider supports additional non-standard delivery modes. Example is Tibco EMS RELIABLE_DELIVERY mode.
CAMEL-4255 Avoid using "\n" as line seperator while doing I/O and preferably stick to System.getProperty("line.separator") See http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-8-0-tp4610671p4616161.htmlOther than that consider the evaluation of java.io.File.delete() returned boolean value while unit-testing, to make sure a file/directory get's deleted when we ask for it. Improvement Avoid using "\n" as line seperator while doing I/O and preferably stick to System.getProperty("line.separator") See http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-8-0-tp4610671p4616161.htmlOther than that consider the evaluation of java.io.File.delete() returned boolean value while unit-testing, to make sure a file/directory get's deleted when we ask for it.
CAMEL-4253 Polish examples XML files The examples could use a little polish in their XML files and a few other spots.We should try to make the examples source code look nice and dandy as this is what potential new users of Camel look at. Task Polish examples XML files The examples could use a little polish in their XML files and a few other spots.We should try to make the examples source code look nice and dandy as this is what potential new users of Camel look at.
CAMEL-4251 camel-example-cxf-tomcat - SoapUI cannot import wsdl When importing the wsdl in soapui it fails with a NPEWed Jul 20 10:02:00 CEST 2011:ERROR:org.apache.xmlbeans.XmlException: http://localhost:8080/camel-example-cxf-tomcat-2.8.0/webservices/incident?wsdl:0: error: src-resolve: type 'inputStatusIncident@http://incident.cxf.example.camel.apache.org/' not found.   org.apache.xmlbeans.XmlException: http://localhost:8080/camel-example-cxf-tomcat-2.8.0/webservices/incident?wsdl:0: error: src-resolve: type 'inputStatusIncident@http://incident.cxf.example.camel.apache.org/' not found.   	at org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler.compile(SchemaTypeSystemCompiler.java:225)   	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Task camel-example-cxf-tomcat - SoapUI cannot import wsdl When importing the wsdl in soapui it fails with a NPEWed Jul 20 10:02:00 CEST 2011:ERROR:org.apache.xmlbeans.XmlException: http://localhost:8080/camel-example-cxf-tomcat-2.8.0/webservices/incident?wsdl:0: error: src-resolve: type 'inputStatusIncident@http://incident.cxf.example.camel.apache.org/' not found.   org.apache.xmlbeans.XmlException: http://localhost:8080/camel-example-cxf-tomcat-2.8.0/webservices/incident?wsdl:0: error: src-resolve: type 'inputStatusIncident@http://incident.cxf.example.camel.apache.org/' not found.   	at org.apache.xmlbeans.impl.schema.SchemaTypeSystemCompiler.compile(SchemaTypeSystemCompiler.java:225)   	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
CAMEL-4247 Add API for pluggable JmxMBeanAssembler The class org.apache.camel.management.JmxMBeanAssembler should be an Interface to allow custom implementations.The current logic in the class should be moved to camel-spring component, as it has dependency on Spring JARs.Create a DefaultJmxBeanAssembler that is Camel specific. But at first keep the current Spring code, until we have all the otherpieces in place in Camel, then we can remove the Spring code and implement the logic. We need for example a number of Camel JMX annotations. And logic that can understand and parse those annotations and assemble the MBean. Sub-task Add API for pluggable JmxMBeanAssembler The class org.apache.camel.management.JmxMBeanAssembler should be an Interface to allow custom implementations.The current logic in the class should be moved to camel-spring component, as it has dependency on Spring JARs.Create a DefaultJmxBeanAssembler that is Camel specific. But at first keep the current Spring code, until we have all the otherpieces in place in Camel, then we can remove the Spring code and implement the logic. We need for example a number of Camel JMX annotations. And logic that can understand and parse those annotations and assemble the MBean.
CAMEL-4245 Upgrade surefire plugin version to 2.8 surefire plugin supports to run the test with test method like this since 2.8{code}mvn test -Dtest=UnitTest#testMethod{code}As we have some issue to build the camel-web with surefire plugin 2.9, let's just use the surefire plugin 2.8. Improvement Upgrade surefire plugin version to 2.8 surefire plugin supports to run the test with test method like this since 2.8{code}mvn test -Dtest=UnitTest#testMethod{code}As we have some issue to build the camel-web with surefire plugin 2.9, let's just use the surefire plugin 2.8.
CAMEL-4242 When bridging http endpoints and end users do not enable the bridgeEndpoint option they may get a NPE exception Seehttp://fusesource.com/forums/thread.jspa?threadID=3135&tstart=0 Improvement When bridging http endpoints and end users do not enable the bridgeEndpoint option they may get a NPE exception Seehttp://fusesource.com/forums/thread.jspa?threadID=3135&tstart=0
CAMEL-4241 Removed unused imports from examples Since the examples is what end users of Camel take a look at, we should ensure they are of a certain quality. So lets start with removing unused imports. There may be other warnings in Eclipse / IDEA when importing those project, which we should improved as well.  Task Removed unused imports from examples Since the examples is what end users of Camel take a look at, we should ensure they are of a certain quality. So lets start with removing unused imports. There may be other warnings in Eclipse / IDEA when importing those project, which we should improved as well. 
CAMEL-4238 camel-web - Use same jackson version as in camel-jackson Jersey uses jackson 1.7.1. But camel-jackson uses 1.8.2. We should align those versions.Likewise Apache CI servers keep getting issues downloading jackson 1.7.1 during testing. Task camel-web - Use same jackson version as in camel-jackson Jersey uses jackson 1.7.1. But camel-jackson uses 1.8.2. We should align those versions.Likewise Apache CI servers keep getting issues downloading jackson 1.7.1 during testing.
CAMEL-4236 When performing lookup in registry and having expected type as parameter, then report better failure if ClassCastException When Camel lookup in the registry, it may lookup in different runtime registries, such as OSGi blueprint. If an explicit type has been provided as a parameter you will get a ClassCastException if the type does not match. But you cannot see which types was a stake. So we should provide a better exception.Caused by: java.lang.ClassCastException	at java.lang.Class.cast(Class.java:2990)[:1.6.0_24]	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:43)	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:47)	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:54)	... 42 more Improvement When performing lookup in registry and having expected type as parameter, then report better failure if ClassCastException When Camel lookup in the registry, it may lookup in different runtime registries, such as OSGi blueprint. If an explicit type has been provided as a parameter you will get a ClassCastException if the type does not match. But you cannot see which types was a stake. So we should provide a better exception.Caused by: java.lang.ClassCastException	at java.lang.Class.cast(Class.java:2990)[:1.6.0_24]	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:43)	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:47)	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:54)	... 42 more
CAMEL-4233 avoid runtime package scanning to discover TypeConverters Package scanning to discover classes annotated with @Converter is slow. Plus on many containers (especially commercial JEE containers) its not even possible; since ClassLoader.getResource() doesn't often return file system based URIs you can easily convert to a java.io.File so you can list files in a directory.Finding known resources/classes in class loaders generally works; scanning packages is generally more problematic - as well as being slow.So it would be better if Camel could use a text file per jar containing all the fully qualified class names of the converters to use. Then no package scanning is required. Or rather we only need to use package scanning if a text file contains packages (rather than fully qualified classes). i.e. do the package scanning at build time (when you have full access to the file system :) rather than at runtime when you generally don't have access to the files - and expanding jars to look inside them is awfully slow.In addition it'd be great if we added a maven plugin - or Java compiler AnnotationProcessor we can use with the compile step - to generate the META-INF/services/org/apache/camel/TypeConverter file automatically as part of the build. Then users don't even have to think about it; they just add @Converter to a class and the plugin generates the text file as part of the build., using fully qualified class names - so no package scanning required at runtime - and much faster startup times too Improvement avoid runtime package scanning to discover TypeConverters Package scanning to discover classes annotated with @Converter is slow. Plus on many containers (especially commercial JEE containers) its not even possible; since ClassLoader.getResource() doesn't often return file system based URIs you can easily convert to a java.io.File so you can list files in a directory.Finding known resources/classes in class loaders generally works; scanning packages is generally more problematic - as well as being slow.So it would be better if Camel could use a text file per jar containing all the fully qualified class names of the converters to use. Then no package scanning is required. Or rather we only need to use package scanning if a text file contains packages (rather than fully qualified classes). i.e. do the package scanning at build time (when you have full access to the file system :) rather than at runtime when you generally don't have access to the files - and expanding jars to look inside them is awfully slow.In addition it'd be great if we added a maven plugin - or Java compiler AnnotationProcessor we can use with the compile step - to generate the META-INF/services/org/apache/camel/TypeConverter file automatically as part of the build. Then users don't even have to think about it; they just add @Converter to a class and the plugin generates the text file as part of the build., using fully qualified class names - so no package scanning required at runtime - and much faster startup times too
CAMEL-4230 BeanProcessor - Improved exception message if failed to invoke method See nabblehttp://camel.465427.n5.nabble.com/How-to-impl-bean-side-of-proxy-w-Future-return-tp4581104p4581104.htmlIf for some reason the method cannot be invoked, you may get a caused exception{code}Caused by: java.lang.IllegalAccessException: Class org.apache.camel.component.bean.MethodInfo can not access a member of class com.sonatype.overlord.xpi.AsyncProxyBeanCamelTest$1 with modifiers "public"       at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)       at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:329)       at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:231)       at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:169){code}We should catch this and provide a wrapped exception with a more descriptive error message, about the bean and method attempted to invoke. Improvement BeanProcessor - Improved exception message if failed to invoke method See nabblehttp://camel.465427.n5.nabble.com/How-to-impl-bean-side-of-proxy-w-Future-return-tp4581104p4581104.htmlIf for some reason the method cannot be invoked, you may get a caused exception{code}Caused by: java.lang.IllegalAccessException: Class org.apache.camel.component.bean.MethodInfo can not access a member of class com.sonatype.overlord.xpi.AsyncProxyBeanCamelTest$1 with modifiers "public"       at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:65)       at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:329)       at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:231)       at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:169){code}We should catch this and provide a wrapped exception with a more descriptive error message, about the bean and method attempted to invoke.
CAMEL-4229 Added wrap method for template, consumer and context in org.apache.camel.test.junit4.CamelContextSupport  User complain about the change of CAMEL-3960 causes some issue when using the CamelTestSupport in scala.A simple solution is add some wrap method to get the value protected static member.Here is the mail thread[1] of it.[1]http://camel.465427.n5.nabble.com/CamelTestSupport-template-variable-missing-changed-in-2-8-0-td4587700.html Improvement Added wrap method for template, consumer and context in org.apache.camel.test.junit4.CamelContextSupport  User complain about the change of CAMEL-3960 causes some issue when using the CamelTestSupport in scala.A simple solution is add some wrap method to get the value protected static member.Here is the mail thread[1] of it.[1]http://camel.465427.n5.nabble.com/CamelTestSupport-template-variable-missing-changed-in-2-8-0-td4587700.html
CAMEL-4228 Use the customer configuration for camel-itest-osgi  To run the osgi integration tests with camel-cxf, you need apply an customer jre.properties into the karaf configuration.karaf testing Helper supports it, we should take advantage of it in camel-itest-osgi. Improvement Use the customer configuration for camel-itest-osgi  To run the osgi integration tests with camel-cxf, you need apply an customer jre.properties into the karaf configuration.karaf testing Helper supports it, we should take advantage of it in camel-itest-osgi.
CAMEL-4227 Seda component doesn't block on its blocking queue While one can put an upper bound on the size of the blocking queue that the seda component uses to queue messages, the seda component throws an exception when it reaches that limit instead of blocking. My understanding of a blocking queue is that the upper bound lets you put an upper bound on the queue and block when it becomes full. The fact that the seda component throws an exception makes the upper bound useless in practice, unless there is supposed to be some kind of easy workaround. We have not found one, and it looks like we will be rolling our own async component to compensate. :(The basic issue is that SedaProducer calls BlockingQueue.add() instead of BlockingQueue.put(). Improvement Seda component doesn't block on its blocking queue While one can put an upper bound on the size of the blocking queue that the seda component uses to queue messages, the seda component throws an exception when it reaches that limit instead of blocking. My understanding of a blocking queue is that the upper bound lets you put an upper bound on the queue and block when it becomes full. The fact that the seda component throws an exception makes the upper bound useless in practice, unless there is supposed to be some kind of easy workaround. We have not found one, and it looks like we will be rolling our own async component to compensate. :(The basic issue is that SedaProducer calls BlockingQueue.add() instead of BlockingQueue.put().
CAMEL-4225 camel-mail: add disconnect option A perpetually open connection to an email server can cause problems under various circumstances.  There should therefore be a "disconnect" option (default: false) that causes the connection to be closed after each action taken -- mail read from a folder, a message flagged for deletion, a message sent, etc. Improvement camel-mail: add disconnect option A perpetually open connection to an email server can cause problems under various circumstances.  There should therefore be a "disconnect" option (default: false) that causes the connection to be closed after each action taken -- mail read from a folder, a message flagged for deletion, a message sent, etc.
CAMEL-4223 Need to set the threadSafe option of CxfRsClientFactoryBean to be true WebClient which is used in CxfRsProducer should be thread safe, so we need to set the threadSafe option of CxfRsClientFactoryBean to be true. Improvement Need to set the threadSafe option of CxfRsClientFactoryBean to be true WebClient which is used in CxfRsProducer should be thread safe, so we need to set the threadSafe option of CxfRsClientFactoryBean to be true.
CAMEL-4222 Ref component should throw exception if bean not found in registry When you use the ref component and you refer to a non existing endpoint, then it silently returns null, causing Camel to fail with a different error saying the ref component cannot be foundCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: ref://xxx due to: No component found with scheme: refIt should use mandatoryLookup, and those methods should throw NoSuchBeanException instead of IllegalArgumentException as they currently does. Then the failure message is much more precise. Improvement Ref component should throw exception if bean not found in registry When you use the ref component and you refer to a non existing endpoint, then it silently returns null, causing Camel to fail with a different error saying the ref component cannot be foundCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: ref://xxx due to: No component found with scheme: refIt should use mandatoryLookup, and those methods should throw NoSuchBeanException instead of IllegalArgumentException as they currently does. Then the failure message is much more precise.
CAMEL-4221 Add Twain component A nice feature would be to add a new Twain component.So you could route images obtained from a scanner.http://www.gnome.sk/Twain/jtp.htmlorhttp://asprise.com/product/jtwain/ New Feature Add Twain component A nice feature would be to add a new Twain component.So you could route images obtained from a scanner.http://www.gnome.sk/Twain/jtp.htmlorhttp://asprise.com/product/jtwain/
CAMEL-4220 Add jaxb.index file to camel-example-spring-ws to avoid issues on some systems not capable of doing JAXB marshalling You may end up in situations where the example cannot start throwing exceptions[ main] MessageDispatcherServlet ERROR Context initialization failedorg.apache.camel.RuntimeCamelException: javax.xml.bind.JAXBException: "org.apache.camel.example.server.model" doesnt contain ObjectFactory.class or jaxb.index Improvement Add jaxb.index file to camel-example-spring-ws to avoid issues on some systems not capable of doing JAXB marshalling You may end up in situations where the example cannot start throwing exceptions[ main] MessageDispatcherServlet ERROR Context initialization failedorg.apache.camel.RuntimeCamelException: javax.xml.bind.JAXBException: "org.apache.camel.example.server.model" doesnt contain ObjectFactory.class or jaxb.index
CAMEL-4218 Simple language - Add support for using multiple list/map index chained together Seehttp://fusesource.com/forums/thread.jspa?messageID=11182&#11182We should add support for in simple language to be able to do:{code}"${body[0][cool]}"{code}To access a body of type List<Map>, to access the first record in the list, and access the map with the key cool.Currently you cannot do multiple chained [] in simple language. Improvement Simple language - Add support for using multiple list/map index chained together Seehttp://fusesource.com/forums/thread.jspa?messageID=11182&#11182We should add support for in simple language to be able to do:{code}"${body[0][cool]}"{code}To access a body of type List<Map>, to access the first record in the list, and access the map with the key cool.Currently you cannot do multiple chained [] in simple language.
CAMEL-4212 http components should support parameters with multiple values when mapping to Camel headers All the http components in Camel should support mapping HttpServletRequest parameters to Camel Message headers where there can be multiple values for the same key. So in that case the value of the Camel Message header should be a List. Improvement http components should support parameters with multiple values when mapping to Camel headers All the http components in Camel should support mapping HttpServletRequest parameters to Camel Message headers where there can be multiple values for the same key. So in that case the value of the Camel Message header should be a List.
CAMEL-4210 Add unit test on camel-example-cxf-osgi Added unit test on the camel-example-cxf-osgi so we can run some standalone test or test the example which is deployed into some other OSGi container like ServiceMix. Improvement Add unit test on camel-example-cxf-osgi Added unit test on the camel-example-cxf-osgi so we can run some standalone test or test the example which is deployed into some other OSGi container like ServiceMix.
CAMEL-4209 Upgrade camel-guice to use guice 3.0 As Guice 3.0 is released for a while, we should consider to upgrade the guice version of camel-guice.Here is the thread[1] which discusses about it.[1]http://camel.465427.n5.nabble.com/camel-guice-td4565474.html Improvement Upgrade camel-guice to use guice 3.0 As Guice 3.0 is released for a while, we should consider to upgrade the guice version of camel-guice.Here is the thread[1] which discusses about it.[1]http://camel.465427.n5.nabble.com/camel-guice-td4565474.html
CAMEL-4207 Test case CxfEndpointBeanBusSettingTest should use ExtensionManagerBus instead of CXFBusImpl I noticed a minor deficiency in one of the CXF spring configuration tests in the current Camel trunk.In org.apache.camel.component.cxf.spring.CxfEndpointBeanBusSettingTest, the two CXF bus instances are configured and referenced from the two Camel CXF endpoints.This test runs without errors. But if you try to use this example in a real scenario where these CXF endpoints are actually referenced in the Camel route, you will get an NPE at the following code line.    protected BindingInfo createBindingInfo() {        BindingFactoryManager mgr = bus.getExtension(BindingFactoryManager.class);                  ...           bindingFactory = mgr.getBindingFactory(binding); //<--- this lineCaused by: java.lang.NullPointerException	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createBindingInfo(AbstractWSDLBasedEndpointFactory.java:338)	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpointInfo(AbstractWSDLBasedEndpointFactory.java:252)	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:147)	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:157)	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:226)	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:162)	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:75)	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:124)	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1843)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1771)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1556)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1448)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1338)	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1316)	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:204)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:99)	... 31 moreThis null BindingFactoryManager instance is the result from the configuration that uses CXFBusImpl directly, as    <bean id="cxf1" class="org.apache.cxf.bus.CXFBusImpl"/>    <bean id="cxf2" class="org.apache.cxf.bus.CXFBusImpl"/>In CXF 2.4, the standard extensions are inserted into the bus at org.apache.cxf.bus.extension.ExtensionManagerBus's constructor.Therefore, in order to get the BindingFactoryManager inserted into the bus to avoid this NPE, the ExtensionManagerBus class should be used instead of CXFBusImpl as the class parameter. Alternatively, as this is a spring configuration, we could use org.apache.cxf.bus.spring.SpringBus. But I think ExtensionManagerBus is more neutral and therefore probably more suitable as an example to the users.    <bean id="cxf1" class="org.apache.cxf.bus.extension.ExtensionManagerBus"/>    <bean id="cxf2" class="org.apache.cxf.bus.extension.ExtensionManagerBus"/>I am attaching a patch file suggesting this change and also another minor change in the test program to add a few more assertion checks.Regards, aki Test Test case CxfEndpointBeanBusSettingTest should use ExtensionManagerBus instead of CXFBusImpl I noticed a minor deficiency in one of the CXF spring configuration tests in the current Camel trunk.In org.apache.camel.component.cxf.spring.CxfEndpointBeanBusSettingTest, the two CXF bus instances are configured and referenced from the two Camel CXF endpoints.This test runs without errors. But if you try to use this example in a real scenario where these CXF endpoints are actually referenced in the Camel route, you will get an NPE at the following code line.    protected BindingInfo createBindingInfo() {        BindingFactoryManager mgr = bus.getExtension(BindingFactoryManager.class);                  ...           bindingFactory = mgr.getBindingFactory(binding); //<--- this lineCaused by: java.lang.NullPointerException	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createBindingInfo(AbstractWSDLBasedEndpointFactory.java:338)	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpointInfo(AbstractWSDLBasedEndpointFactory.java:252)	at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:147)	at org.apache.cxf.frontend.ServerFactoryBean.create(ServerFactoryBean.java:157)	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:226)	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:162)	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:61)	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:75)	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:124)	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:1843)	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1771)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1556)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1448)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1338)	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1316)	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:204)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:99)	... 31 moreThis null BindingFactoryManager instance is the result from the configuration that uses CXFBusImpl directly, as    <bean id="cxf1" class="org.apache.cxf.bus.CXFBusImpl"/>    <bean id="cxf2" class="org.apache.cxf.bus.CXFBusImpl"/>In CXF 2.4, the standard extensions are inserted into the bus at org.apache.cxf.bus.extension.ExtensionManagerBus's constructor.Therefore, in order to get the BindingFactoryManager inserted into the bus to avoid this NPE, the ExtensionManagerBus class should be used instead of CXFBusImpl as the class parameter. Alternatively, as this is a spring configuration, we could use org.apache.cxf.bus.spring.SpringBus. But I think ExtensionManagerBus is more neutral and therefore probably more suitable as an example to the users.    <bean id="cxf1" class="org.apache.cxf.bus.extension.ExtensionManagerBus"/>    <bean id="cxf2" class="org.apache.cxf.bus.extension.ExtensionManagerBus"/>I am attaching a patch file suggesting this change and also another minor change in the test program to add a few more assertion checks.Regards, aki
CAMEL-4206 Upgrade to scala 2.9.0 We should upgrade to Scala 2.9.0. There is a SMX wrapped bundle for it in central repo now. Task Upgrade to scala 2.9.0 We should upgrade to Scala 2.9.0. There is a SMX wrapped bundle for it in central repo now.
CAMEL-4205 Add whenDoneByIndex to NotifiyBuilder To make it easier to instruct the notifier to match only when a message by its index is done.See the updated wiki page for detailshttps://cwiki.apache.org/confluence/display/CAMEL/NotifyBuilder Improvement Add whenDoneByIndex to NotifiyBuilder To make it easier to instruct the notifier to match only when a message by its index is done.See the updated wiki page for detailshttps://cwiki.apache.org/confluence/display/CAMEL/NotifyBuilder
CAMEL-4202 camel-jms - Using request/reply over persistent queues should be faster See nabblehttp://camel.465427.n5.nabble.com/slow-reply-for-jms-component-when-url-contains-replyTo-tp4563075p4563075.htmlWhen using persistent replyTo queues for request/reply over JMS, then the ReplyManager should be faster to pickup replies.The default spring-jms timeout is 1 sec and it impacts the performance.Likewise the receiveTimeout should not be set on the reply managers as that does not apply here. Improvement camel-jms - Using request/reply over persistent queues should be faster See nabblehttp://camel.465427.n5.nabble.com/slow-reply-for-jms-component-when-url-contains-replyTo-tp4563075p4563075.htmlWhen using persistent replyTo queues for request/reply over JMS, then the ReplyManager should be faster to pickup replies.The default spring-jms timeout is 1 sec and it impacts the performance.Likewise the receiveTimeout should not be set on the reply managers as that does not apply here.
CAMEL-4201 camel-test - Output in log how long time the test took We should output how long time it takes to execute the test method. We do have some start/end markers in the logs.Now it outputs the took line in the logs as shown2011-07-09 15:28:54,442 INFO  DebugJUnit4Test - ******************************************************************************** 2011-07-09 15:28:54,442 INFO  DebugJUnit4Test - Testing done: testDebugger(org.apache.camel.test.patterns.DebugJUnit4Test) 2011-07-09 15:28:54,443 INFO  DebugJUnit4Test - Took: 0.020 seconds (20 millis) 2011-07-09 15:28:54,443 INFO  DebugJUnit4Test - ********************************************************************************  Improvement camel-test - Output in log how long time the test took We should output how long time it takes to execute the test method. We do have some start/end markers in the logs.Now it outputs the took line in the logs as shown2011-07-09 15:28:54,442 INFO  DebugJUnit4Test - ******************************************************************************** 2011-07-09 15:28:54,442 INFO  DebugJUnit4Test - Testing done: testDebugger(org.apache.camel.test.patterns.DebugJUnit4Test) 2011-07-09 15:28:54,443 INFO  DebugJUnit4Test - Took: 0.020 seconds (20 millis) 2011-07-09 15:28:54,443 INFO  DebugJUnit4Test - ******************************************************************************** 
CAMEL-4200 Removed ANT support for examples As discussed on @devhttp://camel.465427.n5.nabble.com/DISCUSS-Remove-or-reduce-ANT-support-for-Camel-examples-tp4563886p4563886.htmlWe should remove the ANT support for our examples. We may create a new Hello World example that has support for both Maven and ANT, so end users have one example to easily get started.But all the other examples should have ANT support removed as its to painful to keep and maintain so they actually works. Task Removed ANT support for examples As discussed on @devhttp://camel.465427.n5.nabble.com/DISCUSS-Remove-or-reduce-ANT-support-for-Camel-examples-tp4563886p4563886.htmlWe should remove the ANT support for our examples. We may create a new Hello World example that has support for both Maven and ANT, so end users have one example to easily get started.But all the other examples should have ANT support removed as its to painful to keep and maintain so they actually works.
CAMEL-4199 Add not() to ValueBuilder so you can build predicate expressions to negate a predicate For example in unit tests you may want to say that the message body should *not* be a String type etc:{code}mock.message(0).body().not().isInstanceOf(String.class);{code}eg we need the {{not()}} method in the ValueBuilder Improvement Add not() to ValueBuilder so you can build predicate expressions to negate a predicate For example in unit tests you may want to say that the message body should *not* be a String type etc:{code}mock.message(0).body().not().isInstanceOf(String.class);{code}eg we need the {{not()}} method in the ValueBuilder
CAMEL-4197 scheduled route policy should not start Quartz scheduler, but let QuartzComponent do that The QuartzScheduler lifecycle is handled by QuartzComponent and we should let it startup the scheduler. The component does this best as it has logic to ensure all that the scheduler is only started after the entire CamelContext has been fully initialized and started. This is to ensure the scheduler do not trigger any action that may send in messages to Camel routes and whatnot too early (when CamelContext is not really ready). Improvement scheduled route policy should not start Quartz scheduler, but let QuartzComponent do that The QuartzScheduler lifecycle is handled by QuartzComponent and we should let it startup the scheduler. The component does this best as it has logic to ensure all that the scheduler is only started after the entire CamelContext has been fully initialized and started. This is to ensure the scheduler do not trigger any action that may send in messages to Camel routes and whatnot too early (when CamelContext is not really ready).
CAMEL-4196 scheduled route policy should fail to start if mis configured Currently they just log a WARN if they have been misconfigured, such as having no time details.Instead we should fail with an exception stating this problem instead (eg prefer to fail fast if something is wrong) Improvement scheduled route policy should fail to start if mis configured Currently they just log a WARN if they have been misconfigured, such as having no time details.Instead we should fail with an exception stating this problem instead (eg prefer to fail fast if something is wrong)
CAMEL-4192 Upgrade Axiom version 1.2.12 As Axiom 1.2.12 is released for a while, we should consider to upgrade it. Improvement Upgrade Axiom version 1.2.12 As Axiom 1.2.12 is released for a while, we should consider to upgrade it.
CAMEL-4190 Fixed the WARNING message when create a cxf endpoint from Spring bean There is a annoying WARNING message（which is harmless) when creating the camel-cxf endpoint from the spring bean.{code}ReflectionServiceFactoryBean   WARN  AJAX-WS Annotation was found on com.acme.BusinessServicePort while using theSimple frontend.  For better results, use the JAX-WS frontend.{code}You can find more information here[1].[1]http://camel.465427.n5.nabble.com/Warning-in-cxf-endpoint-configuration-tp4561812p4561812.html  Improvement Fixed the WARNING message when create a cxf endpoint from Spring bean There is a annoying WARNING message(which is harmless) when creating the camel-cxf endpoint from the spring bean.{code}ReflectionServiceFactoryBean   WARN  AJAX-WS Annotation was found on com.acme.BusinessServicePort while using theSimple frontend.  For better results, use the JAX-WS frontend.{code}You can find more information here[1].[1]http://camel.465427.n5.nabble.com/Warning-in-cxf-endpoint-configuration-tp4561812p4561812.html 
CAMEL-4183 Set the ApplicationContextClassLoad before calling the AtomUtils.parseDocument() camel-atom component can't work rightly within the OSGi platform, as the Abdera is using TCCL to load the configuration instance.We need to set the TCCL before calling the AtomUtils.parseDocument(). Improvement Set the ApplicationContextClassLoad before calling the AtomUtils.parseDocument() camel-atom component can't work rightly within the OSGi platform, as the Abdera is using TCCL to load the configuration instance.We need to set the TCCL before calling the AtomUtils.parseDocument().
CAMEL-4182 Port the minDepth and maxDepth options from file component to ftp component See CAMEL-3894 for details. New Feature Port the minDepth and maxDepth options from file component to ftp component See CAMEL-3894 for details.
CAMEL-4181 Removing a route should remove it from the internal startup order list If you startup Camel with X number of routes. And then later stop and remove one of those routes. That route should be removed from the internal startup routes list in DefaultCamelContext.Camel end users may notice this in the logs as when you shutdown CamelContext then it may log that shutting down 3 routes. But in reality there is only 2 since you have removed 1 route. Improvement Removing a route should remove it from the internal startup order list If you startup Camel with X number of routes. And then later stop and remove one of those routes. That route should be removed from the internal startup routes list in DefaultCamelContext.Camel end users may notice this in the logs as when you shutdown CamelContext then it may log that shutting down 3 routes. But in reality there is only 2 since you have removed 1 route.
CAMEL-4178 WireTap should auto-convert streams to string so it always works by default When wiretapping the result of a http request (to uri="http://foo"), the wiretap does not work because the result is a stream. The developer has to remember to convert the result to a string first to avoid the first consumption of the stream to make the data not available for wiretapping.In the interest of "defaults that work", maybe the wiretap should "know" to handle streams in a way that makes the wiretap work without extra consideration by the developer. Streams could be auto-converted to string or, if the amount of data is larger than a certain pre-configured threshold, cache them to disk and read the resulting file.Here's an example of a route that needs a convertBodyTo to make the wiretap work. Without this, the wiretap quietly fails, and it can be quite time-consuming to try to find out why.{code:xml} <route>	<!-- jetty listening on port 8087 -->	<from uri="jetty:http://0.0.0.0:8087/wsn/Broker"/>	<!-- log input received -->	<wireTap uri="file:data/recording?fileName=wsn-${date:now:yyyyMMdd}.log&amp;fileExist=Append">		<body>			<simple>[${date:now:dd.MM.yyyy hh:mm:ss}] [INCOMING REQUEST]: ${in.body}&#xA;&#xD;</simple>		</body>	</wireTap>	<!-- send proxied request to actual web service -->	<removeHeaders pattern="CamelHttp*"/>	<removeHeader headerName="Accept-Encoding"/>	<to uri="http://127.0.0.1:8192/wsn/Broker/"/>	<!-- convert to string to prevent the stream to be consumed by the wiretap -->	<convertBodyTo type="String"/>	<!-- log answer from real web service -->	<wireTap uri="file:data/recording?fileName=wsn-${date:now:yyyyMMdd}.log&amp;fileExist=Append">		<body>			<simple>[${date:now:dd.MM.yyyy hh:mm:ss}] [OUTGOING RESPONSE]: ${in.body}&#xA;&#xD;</simple>		</body>	</wireTap></route>{code}  Improvement WireTap should auto-convert streams to string so it always works by default When wiretapping the result of a http request (to uri="http://foo"), the wiretap does not work because the result is a stream. The developer has to remember to convert the result to a string first to avoid the first consumption of the stream to make the data not available for wiretapping.In the interest of "defaults that work", maybe the wiretap should "know" to handle streams in a way that makes the wiretap work without extra consideration by the developer. Streams could be auto-converted to string or, if the amount of data is larger than a certain pre-configured threshold, cache them to disk and read the resulting file.Here's an example of a route that needs a convertBodyTo to make the wiretap work. Without this, the wiretap quietly fails, and it can be quite time-consuming to try to find out why.{code:xml} <route>	<!-- jetty listening on port 8087 -->	<from uri="jetty:http://0.0.0.0:8087/wsn/Broker"/>	<!-- log input received -->	<wireTap uri="file:data/recording?fileName=wsn-${date:now:yyyyMMdd}.log&amp;fileExist=Append">		<body>			<simple>[${date:now:dd.MM.yyyy hh:mm:ss}] [INCOMING REQUEST]: ${in.body}&#xA;&#xD;</simple>		</body>	</wireTap>	<!-- send proxied request to actual web service -->	<removeHeaders pattern="CamelHttp*"/>	<removeHeader headerName="Accept-Encoding"/>	<to uri="http://127.0.0.1:8192/wsn/Broker/"/>	<!-- convert to string to prevent the stream to be consumed by the wiretap -->	<convertBodyTo type="String"/>	<!-- log answer from real web service -->	<wireTap uri="file:data/recording?fileName=wsn-${date:now:yyyyMMdd}.log&amp;fileExist=Append">		<body>			<simple>[${date:now:dd.MM.yyyy hh:mm:ss}] [OUTGOING RESPONSE]: ${in.body}&#xA;&#xD;</simple>		</body>	</wireTap></route>{code} 
CAMEL-4175 Enable Restlet servlet to be configured within a webapp There are three possible ways to configure a Restlet application within a servlet container (http://www.restlet.org/documentation/2.0/jee/ext/org/restlet/ext/servlet/ServerServlet.html) and using the subclassed SpringServerServlet enables configuration within Camel by injecting the Restlet Component - however this is currently only available internally within the Camel component.Use of the Restlet servlet within a servlet container enables routes to be configured with relative paths in URIs (removing the restrictions of hard-coded absolute URIs) and for the hosting servlet container to handle incoming requests (rather than have to spawn a separate server process on a new port).To configure, add the following to your camel-context.xml;  <camelContext>    <route id="RS_RestletDemo">      <from uri="restlet:/demo/{id}" />      <transform>        <simple>Request type : ${header.CamelHttpMethod} and ID : ${header.id}</simple>      </transform>    </route>   </camelContext>  <bean id="RestletComponent" class="org.restlet.Component" />  <bean id="RestletComponentService" class="org.apache.camel.component.restlet.RestletComponent">    <constructor-arg index="0">      <ref bean="RestletComponent" />    </constructor-arg>  </bean>And add this to your web.xml;  <!-- Restlet Servlet -->  <servlet>    <servlet-name>RestletServlet</servlet-name>    <servlet-class>org.restlet.ext.spring.SpringServerServlet</servlet-class>    <init-param>      <param-name>org.restlet.component</param-name>      <param-value>RestletComponent</param-value>    </init-param>  </servlet>  <servlet-mapping>    <servlet-name>RestletServlet</servlet-name>    <url-pattern>/rs/*</url-pattern>  </servlet-mapping>You will then be able to access the deployed route at http://localhost:8080/mywebapp/rs/demo/1234 where; - localhost:8080 is the server and port of your servlet container - mywebapp is the name of your deployed webappYour browser will then show the following content;"Request type : GET and ID : 1234" Improvement Enable Restlet servlet to be configured within a webapp There are three possible ways to configure a Restlet application within a servlet container (http://www.restlet.org/documentation/2.0/jee/ext/org/restlet/ext/servlet/ServerServlet.html) and using the subclassed SpringServerServlet enables configuration within Camel by injecting the Restlet Component - however this is currently only available internally within the Camel component.Use of the Restlet servlet within a servlet container enables routes to be configured with relative paths in URIs (removing the restrictions of hard-coded absolute URIs) and for the hosting servlet container to handle incoming requests (rather than have to spawn a separate server process on a new port).To configure, add the following to your camel-context.xml;  <camelContext>    <route id="RS_RestletDemo">      <from uri="restlet:/demo/{id}" />      <transform>        <simple>Request type : ${header.CamelHttpMethod} and ID : ${header.id}</simple>      </transform>    </route>   </camelContext>  <bean id="RestletComponent" class="org.restlet.Component" />  <bean id="RestletComponentService" class="org.apache.camel.component.restlet.RestletComponent">    <constructor-arg index="0">      <ref bean="RestletComponent" />    </constructor-arg>  </bean>And add this to your web.xml;  <!-- Restlet Servlet -->  <servlet>    <servlet-name>RestletServlet</servlet-name>    <servlet-class>org.restlet.ext.spring.SpringServerServlet</servlet-class>    <init-param>      <param-name>org.restlet.component</param-name>      <param-value>RestletComponent</param-value>    </init-param>  </servlet>  <servlet-mapping>    <servlet-name>RestletServlet</servlet-name>    <url-pattern>/rs/*</url-pattern>  </servlet-mapping>You will then be able to access the deployed route at http://localhost:8080/mywebapp/rs/demo/1234 where; - localhost:8080 is the server and port of your servlet container - mywebapp is the name of your deployed webappYour browser will then show the following content;"Request type : GET and ID : 1234"
CAMEL-4169 simple calculations in route create calculation possibilities in simple language. For example to increment a header property: ${header.counter}++example:from("direct:getLastValueFromCache").transform().simple("${header.lastProcessedOrder}++").to("direct:createNewOrderWithNewProcessingNumber"); New Feature simple calculations in route create calculation possibilities in simple language. For example to increment a header property: ${header.counter}++example:from("direct:getLastValueFromCache").transform().simple("${header.lastProcessedOrder}++").to("direct:createNewOrderWithNewProcessingNumber");
CAMEL-4164 A camel component for ISO8583 protocol A new component to interface with ISO8583 protocol. When started as a consumer, it listens on a port, and when started as a producer, it connects to a remote server. Let me know if this has been useful to you. New Feature A camel component for ISO8583 protocol A new component to interface with ISO8583 protocol. When started as a consumer, it listens on a port, and when started as a producer, it connects to a remote server. Let me know if this has been useful to you.
CAMEL-4163 Allow polling consumer to accept parameters such as a header with a file name to poll I want something like:{code}.setHeader(Exchange.FILE_NAME).xpath("...").pollEnrich("file:/test/data", 10000){code}But PollingConsumer API does not allow passing FILE_NAME from outside.See http://www.nabble.com/pollEnrich-doesn%27t-look-for-FILE_NAME-ts25458854.html New Feature Allow polling consumer to accept parameters such as a header with a file name to poll I want something like:{code}.setHeader(Exchange.FILE_NAME).xpath("...").pollEnrich("file:/test/data", 10000){code}But PollingConsumer API does not allow passing FILE_NAME from outside.See http://www.nabble.com/pollEnrich-doesn%27t-look-for-FILE_NAME-ts25458854.html
CAMEL-4162 Add an option fragment to JAXBDataFormat This option will be helpful if the user don't want jaxb dataformat generate the XMl declaration. Improvement Add an option fragment to JAXBDataFormat This option will be helpful if the user don't want jaxb dataformat generate the XMl declaration.
CAMEL-4161 make camel-mail dependency on Spring's JavaMailSenderImpl optional camel-mail is currently dependent on org.springframework.mail.javamail.JavaMailSenderImpl, but uses relatively little of its functionality.  In many cases it may be sufficient to fall back on a default JavaMailSenderImpl that only implements the bare minimum necessary to send mail, similar to how Management functionality falls back on DefaultManagementStrategy if the Spring JMX implementation is not available.This would make camel-mail use possible in an otherwise Spring-less application. Improvement make camel-mail dependency on Spring's JavaMailSenderImpl optional camel-mail is currently dependent on org.springframework.mail.javamail.JavaMailSenderImpl, but uses relatively little of its functionality.  In many cases it may be sufficient to fall back on a default JavaMailSenderImpl that only implements the bare minimum necessary to send mail, similar to how Management functionality falls back on DefaultManagementStrategy if the Spring JMX implementation is not available.This would make camel-mail use possible in an otherwise Spring-less application.
CAMEL-4160 MockEndpoint - Add options to only keep X first / last messages If you use mock endpoints they keep a copy of the exchange send to it. But if you test using a lot of messages (eg lets say 500.000) then that takes up much memory.So in some cases it may be desireable to just say only keep X number of messages (keepFirst=10&keepLast=10) to keep the first 10 and last 10 messages.The name of the options could maybe be something more appropriate.When using these options there may be some assertions that is not possible. But thats an acceptable tradeoff when you just want to use mocks to say, okay I expect at least 250000 messages here. And the first message should be like this, and the last message should be like that. etc. New Feature MockEndpoint - Add options to only keep X first / last messages If you use mock endpoints they keep a copy of the exchange send to it. But if you test using a lot of messages (eg lets say 500.000) then that takes up much memory.So in some cases it may be desireable to just say only keep X number of messages (keepFirst=10&keepLast=10) to keep the first 10 and last 10 messages.The name of the options could maybe be something more appropriate.When using these options there may be some assertions that is not possible. But thats an acceptable tradeoff when you just want to use mocks to say, okay I expect at least 250000 messages here. And the first message should be like this, and the last message should be like that. etc.
CAMEL-4159 MockEndpoint.expectedHeaderReceived checks only one header The method MockEndpoint.expectedHeaderReceived sets one header key and one header value to check. Subsequent calls to the same method overwrites the key and value. As a (non-expert) user of the MockEndpoint, I would expect this method to work somewhat along the lines of Map.put, so that multiple headers can be expected. Alternatively, replace it with MockEndpoint.expectedHeadersReceived(Map<String, Object> headers) or something like that.MockEndpoint.expectedPropertyReceived has the same issue.The unit test below demonstrates the bug. Have fun :){code}import java.util.HashMap;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.CamelTestSupport;public class MockEndpointTest extends CamelTestSupport {	@Produce(uri = "direct:input")	protected ProducerTemplate input;	protected MockEndpoint resultEndpoint;	@Override	protected RouteBuilder createRouteBuilder() throws Exception {	    return new RouteBuilder() {            public void configure() {            	resultEndpoint = new MockEndpoint("mock:result");            	resultEndpoint.setCamelContext(getContext());            	            	from("direct:input")            		.inOnly("log:output?showHeaders=true")            		.to(resultEndpoint);            }        };	}		public void testStuff() throws Exception {		HashMap<String, Object> headers = new HashMap<String, Object>();//		headers.put("h1", "hello");		headers.put("h2", "world");		resultEndpoint.expectedHeaderReceived("h1", "hello");		resultEndpoint.expectedHeaderReceived("h2", "world");				input.sendBodyAndHeaders(null, headers);				resultEndpoint.expectedMessageCount(1);		resultEndpoint.assertIsNotSatisfied();	}}{code} Improvement MockEndpoint.expectedHeaderReceived checks only one header The method MockEndpoint.expectedHeaderReceived sets one header key and one header value to check. Subsequent calls to the same method overwrites the key and value. As a (non-expert) user of the MockEndpoint, I would expect this method to work somewhat along the lines of Map.put, so that multiple headers can be expected. Alternatively, replace it with MockEndpoint.expectedHeadersReceived(Map<String, Object> headers) or something like that.MockEndpoint.expectedPropertyReceived has the same issue.The unit test below demonstrates the bug. Have fun :){code}import java.util.HashMap;import org.apache.camel.Produce;import org.apache.camel.ProducerTemplate;import org.apache.camel.builder.RouteBuilder;import org.apache.camel.component.mock.MockEndpoint;import org.apache.camel.test.CamelTestSupport;public class MockEndpointTest extends CamelTestSupport {	@Produce(uri = "direct:input")	protected ProducerTemplate input;	protected MockEndpoint resultEndpoint;	@Override	protected RouteBuilder createRouteBuilder() throws Exception {	    return new RouteBuilder() {            public void configure() {            	resultEndpoint = new MockEndpoint("mock:result");            	resultEndpoint.setCamelContext(getContext());            	            	from("direct:input")            		.inOnly("log:output?showHeaders=true")            		.to(resultEndpoint);            }        };	}		public void testStuff() throws Exception {		HashMap<String, Object> headers = new HashMap<String, Object>();//		headers.put("h1", "hello");		headers.put("h2", "world");		resultEndpoint.expectedHeaderReceived("h1", "hello");		resultEndpoint.expectedHeaderReceived("h2", "world");				input.sendBodyAndHeaders(null, headers);				resultEndpoint.expectedMessageCount(1);		resultEndpoint.assertIsNotSatisfied();	}}{code}
CAMEL-4158 Content Enricher should decorate the TO_ENDPOINT header so we have the uri of the resource we enriched from The regular EIPs such as to, recipient list, multicast, and the likes decorates the message header with a TO_ENDPOINT with the uri of the endpoint. However the content enricher (enrich and pollEnrich) doesn't do that, so we should add that to it. Improvement Content Enricher should decorate the TO_ENDPOINT header so we have the uri of the resource we enriched from The regular EIPs such as to, recipient list, multicast, and the likes decorates the message header with a TO_ENDPOINT with the uri of the endpoint. However the content enricher (enrich and pollEnrich) doesn't do that, so we should add that to it.
CAMEL-4157 Upgrade Jetty version to 7.4.2.v20110526 CXF is using Jetty 7.4.2, it could be better that Camel is using the same version of Jetty. Task Upgrade Jetty version to 7.4.2.v20110526 CXF is using Jetty 7.4.2, it could be better that Camel is using the same version of Jetty.
CAMEL-4156 Add ManagementObjectStrategy to SPI to allow customization of actual underlying mbeans registered by Camel When Camel registers MBeans in JMX it uses a lifecycle strategy for that, eg the lifecycle strategy is triggered when X is added/remove to Camel. The JMX supported lifecycle strategy is DefaultManagementLifecycleStrategy. That class has some private code that creates the actual MBeans being used when registering mbeans.So far we have a pluggable SPI for defining ObjectName for the mbeans (ManagementNameStrategy), so you can control that if you want.Likewise we should have a pluggable SPI for the logic that creates the mbean to be used. It should be named: ManagementObjectStrategy.We should then move the private logic from DefaultManagementLifecycleStrategy to a default implementation of that new SPI. This makes it easier for end users and Camel itself to register new mbeans, and reusing as much default code from Camel out of the box. Improvement Add ManagementObjectStrategy to SPI to allow customization of actual underlying mbeans registered by Camel When Camel registers MBeans in JMX it uses a lifecycle strategy for that, eg the lifecycle strategy is triggered when X is added/remove to Camel. The JMX supported lifecycle strategy is DefaultManagementLifecycleStrategy. That class has some private code that creates the actual MBeans being used when registering mbeans.So far we have a pluggable SPI for defining ObjectName for the mbeans (ManagementNameStrategy), so you can control that if you want.Likewise we should have a pluggable SPI for the logic that creates the mbean to be used. It should be named: ManagementObjectStrategy.We should then move the private logic from DefaultManagementLifecycleStrategy to a default implementation of that new SPI. This makes it easier for end users and Camel itself to register new mbeans, and reusing as much default code from Camel out of the box.
CAMEL-4155 CamelContext - Adding a service should inject CamelContext if servie is CamelContextAware Services can be added to a CamelContext so it helps control its lifecycle, and ensure the service is stopped/shutdown when CamelContext stops.As part of that we should also add support for injecting the CamelContext if the service is CamelContextAware. Improvement CamelContext - Adding a service should inject CamelContext if servie is CamelContextAware Services can be added to a CamelContext so it helps control its lifecycle, and ensure the service is stopped/shutdown when CamelContext stops.As part of that we should also add support for injecting the CamelContext if the service is CamelContextAware.
CAMEL-4154 Add removeEventNotifier API on ManagementStrategy We can add event notifiers, but we need an API to remove them as well. For example to allow dynamically to add notifiers, then later remove those on demand etc. Improvement Add removeEventNotifier API on ManagementStrategy We can add event notifiers, but we need an API to remove them as well. For example to allow dynamically to add notifiers, then later remove those on demand etc.
CAMEL-4153 Allow seda consumers to be suspended/resumed We should allow seda consumers to be suspended/resumed which may be a more gentle way instead of using start/stop. The reason is that start/stop creates/shutdown thread pools etc. And you may not want to do that. Instead you may prefer to just have the consumer not poll in new exchanges from the seda queue. Improvement Allow seda consumers to be suspended/resumed We should allow seda consumers to be suspended/resumed which may be a more gentle way instead of using start/stop. The reason is that start/stop creates/shutdown thread pools etc. And you may not want to do that. Instead you may prefer to just have the consumer not poll in new exchanges from the seda queue.
CAMEL-4150 Build failed with velocity issues. Build failed, after performing the following:>> set MAVEN_OPTS=-Xmx1024m -XX:MaxPerSize=512m>> mvn installThe necessary piece of the build log is below and the surefire reports are attached to this JIRA issue.====================================================================================[INFO] ------------------------------------------------------------------------[INFO] Building Camel :: Velocity 2.7.2[INFO] ------------------------------------------------------------------------Downloading: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.pom...        Downloaded: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.pom (11 KB at 21.9 KB/sec)Downloading: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.jar...Downloaded: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.jar (439 KB at 259.7 KB/sec)[INFO] [INFO] --- maven-antrun-plugin:1.2:run (create-prop) @ camel-velocity ---[INFO] Executing tasks     [echo] Maven version: 2.7.2     [echo] OSGi version: 2.7.2    [mkdir] Created dir: C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target[INFO] Executed tasks[INFO] [INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ camel-velocity ---[INFO] [INFO] --- maven-remote-resources-plugin:1.1:process (default) @ camel-velocity ---[INFO] [INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-velocity ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO] [INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-velocity ---[INFO] Compiling 3 source files to C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\classes[INFO] [INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-velocity ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 15 resources[INFO] Copying 3 resources[INFO] [INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ camel-velocity ---[INFO] Compiling 15 source files to C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\test-classes[INFO] [INFO] --- maven-surefire-plugin:2.7.1:test (default-test) @ camel-velocity ---[INFO] Surefire report directory: C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\surefire-reports------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.velocity.VelocityBodyAsDomainObjectTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.064 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityConcurrentTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.516 secRunning org.apache.camel.component.velocity.VelocityContentCacheTestTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.048 secRunning org.apache.camel.component.velocity.VelocityDynamicTemplateTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.251 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityEncodingTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.313 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityEndpointTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.454 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityLetterTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.313 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityLetterWithoutHeaderTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.297 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityLetterWithPaserTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.328 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocitySetHeaderTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.221 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocitySetTemplateViaHeaderTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.251 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocitySomeValuesNotInExchangeTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.485 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityTemplateInHeaderTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.97 secRunning org.apache.camel.component.velocity.VelocityTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.454 sec <<< FAILURE!Results :Failed tests:   testWithObject(org.apache.camel.component.velocity.VelocityBodyAsDomainObjectTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityDynamicTemplateTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityEncodingTest)  testReceivesFooResponse(org.apache.camel.component.velocity.VelocityEndpointTest)  testReceivesBarResponse(org.apache.camel.component.velocity.VelocityEndpointTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityLetterTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityLetterWithoutHeaderTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityLetterWithPaserTest)  testSendingApple(org.apache.camel.component.velocity.VelocitySetHeaderTest)  testSendingOrgane(org.apache.camel.component.velocity.VelocitySetHeaderTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocitySetTemplateViaHeaderTest)  testWithAllValues(org.apache.camel.component.velocity.VelocitySomeValuesNotInExchangeTest)  testWithSomeValues(org.apache.camel.component.velocity.VelocitySomeValuesNotInExchangeTest)  testReceivesFooResponse(org.apache.camel.component.velocity.VelocityTest)  testReceivesBarResponse(org.apache.camel.component.velocity.VelocityTest)Tests run: 24, Failures: 15, Errors: 0, Skipped: 0[INFO] ------------------------------------------------------------------------[INFO] Reactor Summary:[INFO] [INFO] Camel ............................................. SUCCESS [13.031s][INFO] Apache :: Camel Buildtools ........................ SUCCESS [6.359s][INFO] Camel :: Parent ................................... SUCCESS [7.687s][INFO] Camel :: Core ..................................... SUCCESS [35:28.852s][INFO] Camel :: Core XML ................................. SUCCESS [7.656s][INFO] Camel :: Core OSGi ................................ SUCCESS [33.749s][INFO] Camel :: Spring ................................... SUCCESS [22:26.778s][INFO] Camel :: Test ..................................... SUCCESS [26.046s][INFO] Camel :: Blueprint ................................ SUCCESS [1:12.092s][INFO] Camel :: JUEL ..................................... SUCCESS [25.609s][INFO] Camel :: BAM ...................................... SUCCESS [1:43.468s][INFO] Camel :: Groovy ................................... SUCCESS [28.744s][INFO] Camel :: JXPath ................................... SUCCESS [17.369s][INFO] Camel :: Velocity ................................. FAILURE [22.423s][INFO] Camel :: Scala .................................... SKIPPED[INFO] Camel :: HTTP ..................................... SKIPPED[INFO] Camel :: HTTP4 (HttpClient 4.x) ................... SKIPPED[INFO] Camel :: Jetty .................................... SKIPPED[INFO] Camel :: CXF ...................................... SKIPPED[INFO] Camel :: Components ............................... SKIPPED[INFO] Camel :: Web ...................................... SKIPPED[INFO] Camel :: Web :: Standalone ........................ SKIPPED[INFO] Camel :: JMS ...................................... SKIPPED[INFO] Camel :: AMQP ..................................... SKIPPED[INFO] Camel :: Atom ..................................... SKIPPED[INFO] Camel :: AWS ...................................... SKIPPED[INFO] Camel :: Bean validator ........................... SKIPPED[INFO] Camel :: Bindy .................................... SKIPPED[INFO] Camel :: Cache .................................... SKIPPED[INFO] Camel :: Castor ................................... SKIPPED[INFO] Camel :: Stream ................................... SKIPPED[INFO] Camel :: Cometd ................................... SKIPPED[INFO] Camel :: Context .................................. SKIPPED[INFO] Camel :: Crypto ................................... SKIPPED[INFO] Camel :: CSV ...................................... SKIPPED[INFO] Camel :: DNS ...................................... SKIPPED[INFO] Camel :: Dozer .................................... SKIPPED[INFO] Camel :: Eclipse .................................. SKIPPED[INFO] Camel :: EJB ...................................... SKIPPED[INFO] Camel :: Event Admin .............................. SKIPPED[INFO] Camel :: Exec ..................................... SKIPPED[INFO] Camel :: FlatPack ................................. SKIPPED[INFO] Camel :: Freemarker ............................... SKIPPED[INFO] Camel :: FTP ...................................... SKIPPED[INFO] Camel :: Servlet .................................. SKIPPED[INFO] Camel :: GAE ...................................... SKIPPED[INFO] Camel :: Guice .................................... SKIPPED[INFO] Camel :: HawtDB ................................... SKIPPED[INFO] Camel :: HazelCast ................................ SKIPPED[INFO] Camel :: MINA ..................................... SKIPPED[INFO] Camel :: HL7 ...................................... SKIPPED[INFO] Camel :: iBatis ................................... SKIPPED[INFO] Camel :: IRC ...................................... SKIPPED[INFO] Camel :: Jackson .................................. SKIPPED[INFO] Camel :: Javaspace ................................ SKIPPED[INFO] Camel :: Spring JavaConfig ........................ SKIPPED[INFO] Camel :: JAXB ..................................... SKIPPED[INFO] Camel :: Jasypt ................................... SKIPPED[INFO] Camel :: JCR ...................................... SKIPPED[INFO] Camel :: JDBC ..................................... SKIPPED[INFO] Camel :: Jibx ..................................... SKIPPED[INFO] Camel :: Jing ..................................... SKIPPED[INFO] Camel :: JMX ...................................... SKIPPED[INFO] Camel :: JoSQL .................................... SKIPPED[INFO] Camel :: JPA ...................................... SKIPPED[INFO] Camel :: Java Toolbox for AS/400 .................. SKIPPED[INFO] Camel :: Kestrel .................................. SKIPPED[INFO] Camel :: LDAP ..................................... SKIPPED[INFO] Camel :: Lucene ................................... SKIPPED[INFO] Camel :: Mail ..................................... SKIPPED[INFO] Camel :: MSV ...................................... SKIPPED[INFO] Camel :: MVEL ..................................... SKIPPED[INFO] Camel :: MyBatis .................................. SKIPPED[INFO] Camel :: Nagios ................................... SKIPPED[INFO] Camel :: Netty .................................... SKIPPED[INFO] Camel :: OGNL ..................................... SKIPPED[INFO] Camel :: Pax Logging .............................. SKIPPED[INFO] Camel :: Printer .................................. SKIPPED[INFO] Camel :: Protobuf ................................. SKIPPED[INFO] Camel :: Quartz ................................... SKIPPED[INFO] Camel :: QuickFIX/J ............................... SKIPPED[INFO] Camel :: Restlet .................................. SKIPPED[INFO] Camel :: RMI ...................................... SKIPPED[INFO] Camel :: Routebox ................................. SKIPPED[INFO] Camel :: Ruby ..................................... SKIPPED[INFO] Camel :: RSS ...................................... SKIPPED[INFO] Camel :: SAXON .................................... SKIPPED[INFO] Camel :: Script ................................... SKIPPED[INFO] Camel :: Shiro .................................... SKIPPED[INFO] Camel :: SIP ...................................... SKIPPED[INFO] Camel :: SMPP ..................................... SKIPPED[INFO] Camel :: SNMP ..................................... SKIPPED[INFO] Camel :: SOAP ..................................... SKIPPED[INFO] Camel :: Spring Integration ....................... SKIPPED[INFO] Camel :: Spring Security .......................... SKIPPED[INFO] Camel :: Spring Web Services ...................... SKIPPED[INFO] Camel :: SQL ...................................... SKIPPED[INFO] Camel :: StringTemplate ........................... SKIPPED[INFO] Camel :: Syslog ................................... SKIPPED[INFO] Camel :: TagSoup .................................. SKIPPED[INFO] Camel :: XMLBeans ................................. SKIPPED[INFO] Camel :: XML Security ............................. SKIPPED[INFO] Camel :: XMPP ..................................... SKIPPED[INFO] Camel :: XStream .................................. SKIPPED[INFO] Camel :: Platforms ................................ SKIPPED[INFO] Camel :: Platforms :: Apache Karaf ................ SKIPPED[INFO] Camel :: Platforms :: Apache Karaf :: Features .... SKIPPED[INFO] Camel :: Maven Plugins ............................ SKIPPED[INFO] Camel :: Maven Camel Plugin ....................... SKIPPED[INFO] Camel :: Maven Guice Plugin ....................... SKIPPED[INFO] Camel :: Html to Pdf Plugin ....................... SKIPPED[INFO] Camel :: Archetypes :: Camel Router with ActiveMQ . SKIPPED[INFO] Camel :: Archetypes :: Component .................. SKIPPED[INFO] Camel :: Archetypes :: Router ..................... SKIPPED[INFO] Camel :: Archetypes :: Scala Router ............... SKIPPED[INFO] Camel :: Archetypes :: Spring XML Based Router .... SKIPPED[INFO] Camel :: Archetypes :: Camel Routes WAR ........... SKIPPED[INFO] Camel :: Archetypes :: Camel Router with web console  SKIPPED[INFO] Camel :: Archetypes ............................... SKIPPED[INFO] Camel :: Manual ................................... SKIPPED[INFO] Camel :: Tooling .................................. SKIPPED[INFO] Camel :: Tests Bundles ............................ SKIPPED[INFO] Camel :: Test Bundles: mock-javamail-1.7 .......... SKIPPED[INFO] Camel :: Integration Tests :: Standalone .......... SKIPPED[INFO] Camel :: Integration Tests ........................ SKIPPED[INFO] Camel :: Partial Classpath Tests .................. SKIPPED[INFO] Camel :: OSGi Integration Tests ................... SKIPPED[INFO] Camel :: Tests .................................... SKIPPED[INFO] Camel :: Examples ................................. SKIPPED[INFO] Camel :: Example :: Aggregate ..................... SKIPPED[INFO] Camel :: Example :: Axis .......................... SKIPPED[INFO] Camel :: Example :: BAM ........................... SKIPPED[INFO] Camel :: Example :: Cafe .......................... SKIPPED[INFO] Camel :: Example :: CXF ........................... SKIPPED[INFO] Camel :: Example :: CXF Proxy ..................... SKIPPED[INFO] Camel :: Example :: CXF Tomcat .................... SKIPPED[INFO] Camel :: Example :: Docs .......................... SKIPPED[INFO] Camel :: Example :: ETL ........................... SKIPPED[INFO] Camel :: Example :: GAE ........................... SKIPPED[INFO] Camel :: Example :: GAuth ......................... SKIPPED[INFO] Camel :: Example :: Guice :: JMS .................. SKIPPED[INFO] Camel :: Example :: JMX ........................... SKIPPED[INFO] Camel :: Example :: JMS-File ...................... SKIPPED[INFO] Camel :: Example :: Loadbalancer camel-mina ....... SKIPPED[INFO] Camel :: Example :: Loan-Broker ................... SKIPPED[INFO] Camel :: Example :: Management .................... SKIPPED[INFO] Camel :: Example :: OSGi .......................... SKIPPED[INFO] Camel :: Example :: OSGi RMI ...................... SKIPPED[INFO] Camel :: Example :: POJO Messaging ................ SKIPPED[INFO] Camel :: Example :: Report Incident ............... SKIPPED[INFO] Camel :: Example :: Report Incident :: WS-Security  SKIPPED[INFO] Camel :: Example :: Route :: Throttling ........... SKIPPED[INFO] Camel :: Example :: Servlet Tomcat ................ SKIPPED[INFO] Camel :: Example :: Simple Jira Bot ............... SKIPPED[INFO] Camel :: Example :: Simple Jira Bot :: Java DSL ... SKIPPED[INFO] Camel :: Example :: Simple Jira Bot :: XML Configuration  SKIPPED[INFO] Camel :: Example :: Spring ........................ SKIPPED[INFO] Camel :: Example :: Spring :: JavaConfig .......... SKIPPED[INFO] Camel :: Example :: Spring :: JMS ................. SKIPPED[INFO] Camel :: Example :: Spring Web Services ........... SKIPPED[INFO] Camel :: Example :: Spring :: XQuery .............. SKIPPED[INFO] Camel :: Example :: Spring Security ............... SKIPPED[INFO] Camel :: Example :: Tracer ........................ SKIPPED[INFO] Camel :: Assembly ................................. SKIPPED[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 1:04:26.190s[INFO] Finished at: Fri Jun 24 10:50:11 EDT 2011[INFO] Final Memory: 105M/269M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.7.1:test (default-test) on project camel-velocity: There are test failures.[ERROR] [ERROR] Please refer to C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\surefire-reports for the individual test results. Test Build failed with velocity issues. Build failed, after performing the following:>> set MAVEN_OPTS=-Xmx1024m -XX:MaxPerSize=512m>> mvn installThe necessary piece of the build log is below and the surefire reports are attached to this JIRA issue.====================================================================================[INFO] ------------------------------------------------------------------------[INFO] Building Camel :: Velocity 2.7.2[INFO] ------------------------------------------------------------------------Downloading: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.pom...        Downloaded: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.pom (11 KB at 21.9 KB/sec)Downloading: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.jar...Downloaded: http://repo1.maven.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.jar (439 KB at 259.7 KB/sec)[INFO] [INFO] --- maven-antrun-plugin:1.2:run (create-prop) @ camel-velocity ---[INFO] Executing tasks     [echo] Maven version: 2.7.2     [echo] OSGi version: 2.7.2    [mkdir] Created dir: C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target[INFO] Executed tasks[INFO] [INFO] --- properties-maven-plugin:1.0-alpha-2:read-project-properties (default) @ camel-velocity ---[INFO] [INFO] --- maven-remote-resources-plugin:1.1:process (default) @ camel-velocity ---[INFO] [INFO] --- maven-resources-plugin:2.4.3:resources (default-resources) @ camel-velocity ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 3 resources[INFO] Copying 3 resources[INFO] [INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ camel-velocity ---[INFO] Compiling 3 source files to C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\classes[INFO] [INFO] --- maven-resources-plugin:2.4.3:testResources (default-testResources) @ camel-velocity ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 15 resources[INFO] Copying 3 resources[INFO] [INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ camel-velocity ---[INFO] Compiling 15 source files to C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\test-classes[INFO] [INFO] --- maven-surefire-plugin:2.7.1:test (default-test) @ camel-velocity ---[INFO] Surefire report directory: C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\surefire-reports------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.component.velocity.VelocityBodyAsDomainObjectTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.064 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityConcurrentTestTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.516 secRunning org.apache.camel.component.velocity.VelocityContentCacheTestTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.048 secRunning org.apache.camel.component.velocity.VelocityDynamicTemplateTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.251 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityEncodingTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.313 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityEndpointTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.454 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityLetterTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.313 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityLetterWithoutHeaderTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.297 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityLetterWithPaserTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.328 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocitySetHeaderTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 1.221 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocitySetTemplateViaHeaderTestTests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.251 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocitySomeValuesNotInExchangeTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.485 sec <<< FAILURE!Running org.apache.camel.component.velocity.VelocityTemplateInHeaderTestTests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.97 secRunning org.apache.camel.component.velocity.VelocityTestTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.454 sec <<< FAILURE!Results :Failed tests:   testWithObject(org.apache.camel.component.velocity.VelocityBodyAsDomainObjectTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityDynamicTemplateTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityEncodingTest)  testReceivesFooResponse(org.apache.camel.component.velocity.VelocityEndpointTest)  testReceivesBarResponse(org.apache.camel.component.velocity.VelocityEndpointTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityLetterTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityLetterWithoutHeaderTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocityLetterWithPaserTest)  testSendingApple(org.apache.camel.component.velocity.VelocitySetHeaderTest)  testSendingOrgane(org.apache.camel.component.velocity.VelocitySetHeaderTest)  testVelocityLetter(org.apache.camel.component.velocity.VelocitySetTemplateViaHeaderTest)  testWithAllValues(org.apache.camel.component.velocity.VelocitySomeValuesNotInExchangeTest)  testWithSomeValues(org.apache.camel.component.velocity.VelocitySomeValuesNotInExchangeTest)  testReceivesFooResponse(org.apache.camel.component.velocity.VelocityTest)  testReceivesBarResponse(org.apache.camel.component.velocity.VelocityTest)Tests run: 24, Failures: 15, Errors: 0, Skipped: 0[INFO] ------------------------------------------------------------------------[INFO] Reactor Summary:[INFO] [INFO] Camel ............................................. SUCCESS [13.031s][INFO] Apache :: Camel Buildtools ........................ SUCCESS [6.359s][INFO] Camel :: Parent ................................... SUCCESS [7.687s][INFO] Camel :: Core ..................................... SUCCESS [35:28.852s][INFO] Camel :: Core XML ................................. SUCCESS [7.656s][INFO] Camel :: Core OSGi ................................ SUCCESS [33.749s][INFO] Camel :: Spring ................................... SUCCESS [22:26.778s][INFO] Camel :: Test ..................................... SUCCESS [26.046s][INFO] Camel :: Blueprint ................................ SUCCESS [1:12.092s][INFO] Camel :: JUEL ..................................... SUCCESS [25.609s][INFO] Camel :: BAM ...................................... SUCCESS [1:43.468s][INFO] Camel :: Groovy ................................... SUCCESS [28.744s][INFO] Camel :: JXPath ................................... SUCCESS [17.369s][INFO] Camel :: Velocity ................................. FAILURE [22.423s][INFO] Camel :: Scala .................................... SKIPPED[INFO] Camel :: HTTP ..................................... SKIPPED[INFO] Camel :: HTTP4 (HttpClient 4.x) ................... SKIPPED[INFO] Camel :: Jetty .................................... SKIPPED[INFO] Camel :: CXF ...................................... SKIPPED[INFO] Camel :: Components ............................... SKIPPED[INFO] Camel :: Web ...................................... SKIPPED[INFO] Camel :: Web :: Standalone ........................ SKIPPED[INFO] Camel :: JMS ...................................... SKIPPED[INFO] Camel :: AMQP ..................................... SKIPPED[INFO] Camel :: Atom ..................................... SKIPPED[INFO] Camel :: AWS ...................................... SKIPPED[INFO] Camel :: Bean validator ........................... SKIPPED[INFO] Camel :: Bindy .................................... SKIPPED[INFO] Camel :: Cache .................................... SKIPPED[INFO] Camel :: Castor ................................... SKIPPED[INFO] Camel :: Stream ................................... SKIPPED[INFO] Camel :: Cometd ................................... SKIPPED[INFO] Camel :: Context .................................. SKIPPED[INFO] Camel :: Crypto ................................... SKIPPED[INFO] Camel :: CSV ...................................... SKIPPED[INFO] Camel :: DNS ...................................... SKIPPED[INFO] Camel :: Dozer .................................... SKIPPED[INFO] Camel :: Eclipse .................................. SKIPPED[INFO] Camel :: EJB ...................................... SKIPPED[INFO] Camel :: Event Admin .............................. SKIPPED[INFO] Camel :: Exec ..................................... SKIPPED[INFO] Camel :: FlatPack ................................. SKIPPED[INFO] Camel :: Freemarker ............................... SKIPPED[INFO] Camel :: FTP ...................................... SKIPPED[INFO] Camel :: Servlet .................................. SKIPPED[INFO] Camel :: GAE ...................................... SKIPPED[INFO] Camel :: Guice .................................... SKIPPED[INFO] Camel :: HawtDB ................................... SKIPPED[INFO] Camel :: HazelCast ................................ SKIPPED[INFO] Camel :: MINA ..................................... SKIPPED[INFO] Camel :: HL7 ...................................... SKIPPED[INFO] Camel :: iBatis ................................... SKIPPED[INFO] Camel :: IRC ...................................... SKIPPED[INFO] Camel :: Jackson .................................. SKIPPED[INFO] Camel :: Javaspace ................................ SKIPPED[INFO] Camel :: Spring JavaConfig ........................ SKIPPED[INFO] Camel :: JAXB ..................................... SKIPPED[INFO] Camel :: Jasypt ................................... SKIPPED[INFO] Camel :: JCR ...................................... SKIPPED[INFO] Camel :: JDBC ..................................... SKIPPED[INFO] Camel :: Jibx ..................................... SKIPPED[INFO] Camel :: Jing ..................................... SKIPPED[INFO] Camel :: JMX ...................................... SKIPPED[INFO] Camel :: JoSQL .................................... SKIPPED[INFO] Camel :: JPA ...................................... SKIPPED[INFO] Camel :: Java Toolbox for AS/400 .................. SKIPPED[INFO] Camel :: Kestrel .................................. SKIPPED[INFO] Camel :: LDAP ..................................... SKIPPED[INFO] Camel :: Lucene ................................... SKIPPED[INFO] Camel :: Mail ..................................... SKIPPED[INFO] Camel :: MSV ...................................... SKIPPED[INFO] Camel :: MVEL ..................................... SKIPPED[INFO] Camel :: MyBatis .................................. SKIPPED[INFO] Camel :: Nagios ................................... SKIPPED[INFO] Camel :: Netty .................................... SKIPPED[INFO] Camel :: OGNL ..................................... SKIPPED[INFO] Camel :: Pax Logging .............................. SKIPPED[INFO] Camel :: Printer .................................. SKIPPED[INFO] Camel :: Protobuf ................................. SKIPPED[INFO] Camel :: Quartz ................................... SKIPPED[INFO] Camel :: QuickFIX/J ............................... SKIPPED[INFO] Camel :: Restlet .................................. SKIPPED[INFO] Camel :: RMI ...................................... SKIPPED[INFO] Camel :: Routebox ................................. SKIPPED[INFO] Camel :: Ruby ..................................... SKIPPED[INFO] Camel :: RSS ...................................... SKIPPED[INFO] Camel :: SAXON .................................... SKIPPED[INFO] Camel :: Script ................................... SKIPPED[INFO] Camel :: Shiro .................................... SKIPPED[INFO] Camel :: SIP ...................................... SKIPPED[INFO] Camel :: SMPP ..................................... SKIPPED[INFO] Camel :: SNMP ..................................... SKIPPED[INFO] Camel :: SOAP ..................................... SKIPPED[INFO] Camel :: Spring Integration ....................... SKIPPED[INFO] Camel :: Spring Security .......................... SKIPPED[INFO] Camel :: Spring Web Services ...................... SKIPPED[INFO] Camel :: SQL ...................................... SKIPPED[INFO] Camel :: StringTemplate ........................... SKIPPED[INFO] Camel :: Syslog ................................... SKIPPED[INFO] Camel :: TagSoup .................................. SKIPPED[INFO] Camel :: XMLBeans ................................. SKIPPED[INFO] Camel :: XML Security ............................. SKIPPED[INFO] Camel :: XMPP ..................................... SKIPPED[INFO] Camel :: XStream .................................. SKIPPED[INFO] Camel :: Platforms ................................ SKIPPED[INFO] Camel :: Platforms :: Apache Karaf ................ SKIPPED[INFO] Camel :: Platforms :: Apache Karaf :: Features .... SKIPPED[INFO] Camel :: Maven Plugins ............................ SKIPPED[INFO] Camel :: Maven Camel Plugin ....................... SKIPPED[INFO] Camel :: Maven Guice Plugin ....................... SKIPPED[INFO] Camel :: Html to Pdf Plugin ....................... SKIPPED[INFO] Camel :: Archetypes :: Camel Router with ActiveMQ . SKIPPED[INFO] Camel :: Archetypes :: Component .................. SKIPPED[INFO] Camel :: Archetypes :: Router ..................... SKIPPED[INFO] Camel :: Archetypes :: Scala Router ............... SKIPPED[INFO] Camel :: Archetypes :: Spring XML Based Router .... SKIPPED[INFO] Camel :: Archetypes :: Camel Routes WAR ........... SKIPPED[INFO] Camel :: Archetypes :: Camel Router with web console  SKIPPED[INFO] Camel :: Archetypes ............................... SKIPPED[INFO] Camel :: Manual ................................... SKIPPED[INFO] Camel :: Tooling .................................. SKIPPED[INFO] Camel :: Tests Bundles ............................ SKIPPED[INFO] Camel :: Test Bundles: mock-javamail-1.7 .......... SKIPPED[INFO] Camel :: Integration Tests :: Standalone .......... SKIPPED[INFO] Camel :: Integration Tests ........................ SKIPPED[INFO] Camel :: Partial Classpath Tests .................. SKIPPED[INFO] Camel :: OSGi Integration Tests ................... SKIPPED[INFO] Camel :: Tests .................................... SKIPPED[INFO] Camel :: Examples ................................. SKIPPED[INFO] Camel :: Example :: Aggregate ..................... SKIPPED[INFO] Camel :: Example :: Axis .......................... SKIPPED[INFO] Camel :: Example :: BAM ........................... SKIPPED[INFO] Camel :: Example :: Cafe .......................... SKIPPED[INFO] Camel :: Example :: CXF ........................... SKIPPED[INFO] Camel :: Example :: CXF Proxy ..................... SKIPPED[INFO] Camel :: Example :: CXF Tomcat .................... SKIPPED[INFO] Camel :: Example :: Docs .......................... SKIPPED[INFO] Camel :: Example :: ETL ........................... SKIPPED[INFO] Camel :: Example :: GAE ........................... SKIPPED[INFO] Camel :: Example :: GAuth ......................... SKIPPED[INFO] Camel :: Example :: Guice :: JMS .................. SKIPPED[INFO] Camel :: Example :: JMX ........................... SKIPPED[INFO] Camel :: Example :: JMS-File ...................... SKIPPED[INFO] Camel :: Example :: Loadbalancer camel-mina ....... SKIPPED[INFO] Camel :: Example :: Loan-Broker ................... SKIPPED[INFO] Camel :: Example :: Management .................... SKIPPED[INFO] Camel :: Example :: OSGi .......................... SKIPPED[INFO] Camel :: Example :: OSGi RMI ...................... SKIPPED[INFO] Camel :: Example :: POJO Messaging ................ SKIPPED[INFO] Camel :: Example :: Report Incident ............... SKIPPED[INFO] Camel :: Example :: Report Incident :: WS-Security  SKIPPED[INFO] Camel :: Example :: Route :: Throttling ........... SKIPPED[INFO] Camel :: Example :: Servlet Tomcat ................ SKIPPED[INFO] Camel :: Example :: Simple Jira Bot ............... SKIPPED[INFO] Camel :: Example :: Simple Jira Bot :: Java DSL ... SKIPPED[INFO] Camel :: Example :: Simple Jira Bot :: XML Configuration  SKIPPED[INFO] Camel :: Example :: Spring ........................ SKIPPED[INFO] Camel :: Example :: Spring :: JavaConfig .......... SKIPPED[INFO] Camel :: Example :: Spring :: JMS ................. SKIPPED[INFO] Camel :: Example :: Spring Web Services ........... SKIPPED[INFO] Camel :: Example :: Spring :: XQuery .............. SKIPPED[INFO] Camel :: Example :: Spring Security ............... SKIPPED[INFO] Camel :: Example :: Tracer ........................ SKIPPED[INFO] Camel :: Assembly ................................. SKIPPED[INFO] ------------------------------------------------------------------------[INFO] BUILD FAILURE[INFO] ------------------------------------------------------------------------[INFO] Total time: 1:04:26.190s[INFO] Finished at: Fri Jun 24 10:50:11 EDT 2011[INFO] Final Memory: 105M/269M[INFO] ------------------------------------------------------------------------[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.7.1:test (default-test) on project camel-velocity: There are test failures.[ERROR] [ERROR] Please refer to C:\ApacheProducts\apache-camel-2.7.2\components\camel-velocity\target\surefire-reports for the individual test results.
CAMEL-4146 Add a CamelContext Factory that should be used to create camel contexts We need a way to intercept the creation of CamelContext.Maybe using a factory with META-INF/services to point to the default implementation to use. New Feature Add a CamelContext Factory that should be used to create camel contexts We need a way to intercept the creation of CamelContext.Maybe using a factory with META-INF/services to point to the default implementation to use.
CAMEL-4145 pollEnrich DSL behaves differently depending on a possibly explicitly given timeout For details see the user forum:http://camel.465427.n5.nabble.com/Is-this-pollEnrich-s-expected-behaviour-td4517089.html Improvement pollEnrich DSL behaves differently depending on a possibly explicitly given timeout For details see the user forum:http://camel.465427.n5.nabble.com/Is-this-pollEnrich-s-expected-behaviour-td4517089.html
CAMEL-4142 Add a profile in camel-example-cxf-osgi to build the bundle with Blueprint Using the "mvn clean install -Pblueprint" can build a bundle with blueprint configure, the default profile is using spring. Improvement Add a profile in camel-example-cxf-osgi to build the bundle with Blueprint Using the "mvn clean install -Pblueprint" can build a bundle with blueprint configure, the default profile is using spring.
CAMEL-4130 New JT400 URI option "guiAvailable" Added an URI option to the JT400 component (the following specification can be used for the documentation):Name: guiAvailableDefault value: falseDescription: specifies whether AS/400 prompting is enabled in the environment running Camel (true to enable, false to disable).This applies to both data queue and program call endpoints.According to the JT400 API specification:{quote}Applications that are running as i5/OS applications or want to control the sign-on user interface may want to run with prompting mode set to false.{quote} Improvement New JT400 URI option "guiAvailable" Added an URI option to the JT400 component (the following specification can be used for the documentation):Name: guiAvailableDefault value: falseDescription: specifies whether AS/400 prompting is enabled in the environment running Camel (true to enable, false to disable).This applies to both data queue and program call endpoints.According to the JT400 API specification:{quote}Applications that are running as i5/OS applications or want to control the sign-on user interface may want to run with prompting mode set to false.{quote}
CAMEL-4129 Override doStart() and doStop() in Jt400PgmProducer Methods doStart() and doStop() in Jt400PgmProducer are overridden in a fashion similar to that of Jt400DataQueueProducer. Improvement Override doStart() and doStop() in Jt400PgmProducer Methods doStart() and doStop() in Jt400PgmProducer are overridden in a fashion similar to that of Jt400DataQueueProducer.
CAMEL-4128 Camel CxfRsProducer should put the response code back to the message header Current Camel CxfRsProducer doesn't put the response code back to the message header.But the user want to access the response code.Here[1] is the discussion about it.[1]http://camel.465427.n5.nabble.com/Http-Status-code-from-CXFRS-not-working-tp4509452p4509452.html Improvement Camel CxfRsProducer should put the response code back to the message header Current Camel CxfRsProducer doesn't put the response code back to the message header.But the user want to access the response code.Here[1] is the discussion about it.[1]http://camel.465427.n5.nabble.com/Http-Status-code-from-CXFRS-not-working-tp4509452p4509452.html
CAMEL-4127 camel-jboss 2.6.0 is incompatible with camel-core 2.7.2 Due to an incompatibility between camel-jboss 2.6.0, and camel-core 2.7.2, we could not use camel-jboss with camel-core 2.7.2 Task camel-jboss 2.6.0 is incompatible with camel-core 2.7.2 Due to an incompatibility between camel-jboss 2.6.0, and camel-core 2.7.2, we could not use camel-jboss with camel-core 2.7.2
CAMEL-4123 camel-jms - Should create JmsMessage with default message delivery mode The JMS API we use to create a new javax.jms.Message may create the message with a non default JMS delivery mode. To cater for that we should set the default mode after the message has been created. This code should be added:{code} answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);{code} Improvement camel-jms - Should create JmsMessage with default message delivery mode The JMS API we use to create a new javax.jms.Message may create the message with a non default JMS delivery mode. To cater for that we should set the default mode after the message has been created. This code should be added:{code} answer.setJMSDeliveryMode(Message.DEFAULT_DELIVERY_MODE);{code}
CAMEL-4122 JMX API to create/delete endpoint we can create endpoints on the fly via the camel-web REST API; or by just sending a message to a new endpoint URI or consuming from a URI. But there is currently no JMX way to do so which is a bit of an omission.Something like...createEndpoint(String uri);would be a nice addition to the MBeans API on a ManagedCamelContext. Maybe a removeEndpoint(String uri) too would be handy. Improvement JMX API to create/delete endpoint we can create endpoints on the fly via the camel-web REST API; or by just sending a message to a new endpoint URI or consuming from a URI. But there is currently no JMX way to do so which is a bit of an omission.Something like...createEndpoint(String uri);would be a nice addition to the MBeans API on a ManagedCamelContext. Maybe a removeEndpoint(String uri) too would be handy.
CAMEL-4121 Prefer to use SetExchangePattern over InOut / InOnly to permanently alter the MEP  There is a difference between using {{inOnly}} and {{inOnly("activemq:foo")}}. The former will permanently change the MEP on the Exchange, where as the latter will only change the MEP for sending the exchange to the endpoint. We should highlight this fact. And prefer to use SetExchangePattern to permanently the MEP. So we should @deprecate .inOnly() and .inOut() (eg the methods that doesnt send to an endpoint) Improvement Prefer to use SetExchangePattern over InOut / InOnly to permanently alter the MEP  There is a difference between using {{inOnly}} and {{inOnly("activemq:foo")}}. The former will permanently change the MEP on the Exchange, where as the latter will only change the MEP for sending the exchange to the endpoint. We should highlight this fact. And prefer to use SetExchangePattern to permanently the MEP. So we should @deprecate .inOnly() and .inOut() (eg the methods that doesnt send to an endpoint)
CAMEL-4119 specify start-level as 50 for camel features which ensure camel related bundle can get started before customer bundles when restart OSGi container the default start-level for customer bundles is 60, so if we specify start-level as 50 for camel features, we can ensure camel bundles always get started before customer bundles, this can avoid some race condition issues which is caused by customer router started but the necessary camel component not available yet.More details is from SMX4-744[1][1]https://issues.apache.org/jira/browse/SMX4-744 Improvement specify start-level as 50 for camel features which ensure camel related bundle can get started before customer bundles when restart OSGi container the default start-level for customer bundles is 60, so if we specify start-level as 50 for camel features, we can ensure camel bundles always get started before customer bundles, this can avoid some race condition issues which is caused by customer router started but the necessary camel component not available yet.More details is from SMX4-744[1][1]https://issues.apache.org/jira/browse/SMX4-744
CAMEL-4117 RedeliverErrorHandler - Should make defensive copy of Exchange so redelivery works for using Processor When using redelivery with the Camel error handler, it will by default use the _previous_ exchange when redelivering. This ensures that any changes that was done by the failed attempt does not reflect when a redelivery is performed (eg think like use original message). However this does not apply when end users uses the low level .process in their Camel routes. So if they change the Exchange in the .process and then some error occurs, then that change is redelivered.We should consider making the redelivery error handler do a defensive copy of the exchange, so it can redelivery without any changes/side effects. For example this happens when people use .bean or any of the other EIPs. So why not for .process as well? Improvement RedeliverErrorHandler - Should make defensive copy of Exchange so redelivery works for using Processor When using redelivery with the Camel error handler, it will by default use the _previous_ exchange when redelivering. This ensures that any changes that was done by the failed attempt does not reflect when a redelivery is performed (eg think like use original message). However this does not apply when end users uses the low level .process in their Camel routes. So if they change the Exchange in the .process and then some error occurs, then that change is redelivered.We should consider making the redelivery error handler do a defensive copy of the exchange, so it can redelivery without any changes/side effects. For example this happens when people use .bean or any of the other EIPs. So why not for .process as well?
CAMEL-4115 camel-bean - We ought to remove the CamelBeanMethodName header after usage as its only typically meant for the invoked bean only See posthttp://urgoringo.wordpress.com/2011/06/17/interesting-behaviour-in-apache-camel-bean-invocation/Like we do in eg camel-cache and other components, we remove some of the control headers for the component (eg CamelCacheOperation) as it was only intended for this invocated bean only, and not any preceding beans. Improvement camel-bean - We ought to remove the CamelBeanMethodName header after usage as its only typically meant for the invoked bean only See posthttp://urgoringo.wordpress.com/2011/06/17/interesting-behaviour-in-apache-camel-bean-invocation/Like we do in eg camel-cache and other components, we remove some of the control headers for the component (eg CamelCacheOperation) as it was only intended for this invocated bean only, and not any preceding beans.
CAMEL-4113 Create a new message content list for the CXF response A camel route can be configured such that in cxf HolderOutInterceptor::handleMessage both the inObjects and outObjects are one in the same. If Holder<T>'s are used this leads to an infinite loop which runs the vm out of memory. Improvement Create a new message content list for the CXF response A camel route can be configured such that in cxf HolderOutInterceptor::handleMessage both the inObjects and outObjects are one in the same. If Holder<T>'s are used this leads to an infinite loop which runs the vm out of memory.
CAMEL-4112 Add RefLoadBalancerDefinition - To make using a custom load balancer similar as to use any other load balancer We should prefer to use a RefLoadBalancerDefinition when using a custom load balancer. This makes it consistent in the model which load balancers you can pick and chose.We recently did this also for data formats, as there is a RefDataFormatDefinition now. Improvement Add RefLoadBalancerDefinition - To make using a custom load balancer similar as to use any other load balancer We should prefer to use a RefLoadBalancerDefinition when using a custom load balancer. This makes it consistent in the model which load balancers you can pick and chose.We recently did this also for data formats, as there is a RefDataFormatDefinition now.
CAMEL-4111 Marshal / Unmarshal EIP - Should not support outputs in XML DSL When using <marshal> or <unmarshal> in XML DSL, the model allows them to have outputs, so you can in theory do:{code:xml}        <route>            <from uri="direct:unmarshal"/>            <unmarshal>                <string charset="UTF-8"/>                <to uri="mock:unmarshal"/>            </unmarshal>        </route>{code}This is unusual as people should do as follows:{code:xml}        <route>            <from uri="direct:unmarshal"/>            <unmarshal>                <string charset="UTF-8"/>            </unmarshal>            <to uri="mock:unmarshal"/>        </route>{code}We should fix this so they dont accept outputs. This also make code completion much easier, as if you press ctrl + space inside the <unmarshal> tag you only get the list of possible data formats to choose among. Improvement Marshal / Unmarshal EIP - Should not support outputs in XML DSL When using <marshal> or <unmarshal> in XML DSL, the model allows them to have outputs, so you can in theory do:{code:xml}        <route>            <from uri="direct:unmarshal"/>            <unmarshal>                <string charset="UTF-8"/>                <to uri="mock:unmarshal"/>            </unmarshal>        </route>{code}This is unusual as people should do as follows:{code:xml}        <route>            <from uri="direct:unmarshal"/>            <unmarshal>                <string charset="UTF-8"/>            </unmarshal>            <to uri="mock:unmarshal"/>        </route>{code}We should fix this so they dont accept outputs. This also make code completion much easier, as if you press ctrl + space inside the <unmarshal> tag you only get the list of possible data formats to choose among.
CAMEL-4109 camel-cxf - Add documentation for blueprint namespace We should add an example how to use the CXF blueprint namespace with Camel. Sub-task camel-cxf - Add documentation for blueprint namespace We should add an example how to use the CXF blueprint namespace with Camel.
CAMEL-4106 RedeliverErrorHandler - Only invoke the shouldRedeliver method if its a potential redelivery being executed When routing the redelivery error handler takes place, and for non error situations the {{shouldRedeliver}} method is executed, returning {{false}} so the routing can continue. However we ought only to invoke this operation if its a potential redelivery being executed. This is more logical.See nabblehttp://camel.465427.n5.nabble.com/Redelivery-is-not-disabled-when-maximumRedeliveries-is-set-to-0-tp4488147p4488147.html Improvement RedeliverErrorHandler - Only invoke the shouldRedeliver method if its a potential redelivery being executed When routing the redelivery error handler takes place, and for non error situations the {{shouldRedeliver}} method is executed, returning {{false}} so the routing can continue. However we ought only to invoke this operation if its a potential redelivery being executed. This is more logical.See nabblehttp://camel.465427.n5.nabble.com/Redelivery-is-not-disabled-when-maximumRedeliveries-is-set-to-0-tp4488147p4488147.html
CAMEL-4103 In doTry .. doCatch .. doFinally the FAILURE_ENDPOINT details should be available as well in case an exception was thrown In doCatch you have access to the caught exception using the exchange property CAUGHT_EXCEPTION. But we should also make FAILURE_ENDPOINT available as well. This information is present when you use onException / errorHandler. So we should make this consistent, and be avail in doCatch / doFinally as well. Improvement In doTry .. doCatch .. doFinally the FAILURE_ENDPOINT details should be available as well in case an exception was thrown In doCatch you have access to the caught exception using the exchange property CAUGHT_EXCEPTION. But we should also make FAILURE_ENDPOINT available as well. This information is present when you use onException / errorHandler. So we should make this consistent, and be avail in doCatch / doFinally as well.
CAMEL-4101 Upgrade CXF version to 2.4.1 As the CXF 2.4.1 is released, it's time to upgrade the CXF version of camel-cxf. Task Upgrade CXF version to 2.4.1 As the CXF 2.4.1 is released, it's time to upgrade the CXF version of camel-cxf.
CAMEL-4100 camel JMS endpoints should accept messages with JMSDeliveryMode as a non-numeric String such as values "PERSISTENT" or "NON_PERSISTENT" If you try sending a message to a JMS endpoint with a header JMSDeliveryMode of value PERSISTENT / NON-PERSISTENT it generates...{code}Caused by: java.lang.NullPointerException	at org.apache.camel.component.jms.JmsBinding.appendJmsProperty(JmsBinding.java:326)	at org.apache.camel.component.jms.JmsBinding.appendJmsProperties(JmsBinding.java:304){code}Firstly we should handle null being returned when converting the "JMSDeliveryMode" header (see line 325)Secondly it would be nice to detect PERSIST* or NON* as String values and map those to DeliveryMode.PERSISENT / DeliveryMode.NON_PERSISTENT respectively. Using a 0 or 1 is OK, but using a more descriptive string would be useful Improvement camel JMS endpoints should accept messages with JMSDeliveryMode as a non-numeric String such as values "PERSISTENT" or "NON_PERSISTENT" If you try sending a message to a JMS endpoint with a header JMSDeliveryMode of value PERSISTENT / NON-PERSISTENT it generates...{code}Caused by: java.lang.NullPointerException	at org.apache.camel.component.jms.JmsBinding.appendJmsProperty(JmsBinding.java:326)	at org.apache.camel.component.jms.JmsBinding.appendJmsProperties(JmsBinding.java:304){code}Firstly we should handle null being returned when converting the "JMSDeliveryMode" header (see line 325)Secondly it would be nice to detect PERSIST* or NON* as String values and map those to DeliveryMode.PERSISENT / DeliveryMode.NON_PERSISTENT respectively. Using a 0 or 1 is OK, but using a more descriptive string would be useful
CAMEL-4098 camel-http - Apparently it forces the streamcache It seems there is logic in camel-http that stream cache, regardless what.We should avoid this as ppl should be able to use Camel with the streams directly.And there seems to be an issue that the camel-http doesn't clear tmp files. Seems like the on completion isnt added to the Exchange which ensures to delete the tmp files.See nabblehttp://camel.465427.n5.nabble.com/http-not-cleaning-up-tmp-files-when-exchange-is-stopped-tp4269124p4269124.htmlThis is most likely also an issue with camel-http4 Improvement camel-http - Apparently it forces the streamcache It seems there is logic in camel-http that stream cache, regardless what.We should avoid this as ppl should be able to use Camel with the streams directly.And there seems to be an issue that the camel-http doesn't clear tmp files. Seems like the on completion isnt added to the Exchange which ensures to delete the tmp files.See nabblehttp://camel.465427.n5.nabble.com/http-not-cleaning-up-tmp-files-when-exchange-is-stopped-tp4269124p4269124.htmlThis is most likely also an issue with camel-http4
CAMEL-4094 Build failure for camel-jetty, which displays bigger problems with content-type handling for multipart forms Camel-jetty has a build failure in MultiPartFormTest when built with OpenJDK.The assertion assertEquals("Get a wrong content type", "text/plain", data.getContentType());within the route causes a 500 error to be seen by the client (there is no logging to the display of the assertion failure).Further investigation has shown that:1. The content-type sent with the HTTP request (for the file part) is always "application/octet-stream", the default for FilePart - this does not appear to be what is desired (the CamelFilePart class would fix it, but this doesn't seem to be used).2. The content-type for file parts is not made available by jetty, so data.getContentType() always returns the default content-type for the DataHandler class.3. Different DataHandler implementations have different default content-types (Sun has "text/plain", OpenJDK has "application/octet-stream").It is the last difference that causes the build break, but that should be irrelevant if the other two things were fixed.I have raised [https://bugs.eclipse.org/bugs/show_bug.cgi?id=349110] against jetty to try to get the content type made available, but until that happens I've got a patch to simply remove the incorrect assertion. Test Build failure for camel-jetty, which displays bigger problems with content-type handling for multipart forms Camel-jetty has a build failure in MultiPartFormTest when built with OpenJDK.The assertion assertEquals("Get a wrong content type", "text/plain", data.getContentType());within the route causes a 500 error to be seen by the client (there is no logging to the display of the assertion failure).Further investigation has shown that:1. The content-type sent with the HTTP request (for the file part) is always "application/octet-stream", the default for FilePart - this does not appear to be what is desired (the CamelFilePart class would fix it, but this doesn't seem to be used).2. The content-type for file parts is not made available by jetty, so data.getContentType() always returns the default content-type for the DataHandler class.3. Different DataHandler implementations have different default content-types (Sun has "text/plain", OpenJDK has "application/octet-stream").It is the last difference that causes the build break, but that should be irrelevant if the other two things were fixed.I have raised [https://bugs.eclipse.org/bugs/show_bug.cgi?id=349110] against jetty to try to get the content type made available, but until that happens I've got a patch to simply remove the incorrect assertion.
CAMEL-4092 XML DSL having attributes that is a Class<?> type should be a String type instead and use ClassResolver to lookup the class In the XML DSL, some of the EIPs etc. have an attribute where you can configure a Class<?> type. For example <xpath> has a resultType attribute. The XSD type is a xs:string.The problem is JAXB can only convert the xs:string to a Class<?> if the class can be loaded by JAXB/JDK. This may not work to well with custom types in OSGi / JBoss etc. Instead we should use ClassResolver from CamelContext to lookup those classes, as it works in OSGI/blueprint/JBoss etc. Improvement XML DSL having attributes that is a Class<?> type should be a String type instead and use ClassResolver to lookup the class In the XML DSL, some of the EIPs etc. have an attribute where you can configure a Class<?> type. For example <xpath> has a resultType attribute. The XSD type is a xs:string.The problem is JAXB can only convert the xs:string to a Class<?> if the class can be loaded by JAXB/JDK. This may not work to well with custom types in OSGi / JBoss etc. Instead we should use ClassResolver from CamelContext to lookup those classes, as it works in OSGI/blueprint/JBoss etc.
CAMEL-4090 Add support for setting resultType on Simple expressions When people are using the simple expression such as setting a header etc, they may want to control what the result type of the expression is. Suppose they want to set a boolean{code:xml}<setHeader headerName="foo">  <simple>true</simple></setHeader>{code}What happens is that the type of the foo header will be a String as thats the default type from a simple expression.We should add the resultType attribute which other expressions has such as XPath/XQuery etc.Then you can do as follows:{code:xml}<setHeader headerName="foo">  <simple resultType="java.lang.Boolean">true</simple></setHeader>{code}Likewise it should be possible in Java DSL. New Feature Add support for setting resultType on Simple expressions When people are using the simple expression such as setting a header etc, they may want to control what the result type of the expression is. Suppose they want to set a boolean{code:xml}<setHeader headerName="foo">  <simple>true</simple></setHeader>{code}What happens is that the type of the foo header will be a String as thats the default type from a simple expression.We should add the resultType attribute which other expressions has such as XPath/XQuery etc.Then you can do as follows:{code:xml}<setHeader headerName="foo">  <simple resultType="java.lang.Boolean">true</simple></setHeader>{code}Likewise it should be possible in Java DSL.
CAMEL-4080 Propagate caused exception in DeadLetterChannel error handler We should preserve the EXCEPTION_CAUGHT exchange property on the DLC when the message is error handler by it. End users would like to be able to see whats the caused exception and maybe do some custom processing.Of course they can use an onException for that as well. But I guess the DLC should support that out of the box as well. Since its stored on the exchange property it wont affect the Message instance. (body and headers).See nabblehttp://camel.465427.n5.nabble.com/Splitter-StopOnException-doesn-t-forward-the-exception-on-the-Exchange-tp4469882p4469882.html Improvement Propagate caused exception in DeadLetterChannel error handler We should preserve the EXCEPTION_CAUGHT exchange property on the DLC when the message is error handler by it. End users would like to be able to see whats the caused exception and maybe do some custom processing.Of course they can use an onException for that as well. But I guess the DLC should support that out of the box as well. Since its stored on the exchange property it wont affect the Message instance. (body and headers).See nabblehttp://camel.465427.n5.nabble.com/Splitter-StopOnException-doesn-t-forward-the-exception-on-the-Exchange-tp4469882p4469882.html
CAMEL-4078 Allow Splitter, Multicast and Recipient List to share unit of work with their sub exchanges to act as one operation that either succeed or fails Okay the title may sound confusing. The reason for this is we have end users with common use cases which currently is a bit tricky to do.For example they want to split a big message, and process each sub message. And in case of a failure during the processing of sub messages, they want that error to propagate back to the big message. This is already possible today as you use the AggregationStrategy, and its the default behavior. So far so good.However the problem is that the sub messages may have been handled by an error handler, such as moving to a dead letter queue. What the end users want instead, is that none of the sub messages should go into the dead letter queue, but instead that big message. To be able to do that, we need to introduce a notion of sub unit of work. So we can mark a beginning and end of a sub unit of work. Where the child exchanges can report back their progress to the parent sub unit of work. And at the end of the sub unit of work, we can check the state, whether there was any failure or not. In case of a failure we can propagate that to the parent exchange, and have that act as a single atomic unit of work (where the children participated). Then the error handler can react upon the failure of the parent, and move that message into a dead letter channel.The splitter example would most likely be the prime example. But you could essentially also use a recipient list, or multicast, and want those child exchanges participate in that same sub unit of work.There may be other EIPs supporting sub exchanges. However for this first implementation we will do it on the splitter, recipient list and multicast, as they all share the same core logic. New Feature Allow Splitter, Multicast and Recipient List to share unit of work with their sub exchanges to act as one operation that either succeed or fails Okay the title may sound confusing. The reason for this is we have end users with common use cases which currently is a bit tricky to do.For example they want to split a big message, and process each sub message. And in case of a failure during the processing of sub messages, they want that error to propagate back to the big message. This is already possible today as you use the AggregationStrategy, and its the default behavior. So far so good.However the problem is that the sub messages may have been handled by an error handler, such as moving to a dead letter queue. What the end users want instead, is that none of the sub messages should go into the dead letter queue, but instead that big message. To be able to do that, we need to introduce a notion of sub unit of work. So we can mark a beginning and end of a sub unit of work. Where the child exchanges can report back their progress to the parent sub unit of work. And at the end of the sub unit of work, we can check the state, whether there was any failure or not. In case of a failure we can propagate that to the parent exchange, and have that act as a single atomic unit of work (where the children participated). Then the error handler can react upon the failure of the parent, and move that message into a dead letter channel.The splitter example would most likely be the prime example. But you could essentially also use a recipient list, or multicast, and want those child exchanges participate in that same sub unit of work.There may be other EIPs supporting sub exchanges. However for this first implementation we will do it on the splitter, recipient list and multicast, as they all share the same core logic.
CAMEL-4077 XML DSL - Validate <route> has a <from> on startup We should add validation that a <route> has a <from> as input source. If there is no such, you may get a stacktrace about no such element.{code:xml}    <route>      <to uri="log:line"/>      <process ref="myProcessor"/>      <to uri="mock:line"/>    </route>{code}{code}Caused by: java.util.NoSuchElementException	at java.util.AbstractList$Itr.next(AbstractList.java:350)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1524)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1436)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1326)	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1304)	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:208)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)	... 29 more{code}The validation should be in camel-core so we ensure this is checked regardless how the route definition has been created. Improvement XML DSL - Validate <route> has a <from> on startup We should add validation that a <route> has a <from> as input source. If there is no such, you may get a stacktrace about no such element.{code:xml}    <route>      <to uri="log:line"/>      <process ref="myProcessor"/>      <to uri="mock:line"/>    </route>{code}{code}Caused by: java.util.NoSuchElementException	at java.util.AbstractList$Itr.next(AbstractList.java:350)	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1524)	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1436)	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1326)	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:164)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:67)	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:54)	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1304)	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:208)	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:101)	... 29 more{code}The validation should be in camel-core so we ensure this is checked regardless how the route definition has been created.
CAMEL-4075 Create camel-quartz2 component to support Quartz 2.1.x Quartz 2.0.1 has been released. We should upgrade the camel-quartz to use that version.There is an OSGi bundle in the works, to be pushed to central repo:http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.quartz/Also there is a SMX tickethttps://issues.apache.org/jira/browse/SMXCOMP-884 Improvement Create camel-quartz2 component to support Quartz 2.1.x Quartz 2.0.1 has been released. We should upgrade the camel-quartz to use that version.There is an OSGi bundle in the works, to be pushed to central repo:http://repo2.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.quartz/Also there is a SMX tickethttps://issues.apache.org/jira/browse/SMXCOMP-884
CAMEL-4071 Camel OSGi integration test should load the karaf feature by default CAMEL-3995 introduced an issue Caused by: org.ops4j.pax.scanner.ScannerException: No feature named 'spring' with version '[3,4)' availableat org.ops4j.pax.scanner.features.internal.FeaturesScanner.features(FeaturesScanner.java:127) We can configure the PaxExam to install the karaf spring feature first to workaround this issue. Improvement Camel OSGi integration test should load the karaf feature by default CAMEL-3995 introduced an issue Caused by: org.ops4j.pax.scanner.ScannerException: No feature named 'spring' with version '[3,4)' availableat org.ops4j.pax.scanner.features.internal.FeaturesScanner.features(FeaturesScanner.java:127) We can configure the PaxExam to install the karaf spring feature first to workaround this issue.
CAMEL-4069 The LRUSoftCacheTest unit test fails Not quite a bug, but it fails. The test depends on GC kicking in, which on system with a lot of memory it may not happen, causing annoying test failures given how long full tests take.Need to find a better way to test SoftReferences, maybe take a look at how it's done in Apache Harmony. Test The LRUSoftCacheTest unit test fails Not quite a bug, but it fails. The test depends on GC kicking in, which on system with a lot of memory it may not happen, causing annoying test failures given how long full tests take.Need to find a better way to test SoftReferences, maybe take a look at how it's done in Apache Harmony.
CAMEL-4065 Remove the type converter list maven plugin People dont use it and we should frankly just remove it, less code to maintainSee nabblehttp://camel.465427.n5.nabble.com/Error-creating-Maven-report-tp4459694p4459694.html Task Remove the type converter list maven plugin People dont use it and we should frankly just remove it, less code to maintainSee nabblehttp://camel.465427.n5.nabble.com/Error-creating-Maven-report-tp4459694p4459694.html
CAMEL-4059 Build break in camel-jms: JmsTestConnectionOnStartupTest Environment:Apache Maven 3.0.2 (r1056850; 2011-01-09 00:58:10+0000)Java version: 1.6.0_25, vendor: Sun Microsystems Inc.Java home: C:\Program Files\Java\jdk1.6.0_25\jreDefault locale: en_GB, platform encoding: Cp1252OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"Source Version:URL: https://svn.apache.org/repos/asf/camel/trunkRepository Root: https://svn.apache.org/repos/asfRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68Revision: 1132610Failure:-------------------------------------------------------------------------------Test set: org.apache.camel.component.jms.JmsTestConnectionOnStartupTest-------------------------------------------------------------------------------Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.06 sec <<< FAILURE!testConnectionOnStartupProducerTest(org.apache.camel.component.jms.JmsTestConnectionOnStartupTest)  Time elapsed: 1.084 sec  <<< FAILURE!org.junit.ComparisonFailure: expected:<...: Connection refused[]> but was:<...: Connection refused[: connect]>        at org.junit.Assert.assertEquals(Assert.java:123)        at org.junit.Assert.assertEquals(Assert.java:145)        at org.apache.camel.component.jms.JmsTestConnectionOnStartupTest.testConnectionOnStartupProducerTest(JmsTestConnectionOnStartupTest.java:69) Test Build break in camel-jms: JmsTestConnectionOnStartupTest Environment:Apache Maven 3.0.2 (r1056850; 2011-01-09 00:58:10+0000)Java version: 1.6.0_25, vendor: Sun Microsystems Inc.Java home: C:\Program Files\Java\jdk1.6.0_25\jreDefault locale: en_GB, platform encoding: Cp1252OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"Source Version:URL: https://svn.apache.org/repos/asf/camel/trunkRepository Root: https://svn.apache.org/repos/asfRepository UUID: 13f79535-47bb-0310-9956-ffa450edef68Revision: 1132610Failure:-------------------------------------------------------------------------------Test set: org.apache.camel.component.jms.JmsTestConnectionOnStartupTest-------------------------------------------------------------------------------Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 3.06 sec <<< FAILURE!testConnectionOnStartupProducerTest(org.apache.camel.component.jms.JmsTestConnectionOnStartupTest)  Time elapsed: 1.084 sec  <<< FAILURE!org.junit.ComparisonFailure: expected:<...: Connection refused[]> but was:<...: Connection refused[: connect]>        at org.junit.Assert.assertEquals(Assert.java:123)        at org.junit.Assert.assertEquals(Assert.java:145)        at org.apache.camel.component.jms.JmsTestConnectionOnStartupTest.testConnectionOnStartupProducerTest(JmsTestConnectionOnStartupTest.java:69)
CAMEL-4053 Parent/child relationship should be fixed before wrapping custom interceptors from XML DSL When defining routes in XML DSL then the parent/child relationship of the nodes, is _compute_ a bit later than in Java DSL. The reason is the Java DSL use the fluent builders making this possible on-the-fly. The XML DSL is in the hands of JAXB and its not so easy.However when people use custom InterceptStrategy they may want this parent/child information available at hand when the wrap method is invoked. And for XML DSL the parent/child is set afterwards. So we need to ensure this information is set beforehand.With this we ensure CAMEL-4050 unit test works the same in both Java DSL and XML DSLs. (in fact any DSL) Improvement Parent/child relationship should be fixed before wrapping custom interceptors from XML DSL When defining routes in XML DSL then the parent/child relationship of the nodes, is _compute_ a bit later than in Java DSL. The reason is the Java DSL use the fluent builders making this possible on-the-fly. The XML DSL is in the hands of JAXB and its not so easy.However when people use custom InterceptStrategy they may want this parent/child information available at hand when the wrap method is invoked. And for XML DSL the parent/child is set afterwards. So we need to ensure this information is set beforehand.With this we ensure CAMEL-4050 unit test works the same in both Java DSL and XML DSLs. (in fact any DSL)
CAMEL-4052 OptionalIdDefinition should use JAXB accessor type property to ensure customId is marked when setting id This ensure that when creating routes using XML then any custom assigned id on the xml tags are noticed by Camel.{code}    public void setId(String value) {        this.id = value;        customId = true;    }{code}To remedy this we need JAXB to invoke the method above which it does using property accessor. Improvement OptionalIdDefinition should use JAXB accessor type property to ensure customId is marked when setting id This ensure that when creating routes using XML then any custom assigned id on the xml tags are noticed by Camel.{code}    public void setId(String value) {        this.id = value;        customId = true;    }{code}To remedy this we need JAXB to invoke the method above which it does using property accessor.
CAMEL-4050 Setting id and parent-child relationship on Content Based Router should be more fine grained We should make the CBR more fine grained when it set the parent/child relationship, as well if you assign ids to its different parts- choice- when- otherwiseCurrently setting id would be coarse grained and set it on the choice, even if you set it on the otherwise.Likewise in the when clauses we can be more fine grained and associated the parent/child to exactly the right when definition.See nabblehttp://camel.465427.n5.nabble.com/wrong-processordefinitions-in-InterceptStrategy-wrapProcessorInInterceptors-choice-when-otherwise-tp4449449p4449449.html Improvement Setting id and parent-child relationship on Content Based Router should be more fine grained We should make the CBR more fine grained when it set the parent/child relationship, as well if you assign ids to its different parts- choice- when- otherwiseCurrently setting id would be coarse grained and set it on the choice, even if you set it on the otherwise.Likewise in the when clauses we can be more fine grained and associated the parent/child to exactly the right when definition.See nabblehttp://camel.465427.n5.nabble.com/wrong-processordefinitions-in-InterceptStrategy-wrapProcessorInInterceptors-choice-when-otherwise-tp4449449p4449449.html
CAMEL-4048 Upgrade to Pax Exam 2.1 Damn running the osgi tests in camel-itest-osgi is dead slow. Would be great if possible to upgrade to Pax Exam 2.1 which should be faster. But I guess it may require to configure it to run tests in-jvm instead of forking. So its maybe not as easy as change a version number in a pom.xml file :) Test Upgrade to Pax Exam 2.1 Damn running the osgi tests in camel-itest-osgi is dead slow. Would be great if possible to upgrade to Pax Exam 2.1 which should be faster. But I guess it may require to configure it to run tests in-jvm instead of forking. So its maybe not as easy as change a version number in a pom.xml file :)
CAMEL-4042 Shutdown the thread pool when the test is over The thread size will keep increasing when we run the tests of camel.After digging the code for a while I found there are lots of thread pool are never shutdown when the test is over.We should release these resources after running test. Improvement Shutdown the thread pool when the test is over The thread size will keep increasing when we run the tests of camel.After digging the code for a while I found there are lots of thread pool are never shutdown when the test is over.We should release these resources after running test.
CAMEL-4041 Use a FatalErrorHandler for exceptions thrown while handling another exception. This is spawn out of CAMEL-4022 (see part of the discussion there).If exceptions are thrown while an exception is handled, there is not much Camel can do to recover. We need a FatalErrorHander that can not be replaced by the user, which a simple and predictable behavior (at least logging). Improvement Use a FatalErrorHandler for exceptions thrown while handling another exception. This is spawn out of CAMEL-4022 (see part of the discussion there).If exceptions are thrown while an exception is handled, there is not much Camel can do to recover. We need a FatalErrorHander that can not be replaced by the user, which a simple and predictable behavior (at least logging).
CAMEL-4039 camel-cxf - REST - Add support for using the ResponseBuilder / Response as message body for responses When using CXF REST you may as an end user want to use the REST API for building responses using ResponseBuilder / Response API. We should add support for that in camel-cxf, so it detects the message body is a Response and use that directly.I recently added such support in camel-restlet.See nabble as well:http://camel.465427.n5.nabble.com/CXFRS-custom-response-tp4431343p4431343.html Improvement camel-cxf - REST - Add support for using the ResponseBuilder / Response as message body for responses When using CXF REST you may as an end user want to use the REST API for building responses using ResponseBuilder / Response API. We should add support for that in camel-cxf, so it detects the message body is a Response and use that directly.I recently added such support in camel-restlet.See nabble as well:http://camel.465427.n5.nabble.com/CXFRS-custom-response-tp4431343p4431343.html
CAMEL-4037 Aggregator - Recovery when only having completion timeout condition, should re-establish timeout map upon restart When using the persistent aggregation repository and you only use completion timeout, then upon restart, the currently partail completed exchanges does not re-activate their timeout completions in the timeout checker. So they will never complete.We need to store the timeout value for each exchange in the repository, and upon recovery, re-establish the timeout map, so they can timeout.See forumhttp://fusesource.com/forums/thread.jspa?threadID=3003&tstart=0 Improvement Aggregator - Recovery when only having completion timeout condition, should re-establish timeout map upon restart When using the persistent aggregation repository and you only use completion timeout, then upon restart, the currently partail completed exchanges does not re-activate their timeout completions in the timeout checker. So they will never complete.We need to store the timeout value for each exchange in the repository, and upon recovery, re-establish the timeout map, so they can timeout.See forumhttp://fusesource.com/forums/thread.jspa?threadID=3003&tstart=0
CAMEL-4036 camel-restlet - Allow access to the Restlet Request/Response API in Camel We should enrich the exchange header with the org.restlet.Request and org.restlet.Response objects. Then end users have those available in case they need to use them. For example to have fine grained control creating the response. Or there is some API in the request that Camel doesn't offer them. Improvement camel-restlet - Allow access to the Restlet Request/Response API in Camel We should enrich the exchange header with the org.restlet.Request and org.restlet.Response objects. Then end users have those available in case they need to use them. For example to have fine grained control creating the response. Or there is some API in the request that Camel doesn't offer them.
CAMEL-4035 DefaultExchangeHolder should check map/collection for non serializable objects The DefaultExchangeHolder which can serialize the Exchange should check collection/map as they can contain now serializable objects.See issue reported here:http://fusesource.com/forums/thread.jspa?threadID=2990&tstart=0 Improvement DefaultExchangeHolder should check map/collection for non serializable objects The DefaultExchangeHolder which can serialize the Exchange should check collection/map as they can contain now serializable objects.See issue reported here:http://fusesource.com/forums/thread.jspa?threadID=2990&tstart=0
CAMEL-4033 Loop EIP - Add copy option to let it start next loop with a copy of the original exchange The Loop EIP will use pipes and filters. So if you loop 3 times, then on the 2nd and 3rd time its the output from the previous processing that is being used.We should add an option so people can use a copy of the original exchange instead, so its the same copy being looped on each iteration.The wiki documentation should be updated to describe the difference in these two modes.See nabblehttp://camel.465427.n5.nabble.com/Loop-usage-tp4432628p4432628.html Improvement Loop EIP - Add copy option to let it start next loop with a copy of the original exchange The Loop EIP will use pipes and filters. So if you loop 3 times, then on the 2nd and 3rd time its the output from the previous processing that is being used.We should add an option so people can use a copy of the original exchange instead, so its the same copy being looped on each iteration.The wiki documentation should be updated to describe the difference in these two modes.See nabblehttp://camel.465427.n5.nabble.com/Loop-usage-tp4432628p4432628.html
CAMEL-4032 Clean up the jetty bundles As we are leverage the jetty feature that karaf has and karaf jetty feature has the all bundles that camel needs.We don't need to specify the addition jetty bundle in the apache-camel feature. Improvement Clean up the jetty bundles As we are leverage the jetty feature that karaf has and karaf jetty feature has the all bundles that camel needs.We don't need to specify the addition jetty bundle in the apache-camel feature.
CAMEL-4031 Move resource endpoint from camel-spring to camel-core We should move the ResourceEndpoint from camel-spring to camel-core and let it leverage the Camel class resolver. That makes it work in Camel environments. For example blueprint, jboss etc.It also makes it possible to use camel-freemarker, velocity etc. without spring JARs at all. Improvement Move resource endpoint from camel-spring to camel-core We should move the ResourceEndpoint from camel-spring to camel-core and let it leverage the Camel class resolver. That makes it work in Camel environments. For example blueprint, jboss etc.It also makes it possible to use camel-freemarker, velocity etc. without spring JARs at all.
CAMEL-4030 Camel CxfConsumer should be able to populate the CxfResponse from camel exchange according to the exchange pattern When the use is setting the exchange pattern on the camel route like this{code}   from("cxf:xxx").inonly("jms:xxx").to("xxx"){code}Camel cxf consumer should be able to take the response according to the exchange pattern. Improvement Camel CxfConsumer should be able to populate the CxfResponse from camel exchange according to the exchange pattern When the use is setting the exchange pattern on the camel route like this{code}   from("cxf:xxx").inonly("jms:xxx").to("xxx"){code}Camel cxf consumer should be able to take the response according to the exchange pattern.
CAMEL-4028 Simple language - Allow to configure prefix and suffix tokens The simple language uses ${ } tokens by default. However groovy uses those for its GString. So we have a clash. Even if you use $simple{ } instead in Groovy then you have a clash.So we should add support for configuring the tokens so you can remedy the GString clash in Groovy. Improvement Simple language - Allow to configure prefix and suffix tokens The simple language uses ${ } tokens by default. However groovy uses those for its GString. So we have a clash. Even if you use $simple{ } instead in Groovy then you have a clash.So we should add support for configuring the tokens so you can remedy the GString clash in Groovy.
CAMEL-4024 support decompression of zip files Two cases: Zip files with zip files inside (wrapping zip files) and inner zip files with uncompressed payloads.  I haven't really thought through how to deal with all of the options in these cases but I will attach the code to deal with the simple ones :) Improvement support decompression of zip files Two cases: Zip files with zip files inside (wrapping zip files) and inner zip files with uncompressed payloads.  I haven't really thought through how to deal with all of the options in these cases but I will attach the code to deal with the simple ones :)
CAMEL-4023 Allow to configure properties for ServerFactory in CXF endpoint uri The CXF ServerFactoryBean allow to configure custom properties. However those cannot be configured in a pure endpoint uri, or with java DSL.Currently you have to use the CXF XML schema for that.We should add support so the CxfComponent parses additional {{properties.XXX}} parameters and provide those to CXF.Likewise you should be able to set a Map with properties on the CxfEndpoint, in case you do pure Java POJO creating of the endpoint. New Feature Allow to configure properties for ServerFactory in CXF endpoint uri The CXF ServerFactoryBean allow to configure custom properties. However those cannot be configured in a pure endpoint uri, or with java DSL.Currently you have to use the CXF XML schema for that.We should add support so the CxfComponent parses additional {{properties.XXX}} parameters and provide those to CXF.Likewise you should be able to set a Map with properties on the CxfEndpoint, in case you do pure Java POJO creating of the endpoint.
CAMEL-4019 Replace the NoCacheStorage Class The NoCacheStorage class can safely be replaced by FreeMarker's NullCacheStorage class (created per my suggestion based on our needs in Camel) introduced in 2.3.16. Improvement Replace the NoCacheStorage Class The NoCacheStorage class can safely be replaced by FreeMarker's NullCacheStorage class (created per my suggestion based on our needs in Camel) introduced in 2.3.16.
CAMEL-4016 CXF producer should not store the attachement into the out (response) message in POJO data format Because the attachements objects can be read from the response message body in POJO data format, we should not store the attachments into the out message. When the camel route keep routing the response message to the camel-cxf consumer, we will face an issue that the attachements will be sent twice, if we store the attachements into the out message. Improvement CXF producer should not store the attachement into the out (response) message in POJO data format Because the attachements objects can be read from the response message body in POJO data format, we should not store the attachments into the out message. When the camel route keep routing the response message to the camel-cxf consumer, we will face an issue that the attachements will be sent twice, if we store the attachements into the out message.
CAMEL-4014 cxf:rsServer requires class instead of interface in the serviceClass attribute Here are part of the conversation from the mailing list:1.Hi there,I'm using apache-servicemix-4.3.1-fuse-01-09 and I need to consume RESTful requests.Here is the documentation I have used: http://camel.apache.org/cxfrs.htmlHere is my configuration file<beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xmlns:jaxrs="http://cxf.apache.org/jaxrs"    xmlns:cxf="http://camel.apache.org/schema/cxf"    xsi:schemaLocation="        http://www.springframework.org/schema/beans                 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd        http://camel.apache.org/schema/spring                       http://camel.apache.org/schema/spring/camel-spring.xsd        http://cxf.apache.org/jaxrs                                 http://cxf.apache.org/schemas/jaxrs.xsd        http://camel.apache.org/schema/cxf                          http://camel.apache.org/schema/cxf/camel-cxf.xsd    ">    <import resource="classpath:META-INF/cxf/cxf.xml" />    <import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml" />    <import resource="classpath:META-INF/cxf/cxf-extension-http.xml" />    <import resource="classpath:META-INF/cxf/osgi/cxf-extension-osgi.xml" />    <cxf:rsServer id="myServer" address="/" serviceClass="org.test.MyService" />    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">        <route>            <from uri="cxfrs://bean:myServer?exchangePattern=InOut"/>            <transform>                <constant>Hello World!!!</constant>            </transform>        </route>    </camelContext></beans>Here is implementation of org.test.MyService@Path("/service")@Produces("application/json")public class MyService {    @POST    @Path("/resource")    public Response add(@QueryParam("res") String res) {        return Response.ok(new Status("The Resource has been processed")).build();    }}I'm wondering why we have to specify the serviceClass attribute and why this attribute should point at the real class. I'm asking because the response of such a service will always be "Hello World!!!" and implementation of MyService.add method does not matter in that case.2.Hi Ben,You are right, the serviceClass is just used to build up the JAXRS service module. And Camel CXF RS Consumer doesn't all serviceClass instance at the end, it just route the request to the camel route.3. Hi Willem, BenThanks for the information.I tried to use the interface instead of class in the serviceClass attribute and I didn't succeed because of an exception that told that the class is required.Here is the exception:Caused by: java.lang.RuntimeException: Resource class interface org.test.MyService has no valid constructor        at org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider.<init>(PerRequestResourceProvider.java:45)        at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.updateClassResourceProviders(JAXRSServerFactoryBean.java:338)        at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:119)        ... 26 moreI think that using an interface would be better in that case. Improvement cxf:rsServer requires class instead of interface in the serviceClass attribute Here are part of the conversation from the mailing list:1.Hi there,I'm using apache-servicemix-4.3.1-fuse-01-09 and I need to consume RESTful requests.Here is the documentation I have used: http://camel.apache.org/cxfrs.htmlHere is my configuration file<beans xmlns="http://www.springframework.org/schema/beans"    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    xmlns:jaxrs="http://cxf.apache.org/jaxrs"    xmlns:cxf="http://camel.apache.org/schema/cxf"    xsi:schemaLocation="        http://www.springframework.org/schema/beans                 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd        http://camel.apache.org/schema/spring                       http://camel.apache.org/schema/spring/camel-spring.xsd        http://cxf.apache.org/jaxrs                                 http://cxf.apache.org/schemas/jaxrs.xsd        http://camel.apache.org/schema/cxf                          http://camel.apache.org/schema/cxf/camel-cxf.xsd    ">    <import resource="classpath:META-INF/cxf/cxf.xml" />    <import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml" />    <import resource="classpath:META-INF/cxf/cxf-extension-http.xml" />    <import resource="classpath:META-INF/cxf/osgi/cxf-extension-osgi.xml" />    <cxf:rsServer id="myServer" address="/" serviceClass="org.test.MyService" />    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">        <route>            <from uri="cxfrs://bean:myServer?exchangePattern=InOut"/>            <transform>                <constant>Hello World!!!</constant>            </transform>        </route>    </camelContext></beans>Here is implementation of org.test.MyService@Path("/service")@Produces("application/json")public class MyService {    @POST    @Path("/resource")    public Response add(@QueryParam("res") String res) {        return Response.ok(new Status("The Resource has been processed")).build();    }}I'm wondering why we have to specify the serviceClass attribute and why this attribute should point at the real class. I'm asking because the response of such a service will always be "Hello World!!!" and implementation of MyService.add method does not matter in that case.2.Hi Ben,You are right, the serviceClass is just used to build up the JAXRS service module. And Camel CXF RS Consumer doesn't all serviceClass instance at the end, it just route the request to the camel route.3. Hi Willem, BenThanks for the information.I tried to use the interface instead of class in the serviceClass attribute and I didn't succeed because of an exception that told that the class is required.Here is the exception:Caused by: java.lang.RuntimeException: Resource class interface org.test.MyService has no valid constructor        at org.apache.cxf.jaxrs.lifecycle.PerRequestResourceProvider.<init>(PerRequestResourceProvider.java:45)        at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.updateClassResourceProviders(JAXRSServerFactoryBean.java:338)        at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:119)        ... 26 moreI think that using an interface would be better in that case.
CAMEL-4012 upgrade to specs 1.8.0 to pick up the recent fix for high performance and users can specify factory through system property Task upgrade to specs 1.8.0 to pick up the recent fix for high performance and users can specify factory through system property
CAMEL-4009 Fast @Converter loading in uber-jar Currently, the @Converter converters are loaded as follows{noformat}for package in TypeConverter meta-inf resource  get package url from classloader  if url is jar    for entries in jar      if entry match package        check annotation{noformat}This is very inefficient approach when application is packaged into uber-jar as expensive iteration is performed multiple times over same jar.The attached patch changes loop into:{noformat}for package in TypeConverter meta-inf resource  get package url from classloader  create map url -> package names  for url in distinct url    if jar      for entries in jar        for package in packages          if entry match package            check annotation{noformat}With this patch I was able to cut startup time significantly from 15sec spent on @Converter-s load to 2sec on 45MB 29k entries uber-jar.I understand that the solution is not pretty but resolves a very practical problem. Let me know if you want me to polish it and update the javadoc. Improvement Fast @Converter loading in uber-jar Currently, the @Converter converters are loaded as follows{noformat}for package in TypeConverter meta-inf resource  get package url from classloader  if url is jar    for entries in jar      if entry match package        check annotation{noformat}This is very inefficient approach when application is packaged into uber-jar as expensive iteration is performed multiple times over same jar.The attached patch changes loop into:{noformat}for package in TypeConverter meta-inf resource  get package url from classloader  create map url -> package names  for url in distinct url    if jar      for entries in jar        for package in packages          if entry match package            check annotation{noformat}With this patch I was able to cut startup time significantly from 15sec spent on @Converter-s load to 2sec on 45MB 29k entries uber-jar.I understand that the solution is not pretty but resolves a very practical problem. Let me know if you want me to polish it and update the javadoc.
CAMEL-4008 Support to set replyTo from the message header  Here is the mail thread[1] which discusses about it.[1]http://camel.465427.n5.nabble.com/set-jms-reply-to-in-message-header-td4420767.html New Feature Support to set replyTo from the message header  Here is the mail thread[1] which discusses about it.[1]http://camel.465427.n5.nabble.com/set-jms-reply-to-in-message-header-td4420767.html
CAMEL-4005 Log warning message when the exchange fault message and exception are set at the same time Setting both exception and fault message into Camel exchange isn't something that can be easily handleable or understandable. There are just too many variations possible to handle it in a single, understandable and uniform way. Therefore, we should let Camel pipeline to check OUT message of the camel exchange to see if it is a Fault or not. In case it is, then we should print out a WARNING message in the log to clearly indicate it. Improvement Log warning message when the exchange fault message and exception are set at the same time Setting both exception and fault message into Camel exchange isn't something that can be easily handleable or understandable. There are just too many variations possible to handle it in a single, understandable and uniform way. Therefore, we should let Camel pipeline to check OUT message of the camel exchange to see if it is a Fault or not. In case it is, then we should print out a WARNING message in the log to clearly indicate it.
CAMEL-4004 Permit to override creation of FileConsumer in FileEndPoint The method FileEndPoint.createConsumer does not permit to override type of FileConsumer. I would use a specific FileConsumer which override prePollCheck method.This will be possible if you externalize method which create FileConsumer in the body of createConsumer :{code}FileConsumer result = new FileConsumer(this, processor, operations);{code}could be refactor in :{code}FileConsumer result = newFileConsumer(processor, operations);...protected FileConsumer newFileConsumer(Processor processor, GenericFileOperations<File> operations){return new FileConsumer(this, processor, operations)}{code} Improvement Permit to override creation of FileConsumer in FileEndPoint The method FileEndPoint.createConsumer does not permit to override type of FileConsumer. I would use a specific FileConsumer which override prePollCheck method.This will be possible if you externalize method which create FileConsumer in the body of createConsumer :{code}FileConsumer result = new FileConsumer(this, processor, operations);{code}could be refactor in :{code}FileConsumer result = newFileConsumer(processor, operations);...protected FileConsumer newFileConsumer(Processor processor, GenericFileOperations<File> operations){return new FileConsumer(this, processor, operations)}{code}
CAMEL-4003 camel-web - Allow to specify header(s) when sending a message to an endpoint It would be nice if we had some input fields where you can enter a number of key/value paris when sending a message to an endpoint, using the camel web console.Just keep it simple and allow to send, lets say, 5 headers. Improvement camel-web - Allow to specify header(s) when sending a message to an endpoint It would be nice if we had some input fields where you can enter a number of key/value paris when sending a message to an endpoint, using the camel web console.Just keep it simple and allow to send, lets say, 5 headers.
CAMEL-4002 Using custom expression in XML DSL should be possible When using a custom bean that implements Expression. Then using that in the DSL can easily be done from Java. But from XML DSL is a bit more tricker.For example with the splitter.See nabblehttp://camel.465427.n5.nabble.com/expression-and-spring-dsl-tp4410970p4410970.html Improvement Using custom expression in XML DSL should be possible When using a custom bean that implements Expression. Then using that in the DSL can easily be done from Java. But from XML DSL is a bit more tricker.For example with the splitter.See nabblehttp://camel.465427.n5.nabble.com/expression-and-spring-dsl-tp4410970p4410970.html
CAMEL-4001 camel codec (md5, sha1, ...) to verify file hashes it could be useful to have a component helping to do it.i had a try here: http://code.google.com/p/rmannibucau/source/browse/#hg%2Fcamel%2Fcamel-codec New Feature camel codec (md5, sha1, ...) to verify file hashes it could be useful to have a component helping to do it.i had a try here: http://code.google.com/p/rmannibucau/source/browse/#hg%2Fcamel%2Fcamel-codec
CAMEL-4000 camel-assert a component helping testing things (like Assert in junit) in the route could be useful.example:from("file://...")  .bean(ReadMd5FromFileAndPutItInHeaders.class)  .bean(Hash.class, "md5")  .to("assert:equals?CamelActualHeaderKey=myReferenceHeader")  .to("...");i had a try here: http://code.google.com/p/rmannibucau/source/browse/#hg%2Fcamel%2Fcamel-assertedit: nabble link: http://camel.465427.n5.nabble.com/assert-amp-hashes-td4419370.html New Feature camel-assert a component helping testing things (like Assert in junit) in the route could be useful.example:from("file://...")  .bean(ReadMd5FromFileAndPutItInHeaders.class)  .bean(Hash.class, "md5")  .to("assert:equals?CamelActualHeaderKey=myReferenceHeader")  .to("...");i had a try here: http://code.google.com/p/rmannibucau/source/browse/#hg%2Fcamel%2Fcamel-assertedit: nabble link: http://camel.465427.n5.nabble.com/assert-amp-hashes-td4419370.html
CAMEL-3999 stax and sax to parse a xml document to parse a xml document without loading it can be useful.i had a try here http://code.google.com/p/rmannibucau/source/browse/#hg%2Fcamel%2Fcamel-stax%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fstax%2Fcomponent to be able to use a sax content handler to parse a document using the stax xml stream reader. In this component the sax content handler is used as an api but the functionnality is the streaming using stax. New Feature stax and sax to parse a xml document to parse a xml document without loading it can be useful.i had a try here http://code.google.com/p/rmannibucau/source/browse/#hg%2Fcamel%2Fcamel-stax%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fcamel%2Fstax%2Fcomponent to be able to use a sax content handler to parse a document using the stax xml stream reader. In this component the sax content handler is used as an api but the functionnality is the streaming using stax.
CAMEL-3996 Tracer - Should only log message body if not causing side effects with streams, files etc. The tracer should only log message body content if its safe to do so. For streams it should just log the content is stream based. You can enable it to debug stream bodies, by setting a property on the camel context.- Exchange.LOG_DEBUG_BODY_STREAMSThe tracer should use the same log as the log component, which is MessageHelper.extractBodyForLogging Improvement Tracer - Should only log message body if not causing side effects with streams, files etc. The tracer should only log message body content if its safe to do so. For streams it should just log the content is stream based. You can enable it to debug stream bodies, by setting a property on the camel context.- Exchange.LOG_DEBUG_BODY_STREAMSThe tracer should use the same log as the log component, which is MessageHelper.extractBodyForLogging
CAMEL-3994 Java DSL - New means to explicitly end try/catch blocks We are facing a problem with split() in combination with doTry/doCatch().Could you add a method "endDoTry()" to the ProcessorDefinition? My use case is this:{code}  @Override  public void configure() throws Exception {        from("timer://myTimer?period=10000)                .log("begin")                .setBody(constant("x,y,z"))                .doTry()                        .log("processing")                        .split(body())                                .log("split")                        .end()                .endDoTry()  // would need some way like this to get back to the TryDefinition                .doCatch(Exception.class)                        .log("Exception")                .end();  }{code}I tested this by adding endDoTry() to the ProcessorDefinition, and it works just fine.{code}  public TryDefinition endDoTry() {       return (TryDefinition) this;  }{code}An endDoCatch in the TryDefinition would be great too. Is it possible that these endXXX() methods get added to 2.6.0, not just 2.7.0 or trunk?See also: http://camel.465427.n5.nabble.com/Route-with-choice-and-split-td4375184.html  Improvement Java DSL - New means to explicitly end try/catch blocks We are facing a problem with split() in combination with doTry/doCatch().Could you add a method "endDoTry()" to the ProcessorDefinition? My use case is this:{code}  @Override  public void configure() throws Exception {        from("timer://myTimer?period=10000)                .log("begin")                .setBody(constant("x,y,z"))                .doTry()                        .log("processing")                        .split(body())                                .log("split")                        .end()                .endDoTry()  // would need some way like this to get back to the TryDefinition                .doCatch(Exception.class)                        .log("Exception")                .end();  }{code}I tested this by adding endDoTry() to the ProcessorDefinition, and it works just fine.{code}  public TryDefinition endDoTry() {       return (TryDefinition) this;  }{code}An endDoCatch in the TryDefinition would be great too. Is it possible that these endXXX() methods get added to 2.6.0, not just 2.7.0 or trunk?See also: http://camel.465427.n5.nabble.com/Route-with-choice-and-split-td4375184.html 
CAMEL-3993 Upgraded JRuby version to 1.5.6 As JRuby 1.5.6 was release a while, it's time to upgrade it. Improvement Upgraded JRuby version to 1.5.6 As JRuby 1.5.6 was release a while, it's time to upgrade it.
CAMEL-3990 Upgrade FreeMarker to 2.3.17 A new version has been released, and even includes a security fix, among other changes, as noted at http://freemarker.org/docs/versions_2_3_17.html.There is no impact to the Java code. Improvement Upgrade FreeMarker to 2.3.17 A new version has been released, and even includes a security fix, among other changes, as noted at http://freemarker.org/docs/versions_2_3_17.html.There is no impact to the Java code.
CAMEL-3987 Doesn't store the exception into to out message as a fault message. It doesn't make sense that camel-cxf stores the exception into the out message and also set it as the exception of exchange.It will confuse the camel ErrorHandler to tell if the exchange exchange need to be handled.We just need to revert the change of CAMEL-3431. BTW the camel-nmr unit test failure was fixed on the servicemix side. Improvement Doesn't store the exception into to out message as a fault message. It doesn't make sense that camel-cxf stores the exception into the out message and also set it as the exception of exchange.It will confuse the camel ErrorHandler to tell if the exchange exchange need to be handled.We just need to revert the change of CAMEL-3431. BTW the camel-nmr unit test failure was fixed on the servicemix side.
CAMEL-3984 Reduce using ExpressionClause in Java DSL as it complicates route builder We should try to remove some of the most least used fluent builders with ExpressionClause as they cause the route model to be a bit more complicated to setup correctly with the expressions. It uses a delegate under the hood, which needs to be replaced with the actual expression in the model. Otherwise the XML output and whatnot are not accurate. Instead they will show a <expressionDefinition> where the actual expression ought to be. Improvement Reduce using ExpressionClause in Java DSL as it complicates route builder We should try to remove some of the most least used fluent builders with ExpressionClause as they cause the route model to be a bit more complicated to setup correctly with the expressions. It uses a delegate under the hood, which needs to be replaced with the actual expression in the model. Otherwise the XML output and whatnot are not accurate. Instead they will show a <expressionDefinition> where the actual expression ought to be.
CAMEL-3983 Added Support for Serialization and Message Headers to Hazelcast SEDA functionality The current implementation looses headers that are given to a 'hazelcast:seda:foo' route and is has problems serializing complex objects inside body that are not serializable.  New Feature Added Support for Serialization and Message Headers to Hazelcast SEDA functionality The current implementation looses headers that are given to a 'hazelcast:seda:foo' route and is has problems serializing complex objects inside body that are not serializable. 
CAMEL-3982 Updated Hazelcast to version 1.9.3 Updated Hazelcast to version 1.9.3. This offers some major bugfixes in Hazelcast and new functionality in the camel camponent (e.g. list inserting by index).   Improvement Updated Hazelcast to version 1.9.3 Updated Hazelcast to version 1.9.3. This offers some major bugfixes in Hazelcast and new functionality in the camel camponent (e.g. list inserting by index).  
CAMEL-3980 Exception message contains plaintext password The exception thrown by RemoteFilePollingConsumerPollStrategy shows URI and shows password in plaintext. Since we report ERROR and WARN messages from logs to external destinations (SNMP and mail) the password leaves the system and we are loosing control over its spread across enterprise. I decided to mark this as major issue since it is security related. I have found other issue #CAMEL-3099 related to cleartext passwords in log files. It is closed however - don't know if I should try to reopen it.Here is sample log (the username and password parameters were altered):{code}2011-05-16 22:35:07,210 WARN  [FtpConsumer] File operation failed:  Software caused connection abort: socket write error. Code: 2502011-05-16 22:35:07,210 WARN  [RemoteFilePollingConsumerPollStrategy] Consumer Consumer[ftp://172.23.224.92//usr4/account?binary=true&delay=900000&filter=%23taxFileFilter&idempotentRepository=%23dac1Checker&maxMessagesPerPoll=1&noop=true&password=myPassword&username=myAccount] could not poll endpoint: ftp://172.23.224.92//usr4/account?binary=true&delay=900000&filter=%23taxFileFilter&idempotentRepository=%23dac1Checker&maxMessagesPerPoll=1&noop=true&password=myPassword&username=myAccount caused by: File operation failed:  Software caused connection abort: recv failed. Code: 250org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Software caused connection abort: recv failed. Code: 250	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:548)	at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:43)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(Unknown Source)	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(Unknown Source)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(Unknown Source)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)	at java.lang.Thread.run(Unknown Source) Caused by: java.net.SocketException: Software caused connection abort: recv failed	at java.net.SocketInputStream.socketRead0(Native Method)	at java.net.SocketInputStream.read(Unknown Source)	at sun.nio.cs.StreamDecoder.readBytes(Unknown Source)	at sun.nio.cs.StreamDecoder.implRead(Unknown Source)	at sun.nio.cs.StreamDecoder.read(Unknown Source)	at java.io.InputStreamReader.read(Unknown Source)	at java.io.BufferedReader.fill(Unknown Source)	at java.io.BufferedReader.readLine(Unknown Source)	at java.io.BufferedReader.readLine(Unknown Source)	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:490)	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:583)	at org.apache.commons.net.ftp.FTP.pwd(FTP.java:1270)	at org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:1800)	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:546)	... 12 more{code}Ales Improvement Exception message contains plaintext password The exception thrown by RemoteFilePollingConsumerPollStrategy shows URI and shows password in plaintext. Since we report ERROR and WARN messages from logs to external destinations (SNMP and mail) the password leaves the system and we are loosing control over its spread across enterprise. I decided to mark this as major issue since it is security related. I have found other issue #CAMEL-3099 related to cleartext passwords in log files. It is closed however - don't know if I should try to reopen it.Here is sample log (the username and password parameters were altered):{code}2011-05-16 22:35:07,210 WARN  [FtpConsumer] File operation failed:  Software caused connection abort: socket write error. Code: 2502011-05-16 22:35:07,210 WARN  [RemoteFilePollingConsumerPollStrategy] Consumer Consumer[ftp://172.23.224.92//usr4/account?binary=true&delay=900000&filter=%23taxFileFilter&idempotentRepository=%23dac1Checker&maxMessagesPerPoll=1&noop=true&password=myPassword&username=myAccount] could not poll endpoint: ftp://172.23.224.92//usr4/account?binary=true&delay=900000&filter=%23taxFileFilter&idempotentRepository=%23dac1Checker&maxMessagesPerPoll=1&noop=true&password=myPassword&username=myAccount caused by: File operation failed:  Software caused connection abort: recv failed. Code: 250org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed:  Software caused connection abort: recv failed. Code: 250	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:548)	at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:43)	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:83)	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:97)	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(Unknown Source)	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(Unknown Source)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(Unknown Source)	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)	at java.lang.Thread.run(Unknown Source) Caused by: java.net.SocketException: Software caused connection abort: recv failed	at java.net.SocketInputStream.socketRead0(Native Method)	at java.net.SocketInputStream.read(Unknown Source)	at sun.nio.cs.StreamDecoder.readBytes(Unknown Source)	at sun.nio.cs.StreamDecoder.implRead(Unknown Source)	at sun.nio.cs.StreamDecoder.read(Unknown Source)	at java.io.InputStreamReader.read(Unknown Source)	at java.io.BufferedReader.fill(Unknown Source)	at java.io.BufferedReader.readLine(Unknown Source)	at java.io.BufferedReader.readLine(Unknown Source)	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:490)	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:534)	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:583)	at org.apache.commons.net.ftp.FTP.pwd(FTP.java:1270)	at org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:1800)	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:546)	... 12 more{code}Ales
CAMEL-3976 camel-restlet - Should return OK status by default The restlet consumer should by default set a status=200 in case there has not been set any status. And the exchange was processed succesfully. Currently it doesnt and there is some WARN log about you ought to set a status. Improvement camel-restlet - Should return OK status by default The restlet consumer should by default set a status=200 in case there has not been set any status. And the exchange was processed succesfully. Currently it doesnt and there is some WARN log about you ought to set a status.
CAMEL-3973 Add send body operations to managed CamelContext so you can pass in headers as well Currently we only support sendBody / requestBody on ManagedCamelContext. We should add operations that includes a map of headers. Then we supports sending a message that has headers as well.Also the existing operations should accept a java.lang.Object as body instead of a fixed String. Improvement Add send body operations to managed CamelContext so you can pass in headers as well Currently we only support sendBody / requestBody on ManagedCamelContext. We should add operations that includes a map of headers. Then we supports sending a message that has headers as well.Also the existing operations should accept a java.lang.Object as body instead of a fixed String.
CAMEL-3972 Add operation on browsable endpoint to output the message as a generic xml structure Currently the browsable endpoint does a plain toString on the Exchange.However we should add a 2nd operation that provides more metadata about the message, in a sort of generic XML representation. New Feature Add operation on browsable endpoint to output the message as a generic xml structure Currently the browsable endpoint does a plain toString on the Exchange.However we should add a 2nd operation that provides more metadata about the message, in a sort of generic XML representation.
CAMEL-3970 Add operations to JMX to dump routes in XML We should add operations to Camel JMX so you can dump the route in XML. This may help operations people to get a sort of visualization of the routes running. New Feature Add operations to JMX to dump routes in XML We should add operations to Camel JMX so you can dump the route in XML. This may help operations people to get a sort of visualization of the routes running.
CAMEL-3968 camel-soap - Add support for multiple parameters camel-soap is limited to only work with one parameter.There is some code that throws an exception stating multiple parameters is not supported.We should add support for that.See nabblehttp://camel.465427.n5.nabble.com/Multiple-parameters-in-CXF-service-method-tp4386208p4386208.html Improvement camel-soap - Add support for multiple parameters camel-soap is limited to only work with one parameter.There is some code that throws an exception stating multiple parameters is not supported.We should add support for that.See nabblehttp://camel.465427.n5.nabble.com/Multiple-parameters-in-CXF-service-method-tp4386208p4386208.html
CAMEL-3966 allow xpath to use stax more easily It could be nice to be able to use stax when we are filetring messages by xpath.A boolean parameter is probably the easier way to configure it. New Feature allow xpath to use stax more easily It could be nice to be able to use stax when we are filetring messages by xpath.A boolean parameter is probably the easier way to configure it.
CAMEL-3964 Script arguments As I said here : http://fusesource.com/forums/thread.jspa?threadID=2946&tstart=0, the ScriptEngine class (http://download.oracle.com/javase/6/docs/api/javax/script/ScriptEngine.html) provides a put method which enable to add a Java object into the created script, thanks to the JSR-223. But Camel does not provide a "bridge" to this method.So I propose to pass the arguments via the header map of the message.Indeed, on client side, I created a Map<String, Object> which contains the future scripts arguments. Then I put this map into the header.Next on the camel-script component, I check a particular key (a public static final attribute that I added) and if the value returned is a Map, I try to add the Map's objects with the engine.put(String, Object) method. Improvement Script arguments As I said here : http://fusesource.com/forums/thread.jspa?threadID=2946&tstart=0, the ScriptEngine class (http://download.oracle.com/javase/6/docs/api/javax/script/ScriptEngine.html) provides a put method which enable to add a Java object into the created script, thanks to the JSR-223. But Camel does not provide a "bridge" to this method.So I propose to pass the arguments via the header map of the message.Indeed, on client side, I created a Map<String, Object> which contains the future scripts arguments. Then I put this map into the header.Next on the camel-script component, I check a particular key (a public static final attribute that I added) and if the value returned is a Map, I try to add the Map's objects with the engine.put(String, Object) method.
CAMEL-3963 Add RefDataFormat to make configuring data format consistent By having a RefDataFormat we get that exposed in the XSD/model, and it makes it more explicit that is a possible data format to use.This makes it easier for 3rd party tooling who introspects the Camel model. Improvement Add RefDataFormat to make configuring data format consistent By having a RefDataFormat we get that exposed in the XSD/model, and it makes it more explicit that is a possible data format to use.This makes it easier for 3rd party tooling who introspects the Camel model.
CAMEL-3962 don't always load the content of a file when unmarshalling org.apache.camel.component.file.GenericFileConverter#genericFileToInputStream always load the content of a file, it can be improved for well known types (returning a FileInputStream). Improvement don't always load the content of a file when unmarshalling org.apache.camel.component.file.GenericFileConverter#genericFileToInputStream always load the content of a file, it can be improved for well known types (returning a FileInputStream).
CAMEL-3961 improving methods calls in bean component To invoke a bean taking multiple parameters we need to create an array. It is not really fluent and it could be improved.Claus suggested to modify the bean uri to provide parameters in a camel language.Example:from(...)  .bean(XXX.class, "myMethod(${header.myHeader}, ${body}")  .to(...).This cool be a really cool and useful feature. Improvement improving methods calls in bean component To invoke a bean taking multiple parameters we need to create an array. It is not really fluent and it could be improved.Claus suggested to modify the bean uri to provide parameters in a camel language.Example:from(...)  .bean(XXX.class, "myMethod(${header.myHeader}, ${body}")  .to(...).This cool be a really cool and useful feature.
CAMEL-3960 camel-test - Add support for creating CamelContext once per class, to re-use it when having multiple test methods As Oleg posted on my bloghttp://davsclaus.blogspot.com/2011/05/faster-unit-testing-apache-camel-source.htmlWe should add an option so end users can enable per class CamelContext (its shared). This ensure there is less overhead creating/shutting down CamelContext between test methods. Then they can decide to enable this in case their test can leverage this feature. This will speedup unit testing.This requires JUnit4 and its support for @BeforeClass and @AfterClassWe should look into adding the same support for TestNG as well. New Feature camel-test - Add support for creating CamelContext once per class, to re-use it when having multiple test methods As Oleg posted on my bloghttp://davsclaus.blogspot.com/2011/05/faster-unit-testing-apache-camel-source.htmlWe should add an option so end users can enable per class CamelContext (its shared). This ensure there is less overhead creating/shutting down CamelContext between test methods. Then they can decide to enable this in case their test can leverage this feature. This will speedup unit testing.This requires JUnit4 and its support for @BeforeClass and @AfterClassWe should look into adding the same support for TestNG as well.
CAMEL-3958 Add addLast, addFirst, etc to AdviceWithRouteBuilder to make it easy to add something to the start/end of a route for testing See nabblehttp://camel.465427.n5.nabble.com/Append-endpoint-to-route-at-test-time-tp4379843p4379843.htmlWe have most of the stuff already. Just a bit more sugar so you can easily add something at the start/end of a route.We could also consider an weaveByType(xxxDefinition.class) so you can use that to pin point eg a SplitDefinition etc. Improvement Add addLast, addFirst, etc to AdviceWithRouteBuilder to make it easy to add something to the start/end of a route for testing See nabblehttp://camel.465427.n5.nabble.com/Append-endpoint-to-route-at-test-time-tp4379843p4379843.htmlWe have most of the stuff already. Just a bit more sugar so you can easily add something at the start/end of a route.We could also consider an weaveByType(xxxDefinition.class) so you can use that to pin point eg a SplitDefinition etc.
CAMEL-3956 Move Default Encoding to Component Class in the FreeMarker Component The default encoding should be set in the component class, like the contentCache parameter. Improvement Move Default Encoding to Component Class in the FreeMarker Component The default encoding should be set in the component class, like the contentCache parameter.
CAMEL-3955 Remove Unnecessary Constant in FreeMarker component The FREEMARKER_RESOURCE is actually not used anymore by the component. Improvement Remove Unnecessary Constant in FreeMarker component The FREEMARKER_RESOURCE is actually not used anymore by the component.
CAMEL-3954 camel-test - Should use lazy loading of type converters to speedup unit testing This makes unit tests faster with Camel.End users can override the {{isLazyLoadingTypeConverter}} method from {{CamelTestSupport}} if they want to control the behavior.If you return false, then its what it used to be before this change.Notice that Camel will still by default always load all type converters on startup.By enabling lazy loading during testing it allows most unit tests to run faster, in case they dont need any additional type converter from other camel components. Improvement camel-test - Should use lazy loading of type converters to speedup unit testing This makes unit tests faster with Camel.End users can override the {{isLazyLoadingTypeConverter}} method from {{CamelTestSupport}} if they want to control the behavior.If you return false, then its what it used to be before this change.Notice that Camel will still by default always load all type converters on startup.By enabling lazy loading during testing it allows most unit tests to run faster, in case they dont need any additional type converter from other camel components.
CAMEL-3953 Load type converters from camel-core without package scanning to speedup CamelContext startup We should hardload the type converters from camel-core, which makes starting CamelContext faster.This improves unit test of the Camel project as well. We have seen 10%+ or more speedup in some modules being tested.See nabblehttp://camel.465427.n5.nabble.com/Conceptual-correctness-of-using-Camel-Unit-Tests-tp4372286p4372286.html Improvement Load type converters from camel-core without package scanning to speedup CamelContext startup We should hardload the type converters from camel-core, which makes starting CamelContext faster.This improves unit test of the Camel project as well. We have seen 10%+ or more speedup in some modules being tested.See nabblehttp://camel.465427.n5.nabble.com/Conceptual-correctness-of-using-Camel-Unit-Tests-tp4372286p4372286.html
CAMEL-3949 Sending a message to log endpoint should not convert payload to StreamCache We should not automatic try to convert the payload to a StreamCache if you send a message to a log endpoint.{code}        StreamCache newBody = message.getBody(StreamCache.class);        if (newBody != null) {            message.setBody(newBody);        }{code}Only if people have explicit enabled stream cache we can safely log it.Otherwise we should not output streams in the log.We should use the extractBodyForLogging from MessageHelper instead which cater for this. Improvement Sending a message to log endpoint should not convert payload to StreamCache We should not automatic try to convert the payload to a StreamCache if you send a message to a log endpoint.{code}        StreamCache newBody = message.getBody(StreamCache.class);        if (newBody != null) {            message.setBody(newBody);        }{code}Only if people have explicit enabled stream cache we can safely log it.Otherwise we should not output streams in the log.We should use the extractBodyForLogging from MessageHelper instead which cater for this.
CAMEL-3940 Add support for loading scripts from files in the Camel language component This componenthttp://camel.apache.org/languageCan execute scripts. But the script is currently either from the endpoint uri or as a header. We should add an option to indicate the script should be loaded from a resource (file, classpath, http). And also whether or not the script should be cached or not. Its similar to the resource endpoint classes (velocity, freemarker etc.).If we build this logic into the camel-core then we can migrate the other components to use camel-core only. As they rely on Spring Resource abstraction. It would be nice to get rid of that dependency so end users can use those without the spring framework.Maybe something like{code}from("direct:start").to("language:groovy?script=classpath:com/foo/myScript.groovy&contentCache=false").to("mock:result");{code}Note I put in contentCache as the name for the cache option as thats the name freemarker, velocity uses. Improvement Add support for loading scripts from files in the Camel language component This componenthttp://camel.apache.org/languageCan execute scripts. But the script is currently either from the endpoint uri or as a header. We should add an option to indicate the script should be loaded from a resource (file, classpath, http). And also whether or not the script should be cached or not. Its similar to the resource endpoint classes (velocity, freemarker etc.).If we build this logic into the camel-core then we can migrate the other components to use camel-core only. As they rely on Spring Resource abstraction. It would be nice to get rid of that dependency so end users can use those without the spring framework.Maybe something like{code}from("direct:start").to("language:groovy?script=classpath:com/foo/myScript.groovy&contentCache=false").to("mock:result");{code}Note I put in contentCache as the name for the cache option as thats the name freemarker, velocity uses.
CAMEL-3939 camel-cache- servicemix ehcache bundle version update Update ehcache smx bundle from: 2.3.0_1, to: 2.3.0_3-SNAPSHOT to let JMSReplication to work. Improvement camel-cache- servicemix ehcache bundle version update Update ehcache smx bundle from: 2.3.0_1, to: 2.3.0_3-SNAPSHOT to let JMSReplication to work.
CAMEL-3938 Re-add support for ComsumerType.Simple/JMS SimpleMessageListenerContainer A while ago there was a discussion topic that theSimpleMessageListenerContainer/ConsumerType.Simple was removed fromcamel-jms as it was deprecated. However from looking at the latest Springdocs (http://static.springsource.org/spring/docs/3.1.0.M1/javadoc-api/org/springframework/jms/listener/SimpleMessageListenerContainer.html ) it is aliveand kicking.Is there another reason that this feature was removed?The reason I am so keen on the SimpleMessageListenerContainer is that theDefaultMessageListenerContainer does not allow you to constrain the numberof threads used in a useful way. If you give it a task executor with amaximum 5 threads and want to listen on 10 routes, only 5 of those routeswould be consumed from. There is even a note about this fact in the docs (http://static.springsource.org/spring/docs/3.1.0.M1/javadoc-api/org/springframework/jms/listener/DefaultMessageListenerContainer.html#setTaskExecutor(java.util.concurrent.Executor) ). This makes theSimpleMessageListenerContainer invaluable for scaling out an applicationusing camel-jms. Improvement Re-add support for ComsumerType.Simple/JMS SimpleMessageListenerContainer A while ago there was a discussion topic that theSimpleMessageListenerContainer/ConsumerType.Simple was removed fromcamel-jms as it was deprecated. However from looking at the latest Springdocs (http://static.springsource.org/spring/docs/3.1.0.M1/javadoc-api/org/springframework/jms/listener/SimpleMessageListenerContainer.html ) it is aliveand kicking.Is there another reason that this feature was removed?The reason I am so keen on the SimpleMessageListenerContainer is that theDefaultMessageListenerContainer does not allow you to constrain the numberof threads used in a useful way. If you give it a task executor with amaximum 5 threads and want to listen on 10 routes, only 5 of those routeswould be consumed from. There is even a note about this fact in the docs (http://static.springsource.org/spring/docs/3.1.0.M1/javadoc-api/org/springframework/jms/listener/DefaultMessageListenerContainer.html#setTaskExecutor(java.util.concurrent.Executor) ). This makes theSimpleMessageListenerContainer invaluable for scaling out an applicationusing camel-jms.
CAMEL-3937 Update the cometd version to 2.1.1 Cometd 2.1.1 fix bunch of issues[1] since the 2.1.0 released, we should upgrade it.As the cometd 2.x doesn't provides the OSGi ready bundle, we still need to wrap a bundle in ServiceMix.[1]http://bugs.cometd.org/browse/COMETD/fixforversion/10061 Improvement Update the cometd version to 2.1.1 Cometd 2.1.1 fix bunch of issues[1] since the 2.1.0 released, we should upgrade it.As the cometd 2.x doesn't provides the OSGi ready bundle, we still need to wrap a bundle in ServiceMix.[1]http://bugs.cometd.org/browse/COMETD/fixforversion/10061
CAMEL-3935 camel-hazelcast idempotent repository  As Hazelcast is a distributed data grid, it would be useful to use it as idempotent repository. Despite to the plain in memory repository it can act as idempotent repository over n cluster nodes with very few effort.    New Feature camel-hazelcast idempotent repository  As Hazelcast is a distributed data grid, it would be useful to use it as idempotent repository. Despite to the plain in memory repository it can act as idempotent repository over n cluster nodes with very few effort.   
CAMEL-3933 Upgrade to protobuf 2.5 A new version of protobuf is out. The protobuf generated code does not pass our checkstyle, plus it would be good to not store generated code as a versioned file. There is a [maven-protoc-plugin|https://github.com/dtrott/maven-protoc-plugin] we could used, but that doesn't seem to be released yet, so whomever will take on that task (possibly myself) would do good trying to see if there's any chance for the plugin to be released. Then we could use it (ideally) in the two places where is needed, the camel-protobuf component and camel-itest-osgi. Task Upgrade to protobuf 2.5 A new version of protobuf is out. The protobuf generated code does not pass our checkstyle, plus it would be good to not store generated code as a versioned file. There is a [maven-protoc-plugin|https://github.com/dtrott/maven-protoc-plugin] we could used, but that doesn't seem to be released yet, so whomever will take on that task (possibly myself) would do good trying to see if there's any chance for the plugin to be released. Then we could use it (ideally) in the two places where is needed, the camel-protobuf component and camel-itest-osgi.
CAMEL-3932 URI component mismatch - DefaultComponent.createEndpoint(uri)   and  DefaultCamelContext.getEndpoint(uri) The DefaultCamelContext.getEndpoint(String uri) eventually calls:     uri = URISupport.normalizeUri(uri);This changes the uri:  say from tlm:main  to tlm://mainThe DefaultComponent.createEndpoint(uri) does not do this.Would it be better to have all underlying methods use the URISupport.normalizeUri(uri) method? Improvement URI component mismatch - DefaultComponent.createEndpoint(uri)   and  DefaultCamelContext.getEndpoint(uri) The DefaultCamelContext.getEndpoint(String uri) eventually calls:     uri = URISupport.normalizeUri(uri);This changes the uri:  say from tlm:main  to tlm://mainThe DefaultComponent.createEndpoint(uri) does not do this.Would it be better to have all underlying methods use the URISupport.normalizeUri(uri) method?
CAMEL-3930 Aggregate EIP - When using groupedExchange then use eager check completion by default See nabblehttp://camel.465427.n5.nabble.com/Aggregator-Pattern-GroupExchanges-tp4364886p4364886.html Improvement Aggregate EIP - When using groupedExchange then use eager check completion by default See nabblehttp://camel.465427.n5.nabble.com/Aggregator-Pattern-GroupExchanges-tp4364886p4364886.html
CAMEL-3926 Add cache stats on JMX producer and consumer caches We got some caches registered in JMX. We should add some hit/miss stats and a resetStatistics operation. That allow end users to know a bit about whether the cache is efficient or not. New Feature Add cache stats on JMX producer and consumer caches We got some caches registered in JMX. We should add some hit/miss stats and a resetStatistics operation. That allow end users to know a bit about whether the cache is efficient or not.
CAMEL-3922 LRUSoftCache - Should use SoftReference to support OOME We should creata a LRUSoftCache that uses SoftReferences for cached values. This supports the JVM when it runs low on memory and want to re-claim unused objects from the cache. We can use this for a certain number of caches where this is feasible such as- endpoint cache- producer cache- consumer cacheCurrently end users can only set a fixed max size on those cache. Improvement LRUSoftCache - Should use SoftReference to support OOME We should creata a LRUSoftCache that uses SoftReferences for cached values. This supports the JVM when it runs low on memory and want to re-claim unused objects from the cache. We can use this for a certain number of caches where this is feasible such as- endpoint cache- producer cache- consumer cacheCurrently end users can only set a fixed max size on those cache.
CAMEL-3921 Upgrade to MyBatis 3.0.4 bundle SMX4-817 is a task to release the 3.0.4 osgi bundle. When its in central repo we should upgrade the version in Camel. Task Upgrade to MyBatis 3.0.4 bundle SMX4-817 is a task to release the 3.0.4 osgi bundle. When its in central repo we should upgrade the version in Camel.
CAMEL-3916 BeanProcessor - Do not attempt to convert to BeanInvocation as its unnessasary We can optimize BeanProcessor to not attempt to convert to BeanInvocation as its pointless. This just invokes a bit of overhead as Camel will try to attempt this. Instead we can optimize to use a old fashioned instanceof check, as the BeanInvocation payload would be stored directly as the message body.This actually also fixes CAMEL-3914. Improvement BeanProcessor - Do not attempt to convert to BeanInvocation as its unnessasary We can optimize BeanProcessor to not attempt to convert to BeanInvocation as its pointless. This just invokes a bit of overhead as Camel will try to attempt this. Instead we can optimize to use a old fashioned instanceof check, as the BeanInvocation payload would be stored directly as the message body.This actually also fixes CAMEL-3914.
CAMEL-3914 camel-jaxb should not try to convert to BeanInvocation when routing to beans using JAXB payloads When Camel uses beans in routes, the type convert system will check if the payload is a bean invocation (used by proxy and whatnot).The JAXB fallback converter should not support this as it will lead to unnecessary attempts to convert payloads to JAXB as part of the bean invocation. And that may lead to issue if JAXB cannot do this due no ObjectFactory and whatnot.So even if users are routing to beans and have a signature as follows{code}public void doSomething(Exchange exchange) { ...}{code}The end user would not expect any type converter attempt for his JAXB payload, as the parameter type is Exchange. Improvement camel-jaxb should not try to convert to BeanInvocation when routing to beans using JAXB payloads When Camel uses beans in routes, the type convert system will check if the payload is a bean invocation (used by proxy and whatnot).The JAXB fallback converter should not support this as it will lead to unnecessary attempts to convert payloads to JAXB as part of the bean invocation. And that may lead to issue if JAXB cannot do this due no ObjectFactory and whatnot.So even if users are routing to beans and have a signature as follows{code}public void doSomething(Exchange exchange) { ...}{code}The end user would not expect any type converter attempt for his JAXB payload, as the parameter type is Exchange.
CAMEL-3910 Add "Sticky Failover" support in the camel load balancer Essentially, given a list of endpoints (endpoint1, endpoint2), the failoverpolicy should initially send all messages to endpoint1. In a failover scenario, the route should send messages to endpoint2 instead of endpoint1, and continue to do so until endpoint2 fails. If endpoint2 were then to fail, messages start being sent to endpoint1 again. The current support for sticky load balancing and failover load balancing do not address the need for sticky failover.Sticky Load Balancing requires the user to set a header and is not meant for failover scenarios, whereas failover load balancing is not sticky.Please check out the following Nabble link for more details       http://camel.465427.n5.nabble.com/Sticky-failover-load-balancing-td4346193.html New Feature Add "Sticky Failover" support in the camel load balancer Essentially, given a list of endpoints (endpoint1, endpoint2), the failoverpolicy should initially send all messages to endpoint1. In a failover scenario, the route should send messages to endpoint2 instead of endpoint1, and continue to do so until endpoint2 fails. If endpoint2 were then to fail, messages start being sent to endpoint1 again. The current support for sticky load balancing and failover load balancing do not address the need for sticky failover.Sticky Load Balancing requires the user to set a header and is not meant for failover scenarios, whereas failover load balancing is not sticky.Please check out the following Nabble link for more details       http://camel.465427.n5.nabble.com/Sticky-failover-load-balancing-td4346193.html
CAMEL-3908 Prevent "FolderNotOpen" exception when closing out an email exchange When an email exchange is complete it should set either the SEEN or DELETED flags in the folder on the email server.  But if the folder isn't open, either because of automatic closing or timeout, attempting to set the flag results in a FolderNotOpen exception.  The attached version of MailConsumer includes a check in processCommit() that opens the folder if it's not open at exchange completion. Improvement Prevent "FolderNotOpen" exception when closing out an email exchange When an email exchange is complete it should set either the SEEN or DELETED flags in the folder on the email server.  But if the folder isn't open, either because of automatic closing or timeout, attempting to set the flag results in a FolderNotOpen exception.  The attached version of MailConsumer includes a check in processCommit() that opens the folder if it's not open at exchange completion.
CAMEL-3907 Component camel-sql needs the abiliity to process sql from the body of the exchange camel sql should also support the ability to add the sql statements in the exchange body for processing.  This is linked via 3803.   Improvement Component camel-sql needs the abiliity to process sql from the body of the exchange camel sql should also support the ability to add the sql statements in the exchange body for processing.  This is linked via 3803.  
CAMEL-3905 camel-cache exception message: CamelCacheOperation not specified in the message header [CamelCacheKey] Caused by: net.sf.ehcache.CacheException: CamelCacheOperation not specified in the message header [CamelCacheKey]Sound like a mistake? Or maybe my English is so bad? as this message doesn't make sense for me...Simply it should be:Caused by: net.sf.ehcache.CacheException: CamelCacheOperation header not specified in message Improvement camel-cache exception message: CamelCacheOperation not specified in the message header [CamelCacheKey] Caused by: net.sf.ehcache.CacheException: CamelCacheOperation not specified in the message header [CamelCacheKey]Sound like a mistake? Or maybe my English is so bad? as this message doesn't make sense for me...Simply it should be:Caused by: net.sf.ehcache.CacheException: CamelCacheOperation header not specified in message
CAMEL-3903 Add support for disableStreamCache option on JettyComponent You may want to set this option globally on Jetty instead of having to do it per endpoint. You can do this on most of the options in Jetty already.Currently this option is only possible to set on per endpoint. Improvement Add support for disableStreamCache option on JettyComponent You may want to set this option globally on Jetty instead of having to do it per endpoint. You can do this on most of the options in Jetty already.Currently this option is only possible to set on per endpoint.
CAMEL-3901 Create a separate component for camel transport for cxf The camel-cxf component curently contains too many unrelated functions. It contains:- camel transport for cxf- cxf component- cxfbean component- cxfrs componet- convertersSo this causes the code of the component to depend on each other and suck in much too many dependencies. Besides this there are some package dependency cycles in the code which could easily be solved.A first step is to separate the camel transport for cxf from the rest of the code. It is independent of all other code and can be pulled into a new component. Some advantages are: - The camel transport for cxf needs very few dependencies so it is a vey light weight aproach to combine cxf and camel- The new component nicely shows how to bridge between cxd and camel without the overhead of the other components- We can let the camel-cxf component depdend on the camel transport for cxf so for people using maven no changes are neededI will attach a patch where I simply deleted anything that is not relevant for camel transport for cxf from the camel-cxf project. This is of course not yet the solution but it shows how small the new component will be and is a good start for doing the split.I would be very interested about opinions from other developers about the split.Christian  Improvement Create a separate component for camel transport for cxf The camel-cxf component curently contains too many unrelated functions. It contains:- camel transport for cxf- cxf component- cxfbean component- cxfrs componet- convertersSo this causes the code of the component to depend on each other and suck in much too many dependencies. Besides this there are some package dependency cycles in the code which could easily be solved.A first step is to separate the camel transport for cxf from the rest of the code. It is independent of all other code and can be pulled into a new component. Some advantages are: - The camel transport for cxf needs very few dependencies so it is a vey light weight aproach to combine cxf and camel- The new component nicely shows how to bridge between cxd and camel without the overhead of the other components- We can let the camel-cxf component depdend on the camel transport for cxf so for people using maven no changes are neededI will attach a patch where I simply deleted anything that is not relevant for camel transport for cxf from the camel-cxf project. This is of course not yet the solution but it shows how small the new component will be and is a good start for doing the split.I would be very interested about opinions from other developers about the split.Christian 
CAMEL-3900 Update log component documentation about slf4j The log component documentation is all about JCL, log4j, and blah blah. We should have slf4j in it.http://camel.apache.org/log.html Task Update log component documentation about slf4j The log component documentation is all about JCL, log4j, and blah blah. We should have slf4j in it.http://camel.apache.org/log.html
CAMEL-3896 Filter EIP - Should validate it has child outputs In Java DSL its not problem. But in XML DSL end users may define a filter like this{code:xml}<filter>   <header>foo</header></filter><to xxx>{code}And expect the filter to only send to XXX if filter is true. But you should put the logic inside the filter XML tag{code:xml}<filter>   <header>foo</header>   <to xxx></filter>{code}We have logic already to validate that for other EIPs. So we should just enable that for the filter EIP as wellSee nabblehttp://camel.465427.n5.nabble.com/Problem-dynamically-filtering-a-route-using-a-bean-via-camel-method-tp4334637p4334637.html Improvement Filter EIP - Should validate it has child outputs In Java DSL its not problem. But in XML DSL end users may define a filter like this{code:xml}<filter>   <header>foo</header></filter><to xxx>{code}And expect the filter to only send to XXX if filter is true. But you should put the logic inside the filter XML tag{code:xml}<filter>   <header>foo</header>   <to xxx></filter>{code}We have logic already to validate that for other EIPs. So we should just enable that for the filter EIP as wellSee nabblehttp://camel.465427.n5.nabble.com/Problem-dynamically-filtering-a-route-using-a-bean-via-camel-method-tp4334637p4334637.html
CAMEL-3895 jsch 0.1.44 JAR from central repo is invalid The JAR in central repohttp://repo2.maven.org/maven2/com/jcraft/jsch/0.1.44is invalid. Use the -1 version insteadhttp://repo2.maven.org/maven2/com/jcraft/jsch/0.1.44-1/See nabblehttp://camel.465427.n5.nabble.com/Jsch-version-in-camel-ftp-component-tp4335473p4335473.html Task jsch 0.1.44 JAR from central repo is invalid The JAR in central repohttp://repo2.maven.org/maven2/com/jcraft/jsch/0.1.44is invalid. Use the -1 version insteadhttp://repo2.maven.org/maven2/com/jcraft/jsch/0.1.44-1/See nabblehttp://camel.465427.n5.nabble.com/Jsch-version-in-camel-ftp-component-tp4335473p4335473.html
CAMEL-3892 Refresh of the FreeMarker Component I've made a number of small changes to the FreeMarker component:- General re-format- Added constants for the "encoding" and "contentCache" parameters- Removed the unused FREEMARKER_RESOURCE constant- Removed the unnecessary "FREEMARKER_" prefix of the FREEMARKER_RESOURCE_URI and FREEMARKER_TEMPLATE constants- Removed the unnecessary getExchangePattern method- Replaced the NoCacheStorage class by a call to a constructor of the Template class, that doesn't use any cache- Added a default value for the "encoding" parameter (the platform's default)- Added a specific exception class to support global exception handlers- Renamed all classes from Free*m*arker (wrong) to Free*M*arker- Renamed properties from CamelFree*m*arkerResourceUri (wrong) to CamelFree*M*arkerResourceUri and CamelFree*m*arkerTemplate to CamelFree*M*arker- Replaced isDebugEnabled by log.debug as per CAMEL-3759- Improved log messagesAll tests run successfully. Improvement Refresh of the FreeMarker Component I've made a number of small changes to the FreeMarker component:- General re-format- Added constants for the "encoding" and "contentCache" parameters- Removed the unused FREEMARKER_RESOURCE constant- Removed the unnecessary "FREEMARKER_" prefix of the FREEMARKER_RESOURCE_URI and FREEMARKER_TEMPLATE constants- Removed the unnecessary getExchangePattern method- Replaced the NoCacheStorage class by a call to a constructor of the Template class, that doesn't use any cache- Added a default value for the "encoding" parameter (the platform's default)- Added a specific exception class to support global exception handlers- Renamed all classes from Free*m*arker (wrong) to Free*M*arker- Renamed properties from CamelFree*m*arkerResourceUri (wrong) to CamelFree*M*arkerResourceUri and CamelFree*m*arkerTemplate to CamelFree*M*arker- Replaced isDebugEnabled by log.debug as per CAMEL-3759- Improved log messagesAll tests run successfully.
CAMEL-3891 Avoiding to process the bean which value is null in CamelBeanPostProcessor When user use the FactoryBean to return a null object within Spring 2.x, the CamelBeanPostProcessor will throw a NPE exception.Although this issue can't be reproduced within Spring 3.x, we should consider to put the NP check in the CamelBeanPostProcessor as an enhancement. Improvement Avoiding to process the bean which value is null in CamelBeanPostProcessor When user use the FactoryBean to return a null object within Spring 2.x, the CamelBeanPostProcessor will throw a NPE exception.Although this issue can't be reproduced within Spring 3.x, we should consider to put the NP check in the CamelBeanPostProcessor as an enhancement.
CAMEL-3884 Optimize GenericFileProducer to only check if target file exists once, when writing using a temp filename See nabblehttp://camel.465427.n5.nabble.com/GenericFileOperations-optimization-tp4315363p4315363.html Improvement Optimize GenericFileProducer to only check if target file exists once, when writing using a temp filename See nabblehttp://camel.465427.n5.nabble.com/GenericFileOperations-optimization-tp4315363p4315363.html
CAMEL-3882 Update FreeMarker Example in the Wiki Please find attached a small "refresh" of the example in the wiki page, which I have also updated today. Improvement Update FreeMarker Example in the Wiki Please find attached a small "refresh" of the example in the wiki page, which I have also updated today.
CAMEL-3880 camel-cache (camel-itest-osgi)- JMS cache replication OSGi unit test This patch provides the first working test of jms ehcache replication.The test is a bit complicated as ehacache is not programmer friendly but proves that it is possible to use jms replication across many server nodes which is very powerful and secured functionality.Please note, that to use this test you need to apply patches from:https://issues.apache.org/jira/browse/CAMEL-3867 (camel-cache.cleanupAndLitenersRef.patch)https://issues.apache.org/jira/browse/SMX4-809Have a fun! :) Test camel-cache (camel-itest-osgi)- JMS cache replication OSGi unit test This patch provides the first working test of jms ehcache replication.The test is a bit complicated as ehacache is not programmer friendly but proves that it is possible to use jms replication across many server nodes which is very powerful and secured functionality.Please note, that to use this test you need to apply patches from:https://issues.apache.org/jira/browse/CAMEL-3867 (camel-cache.cleanupAndLitenersRef.patch)https://issues.apache.org/jira/browse/SMX4-809Have a fun! :)
CAMEL-3876 Upgrade to jersey 1.6 in camel-web Jersey: http://jersey.java.net/1.6 has been released. We should upgrade. Task Upgrade to jersey 1.6 in camel-web Jersey: http://jersey.java.net/1.6 has been released. We should upgrade.
CAMEL-3875 camel-cache (camel-itest-osgi)- Simple CacheManagerFactory spring ref. + ehcache config from xml test in OSGi env. Testing is cacheManagerFactory is really referenced and is ehcache configured with the right xml file.This test was mad to bug fix: https://issues.apache.org/jira/browse/CAMEL-3849HAVE A FUN! :) Test camel-cache (camel-itest-osgi)- Simple CacheManagerFactory spring ref. + ehcache config from xml test in OSGi env. Testing is cacheManagerFactory is really referenced and is ehcache configured with the right xml file.This test was mad to bug fix: https://issues.apache.org/jira/browse/CAMEL-3849HAVE A FUN! :)
CAMEL-3871 Make gracefulshutdown less verbose When using INFO logging Camel should be less verbose when shutting down.It should log at INFO level- starting- when a route has been shutdown/suspended and from where it was consuming- pending messages in progress- shutdown completeThen you have the activity. If you need more visibility then use DEBUG level on the class. Improvement Make gracefulshutdown less verbose When using INFO logging Camel should be less verbose when shutting down.It should log at INFO level- starting- when a route has been shutdown/suspended and from where it was consuming- pending messages in progress- shutdown completeThen you have the activity. If you need more visibility then use DEBUG level on the class.
CAMEL-3868 New camel-apns component I've writen a new component to interface with Apple Push Notification Server. It enables to push notifications to iOS devices (iPod Touch, iPhone, iPad), and also to get feedback from APNS.The component uses Apache 2.0 as it's license. You can find more infos at : http://code.google.com/p/camel-apns/ (A little bit deprecated, due to little refactorings to be compatible with project acceptance criterias).I have completely adapted component to apache camel project rules. I hope patch provided is OK.Let me know if I need to change things. I'll make needed adjustments in case.It also uses some underlying library: java-apns available on git hub, on following project: https://github.com/notnoop/java-apnsThat library is compatible with Apache 2.0 license: It uses New BSD License. Author explicitly validated use with Apache Camel in some mail exchange with Claus.The repository is: https://github.com/notnoop/m2-repo/raw/gh-page New Feature New camel-apns component I've writen a new component to interface with Apple Push Notification Server. It enables to push notifications to iOS devices (iPod Touch, iPhone, iPad), and also to get feedback from APNS.The component uses Apache 2.0 as it's license. You can find more infos at : http://code.google.com/p/camel-apns/ (A little bit deprecated, due to little refactorings to be compatible with project acceptance criterias).I have completely adapted component to apache camel project rules. I hope patch provided is OK.Let me know if I need to change things. I'll make needed adjustments in case.It also uses some underlying library: java-apns available on git hub, on following project: https://github.com/notnoop/java-apnsThat library is compatible with Apache 2.0 license: It uses New BSD License. Author explicitly validated use with Apache Camel in some mail exchange with Claus.The repository is: https://github.com/notnoop/m2-repo/raw/gh-page
CAMEL-3867 camel-cache- improve ehcache configuration by reference RegisteredEventListeners and CacheLoaders The thing is, that cache names can be a dynamic list. But ehcache is expecting to get static list (known before start) on it's xml configuration file. Ehcache provides some defaults config. for new caches with some exceptions. One of them are cache listeners (like replication listeners).So the thing is, to give ability to define listeners and cache loaders (via spring/blueprint ref.) during endpoint construction.This will ease configuration of listeners/loaders as xml static list of listeners (per cache) will not be needed anymore. Instead of very long list which you have to keep up to date, you could define one list of listeners/loaders for all cache endpoints!SO SIMPLE! :) Improvement camel-cache- improve ehcache configuration by reference RegisteredEventListeners and CacheLoaders The thing is, that cache names can be a dynamic list. But ehcache is expecting to get static list (known before start) on it's xml configuration file. Ehcache provides some defaults config. for new caches with some exceptions. One of them are cache listeners (like replication listeners).So the thing is, to give ability to define listeners and cache loaders (via spring/blueprint ref.) during endpoint construction.This will ease configuration of listeners/loaders as xml static list of listeners (per cache) will not be needed anymore. Instead of very long list which you have to keep up to date, you could define one list of listeners/loaders for all cache endpoints!SO SIMPLE! :)
CAMEL-3866 Throttler - Option maximumRequestsPerPeriod should be required This option should be required to indicate the upper bound for the throttling. Currently there wasn't such a check that this option was provided on the model. Improvement Throttler - Option maximumRequestsPerPeriod should be required This option should be required to indicate the upper bound for the throttling. Currently there wasn't such a check that this option was provided on the model.
CAMEL-3864 camel-cache the ehcache.xml file is not up to date- have invalid parameters name The file ehcache.xml which is the default configuration file for ehcache initialized by camel-cache component contains deprecated description about jms replication. Improvement camel-cache the ehcache.xml file is not up to date- have invalid parameters name The file ehcache.xml which is the default configuration file for ehcache initialized by camel-cache component contains deprecated description about jms replication.
CAMEL-3859 JmsMessage should not use JMSMessageID as exchangeId Here is the mail thread[1] which discuss about it.[1]http://camel.465427.n5.nabble.com/Custom-Exchange-ID-tp4300720p4300938.html Improvement JmsMessage should not use JMSMessageID as exchangeId Here is the mail thread[1] which discuss about it.[1]http://camel.465427.n5.nabble.com/Custom-Exchange-ID-tp4300720p4300938.html
CAMEL-3858 OSGi bundle data in camel components should import by version number for components having multiple packages See CAMEL-3856We should double check all Camel components and fix those who uses multiple packages as the maven felix bundle plugin generates wrong manifest data. Task OSGi bundle data in camel components should import by version number for components having multiple packages See CAMEL-3856We should double check all Camel components and fix those who uses multiple packages as the maven felix bundle plugin generates wrong manifest data.
CAMEL-3857 WireTap EIP - new message mode - Allow to set headers If you use wiretap to send a new message to an endpoint, then you can only provide headers if you use a Processor. However what people would like to do is to provide headers in the DSL. Usually from XML DSL.So what you can do now in Java DSL{code}                    .wireTap("direct:tap")                        // create the new tap message body and headers                        .newExchangeBody(constant("Bye World"))                        .newExchangeHeader("id", constant(123))                        .newExchangeHeader("date", simple("${date:now:yyyyMMdd}"))                    .end(){code}And in XML DSL (has a slight different names for body/header), to reuse the existing <setHeader> element{code:xml}            <wireTap uri="direct:tap">                <!-- create the new tap message body and headers -->                <body><constant>Bye World</constant></body>                <setHeader headerName="id"><constant>123</constant></setHeader>                <setHeader headerName="date"><simple>${date:now:yyyyMMdd}</simple></setHeader>            </wireTap>{code} Improvement WireTap EIP - new message mode - Allow to set headers If you use wiretap to send a new message to an endpoint, then you can only provide headers if you use a Processor. However what people would like to do is to provide headers in the DSL. Usually from XML DSL.So what you can do now in Java DSL{code}                    .wireTap("direct:tap")                        // create the new tap message body and headers                        .newExchangeBody(constant("Bye World"))                        .newExchangeHeader("id", constant(123))                        .newExchangeHeader("date", simple("${date:now:yyyyMMdd}"))                    .end(){code}And in XML DSL (has a slight different names for body/header), to reuse the existing <setHeader> element{code:xml}            <wireTap uri="direct:tap">                <!-- create the new tap message body and headers -->                <body><constant>Bye World</constant></body>                <setHeader headerName="id"><constant>123</constant></setHeader>                <setHeader headerName="date"><simple>${date:now:yyyyMMdd}</simple></setHeader>            </wireTap>{code}
CAMEL-3854 Add options for the most used EIPs as tables in the EIP documentation We should add a table with all the options an EIP has for the EIPs which has many options (we already have that for the aggregator)- recipient list- splitter- dynamic router- muilticastThere may be others, so if we have the time then check each xxxDefinition EIP class vs the current eip wiki page Improvement Add options for the most used EIPs as tables in the EIP documentation We should add a table with all the options an EIP has for the EIPs which has many options (we already have that for the aggregator)- recipient list- splitter- dynamic router- muilticastThere may be others, so if we have the time then check each xxxDefinition EIP class vs the current eip wiki page
CAMEL-3851 ensure some optional bundle in camel-cxf feature could be installed  with OBR resolver even some bundles in camel-cxf feature provide packages are optional for other bundles, still need get installed when we install camel-cxf feature Improvement ensure some optional bundle in camel-cxf feature could be installed  with OBR resolver even some bundles in camel-cxf feature provide packages are optional for other bundles, still need get installed when we install camel-cxf feature
CAMEL-3848 Camel OGNL documentation uses assignment operator when it should be using equality. In this page: http://camel.apache.org/ognl.html the expression "request.headers.foo = 'bar'" is used in the example when it should be "request.headers.foo == 'bar'", as the = operator is for assignment, but that is not what is suggested. Task Camel OGNL documentation uses assignment operator when it should be using equality. In this page: http://camel.apache.org/ognl.html the expression "request.headers.foo = 'bar'" is used in the example when it should be "request.headers.foo == 'bar'", as the = operator is for assignment, but that is not what is suggested.
CAMEL-3845 New FTP component working with PROXY FTP the component works well. He isn't able to go through proxy server.Library FTP4J is able to go through different proxy servers.Squid Server is used FTP over HTTP proxy.I have developed component FTP of the client constructed on library FTP4J. FTP4J Version 1.6 - 2011/01/07.  http://www.sauronsoftware.it/projects/ftp4j/ Has added storage of the last FTPReply.Has added transfer of parameters connectTimeout and soTimeout.Libraries FTP4J aren't present in central maven repository. The library no OSGi.In camel the component has added parameter "proxy". It is a line url authorizations for proxy server. If the scheme http is specified, we put HTTPTunnelConnector. If the scheme ftp is specified, we put FTPProxyConnector. If the scheme socks5 is specified, we put SOCKS5Connector. If the scheme socks or socks4 is specified, we put SOCKS4Connector. If the parameter "proxy" isn't specified, there is a direct connection to FTP server. Route example<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"  xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  default-activation="lazy">  <cm:property-placeholder persistent-id="com.mycompany.route.bundle">    <cm:default-properties>      <cm:property name="ftp.url" value="ftp4j://ftp.mycompany.com/"/>      <cm:property name="ftp.delay" value="100000"/>      <cm:property name="ftp.proxy" value="&proxy=http://user:pwd@cache.mycompany.lan:3128/"/>    </cm:default-properties>  </cm:property-placeholder>        <camelContext xmlns="http://camel.apache.org/schema/blueprint">          <route>      <from uri="{{ftp.url}}?delay={{ftp.delay}}&amp;noop=true&amp;binary=true{{ftp.proxy}}"/>      <to uri="file://data/dict/inbox"/>      <to uri="mock:log"/>    </route>  </camelContext></blueprint> New Feature New FTP component working with PROXY FTP the component works well. He isn't able to go through proxy server.Library FTP4J is able to go through different proxy servers.Squid Server is used FTP over HTTP proxy.I have developed component FTP of the client constructed on library FTP4J. FTP4J Version 1.6 - 2011/01/07.  http://www.sauronsoftware.it/projects/ftp4j/ Has added storage of the last FTPReply.Has added transfer of parameters connectTimeout and soTimeout.Libraries FTP4J aren't present in central maven repository. The library no OSGi.In camel the component has added parameter "proxy". It is a line url authorizations for proxy server. If the scheme http is specified, we put HTTPTunnelConnector. If the scheme ftp is specified, we put FTPProxyConnector. If the scheme socks5 is specified, we put SOCKS5Connector. If the scheme socks or socks4 is specified, we put SOCKS4Connector. If the parameter "proxy" isn't specified, there is a direct connection to FTP server. Route example<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"  xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  default-activation="lazy">  <cm:property-placeholder persistent-id="com.mycompany.route.bundle">    <cm:default-properties>      <cm:property name="ftp.url" value="ftp4j://ftp.mycompany.com/"/>      <cm:property name="ftp.delay" value="100000"/>      <cm:property name="ftp.proxy" value="&proxy=http://user:pwd@cache.mycompany.lan:3128/"/>    </cm:default-properties>  </cm:property-placeholder>        <camelContext xmlns="http://camel.apache.org/schema/blueprint">          <route>      <from uri="{{ftp.url}}?delay={{ftp.delay}}&amp;noop=true&amp;binary=true{{ftp.proxy}}"/>      <to uri="file://data/dict/inbox"/>      <to uri="mock:log"/>    </route>  </camelContext></blueprint>
CAMEL-3841 Remove the DOT plugin from the examples and leave it only for the camel-dot example The DOT plugin may cause issues starting the examples and the plugin isn't really being developed. And it requires to install a binary app to have it generate the diagrams. http://camel.465427.n5.nabble.com/maven-plugin-tp4281906p4281906.html Task Remove the DOT plugin from the examples and leave it only for the camel-dot example The DOT plugin may cause issues starting the examples and the plugin isn't really being developed. And it requires to install a binary app to have it generate the diagrams. http://camel.465427.n5.nabble.com/maven-plugin-tp4281906p4281906.html
CAMEL-3840 Broken link on http://camel.apache.org/web-console.html On http://camel.apache.org/web-console.html, the link to an old discussion on Nabble under the heading "Embedding web console in your own web application." is broken.This link works though: http://camel.465427.n5.nabble.com/Embedded-web-console-td478885.html Task Broken link on http://camel.apache.org/web-console.html On http://camel.apache.org/web-console.html, the link to an old discussion on Nabble under the heading "Embedding web console in your own web application." is broken.This link works though: http://camel.465427.n5.nabble.com/Embedded-web-console-td478885.html
CAMEL-3839 ProducerTemplate - Should extract result body before UoW in case the result was cached in a temporary file The ProducerCallback should have a parameter for the expected message body result type in case you want that extracted. Improvement ProducerTemplate - Should extract result body before UoW in case the result was cached in a temporary file The ProducerCallback should have a parameter for the expected message body result type in case you want that extracted.
CAMEL-3836 Upgrade to Jackson 1.7.5 Jackson 1.7.1 -> 1.7.5 Task Upgrade to Jackson 1.7.5 Jackson 1.7.1 -> 1.7.5
CAMEL-3833 Add more stats to JMX such as redelivery attempts, failed and handled etc. We should consider adding more stats to JMX such as- number of redelivery attempts- number of failed exchange and handled by error handlerIts a bit tricky to add into the codebase as its fine grained stats. And the current logic is more coarse grained in this matter.And where should we add those stats? On each processor or the error handler? Or both? New Feature Add more stats to JMX such as redelivery attempts, failed and handled etc. We should consider adding more stats to JMX such as- number of redelivery attempts- number of failed exchange and handled by error handlerIts a bit tricky to add into the codebase as its fine grained stats. And the current logic is more coarse grained in this matter.And where should we add those stats? On each processor or the error handler? Or both?
CAMEL-3832 Remove camel-smooks from camel-extra The old camel-smooks component in camel-extra is outdated and the Smooks project now integrates with Camel out of the box. So we should remove the old code we have. Task Remove camel-smooks from camel-extra The old camel-smooks component in camel-extra is outdated and the Smooks project now integrates with Camel out of the box. So we should remove the old code we have.
CAMEL-3831 Add operation to purge caches from JMX From JMX we should allow end users to purge caches using an operation to clear- endpoint cache- producer cacheThe operation should allow 2 methods- purge all- purge X New Feature Add operation to purge caches from JMX From JMX we should allow end users to purge caches using an operation to clear- endpoint cache- producer cacheThe operation should allow 2 methods- purge all- purge X
CAMEL-3827 Allow to configure endpoint cache size on CamelContext By default DefaultCamelContext will cache 1000 endpoints. We should allow end users to configure the cache size, by setting a property on CamelContext properties, just as you can configure producer cache sizes. New Feature Allow to configure endpoint cache size on CamelContext By default DefaultCamelContext will cache 1000 endpoints. We should allow end users to configure the cache size, by setting a property on CamelContext properties, just as you can configure producer cache sizes.
CAMEL-3825 Camel-Joss jar does not work with JBoss 6.0.0 final due to NoClassDefFoundError VirtualFileVisitor We are trying to run camel on jboss, after getting through the intial type loader problems we have tried the camel-joss loader but it is loading a class in jboss called VirtualFileVisitor - Jboss has now moved this class to org.jbos.vfs.VirtualFileVisitorError creating bean with name 'jbossresolver' defined in ServletContext resource [/WEB-INF/application-context.xml]: Instantiation of bean failed; nested exception is java.lang.NoClassDefFoundError: org/jboss/virtual/VirtualFileVisitorthe example shown here doesnt work for this reasonhttp://camel.apache.org/pluggable-class-resolvers.html Improvement Camel-Joss jar does not work with JBoss 6.0.0 final due to NoClassDefFoundError VirtualFileVisitor We are trying to run camel on jboss, after getting through the intial type loader problems we have tried the camel-joss loader but it is loading a class in jboss called VirtualFileVisitor - Jboss has now moved this class to org.jbos.vfs.VirtualFileVisitorError creating bean with name 'jbossresolver' defined in ServletContext resource [/WEB-INF/application-context.xml]: Instantiation of bean failed; nested exception is java.lang.NoClassDefFoundError: org/jboss/virtual/VirtualFileVisitorthe example shown here doesnt work for this reasonhttp://camel.apache.org/pluggable-class-resolvers.html
CAMEL-3824 Allow cometd component to send message headers with the message  Currently the cometd component ignores message headers. ======Code snippet from CometdConsumer.java:            Message message = new DefaultMessage();            message.setBody(data);            Exchange exchange = endpoint.createExchange();            exchange.setIn(message);======Exchange message headers should be maintained (perhaps with a flag?). Improvement Allow cometd component to send message headers with the message  Currently the cometd component ignores message headers. ======Code snippet from CometdConsumer.java:            Message message = new DefaultMessage();            message.setBody(data);            Exchange exchange = endpoint.createExchange();            exchange.setIn(message);======Exchange message headers should be maintained (perhaps with a flag?).
CAMEL-3823 Upgrade to CometD 2.1.0 The current version of the Cometd component uses Cometd 1.0.1. Cometd 2.1.0 has better support for the InOut messaging pattern. Task Upgrade to CometD 2.1.0 The current version of the Cometd component uses Cometd 1.0.1. Cometd 2.1.0 has better support for the InOut messaging pattern.
CAMEL-3821 camel-jboss - Add support for JBoss 6 See nabblehttp://camel.465427.n5.nabble.com/JBoss-5-1-0-gt-6-0-0-Final-Camel-Issues-td3353086.htmlJBoss people renamed a package and thus we need to adjust accordingly. I suggest that we build 2 artifcats in the project- camel-jboss5.JAR- camel-jboss.JARThen we can keep jboss5 for JBoss 5 support.Maybe we simply need to create 2 components at camel-extra to keep it simple. Improvement camel-jboss - Add support for JBoss 6 See nabblehttp://camel.465427.n5.nabble.com/JBoss-5-1-0-gt-6-0-0-Final-Camel-Issues-td3353086.htmlJBoss people renamed a package and thus we need to adjust accordingly. I suggest that we build 2 artifcats in the project- camel-jboss5.JAR- camel-jboss.JARThen we can keep jboss5 for JBoss 5 support.Maybe we simply need to create 2 components at camel-extra to keep it simple.
CAMEL-3819 Introduce a flag not to start the camel context for running the camel system integration test with Karaf  If we want to reuse the example unit tests to verify the if the example can deploy rightly into the OSGi container like Karaf, we will face a problem that the unit tests will not only start the client to access the service but also start the camel context of the server.To avoid the unit test starts the camel context of the server, we need to introduce a system property to let the unit test skip to start the camel context of server. Improvement Introduce a flag not to start the camel context for running the camel system integration test with Karaf  If we want to reuse the example unit tests to verify the if the example can deploy rightly into the OSGi container like Karaf, we will face a problem that the unit tests will not only start the client to access the service but also start the camel context of the server.To avoid the unit test starts the camel context of the server, we need to introduce a system property to let the unit test skip to start the camel context of server.
CAMEL-3818 Cannot do XQuery on file data It is not possible to do an XQuery filter on a file source:<route>   <from uri='ftp://username@localhost/?password=password'/>   <choice>   <when>     <xquery>/root[@name='James']</xquery>     <to uri="jmq:SomeQueue"/>   </when>   <otherwise>     <rollback/>   <otherwise>   </choice></route>It works if you use <xpath> instead of <xquery> but I need the XPath 2.0 support available in <xquery> do to date/time processing. Improvement Cannot do XQuery on file data It is not possible to do an XQuery filter on a file source:<route>   <from uri='ftp://username@localhost/?password=password'/>   <choice>   <when>     <xquery>/root[@name='James']</xquery>     <to uri="jmq:SomeQueue"/>   </when>   <otherwise>     <rollback/>   <otherwise>   </choice></route>It works if you use <xpath> instead of <xquery> but I need the XPath 2.0 support available in <xquery> do to date/time processing.
CAMEL-3817 Add breadcrumbId to MDC logging for tracing messages across transports When Camel consumes messages it should set a new CamelBreadcrumbId header to the message. By default it should set it based on Message ID if not already provided.Then the MDC logger should expose this id as well as {{breadcrumbId}} Improvement Add breadcrumbId to MDC logging for tracing messages across transports When Camel consumes messages it should set a new CamelBreadcrumbId header to the message. By default it should set it based on Message ID if not already provided.Then the MDC logger should expose this id as well as {{breadcrumbId}}
CAMEL-3815 Add relative path to parent pom.xml in examples pom.xml files This makes it easier for end users to build and run examples.http://camel.465427.n5.nabble.com/camel-example-cxf-pom-xml-tp4268673p4268673.html Improvement Add relative path to parent pom.xml in examples pom.xml files This makes it easier for end users to build and run examples.http://camel.465427.n5.nabble.com/camel-example-cxf-pom-xml-tp4268673p4268673.html
CAMEL-3814 create bundle of camel-core-osgi  When user want to use OsgiDefaultCamelContext without touch spring and blueprint, he need the camel-core-osgi bundle.As the camel-spring and camel-blueprint ship camel-core-osgi bundle by default, they will not import any packages of camel-core-osgi bundle, so camel-core-osgi bundle is safe to be deploy into OSGi platform. Improvement create bundle of camel-core-osgi  When user want to use OsgiDefaultCamelContext without touch spring and blueprint, he need the camel-core-osgi bundle.As the camel-spring and camel-blueprint ship camel-core-osgi bundle by default, they will not import any packages of camel-core-osgi bundle, so camel-core-osgi bundle is safe to be deploy into OSGi platform.
CAMEL-3813 XPathBuilder doesn't clear ThreadLocal with exchange after evaluation XPathBuilder doesn't clear ThreadLocal with exchange (and variableResolver) after evaluation. In such case reference to current exchange (and body, headers, properties, etc.) remains in Thread until current thread dies or evaluates new exchange with the same XPathBuilder instance.The result of this is that each thread can contain references to multiple exchanges (up to the number of xpaths in camel context), that can't be collected by GC. Improvement XPathBuilder doesn't clear ThreadLocal with exchange after evaluation XPathBuilder doesn't clear ThreadLocal with exchange (and variableResolver) after evaluation. In such case reference to current exchange (and body, headers, properties, etc.) remains in Thread until current thread dies or evaluates new exchange with the same XPathBuilder instance.The result of this is that each thread can contain references to multiple exchanges (up to the number of xpaths in camel context), that can't be collected by GC.
CAMEL-3811 Management - RoutePolicyList attribute is listed as unavailable, we should have that listed as empty Its the only attribute which is listed as unavailable and marked as red in jconsole. People may think this is a problem. Improvement Management - RoutePolicyList attribute is listed as unavailable, we should have that listed as empty Its the only attribute which is listed as unavailable and marked as red in jconsole. People may think this is a problem.
CAMEL-3809 mock endpoint - Let it be lenient so you can easily mock existing endpoint uris which has parameters See nabblehttp://camel.465427.n5.nabble.com/Mock-endpoints-and-parameters-tp3894208p3894208.html Improvement mock endpoint - Let it be lenient so you can easily mock existing endpoint uris which has parameters See nabblehttp://camel.465427.n5.nabble.com/Mock-endpoints-and-parameters-tp3894208p3894208.html
CAMEL-3807 Use system.currentTimeMillis for calculating performance At TSSJS Kirk P. did the Java performance talk, and he said you should favor using System.currentTimeMillis over the nano one, as the latter is not suitable for measuring performance as it can become negative and dont cater when having multiple cores etc. And millis is more than precise for end users for measure route stats in Camel. Improvement Use system.currentTimeMillis for calculating performance At TSSJS Kirk P. did the Java performance talk, and he said you should favor using System.currentTimeMillis over the nano one, as the latter is not suitable for measuring performance as it can become negative and dont cater when having multiple cores etc. And millis is more than precise for end users for measure route stats in Camel.
CAMEL-3804 The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authentication The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authenticationA simple solution is to add setters for SecurityPolicy and Extension to the component. If these attributes are set then also set them on the underlying AbstractBayeux class.About the patch:The existing unit test is based on an interactive scenario that involves human intervention. A similar test is made that uses an extension and another one is made that needs authentication. To provide feedback on a failed authentication a cometd listener is used. The version of the cometd-dojo extension used does not support listeners so this dojo extension has also been upgraded to 1.1.4. Improvement The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authentication The camel-cometd component does not support a custom SecurityPolicy or Extension as described on http://cometd.org/documentation/howtos/authenticationA simple solution is to add setters for SecurityPolicy and Extension to the component. If these attributes are set then also set them on the underlying AbstractBayeux class.About the patch:The existing unit test is based on an interactive scenario that involves human intervention. A similar test is made that uses an extension and another one is made that needs authentication. To provide feedback on a failed authentication a cometd listener is used. The version of the cometd-dojo extension used does not support listeners so this dojo extension has also been upgraded to 1.1.4.
CAMEL-3798 Use keepalive config parameters on sftp component I had to configure (JSch) to send keepalives but sftp component doesn't expose those.Expose serverAliveInterval/serverAliveCountMax on SftpConfiguration.  New Feature Use keepalive config parameters on sftp component I had to configure (JSch) to send keepalives but sftp component doesn't expose those.Expose serverAliveInterval/serverAliveCountMax on SftpConfiguration. 
CAMEL-3796  CxfRsProducer should support invoking methods with no parameters Current CxfRsProducer will try to locate the method invocation for calling the proxy client by using the reflection API.It can't handle the no parameters rightly as the message body could be null, and the user needs to apply custom converter to work around this issue. Improvement  CxfRsProducer should support invoking methods with no parameters Current CxfRsProducer will try to locate the method invocation for calling the proxy client by using the reflection API.It can't handle the no parameters rightly as the message body could be null, and the user needs to apply custom converter to work around this issue.
CAMEL-3793 Try to copy file when rename fails I have a setup where I use file component to move files after being processed ou when processing fails.As I have no troubles neither on my development workstation neither on local directory on my linux environnement. It fails when the monitored directory is a NFS mounted directory pointing to a Windows 2008 Server shared directory.While it's not a camel bug, the generated logs are just useless because we can't get the reason of failure.Investigating the source code tells me that the File.renameTo method is used (with the three times try hack for Windows ;), so I can't get any further information on the reason.Could you implement a fallback strategy like copy the file and delete the original one ? (should it be made optional)To workaround this, I currently do the move operations manually by invoking the FileUtils.moveTo(...) from commons-io (which implements exactly the fallback method I described on renameTo failure).But, I have side effects as I'm forced to use the noop attribute.(in fact, it doesn't explain why the rename fails, but it works, and should it be a failure I'll get an explicit error message). Improvement Try to copy file when rename fails I have a setup where I use file component to move files after being processed ou when processing fails.As I have no troubles neither on my development workstation neither on local directory on my linux environnement. It fails when the monitored directory is a NFS mounted directory pointing to a Windows 2008 Server shared directory.While it's not a camel bug, the generated logs are just useless because we can't get the reason of failure.Investigating the source code tells me that the File.renameTo method is used (with the three times try hack for Windows ;), so I can't get any further information on the reason.Could you implement a fallback strategy like copy the file and delete the original one ? (should it be made optional)To workaround this, I currently do the move operations manually by invoking the FileUtils.moveTo(...) from commons-io (which implements exactly the fallback method I described on renameTo failure).But, I have side effects as I'm forced to use the noop attribute.(in fact, it doesn't explain why the rename fails, but it works, and should it be a failure I'll get an explicit error message).
CAMEL-3792 Clean up the exchange out message, when the ErrorHandler useOriginalMessage option is true As the PipleLine processor will copy the exchange out message as the next exchange in message, we should clean up the out message of exchange when the ErrorHandler useOriginalMessage option is true, because we don't want the out message to be routed to next endpoint.  Improvement Clean up the exchange out message, when the ErrorHandler useOriginalMessage option is true As the PipleLine processor will copy the exchange out message as the next exchange in message, we should clean up the out message of exchange when the ErrorHandler useOriginalMessage option is true, because we don't want the out message to be routed to next endpoint. 
CAMEL-3790 Add support for Future handles in Camel Proxy We should detect if the return type is a Future, then we can return early (async). Improvement Add support for Future handles in Camel Proxy We should detect if the return type is a Future, then we can return early (async).
CAMEL-3786 Upgrade pax-exam osgi integration test to support Karaf 2.2.0 feature. pax-exam need to be 1.2.4pax-runner need to be 1.6.1Also need to update some features configure in the OSGi integration test. Task Upgrade pax-exam osgi integration test to support Karaf 2.2.0 feature. pax-exam need to be 1.2.4pax-runner need to be 1.6.1Also need to update some features configure in the OSGi integration test.
CAMEL-3784 Upgrade to Jetty 7.3.1.v20110307 Is it possible to upgrade to Jetty 7.3.1? Are there any implications with CXF 2.3.3?If there are then schedule this for Camel 2.8.Willem I am assigning this to you. Maybe you can check it out.Apache SMX 4.4 is scheduled to upgrade to this version of Jetty. Task Upgrade to Jetty 7.3.1.v20110307 Is it possible to upgrade to Jetty 7.3.1? Are there any implications with CXF 2.3.3?If there are then schedule this for Camel 2.8.Willem I am assigning this to you. Maybe you can check it out.Apache SMX 4.4 is scheduled to upgrade to this version of Jetty.
CAMEL-3783 LoggingExceptionHandler - Should not be so verbose by default See nabblehttp://camel.465427.n5.nabble.com/How-can-I-disable-stack-traces-from-GenericFileOnCompletion-s-LoggingExceptionHandler-tp3424278p3424278.html Improvement LoggingExceptionHandler - Should not be so verbose by default See nabblehttp://camel.465427.n5.nabble.com/How-can-I-disable-stack-traces-from-GenericFileOnCompletion-s-LoggingExceptionHandler-tp3424278p3424278.html
CAMEL-3781 Add option to disable expiration on JMS component It would be nice to add an option to the JMS component to disable the use of message expirations for InOut exchanges. If a client and server have clocks that are out-of-sync, using message expiration can cause problems. More details can be found here:http://camel.465427.n5.nabble.com/InOut-exchanges-require-synchronized-clocks-td3411881.html New Feature Add option to disable expiration on JMS component It would be nice to add an option to the JMS component to disable the use of message expirations for InOut exchanges. If a client and server have clocks that are out-of-sync, using message expiration can cause problems. More details can be found here:http://camel.465427.n5.nabble.com/InOut-exchanges-require-synchronized-clocks-td3411881.html
CAMEL-3780 camel-http4 should use same option names as camel-http If you check the source code in HttpComponent in the two components you will see that some of the options is not the same in camel-http4. We should align those so they are the same.egusername -> authUsernamepassword -> authPassworddomain -> authDomainhost -> authHostAnd maybe some are missing such as authMethod and whatnot. Improvement camel-http4 should use same option names as camel-http If you check the source code in HttpComponent in the two components you will see that some of the options is not the same in camel-http4. We should align those so they are the same.egusername -> authUsernamepassword -> authPassworddomain -> authDomainhost -> authHostAnd maybe some are missing such as authMethod and whatnot.
CAMEL-3773 Apache Camel version banner is wrong in uber-jar At context start a version banner is printed to the log:Apache Camel 2.6.0 (CamelContext: camel) started in 2.436 secondsThe version string is calculated by ServiceSupport.getVersion():{code}Package aPackage = getClass().getPackage();if (aPackage != null) {    version = aPackage.getImplementationVersion();    if (version == null) {        version = aPackage.getSpecificationVersion();    }}{code}but, in Maven shade-plugin packaged project (to create single uber-jar for distribution to SE environment), the Manifest versions are project version, not Camel. So the wrong version is printed. It would be nice to have this improved to print real Camel version. Improvement Apache Camel version banner is wrong in uber-jar At context start a version banner is printed to the log:Apache Camel 2.6.0 (CamelContext: camel) started in 2.436 secondsThe version string is calculated by ServiceSupport.getVersion():{code}Package aPackage = getClass().getPackage();if (aPackage != null) {    version = aPackage.getImplementationVersion();    if (version == null) {        version = aPackage.getSpecificationVersion();    }}{code}but, in Maven shade-plugin packaged project (to create single uber-jar for distribution to SE environment), the Manifest versions are project version, not Camel. So the wrong version is printed. It would be nice to have this improved to print real Camel version.
CAMEL-3772 CamelTestSupport.createRouteBuilder and createRouteBuilders should return the interface RoutesBuilder not the abstract class RouteBuilder The return type for CamelTestSupport createRouteBuilder and createRouteBuilders is the abstract class RouteBuilder instead of the interface RoutesBuilder. The result of the createRouteBuilders call is used in the setUp method, context.addRoutes(builder) which expects RoutesBuilder so there is no need for the create method to return the abstract class RouteBuilder. Improvement CamelTestSupport.createRouteBuilder and createRouteBuilders should return the interface RoutesBuilder not the abstract class RouteBuilder The return type for CamelTestSupport createRouteBuilder and createRouteBuilders is the abstract class RouteBuilder instead of the interface RoutesBuilder. The result of the createRouteBuilders call is used in the setUp method, context.addRoutes(builder) which expects RoutesBuilder so there is no need for the create method to return the abstract class RouteBuilder.
CAMEL-3771 The body of an exchange should not be required when not performing an add or update to the cache When not performing an add or update to the cache, the body of the exchange should of no matter and should be nullable. At the moment this is not possible when for example performing an operation such as get. It is now required to pass for example an empty string in the body of the exchange, which is kind of useless.The attached patch implements the altered behaviour where the body may be nullable when not performing add or update. A CacheException will be thrown when the body is required for an operation but the content of the body is null. The patch contains the patched CacheProducer and the tests in CacheProducerTest. Improvement The body of an exchange should not be required when not performing an add or update to the cache When not performing an add or update to the cache, the body of the exchange should of no matter and should be nullable. At the moment this is not possible when for example performing an operation such as get. It is now required to pass for example an empty string in the body of the exchange, which is kind of useless.The attached patch implements the altered behaviour where the body may be nullable when not performing add or update. A CacheException will be thrown when the body is required for an operation but the content of the body is null. The patch contains the patched CacheProducer and the tests in CacheProducerTest.
CAMEL-3767 Upgrade to Jetty 7.3.1 Jetty 7.3.1 has been released. Task Upgrade to Jetty 7.3.1 Jetty 7.3.1 has been released.
CAMEL-3766 Upgrade to pax-exam 1.2.4 In the parent/pom.xml we should upgrade pax-exam to 1.2.4 (or better) Task Upgrade to pax-exam 1.2.4 In the parent/pom.xml we should upgrade pax-exam to 1.2.4 (or better)
CAMEL-3765 camel-example-guice-jms - Uses Spring 2.5.x We should either remove this example or have it upgraded to work with Spring 3.0.x. Task camel-example-guice-jms - Uses Spring 2.5.x We should either remove this example or have it upgraded to work with Spring 3.0.x.
CAMEL-3761 Throw exception when CXFProducer can't set right payload parameters according to the BindingOperationInfo When camel-cxf endpoint deals with the client side request, it will try to setup the PAYLOAD message elements with right order according to the BindingOperationInfo. But if the BindingOperationInfo is not right, you will see the empty soap body in the request message of  CxfProducer.Here is the mail thread[1] which discusses about it.[1]http://camel.465427.n5.nabble.com/Generic-file-gt-CXF-Payload-type-converter-issues-td3410398.html Improvement Throw exception when CXFProducer can't set right payload parameters according to the BindingOperationInfo When camel-cxf endpoint deals with the client side request, it will try to setup the PAYLOAD message elements with right order according to the BindingOperationInfo. But if the BindingOperationInfo is not right, you will see the empty soap body in the request message of  CxfProducer.Here is the mail thread[1] which discusses about it.[1]http://camel.465427.n5.nabble.com/Generic-file-gt-CXF-Payload-type-converter-issues-td3410398.html
CAMEL-3755 Update the servlet documentation The servlet component changed a bit in terms of how to use it in OSGi.We should update the documentation at:http://camel.apache.org/servletLikewise we should update that you can use the servlet and have spring session listener load the XML file (100% spring style).And that load-on-startup on the Camel servlet Task Update the servlet documentation The servlet component changed a bit in terms of how to use it in OSGi.We should update the documentation at:http://camel.apache.org/servletLikewise we should update that you can use the servlet and have spring session listener load the XML file (100% spring style).And that load-on-startup on the Camel servlet
CAMEL-3754 Upgrade to Karaf 2.2.x in testing After the 2.7 release we should upgrade to use Karaf 2.2.x for testing the OSGi bits.Upgrading now would be a risk for the 2.7 release, so we keep using the stable 2.1.4 release. Task Upgrade to Karaf 2.2.x in testing After the 2.7 release we should upgrade to use Karaf 2.2.x for testing the OSGi bits.Upgrading now would be a risk for the 2.7 release, so we keep using the stable 2.1.4 release.
CAMEL-3750 Provide a common mechanism to facilitate configuration of TLS across Camel components CXF provides a nice Spring Namespace handler for configuring TLS options on the Jetty transport.  Configuring these options using XML in Spring or through a simplified set of utility classes decreases the learning curve for users by sheltering them from the horrors of JSSE.There are a large number of components in Camel that deal with socket communication at some level, but they all require users to learn the specific low level configuration capabilities of the library on which the component is based in order to configure custom TLS options.It would be convenient if users didn't need to learn the advanced networking configuration options for each component.This enhancement suggests a similar Spring Namespace handler and utility classes that allow for simplified configuration of an SSLContext as well as adding provisions to some of the Camel components in order to accept this new configuration mechanism.  The initial components to support the new configuration mechanism are the http, http4, and Jetty components.  Other components would follow.An example usage is below.Programmatic configuration:{code}KeyStoreParameters ksp = new KeyStoreParameters();ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString());ksp.setPassword(pwd);ksp.setContext(context);        KeyManagersParameters kmp = new KeyManagersParameters();kmp.setKeyPassword(pwd);kmp.setKeyStore(ksp);TrustManagersParameters tmp = new TrustManagersParameters();tmp.setKeyStore(ksp);        SSLContextParameters sslContextParameters = new SSLContextParameters();sslContextParameters.setKeyManagers(kmp);sslContextParameters.setTrustManagers(tmp);{code}XML Configuration:{code:XML}<SSLContextParameters id="sslContextParameters" secureSocketProtocol="TLS">  <keyManagers      keyPassword="password">    <keyStore resource="./localhost.jks" password="password"/>  </keyManagers>  <secureSocketProtocolsFilter>    <include>TLS.*</include>  </secureSocketProtocolsFilter></SSLContextParameters>{code}Usage in a route:{code}from("jetty:https://localhost:443/hello?sslContextParametersRef=sslContextParameters").process(proc);{code} New Feature Provide a common mechanism to facilitate configuration of TLS across Camel components CXF provides a nice Spring Namespace handler for configuring TLS options on the Jetty transport.  Configuring these options using XML in Spring or through a simplified set of utility classes decreases the learning curve for users by sheltering them from the horrors of JSSE.There are a large number of components in Camel that deal with socket communication at some level, but they all require users to learn the specific low level configuration capabilities of the library on which the component is based in order to configure custom TLS options.It would be convenient if users didn't need to learn the advanced networking configuration options for each component.This enhancement suggests a similar Spring Namespace handler and utility classes that allow for simplified configuration of an SSLContext as well as adding provisions to some of the Camel components in order to accept this new configuration mechanism.  The initial components to support the new configuration mechanism are the http, http4, and Jetty components.  Other components would follow.An example usage is below.Programmatic configuration:{code}KeyStoreParameters ksp = new KeyStoreParameters();ksp.setResource(this.getClass().getClassLoader().getResource("jsse/localhost.ks").toString());ksp.setPassword(pwd);ksp.setContext(context);        KeyManagersParameters kmp = new KeyManagersParameters();kmp.setKeyPassword(pwd);kmp.setKeyStore(ksp);TrustManagersParameters tmp = new TrustManagersParameters();tmp.setKeyStore(ksp);        SSLContextParameters sslContextParameters = new SSLContextParameters();sslContextParameters.setKeyManagers(kmp);sslContextParameters.setTrustManagers(tmp);{code}XML Configuration:{code:XML}<SSLContextParameters id="sslContextParameters" secureSocketProtocol="TLS">  <keyManagers      keyPassword="password">    <keyStore resource="./localhost.jks" password="password"/>  </keyManagers>  <secureSocketProtocolsFilter>    <include>TLS.*</include>  </secureSocketProtocolsFilter></SSLContextParameters>{code}Usage in a route:{code}from("jetty:https://localhost:443/hello?sslContextParametersRef=sslContextParameters").process(proc);{code}
CAMEL-3748 Rename war archetype to webconsole, and let the new light-war be the new war archetype We should name the archetypes better- war => webconsole- light-war => web Task Rename war archetype to webconsole, and let the new light-war be the new war archetype We should name the archetypes better- war => webconsole- light-war => web
CAMEL-3747 create a camel bundle archetype we don't have an archetype yet for creating a camel route as an OSGi bundle. Might be worth creating one so folks hacking camel can easily make a jar + bundle in the same archetype.Maybe a Spring one and a blueprint one? New Feature create a camel bundle archetype we don't have an archetype yet for creating a camel route as an OSGi bundle. Might be worth creating one so folks hacking camel can easily make a jar + bundle in the same archetype.Maybe a Spring one and a blueprint one?
CAMEL-3746 register a customized typeconverter in Spring Can I register a customized typeconverter in spring xml? Now I just use below code.CamelContext context = new DefaultCamelContext();context.getTypeConverterRegistry().addTypeConverter(InputStream.class, String.class, new StringToInputStreamConverter()); Wish register a customized typeconverter in Spring Can I register a customized typeconverter in spring xml? Now I just use below code.CamelContext context = new DefaultCamelContext();context.getTypeConverterRegistry().addTypeConverter(InputStream.class, String.class, new StringToInputStreamConverter());
CAMEL-3745 Simple language - is operator should add error message if type is null We should add a better error message if is (instancceof) is being evaluated to a null type.Currently you get an error about null class not being able to found. Improvement Simple language - is operator should add error message if type is null We should add a better error message if is (instancceof) is being evaluated to a null type.Currently you get an error about null class not being able to found.
CAMEL-3744 Add example how to use Camel servlet with Tomcat An example how to use Servlet with Tomcat would be great. This is basic stuff and also ensures we test it on popular containers. New Feature Add example how to use Camel servlet with Tomcat An example how to use Servlet with Tomcat would be great. This is basic stuff and also ensures we test it on popular containers.
CAMEL-3741 Add new options to camel-jt400 I've added a new feature to the existing camel-jt400 component to enable the remote program call of iSeries programs.This implementation was successfully tested with the jt400 library already included in the pom dependencies against real systems running the version V5R4 od the OS.The usage of this new feature is exactly the same of the DATQ feature except the path now has to point to a PGM file and there are 2 mandatory arguments: outputFieldsIdx and fieldsLength.*outputFieldsIdx* register which parameters of the program will be INPUT/OUTPUT (as oposed of only INPUT)*fieldsLength*: registers the mandatory parameters lengthSample usage in a route (included in the test case)from("direct:a").to("jt400://user:password@host/QSYS.LIB/library.LIB/program.pgm?outputFieldsIdx=1,2&fieldsLength=4,512,2").to("mock:a");I'm including a patch to both 2.6.0 and trunk as of today.Please let me know if something is not OK.. I'm more than happy to make the adjustments. New Feature Add new options to camel-jt400 I've added a new feature to the existing camel-jt400 component to enable the remote program call of iSeries programs.This implementation was successfully tested with the jt400 library already included in the pom dependencies against real systems running the version V5R4 od the OS.The usage of this new feature is exactly the same of the DATQ feature except the path now has to point to a PGM file and there are 2 mandatory arguments: outputFieldsIdx and fieldsLength.*outputFieldsIdx* register which parameters of the program will be INPUT/OUTPUT (as oposed of only INPUT)*fieldsLength*: registers the mandatory parameters lengthSample usage in a route (included in the test case)from("direct:a").to("jt400://user:password@host/QSYS.LIB/library.LIB/program.pgm?outputFieldsIdx=1,2&fieldsLength=4,512,2").to("mock:a");I'm including a patch to both 2.6.0 and trunk as of today.Please let me know if something is not OK.. I'm more than happy to make the adjustments.
CAMEL-3740 camel-servlet - Should exclude servlet spec JAR in pom When using camel-servlet in WAR apps, the dependency on camel-http brings in the servlet spec JAR from Apache Geronimo.We should exclude that, as when using camel-servlet people are most likely to develop WAR apps.See nabblehttp://camel.465427.n5.nabble.com/Camel-Servlet-Tomcat-Problem-tp3405032p3405032.htmlWillem I am assigning this to you. Do you see any problem with this? eg to exclude the spec JAR? Improvement camel-servlet - Should exclude servlet spec JAR in pom When using camel-servlet in WAR apps, the dependency on camel-http brings in the servlet spec JAR from Apache Geronimo.We should exclude that, as when using camel-servlet people are most likely to develop WAR apps.See nabblehttp://camel.465427.n5.nabble.com/Camel-Servlet-Tomcat-Problem-tp3405032p3405032.htmlWillem I am assigning this to you. Do you see any problem with this? eg to exclude the spec JAR?
CAMEL-3739 Logging category in the error handler It is not possible to specify custom logging category in the error handler in the Spring DSL by means of <errorHandler> tag. Improvement Logging category in the error handler It is not possible to specify custom logging category in the error handler in the Spring DSL by means of <errorHandler> tag.
CAMEL-3738 Let log, log eip and mock producer be async processor We should prefer to use the async processor for the Camel EIPs and components when possible. This avoids the tiny overhead of having a sync to async adapter (implemented using a converter). Improvement Let log, log eip and mock producer be async processor We should prefer to use the async processor for the Camel EIPs and components when possible. This avoids the tiny overhead of having a sync to async adapter (implemented using a converter).
CAMEL-3737 ResequenceDefinition in XML allows 2 configurations to be specified, <batchConfig> and <streamConfig> which is not ideal. Right now its possible in XML to specify both kinds of configuration; batchConfig and streamConfig. This isn't ideal and the definition is a bit floored.{code}   // Binding annotation at setter    private BatchResequencerConfig batchConfig;    // Binding annotation at setter    private StreamResequencerConfig streamConfig;{code}It should probably use the same JAXB stuff as MarshalDefinition so that it can take one element of a list of possible value types:{code}public class MarshalDefinition extends OutputDefinition<MarshalDefinition> {    // cannot use @XmlElementRef as it doesn't allow optional properties    @XmlElements({    @XmlElement(required = false, name = "bindy", type = BindyDataFormat.class),    @XmlElement(required = false, name = "castor", type = CastorDataFormat.class),    @XmlElement(required = false, name = "csv", type = CsvDataFormat.class),    @XmlElement(required = false, name = "crypto", type = CryptoDataFormat.class),    @XmlElement(required = false, name = "flatpack", type = FlatpackDataFormat.class),    @XmlElement(required = false, name = "gzip", type = GzipDataFormat.class),    @XmlElement(required = false, name = "hl7", type = HL7DataFormat.class),    @XmlElement(required = false, name = "jaxb", type = JaxbDataFormat.class),    @XmlElement(required = false, name = "jibx", type = JibxDataFormat.class),    @XmlElement(required = false, name = "json", type = JsonDataFormat.class),    @XmlElement(required = false, name = "rss", type = RssDataFormat.class),    @XmlElement(required = false, name = "secureXML", type = XMLSecurityDataFormat.class),    @XmlElement(required = false, name = "serialization", type = SerializationDataFormat.class),    @XmlElement(required = false, name = "string", type = StringDataFormat.class),    @XmlElement(required = false, name = "syslog", type = SyslogDataFormat.class),    @XmlElement(required = false, name = "xmlBeans", type = XMLBeansDataFormat.class),    @XmlElement(required = false, name = "xstream", type = XStreamDataFormat.class),    @XmlElement(required = false, name = "zip", type = ZipDataFormat.class)}    )    private DataFormatDefinition dataFormatType;{code} Task ResequenceDefinition in XML allows 2 configurations to be specified, <batchConfig> and <streamConfig> which is not ideal. Right now its possible in XML to specify both kinds of configuration; batchConfig and streamConfig. This isn't ideal and the definition is a bit floored.{code}   // Binding annotation at setter    private BatchResequencerConfig batchConfig;    // Binding annotation at setter    private StreamResequencerConfig streamConfig;{code}It should probably use the same JAXB stuff as MarshalDefinition so that it can take one element of a list of possible value types:{code}public class MarshalDefinition extends OutputDefinition<MarshalDefinition> {    // cannot use @XmlElementRef as it doesn't allow optional properties    @XmlElements({    @XmlElement(required = false, name = "bindy", type = BindyDataFormat.class),    @XmlElement(required = false, name = "castor", type = CastorDataFormat.class),    @XmlElement(required = false, name = "csv", type = CsvDataFormat.class),    @XmlElement(required = false, name = "crypto", type = CryptoDataFormat.class),    @XmlElement(required = false, name = "flatpack", type = FlatpackDataFormat.class),    @XmlElement(required = false, name = "gzip", type = GzipDataFormat.class),    @XmlElement(required = false, name = "hl7", type = HL7DataFormat.class),    @XmlElement(required = false, name = "jaxb", type = JaxbDataFormat.class),    @XmlElement(required = false, name = "jibx", type = JibxDataFormat.class),    @XmlElement(required = false, name = "json", type = JsonDataFormat.class),    @XmlElement(required = false, name = "rss", type = RssDataFormat.class),    @XmlElement(required = false, name = "secureXML", type = XMLSecurityDataFormat.class),    @XmlElement(required = false, name = "serialization", type = SerializationDataFormat.class),    @XmlElement(required = false, name = "string", type = StringDataFormat.class),    @XmlElement(required = false, name = "syslog", type = SyslogDataFormat.class),    @XmlElement(required = false, name = "xmlBeans", type = XMLBeansDataFormat.class),    @XmlElement(required = false, name = "xstream", type = XStreamDataFormat.class),    @XmlElement(required = false, name = "zip", type = ZipDataFormat.class)}    )    private DataFormatDefinition dataFormatType;{code}
CAMEL-3736 BeanDefinition.beanType should be of type String rather than Class so that the XML can be parsed without necessarily having the full class loader available at XML parse time. does using Class even work? Its probably safer to make the Class attribute an @XmlTransient and add an @XmlAttribute String type field/attribute which is used to lazily create the beanType Class using the context/current class loader so that JAXB doesn't need to have to worry about class loaders Task BeanDefinition.beanType should be of type String rather than Class so that the XML can be parsed without necessarily having the full class loader available at XML parse time. does using Class even work? Its probably safer to make the Class attribute an @XmlTransient and add an @XmlAttribute String type field/attribute which is used to lazily create the beanType Class using the context/current class loader so that JAXB doesn't need to have to worry about class loaders
CAMEL-3734 Upgrade to CXF 2.3.5 Ticket pending upgrade to CXF 2.3.4 when its released as it fixes an issue with a Camel example running in Tomcat. Task Upgrade to CXF 2.3.5 Ticket pending upgrade to CXF 2.3.4 when its released as it fixes an issue with a Camel example running in Tomcat.
CAMEL-3733 Add comments on the CamelContextTestSupport class to tell user to start the camel context manually when the test doesn't use the RouteBuilder Current CamelContextTestSupport class will not start the camelcontext if the isUseRouteBuilder() return false.If the component that is used by template needs to be started, your test method will get the NPE or some strange error.And you can these load when shutting down the camel context.{code}Mar 1, 2011 4:31:29 PM org.apache.camel.test.junit4.CamelTestSupport tearDownINFO: Testing done: com.fusesource.example.camel.cxf.jms.HelloWorldClient@e49d67cMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext:camel-1) is shutting downMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext createManagementStrategyINFO: JMX is disabled. Using DefaultManagementStrategy.Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdownINFO: Starting to graceful shutdown 0 routes (timeout 10 seconds)Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdownINFO: Graceful shutdown of 0 routes completed in 0 secondsMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Uptime: not startedMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext: camel-1) is shutdown in 0.023 seconds{code} Improvement Add comments on the CamelContextTestSupport class to tell user to start the camel context manually when the test doesn't use the RouteBuilder Current CamelContextTestSupport class will not start the camelcontext if the isUseRouteBuilder() return false.If the component that is used by template needs to be started, your test method will get the NPE or some strange error.And you can these load when shutting down the camel context.{code}Mar 1, 2011 4:31:29 PM org.apache.camel.test.junit4.CamelTestSupport tearDownINFO: Testing done: com.fusesource.example.camel.cxf.jms.HelloWorldClient@e49d67cMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext:camel-1) is shutting downMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext createManagementStrategyINFO: JMX is disabled. Using DefaultManagementStrategy.Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdownINFO: Starting to graceful shutdown 0 routes (timeout 10 seconds)Mar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultShutdownStrategy doShutdownINFO: Graceful shutdown of 0 routes completed in 0 secondsMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Uptime: not startedMar 1, 2011 4:31:29 PM org.apache.camel.impl.DefaultCamelContext doStopINFO: Apache Camel 2.6.0-fuse-00-00 (CamelContext: camel-1) is shutdown in 0.023 seconds{code}
CAMEL-3732 Upgrade CXF version to 2.3.3 As CXF 2.3.3 is just released, we should upgrade it for camel-cxf.  Improvement Upgrade CXF version to 2.3.3 As CXF 2.3.3 is just released, we should upgrade it for camel-cxf. 
CAMEL-3731 IgnoreInvalidEndpoint should log invalid endpoints at DEBUG level Currently its logged at INFO level with full stacktrace. If end user enabled this option we should only log it at DEBUG level to avoid spamming production logs.See nabblehttp://camel.465427.n5.nabble.com/camel-recipientList-with-ignoreInvalidEndpoints-true-tp3404103p3404103.html Improvement IgnoreInvalidEndpoint should log invalid endpoints at DEBUG level Currently its logged at INFO level with full stacktrace. If end user enabled this option we should only log it at DEBUG level to avoid spamming production logs.See nabblehttp://camel.465427.n5.nabble.com/camel-recipientList-with-ignoreInvalidEndpoints-true-tp3404103p3404103.html
CAMEL-3728 Add documentation for DNS component We need documentation for the new DNS component. Task Add documentation for DNS component We need documentation for the new DNS component.
CAMEL-3725 mvn -e site with version 2.6.0 crashes because no TypeConversions can be found I have a simple camel project just using camel-core and camel-spring (and some other dependencies.All camel related versions are configured with a maven property.With camel.version = 2.5.0  when I run:   mvn siteit builds successfully.Switching to 2.6.0 the build fails with the following stackdump :mvn site...snip...[INFO] ------------------------------------------------------------------------[ERROR] BUILD ERROR[INFO] ------------------------------------------------------------------------[INFO] Error during page generationEmbedded error: Error rendering Maven report: Failed to generate TypeConverters reportFailed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter][INFO] ------------------------------------------------------------------------[INFO] Traceorg.apache.maven.lifecycle.LifecycleExecutionException: Error during page generation	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	at java.lang.reflect.Method.invoke(Method.java:597)	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)Caused by: org.apache.maven.plugin.MojoExecutionException: Error during page generation	at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:114)	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)	... 17 moreCaused by: org.apache.maven.doxia.siterenderer.RendererException: Error rendering Maven report: Failed to generate TypeConverters report	at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:174)	at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:328)	at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:132)	at org.apache.maven.plugins.site.SiteMojo.renderLocale(SiteMojo.java:142)	at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:109)	... 19 moreCaused by: org.apache.maven.reporting.MavenReportException: Failed to generate TypeConverters report	at org.apache.camel.maven.ConvertersMojo.executeReport(ConvertersMojo.java:256)	at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:90)	at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:164)	... 23 moreCaused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:77)	at org.apache.camel.maven.ConvertersMojo.executeReport(ConvertersMojo.java:246)	... 25 more[INFO] ------------------------------------------------------------------------[INFO] Total time: 9 seconds[INFO] Finished at: Sat Feb 26 19:17:42 CET 2011[INFO] Final Memory: 72M/379M[INFO] ------------------------------------------------------------------------pti@pti-laptop:~/Projects/holdlot$  Task mvn -e site with version 2.6.0 crashes because no TypeConversions can be found I have a simple camel project just using camel-core and camel-spring (and some other dependencies.All camel related versions are configured with a maven property.With camel.version = 2.5.0  when I run:   mvn siteit builds successfully.Switching to 2.6.0 the build fails with the following stackdump :mvn site...snip...[INFO] ------------------------------------------------------------------------[ERROR] BUILD ERROR[INFO] ------------------------------------------------------------------------[INFO] Error during page generationEmbedded error: Error rendering Maven report: Failed to generate TypeConverters reportFailed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter][INFO] ------------------------------------------------------------------------[INFO] Traceorg.apache.maven.lifecycle.LifecycleExecutionException: Error during page generation	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:719)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:556)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:535)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:387)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:348)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:180)	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:328)	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:138)	at org.apache.maven.cli.MavenCli.main(MavenCli.java:362)	at org.apache.maven.cli.compat.CompatibleMain.main(CompatibleMain.java:60)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	at java.lang.reflect.Method.invoke(Method.java:597)	at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)	at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)	at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)	at org.codehaus.classworlds.Launcher.main(Launcher.java:375)Caused by: org.apache.maven.plugin.MojoExecutionException: Error during page generation	at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:114)	at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:490)	at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:694)	... 17 moreCaused by: org.apache.maven.doxia.siterenderer.RendererException: Error rendering Maven report: Failed to generate TypeConverters report	at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:174)	at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.renderModule(DefaultSiteRenderer.java:328)	at org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:132)	at org.apache.maven.plugins.site.SiteMojo.renderLocale(SiteMojo.java:142)	at org.apache.maven.plugins.site.SiteMojo.execute(SiteMojo.java:109)	... 19 moreCaused by: org.apache.maven.reporting.MavenReportException: Failed to generate TypeConverters report	at org.apache.camel.maven.ConvertersMojo.executeReport(ConvertersMojo.java:256)	at org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:90)	at org.apache.maven.plugins.site.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:164)	... 23 moreCaused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.component.file, org.apache.camel.component.bean, org.apache.camel.converter]	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:77)	at org.apache.camel.maven.ConvertersMojo.executeReport(ConvertersMojo.java:246)	... 25 more[INFO] ------------------------------------------------------------------------[INFO] Total time: 9 seconds[INFO] Finished at: Sat Feb 26 19:17:42 CET 2011[INFO] Final Memory: 72M/379M[INFO] ------------------------------------------------------------------------pti@pti-laptop:~/Projects/holdlot$ 
CAMEL-3724 Remove <beanPostProcessor> tag from Spring DSL It doesnt provide any value for end users. So lets remove it.Camel uses its own bean post processor to support the @Produce/@Consume injection stuff. Task Remove <beanPostProcessor> tag from Spring DSL It doesnt provide any value for end users. So lets remove it.Camel uses its own bean post processor to support the @Produce/@Consume injection stuff.
CAMEL-3723 Camel properties component - Add support for pluggable scheme We should change the API so end user can more easily add 3rd party resolvers based on scheme.Then they can add JNDI, zookeeper, or any other 3rd party they like.Currently you kinda have to delegate to the existing resolvers. It would be easier to have a Set of scheme that's supported.And then use the order they are defined in the location as a chain to resolve a property. New Feature Camel properties component - Add support for pluggable scheme We should change the API so end user can more easily add 3rd party resolvers based on scheme.Then they can add JNDI, zookeeper, or any other 3rd party they like.Currently you kinda have to delegate to the existing resolvers. It would be easier to have a Set of scheme that's supported.And then use the order they are defined in the location as a chain to resolve a property.
CAMEL-3722 ThreadPoolProfile - Use string types so its much easier to use property placeholders In the XML DSL you can use threadPoolProfile to define profiles for thread pools. People may want to use property placeholders for min/max values etc. Using xs:string is thus much easier to do that. We do that for some of the others such as <jmxAgent> Improvement ThreadPoolProfile - Use string types so its much easier to use property placeholders In the XML DSL you can use threadPoolProfile to define profiles for thread pools. People may want to use property placeholders for min/max values etc. Using xs:string is thus much easier to do that. We do that for some of the others such as <jmxAgent>
CAMEL-3721 Camel properties component - Add support for using jvm system/env in location For example you may want to say {{location=${karaf.hom}/etc/myprop.properties}}.eg where karaf.home is a jvm system property.Take a look at simple as we may want to be able to lookup environment variable also. Improvement Camel properties component - Add support for using jvm system/env in location For example you may want to say {{location=${karaf.hom}/etc/myprop.properties}}.eg where karaf.home is a jvm system property.Take a look at simple as we may want to be able to lookup environment variable also.
CAMEL-3714 camel-jms: testConnectionOnStartup does not test connection for producers I have a camel context which configures jms producers, but no jms consumers.  With this configuration, the "testConnectionOnStartup" jms option did not test the connection when I started the camel context.  I have discovered that (with the current implementation) the "testConnectionOnStartup" option only applies to consumers.  I see that it is implemented in JmsConsumer.doStart() -> JmsConsumer.testConnectionOnStartup().  It would be useful if this option could also applied to producers.As a workaround, I configured a dummy route and a dummy jms consumer. Improvement camel-jms: testConnectionOnStartup does not test connection for producers I have a camel context which configures jms producers, but no jms consumers.  With this configuration, the "testConnectionOnStartup" jms option did not test the connection when I started the camel context.  I have discovered that (with the current implementation) the "testConnectionOnStartup" option only applies to consumers.  I see that it is implemented in JmsConsumer.doStart() -> JmsConsumer.testConnectionOnStartup().  It would be useful if this option could also applied to producers.As a workaround, I configured a dummy route and a dummy jms consumer.
CAMEL-3712 Share route preparation logic between Java DSL and XML DSL Until now it hasn't been possible to share the route preparation logic between Java DSL and XML DSL as they used to be a bit too different. However over the recent versions we have improved that. Now its possible to fully share the logic. Improvement Share route preparation logic between Java DSL and XML DSL Until now it hasn't been possible to share the route preparation logic between Java DSL and XML DSL as they used to be a bit too different. However over the recent versions we have improved that. Now its possible to fully share the logic.
CAMEL-3710 Add String to char type converter See nabblehttp://camel.465427.n5.nabble.com/How-to-specify-tab-delimiter-for-flatpack-tp3397320p3397320.htmlThis makes it easier to configure the delimiter in flatpack as it uses a char type. And in the endpoint uri it's all String Improvement Add String to char type converter See nabblehttp://camel.465427.n5.nabble.com/How-to-specify-tab-delimiter-for-flatpack-tp3397320p3397320.htmlThis makes it easier to configure the delimiter in flatpack as it uses a char type. And in the endpoint uri it's all String
CAMEL-3708 Tidy up AST model to proper support output or not We should tidy up the model, so they clearly indicate if- outputs supported- no outputseg when an EIP supports output, they can be nested/added to it, eg in XML its like{code:xml}<split>  <output 1>  <output 2></split>{code}But some EIPs indicate they support output, but they dont. For example <to> should not support output as it doesn't make sense.We should introduce a {{isOutputSupported}} on the {{ProcessorDefinition}} and then check each EIP.This will cause changes to the XSD in that regard EIPs which really didn't support output (eg it was hacked that way in Java code) but the XSD would allow outputs, eg{code:xml}<to uri="xxx">   <output 1>   <output 2></to>{code}Now this would not be possible and you would have to do{code:xml}<to uri="xxx"/><output 1><output 2>{code}This will in fact reduce the XSD and make it more concise when outputs is supported or not. Improvement Tidy up AST model to proper support output or not We should tidy up the model, so they clearly indicate if- outputs supported- no outputseg when an EIP supports output, they can be nested/added to it, eg in XML its like{code:xml}<split>  <output 1>  <output 2></split>{code}But some EIPs indicate they support output, but they dont. For example <to> should not support output as it doesn't make sense.We should introduce a {{isOutputSupported}} on the {{ProcessorDefinition}} and then check each EIP.This will cause changes to the XSD in that regard EIPs which really didn't support output (eg it was hacked that way in Java code) but the XSD would allow outputs, eg{code:xml}<to uri="xxx">   <output 1>   <output 2></to>{code}Now this would not be possible and you would have to do{code:xml}<to uri="xxx"/><output 1><output 2>{code}This will in fact reduce the XSD and make it more concise when outputs is supported or not.
CAMEL-3707 Sort EIP - Should not have outputs and it should be a NoExpressionNode Sort EIP doesn't have output. And in the Spring XML it should loose the <expression> tag and be like the others which requires and expression, eg delayer etc.So there will be slight XML change. Improvement Sort EIP - Should not have outputs and it should be a NoExpressionNode Sort EIP doesn't have output. And in the Spring XML it should loose the <expression> tag and be like the others which requires and expression, eg delayer etc.So there will be slight XML change.
CAMEL-3705 dnsjava osgi bundle. The existing bundles for dnsjava are not yet released via maven. Waiting for a bundle update/release. Sub-task dnsjava osgi bundle. The existing bundles for dnsjava are not yet released via maven. Waiting for a bundle update/release.
CAMEL-3703 resequencer EIP - Reorder so batch-config / stream-config is in top and not in bottom in XML DSL Its kinda stupid that you have to configure <batch-config> in the bottom of <resequence> which have outputs. It should be in the top. Improvement resequencer EIP - Reorder so batch-config / stream-config is in top and not in bottom in XML DSL Its kinda stupid that you have to configure <batch-config> in the bottom of <resequence> which have outputs. It should be in the top.
CAMEL-3701 Update to Camel-Restlet Component Updated camel-restlet to compile and run against Restlet version 2.1-M1.Camel-restlet can now return more types than just a string. Improvement Update to Camel-Restlet Component Updated camel-restlet to compile and run against Restlet version 2.1-M1.Camel-restlet can now return more types than just a string.
CAMEL-3700 Resequencer EIP - Add support for property placeholders in the batch-config and stream-config tags The batch-config and stream-config uses fixed types such as xs:int, xs:boolean etc. so you cannot use property placeholders.This is desireable so you can easily configure capacity, timeout etc. Improvement Resequencer EIP - Add support for property placeholders in the batch-config and stream-config tags The batch-config and stream-config uses fixed types such as xs:int, xs:boolean etc. so you cannot use property placeholders.This is desireable so you can easily configure capacity, timeout etc.
CAMEL-3699 Camel-Test for TestNG JUnit components for Camel-Test redone for the latest version TestNG. New Feature Camel-Test for TestNG JUnit components for Camel-Test redone for the latest version TestNG.
CAMEL-3696 ResequenceDefinition probably should not take a List<ExpressionDefinition> for easier operation among the various DSLs (Java + XML etc) since expressions in most languages can easily do composites An expression language is usually fairly powerful & can be used to create a collection of expressions. (e.g. in XPath: /foo + /bar). We use expressions extensively throughout Camel and all expressions may need to be a 'composite' of different expressions which really is just a single Expression object.If folks find there are times when an Expression cannot be easily created from a composite within a language (e.g. a language that doesn't support +) then we could always have a composite language which is a collection of expression objects - which itself is an Expression, so that we then have consistency across the model.To say this another way; if one pattern takes a List<ExpressionDefinition> then why don't they all? We might want to Resequence or Aggregate using a composite expression etc.So a simpler solution is just to say that an Expression is exactly that - an arbitrary expression (which may be implemented using a concatenation of multiple expressions) but then from the EIP model and DSL, its simply a single Expression instance so its then easy to keep all the DSLs in sync and the model consistent.In the specific case of the Resequence, the expression is simply used to create a value which can then be used to sort messages; so its an expression returning a single object; which sounds like a single Expression to me. Improvement ResequenceDefinition probably should not take a List<ExpressionDefinition> for easier operation among the various DSLs (Java + XML etc) since expressions in most languages can easily do composites An expression language is usually fairly powerful & can be used to create a collection of expressions. (e.g. in XPath: /foo + /bar). We use expressions extensively throughout Camel and all expressions may need to be a 'composite' of different expressions which really is just a single Expression object.If folks find there are times when an Expression cannot be easily created from a composite within a language (e.g. a language that doesn't support +) then we could always have a composite language which is a collection of expression objects - which itself is an Expression, so that we then have consistency across the model.To say this another way; if one pattern takes a List<ExpressionDefinition> then why don't they all? We might want to Resequence or Aggregate using a composite expression etc.So a simpler solution is just to say that an Expression is exactly that - an arbitrary expression (which may be implemented using a concatenation of multiple expressions) but then from the EIP model and DSL, its simply a single Expression instance so its then easy to keep all the DSLs in sync and the model consistent.In the specific case of the Resequence, the expression is simply used to create a value which can then be used to sort messages; so its an expression returning a single object; which sounds like a single Expression to me.
CAMEL-3695 Remove logic in CxfConsumer which checks for CXF 2.3 version CXF 2.3+ is required for Camel 2.7 onward, so the logic in CxfConsumer should not check for version. Task Remove logic in CxfConsumer which checks for CXF 2.3 version CXF 2.3+ is required for Camel 2.7 onward, so the logic in CxfConsumer should not check for version.
CAMEL-3694 CxfConsumer creates Continuation even when Endpoint is configured as synchronous. I am trying to get the camel-example-cxf-tomcat example running in a Servlet 3.0 container (Tomcat 7 and GlassFish v3). The example does not work directly on these platforms, as they require the CXFServlet async-supported property to be set to true (due to CxfEndpoint by default wanting to use the async API). I expected that when I configure the CxfEndpoint to be synchronous, that I do not need to modify the async-supported property of CXFServlet in the web.xml. However the "Continuation" used for async invocation is created before the synchronous property of the CxfEndpoint is evaluated, effectively requiring the async-supported to be true anyway.If my assumption that setting synchronous property on the CxfEndpoint should be sufficient, I propose to modify CxfConsumer (that creates the Continuation) to ensure the synchronous property is evaluated before any Continuation is created. Improvement CxfConsumer creates Continuation even when Endpoint is configured as synchronous. I am trying to get the camel-example-cxf-tomcat example running in a Servlet 3.0 container (Tomcat 7 and GlassFish v3). The example does not work directly on these platforms, as they require the CXFServlet async-supported property to be set to true (due to CxfEndpoint by default wanting to use the async API). I expected that when I configure the CxfEndpoint to be synchronous, that I do not need to modify the async-supported property of CXFServlet in the web.xml. However the "Continuation" used for async invocation is created before the synchronous property of the CxfEndpoint is evaluated, effectively requiring the async-supported to be true anyway.If my assumption that setting synchronous property on the CxfEndpoint should be sufficient, I propose to modify CxfConsumer (that creates the Continuation) to ensure the synchronous property is evaluated before any Continuation is created.
CAMEL-3693 have a way to validate the model is correct according to JAXB and bean introspection rules Its very easy for us to create JAXB objects which can only be used from JAXB marshalling and not from Java code or introspection. Or that we can introduce JAXB bugs by inconsistent annotation usage.We should write a little validator tool that iterates through all *Definition classes inside org.apache.camel.model.* and checks that...* for every field which is annotated with @XmlElementRef or @XmlAttribute or @XmlElement that it has a valid getter and setter* all getters of type "boolean" are called isFoo whereas all other getters (including of type Boolean) are called getFoo* we are careful to specify @XmlAccessorType(XmlAccessType.FIELD) on the class - or at least are consistent in JAXB annotations being either all on fields or all on properties (e.g. ResequenceDefinition is missing right now and has mixed JAXB annotations) Improvement have a way to validate the model is correct according to JAXB and bean introspection rules Its very easy for us to create JAXB objects which can only be used from JAXB marshalling and not from Java code or introspection. Or that we can introduce JAXB bugs by inconsistent annotation usage.We should write a little validator tool that iterates through all *Definition classes inside org.apache.camel.model.* and checks that...* for every field which is annotated with @XmlElementRef or @XmlAttribute or @XmlElement that it has a valid getter and setter* all getters of type "boolean" are called isFoo whereas all other getters (including of type Boolean) are called getFoo* we are careful to specify @XmlAccessorType(XmlAccessType.FIELD) on the class - or at least are consistent in JAXB annotations being either all on fields or all on properties (e.g. ResequenceDefinition is missing right now and has mixed JAXB annotations)
CAMEL-3692 badly named getter methods for type "Boolean" Since changing loads of types from "boolean" -> "Boolean", we left many of the getter methods using "isFoo" rather than changing them to the Java Beans compliant "getFoo". Breaking the Java Beans specification for naming properties can cause issues with libraries and tools; since the property is no longer introspectable or readable in any introspection based tool (of which there are loads around).e.g. go to camel-core/src/main/java/org/apache/camel/model/ then in your IDE search for "Boolean is". Those isFoo methods returning Boolean should be returned isFoo. For completeness we could also generate an isFoo for backwards compatibility that looks like...public boolean isFoo() { return foo != null && foo.booleanValue(); } Improvement badly named getter methods for type "Boolean" Since changing loads of types from "boolean" -> "Boolean", we left many of the getter methods using "isFoo" rather than changing them to the Java Beans compliant "getFoo". Breaking the Java Beans specification for naming properties can cause issues with libraries and tools; since the property is no longer introspectable or readable in any introspection based tool (of which there are loads around).e.g. go to camel-core/src/main/java/org/apache/camel/model/ then in your IDE search for "Boolean is". Those isFoo methods returning Boolean should be returned isFoo. For completeness we could also generate an isFoo for backwards compatibility that looks like...public boolean isFoo() { return foo != null && foo.booleanValue(); }
CAMEL-3691 Replace isXX for Boolean types in model to getXXX to better support java bean introsepction Boolean type should use getXXX instead of isXXX Task Replace isXX for Boolean types in model to getXXX to better support java bean introsepction Boolean type should use getXXX instead of isXXX
CAMEL-3689 Let it be possible to add/remove/etc. nodes from a route when unit testing Using the {{adviceWith}} when unit testing, it should be possible to add new nodes into the route, or remove, or replace etc.For example if you have a route for production, you may want to replace parts of the route during an integration test, in case that given part cannot be tested in the test environment.We need a DSL to more easily do this, so end users don't have to use low level RouteDefinition manipulation.  New Feature Let it be possible to add/remove/etc. nodes from a route when unit testing Using the {{adviceWith}} when unit testing, it should be possible to add new nodes into the route, or remove, or replace etc.For example if you have a route for production, you may want to replace parts of the route during an integration test, in case that given part cannot be tested in the test environment.We need a DSL to more easily do this, so end users don't have to use low level RouteDefinition manipulation. 
CAMEL-3688 Add repeatCount option to timer component Sometimes you may just want to trigger a route once on startup. And using a timer for that would be easy. But the timer will keep firing. So we need a {{repeatCount}} option.If we exceed the count then it should not emit any message.Ideally it should unschedule the task, and reset the count.Remember the current count is state full per timer task. So it needs to be stored on the task. As you can have multiple timer tasks running (eg with different names) New Feature Add repeatCount option to timer component Sometimes you may just want to trigger a route once on startup. And using a timer for that would be easy. But the timer will keep firing. So we need a {{repeatCount}} option.If we exceed the count then it should not emit any message.Ideally it should unschedule the task, and reset the count.Remember the current count is state full per timer task. So it needs to be stored on the task. As you can have multiple timer tasks running (eg with different names)
CAMEL-3683 Updated the content message header of multi-part request in camel-cxf component  We need to filter the content type with multi-part, as the multi-part stream is already consumed by AttachmentInInterceptor.If we keep using the old content type, it will cause some trouble when routing this message to another CXF endpoint. Improvement Updated the content message header of multi-part request in camel-cxf component  We need to filter the content type with multi-part, as the multi-part stream is already consumed by AttachmentInInterceptor.If we keep using the old content type, it will cause some trouble when routing this message to another CXF endpoint.
CAMEL-3682 add comments with Camel version in the camel-spring and camel-blueprint XSD files It would be nice to include a <!-- --> comment with the version of the XSD in the XSD file.The reason is the filename without a version, eg camel-spring.xsd you cannot tell the version of Camel it matches.And the online file hasn't been updated in a long time. Tsk tsk Hadrian!http://camel.apache.org/schema/spring/ Improvement add comments with Camel version in the camel-spring and camel-blueprint XSD files It would be nice to include a <!-- --> comment with the version of the XSD in the XSD file.The reason is the filename without a version, eg camel-spring.xsd you cannot tell the version of Camel it matches.And the online file hasn't been updated in a long time. Tsk tsk Hadrian!http://camel.apache.org/schema/spring/
CAMEL-3681 Add byte[] to DOMSource type converter This can be needed when working with XML. Improvement Add byte[] to DOMSource type converter This can be needed when working with XML.
CAMEL-3680 camel-rmi - Add support for using Spring RMI exporter When using Spring RMI exporter then Spring injects a Proxy. This fools Camel when its invoking the RMI service.See nabblehttp://camel.465427.n5.nabble.com/RMI-Component-td3389123.html Improvement camel-rmi - Add support for using Spring RMI exporter When using Spring RMI exporter then Spring injects a Proxy. This fools Camel when its invoking the RMI service.See nabblehttp://camel.465427.n5.nabble.com/RMI-Component-td3389123.html
CAMEL-3679 Workaround the maven javadoc link issue. When running mvn deploy, the javadoc will try to build the javadoc on the other modules, it wastes more than one hour time.{code}[INFO] --- maven-javadoc-plugin:2.7:jar (attach-javadocs) @ camel-core ---[WARNING] Are you sure about the <javadocVersion/> parameter? It seems to be 1.6[ERROR] Error fetching link: http://java.sun.com/j2se/1.5.0/docs/api/package-list. Ignored it.[INFO] The goal 'org.apache.maven.plugins:maven-javadoc-plugin:2.7:javadoc' has not be previously called for the project: 'org.apache.camel:camel-buildtools:jar:2.7.0-SNAPSHOT'. Trying to invoke it...[INFO] The goal 'org.apache.maven.plugins:maven-javadoc-plugin:2.7:javadoc' has not be previously called for the project: 'org.apache.camel:camel-core-xml:jar:2.7.0-SNAPSHOT'. Trying to invoke it...{code} Improvement Workaround the maven javadoc link issue. When running mvn deploy, the javadoc will try to build the javadoc on the other modules, it wastes more than one hour time.{code}[INFO] --- maven-javadoc-plugin:2.7:jar (attach-javadocs) @ camel-core ---[WARNING] Are you sure about the <javadocVersion/> parameter? It seems to be 1.6[ERROR] Error fetching link: http://java.sun.com/j2se/1.5.0/docs/api/package-list. Ignored it.[INFO] The goal 'org.apache.maven.plugins:maven-javadoc-plugin:2.7:javadoc' has not be previously called for the project: 'org.apache.camel:camel-buildtools:jar:2.7.0-SNAPSHOT'. Trying to invoke it...[INFO] The goal 'org.apache.maven.plugins:maven-javadoc-plugin:2.7:javadoc' has not be previously called for the project: 'org.apache.camel:camel-core-xml:jar:2.7.0-SNAPSHOT'. Trying to invoke it...{code}
CAMEL-3678 Java DSL - Allow load balancer to be used inside CBR We should allow to use the load balancer inside the CBR, in eg the when predicate.See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Java-DSL-caveat-with-the-Content-Based-Router-td3389083.html Improvement Java DSL - Allow load balancer to be used inside CBR We should allow to use the load balancer inside the CBR, in eg the when predicate.See nabblehttp://camel.465427.n5.nabble.com/DISCUSS-Java-DSL-caveat-with-the-Content-Based-Router-td3389083.html